
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3c0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800f598  0800f598  00010598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9e8  0800f9e8  000113f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f9e8  0800f9e8  000109e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9f0  0800f9f0  000113f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9f0  0800f9f0  000109f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f9f4  0800f9f4  000109f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003f0  20000000  0800f9f8  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df8  200003f0  0800fde8  000113f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021e8  0800fde8  000121e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000113f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a4e2  00000000  00000000  00011420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fe0  00000000  00000000  0003b902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b60  00000000  00000000  000408e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001555  00000000  00000000  00042448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ce0f  00000000  00000000  0004399d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028ad0  00000000  00000000  000707ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119565  00000000  00000000  0009927c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b27e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b70  00000000  00000000  001b2824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001ba394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200003f0 	.word	0x200003f0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800f580 	.word	0x0800f580

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200003f4 	.word	0x200003f4
 8000214:	0800f580 	.word	0x0800f580

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	e008      	b.n	8000f74 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	4413      	add	r3, r2
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	3301      	adds	r3, #1
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	69fa      	ldr	r2, [r7, #28]
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d3f2      	bcc.n	8000f62 <ADC_DMA_Init+0x42>
    }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3724      	adds	r7, #36	@ 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	217f      	movs	r1, #127	@ 0x7f
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f006 ff51 	bl	8007e40 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6859      	ldr	r1, [r3, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	461a      	mov	r2, r3
 8000fac:	f006 f83a 	bl	8007024 <HAL_ADC_Start_DMA>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	e012      	b.n	8000ff8 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	4413      	add	r3, r2
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]
        samples++;
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	7b1b      	ldrb	r3, [r3, #12]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	68fa      	ldr	r2, [r7, #12]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d3e7      	bcc.n	8000fd2 <ADC_DMA_GetValue+0x1a>
    }


    // Calculate raw ADC value and convert to voltage
    if (samples > 0) {
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00f      	beq.n	8001028 <ADC_DMA_GetValue+0x70>
        float raw_value = (float)sum / samples;
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800101c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001020:	edc7 7a02 	vstr	s15, [r7, #8]
        return raw_value;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	e001      	b.n	800102c <ADC_DMA_GetValue+0x74>
    }

    return 0.0f;
 8001028:	f04f 0300 	mov.w	r3, #0
}
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eeb0 0a67 	vmov.f32	s0, s15
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <ADC_DMA_GetJoystick>:

    // Compute current using WCS1700 formula
    return 15.1793457908771 * voltage - 24.8674344063837;
}

float ADC_DMA_GetJoystick(ADC_DMA *adc_dma, uint8_t channel_index, float joydata) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	460b      	mov	r3, r1
 800104a:	ed87 0a01 	vstr	s0, [r7, #4]
 800104e:	72fb      	strb	r3, [r7, #11]
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	4619      	mov	r1, r3
 8001054:	68f8      	ldr	r0, [r7, #12]
 8001056:	f7ff ffaf 	bl	8000fb8 <ADC_DMA_GetValue>
 800105a:	ed87 0a05 	vstr	s0, [r7, #20]

    return mapf(value, 0.0, adc_dma->adc_resolution, 0.0, joydata);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	edd3 7a05 	vldr	s15, [r3, #20]
 8001064:	ed97 2a01 	vldr	s4, [r7, #4]
 8001068:	eddf 1a08 	vldr	s3, [pc, #32]	@ 800108c <ADC_DMA_GetJoystick+0x4c>
 800106c:	eeb0 1a67 	vmov.f32	s2, s15
 8001070:	eddf 0a06 	vldr	s1, [pc, #24]	@ 800108c <ADC_DMA_GetJoystick+0x4c>
 8001074:	ed97 0a05 	vldr	s0, [r7, #20]
 8001078:	f000 fb54 	bl	8001724 <mapf>
 800107c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001080:	eeb0 0a67 	vmov.f32	s0, s15
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	00000000 	.word	0x00000000

08001090 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	ed87 0a03 	vstr	s0, [r7, #12]
 800109a:	60b8      	str	r0, [r7, #8]
 800109c:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010a8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	dd01      	ble.n	80010ba <PWM_Satuation+0x2a>
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	e013      	b.n	80010e2 <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80010c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	d501      	bpl.n	80010d6 <PWM_Satuation+0x46>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	e005      	b.n	80010e2 <PWM_Satuation+0x52>
  return (int32_t)_u;
 80010d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010de:	ee17 3a90 	vmov	r3, s15
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 80010ee:	b480      	push	{r7}
 80010f0:	b087      	sub	sp, #28
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6178      	str	r0, [r7, #20]
 80010f6:	ed87 0a04 	vstr	s0, [r7, #16]
 80010fa:	edc7 0a03 	vstr	s1, [r7, #12]
 80010fe:	ed87 1a02 	vstr	s2, [r7, #8]
 8001102:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	68fa      	ldr	r2, [r7, #12]
 8001110:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f04f 0200 	mov.w	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	619a      	str	r2, [r3, #24]

}
 8001136:	bf00      	nop
 8001138:	371c      	adds	r7, #28
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	ed93 7a06 	vldr	s14, [r3, #24]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edd3 7a03 	vldr	s15, [r3, #12]
 800115a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	bfac      	ite	ge
 8001164:	2301      	movge	r3, #1
 8001166:	2300      	movlt	r3, #0
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f083 0301 	eor.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10e      	bne.n	8001192 <PID_CONTROLLER_Compute+0x50>
 8001174:	edd7 7a00 	vldr	s15, [r7]
 8001178:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	bfcc      	ite	gt
 8001182:	2301      	movgt	r3, #1
 8001184:	2300      	movle	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d057      	beq.n	8001242 <PID_CONTROLLER_Compute+0x100>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	ed93 7a06 	vldr	s14, [r3, #24]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	edd3 7a03 	vldr	s15, [r3, #12]
 800119e:	eef1 7a67 	vneg.f32	s15, s15
 80011a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011aa:	bf94      	ite	ls
 80011ac:	2301      	movls	r3, #1
 80011ae:	2300      	movhi	r3, #0
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	f083 0301 	eor.w	r3, r3, #1
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d10e      	bne.n	80011da <PID_CONTROLLER_Compute+0x98>
 80011bc:	edd7 7a00 	vldr	s15, [r7]
 80011c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	bf4c      	ite	mi
 80011ca:	2301      	movmi	r3, #1
 80011cc:	2300      	movpl	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	f083 0301 	eor.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d033      	beq.n	8001242 <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	ed93 7a06 	vldr	s14, [r3, #24]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edd3 6a00 	vldr	s13, [r3]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80011ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80011f6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011fa:	edd7 7a00 	vldr	s15, [r7]
 80011fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	ed93 6a00 	vldr	s12, [r3]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	edd3 7a02 	vldr	s15, [r3, #8]
 800120e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001212:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	edd3 7a04 	vldr	s15, [r3, #16]
 800121c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001220:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 6a02 	vldr	s12, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001230:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001234:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8001238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	691a      	ldr	r2, [r3, #16]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	683a      	ldr	r2, [r7, #0]
 800124e:	611a      	str	r2, [r3, #16]
    return controller->u;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	ee07 3a90 	vmov	s15, r3
}
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	60f8      	str	r0, [r7, #12]
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	603b      	str	r3, [r7, #0]
 8001272:	4613      	mov	r3, r2
 8001274:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	68ba      	ldr	r2, [r7, #8]
 800127a:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	88fa      	ldrh	r2, [r7, #6]
 8001280:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	3328      	adds	r3, #40	@ 0x28
 8001286:	88fa      	ldrh	r2, [r7, #6]
 8001288:	68b9      	ldr	r1, [r7, #8]
 800128a:	4618      	mov	r0, r3
 800128c:	f000 fe04 	bl	8001e98 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8b3a      	ldrh	r2, [r7, #24]
 800129a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80012bc:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d15f      	bne.n	800138a <MDXX_set_range+0xda>
		if (duty == 0) {
 80012ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d6:	d115      	bne.n	8001304 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3310      	adds	r3, #16
 80012dc:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 800145c <MDXX_set_range+0x1ac>
 80012e0:	ed97 0a02 	vldr	s0, [r7, #8]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 feff 	bl	80020e8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	3328      	adds	r3, #40	@ 0x28
 80012ee:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 800145c <MDXX_set_range+0x1ac>
 80012f2:	ed97 0a02 	vldr	s0, [r7, #8]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fef6 	bl	80020e8 <PWM_write_range>
			mdxx->cmd = 0;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2200      	movs	r2, #0
 8001300:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 8001302:	e0a6      	b.n	8001452 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001304:	edd7 7a01 	vldr	s15, [r7, #4]
 8001308:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800130c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001310:	dd1a      	ble.n	8001348 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	3310      	adds	r3, #16
 8001316:	eddf 0a51 	vldr	s1, [pc, #324]	@ 800145c <MDXX_set_range+0x1ac>
 800131a:	ed97 0a02 	vldr	s0, [r7, #8]
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fee2 	bl	80020e8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	3328      	adds	r3, #40	@ 0x28
 8001328:	edd7 0a01 	vldr	s1, [r7, #4]
 800132c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fed9 	bl	80020e8 <PWM_write_range>
			mdxx->cmd = duty;
 8001336:	edd7 7a01 	vldr	s15, [r7, #4]
 800133a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800133e:	ee17 2a90 	vmov	r2, s15
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001346:	e084      	b.n	8001452 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3310      	adds	r3, #16
 800134c:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001460 <MDXX_set_range+0x1b0>
 8001350:	ed97 0a02 	vldr	s0, [r7, #8]
 8001354:	4618      	mov	r0, r3
 8001356:	f000 fec7 	bl	80020e8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3328      	adds	r3, #40	@ 0x28
 800135e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001362:	eef0 7ae7 	vabs.f32	s15, s15
 8001366:	eef0 0a67 	vmov.f32	s1, s15
 800136a:	ed97 0a02 	vldr	s0, [r7, #8]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 feba 	bl	80020e8 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001374:	edd7 7a01 	vldr	s15, [r7, #4]
 8001378:	eef0 7ae7 	vabs.f32	s15, s15
 800137c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001380:	ee17 2a90 	vmov	r2, s15
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001388:	e063      	b.n	8001452 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001390:	2b01      	cmp	r3, #1
 8001392:	d15e      	bne.n	8001452 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001394:	edd7 7a01 	vldr	s15, [r7, #4]
 8001398:	eef5 7a40 	vcmp.f32	s15, #0.0
 800139c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a0:	d115      	bne.n	80013ce <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	f007 fc8c 	bl	8008ccc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3328      	adds	r3, #40	@ 0x28
 80013b8:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800145c <MDXX_set_range+0x1ac>
 80013bc:	ed97 0a02 	vldr	s0, [r7, #8]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f000 fe91 	bl	80020e8 <PWM_write_range>
			mdxx->cmd = 0;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2200      	movs	r2, #0
 80013ca:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013cc:	e041      	b.n	8001452 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013da:	dd1a      	ble.n	8001412 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	f007 fc6f 	bl	8008ccc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	3328      	adds	r3, #40	@ 0x28
 80013f2:	edd7 0a01 	vldr	s1, [r7, #4]
 80013f6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f000 fe74 	bl	80020e8 <PWM_write_range>
			mdxx->cmd = duty;
 8001400:	edd7 7a01 	vldr	s15, [r7, #4]
 8001404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001408:	ee17 2a90 	vmov	r2, s15
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001410:	e01f      	b.n	8001452 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800141c:	2201      	movs	r2, #1
 800141e:	4619      	mov	r1, r3
 8001420:	f007 fc54 	bl	8008ccc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3328      	adds	r3, #40	@ 0x28
 8001428:	edd7 7a01 	vldr	s15, [r7, #4]
 800142c:	eef0 7ae7 	vabs.f32	s15, s15
 8001430:	eef0 0a67 	vmov.f32	s1, s15
 8001434:	ed97 0a02 	vldr	s0, [r7, #8]
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fe55 	bl	80020e8 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800143e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001442:	eef0 7ae7 	vabs.f32	s15, s15
 8001446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800144a:	ee17 2a90 	vmov	r2, s15
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	00000000 	.word	0x00000000
 8001460:	42c80000 	.word	0x42c80000

08001464 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	605a      	str	r2, [r3, #4]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	601a      	str	r2, [r3, #0]
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	68ba      	ldr	r2, [r7, #8]
 80014d0:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	605a      	str	r2, [r3, #4]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	ed2d 8b02 	vpush	{d8}
 80014ea:	b08a      	sub	sp, #40	@ 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	460b      	mov	r3, r1
 80014f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80014f6:	edc7 0a00 	vstr	s1, [r7]
 80014fa:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80014fc:	897b      	ldrh	r3, [r7, #10]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	b29b      	uxth	r3, r3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d102      	bne.n	800150e <FIR_init+0x2a>
        numTaps += 1;
 8001508:	897b      	ldrh	r3, [r7, #10]
 800150a:	3301      	adds	r3, #1
 800150c:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	897a      	ldrh	r2, [r7, #10]
 8001512:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 800151a:	897b      	ldrh	r3, [r7, #10]
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4618      	mov	r0, r3
 8001520:	f00d f918 	bl	800e754 <malloc>
 8001524:	4603      	mov	r3, r0
 8001526:	461a      	mov	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 800152c:	897b      	ldrh	r3, [r7, #10]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4618      	mov	r0, r3
 8001532:	f00d f90f 	bl	800e754 <malloc>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	f000 80e0 	beq.w	8001708 <FIR_init+0x224>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80db 	beq.w	8001708 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001552:	2300      	movs	r3, #0
 8001554:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001556:	e00a      	b.n	800156e <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001568:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800156a:	3301      	adds	r3, #1
 800156c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800156e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001570:	897b      	ldrh	r3, [r7, #10]
 8001572:	429a      	cmp	r2, r3
 8001574:	d3f0      	bcc.n	8001558 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001576:	edd7 6a01 	vldr	s13, [r7, #4]
 800157a:	ed97 7a00 	vldr	s14, [r7]
 800157e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001582:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001586:	897b      	ldrh	r3, [r7, #10]
 8001588:	085b      	lsrs	r3, r3, #1
 800158a:	b29b      	uxth	r3, r3
 800158c:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 800158e:	2300      	movs	r3, #0
 8001590:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001592:	e077      	b.n	8001684 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001594:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001598:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800159c:	429a      	cmp	r2, r3
 800159e:	d10c      	bne.n	80015ba <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015b4:	edc3 7a00 	vstr	s15, [r3]
 80015b8:	e02c      	b.n	8001614 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80015ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80015bc:	8afb      	ldrh	r3, [r7, #22]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 80015c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80015c8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001714 <FIR_init+0x230>
 80015cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e0:	eeb0 0a67 	vmov.f32	s0, s15
 80015e4:	f00d fa20 	bl	800ea28 <sinf>
 80015e8:	eef0 6a40 	vmov.f32	s13, s0
 80015ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001718 <FIR_init+0x234>
 80015fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001610:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	ed93 8a00 	vldr	s16, [r3]
 8001624:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001628:	ee07 3a90 	vmov	s15, r3
 800162c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001630:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001714 <FIR_init+0x230>
 8001634:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001638:	897b      	ldrh	r3, [r7, #10]
 800163a:	3b01      	subs	r3, #1
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001644:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001648:	eeb0 0a66 	vmov.f32	s0, s13
 800164c:	f00d f9a8 	bl	800e9a0 <cosf>
 8001650:	eef0 7a40 	vmov.f32	s15, s0
 8001654:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800171c <FIR_init+0x238>
 8001658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800165c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001720 <FIR_init+0x23c>
 8001660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001674:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001678:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800167c:	b29b      	uxth	r3, r3
 800167e:	3301      	adds	r3, #1
 8001680:	b29b      	uxth	r3, r3
 8001682:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001684:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001688:	897b      	ldrh	r3, [r7, #10]
 800168a:	429a      	cmp	r2, r3
 800168c:	db82      	blt.n	8001594 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001694:	2300      	movs	r3, #0
 8001696:	83fb      	strh	r3, [r7, #30]
 8001698:	e00f      	b.n	80016ba <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	8bfb      	ldrh	r3, [r7, #30]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	edd3 7a00 	vldr	s15, [r3]
 80016a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80016ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b0:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80016b4:	8bfb      	ldrh	r3, [r7, #30]
 80016b6:	3301      	adds	r3, #1
 80016b8:	83fb      	strh	r3, [r7, #30]
 80016ba:	8bfa      	ldrh	r2, [r7, #30]
 80016bc:	897b      	ldrh	r3, [r7, #10]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3eb      	bcc.n	800169a <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 80016c2:	edd7 7a08 	vldr	s15, [r7, #32]
 80016c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ce:	d01b      	beq.n	8001708 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80016d0:	2300      	movs	r3, #0
 80016d2:	83bb      	strh	r3, [r7, #28]
 80016d4:	e014      	b.n	8001700 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	8bbb      	ldrh	r3, [r7, #28]
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	edd3 6a00 	vldr	s13, [r3]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	8bbb      	ldrh	r3, [r7, #28]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	ed97 7a08 	vldr	s14, [r7, #32]
 80016f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016f6:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80016fa:	8bbb      	ldrh	r3, [r7, #28]
 80016fc:	3301      	adds	r3, #1
 80016fe:	83bb      	strh	r3, [r7, #28]
 8001700:	8bba      	ldrh	r2, [r7, #28]
 8001702:	897b      	ldrh	r3, [r7, #10]
 8001704:	429a      	cmp	r2, r3
 8001706:	d3e6      	bcc.n	80016d6 <FIR_init+0x1f2>
            }
        }
    }
}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	@ 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	ecbd 8b02 	vpop	{d8}
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40c90fdb 	.word	0x40c90fdb
 8001718:	40490fdb 	.word	0x40490fdb
 800171c:	3eeb851f 	.word	0x3eeb851f
 8001720:	3f0a3d71 	.word	0x3f0a3d71

08001724 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	ed87 0a05 	vstr	s0, [r7, #20]
 800172e:	edc7 0a04 	vstr	s1, [r7, #16]
 8001732:	ed87 1a03 	vstr	s2, [r7, #12]
 8001736:	edc7 1a02 	vstr	s3, [r7, #8]
 800173a:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 800173e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001742:	edd7 7a04 	vldr	s15, [r7, #16]
 8001746:	ee77 6a67 	vsub.f32	s13, s14, s15
 800174a:	ed97 7a03 	vldr	s14, [r7, #12]
 800174e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800175a:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 800175e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001762:	edd7 7a02 	vldr	s15, [r7, #8]
 8001766:	ee37 7a67 	vsub.f32	s14, s14, s15
 800176a:	edd7 7a07 	vldr	s15, [r7, #28]
 800176e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001772:	ed97 7a02 	vldr	s14, [r7, #8]
 8001776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800177a:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	ee07 3a90 	vmov	s15, r3
}
 8001784:	eeb0 0a67 	vmov.f32	s0, s15
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <saturation>:

float saturation(float input, float upper_limit, float lower_limit) {
 8001792:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	ed87 0a03 	vstr	s0, [r7, #12]
 800179e:	edc7 0a02 	vstr	s1, [r7, #8]
 80017a2:	ed87 1a01 	vstr	s2, [r7, #4]
    return fmin(upper_limit, fmax(input, lower_limit));
 80017a6:	68b8      	ldr	r0, [r7, #8]
 80017a8:	f7fe fe9a 	bl	80004e0 <__aeabi_f2d>
 80017ac:	4604      	mov	r4, r0
 80017ae:	460d      	mov	r5, r1
 80017b0:	68f8      	ldr	r0, [r7, #12]
 80017b2:	f7fe fe95 	bl	80004e0 <__aeabi_f2d>
 80017b6:	4680      	mov	r8, r0
 80017b8:	4689      	mov	r9, r1
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7fe fe90 	bl	80004e0 <__aeabi_f2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	ec43 2b11 	vmov	d1, r2, r3
 80017c8:	ec49 8b10 	vmov	d0, r8, r9
 80017cc:	f00d f972 	bl	800eab4 <fmax>
 80017d0:	eeb0 7a40 	vmov.f32	s14, s0
 80017d4:	eef0 7a60 	vmov.f32	s15, s1
 80017d8:	eeb0 1a47 	vmov.f32	s2, s14
 80017dc:	eef0 1a67 	vmov.f32	s3, s15
 80017e0:	ec45 4b10 	vmov	d0, r4, r5
 80017e4:	f00d f990 	bl	800eb08 <fmin>
 80017e8:	ec53 2b10 	vmov	r2, r3, d0
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f9b0 	bl	8000b54 <__aeabi_d2f>
 80017f4:	4603      	mov	r3, r0
 80017f6:	ee07 3a90 	vmov	s15, r3
}
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001808 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800180c:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <modbus_1t5_Timeout+0x3c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001814:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <modbus_1t5_Timeout+0x3c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001820:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <modbus_1t5_Timeout+0x3c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <modbus_1t5_Timeout+0x3c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	601a      	str	r2, [r3, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	2000040c 	.word	0x2000040c

08001848 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001850:	4b04      	ldr	r3, [pc, #16]	@ (8001864 <modbus_3t5_Timeout+0x1c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2201      	movs	r2, #1
 8001856:	755a      	strb	r2, [r3, #21]

}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	2000040c 	.word	0x2000040c

08001868 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f00b f955 	bl	800cb20 <HAL_UART_GetError>
 8001876:	4603      	mov	r3, r0
 8001878:	2b20      	cmp	r3, #32
 800187a:	d101      	bne.n	8001880 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800187c:	f7ff ffc4 	bl	8001808 <modbus_1t5_Timeout>

	}
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
 8001894:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001896:	4a2d      	ldr	r2, [pc, #180]	@ (800194c <Modbus_init+0xc4>)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 800189c:	4b2b      	ldr	r3, [pc, #172]	@ (800194c <Modbus_init+0xc4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 80018a4:	4b29      	ldr	r3, [pc, #164]	@ (800194c <Modbus_init+0xc4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 80018ac:	4b27      	ldr	r3, [pc, #156]	@ (800194c <Modbus_init+0xc4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 80018b4:	4b25      	ldr	r3, [pc, #148]	@ (800194c <Modbus_init+0xc4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	7e3a      	ldrb	r2, [r7, #24]
 80018ba:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 80018bc:	4b23      	ldr	r3, [pc, #140]	@ (800194c <Modbus_init+0xc4>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	69fa      	ldr	r2, [r7, #28]
 80018c2:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	4a21      	ldr	r2, [pc, #132]	@ (8001950 <Modbus_init+0xc8>)
 80018ca:	210e      	movs	r1, #14
 80018cc:	4618      	mov	r0, r3
 80018ce:	f009 fb55 	bl	800af7c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	2110      	movs	r1, #16
 80018d8:	4618      	mov	r0, r3
 80018da:	f00b f8cb 	bl	800ca74 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f00b f8e2 	bl	800caac <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <Modbus_init+0xcc>)
 80018ee:	2104      	movs	r1, #4
 80018f0:	4618      	mov	r0, r3
 80018f2:	f00a fb93 	bl	800c01c <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <Modbus_init+0xc4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80018fc:	4b13      	ldr	r3, [pc, #76]	@ (800194c <Modbus_init+0xc4>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b12      	ldr	r3, [pc, #72]	@ (800194c <Modbus_init+0xc4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001908:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800190c:	4413      	add	r3, r2
 800190e:	3302      	adds	r3, #2
 8001910:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001914:	4619      	mov	r1, r3
 8001916:	f00a fcbb 	bl	800c290 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800191a:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <Modbus_init+0xc4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10c      	bne.n	8001944 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800192a:	4b08      	ldr	r3, [pc, #32]	@ (800194c <Modbus_init+0xc4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	4618      	mov	r0, r3
 8001932:	f008 faff 	bl	8009f34 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001936:	4b05      	ldr	r3, [pc, #20]	@ (800194c <Modbus_init+0xc4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	2100      	movs	r1, #0
 800193e:	4618      	mov	r0, r3
 8001940:	f008 fd4e 	bl	800a3e0 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001944:	bf00      	nop
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000040c 	.word	0x2000040c
 8001950:	08001849 	.word	0x08001849
 8001954:	08001869 	.word	0x08001869

08001958 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	460b      	mov	r3, r1
 8001962:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001964:	23ff      	movs	r3, #255	@ 0xff
 8001966:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001968:	23ff      	movs	r3, #255	@ 0xff
 800196a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800196c:	e013      	b.n	8001996 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	1c5a      	adds	r2, r3, #1
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	781a      	ldrb	r2, [r3, #0]
 8001976:	7bbb      	ldrb	r3, [r7, #14]
 8001978:	4053      	eors	r3, r2
 800197a:	b2db      	uxtb	r3, r3
 800197c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800197e:	4a10      	ldr	r2, [pc, #64]	@ (80019c0 <CRC16+0x68>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4413      	add	r3, r2
 8001984:	781a      	ldrb	r2, [r3, #0]
 8001986:	7bfb      	ldrb	r3, [r7, #15]
 8001988:	4053      	eors	r3, r2
 800198a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800198c:	4a0d      	ldr	r2, [pc, #52]	@ (80019c4 <CRC16+0x6c>)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001996:	883b      	ldrh	r3, [r7, #0]
 8001998:	1e5a      	subs	r2, r3, #1
 800199a:	803a      	strh	r2, [r7, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1e6      	bne.n	800196e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80019a0:	7bfb      	ldrb	r3, [r7, #15]
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	021b      	lsls	r3, r3, #8
 80019a6:	b21a      	sxth	r2, r3
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b21b      	sxth	r3, r3
 80019b0:	b29b      	uxth	r3, r3
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	200001e8 	.word	0x200001e8
 80019c4:	200000e8 	.word	0x200000e8

080019c8 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80019ce:	4b7e      	ldr	r3, [pc, #504]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	7ddb      	ldrb	r3, [r3, #23]
 80019d4:	3b01      	subs	r3, #1
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d80a      	bhi.n	80019f0 <Modbus_Protocal_Worker+0x28>
 80019da:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <Modbus_Protocal_Worker+0x18>)
 80019dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e0:	080019fb 	.word	0x080019fb
 80019e4:	08001b8f 	.word	0x08001b8f
 80019e8:	08001a87 	.word	0x08001a87
 80019ec:	08001acb 	.word	0x08001acb
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80019f0:	4b75      	ldr	r3, [pc, #468]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	75da      	strb	r2, [r3, #23]
		break;
 80019f8:	e0e1      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80019fa:	4b73      	ldr	r3, [pc, #460]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d006      	beq.n	8001a14 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 8001a06:	4b70      	ldr	r3, [pc, #448]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001a0e:	f000 f9cd 	bl	8001dac <Modbus_Emission>
 8001a12:	e018      	b.n	8001a46 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001a14:	4b6c      	ldr	r3, [pc, #432]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d00b      	beq.n	8001a46 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001a2e:	4b66      	ldr	r3, [pc, #408]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2200      	movs	r2, #0
 8001a34:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8001a36:	4b64      	ldr	r3, [pc, #400]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8001a3e:	4b62      	ldr	r3, [pc, #392]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2203      	movs	r2, #3
 8001a44:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001a46:	4b60      	ldr	r3, [pc, #384]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a50:	2b20      	cmp	r3, #32
 8001a52:	f040 80ad 	bne.w	8001bb0 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001a56:	4b5c      	ldr	r3, [pc, #368]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001a60:	4b59      	ldr	r3, [pc, #356]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001a66:	4b58      	ldr	r3, [pc, #352]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001a72:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001a76:	4413      	add	r3, r2
 8001a78:	3302      	adds	r3, #2
 8001a7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f00a fc06 	bl	800c290 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001a84:	e094      	b.n	8001bb0 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001a86:	4b50      	ldr	r3, [pc, #320]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	7d1b      	ldrb	r3, [r3, #20]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8091 	beq.w	8001bb4 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001a92:	4b4d      	ldr	r3, [pc, #308]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	22fe      	movs	r2, #254	@ 0xfe
 8001a98:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001aa4:	4b48      	ldr	r3, [pc, #288]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001ab4:	4b44      	ldr	r3, [pc, #272]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8001ab8:	1a8a      	subs	r2, r1, r2
 8001aba:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001abc:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001ac0:	4b41      	ldr	r3, [pc, #260]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	75da      	strb	r2, [r3, #23]
		}
		break;
 8001ac8:	e074      	b.n	8001bb4 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001aca:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001ad2:	f113 0f02 	cmn.w	r3, #2
 8001ad6:	d150      	bne.n	8001b7a <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001ae0:	4b39      	ldr	r3, [pc, #228]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8001ae8:	4b37      	ldr	r3, [pc, #220]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001af0:	3b02      	subs	r3, #2
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7ff ff2f 	bl	8001958 <CRC16>
 8001afa:	4603      	mov	r3, r0
 8001afc:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001afe:	793a      	ldrb	r2, [r7, #4]
 8001b00:	4b31      	ldr	r3, [pc, #196]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b02:	6819      	ldr	r1, [r3, #0]
 8001b04:	4b30      	ldr	r3, [pc, #192]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001b0c:	3b02      	subs	r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d10c      	bne.n	8001b32 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001b18:	797a      	ldrb	r2, [r7, #5]
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b1c:	6819      	ldr	r1, [r3, #0]
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001b26:	3b01      	subs	r3, #1
 8001b28:	440b      	add	r3, r1
 8001b2a:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d004      	beq.n	8001b3c <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8001b32:	4b25      	ldr	r3, [pc, #148]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	22ff      	movs	r2, #255	@ 0xff
 8001b38:	759a      	strb	r2, [r3, #22]
				break;
 8001b3a:	e040      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001b3c:	4b22      	ldr	r3, [pc, #136]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 8001b44:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d113      	bne.n	8001b76 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001b56:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001b5e:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001b68:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f00c feec 	bl	800e948 <memcpy>

			//execute command
			Modbus_frame_response();
 8001b70:	f000 f904 	bl	8001d7c <Modbus_frame_response>
 8001b74:	e001      	b.n	8001b7a <Modbus_Protocal_Worker+0x1b2>
				break;
 8001b76:	bf00      	nop
					}
		break;


	}
}
 8001b78:	e021      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	7d5b      	ldrb	r3, [r3, #21]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d019      	beq.n	8001bb8 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001b84:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	75da      	strb	r2, [r3, #23]
		break;
 8001b8c:	e014      	b.n	8001bb8 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b98:	2b20      	cmp	r3, #32
 8001b9a:	d10f      	bne.n	8001bbc <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 8001ba6:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <Modbus_Protocal_Worker+0x200>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2201      	movs	r2, #1
 8001bac:	75da      	strb	r2, [r3, #23]
		break;
 8001bae:	e005      	b.n	8001bbc <Modbus_Protocal_Worker+0x1f4>
		break;
 8001bb0:	bf00      	nop
 8001bb2:	e004      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
		break;
 8001bb4:	bf00      	nop
 8001bb6:	e002      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
		break;
 8001bb8:	bf00      	nop
 8001bba:	e000      	b.n	8001bbe <Modbus_Protocal_Worker+0x1f6>
		break;
 8001bbc:	bf00      	nop
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000040c 	.word	0x2000040c

08001bcc <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	7e5b      	ldrb	r3, [r3, #25]
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001bde:	6812      	ldr	r2, [r2, #0]
 8001be0:	7e92      	ldrb	r2, [r2, #26]
 8001be2:	4413      	add	r3, r2
 8001be4:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 8001be6:	88fa      	ldrh	r2, [r7, #6]
 8001be8:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d903      	bls.n	8001bfa <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	f000 f8a0 	bl	8001d38 <ModbusErrorReply>
			 return;
 8001bf8:	e023      	b.n	8001c42 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001bfa:	4b13      	ldr	r3, [pc, #76]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6859      	ldr	r1, [r3, #4]
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	440b      	add	r3, r1
 8001c0a:	7ed2      	ldrb	r2, [r2, #27]
 8001c0c:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b0d      	ldr	r3, [pc, #52]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	440b      	add	r3, r1
 8001c1e:	7f12      	ldrb	r2, [r2, #28]
 8001c20:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001c22:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8001c30:	2208      	movs	r2, #8
 8001c32:	4619      	mov	r1, r3
 8001c34:	f00c fe88 	bl	800e948 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <modbusWrite1Register+0x7c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2205      	movs	r2, #5
 8001c3e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000040c 	.word	0x2000040c

08001c4c <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001c4c:	b590      	push	{r4, r7, lr}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001c52:	4b38      	ldr	r3, [pc, #224]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	7edb      	ldrb	r3, [r3, #27]
 8001c58:	021b      	lsls	r3, r3, #8
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	4a35      	ldr	r2, [pc, #212]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	7f12      	ldrb	r2, [r2, #28]
 8001c62:	4413      	add	r3, r2
 8001c64:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001c66:	4b33      	ldr	r3, [pc, #204]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	7e5b      	ldrb	r3, [r3, #25]
 8001c6c:	021b      	lsls	r3, r3, #8
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	4a30      	ldr	r2, [pc, #192]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	7e92      	ldrb	r2, [r2, #26]
 8001c76:	4413      	add	r3, r2
 8001c78:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d002      	beq.n	8001c86 <modbusRead1Register+0x3a>
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	2b7d      	cmp	r3, #125	@ 0x7d
 8001c84:	d903      	bls.n	8001c8e <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001c86:	2003      	movs	r0, #3
 8001c88:	f000 f856 	bl	8001d38 <ModbusErrorReply>
		 return;
 8001c8c:	e04e      	b.n	8001d2c <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001c8e:	88ba      	ldrh	r2, [r7, #4]
 8001c90:	4b28      	ldr	r3, [pc, #160]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d808      	bhi.n	8001cac <modbusRead1Register+0x60>
 8001c9a:	88ba      	ldrh	r2, [r7, #4]
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d903      	bls.n	8001cb4 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001cac:	2002      	movs	r0, #2
 8001cae:	f000 f843 	bl	8001d38 <ModbusErrorReply>
		 return;
 8001cb2:	e03b      	b.n	8001d2c <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2203      	movs	r2, #3
 8001cba:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	0052      	lsls	r2, r2, #1
 8001cc8:	b2d2      	uxtb	r2, r2
 8001cca:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001cce:	2400      	movs	r4, #0
 8001cd0:	e020      	b.n	8001d14 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001cd2:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	88bb      	ldrh	r3, [r7, #4]
 8001cda:	4423      	add	r3, r4
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	18d1      	adds	r1, r2, r3
 8001ce0:	4b14      	ldr	r3, [pc, #80]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	1c63      	adds	r3, r4, #1
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	7849      	ldrb	r1, [r1, #1]
 8001cea:	4413      	add	r3, r2
 8001cec:	460a      	mov	r2, r1
 8001cee:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	88bb      	ldrh	r3, [r7, #4]
 8001cfa:	4423      	add	r3, r4
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	18d1      	adds	r1, r2, r3
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	0063      	lsls	r3, r4, #1
 8001d06:	3303      	adds	r3, #3
 8001d08:	7809      	ldrb	r1, [r1, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001d12:	3401      	adds	r4, #1
 8001d14:	88fb      	ldrh	r3, [r7, #6]
 8001d16:	429c      	cmp	r4, r3
 8001d18:	dbdb      	blt.n	8001cd2 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b04      	ldr	r3, [pc, #16]	@ (8001d34 <modbusRead1Register+0xe8>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	0052      	lsls	r2, r2, #1
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd90      	pop	{r4, r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000040c 	.word	0x2000040c

08001d38 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8001d42:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <ModbusErrorReply+0x40>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	7e1a      	ldrb	r2, [r3, #24]
 8001d48:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <ModbusErrorReply+0x40>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001d50:	b2d2      	uxtb	r2, r2
 8001d52:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <ModbusErrorReply+0x40>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001d60:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <ModbusErrorReply+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2202      	movs	r2, #2
 8001d66:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	2000040c 	.word	0x2000040c

08001d7c <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001d80:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <Modbus_frame_response+0x2c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	7e1b      	ldrb	r3, [r3, #24]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d004      	beq.n	8001d94 <Modbus_frame_response+0x18>
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d105      	bne.n	8001d9a <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001d8e:	f7ff ff1d 	bl	8001bcc <modbusWrite1Register>
		break;
 8001d92:	e006      	b.n	8001da2 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001d94:	f7ff ff5a 	bl	8001c4c <modbusRead1Register>
		break;
 8001d98:	e003      	b.n	8001da2 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff ffcc 	bl	8001d38 <ModbusErrorReply>
		break;
 8001da0:	bf00      	nop

	}
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2000040c 	.word	0x2000040c

08001dac <Modbus_Emission>:

void Modbus_Emission()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001db2:	4b38      	ldr	r3, [pc, #224]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d15d      	bne.n	8001e7c <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001dc0:	4b34      	ldr	r3, [pc, #208]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b33      	ldr	r3, [pc, #204]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	7812      	ldrb	r2, [r2, #0]
 8001dca:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001dce:	4b31      	ldr	r3, [pc, #196]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8001dd6:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001de0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8001de8:	461a      	mov	r2, r3
 8001dea:	f00c fdad 	bl	800e948 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001dee:	4b29      	ldr	r3, [pc, #164]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b26      	ldr	r3, [pc, #152]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3203      	adds	r2, #3
 8001dfe:	b292      	uxth	r2, r2
 8001e00:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001e04:	4b23      	ldr	r3, [pc, #140]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001e0c:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001e14:	3b02      	subs	r3, #2
 8001e16:	4619      	mov	r1, r3
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f7ff fd9d 	bl	8001958 <CRC16>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001e2e:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8001e30:	7939      	ldrb	r1, [r7, #4]
 8001e32:	4413      	add	r3, r2
 8001e34:	460a      	mov	r2, r1
 8001e36:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001e3a:	4b16      	ldr	r3, [pc, #88]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	4b15      	ldr	r3, [pc, #84]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001e46:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001e48:	7979      	ldrb	r1, [r7, #5]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d10d      	bne.n	8001e7c <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e60:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001e66:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e70:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001e72:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8001e76:	461a      	mov	r2, r3
 8001e78:	f00a f98a 	bl	800c190 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001e84:	4b03      	ldr	r3, [pc, #12]	@ (8001e94 <Modbus_Emission+0xe8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	755a      	strb	r2, [r3, #21]

}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	2000040c 	.word	0x2000040c

08001e98 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ed8 <PWM_init+0x40>)
 8001eaa:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	68ba      	ldr	r2, [r7, #8]
 8001eb0:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	88fa      	ldrh	r2, [r7, #6]
 8001eb6:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8001ebe:	68b8      	ldr	r0, [r7, #8]
 8001ec0:	f007 ffc8 	bl	8009e54 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	68b8      	ldr	r0, [r7, #8]
 8001eca:	f008 f90f 	bl	800a0ec <HAL_TIM_PWM_Start>
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	0a21fe80 	.word	0x0a21fe80

08001edc <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8001edc:	b5b0      	push	{r4, r5, r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ee8:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001eec:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ef0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef8:	d137      	bne.n	8001f6a <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	889b      	ldrh	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d105      	bne.n	8001f0e <PWM_write_duty+0x32>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001f0c:	e0e1      	b.n	80020d2 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	889b      	ldrh	r3, [r3, #4]
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d105      	bne.n	8001f22 <PWM_write_duty+0x46>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	6393      	str	r3, [r2, #56]	@ 0x38
 8001f20:	e0d7      	b.n	80020d2 <PWM_write_duty+0x1f6>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	889b      	ldrh	r3, [r3, #4]
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d105      	bne.n	8001f36 <PWM_write_duty+0x5a>
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	2300      	movs	r3, #0
 8001f32:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001f34:	e0cd      	b.n	80020d2 <PWM_write_duty+0x1f6>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	889b      	ldrh	r3, [r3, #4]
 8001f3a:	2b0c      	cmp	r3, #12
 8001f3c:	d105      	bne.n	8001f4a <PWM_write_duty+0x6e>
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	2300      	movs	r3, #0
 8001f46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f48:	e0c3      	b.n	80020d2 <PWM_write_duty+0x1f6>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	889b      	ldrh	r3, [r3, #4]
 8001f4e:	2b10      	cmp	r3, #16
 8001f50:	d105      	bne.n	8001f5e <PWM_write_duty+0x82>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	2300      	movs	r3, #0
 8001f5a:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f5c:	e0b9      	b.n	80020d2 <PWM_write_duty+0x1f6>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	2300      	movs	r3, #0
 8001f66:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001f68:	e0b3      	b.n	80020d2 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	ee07 3a90 	vmov	s15, r3
 8001f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f76:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f82:	ee17 2a90 	vmov	r2, s15
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001f92:	33fe      	adds	r3, #254	@ 0xfe
 8001f94:	4a51      	ldr	r2, [pc, #324]	@ (80020dc <PWM_write_duty+0x200>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0bdb      	lsrs	r3, r3, #15
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	899b      	ldrh	r3, [r3, #12]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fc4:	ed97 7a02 	vldr	s14, [r7, #8]
 8001fc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001fd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fd8:	ee17 3a90 	vmov	r3, s15
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	89db      	ldrh	r3, [r3, #14]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fa68 	bl	80004bc <__aeabi_i2d>
 8001fec:	4604      	mov	r4, r0
 8001fee:	460d      	mov	r5, r1
 8001ff0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ff4:	eef0 7ae7 	vabs.f32	s15, s15
 8001ff8:	ee17 0a90 	vmov	r0, s15
 8001ffc:	f7fe fa70 	bl	80004e0 <__aeabi_f2d>
 8002000:	4602      	mov	r2, r0
 8002002:	460b      	mov	r3, r1
 8002004:	4620      	mov	r0, r4
 8002006:	4629      	mov	r1, r5
 8002008:	f7fe fac2 	bl	8000590 <__aeabi_dmul>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f04f 0200 	mov.w	r2, #0
 8002018:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <PWM_write_duty+0x204>)
 800201a:	f7fe fbe3 	bl	80007e4 <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	f7fe fd75 	bl	8000b14 <__aeabi_d2uiz>
 800202a:	4603      	mov	r3, r0
 800202c:	b29b      	uxth	r3, r3
 800202e:	461a      	mov	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	899a      	ldrh	r2, [r3, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	89da      	ldrh	r2, [r3, #14]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	89da      	ldrh	r2, [r3, #14]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	889b      	ldrh	r3, [r3, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <PWM_write_duty+0x190>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	6952      	ldr	r2, [r2, #20]
 8002068:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800206a:	e032      	b.n	80020d2 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	889b      	ldrh	r3, [r3, #4]
 8002070:	2b04      	cmp	r3, #4
 8002072:	d106      	bne.n	8002082 <PWM_write_duty+0x1a6>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002080:	e027      	b.n	80020d2 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	889b      	ldrh	r3, [r3, #4]
 8002086:	2b08      	cmp	r3, #8
 8002088:	d106      	bne.n	8002098 <PWM_write_duty+0x1bc>
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002096:	e01c      	b.n	80020d2 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	889b      	ldrh	r3, [r3, #4]
 800209c:	2b0c      	cmp	r3, #12
 800209e:	d106      	bne.n	80020ae <PWM_write_duty+0x1d2>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80020ac:	e011      	b.n	80020d2 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	889b      	ldrh	r3, [r3, #4]
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d106      	bne.n	80020c4 <PWM_write_duty+0x1e8>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80020c2:	e006      	b.n	80020d2 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80020d0:	e7ff      	b.n	80020d2 <PWM_write_duty+0x1f6>
 80020d2:	bf00      	nop
 80020d4:	3710      	adds	r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bdb0      	pop	{r4, r5, r7, pc}
 80020da:	bf00      	nop
 80020dc:	80008001 	.word	0x80008001
 80020e0:	40590000 	.word	0x40590000
 80020e4:	00000000 	.word	0x00000000

080020e8 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 80020e8:	b5b0      	push	{r4, r5, r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	60f8      	str	r0, [r7, #12]
 80020f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020f4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 80020f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80020fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002104:	d137      	bne.n	8002176 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	889b      	ldrh	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <PWM_write_range+0x32>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2200      	movs	r2, #0
 8002116:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002118:	e0e1      	b.n	80022de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	889b      	ldrh	r3, [r3, #4]
 800211e:	2b04      	cmp	r3, #4
 8002120:	d105      	bne.n	800212e <PWM_write_range+0x46>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	2300      	movs	r3, #0
 800212a:	6393      	str	r3, [r2, #56]	@ 0x38
 800212c:	e0d7      	b.n	80022de <PWM_write_range+0x1f6>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	889b      	ldrh	r3, [r3, #4]
 8002132:	2b08      	cmp	r3, #8
 8002134:	d105      	bne.n	8002142 <PWM_write_range+0x5a>
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2300      	movs	r3, #0
 800213e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002140:	e0cd      	b.n	80022de <PWM_write_range+0x1f6>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	889b      	ldrh	r3, [r3, #4]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d105      	bne.n	8002156 <PWM_write_range+0x6e>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2300      	movs	r3, #0
 8002152:	6413      	str	r3, [r2, #64]	@ 0x40
 8002154:	e0c3      	b.n	80022de <PWM_write_range+0x1f6>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	889b      	ldrh	r3, [r3, #4]
 800215a:	2b10      	cmp	r3, #16
 800215c:	d105      	bne.n	800216a <PWM_write_range+0x82>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2300      	movs	r3, #0
 8002166:	6493      	str	r3, [r2, #72]	@ 0x48
 8002168:	e0b9      	b.n	80022de <PWM_write_range+0x1f6>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2300      	movs	r3, #0
 8002172:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002174:	e0b3      	b.n	80022de <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002182:	ed97 7a02 	vldr	s14, [r7, #8]
 8002186:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800218a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800218e:	ee17 2a90 	vmov	r2, s15
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800219e:	33fe      	adds	r3, #254	@ 0xfe
 80021a0:	4a53      	ldr	r2, [pc, #332]	@ (80022f0 <PWM_write_range+0x208>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0bdb      	lsrs	r3, r3, #15
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3b01      	subs	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	899b      	ldrh	r3, [r3, #12]
 80021c2:	3301      	adds	r3, #1
 80021c4:	ee07 3a90 	vmov	s15, r3
 80021c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021cc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80021d0:	ed97 7a02 	vldr	s14, [r7, #8]
 80021d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e4:	ee17 3a90 	vmov	r3, s15
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	89db      	ldrh	r3, [r3, #14]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f962 	bl	80004bc <__aeabi_i2d>
 80021f8:	4604      	mov	r4, r0
 80021fa:	460d      	mov	r5, r1
 80021fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002200:	eef0 7ae7 	vabs.f32	s15, s15
 8002204:	ee17 0a90 	vmov	r0, s15
 8002208:	f7fe f96a 	bl	80004e0 <__aeabi_f2d>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4620      	mov	r0, r4
 8002212:	4629      	mov	r1, r5
 8002214:	f7fe f9bc 	bl	8000590 <__aeabi_dmul>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	a331      	add	r3, pc, #196	@ (adr r3, 80022e8 <PWM_write_range+0x200>)
 8002222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002226:	f7fe fadd 	bl	80007e4 <__aeabi_ddiv>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fc6f 	bl	8000b14 <__aeabi_d2uiz>
 8002236:	4603      	mov	r3, r0
 8002238:	b29b      	uxth	r3, r3
 800223a:	461a      	mov	r2, r3
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	899a      	ldrh	r2, [r3, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	89da      	ldrh	r2, [r3, #14]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	89da      	ldrh	r2, [r3, #14]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	889b      	ldrh	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <PWM_write_range+0x190>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	6952      	ldr	r2, [r2, #20]
 8002274:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002276:	e032      	b.n	80022de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	889b      	ldrh	r3, [r3, #4]
 800227c:	2b04      	cmp	r3, #4
 800227e:	d106      	bne.n	800228e <PWM_write_range+0x1a6>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800228c:	e027      	b.n	80022de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	889b      	ldrh	r3, [r3, #4]
 8002292:	2b08      	cmp	r3, #8
 8002294:	d106      	bne.n	80022a4 <PWM_write_range+0x1bc>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80022a2:	e01c      	b.n	80022de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	889b      	ldrh	r3, [r3, #4]
 80022a8:	2b0c      	cmp	r3, #12
 80022aa:	d106      	bne.n	80022ba <PWM_write_range+0x1d2>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80022b8:	e011      	b.n	80022de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	889b      	ldrh	r3, [r3, #4]
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d106      	bne.n	80022d0 <PWM_write_range+0x1e8>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80022ce:	e006      	b.n	80022de <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80022dc:	e7ff      	b.n	80022de <PWM_write_range+0x1f6>
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bdb0      	pop	{r4, r5, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	00000000 	.word	0x00000000
 80022ec:	40efffe0 	.word	0x40efffe0
 80022f0:	80008001 	.word	0x80008001

080022f4 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6178      	str	r0, [r7, #20]
 80022fc:	6139      	str	r1, [r7, #16]
 80022fe:	60fa      	str	r2, [r7, #12]
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	ed87 0a01 	vstr	s0, [r7, #4]
 8002306:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	68fa      	ldr	r2, [r7, #12]
 8002314:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2200      	movs	r2, #0
 800232c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2200      	movs	r2, #0
 8002332:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8002354:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	fb93 f2f2 	sdiv	r2, r3, r2
 800235e:	68f9      	ldr	r1, [r7, #12]
 8002360:	fb01 f202 	mul.w	r2, r1, r2
 8002364:	1a9b      	subs	r3, r3, r2
 8002366:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2200      	movs	r2, #0
 8002372:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2200      	movs	r2, #0
 8002378:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f04f 0200 	mov.w	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f04f 0200 	mov.w	r2, #0
 8002388:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f04f 0200 	mov.w	r2, #0
 80023a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80023c2:	213c      	movs	r1, #60	@ 0x3c
 80023c4:	6938      	ldr	r0, [r7, #16]
 80023c6:	f008 f94d 	bl	800a664 <HAL_TIM_Encoder_Start>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	0000      	movs	r0, r0
 80023d4:	0000      	movs	r0, r0
	...

080023d8 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 80023d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	0fda      	lsrs	r2, r3, #31
 8002400:	4413      	add	r3, r2
 8002402:	105b      	asrs	r3, r3, #1
 8002404:	461a      	mov	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4293      	cmp	r3, r2
 800240a:	dd05      	ble.n	8002418 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
 8002410:	68fa      	ldr	r2, [r7, #12]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	e00e      	b.n	8002436 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	0fda      	lsrs	r2, r3, #31
 800241e:	4413      	add	r3, r2
 8002420:	105b      	asrs	r3, r3, #1
 8002422:	425b      	negs	r3, r3
 8002424:	461a      	mov	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4293      	cmp	r3, r2
 800242a:	da04      	bge.n	8002436 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	441a      	add	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002454:	ee07 3a90 	vmov	s15, r3
 8002458:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002468:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002472:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe f82b 	bl	80004e0 <__aeabi_f2d>
 800248a:	4604      	mov	r4, r0
 800248c:	460d      	mov	r5, r1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002492:	ee07 3a90 	vmov	s15, r3
 8002496:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1b      	ldr	r3, [r3, #32]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024ae:	ee17 0a90 	vmov	r0, s15
 80024b2:	f7fe f815 	bl	80004e0 <__aeabi_f2d>
 80024b6:	a33c      	add	r3, pc, #240	@ (adr r3, 80025a8 <QEI_get_diff_count+0x1d0>)
 80024b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024bc:	f7fe f868 	bl	8000590 <__aeabi_dmul>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4690      	mov	r8, r2
 80024c6:	4699      	mov	r9, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe f807 	bl	80004e0 <__aeabi_f2d>
 80024d2:	4602      	mov	r2, r0
 80024d4:	460b      	mov	r3, r1
 80024d6:	4640      	mov	r0, r8
 80024d8:	4649      	mov	r1, r9
 80024da:	f7fe f859 	bl	8000590 <__aeabi_dmul>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4620      	mov	r0, r4
 80024e4:	4629      	mov	r1, r5
 80024e6:	f7fd fe9d 	bl	8000224 <__adddf3>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f7fe fb2f 	bl	8000b54 <__aeabi_d2f>
 80024f6:	4602      	mov	r2, r0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002500:	4618      	mov	r0, r3
 8002502:	f7fd ffed 	bl	80004e0 <__aeabi_f2d>
 8002506:	4604      	mov	r4, r0
 8002508:	460d      	mov	r5, r1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	ee07 3a90 	vmov	s15, r3
 800251e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002522:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002526:	ee16 0a90 	vmov	r0, s13
 800252a:	f7fd ffd9 	bl	80004e0 <__aeabi_f2d>
 800252e:	a31e      	add	r3, pc, #120	@ (adr r3, 80025a8 <QEI_get_diff_count+0x1d0>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f7fe f82c 	bl	8000590 <__aeabi_dmul>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4690      	mov	r8, r2
 800253e:	4699      	mov	r9, r3
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002544:	4618      	mov	r0, r3
 8002546:	f7fd ffcb 	bl	80004e0 <__aeabi_f2d>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4640      	mov	r0, r8
 8002550:	4649      	mov	r1, r9
 8002552:	f7fe f81d 	bl	8000590 <__aeabi_dmul>
 8002556:	4602      	mov	r2, r0
 8002558:	460b      	mov	r3, r1
 800255a:	4690      	mov	r8, r2
 800255c:	4699      	mov	r9, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002562:	4618      	mov	r0, r3
 8002564:	f7fd ffbc 	bl	80004e0 <__aeabi_f2d>
 8002568:	4602      	mov	r2, r0
 800256a:	460b      	mov	r3, r1
 800256c:	4640      	mov	r0, r8
 800256e:	4649      	mov	r1, r9
 8002570:	f7fe f80e 	bl	8000590 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4620      	mov	r0, r4
 800257a:	4629      	mov	r1, r5
 800257c:	f7fd fe52 	bl	8000224 <__adddf3>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	f7fe fae4 	bl	8000b54 <__aeabi_d2f>
 800258c:	4602      	mov	r2, r0
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	605a      	str	r2, [r3, #4]
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025a4:	f3af 8000 	nop.w
 80025a8:	54442d18 	.word	0x54442d18
 80025ac:	400921fb 	.word	0x400921fb

080025b0 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 80025b0:	b5b0      	push	{r4, r5, r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80025c0:	fb02 f303 	mul.w	r3, r2, r3
 80025c4:	ee07 3a90 	vmov	s15, r3
 80025c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ff82 	bl	80004e0 <__aeabi_f2d>
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	4b83      	ldr	r3, [pc, #524]	@ (80027f0 <QEI_compute_data+0x240>)
 80025e2:	f7fd ffd5 	bl	8000590 <__aeabi_dmul>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4614      	mov	r4, r2
 80025ec:	461d      	mov	r5, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025fa:	ee17 0a90 	vmov	r0, s15
 80025fe:	f7fd ff6f 	bl	80004e0 <__aeabi_f2d>
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4620      	mov	r0, r4
 8002608:	4629      	mov	r1, r5
 800260a:	f7fe f8eb 	bl	80007e4 <__aeabi_ddiv>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4614      	mov	r4, r2
 8002614:	461d      	mov	r5, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ff60 	bl	80004e0 <__aeabi_f2d>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4620      	mov	r0, r4
 8002626:	4629      	mov	r1, r5
 8002628:	f7fd ffb2 	bl	8000590 <__aeabi_dmul>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4610      	mov	r0, r2
 8002632:	4619      	mov	r1, r3
 8002634:	f7fe fa8e 	bl	8000b54 <__aeabi_d2f>
 8002638:	4602      	mov	r2, r0
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002644:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002648:	ee17 0a90 	vmov	r0, s15
 800264c:	f7fd ff48 	bl	80004e0 <__aeabi_f2d>
 8002650:	a365      	add	r3, pc, #404	@ (adr r3, 80027e8 <QEI_compute_data+0x238>)
 8002652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002656:	f7fd ff9b 	bl	8000590 <__aeabi_dmul>
 800265a:	4602      	mov	r2, r0
 800265c:	460b      	mov	r3, r1
 800265e:	4614      	mov	r4, r2
 8002660:	461d      	mov	r5, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800266e:	ee17 0a90 	vmov	r0, s15
 8002672:	f7fd ff35 	bl	80004e0 <__aeabi_f2d>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4620      	mov	r0, r4
 800267c:	4629      	mov	r1, r5
 800267e:	f7fe f8b1 	bl	80007e4 <__aeabi_ddiv>
 8002682:	4602      	mov	r2, r0
 8002684:	460b      	mov	r3, r1
 8002686:	4614      	mov	r4, r2
 8002688:	461d      	mov	r5, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268e:	4618      	mov	r0, r3
 8002690:	f7fd ff26 	bl	80004e0 <__aeabi_f2d>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4620      	mov	r0, r4
 800269a:	4629      	mov	r1, r5
 800269c:	f7fd ff78 	bl	8000590 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	f7fe fa54 	bl	8000b54 <__aeabi_d2f>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fd ff12 	bl	80004e0 <__aeabi_f2d>
 80026bc:	a34a      	add	r3, pc, #296	@ (adr r3, 80027e8 <QEI_compute_data+0x238>)
 80026be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c2:	f7fd ff65 	bl	8000590 <__aeabi_dmul>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4614      	mov	r4, r2
 80026cc:	461d      	mov	r5, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff04 	bl	80004e0 <__aeabi_f2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4620      	mov	r0, r4
 80026de:	4629      	mov	r1, r5
 80026e0:	f7fd ff56 	bl	8000590 <__aeabi_dmul>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4614      	mov	r4, r2
 80026ea:	461d      	mov	r5, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f8:	ee17 0a90 	vmov	r0, s15
 80026fc:	f7fd fef0 	bl	80004e0 <__aeabi_f2d>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4620      	mov	r0, r4
 8002706:	4629      	mov	r1, r5
 8002708:	f7fe f86c 	bl	80007e4 <__aeabi_ddiv>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4614      	mov	r4, r2
 8002712:	461d      	mov	r5, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002718:	4618      	mov	r0, r3
 800271a:	f7fd fee1 	bl	80004e0 <__aeabi_f2d>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4620      	mov	r0, r4
 8002724:	4629      	mov	r1, r5
 8002726:	f7fd ff33 	bl	8000590 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4610      	mov	r0, r2
 8002730:	4619      	mov	r1, r3
 8002732:	f7fe fa0f 	bl	8000b54 <__aeabi_d2f>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	edd3 7a03 	vldr	s15, [r3, #12]
 8002758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8002760:	edd7 7a03 	vldr	s15, [r7, #12]
 8002764:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276c:	d00a      	beq.n	8002784 <QEI_compute_data+0x1d4>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	ee07 3a90 	vmov	s15, r3
 8002776:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800277a:	edd7 7a03 	vldr	s15, [r7, #12]
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	e001      	b.n	8002788 <QEI_compute_data+0x1d8>
 8002784:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80027f4 <QEI_compute_data+0x244>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	ed93 7a04 	vldr	s14, [r3, #16]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	edd3 7a05 	vldr	s15, [r3, #20]
 800279a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800279e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 80027a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80027a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ae:	d00a      	beq.n	80027c6 <QEI_compute_data+0x216>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b4:	ee07 3a90 	vmov	s15, r3
 80027b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c4:	e001      	b.n	80027ca <QEI_compute_data+0x21a>
 80027c6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80027f4 <QEI_compute_data+0x244>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	615a      	str	r2, [r3, #20]
}
 80027e0:	bf00      	nop
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bdb0      	pop	{r4, r5, r7, pc}
 80027e8:	54442d18 	.word	0x54442d18
 80027ec:	400921fb 	.word	0x400921fb
 80027f0:	404e0000 	.word	0x404e0000
 80027f4:	00000000 	.word	0x00000000

080027f8 <QEI_reset>:

void QEI_reset(QEI *qei) {
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
    // Reset all position and velocity values
    qei->pps = 0;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->rpm = 0;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = 0;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->pulses = 0;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->mmps = 0;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->radpss = 0;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	651a      	str	r2, [r3, #80]	@ 0x50

    // Reset velocity history
    qei->r[NOW] = 0;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	615a      	str	r2, [r3, #20]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 800287a:	b580      	push	{r7, lr}
 800287c:	b08e      	sub	sp, #56	@ 0x38
 800287e:	af00      	add	r7, sp, #0
 8002880:	6178      	str	r0, [r7, #20]
 8002882:	ed87 0a04 	vstr	s0, [r7, #16]
 8002886:	edc7 0a03 	vstr	s1, [r7, #12]
 800288a:	ed87 1a02 	vstr	s2, [r7, #8]
 800288e:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2200      	movs	r2, #0
 8002896:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 80028b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80028bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80028c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028c4:	eef0 7ae7 	vabs.f32	s15, s15
 80028c8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 80028cc:	ed97 7a03 	vldr	s14, [r7, #12]
 80028d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80028d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	d503      	bpl.n	80028ea <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	22ff      	movs	r2, #255	@ 0xff
 80028e6:	741a      	strb	r2, [r3, #16]
 80028e8:	e002      	b.n	80028f0 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	2201      	movs	r2, #1
 80028ee:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 80028f0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80028f4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fc:	d006      	beq.n	800290c <Trapezoidal_Generator+0x92>
 80028fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002902:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800290a:	d104      	bne.n	8002916 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	60da      	str	r2, [r3, #12]
        return;
 8002914:	e06f      	b.n	80029f6 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8002916:	edd7 6a02 	vldr	s13, [r7, #8]
 800291a:	ed97 7a01 	vldr	s14, [r7, #4]
 800291e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002922:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8002926:	edd7 7a01 	vldr	s15, [r7, #4]
 800292a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800292e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002932:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8002946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002948:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 800294a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800294e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002952:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002956:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 800295a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800295e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296a:	db27      	blt.n	80029bc <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 800296c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002970:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002974:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002978:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 800297c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002980:	ed97 7a02 	vldr	s14, [r7, #8]
 8002984:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002988:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002990:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8002992:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002996:	edd7 7a06 	vldr	s15, [r7, #24]
 800299a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 80029a4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80029a8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80029ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80029b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	edc3 7a02 	vstr	s15, [r3, #8]
 80029ba:	e018      	b.n	80029ee <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 80029bc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80029c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80029c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029c8:	eeb0 0a66 	vmov.f32	s0, s13
 80029cc:	f00b ffca 	bl	800e964 <sqrtf>
 80029d0:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	6a3a      	ldr	r2, [r7, #32]
 80029d8:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	6a3a      	ldr	r2, [r7, #32]
 80029de:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 80029e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80029e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	60da      	str	r2, [r3, #12]
}
 80029f6:	3738      	adds	r7, #56	@ 0x38
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 80029fc:	b480      	push	{r7}
 80029fe:	b08d      	sub	sp, #52	@ 0x34
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6178      	str	r0, [r7, #20]
 8002a04:	6139      	str	r1, [r7, #16]
 8002a06:	ed87 0a03 	vstr	s0, [r7, #12]
 8002a0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8002a0e:	ed87 1a01 	vstr	s2, [r7, #4]
 8002a12:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a1c:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8002ca0 <Trapezoidal_Evaluated+0x2a4>
 8002a20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	f200 811b 	bhi.w	8002c78 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2200      	movs	r2, #0
 8002a46:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	7c1b      	ldrb	r3, [r3, #16]
 8002a4c:	b25b      	sxtb	r3, r3
 8002a4e:	ee07 3a90 	vmov	s15, r3
 8002a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a56:	ed97 7a00 	vldr	s14, [r7]
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	ed93 7a00 	vldr	s14, [r3]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a6e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	d109      	bne.n	8002a8c <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a86:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8002a8a:	e00c      	b.n	8002aa6 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	7c1b      	ldrb	r3, [r3, #16]
 8002a90:	b25b      	sxtb	r3, r3
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	ed93 7a03 	vldr	s14, [r3, #12]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	edd3 7a00 	vldr	s15, [r3]
 8002ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aba:	d824      	bhi.n	8002b06 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8002abc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ac0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ac4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ace:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ad8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002adc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	ed93 7a03 	vldr	s14, [r3, #12]
 8002af0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b02:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8002b04:	e0c6      	b.n	8002c94 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1a:	d830      	bhi.n	8002b7e <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8002b1c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b20:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b44:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	edd3 7a00 	vldr	s15, [r3]
 8002b54:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b58:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b60:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b72:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
}
 8002b7c:	e08a      	b.n	8002c94 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	d900      	bls.n	8002b96 <Trapezoidal_Evaluated+0x19a>
}
 8002b94:	e07e      	b.n	8002c94 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8002b96:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002b9a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002b9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bbe:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	edd3 7a00 	vldr	s15, [r3]
 8002bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bda:	dd11      	ble.n	8002c00 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	ed93 7a01 	vldr	s14, [r3, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	edd3 7a00 	vldr	s15, [r3]
 8002be8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002bf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c10:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8002c14:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002c18:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c20:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c28:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c2c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002c30:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002c34:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c38:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c3c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8002c4e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002c52:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002c5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8002c68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c6c:	eef1 7a67 	vneg.f32	s15, s15
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8002c76:	e00d      	b.n	8002c94 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	3734      	adds	r7, #52	@ 0x34
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	3a83126f 	.word	0x3a83126f

08002ca4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b08c      	sub	sp, #48	@ 0x30
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]
 8002cb2:	605a      	str	r2, [r3, #4]
 8002cb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002cb6:	1d3b      	adds	r3, r7, #4
 8002cb8:	2220      	movs	r2, #32
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f00b fdff 	bl	800e8c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002cc2:	4b39      	ldr	r3, [pc, #228]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002cc4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002cc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002cca:	4b37      	ldr	r3, [pc, #220]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002ccc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002cd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cd2:	4b35      	ldr	r3, [pc, #212]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cd8:	4b33      	ldr	r3, [pc, #204]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002cde:	4b32      	ldr	r3, [pc, #200]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002ce4:	4b30      	ldr	r3, [pc, #192]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cea:	4b2f      	ldr	r3, [pc, #188]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002cec:	2204      	movs	r2, #4
 8002cee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002cfc:	4b2a      	ldr	r3, [pc, #168]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002cfe:	2202      	movs	r2, #2
 8002d00:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d02:	4b29      	ldr	r3, [pc, #164]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d0a:	4b27      	ldr	r3, [pc, #156]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d10:	4b25      	ldr	r3, [pc, #148]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002d16:	4b24      	ldr	r3, [pc, #144]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d1e:	4b22      	ldr	r3, [pc, #136]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002d24:	4b20      	ldr	r3, [pc, #128]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d2c:	481e      	ldr	r0, [pc, #120]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002d2e:	f003 ffbd 	bl	8006cac <HAL_ADC_Init>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002d38:	f002 f8f6 	bl	8004f28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d44:	4619      	mov	r1, r3
 8002d46:	4818      	ldr	r0, [pc, #96]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002d48:	f005 f8dc 	bl	8007f04 <HAL_ADCEx_MultiModeConfigChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002d52:	f002 f8e9 	bl	8004f28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002d56:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <MX_ADC1_Init+0x108>)
 8002d58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d5a:	2306      	movs	r3, #6
 8002d5c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002d5e:	2307      	movs	r3, #7
 8002d60:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d62:	237f      	movs	r3, #127	@ 0x7f
 8002d64:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d66:	2304      	movs	r3, #4
 8002d68:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d6e:	1d3b      	adds	r3, r7, #4
 8002d70:	4619      	mov	r1, r3
 8002d72:	480d      	ldr	r0, [pc, #52]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002d74:	f004 fa48 	bl	8007208 <HAL_ADC_ConfigChannel>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002d7e:	f002 f8d3 	bl	8004f28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002d82:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <MX_ADC1_Init+0x10c>)
 8002d84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d86:	230c      	movs	r3, #12
 8002d88:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4806      	ldr	r0, [pc, #24]	@ (8002da8 <MX_ADC1_Init+0x104>)
 8002d90:	f004 fa3a 	bl	8007208 <HAL_ADC_ConfigChannel>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002d9a:	f002 f8c5 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d9e:	bf00      	nop
 8002da0:	3730      	adds	r7, #48	@ 0x30
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000410 	.word	0x20000410
 8002dac:	19200040 	.word	0x19200040
 8002db0:	1d500080 	.word	0x1d500080

08002db4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b09e      	sub	sp, #120	@ 0x78
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
 8002dca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	2254      	movs	r2, #84	@ 0x54
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f00b fd73 	bl	800e8c0 <memset>
  if(adcHandle->Instance==ADC1)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002de2:	d15e      	bne.n	8002ea2 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002de4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002de8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002dea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002dee:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002df0:	f107 0310 	add.w	r3, r7, #16
 8002df4:	4618      	mov	r0, r3
 8002df6:	f006 fd7b 	bl	80098f0 <HAL_RCCEx_PeriphCLKConfig>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002e00:	f002 f892 	bl	8004f28 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e04:	4b29      	ldr	r3, [pc, #164]	@ (8002eac <HAL_ADC_MspInit+0xf8>)
 8002e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e08:	4a28      	ldr	r2, [pc, #160]	@ (8002eac <HAL_ADC_MspInit+0xf8>)
 8002e0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e10:	4b26      	ldr	r3, [pc, #152]	@ (8002eac <HAL_ADC_MspInit+0xf8>)
 8002e12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1c:	4b23      	ldr	r3, [pc, #140]	@ (8002eac <HAL_ADC_MspInit+0xf8>)
 8002e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e20:	4a22      	ldr	r2, [pc, #136]	@ (8002eac <HAL_ADC_MspInit+0xf8>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e28:	4b20      	ldr	r3, [pc, #128]	@ (8002eac <HAL_ADC_MspInit+0xf8>)
 8002e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e34:	2303      	movs	r3, #3
 8002e36:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e40:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e44:	4619      	mov	r1, r3
 8002e46:	481a      	ldr	r0, [pc, #104]	@ (8002eb0 <HAL_ADC_MspInit+0xfc>)
 8002e48:	f005 fda6 	bl	8008998 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e4c:	4b19      	ldr	r3, [pc, #100]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb8 <HAL_ADC_MspInit+0x104>)
 8002e50:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002e52:	4b18      	ldr	r3, [pc, #96]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e54:	2205      	movs	r2, #5
 8002e56:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e58:	4b16      	ldr	r3, [pc, #88]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e5e:	4b15      	ldr	r3, [pc, #84]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e64:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e66:	2280      	movs	r2, #128	@ 0x80
 8002e68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e6a:	4b12      	ldr	r3, [pc, #72]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e72:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e80:	4b0c      	ldr	r3, [pc, #48]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e86:	480b      	ldr	r0, [pc, #44]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e88:	f005 fa54 	bl	8008334 <HAL_DMA_Init>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8002e92:	f002 f849 	bl	8004f28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a06      	ldr	r2, [pc, #24]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e9c:	4a05      	ldr	r2, [pc, #20]	@ (8002eb4 <HAL_ADC_MspInit+0x100>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3778      	adds	r7, #120	@ 0x78
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	48000800 	.word	0x48000800
 8002eb4:	2000047c 	.word	0x2000047c
 8002eb8:	40020008 	.word	0x40020008

08002ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ec2:	4b22      	ldr	r3, [pc, #136]	@ (8002f4c <MX_DMA_Init+0x90>)
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec6:	4a21      	ldr	r2, [pc, #132]	@ (8002f4c <MX_DMA_Init+0x90>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ece:	4b1f      	ldr	r3, [pc, #124]	@ (8002f4c <MX_DMA_Init+0x90>)
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	607b      	str	r3, [r7, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eda:	4b1c      	ldr	r3, [pc, #112]	@ (8002f4c <MX_DMA_Init+0x90>)
 8002edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ede:	4a1b      	ldr	r2, [pc, #108]	@ (8002f4c <MX_DMA_Init+0x90>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ee6:	4b19      	ldr	r3, [pc, #100]	@ (8002f4c <MX_DMA_Init+0x90>)
 8002ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	200b      	movs	r0, #11
 8002ef8:	f005 f9e7 	bl	80082ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002efc:	200b      	movs	r0, #11
 8002efe:	f005 f9fe 	bl	80082fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002f02:	2200      	movs	r2, #0
 8002f04:	2100      	movs	r1, #0
 8002f06:	200c      	movs	r0, #12
 8002f08:	f005 f9df 	bl	80082ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002f0c:	200c      	movs	r0, #12
 8002f0e:	f005 f9f6 	bl	80082fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002f12:	2200      	movs	r2, #0
 8002f14:	2100      	movs	r1, #0
 8002f16:	200d      	movs	r0, #13
 8002f18:	f005 f9d7 	bl	80082ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002f1c:	200d      	movs	r0, #13
 8002f1e:	f005 f9ee 	bl	80082fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	200e      	movs	r0, #14
 8002f28:	f005 f9cf 	bl	80082ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002f2c:	200e      	movs	r0, #14
 8002f2e:	f005 f9e6 	bl	80082fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002f32:	2200      	movs	r2, #0
 8002f34:	2100      	movs	r1, #0
 8002f36:	200f      	movs	r0, #15
 8002f38:	f005 f9c7 	bl	80082ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002f3c:	200f      	movs	r0, #15
 8002f3e:	f005 f9de 	bl	80082fe <HAL_NVIC_EnableIRQ>

}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000

08002f50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	@ 0x28
 8002f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f56:	f107 0314 	add.w	r3, r7, #20
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
 8002f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f66:	4b4f      	ldr	r3, [pc, #316]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6a:	4a4e      	ldr	r2, [pc, #312]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f72:	4b4c      	ldr	r3, [pc, #304]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f7e:	4b49      	ldr	r3, [pc, #292]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f82:	4a48      	ldr	r2, [pc, #288]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002f84:	f043 0320 	orr.w	r3, r3, #32
 8002f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f8a:	4b46      	ldr	r3, [pc, #280]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f96:	4b43      	ldr	r3, [pc, #268]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9a:	4a42      	ldr	r2, [pc, #264]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002f9c:	f043 0301 	orr.w	r3, r3, #1
 8002fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fa2:	4b40      	ldr	r3, [pc, #256]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	60bb      	str	r3, [r7, #8]
 8002fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fae:	4b3d      	ldr	r3, [pc, #244]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fb2:	4a3c      	ldr	r2, [pc, #240]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002fb4:	f043 0302 	orr.w	r3, r3, #2
 8002fb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002fba:	4b3a      	ldr	r3, [pc, #232]	@ (80030a4 <MX_GPIO_Init+0x154>)
 8002fbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	607b      	str	r3, [r7, #4]
 8002fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002fcc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fd0:	f005 fe7c 	bl	8008ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fda:	4833      	ldr	r0, [pc, #204]	@ (80030a8 <MX_GPIO_Init+0x158>)
 8002fdc:	f005 fe76 	bl	8008ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fe0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fe6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	482c      	ldr	r0, [pc, #176]	@ (80030a8 <MX_GPIO_Init+0x158>)
 8002ff8:	f005 fcce 	bl	8008998 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8002ffc:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8003000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003002:	2301      	movs	r3, #1
 8003004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300e:	f107 0314 	add.w	r3, r7, #20
 8003012:	4619      	mov	r1, r3
 8003014:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003018:	f005 fcbe 	bl	8008998 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin UPPER_PHOTO_Pin EMER_Pin
                           PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|UPPER_PHOTO_Pin|EMER_Pin
 800301c:	f241 03b6 	movw	r3, #4278	@ 0x10b6
 8003020:	617b      	str	r3, [r7, #20]
                          |PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003022:	2300      	movs	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4619      	mov	r1, r3
 8003030:	481e      	ldr	r0, [pc, #120]	@ (80030ac <MX_GPIO_Init+0x15c>)
 8003032:	f005 fcb1 	bl	8008998 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003036:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800303a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303c:	2301      	movs	r3, #1
 800303e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003044:	2300      	movs	r3, #0
 8003046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4619      	mov	r1, r3
 800304e:	4816      	ldr	r0, [pc, #88]	@ (80030a8 <MX_GPIO_Init+0x158>)
 8003050:	f005 fca2 	bl	8008998 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = LOWER_PHOTO_Pin;
 8003054:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003058:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800305a:	2300      	movs	r3, #0
 800305c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOWER_PHOTO_GPIO_Port, &GPIO_InitStruct);
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	4619      	mov	r1, r3
 8003068:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800306c:	f005 fc94 	bl	8008998 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 8003070:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800307e:	f107 0314 	add.w	r3, r7, #20
 8003082:	4619      	mov	r1, r3
 8003084:	4808      	ldr	r0, [pc, #32]	@ (80030a8 <MX_GPIO_Init+0x158>)
 8003086:	f005 fc87 	bl	8008998 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800308a:	2200      	movs	r2, #0
 800308c:	2100      	movs	r1, #0
 800308e:	2028      	movs	r0, #40	@ 0x28
 8003090:	f005 f91b 	bl	80082ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003094:	2028      	movs	r0, #40	@ 0x28
 8003096:	f005 f932 	bl	80082fe <HAL_NVIC_EnableIRQ>

}
 800309a:	bf00      	nop
 800309c:	3728      	adds	r7, #40	@ 0x28
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	40021000 	.word	0x40021000
 80030a8:	48000800 	.word	0x48000800
 80030ac:	48000400 	.word	0x48000400

080030b0 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b096      	sub	sp, #88	@ 0x58
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80030bc:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	2201      	movs	r2, #1
 80030ca:	2101      	movs	r1, #1
 80030cc:	f00a fe87 	bl	800ddde <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f00b faf7 	bl	800e6d2 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f00b faed 	bl	800e6d2 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f00b fae3 	bl	800e6d2 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8003118:	4619      	mov	r1, r3
 800311a:	ed97 0a02 	vldr	s0, [r7, #8]
 800311e:	4610      	mov	r0, r2
 8003120:	f00b fa66 	bl	800e5f0 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8003136:	461a      	mov	r2, r3
 8003138:	f00b f9e0 	bl	800e4fc <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800314e:	461a      	mov	r2, r3
 8003150:	f00a fe0a 	bl	800dd68 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003166:	461a      	mov	r2, r3
 8003168:	f00b f9c8 	bl	800e4fc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 800317e:	461a      	mov	r2, r3
 8003180:	f00b f9bc 	bl	800e4fc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8003196:	461a      	mov	r2, r3
 8003198:	f00b f9b0 	bl	800e4fc <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80031ae:	4619      	mov	r1, r3
 80031b0:	eeb0 0a67 	vmov.f32	s0, s15
 80031b4:	4610      	mov	r0, r2
 80031b6:	f00b fa1b 	bl	800e5f0 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80031cc:	461a      	mov	r2, r3
 80031ce:	f00a fdcb 	bl	800dd68 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 80031e4:	461a      	mov	r2, r3
 80031e6:	f00b f989 	bl	800e4fc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80031fc:	461a      	mov	r2, r3
 80031fe:	f00b f97d 	bl	800e4fc <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8003214:	461a      	mov	r2, r3
 8003216:	f00a fda7 	bl	800dd68 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f00a fdf0 	bl	800de0e <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8003240:	461a      	mov	r2, r3
 8003242:	f00b f95b 	bl	800e4fc <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003258:	461a      	mov	r2, r3
 800325a:	f00b f94f 	bl	800e4fc <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003270:	461a      	mov	r2, r3
 8003272:	f00b f943 	bl	800e4fc <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8003288:	461a      	mov	r2, r3
 800328a:	f00b f9e7 	bl	800e65c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80032a0:	461a      	mov	r2, r3
 80032a2:	f00b f92b 	bl	800e4fc <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80032b8:	461a      	mov	r2, r3
 80032ba:	f00a fd55 	bl	800dd68 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80032d0:	461a      	mov	r2, r3
 80032d2:	f00b f913 	bl	800e4fc <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 80032d6:	f107 0310 	add.w	r3, r7, #16
 80032da:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80032de:	2204      	movs	r2, #4
 80032e0:	2104      	movs	r1, #4
 80032e2:	f00a fd7c 	bl	800ddde <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 80032f2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80032f6:	4619      	mov	r1, r3
 80032f8:	f00b f900 	bl	800e4fc <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8003302:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003306:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800330a:	4618      	mov	r0, r3
 800330c:	f00b f9a6 	bl	800e65c <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 800331c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003320:	4618      	mov	r0, r3
 8003322:	f00b f8eb 	bl	800e4fc <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8003336:	ee07 3a90 	vmov	s15, r3
}
 800333a:	eeb0 0a67 	vmov.f32	s0, s15
 800333e:	3758      	adds	r7, #88	@ 0x58
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8003344:	b5b0      	push	{r4, r5, r7, lr}
 8003346:	b0a4      	sub	sp, #144	@ 0x90
 8003348:	af00      	add	r7, sp, #0
 800334a:	6178      	str	r0, [r7, #20]
 800334c:	6139      	str	r1, [r7, #16]
 800334e:	60fa      	str	r2, [r7, #12]
 8003350:	ed87 0a02 	vstr	s0, [r7, #8]
 8003354:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8003368:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800336c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003376:	f04f 0300 	mov.w	r3, #0
 800337a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800338c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003390:	673b      	str	r3, [r7, #112]	@ 0x70
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	677b      	str	r3, [r7, #116]	@ 0x74
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 800339e:	4bc6      	ldr	r3, [pc, #792]	@ (80036b8 <Kalman_Start+0x374>)
 80033a0:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80033a4:	461d      	mov	r5, r3
 80033a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033b2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80033b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80033ba:	f107 031c 	add.w	r3, r7, #28
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	605a      	str	r2, [r3, #4]
 80033c4:	609a      	str	r2, [r3, #8]
 80033c6:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80033d2:	2300      	movs	r3, #0
 80033d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033d8:	e028      	b.n	800342c <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 80033da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	6979      	ldr	r1, [r7, #20]
 80033e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ec:	3314      	adds	r3, #20
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	440b      	add	r3, r1
 80033f2:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 80033f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	3390      	adds	r3, #144	@ 0x90
 80033fc:	443b      	add	r3, r7
 80033fe:	3b64      	subs	r3, #100	@ 0x64
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	6979      	ldr	r1, [r7, #20]
 8003404:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003408:	3398      	adds	r3, #152	@ 0x98
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003416:	3304      	adds	r3, #4
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8003422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003426:	3301      	adds	r3, #1
 8003428:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800342c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003430:	2b0f      	cmp	r3, #15
 8003432:	ddd2      	ble.n	80033da <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800343a:	e03a      	b.n	80034b2 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 800343c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	3390      	adds	r3, #144	@ 0x90
 8003444:	443b      	add	r3, r7
 8003446:	3b74      	subs	r3, #116	@ 0x74
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	6979      	ldr	r1, [r7, #20]
 800344c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	440b      	add	r3, r1
 8003454:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8003456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	4413      	add	r3, r2
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	6979      	ldr	r1, [r7, #20]
 8003464:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003468:	3324      	adds	r3, #36	@ 0x24
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8003470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	3390      	adds	r3, #144	@ 0x90
 8003478:	443b      	add	r3, r7
 800347a:	3b14      	subs	r3, #20
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	6979      	ldr	r1, [r7, #20]
 8003480:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003484:	3328      	adds	r3, #40	@ 0x28
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 800348c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	3390      	adds	r3, #144	@ 0x90
 8003494:	443b      	add	r3, r7
 8003496:	3b24      	subs	r3, #36	@ 0x24
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	6979      	ldr	r1, [r7, #20]
 800349c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034a0:	332c      	adds	r3, #44	@ 0x2c
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80034a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034ac:	3301      	adds	r3, #1
 80034ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	ddc0      	ble.n	800343c <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2201      	movs	r2, #1
 80034c4:	2104      	movs	r1, #4
 80034c6:	f00a fc8a 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	3310      	adds	r3, #16
 80034d4:	2204      	movs	r2, #4
 80034d6:	2104      	movs	r1, #4
 80034d8:	f00a fc81 	bl	800ddde <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3350      	adds	r3, #80	@ 0x50
 80034e6:	2204      	movs	r2, #4
 80034e8:	2104      	movs	r1, #4
 80034ea:	f00a fc78 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	3390      	adds	r3, #144	@ 0x90
 80034f8:	2201      	movs	r2, #1
 80034fa:	2104      	movs	r1, #4
 80034fc:	f00a fc6f 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	33a0      	adds	r3, #160	@ 0xa0
 800350a:	2204      	movs	r2, #4
 800350c:	2101      	movs	r1, #1
 800350e:	f00a fc66 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	33b0      	adds	r3, #176	@ 0xb0
 800351c:	2201      	movs	r2, #1
 800351e:	2104      	movs	r1, #4
 8003520:	f00a fc5d 	bl	800ddde <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	33c8      	adds	r3, #200	@ 0xc8
 800352e:	2204      	movs	r2, #4
 8003530:	2104      	movs	r1, #4
 8003532:	f00a fc54 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003542:	2201      	movs	r2, #1
 8003544:	2104      	movs	r1, #4
 8003546:	f00a fc4a 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003556:	2204      	movs	r2, #4
 8003558:	2101      	movs	r1, #1
 800355a:	f00a fc40 	bl	800ddde <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800356a:	2204      	movs	r2, #4
 800356c:	2104      	movs	r1, #4
 800356e:	f00a fc36 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800357e:	2204      	movs	r2, #4
 8003580:	2104      	movs	r1, #4
 8003582:	f00a fc2c 	bl	800ddde <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003592:	2201      	movs	r2, #1
 8003594:	2104      	movs	r1, #4
 8003596:	f00a fc22 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80035a6:	2201      	movs	r2, #1
 80035a8:	2104      	movs	r1, #4
 80035aa:	f00a fc18 	bl	800ddde <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80035ba:	2204      	movs	r2, #4
 80035bc:	2101      	movs	r1, #1
 80035be:	f00a fc0e 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80035ce:	2201      	movs	r2, #1
 80035d0:	2101      	movs	r1, #1
 80035d2:	f00a fc04 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80035e2:	2201      	movs	r2, #1
 80035e4:	2101      	movs	r1, #1
 80035e6:	f00a fbfa 	bl	800ddde <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80035f6:	2201      	movs	r2, #1
 80035f8:	2104      	movs	r1, #4
 80035fa:	f00a fbf0 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800360a:	2201      	movs	r2, #1
 800360c:	2104      	movs	r1, #4
 800360e:	f00a fbe6 	bl	800ddde <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800361e:	2201      	movs	r2, #1
 8003620:	2101      	movs	r1, #1
 8003622:	f00a fbdc 	bl	800ddde <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8003632:	2201      	movs	r2, #1
 8003634:	2101      	movs	r1, #1
 8003636:	f00a fbd2 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8003646:	2201      	movs	r2, #1
 8003648:	2101      	movs	r1, #1
 800364a:	f00a fbc8 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800365a:	2201      	movs	r2, #1
 800365c:	2104      	movs	r1, #4
 800365e:	f00a fbbe 	bl	800ddde <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800366e:	2201      	movs	r2, #1
 8003670:	2101      	movs	r1, #1
 8003672:	f00a fbb4 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003682:	2204      	movs	r2, #4
 8003684:	2104      	movs	r1, #4
 8003686:	f00a fbaa 	bl	800ddde <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	33c4      	adds	r3, #196	@ 0xc4
 8003694:	2201      	movs	r2, #1
 8003696:	2101      	movs	r1, #1
 8003698:	f00a fba1 	bl	800ddde <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80036a8:	2201      	movs	r2, #1
 80036aa:	2101      	movs	r1, #1
 80036ac:	f00a fb97 	bl	800ddde <arm_mat_init_f32>
}
 80036b0:	bf00      	nop
 80036b2:	3790      	adds	r7, #144	@ 0x90
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bdb0      	pop	{r4, r5, r7, pc}
 80036b8:	0800f598 	.word	0x0800f598

080036bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80036c0:	f003 f83f 	bl	8006742 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80036c4:	f000 f81d 	bl	8003702 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80036c8:	f7ff fc42 	bl	8002f50 <MX_GPIO_Init>
	MX_DMA_Init();
 80036cc:	f7ff fbf6 	bl	8002ebc <MX_DMA_Init>
	MX_ADC1_Init();
 80036d0:	f7ff fae8 	bl	8002ca4 <MX_ADC1_Init>
	MX_TIM2_Init();
 80036d4:	f002 fa48 	bl	8005b68 <MX_TIM2_Init>
	MX_TIM3_Init();
 80036d8:	f002 fa94 	bl	8005c04 <MX_TIM3_Init>
	MX_TIM4_Init();
 80036dc:	f002 fae8 	bl	8005cb0 <MX_TIM4_Init>
	MX_TIM5_Init();
 80036e0:	f002 fb3c 	bl	8005d5c <MX_TIM5_Init>
	MX_TIM8_Init();
 80036e4:	f002 fb88 	bl	8005df8 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80036e8:	f002 fe54 	bl	8006394 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80036ec:	f002 fc4c 	bl	8005f88 <MX_TIM16_Init>
	MX_TIM1_Init();
 80036f0:	f002 f9a6 	bl	8005a40 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 80036f4:	f002 fe04 	bl	8006300 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 80036f8:	f001 fc1c 	bl	8004f34 <plotter_begin>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		plotter_update_sensors();
 80036fc:	f001 fede 	bl	80054bc <plotter_update_sensors>
 8003700:	e7fc      	b.n	80036fc <main+0x40>

08003702 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003702:	b580      	push	{r7, lr}
 8003704:	b094      	sub	sp, #80	@ 0x50
 8003706:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003708:	f107 0318 	add.w	r3, r7, #24
 800370c:	2238      	movs	r2, #56	@ 0x38
 800370e:	2100      	movs	r1, #0
 8003710:	4618      	mov	r0, r3
 8003712:	f00b f8d5 	bl	800e8c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003716:	1d3b      	adds	r3, r7, #4
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	605a      	str	r2, [r3, #4]
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	60da      	str	r2, [r3, #12]
 8003722:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8003724:	2000      	movs	r0, #0
 8003726:	f005 fb01 	bl	8008d2c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800372a:	2302      	movs	r3, #2
 800372c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800372e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003732:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003734:	2340      	movs	r3, #64	@ 0x40
 8003736:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003738:	2302      	movs	r3, #2
 800373a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800373c:	2302      	movs	r3, #2
 800373e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003740:	2304      	movs	r3, #4
 8003742:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8003744:	2355      	movs	r3, #85	@ 0x55
 8003746:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003748:	2302      	movs	r3, #2
 800374a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800374c:	2302      	movs	r3, #2
 800374e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003750:	2302      	movs	r3, #2
 8003752:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003754:	f107 0318 	add.w	r3, r7, #24
 8003758:	4618      	mov	r0, r3
 800375a:	f005 fb9b 	bl	8008e94 <HAL_RCC_OscConfig>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <SystemClock_Config+0x66>
		Error_Handler();
 8003764:	f001 fbe0 	bl	8004f28 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003768:	230f      	movs	r3, #15
 800376a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800376c:	2303      	movs	r3, #3
 800376e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800377c:	1d3b      	adds	r3, r7, #4
 800377e:	2104      	movs	r1, #4
 8003780:	4618      	mov	r0, r3
 8003782:	f005 fe99 	bl	80094b8 <HAL_RCC_ClockConfig>
 8003786:	4603      	mov	r3, r0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <SystemClock_Config+0x8e>
		Error_Handler();
 800378c:	f001 fbcc 	bl	8004f28 <Error_Handler>
	}
}
 8003790:	bf00      	nop
 8003792:	3750      	adds	r7, #80	@ 0x50
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <check_prismatic_limit>:

/* USER CODE BEGIN 4 */
bool check_prismatic_limit() {
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
    // If this is a valid operation that's supposed to reach the limit,
    // then don't report it as a limit violation
    if (prismatic_state == PP_GOING_TOP_END ||
 800379c:	4b19      	ldr	r3, [pc, #100]	@ (8003804 <check_prismatic_limit+0x6c>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d007      	beq.n	80037b4 <check_prismatic_limit+0x1c>
        prismatic_state == PP_AT_TOP_END_POSITION ||
 80037a4:	4b17      	ldr	r3, [pc, #92]	@ (8003804 <check_prismatic_limit+0x6c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
    if (prismatic_state == PP_GOING_TOP_END ||
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <check_prismatic_limit+0x1c>
        prismatic_state == PP_AT_BOTTOM_END_POSITION) {
 80037ac:	4b15      	ldr	r3, [pc, #84]	@ (8003804 <check_prismatic_limit+0x6c>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
        prismatic_state == PP_AT_TOP_END_POSITION ||
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d101      	bne.n	80037b8 <check_prismatic_limit+0x20>
        return false;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e01f      	b.n	80037f8 <check_prismatic_limit+0x60>
    }

    // Otherwise, if either condition indicates we're at a limit, report it
    return (prismatic_encoder.mm >= PRISMATIC_MAX_POS || up_photo ||
 80037b8:	4b13      	ldr	r3, [pc, #76]	@ (8003808 <check_prismatic_limit+0x70>)
 80037ba:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
            prismatic_encoder.mm <= PRISMATIC_MIN_POS || low_photo);
 80037be:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800380c <check_prismatic_limit+0x74>
 80037c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	da0f      	bge.n	80037ec <check_prismatic_limit+0x54>
    return (prismatic_encoder.mm >= PRISMATIC_MAX_POS || up_photo ||
 80037cc:	4b10      	ldr	r3, [pc, #64]	@ (8003810 <check_prismatic_limit+0x78>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10b      	bne.n	80037ec <check_prismatic_limit+0x54>
            prismatic_encoder.mm <= PRISMATIC_MIN_POS || low_photo);
 80037d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <check_prismatic_limit+0x70>)
 80037d6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
    return (prismatic_encoder.mm >= PRISMATIC_MAX_POS || up_photo ||
 80037da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e2:	d903      	bls.n	80037ec <check_prismatic_limit+0x54>
            prismatic_encoder.mm <= PRISMATIC_MIN_POS || low_photo);
 80037e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003814 <check_prismatic_limit+0x7c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <check_prismatic_limit+0x58>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <check_prismatic_limit+0x5a>
 80037f0:	2300      	movs	r3, #0
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	b2db      	uxtb	r3, r3
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	200002ee 	.word	0x200002ee
 8003808:	20000644 	.word	0x20000644
 800380c:	43960000 	.word	0x43960000
 8003810:	200017dc 	.word	0x200017dc
 8003814:	200017e0 	.word	0x200017e0

08003818 <check_revolute_limit>:

bool check_revolute_limit() {
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
    // For homing operations, don't count limits as violations
    if (revolute_state == RP_GOING_HOME) {
 800381c:	4b11      	ldr	r3, [pc, #68]	@ (8003864 <check_revolute_limit+0x4c>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <check_revolute_limit+0x10>
        return false;
 8003824:	2300      	movs	r3, #0
 8003826:	e017      	b.n	8003858 <check_revolute_limit+0x40>
    }

    // For normal operation, check limits
    return (revolute_encoder.rads >= REVOLUTE_MAX_POS ||
 8003828:	4b0f      	ldr	r3, [pc, #60]	@ (8003868 <check_revolute_limit+0x50>)
 800382a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800382e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800386c <check_revolute_limit+0x54>
 8003832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383a:	da07      	bge.n	800384c <check_revolute_limit+0x34>
            revolute_encoder.rads <= REVOLUTE_MIN_POS);
 800383c:	4b0a      	ldr	r3, [pc, #40]	@ (8003868 <check_revolute_limit+0x50>)
 800383e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
    return (revolute_encoder.rads >= REVOLUTE_MAX_POS ||
 8003842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384a:	d801      	bhi.n	8003850 <check_revolute_limit+0x38>
 800384c:	2301      	movs	r3, #1
 800384e:	e000      	b.n	8003852 <check_revolute_limit+0x3a>
 8003850:	2300      	movs	r3, #0
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	b2db      	uxtb	r3, r3
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	200002ef 	.word	0x200002ef
 8003868:	200006a0 	.word	0x200006a0
 800386c:	40c90fdb 	.word	0x40c90fdb

08003870 <plotter_move>:
void plotter_move() {
 8003870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003874:	ed2d 8b02 	vpush	{d8}
 8003878:	af00      	add	r7, sp, #0
	pris_pos[0] = prismatic_encoder.mm;
 800387a:	4ba8      	ldr	r3, [pc, #672]	@ (8003b1c <plotter_move+0x2ac>)
 800387c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800387e:	4aa8      	ldr	r2, [pc, #672]	@ (8003b20 <plotter_move+0x2b0>)
 8003880:	6013      	str	r3, [r2, #0]

	pris_pos_error = prismatic_pos - prismatic_encoder.mm;
 8003882:	4ba8      	ldr	r3, [pc, #672]	@ (8003b24 <plotter_move+0x2b4>)
 8003884:	ed93 7a00 	vldr	s14, [r3]
 8003888:	4ba4      	ldr	r3, [pc, #656]	@ (8003b1c <plotter_move+0x2ac>)
 800388a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800388e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003892:	4ba5      	ldr	r3, [pc, #660]	@ (8003b28 <plotter_move+0x2b8>)
 8003894:	edc3 7a00 	vstr	s15, [r3]

	pris_cmd_vx = saturation(
 8003898:	4ba3      	ldr	r3, [pc, #652]	@ (8003b28 <plotter_move+0x2b8>)
 800389a:	edd3 7a00 	vldr	s15, [r3]
 800389e:	eeb0 0a67 	vmov.f32	s0, s15
 80038a2:	48a2      	ldr	r0, [pc, #648]	@ (8003b2c <plotter_move+0x2bc>)
 80038a4:	f7fd fc4d 	bl	8001142 <PID_CONTROLLER_Compute>
 80038a8:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid, pris_pos_error),
			ZGX45RGG_400RPM_Constant.sd_max, -ZGX45RGG_400RPM_Constant.sd_max);
 80038ac:	4ba0      	ldr	r3, [pc, #640]	@ (8003b30 <plotter_move+0x2c0>)
 80038ae:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	pris_cmd_vx = saturation(
 80038b2:	4610      	mov	r0, r2
 80038b4:	4619      	mov	r1, r3
 80038b6:	f7fd f94d 	bl	8000b54 <__aeabi_d2f>
 80038ba:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.sd_max, -ZGX45RGG_400RPM_Constant.sd_max);
 80038bc:	4b9c      	ldr	r3, [pc, #624]	@ (8003b30 <plotter_move+0x2c0>)
 80038be:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80038c2:	4610      	mov	r0, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	f7fd f945 	bl	8000b54 <__aeabi_d2f>
 80038ca:	4603      	mov	r3, r0
	pris_cmd_vx = saturation(
 80038cc:	ee07 3a90 	vmov	s15, r3
 80038d0:	eef1 7a67 	vneg.f32	s15, s15
 80038d4:	eeb0 1a67 	vmov.f32	s2, s15
 80038d8:	ee00 6a90 	vmov	s1, r6
 80038dc:	eeb0 0a48 	vmov.f32	s0, s16
 80038e0:	f7fd ff57 	bl	8001792 <saturation>
 80038e4:	eef0 7a40 	vmov.f32	s15, s0
 80038e8:	4b92      	ldr	r3, [pc, #584]	@ (8003b34 <plotter_move+0x2c4>)
 80038ea:	edc3 7a00 	vstr	s15, [r3]

	pris_vel_error = pris_cmd_vx + prismatic_vel - pris_kal_filt;
 80038ee:	4b91      	ldr	r3, [pc, #580]	@ (8003b34 <plotter_move+0x2c4>)
 80038f0:	ed93 7a00 	vldr	s14, [r3]
 80038f4:	4b90      	ldr	r3, [pc, #576]	@ (8003b38 <plotter_move+0x2c8>)
 80038f6:	edd3 7a00 	vldr	s15, [r3]
 80038fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038fe:	4b8f      	ldr	r3, [pc, #572]	@ (8003b3c <plotter_move+0x2cc>)
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003908:	4b8d      	ldr	r3, [pc, #564]	@ (8003b40 <plotter_move+0x2d0>)
 800390a:	edc3 7a00 	vstr	s15, [r3]

	pris_cmd_ux = PWM_Satuation(
 800390e:	4b8c      	ldr	r3, [pc, #560]	@ (8003b40 <plotter_move+0x2d0>)
 8003910:	edd3 7a00 	vldr	s15, [r3]
 8003914:	eeb0 0a67 	vmov.f32	s0, s15
 8003918:	488a      	ldr	r0, [pc, #552]	@ (8003b44 <plotter_move+0x2d4>)
 800391a:	f7fd fc12 	bl	8001142 <PID_CONTROLLER_Compute>
 800391e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid, pris_vel_error),
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8003922:	4b83      	ldr	r3, [pc, #524]	@ (8003b30 <plotter_move+0x2c0>)
 8003924:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	pris_cmd_ux = PWM_Satuation(
 8003928:	4610      	mov	r0, r2
 800392a:	4619      	mov	r1, r3
 800392c:	f7fd f8ca 	bl	8000ac4 <__aeabi_d2iz>
 8003930:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8003932:	4b7f      	ldr	r3, [pc, #508]	@ (8003b30 <plotter_move+0x2c0>)
 8003934:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003938:	4690      	mov	r8, r2
 800393a:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	pris_cmd_ux = PWM_Satuation(
 800393e:	4640      	mov	r0, r8
 8003940:	4649      	mov	r1, r9
 8003942:	f7fd f8bf 	bl	8000ac4 <__aeabi_d2iz>
 8003946:	4603      	mov	r3, r0
 8003948:	4619      	mov	r1, r3
 800394a:	4630      	mov	r0, r6
 800394c:	eeb0 0a48 	vmov.f32	s0, s16
 8003950:	f7fd fb9e 	bl	8001090 <PWM_Satuation>
 8003954:	ee07 0a90 	vmov	s15, r0
 8003958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800395c:	4b7a      	ldr	r3, [pc, #488]	@ (8003b48 <plotter_move+0x2d8>)
 800395e:	edc3 7a00 	vstr	s15, [r3]

	if (check_prismatic_limit()) {
 8003962:	f7ff ff19 	bl	8003798 <check_prismatic_limit>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <plotter_move+0x112>
		MDXX_set_range(&prismatic_motor, 2000, 0);
 800396c:	eddf 0a77 	vldr	s1, [pc, #476]	@ 8003b4c <plotter_move+0x2dc>
 8003970:	ed9f 0a77 	vldr	s0, [pc, #476]	@ 8003b50 <plotter_move+0x2e0>
 8003974:	4877      	ldr	r0, [pc, #476]	@ (8003b54 <plotter_move+0x2e4>)
 8003976:	f7fd fc9b 	bl	80012b0 <MDXX_set_range>
		pristrajectoryActive = false;
 800397a:	4b77      	ldr	r3, [pc, #476]	@ (8003b58 <plotter_move+0x2e8>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
		return;
 8003980:	e0c7      	b.n	8003b12 <plotter_move+0x2a2>
	}

	MDXX_set_range(&prismatic_motor, 2000, pris_cmd_ux);
 8003982:	4b71      	ldr	r3, [pc, #452]	@ (8003b48 <plotter_move+0x2d8>)
 8003984:	edd3 7a00 	vldr	s15, [r3]
 8003988:	eef0 0a67 	vmov.f32	s1, s15
 800398c:	ed9f 0a70 	vldr	s0, [pc, #448]	@ 8003b50 <plotter_move+0x2e0>
 8003990:	4870      	ldr	r0, [pc, #448]	@ (8003b54 <plotter_move+0x2e4>)
 8003992:	f7fd fc8d 	bl	80012b0 <MDXX_set_range>

	if (pris_pos[0] - pris_pos[1] > 0) {
 8003996:	4b62      	ldr	r3, [pc, #392]	@ (8003b20 <plotter_move+0x2b0>)
 8003998:	ed93 7a00 	vldr	s14, [r3]
 800399c:	4b60      	ldr	r3, [pc, #384]	@ (8003b20 <plotter_move+0x2b0>)
 800399e:	edd3 7a01 	vldr	s15, [r3, #4]
 80039a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ae:	dd03      	ble.n	80039b8 <plotter_move+0x148>
		prismatic_state = PP_GO_UP;
 80039b0:	4b6a      	ldr	r3, [pc, #424]	@ (8003b5c <plotter_move+0x2ec>)
 80039b2:	2203      	movs	r2, #3
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	e002      	b.n	80039be <plotter_move+0x14e>
	} else {
		prismatic_state = PP_GO_DOWN;
 80039b8:	4b68      	ldr	r3, [pc, #416]	@ (8003b5c <plotter_move+0x2ec>)
 80039ba:	2204      	movs	r2, #4
 80039bc:	701a      	strb	r2, [r3, #0]
	}

/////////////////////////////////////////////////////

	rev_pos[0] = revolute_encoder.rads;
 80039be:	4b68      	ldr	r3, [pc, #416]	@ (8003b60 <plotter_move+0x2f0>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c2:	4a68      	ldr	r2, [pc, #416]	@ (8003b64 <plotter_move+0x2f4>)
 80039c4:	6013      	str	r3, [r2, #0]

	rev_pos_error = revolute_pos - revolute_encoder.rads;
 80039c6:	4b68      	ldr	r3, [pc, #416]	@ (8003b68 <plotter_move+0x2f8>)
 80039c8:	ed93 7a00 	vldr	s14, [r3]
 80039cc:	4b64      	ldr	r3, [pc, #400]	@ (8003b60 <plotter_move+0x2f0>)
 80039ce:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80039d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d6:	4b65      	ldr	r3, [pc, #404]	@ (8003b6c <plotter_move+0x2fc>)
 80039d8:	edc3 7a00 	vstr	s15, [r3]

	rev_cmd_vx = saturation(
 80039dc:	4b63      	ldr	r3, [pc, #396]	@ (8003b6c <plotter_move+0x2fc>)
 80039de:	edd3 7a00 	vldr	s15, [r3]
 80039e2:	eeb0 0a67 	vmov.f32	s0, s15
 80039e6:	4862      	ldr	r0, [pc, #392]	@ (8003b70 <plotter_move+0x300>)
 80039e8:	f7fd fbab 	bl	8001142 <PID_CONTROLLER_Compute>
 80039ec:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid, rev_pos_error),
			ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 80039f0:	4b60      	ldr	r3, [pc, #384]	@ (8003b74 <plotter_move+0x304>)
 80039f2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	rev_cmd_vx = saturation(
 80039f6:	4610      	mov	r0, r2
 80039f8:	4619      	mov	r1, r3
 80039fa:	f7fd f8ab 	bl	8000b54 <__aeabi_d2f>
 80039fe:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.qd_max, -ZGX45RGG_150RPM_Constant.qd_max);
 8003a00:	4b5c      	ldr	r3, [pc, #368]	@ (8003b74 <plotter_move+0x304>)
 8003a02:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f7fd f8a3 	bl	8000b54 <__aeabi_d2f>
 8003a0e:	4603      	mov	r3, r0
	rev_cmd_vx = saturation(
 8003a10:	ee07 3a90 	vmov	s15, r3
 8003a14:	eef1 7a67 	vneg.f32	s15, s15
 8003a18:	eeb0 1a67 	vmov.f32	s2, s15
 8003a1c:	ee00 6a90 	vmov	s1, r6
 8003a20:	eeb0 0a48 	vmov.f32	s0, s16
 8003a24:	f7fd feb5 	bl	8001792 <saturation>
 8003a28:	eef0 7a40 	vmov.f32	s15, s0
 8003a2c:	4b52      	ldr	r3, [pc, #328]	@ (8003b78 <plotter_move+0x308>)
 8003a2e:	edc3 7a00 	vstr	s15, [r3]

	rev_vel_error = rev_cmd_vx + revolute_vel - rev_kal_filt;
 8003a32:	4b51      	ldr	r3, [pc, #324]	@ (8003b78 <plotter_move+0x308>)
 8003a34:	ed93 7a00 	vldr	s14, [r3]
 8003a38:	4b50      	ldr	r3, [pc, #320]	@ (8003b7c <plotter_move+0x30c>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a42:	4b4f      	ldr	r3, [pc, #316]	@ (8003b80 <plotter_move+0x310>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a4c:	4b4d      	ldr	r3, [pc, #308]	@ (8003b84 <plotter_move+0x314>)
 8003a4e:	edc3 7a00 	vstr	s15, [r3]

	rev_cmd_ux = PWM_Satuation(
 8003a52:	4b4c      	ldr	r3, [pc, #304]	@ (8003b84 <plotter_move+0x314>)
 8003a54:	edd3 7a00 	vldr	s15, [r3]
 8003a58:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5c:	484a      	ldr	r0, [pc, #296]	@ (8003b88 <plotter_move+0x318>)
 8003a5e:	f7fd fb70 	bl	8001142 <PID_CONTROLLER_Compute>
 8003a62:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid, rev_vel_error),
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8003a66:	4b43      	ldr	r3, [pc, #268]	@ (8003b74 <plotter_move+0x304>)
 8003a68:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	rev_cmd_ux = PWM_Satuation(
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	4619      	mov	r1, r3
 8003a70:	f7fd f828 	bl	8000ac4 <__aeabi_d2iz>
 8003a74:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8003a76:	4b3f      	ldr	r3, [pc, #252]	@ (8003b74 <plotter_move+0x304>)
 8003a78:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003a7c:	4614      	mov	r4, r2
 8003a7e:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	rev_cmd_ux = PWM_Satuation(
 8003a82:	4620      	mov	r0, r4
 8003a84:	4629      	mov	r1, r5
 8003a86:	f7fd f81d 	bl	8000ac4 <__aeabi_d2iz>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4630      	mov	r0, r6
 8003a90:	eeb0 0a48 	vmov.f32	s0, s16
 8003a94:	f7fd fafc 	bl	8001090 <PWM_Satuation>
 8003a98:	ee07 0a90 	vmov	s15, r0
 8003a9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa0:	4b3a      	ldr	r3, [pc, #232]	@ (8003b8c <plotter_move+0x31c>)
 8003aa2:	edc3 7a00 	vstr	s15, [r3]

	if (check_revolute_limit()) {
 8003aa6:	f7ff feb7 	bl	8003818 <check_revolute_limit>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <plotter_move+0x256>
		MDXX_set_range(&revolute_motor, 2000, 0);
 8003ab0:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8003b4c <plotter_move+0x2dc>
 8003ab4:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8003b50 <plotter_move+0x2e0>
 8003ab8:	4835      	ldr	r0, [pc, #212]	@ (8003b90 <plotter_move+0x320>)
 8003aba:	f7fd fbf9 	bl	80012b0 <MDXX_set_range>
		revtrajectoryActive = false;
 8003abe:	4b35      	ldr	r3, [pc, #212]	@ (8003b94 <plotter_move+0x324>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
		return;
 8003ac4:	e025      	b.n	8003b12 <plotter_move+0x2a2>
	}

	MDXX_set_range(&revolute_motor, 2000, rev_cmd_ux);
 8003ac6:	4b31      	ldr	r3, [pc, #196]	@ (8003b8c <plotter_move+0x31c>)
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	eef0 0a67 	vmov.f32	s1, s15
 8003ad0:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8003b50 <plotter_move+0x2e0>
 8003ad4:	482e      	ldr	r0, [pc, #184]	@ (8003b90 <plotter_move+0x320>)
 8003ad6:	f7fd fbeb 	bl	80012b0 <MDXX_set_range>

	if (rev_pos[0] - rev_pos[1] > 0) {
 8003ada:	4b22      	ldr	r3, [pc, #136]	@ (8003b64 <plotter_move+0x2f4>)
 8003adc:	ed93 7a00 	vldr	s14, [r3]
 8003ae0:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <plotter_move+0x2f4>)
 8003ae2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af2:	dd03      	ble.n	8003afc <plotter_move+0x28c>
		revolute_state = RP_GO_CLOCKWISE;
 8003af4:	4b28      	ldr	r3, [pc, #160]	@ (8003b98 <plotter_move+0x328>)
 8003af6:	2202      	movs	r2, #2
 8003af8:	701a      	strb	r2, [r3, #0]
 8003afa:	e002      	b.n	8003b02 <plotter_move+0x292>
	} else {
		revolute_state = RP_GO_COUNTER_CLOCKWISE;
 8003afc:	4b26      	ldr	r3, [pc, #152]	@ (8003b98 <plotter_move+0x328>)
 8003afe:	2203      	movs	r2, #3
 8003b00:	701a      	strb	r2, [r3, #0]
	}

	pris_pos[1] = pris_pos[0];
 8003b02:	4b07      	ldr	r3, [pc, #28]	@ (8003b20 <plotter_move+0x2b0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a06      	ldr	r2, [pc, #24]	@ (8003b20 <plotter_move+0x2b0>)
 8003b08:	6053      	str	r3, [r2, #4]
	rev_pos[1] = rev_pos[0];
 8003b0a:	4b16      	ldr	r3, [pc, #88]	@ (8003b64 <plotter_move+0x2f4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a15      	ldr	r2, [pc, #84]	@ (8003b64 <plotter_move+0x2f4>)
 8003b10:	6053      	str	r3, [r2, #4]
}
 8003b12:	46bd      	mov	sp, r7
 8003b14:	ecbd 8b02 	vpop	{d8}
 8003b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b1c:	20000644 	.word	0x20000644
 8003b20:	20000590 	.word	0x20000590
 8003b24:	20000510 	.word	0x20000510
 8003b28:	2000051c 	.word	0x2000051c
 8003b2c:	200006fc 	.word	0x200006fc
 8003b30:	20000060 	.word	0x20000060
 8003b34:	20000530 	.word	0x20000530
 8003b38:	20000514 	.word	0x20000514
 8003b3c:	20000524 	.word	0x20000524
 8003b40:	20000520 	.word	0x20000520
 8003b44:	20000718 	.word	0x20000718
 8003b48:	2000052c 	.word	0x2000052c
 8003b4c:	00000000 	.word	0x00000000
 8003b50:	44fa0000 	.word	0x44fa0000
 8003b54:	200005ac 	.word	0x200005ac
 8003b58:	20000504 	.word	0x20000504
 8003b5c:	200002ee 	.word	0x200002ee
 8003b60:	200006a0 	.word	0x200006a0
 8003b64:	20000598 	.word	0x20000598
 8003b68:	20000568 	.word	0x20000568
 8003b6c:	20000574 	.word	0x20000574
 8003b70:	20000734 	.word	0x20000734
 8003b74:	20000000 	.word	0x20000000
 8003b78:	20000588 	.word	0x20000588
 8003b7c:	2000056c 	.word	0x2000056c
 8003b80:	2000057c 	.word	0x2000057c
 8003b84:	20000578 	.word	0x20000578
 8003b88:	20000750 	.word	0x20000750
 8003b8c:	20000584 	.word	0x20000584
 8003b90:	200005f8 	.word	0x200005f8
 8003b94:	2000055c 	.word	0x2000055c
 8003b98:	200002ef 	.word	0x200002ef
 8003b9c:	00000000 	.word	0x00000000

08003ba0 <plotter_joymove>:

void plotter_joymove() {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	static float32_t pris_joy, rev_joy;

// Prismatic limits check
	if (check_prismatic_limit()) {
 8003ba4:	f7ff fdf8 	bl	8003798 <check_prismatic_limit>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d004      	beq.n	8003bb8 <plotter_joymove+0x18>
		pris_joy = 0.0f;
 8003bae:	4b7a      	ldr	r3, [pc, #488]	@ (8003d98 <plotter_joymove+0x1f8>)
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e060      	b.n	8003c7a <plotter_joymove+0xda>
	} else {
		if (joystick_y > 0.7) {
 8003bb8:	4b78      	ldr	r3, [pc, #480]	@ (8003d9c <plotter_joymove+0x1fc>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f7fc fc8f 	bl	80004e0 <__aeabi_f2d>
 8003bc2:	a36f      	add	r3, pc, #444	@ (adr r3, 8003d80 <plotter_joymove+0x1e0>)
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	f7fc ff72 	bl	8000ab0 <__aeabi_dcmpgt>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d01f      	beq.n	8003c12 <plotter_joymove+0x72>
			pris_joy = (joystick_y - 0.7) * 25000.0f;
 8003bd2:	4b72      	ldr	r3, [pc, #456]	@ (8003d9c <plotter_joymove+0x1fc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fc fc82 	bl	80004e0 <__aeabi_f2d>
 8003bdc:	a368      	add	r3, pc, #416	@ (adr r3, 8003d80 <plotter_joymove+0x1e0>)
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	f7fc fb1d 	bl	8000220 <__aeabi_dsub>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	a366      	add	r3, pc, #408	@ (adr r3, 8003d88 <plotter_joymove+0x1e8>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f7fc fccc 	bl	8000590 <__aeabi_dmul>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	4619      	mov	r1, r3
 8003c00:	f7fc ffa8 	bl	8000b54 <__aeabi_d2f>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4a64      	ldr	r2, [pc, #400]	@ (8003d98 <plotter_joymove+0x1f8>)
 8003c08:	6013      	str	r3, [r2, #0]
			prismatic_state = PP_GO_UP;
 8003c0a:	4b65      	ldr	r3, [pc, #404]	@ (8003da0 <plotter_joymove+0x200>)
 8003c0c:	2203      	movs	r2, #3
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	e033      	b.n	8003c7a <plotter_joymove+0xda>
		} else if (joystick_y < -0.7) {
 8003c12:	4b62      	ldr	r3, [pc, #392]	@ (8003d9c <plotter_joymove+0x1fc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fc fc62 	bl	80004e0 <__aeabi_f2d>
 8003c1c:	a35c      	add	r3, pc, #368	@ (adr r3, 8003d90 <plotter_joymove+0x1f0>)
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	f7fc ff27 	bl	8000a74 <__aeabi_dcmplt>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01f      	beq.n	8003c6c <plotter_joymove+0xcc>
			pris_joy = (joystick_y + 0.7) * 25000.0f;
 8003c2c:	4b5b      	ldr	r3, [pc, #364]	@ (8003d9c <plotter_joymove+0x1fc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fc fc55 	bl	80004e0 <__aeabi_f2d>
 8003c36:	a352      	add	r3, pc, #328	@ (adr r3, 8003d80 <plotter_joymove+0x1e0>)
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f7fc faf2 	bl	8000224 <__adddf3>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	a34f      	add	r3, pc, #316	@ (adr r3, 8003d88 <plotter_joymove+0x1e8>)
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	f7fc fc9f 	bl	8000590 <__aeabi_dmul>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f7fc ff7b 	bl	8000b54 <__aeabi_d2f>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	4a4d      	ldr	r2, [pc, #308]	@ (8003d98 <plotter_joymove+0x1f8>)
 8003c62:	6013      	str	r3, [r2, #0]
			prismatic_state = PP_GO_DOWN;
 8003c64:	4b4e      	ldr	r3, [pc, #312]	@ (8003da0 <plotter_joymove+0x200>)
 8003c66:	2204      	movs	r2, #4
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	e006      	b.n	8003c7a <plotter_joymove+0xda>
		} else {
			pris_joy = 0.0;
 8003c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003d98 <plotter_joymove+0x1f8>)
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]
			prismatic_state = PP_UNKNOWN;
 8003c74:	4b4a      	ldr	r3, [pc, #296]	@ (8003da0 <plotter_joymove+0x200>)
 8003c76:	2206      	movs	r2, #6
 8003c78:	701a      	strb	r2, [r3, #0]
		}
	}

// Revolute limits check
	if (check_revolute_limit()) {
 8003c7a:	f7ff fdcd 	bl	8003818 <check_revolute_limit>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d004      	beq.n	8003c8e <plotter_joymove+0xee>
		rev_joy = 0.0f;
 8003c84:	4b47      	ldr	r3, [pc, #284]	@ (8003da4 <plotter_joymove+0x204>)
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	e060      	b.n	8003d50 <plotter_joymove+0x1b0>
	} else {
		if (joystick_x > 0.7) {
 8003c8e:	4b46      	ldr	r3, [pc, #280]	@ (8003da8 <plotter_joymove+0x208>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc fc24 	bl	80004e0 <__aeabi_f2d>
 8003c98:	a339      	add	r3, pc, #228	@ (adr r3, 8003d80 <plotter_joymove+0x1e0>)
 8003c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9e:	f7fc ff07 	bl	8000ab0 <__aeabi_dcmpgt>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01f      	beq.n	8003ce8 <plotter_joymove+0x148>
			rev_joy = (joystick_x - 0.7) * 25000.0f;
 8003ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8003da8 <plotter_joymove+0x208>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fc fc17 	bl	80004e0 <__aeabi_f2d>
 8003cb2:	a333      	add	r3, pc, #204	@ (adr r3, 8003d80 <plotter_joymove+0x1e0>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f7fc fab2 	bl	8000220 <__aeabi_dsub>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	a330      	add	r3, pc, #192	@ (adr r3, 8003d88 <plotter_joymove+0x1e8>)
 8003cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cca:	f7fc fc61 	bl	8000590 <__aeabi_dmul>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f7fc ff3d 	bl	8000b54 <__aeabi_d2f>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4a31      	ldr	r2, [pc, #196]	@ (8003da4 <plotter_joymove+0x204>)
 8003cde:	6013      	str	r3, [r2, #0]
			revolute_state = RP_GO_COUNTER_CLOCKWISE;
 8003ce0:	4b32      	ldr	r3, [pc, #200]	@ (8003dac <plotter_joymove+0x20c>)
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e033      	b.n	8003d50 <plotter_joymove+0x1b0>
		} else if (joystick_x < -0.7) {
 8003ce8:	4b2f      	ldr	r3, [pc, #188]	@ (8003da8 <plotter_joymove+0x208>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fc fbf7 	bl	80004e0 <__aeabi_f2d>
 8003cf2:	a327      	add	r3, pc, #156	@ (adr r3, 8003d90 <plotter_joymove+0x1f0>)
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f7fc febc 	bl	8000a74 <__aeabi_dcmplt>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d01f      	beq.n	8003d42 <plotter_joymove+0x1a2>
			rev_joy = (joystick_x + 0.7) * 25000.0f;
 8003d02:	4b29      	ldr	r3, [pc, #164]	@ (8003da8 <plotter_joymove+0x208>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7fc fbea 	bl	80004e0 <__aeabi_f2d>
 8003d0c:	a31c      	add	r3, pc, #112	@ (adr r3, 8003d80 <plotter_joymove+0x1e0>)
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	f7fc fa87 	bl	8000224 <__adddf3>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	a31a      	add	r3, pc, #104	@ (adr r3, 8003d88 <plotter_joymove+0x1e8>)
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f7fc fc34 	bl	8000590 <__aeabi_dmul>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	4619      	mov	r1, r3
 8003d30:	f7fc ff10 	bl	8000b54 <__aeabi_d2f>
 8003d34:	4603      	mov	r3, r0
 8003d36:	4a1b      	ldr	r2, [pc, #108]	@ (8003da4 <plotter_joymove+0x204>)
 8003d38:	6013      	str	r3, [r2, #0]
			revolute_state = RP_GO_CLOCKWISE;
 8003d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8003dac <plotter_joymove+0x20c>)
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	701a      	strb	r2, [r3, #0]
 8003d40:	e006      	b.n	8003d50 <plotter_joymove+0x1b0>
		} else {
			rev_joy = 0.0;
 8003d42:	4b18      	ldr	r3, [pc, #96]	@ (8003da4 <plotter_joymove+0x204>)
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	601a      	str	r2, [r3, #0]
			revolute_state = RP_UNKNOWN;
 8003d4a:	4b18      	ldr	r3, [pc, #96]	@ (8003dac <plotter_joymove+0x20c>)
 8003d4c:	2205      	movs	r2, #5
 8003d4e:	701a      	strb	r2, [r3, #0]
		}
	}

	MDXX_set_range(&prismatic_motor, 2000, pris_joy);
 8003d50:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <plotter_joymove+0x1f8>)
 8003d52:	edd3 7a00 	vldr	s15, [r3]
 8003d56:	eef0 0a67 	vmov.f32	s1, s15
 8003d5a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8003db0 <plotter_joymove+0x210>
 8003d5e:	4815      	ldr	r0, [pc, #84]	@ (8003db4 <plotter_joymove+0x214>)
 8003d60:	f7fd faa6 	bl	80012b0 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, rev_joy);
 8003d64:	4b0f      	ldr	r3, [pc, #60]	@ (8003da4 <plotter_joymove+0x204>)
 8003d66:	edd3 7a00 	vldr	s15, [r3]
 8003d6a:	eef0 0a67 	vmov.f32	s1, s15
 8003d6e:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8003db0 <plotter_joymove+0x210>
 8003d72:	4811      	ldr	r0, [pc, #68]	@ (8003db8 <plotter_joymove+0x218>)
 8003d74:	f7fd fa9c 	bl	80012b0 <MDXX_set_range>
}
 8003d78:	bf00      	nop
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	f3af 8000 	nop.w
 8003d80:	66666666 	.word	0x66666666
 8003d84:	3fe66666 	.word	0x3fe66666
 8003d88:	00000000 	.word	0x00000000
 8003d8c:	40d86a00 	.word	0x40d86a00
 8003d90:	66666666 	.word	0x66666666
 8003d94:	bfe66666 	.word	0xbfe66666
 8003d98:	200005a0 	.word	0x200005a0
 8003d9c:	200017c0 	.word	0x200017c0
 8003da0:	200002ee 	.word	0x200002ee
 8003da4:	200005a4 	.word	0x200005a4
 8003da8:	200017bc 	.word	0x200017bc
 8003dac:	200002ef 	.word	0x200002ef
 8003db0:	44fa0000 	.word	0x44fa0000
 8003db4:	200005ac 	.word	0x200005ac
 8003db8:	200005f8 	.word	0x200005f8

08003dbc <plotter_handle_state_transition>:

void plotter_handle_state_transition() {
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
// Save previous state
	rs_previous_state = rs_current_state;
 8003dc0:	4b6b      	ldr	r3, [pc, #428]	@ (8003f70 <plotter_handle_state_transition+0x1b4>)
 8003dc2:	781a      	ldrb	r2, [r3, #0]
 8003dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f74 <plotter_handle_state_transition+0x1b8>)
 8003dc6:	701a      	strb	r2, [r3, #0]

// Only process base system commands if not in emergency mode
	if (rs_current_state != RS_EMERGENCY_TRIGGED) {
 8003dc8:	4b69      	ldr	r3, [pc, #420]	@ (8003f70 <plotter_handle_state_transition+0x1b4>)
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d02a      	beq.n	8003e26 <plotter_handle_state_transition+0x6a>
		// Process base system commands
		if (registerFrame[BaseSystem_Status].U16 == 1) {
 8003dd0:	4b69      	ldr	r3, [pc, #420]	@ (8003f78 <plotter_handle_state_transition+0x1bc>)
 8003dd2:	885b      	ldrh	r3, [r3, #2]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d106      	bne.n	8003de6 <plotter_handle_state_transition+0x2a>
			// Set Home Command
			rs_current_state = RS_RETURN_TO_HOME;
 8003dd8:	4b65      	ldr	r3, [pc, #404]	@ (8003f70 <plotter_handle_state_transition+0x1b4>)
 8003dda:	2204      	movs	r2, #4
 8003ddc:	701a      	strb	r2, [r3, #0]
			registerFrame[R_Theta_Status].U16 = 1;
 8003dde:	4b66      	ldr	r3, [pc, #408]	@ (8003f78 <plotter_handle_state_transition+0x1bc>)
 8003de0:	2201      	movs	r2, #1
 8003de2:	841a      	strh	r2, [r3, #32]
 8003de4:	e01f      	b.n	8003e26 <plotter_handle_state_transition+0x6a>
		} else if (registerFrame[BaseSystem_Status].U16 == 2) {
 8003de6:	4b64      	ldr	r3, [pc, #400]	@ (8003f78 <plotter_handle_state_transition+0x1bc>)
 8003de8:	885b      	ldrh	r3, [r3, #2]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d106      	bne.n	8003dfc <plotter_handle_state_transition+0x40>
			// Joystick Mode
			rs_current_state = RS_JOG_MODE;
 8003dee:	4b60      	ldr	r3, [pc, #384]	@ (8003f70 <plotter_handle_state_transition+0x1b4>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	701a      	strb	r2, [r3, #0]
			registerFrame[R_Theta_Status].U16 = 2;
 8003df4:	4b60      	ldr	r3, [pc, #384]	@ (8003f78 <plotter_handle_state_transition+0x1bc>)
 8003df6:	2202      	movs	r2, #2
 8003df8:	841a      	strh	r2, [r3, #32]
 8003dfa:	e014      	b.n	8003e26 <plotter_handle_state_transition+0x6a>
		} else if (registerFrame[BaseSystem_Status].U16 == 4) {
 8003dfc:	4b5e      	ldr	r3, [pc, #376]	@ (8003f78 <plotter_handle_state_transition+0x1bc>)
 8003dfe:	885b      	ldrh	r3, [r3, #2]
 8003e00:	2b04      	cmp	r3, #4
 8003e02:	d106      	bne.n	8003e12 <plotter_handle_state_transition+0x56>
			// Point Mode (Just Receive Input)
			rs_current_state = RS_POINT_MODE;
 8003e04:	4b5a      	ldr	r3, [pc, #360]	@ (8003f70 <plotter_handle_state_transition+0x1b4>)
 8003e06:	2202      	movs	r2, #2
 8003e08:	701a      	strb	r2, [r3, #0]
			registerFrame[R_Theta_Status].U16 = 4;
 8003e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003f78 <plotter_handle_state_transition+0x1bc>)
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	841a      	strh	r2, [r3, #32]
 8003e10:	e009      	b.n	8003e26 <plotter_handle_state_transition+0x6a>
		} else if (registerFrame[BaseSystem_Status].U16 == 8) {
 8003e12:	4b59      	ldr	r3, [pc, #356]	@ (8003f78 <plotter_handle_state_transition+0x1bc>)
 8003e14:	885b      	ldrh	r3, [r3, #2]
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d105      	bne.n	8003e26 <plotter_handle_state_transition+0x6a>
			// Go to Point Mode
			rs_current_state = RS_MOVING;
 8003e1a:	4b55      	ldr	r3, [pc, #340]	@ (8003f70 <plotter_handle_state_transition+0x1b4>)
 8003e1c:	2203      	movs	r2, #3
 8003e1e:	701a      	strb	r2, [r3, #0]
			registerFrame[R_Theta_Status].U16 = 8;
 8003e20:	4b55      	ldr	r3, [pc, #340]	@ (8003f78 <plotter_handle_state_transition+0x1bc>)
 8003e22:	2208      	movs	r2, #8
 8003e24:	841a      	strh	r2, [r3, #32]
		}
	}

// Handle state entry/exit actions if state has changed
	if (rs_previous_state != rs_current_state) {
 8003e26:	4b53      	ldr	r3, [pc, #332]	@ (8003f74 <plotter_handle_state_transition+0x1b8>)
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	4b51      	ldr	r3, [pc, #324]	@ (8003f70 <plotter_handle_state_transition+0x1b4>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	f000 809b 	beq.w	8003f6a <plotter_handle_state_transition+0x1ae>
		// Exit actions for previous state
		switch (rs_previous_state) {
 8003e34:	4b4f      	ldr	r3, [pc, #316]	@ (8003f74 <plotter_handle_state_transition+0x1b8>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2b05      	cmp	r3, #5
 8003e3a:	d026      	beq.n	8003e8a <plotter_handle_state_transition+0xce>
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	dc28      	bgt.n	8003e92 <plotter_handle_state_transition+0xd6>
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d002      	beq.n	8003e4a <plotter_handle_state_transition+0x8e>
 8003e44:	2b03      	cmp	r3, #3
 8003e46:	d019      	beq.n	8003e7c <plotter_handle_state_transition+0xc0>
			// Exit emergency state
			emer_state = DEFAULT;
			break;

		default:
			break;
 8003e48:	e023      	b.n	8003e92 <plotter_handle_state_transition+0xd6>
			joy_state = JOY_IDLE;
 8003e4a:	4b4c      	ldr	r3, [pc, #304]	@ (8003f7c <plotter_handle_state_transition+0x1c0>)
 8003e4c:	2207      	movs	r2, #7
 8003e4e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, 0);
 8003e50:	2200      	movs	r2, #0
 8003e52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003e56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e5a:	f004 ff37 	bl	8008ccc <HAL_GPIO_WritePin>
			MDXX_set_range(&prismatic_motor, 2000, 0);
 8003e5e:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8003f80 <plotter_handle_state_transition+0x1c4>
 8003e62:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8003f84 <plotter_handle_state_transition+0x1c8>
 8003e66:	4848      	ldr	r0, [pc, #288]	@ (8003f88 <plotter_handle_state_transition+0x1cc>)
 8003e68:	f7fd fa22 	bl	80012b0 <MDXX_set_range>
			MDXX_set_range(&revolute_motor, 2000, 0);
 8003e6c:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8003f80 <plotter_handle_state_transition+0x1c4>
 8003e70:	ed9f 0a44 	vldr	s0, [pc, #272]	@ 8003f84 <plotter_handle_state_transition+0x1c8>
 8003e74:	4845      	ldr	r0, [pc, #276]	@ (8003f8c <plotter_handle_state_transition+0x1d0>)
 8003e76:	f7fd fa1b 	bl	80012b0 <MDXX_set_range>
			break;
 8003e7a:	e00b      	b.n	8003e94 <plotter_handle_state_transition+0xd8>
			pristrajectoryActive = false;
 8003e7c:	4b44      	ldr	r3, [pc, #272]	@ (8003f90 <plotter_handle_state_transition+0x1d4>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
			revtrajectoryActive = false;
 8003e82:	4b44      	ldr	r3, [pc, #272]	@ (8003f94 <plotter_handle_state_transition+0x1d8>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	701a      	strb	r2, [r3, #0]
			break;
 8003e88:	e004      	b.n	8003e94 <plotter_handle_state_transition+0xd8>
			emer_state = DEFAULT;
 8003e8a:	4b43      	ldr	r3, [pc, #268]	@ (8003f98 <plotter_handle_state_transition+0x1dc>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
			break;
 8003e90:	e000      	b.n	8003e94 <plotter_handle_state_transition+0xd8>
			break;
 8003e92:	bf00      	nop
		}

		// Entry actions for new state
		switch (rs_current_state) {
 8003e94:	4b36      	ldr	r3, [pc, #216]	@ (8003f70 <plotter_handle_state_transition+0x1b4>)
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d864      	bhi.n	8003f68 <plotter_handle_state_transition+0x1ac>
 8003e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea4 <plotter_handle_state_transition+0xe8>)
 8003ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea4:	08003eb9 	.word	0x08003eb9
 8003ea8:	08003f4b 	.word	0x08003f4b
 8003eac:	08003ecf 	.word	0x08003ecf
 8003eb0:	08003f45 	.word	0x08003f45
 8003eb4:	08003f1b 	.word	0x08003f1b
		case RS_JOG_MODE:
			// Initialize joystick control
			joy_state = A1B1_MODE;
 8003eb8:	4b30      	ldr	r3, [pc, #192]	@ (8003f7c <plotter_handle_state_transition+0x1c0>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, 1);
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ec4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ec8:	f004 ff00 	bl	8008ccc <HAL_GPIO_WritePin>
			break;
 8003ecc:	e04d      	b.n	8003f6a <plotter_handle_state_transition+0x1ae>

		case RS_MOVING:
			// Initialize trajectory generator
			pris_initial_p = prismatic_encoder.mm;
 8003ece:	4b33      	ldr	r3, [pc, #204]	@ (8003f9c <plotter_handle_state_transition+0x1e0>)
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed2:	4a33      	ldr	r2, [pc, #204]	@ (8003fa0 <plotter_handle_state_transition+0x1e4>)
 8003ed4:	6013      	str	r3, [r2, #0]
			rev_initial_p = revolute_encoder.rads;
 8003ed6:	4b33      	ldr	r3, [pc, #204]	@ (8003fa4 <plotter_handle_state_transition+0x1e8>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	4a33      	ldr	r2, [pc, #204]	@ (8003fa8 <plotter_handle_state_transition+0x1ec>)
 8003edc:	6013      	str	r3, [r2, #0]
			pris_target_p = registerFrame[Goal_R].U16;
 8003ede:	4b26      	ldr	r3, [pc, #152]	@ (8003f78 <plotter_handle_state_transition+0x1bc>)
 8003ee0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8003ee4:	ee07 3a90 	vmov	s15, r3
 8003ee8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eec:	4b2f      	ldr	r3, [pc, #188]	@ (8003fac <plotter_handle_state_transition+0x1f0>)
 8003eee:	edc3 7a00 	vstr	s15, [r3]
			rev_target_p = registerFrame[Goal_Theta].U16;
 8003ef2:	4b21      	ldr	r3, [pc, #132]	@ (8003f78 <plotter_handle_state_transition+0x1bc>)
 8003ef4:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8003ef8:	ee07 3a90 	vmov	s15, r3
 8003efc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f00:	4b2b      	ldr	r3, [pc, #172]	@ (8003fb0 <plotter_handle_state_transition+0x1f4>)
 8003f02:	edc3 7a00 	vstr	s15, [r3]
			pristrajectoryActive = true;
 8003f06:	4b22      	ldr	r3, [pc, #136]	@ (8003f90 <plotter_handle_state_transition+0x1d4>)
 8003f08:	2201      	movs	r2, #1
 8003f0a:	701a      	strb	r2, [r3, #0]
			revtrajectoryActive = true;
 8003f0c:	4b21      	ldr	r3, [pc, #132]	@ (8003f94 <plotter_handle_state_transition+0x1d8>)
 8003f0e:	2201      	movs	r2, #1
 8003f10:	701a      	strb	r2, [r3, #0]
			moving_state = MOVING_GO_TO_POINT;
 8003f12:	4b28      	ldr	r3, [pc, #160]	@ (8003fb4 <plotter_handle_state_transition+0x1f8>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
			break;
 8003f18:	e027      	b.n	8003f6a <plotter_handle_state_transition+0x1ae>

		case RS_EMERGENCY_TRIGGED:
			// Enter emergency state
			joy_state = EMERGENCY_MODE;
 8003f1a:	4b18      	ldr	r3, [pc, #96]	@ (8003f7c <plotter_handle_state_transition+0x1c0>)
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	701a      	strb	r2, [r3, #0]
			registerFrame[R_Theta_Status].U16 = 16;
 8003f20:	4b15      	ldr	r3, [pc, #84]	@ (8003f78 <plotter_handle_state_transition+0x1bc>)
 8003f22:	2210      	movs	r2, #16
 8003f24:	841a      	strh	r2, [r3, #32]
			// Immediately stop all motors
			MDXX_set_range(&prismatic_motor, 2000, 0);
 8003f26:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8003f80 <plotter_handle_state_transition+0x1c4>
 8003f2a:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8003f84 <plotter_handle_state_transition+0x1c8>
 8003f2e:	4816      	ldr	r0, [pc, #88]	@ (8003f88 <plotter_handle_state_transition+0x1cc>)
 8003f30:	f7fd f9be 	bl	80012b0 <MDXX_set_range>
			MDXX_set_range(&revolute_motor, 2000, 0);
 8003f34:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8003f80 <plotter_handle_state_transition+0x1c4>
 8003f38:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8003f84 <plotter_handle_state_transition+0x1c8>
 8003f3c:	4813      	ldr	r0, [pc, #76]	@ (8003f8c <plotter_handle_state_transition+0x1d0>)
 8003f3e:	f7fd f9b7 	bl	80012b0 <MDXX_set_range>
			break;
 8003f42:	e012      	b.n	8003f6a <plotter_handle_state_transition+0x1ae>

		case RS_RETURN_TO_HOME:
			// Initialize homing sequence
			plotter_pen_up(); // First ensure pen is up
 8003f44:	f001 fb8c 	bl	8005660 <plotter_pen_up>
			break;
 8003f48:	e00f      	b.n	8003f6a <plotter_handle_state_transition+0x1ae>

		case RS_POINT_MODE:
			MDXX_set_range(&prismatic_motor, 2000, 0);
 8003f4a:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8003f80 <plotter_handle_state_transition+0x1c4>
 8003f4e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8003f84 <plotter_handle_state_transition+0x1c8>
 8003f52:	480d      	ldr	r0, [pc, #52]	@ (8003f88 <plotter_handle_state_transition+0x1cc>)
 8003f54:	f7fd f9ac 	bl	80012b0 <MDXX_set_range>
			MDXX_set_range(&revolute_motor, 2000, 0);
 8003f58:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8003f80 <plotter_handle_state_transition+0x1c4>
 8003f5c:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8003f84 <plotter_handle_state_transition+0x1c8>
 8003f60:	480a      	ldr	r0, [pc, #40]	@ (8003f8c <plotter_handle_state_transition+0x1d0>)
 8003f62:	f7fd f9a5 	bl	80012b0 <MDXX_set_range>
			break;
 8003f66:	e000      	b.n	8003f6a <plotter_handle_state_transition+0x1ae>

		default:
			break;
 8003f68:	bf00      	nop
		}
	}
}
 8003f6a:	bf00      	nop
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	200002e8 	.word	0x200002e8
 8003f74:	200002e9 	.word	0x200002e9
 8003f78:	2000162c 	.word	0x2000162c
 8003f7c:	200002ed 	.word	0x200002ed
 8003f80:	00000000 	.word	0x00000000
 8003f84:	44fa0000 	.word	0x44fa0000
 8003f88:	200005ac 	.word	0x200005ac
 8003f8c:	200005f8 	.word	0x200005f8
 8003f90:	20000504 	.word	0x20000504
 8003f94:	2000055c 	.word	0x2000055c
 8003f98:	200002f0 	.word	0x200002f0
 8003f9c:	20000644 	.word	0x20000644
 8003fa0:	20000508 	.word	0x20000508
 8003fa4:	200006a0 	.word	0x200006a0
 8003fa8:	20000560 	.word	0x20000560
 8003fac:	2000050c 	.word	0x2000050c
 8003fb0:	20000564 	.word	0x20000564
 8003fb4:	200002eb 	.word	0x200002eb

08003fb8 <plotter_process_jog_mode>:

void plotter_process_jog_mode() {
 8003fb8:	b590      	push	{r4, r7, lr}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
// block any joystick actions while in emergency
	if (rs_current_state == RS_EMERGENCY_TRIGGED
 8003fbe:	4ba0      	ldr	r3, [pc, #640]	@ (8004240 <plotter_process_jog_mode+0x288>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	f000 81fe 	beq.w	80043c4 <plotter_process_jog_mode+0x40c>
			|| joy_state == EMERGENCY_MODE) {
 8003fc8:	4b9e      	ldr	r3, [pc, #632]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	f000 81f9 	beq.w	80043c4 <plotter_process_jog_mode+0x40c>
		return;
	}

// Handle state transitions for A1B1_MODE
	if (joy_state == A1B1_MODE) {
 8003fd2:	4b9c      	ldr	r3, [pc, #624]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d127      	bne.n	800402a <plotter_process_jog_mode+0x72>
		if (b1) {
 8003fda:	4b9b      	ldr	r3, [pc, #620]	@ (8004248 <plotter_process_jog_mode+0x290>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <plotter_process_jog_mode+0x32>
			joy_state = A1B1_SETPOINT;
 8003fe2:	4b98      	ldr	r3, [pc, #608]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	701a      	strb	r2, [r3, #0]
 8003fe8:	e032      	b.n	8004050 <plotter_process_jog_mode+0x98>
		} else if (b2) {
 8003fea:	4b98      	ldr	r3, [pc, #608]	@ (800424c <plotter_process_jog_mode+0x294>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d013      	beq.n	800401a <plotter_process_jog_mode+0x62>
			joy_state = A1B1_MOVING;
 8003ff2:	4b94      	ldr	r3, [pc, #592]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8003ff4:	2204      	movs	r2, #4
 8003ff6:	701a      	strb	r2, [r3, #0]
			moving_state = MOVING_GO_TO_POINT;
 8003ff8:	4b95      	ldr	r3, [pc, #596]	@ (8004250 <plotter_process_jog_mode+0x298>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]
			if (total_setpoints > 0) {
 8003ffe:	4b95      	ldr	r3, [pc, #596]	@ (8004254 <plotter_process_jog_mode+0x29c>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d024      	beq.n	8004050 <plotter_process_jog_mode+0x98>
				joy_state = A1B1_MOVING;
 8004006:	4b8f      	ldr	r3, [pc, #572]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8004008:	2204      	movs	r2, #4
 800400a:	701a      	strb	r2, [r3, #0]
				moving_state = MOVING_GO_TO_POINT;
 800400c:	4b90      	ldr	r3, [pc, #576]	@ (8004250 <plotter_process_jog_mode+0x298>)
 800400e:	2200      	movs	r2, #0
 8004010:	701a      	strb	r2, [r3, #0]
				move_index = 0;            // start at first point
 8004012:	4b91      	ldr	r3, [pc, #580]	@ (8004258 <plotter_process_jog_mode+0x2a0>)
 8004014:	2200      	movs	r2, #0
 8004016:	701a      	strb	r2, [r3, #0]
 8004018:	e01a      	b.n	8004050 <plotter_process_jog_mode+0x98>
			}

		} else if (b4) {
 800401a:	4b90      	ldr	r3, [pc, #576]	@ (800425c <plotter_process_jog_mode+0x2a4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d016      	beq.n	8004050 <plotter_process_jog_mode+0x98>
			joy_state = A2B2_MODE;
 8004022:	4b88      	ldr	r3, [pc, #544]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8004024:	2201      	movs	r2, #1
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	e012      	b.n	8004050 <plotter_process_jog_mode+0x98>
		}
	}
// Handle transitions back to A1B1_MODE
	else if ((joy_state == A1B1_SETPOINT && b2)
 800402a:	4b86      	ldr	r3, [pc, #536]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b03      	cmp	r3, #3
 8004030:	d103      	bne.n	800403a <plotter_process_jog_mode+0x82>
 8004032:	4b86      	ldr	r3, [pc, #536]	@ (800424c <plotter_process_jog_mode+0x294>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d107      	bne.n	800404a <plotter_process_jog_mode+0x92>
			|| (joy_state == A1B1_MOVING && b1)) {
 800403a:	4b82      	ldr	r3, [pc, #520]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	2b04      	cmp	r3, #4
 8004040:	d106      	bne.n	8004050 <plotter_process_jog_mode+0x98>
 8004042:	4b81      	ldr	r3, [pc, #516]	@ (8004248 <plotter_process_jog_mode+0x290>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <plotter_process_jog_mode+0x98>
		joy_state = A1B1_MODE;
 800404a:	4b7e      	ldr	r3, [pc, #504]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
	}

// Handle state transitions for A2B2_MODE
	if (joy_state == A2B2_MODE) {
 8004050:	4b7c      	ldr	r3, [pc, #496]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d11a      	bne.n	800408e <plotter_process_jog_mode+0xd6>
		if (b1) {
 8004058:	4b7b      	ldr	r3, [pc, #492]	@ (8004248 <plotter_process_jog_mode+0x290>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d006      	beq.n	800406e <plotter_process_jog_mode+0xb6>
			joy_state = A2B2_WRITING;
 8004060:	4b78      	ldr	r3, [pc, #480]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8004062:	2205      	movs	r2, #5
 8004064:	701a      	strb	r2, [r3, #0]
			writing_state = WRITE_IDLE;
 8004066:	4b7e      	ldr	r3, [pc, #504]	@ (8004260 <plotter_process_jog_mode+0x2a8>)
 8004068:	2202      	movs	r2, #2
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	e022      	b.n	80040b4 <plotter_process_jog_mode+0xfc>
		} else if (b2) {
 800406e:	4b77      	ldr	r3, [pc, #476]	@ (800424c <plotter_process_jog_mode+0x294>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <plotter_process_jog_mode+0xc6>
			joy_state = A2B2_GOTO_HOME;
 8004076:	4b73      	ldr	r3, [pc, #460]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8004078:	2206      	movs	r2, #6
 800407a:	701a      	strb	r2, [r3, #0]
 800407c:	e01a      	b.n	80040b4 <plotter_process_jog_mode+0xfc>
		} else if (b4) {
 800407e:	4b77      	ldr	r3, [pc, #476]	@ (800425c <plotter_process_jog_mode+0x2a4>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <plotter_process_jog_mode+0xfc>
			joy_state = A1B1_MODE;
 8004086:	4b6f      	ldr	r3, [pc, #444]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8004088:	2200      	movs	r2, #0
 800408a:	701a      	strb	r2, [r3, #0]
 800408c:	e012      	b.n	80040b4 <plotter_process_jog_mode+0xfc>
		}
	}
// Handle transitions back to A2B2_MODE
	else if ((joy_state == A2B2_WRITING && b2)
 800408e:	4b6d      	ldr	r3, [pc, #436]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b05      	cmp	r3, #5
 8004094:	d103      	bne.n	800409e <plotter_process_jog_mode+0xe6>
 8004096:	4b6d      	ldr	r3, [pc, #436]	@ (800424c <plotter_process_jog_mode+0x294>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d107      	bne.n	80040ae <plotter_process_jog_mode+0xf6>
			|| (joy_state == A2B2_GOTO_HOME && b1)) {
 800409e:	4b69      	ldr	r3, [pc, #420]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b06      	cmp	r3, #6
 80040a4:	d106      	bne.n	80040b4 <plotter_process_jog_mode+0xfc>
 80040a6:	4b68      	ldr	r3, [pc, #416]	@ (8004248 <plotter_process_jog_mode+0x290>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <plotter_process_jog_mode+0xfc>
		joy_state = A2B2_MODE;
 80040ae:	4b65      	ldr	r3, [pc, #404]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	701a      	strb	r2, [r3, #0]
	}

// Execute state-specific actions
	switch (joy_state) {
 80040b4:	4b63      	ldr	r3, [pc, #396]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	3b03      	subs	r3, #3
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	f200 8173 	bhi.w	80043a6 <plotter_process_jog_mode+0x3ee>
 80040c0:	a201      	add	r2, pc, #4	@ (adr r2, 80040c8 <plotter_process_jog_mode+0x110>)
 80040c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c6:	bf00      	nop
 80040c8:	08004201 	.word	0x08004201
 80040cc:	080040d9 	.word	0x080040d9
 80040d0:	080043a1 	.word	0x080043a1
 80040d4:	08004399 	.word	0x08004399
	case A1B1_MOVING:
		if (total_setpoints == 0) {
 80040d8:	4b5e      	ldr	r3, [pc, #376]	@ (8004254 <plotter_process_jog_mode+0x29c>)
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <plotter_process_jog_mode+0x12e>
			joy_state = A1B1_MODE;
 80040e0:	4b58      	ldr	r3, [pc, #352]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	701a      	strb	r2, [r3, #0]
		}
		static uint8_t current_point = 0;

		// Initialize target for first point if needed
		if (current_point == 0) {
 80040e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004264 <plotter_process_jog_mode+0x2ac>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d12f      	bne.n	800414e <plotter_process_jog_mode+0x196>
			// Get register for first point
			uint16_t r_reg = getPointRegisterR(current_point);
 80040ee:	4b5d      	ldr	r3, [pc, #372]	@ (8004264 <plotter_process_jog_mode+0x2ac>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f000 fc50 	bl	8004998 <getPointRegisterR>
 80040f8:	4603      	mov	r3, r0
 80040fa:	81bb      	strh	r3, [r7, #12]
			uint16_t t_reg = getPointRegisterT(current_point);
 80040fc:	4b59      	ldr	r3, [pc, #356]	@ (8004264 <plotter_process_jog_mode+0x2ac>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fc85 	bl	8004a10 <getPointRegisterT>
 8004106:	4603      	mov	r3, r0
 8004108:	817b      	strh	r3, [r7, #10]

			// Set targets
			pris_target_p = registerFrame[r_reg].U16;
 800410a:	89bb      	ldrh	r3, [r7, #12]
 800410c:	4a56      	ldr	r2, [pc, #344]	@ (8004268 <plotter_process_jog_mode+0x2b0>)
 800410e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	4b54      	ldr	r3, [pc, #336]	@ (800426c <plotter_process_jog_mode+0x2b4>)
 800411c:	edc3 7a00 	vstr	s15, [r3]
			rev_target_p = registerFrame[t_reg].U16;
 8004120:	897b      	ldrh	r3, [r7, #10]
 8004122:	4a51      	ldr	r2, [pc, #324]	@ (8004268 <plotter_process_jog_mode+0x2b0>)
 8004124:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004128:	ee07 3a90 	vmov	s15, r3
 800412c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004130:	4b4f      	ldr	r3, [pc, #316]	@ (8004270 <plotter_process_jog_mode+0x2b8>)
 8004132:	edc3 7a00 	vstr	s15, [r3]

			// Send to trajectory control
			plotter_process_moving_mode(pris_target_p, rev_target_p);
 8004136:	4b4d      	ldr	r3, [pc, #308]	@ (800426c <plotter_process_jog_mode+0x2b4>)
 8004138:	edd3 7a00 	vldr	s15, [r3]
 800413c:	4b4c      	ldr	r3, [pc, #304]	@ (8004270 <plotter_process_jog_mode+0x2b8>)
 800413e:	ed93 7a00 	vldr	s14, [r3]
 8004142:	eef0 0a47 	vmov.f32	s1, s14
 8004146:	eeb0 0a67 	vmov.f32	s0, s15
 800414a:	f000 f97f 	bl	800444c <plotter_process_moving_mode>
		}

		// Check if point reached (trajectories complete)
		if (!pristrajectoryActive && !revtrajectoryActive) {
 800414e:	4b49      	ldr	r3, [pc, #292]	@ (8004274 <plotter_process_jog_mode+0x2bc>)
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	f083 0301 	eor.w	r3, r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 8135 	beq.w	80043c8 <plotter_process_jog_mode+0x410>
 800415e:	4b46      	ldr	r3, [pc, #280]	@ (8004278 <plotter_process_jog_mode+0x2c0>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	f083 0301 	eor.w	r3, r3, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 812d 	beq.w	80043c8 <plotter_process_jog_mode+0x410>
			// Move to next point
			current_point++;
 800416e:	4b3d      	ldr	r3, [pc, #244]	@ (8004264 <plotter_process_jog_mode+0x2ac>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	3301      	adds	r3, #1
 8004174:	b2da      	uxtb	r2, r3
 8004176:	4b3b      	ldr	r3, [pc, #236]	@ (8004264 <plotter_process_jog_mode+0x2ac>)
 8004178:	701a      	strb	r2, [r3, #0]

			// Check if all points traversed
			if (current_point >= getNumberOfSetPoints()) {
 800417a:	f000 fc85 	bl	8004a88 <getNumberOfSetPoints>
 800417e:	4603      	mov	r3, r0
 8004180:	461a      	mov	r2, r3
 8004182:	4b38      	ldr	r3, [pc, #224]	@ (8004264 <plotter_process_jog_mode+0x2ac>)
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d806      	bhi.n	8004198 <plotter_process_jog_mode+0x1e0>
				current_point = 0; // Reset for next time
 800418a:	4b36      	ldr	r3, [pc, #216]	@ (8004264 <plotter_process_jog_mode+0x2ac>)
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
				joy_state = A1B1_MODE;
 8004190:	4b2c      	ldr	r3, [pc, #176]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 8004192:	2200      	movs	r2, #0
 8004194:	701a      	strb	r2, [r3, #0]

				// Send to trajectory control
				plotter_process_moving_mode(pris_target_p, rev_target_p);
			}
		}
		break;
 8004196:	e117      	b.n	80043c8 <plotter_process_jog_mode+0x410>
				moving_state = MOVING_GO_TO_POINT;
 8004198:	4b2d      	ldr	r3, [pc, #180]	@ (8004250 <plotter_process_jog_mode+0x298>)
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
				uint16_t r_reg = getPointRegisterR(current_point);
 800419e:	4b31      	ldr	r3, [pc, #196]	@ (8004264 <plotter_process_jog_mode+0x2ac>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fbf8 	bl	8004998 <getPointRegisterR>
 80041a8:	4603      	mov	r3, r0
 80041aa:	813b      	strh	r3, [r7, #8]
				uint16_t t_reg = getPointRegisterT(current_point);
 80041ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004264 <plotter_process_jog_mode+0x2ac>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fc2d 	bl	8004a10 <getPointRegisterT>
 80041b6:	4603      	mov	r3, r0
 80041b8:	80fb      	strh	r3, [r7, #6]
				pris_target_p = registerFrame[r_reg].U16;
 80041ba:	893b      	ldrh	r3, [r7, #8]
 80041bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004268 <plotter_process_jog_mode+0x2b0>)
 80041be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ca:	4b28      	ldr	r3, [pc, #160]	@ (800426c <plotter_process_jog_mode+0x2b4>)
 80041cc:	edc3 7a00 	vstr	s15, [r3]
				rev_target_p = registerFrame[t_reg].U16;
 80041d0:	88fb      	ldrh	r3, [r7, #6]
 80041d2:	4a25      	ldr	r2, [pc, #148]	@ (8004268 <plotter_process_jog_mode+0x2b0>)
 80041d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041d8:	ee07 3a90 	vmov	s15, r3
 80041dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e0:	4b23      	ldr	r3, [pc, #140]	@ (8004270 <plotter_process_jog_mode+0x2b8>)
 80041e2:	edc3 7a00 	vstr	s15, [r3]
				plotter_process_moving_mode(pris_target_p, rev_target_p);
 80041e6:	4b21      	ldr	r3, [pc, #132]	@ (800426c <plotter_process_jog_mode+0x2b4>)
 80041e8:	edd3 7a00 	vldr	s15, [r3]
 80041ec:	4b20      	ldr	r3, [pc, #128]	@ (8004270 <plotter_process_jog_mode+0x2b8>)
 80041ee:	ed93 7a00 	vldr	s14, [r3]
 80041f2:	eef0 0a47 	vmov.f32	s1, s14
 80041f6:	eeb0 0a67 	vmov.f32	s0, s15
 80041fa:	f000 f927 	bl	800444c <plotter_process_moving_mode>
		break;
 80041fe:	e0e3      	b.n	80043c8 <plotter_process_jog_mode+0x410>

	case A1B1_SETPOINT:
		plotter_joymove();
 8004200:	f7ff fcce 	bl	8003ba0 <plotter_joymove>

		// When b1 is pressed, save the current position
		if (b1) {
 8004204:	4b10      	ldr	r3, [pc, #64]	@ (8004248 <plotter_process_jog_mode+0x290>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	f000 80df 	beq.w	80043cc <plotter_process_jog_mode+0x414>
			// Determine which point to set based on current state
			uint16_t r_reg = 0, t_reg = 0;
 800420e:	2300      	movs	r3, #0
 8004210:	80bb      	strh	r3, [r7, #4]
 8004212:	2300      	movs	r3, #0
 8004214:	807b      	strh	r3, [r7, #2]
			uint8_t point_index = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]

			// Convert enum to numerical index
			if (setpoint_state == NO_POINT_SET || setpoint_state == POINT_IDLE)
 800421a:	4b18      	ldr	r3, [pc, #96]	@ (800427c <plotter_process_jog_mode+0x2c4>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <plotter_process_jog_mode+0x272>
 8004222:	4b16      	ldr	r3, [pc, #88]	@ (800427c <plotter_process_jog_mode+0x2c4>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b0b      	cmp	r3, #11
 8004228:	d102      	bne.n	8004230 <plotter_process_jog_mode+0x278>
				point_index = 0;
 800422a:	2300      	movs	r3, #0
 800422c:	73fb      	strb	r3, [r7, #15]
 800422e:	e02a      	b.n	8004286 <plotter_process_jog_mode+0x2ce>
			else if (setpoint_state == POINT_10_SET) {
 8004230:	4b12      	ldr	r3, [pc, #72]	@ (800427c <plotter_process_jog_mode+0x2c4>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b0a      	cmp	r3, #10
 8004236:	d123      	bne.n	8004280 <plotter_process_jog_mode+0x2c8>
				// All points are set, return to A1B1_MODE
				joy_state = A1B1_MODE;
 8004238:	4b02      	ldr	r3, [pc, #8]	@ (8004244 <plotter_process_jog_mode+0x28c>)
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]
				return;
 800423e:	e0c6      	b.n	80043ce <plotter_process_jog_mode+0x416>
 8004240:	200002e8 	.word	0x200002e8
 8004244:	200002ed 	.word	0x200002ed
 8004248:	200017c4 	.word	0x200017c4
 800424c:	200017c8 	.word	0x200017c8
 8004250:	200002eb 	.word	0x200002eb
 8004254:	2000058c 	.word	0x2000058c
 8004258:	2000058d 	.word	0x2000058d
 800425c:	200017d0 	.word	0x200017d0
 8004260:	200002ec 	.word	0x200002ec
 8004264:	200005a8 	.word	0x200005a8
 8004268:	2000162c 	.word	0x2000162c
 800426c:	2000050c 	.word	0x2000050c
 8004270:	20000564 	.word	0x20000564
 8004274:	20000504 	.word	0x20000504
 8004278:	2000055c 	.word	0x2000055c
 800427c:	200002ea 	.word	0x200002ea
			} else
				point_index = (uint8_t) setpoint_state;
 8004280:	4b54      	ldr	r3, [pc, #336]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	73fb      	strb	r3, [r7, #15]

			// Map index to register addresses (using helper function)
			r_reg = getPointRegisterR(point_index);
 8004286:	7bfb      	ldrb	r3, [r7, #15]
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fb85 	bl	8004998 <getPointRegisterR>
 800428e:	4603      	mov	r3, r0
 8004290:	80bb      	strh	r3, [r7, #4]
			t_reg = getPointRegisterT(point_index);
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fbbb 	bl	8004a10 <getPointRegisterT>
 800429a:	4603      	mov	r3, r0
 800429c:	807b      	strh	r3, [r7, #2]

			// Update setpoint state to next value
			switch (setpoint_state) {
 800429e:	4b4d      	ldr	r3, [pc, #308]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2b0b      	cmp	r3, #11
 80042a4:	d846      	bhi.n	8004334 <plotter_process_jog_mode+0x37c>
 80042a6:	a201      	add	r2, pc, #4	@ (adr r2, 80042ac <plotter_process_jog_mode+0x2f4>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080042dd 	.word	0x080042dd
 80042b0:	080042e5 	.word	0x080042e5
 80042b4:	080042ed 	.word	0x080042ed
 80042b8:	080042f5 	.word	0x080042f5
 80042bc:	080042fd 	.word	0x080042fd
 80042c0:	08004305 	.word	0x08004305
 80042c4:	0800430d 	.word	0x0800430d
 80042c8:	08004315 	.word	0x08004315
 80042cc:	0800431d 	.word	0x0800431d
 80042d0:	08004325 	.word	0x08004325
 80042d4:	0800432d 	.word	0x0800432d
 80042d8:	080042dd 	.word	0x080042dd
			case NO_POINT_SET:
			case POINT_IDLE:
				setpoint_state = POINT_1_SET;
 80042dc:	4b3d      	ldr	r3, [pc, #244]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 80042de:	2201      	movs	r2, #1
 80042e0:	701a      	strb	r2, [r3, #0]
				break;
 80042e2:	e027      	b.n	8004334 <plotter_process_jog_mode+0x37c>
			case POINT_1_SET:
				setpoint_state = POINT_2_SET;
 80042e4:	4b3b      	ldr	r3, [pc, #236]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 80042e6:	2202      	movs	r2, #2
 80042e8:	701a      	strb	r2, [r3, #0]
				break;
 80042ea:	e023      	b.n	8004334 <plotter_process_jog_mode+0x37c>
			case POINT_2_SET:
				setpoint_state = POINT_3_SET;
 80042ec:	4b39      	ldr	r3, [pc, #228]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 80042ee:	2203      	movs	r2, #3
 80042f0:	701a      	strb	r2, [r3, #0]
				break;
 80042f2:	e01f      	b.n	8004334 <plotter_process_jog_mode+0x37c>
			case POINT_3_SET:
				setpoint_state = POINT_4_SET;
 80042f4:	4b37      	ldr	r3, [pc, #220]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 80042f6:	2204      	movs	r2, #4
 80042f8:	701a      	strb	r2, [r3, #0]
				break;
 80042fa:	e01b      	b.n	8004334 <plotter_process_jog_mode+0x37c>
			case POINT_4_SET:
				setpoint_state = POINT_5_SET;
 80042fc:	4b35      	ldr	r3, [pc, #212]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 80042fe:	2205      	movs	r2, #5
 8004300:	701a      	strb	r2, [r3, #0]
				break;
 8004302:	e017      	b.n	8004334 <plotter_process_jog_mode+0x37c>
			case POINT_5_SET:
				setpoint_state = POINT_6_SET;
 8004304:	4b33      	ldr	r3, [pc, #204]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 8004306:	2206      	movs	r2, #6
 8004308:	701a      	strb	r2, [r3, #0]
				break;
 800430a:	e013      	b.n	8004334 <plotter_process_jog_mode+0x37c>
			case POINT_6_SET:
				setpoint_state = POINT_7_SET;
 800430c:	4b31      	ldr	r3, [pc, #196]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 800430e:	2207      	movs	r2, #7
 8004310:	701a      	strb	r2, [r3, #0]
				break;
 8004312:	e00f      	b.n	8004334 <plotter_process_jog_mode+0x37c>
			case POINT_7_SET:
				setpoint_state = POINT_8_SET;
 8004314:	4b2f      	ldr	r3, [pc, #188]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 8004316:	2208      	movs	r2, #8
 8004318:	701a      	strb	r2, [r3, #0]
				break;
 800431a:	e00b      	b.n	8004334 <plotter_process_jog_mode+0x37c>
			case POINT_8_SET:
				setpoint_state = POINT_9_SET;
 800431c:	4b2d      	ldr	r3, [pc, #180]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 800431e:	2209      	movs	r2, #9
 8004320:	701a      	strb	r2, [r3, #0]
				break;
 8004322:	e007      	b.n	8004334 <plotter_process_jog_mode+0x37c>
			case POINT_9_SET:
				setpoint_state = POINT_10_SET;
 8004324:	4b2b      	ldr	r3, [pc, #172]	@ (80043d4 <plotter_process_jog_mode+0x41c>)
 8004326:	220a      	movs	r2, #10
 8004328:	701a      	strb	r2, [r3, #0]
				break;
 800432a:	e003      	b.n	8004334 <plotter_process_jog_mode+0x37c>
			case POINT_10_SET:
				// Return to menu if all points set
				joy_state = A1B1_MODE;
 800432c:	4b2a      	ldr	r3, [pc, #168]	@ (80043d8 <plotter_process_jog_mode+0x420>)
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
				break;
 8004332:	bf00      	nop
			}

			// Save current position to the registers
			registerFrame[r_reg].U16 = prismatic_encoder.mm * 10.0;
 8004334:	4b29      	ldr	r3, [pc, #164]	@ (80043dc <plotter_process_jog_mode+0x424>)
 8004336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004338:	4618      	mov	r0, r3
 800433a:	f7fc f8d1 	bl	80004e0 <__aeabi_f2d>
 800433e:	f04f 0200 	mov.w	r2, #0
 8004342:	4b27      	ldr	r3, [pc, #156]	@ (80043e0 <plotter_process_jog_mode+0x428>)
 8004344:	f7fc f924 	bl	8000590 <__aeabi_dmul>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	88bc      	ldrh	r4, [r7, #4]
 800434e:	4610      	mov	r0, r2
 8004350:	4619      	mov	r1, r3
 8004352:	f7fc fbdf 	bl	8000b14 <__aeabi_d2uiz>
 8004356:	4603      	mov	r3, r0
 8004358:	b29a      	uxth	r2, r3
 800435a:	4b22      	ldr	r3, [pc, #136]	@ (80043e4 <plotter_process_jog_mode+0x42c>)
 800435c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
			registerFrame[t_reg].U16 = revolute_encoder.rads * 10.0;
 8004360:	4b21      	ldr	r3, [pc, #132]	@ (80043e8 <plotter_process_jog_mode+0x430>)
 8004362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004364:	4618      	mov	r0, r3
 8004366:	f7fc f8bb 	bl	80004e0 <__aeabi_f2d>
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	4b1c      	ldr	r3, [pc, #112]	@ (80043e0 <plotter_process_jog_mode+0x428>)
 8004370:	f7fc f90e 	bl	8000590 <__aeabi_dmul>
 8004374:	4602      	mov	r2, r0
 8004376:	460b      	mov	r3, r1
 8004378:	887c      	ldrh	r4, [r7, #2]
 800437a:	4610      	mov	r0, r2
 800437c:	4619      	mov	r1, r3
 800437e:	f7fc fbc9 	bl	8000b14 <__aeabi_d2uiz>
 8004382:	4603      	mov	r3, r0
 8004384:	b29a      	uxth	r2, r3
 8004386:	4b17      	ldr	r3, [pc, #92]	@ (80043e4 <plotter_process_jog_mode+0x42c>)
 8004388:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]

			total_setpoints = point_index + 1;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	3301      	adds	r3, #1
 8004390:	b2da      	uxtb	r2, r3
 8004392:	4b16      	ldr	r3, [pc, #88]	@ (80043ec <plotter_process_jog_mode+0x434>)
 8004394:	701a      	strb	r2, [r3, #0]
		}
		break;
 8004396:	e019      	b.n	80043cc <plotter_process_jog_mode+0x414>

	case A2B2_GOTO_HOME:
		// Transition to home state
		rs_current_state = RS_RETURN_TO_HOME; //////////////////////////////////
 8004398:	4b15      	ldr	r3, [pc, #84]	@ (80043f0 <plotter_process_jog_mode+0x438>)
 800439a:	2204      	movs	r2, #4
 800439c:	701a      	strb	r2, [r3, #0]
		break;
 800439e:	e016      	b.n	80043ce <plotter_process_jog_mode+0x416>

	case A2B2_WRITING:
		plotter_process_writing_state();
 80043a0:	f000 f830 	bl	8004404 <plotter_process_writing_state>
		break;
 80043a4:	e013      	b.n	80043ce <plotter_process_jog_mode+0x416>

	default:
		// Stop motors in other states
		MDXX_set_range(&prismatic_motor, 2000, 0);
 80043a6:	eddf 0a13 	vldr	s1, [pc, #76]	@ 80043f4 <plotter_process_jog_mode+0x43c>
 80043aa:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 80043f8 <plotter_process_jog_mode+0x440>
 80043ae:	4813      	ldr	r0, [pc, #76]	@ (80043fc <plotter_process_jog_mode+0x444>)
 80043b0:	f7fc ff7e 	bl	80012b0 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, 0);
 80043b4:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80043f4 <plotter_process_jog_mode+0x43c>
 80043b8:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80043f8 <plotter_process_jog_mode+0x440>
 80043bc:	4810      	ldr	r0, [pc, #64]	@ (8004400 <plotter_process_jog_mode+0x448>)
 80043be:	f7fc ff77 	bl	80012b0 <MDXX_set_range>
		break;
 80043c2:	e004      	b.n	80043ce <plotter_process_jog_mode+0x416>
		return;
 80043c4:	bf00      	nop
 80043c6:	e002      	b.n	80043ce <plotter_process_jog_mode+0x416>
		break;
 80043c8:	bf00      	nop
 80043ca:	e000      	b.n	80043ce <plotter_process_jog_mode+0x416>
		break;
 80043cc:	bf00      	nop
	}
}
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd90      	pop	{r4, r7, pc}
 80043d4:	200002ea 	.word	0x200002ea
 80043d8:	200002ed 	.word	0x200002ed
 80043dc:	20000644 	.word	0x20000644
 80043e0:	40240000 	.word	0x40240000
 80043e4:	2000162c 	.word	0x2000162c
 80043e8:	200006a0 	.word	0x200006a0
 80043ec:	2000058c 	.word	0x2000058c
 80043f0:	200002e8 	.word	0x200002e8
 80043f4:	00000000 	.word	0x00000000
 80043f8:	44fa0000 	.word	0x44fa0000
 80043fc:	200005ac 	.word	0x200005ac
 8004400:	200005f8 	.word	0x200005f8

08004404 <plotter_process_writing_state>:

void plotter_process_writing_state() {
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
// Do nothing in writing state

// Reset motors to ensure safety
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8004408:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8004434 <plotter_process_writing_state+0x30>
 800440c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8004438 <plotter_process_writing_state+0x34>
 8004410:	480a      	ldr	r0, [pc, #40]	@ (800443c <plotter_process_writing_state+0x38>)
 8004412:	f7fc ff4d 	bl	80012b0 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8004416:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8004434 <plotter_process_writing_state+0x30>
 800441a:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8004438 <plotter_process_writing_state+0x34>
 800441e:	4808      	ldr	r0, [pc, #32]	@ (8004440 <plotter_process_writing_state+0x3c>)
 8004420:	f7fc ff46 	bl	80012b0 <MDXX_set_range>

	writing_state = WRITE_IDLE;
 8004424:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <plotter_process_writing_state+0x40>)
 8004426:	2202      	movs	r2, #2
 8004428:	701a      	strb	r2, [r3, #0]
	joy_state = A2B2_MODE;
 800442a:	4b07      	ldr	r3, [pc, #28]	@ (8004448 <plotter_process_writing_state+0x44>)
 800442c:	2201      	movs	r2, #1
 800442e:	701a      	strb	r2, [r3, #0]
}
 8004430:	bf00      	nop
 8004432:	bd80      	pop	{r7, pc}
 8004434:	00000000 	.word	0x00000000
 8004438:	44fa0000 	.word	0x44fa0000
 800443c:	200005ac 	.word	0x200005ac
 8004440:	200005f8 	.word	0x200005f8
 8004444:	200002ec 	.word	0x200002ec
 8004448:	200002ed 	.word	0x200002ed

0800444c <plotter_process_moving_mode>:

void plotter_process_moving_mode(float32_t target_p_pris,
		float32_t target_p_rev) {
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	ed87 0a01 	vstr	s0, [r7, #4]
 8004456:	edc7 0a00 	vstr	s1, [r7]
// Process moving through points using MovingThroghPointState
	switch (moving_state) {
 800445a:	4b2c      	ldr	r3, [pc, #176]	@ (800450c <plotter_process_moving_mode+0xc0>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d850      	bhi.n	8004504 <plotter_process_moving_mode+0xb8>
 8004462:	a201      	add	r2, pc, #4	@ (adr r2, 8004468 <plotter_process_moving_mode+0x1c>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	0800447d 	.word	0x0800447d
 800446c:	080044ad 	.word	0x080044ad
 8004470:	080044c1 	.word	0x080044c1
 8004474:	080044d5 	.word	0x080044d5
 8004478:	080044dd 	.word	0x080044dd
	case MOVING_GO_TO_POINT:
		plotter_process_trajectory_control(target_p_pris, target_p_rev);
 800447c:	edd7 0a00 	vldr	s1, [r7]
 8004480:	ed97 0a01 	vldr	s0, [r7, #4]
 8004484:	f000 f91e 	bl	80046c4 <plotter_process_trajectory_control>

		if (!pristrajectoryActive && !revtrajectoryActive) {
 8004488:	4b21      	ldr	r3, [pc, #132]	@ (8004510 <plotter_process_moving_mode+0xc4>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	f083 0301 	eor.w	r3, r3, #1
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d031      	beq.n	80044fa <plotter_process_moving_mode+0xae>
 8004496:	4b1f      	ldr	r3, [pc, #124]	@ (8004514 <plotter_process_moving_mode+0xc8>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	f083 0301 	eor.w	r3, r3, #1
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d02a      	beq.n	80044fa <plotter_process_moving_mode+0xae>
			moving_state = MOVING_DOWN;
 80044a4:	4b19      	ldr	r3, [pc, #100]	@ (800450c <plotter_process_moving_mode+0xc0>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80044aa:	e026      	b.n	80044fa <plotter_process_moving_mode+0xae>

	case MOVING_DOWN:
		// Lower pen at target position
		plotter_pen_down();
 80044ac:	f001 f8e8 	bl	8005680 <plotter_pen_down>
		// Wait for pen to complete movement
		if (servo_state == PEN_DOWN) {
 80044b0:	4b19      	ldr	r3, [pc, #100]	@ (8004518 <plotter_process_moving_mode+0xcc>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d122      	bne.n	80044fe <plotter_process_moving_mode+0xb2>
			moving_state = MOVING_UP;
 80044b8:	4b14      	ldr	r3, [pc, #80]	@ (800450c <plotter_process_moving_mode+0xc0>)
 80044ba:	2202      	movs	r2, #2
 80044bc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80044be:	e01e      	b.n	80044fe <plotter_process_moving_mode+0xb2>

	case MOVING_UP:
		// Raise pen after touching point
		plotter_pen_up();
 80044c0:	f001 f8ce 	bl	8005660 <plotter_pen_up>
		// Wait for pen to complete movement
		if (servo_state == PEN_UP) {
 80044c4:	4b14      	ldr	r3, [pc, #80]	@ (8004518 <plotter_process_moving_mode+0xcc>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d11a      	bne.n	8004502 <plotter_process_moving_mode+0xb6>
			moving_state = MOVING_COMPLETE;
 80044cc:	4b0f      	ldr	r3, [pc, #60]	@ (800450c <plotter_process_moving_mode+0xc0>)
 80044ce:	2203      	movs	r2, #3
 80044d0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80044d2:	e016      	b.n	8004502 <plotter_process_moving_mode+0xb6>

	case MOVING_COMPLETE:
		moving_state = MOVING_IDLE;
 80044d4:	4b0d      	ldr	r3, [pc, #52]	@ (800450c <plotter_process_moving_mode+0xc0>)
 80044d6:	2204      	movs	r2, #4
 80044d8:	701a      	strb	r2, [r3, #0]
		break;
 80044da:	e013      	b.n	8004504 <plotter_process_moving_mode+0xb8>

	case MOVING_IDLE:
		// Stop motors
		MDXX_set_range(&prismatic_motor, 2000, 0);
 80044dc:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 800451c <plotter_process_moving_mode+0xd0>
 80044e0:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8004520 <plotter_process_moving_mode+0xd4>
 80044e4:	480f      	ldr	r0, [pc, #60]	@ (8004524 <plotter_process_moving_mode+0xd8>)
 80044e6:	f7fc fee3 	bl	80012b0 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, 0);
 80044ea:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 800451c <plotter_process_moving_mode+0xd0>
 80044ee:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8004520 <plotter_process_moving_mode+0xd4>
 80044f2:	480d      	ldr	r0, [pc, #52]	@ (8004528 <plotter_process_moving_mode+0xdc>)
 80044f4:	f7fc fedc 	bl	80012b0 <MDXX_set_range>
		break;
 80044f8:	e004      	b.n	8004504 <plotter_process_moving_mode+0xb8>
		break;
 80044fa:	bf00      	nop
 80044fc:	e002      	b.n	8004504 <plotter_process_moving_mode+0xb8>
		break;
 80044fe:	bf00      	nop
 8004500:	e000      	b.n	8004504 <plotter_process_moving_mode+0xb8>
		break;
 8004502:	bf00      	nop
	}
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	200002eb 	.word	0x200002eb
 8004510:	20000504 	.word	0x20000504
 8004514:	2000055c 	.word	0x2000055c
 8004518:	200005aa 	.word	0x200005aa
 800451c:	00000000 	.word	0x00000000
 8004520:	44fa0000 	.word	0x44fa0000
 8004524:	200005ac 	.word	0x200005ac
 8004528:	200005f8 	.word	0x200005f8

0800452c <plotter_process_return_to_home>:

void plotter_process_return_to_home() {
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
// First ensure pen is up
	if (servo_state != PEN_UP) {
 8004530:	4b37      	ldr	r3, [pc, #220]	@ (8004610 <plotter_process_return_to_home+0xe4>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d002      	beq.n	800453e <plotter_process_return_to_home+0x12>
		plotter_pen_up();
 8004538:	f001 f892 	bl	8005660 <plotter_pen_up>
		return;
 800453c:	e067      	b.n	800460e <plotter_process_return_to_home+0xe2>
	}

// Home revolute axis first
	if (revolute_state != RP_AT_HOME_POSITION) {
 800453e:	4b35      	ldr	r3, [pc, #212]	@ (8004614 <plotter_process_return_to_home+0xe8>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d018      	beq.n	8004578 <plotter_process_return_to_home+0x4c>
		revolute_state = RP_GOING_HOME;
 8004546:	4b33      	ldr	r3, [pc, #204]	@ (8004614 <plotter_process_return_to_home+0xe8>)
 8004548:	2201      	movs	r2, #1
 800454a:	701a      	strb	r2, [r3, #0]

		// Move revolute axis until proximity sensor triggered
		MDXX_set_range(&revolute_motor, 2000, 1000);
 800454c:	eddf 0a32 	vldr	s1, [pc, #200]	@ 8004618 <plotter_process_return_to_home+0xec>
 8004550:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 800461c <plotter_process_return_to_home+0xf0>
 8004554:	4832      	ldr	r0, [pc, #200]	@ (8004620 <plotter_process_return_to_home+0xf4>)
 8004556:	f7fc feab 	bl	80012b0 <MDXX_set_range>

		// Check if home reached
		if (prox) {
 800455a:	4b32      	ldr	r3, [pc, #200]	@ (8004624 <plotter_process_return_to_home+0xf8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d055      	beq.n	800460e <plotter_process_return_to_home+0xe2>
			revolute_state = RP_AT_HOME_POSITION;
 8004562:	4b2c      	ldr	r3, [pc, #176]	@ (8004614 <plotter_process_return_to_home+0xe8>)
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
			MDXX_set_range(&revolute_motor, 2000, 0);
 8004568:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8004628 <plotter_process_return_to_home+0xfc>
 800456c:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800461c <plotter_process_return_to_home+0xf0>
 8004570:	482b      	ldr	r0, [pc, #172]	@ (8004620 <plotter_process_return_to_home+0xf4>)
 8004572:	f7fc fe9d 	bl	80012b0 <MDXX_set_range>
 8004576:	e04a      	b.n	800460e <plotter_process_return_to_home+0xe2>
		}
	}
// Then home prismatic axis if revolute is done
	else if (prismatic_state != PP_AT_TOP_END_POSITION) {
 8004578:	4b2c      	ldr	r3, [pc, #176]	@ (800462c <plotter_process_return_to_home+0x100>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d018      	beq.n	80045b2 <plotter_process_return_to_home+0x86>
		prismatic_state = PP_GOING_TOP_END;
 8004580:	4b2a      	ldr	r3, [pc, #168]	@ (800462c <plotter_process_return_to_home+0x100>)
 8004582:	2201      	movs	r2, #1
 8004584:	701a      	strb	r2, [r3, #0]

		// Move prismatic upward
		MDXX_set_range(&prismatic_motor, 2000, 1000);
 8004586:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8004618 <plotter_process_return_to_home+0xec>
 800458a:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 800461c <plotter_process_return_to_home+0xf0>
 800458e:	4828      	ldr	r0, [pc, #160]	@ (8004630 <plotter_process_return_to_home+0x104>)
 8004590:	f7fc fe8e 	bl	80012b0 <MDXX_set_range>

		// Check if top position reached
		if (up_photo) {
 8004594:	4b27      	ldr	r3, [pc, #156]	@ (8004634 <plotter_process_return_to_home+0x108>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d038      	beq.n	800460e <plotter_process_return_to_home+0xe2>
			prismatic_state = PP_AT_TOP_END_POSITION;
 800459c:	4b23      	ldr	r3, [pc, #140]	@ (800462c <plotter_process_return_to_home+0x100>)
 800459e:	2200      	movs	r2, #0
 80045a0:	701a      	strb	r2, [r3, #0]
			MDXX_set_range(&prismatic_motor, 2000, 0);
 80045a2:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8004628 <plotter_process_return_to_home+0xfc>
 80045a6:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800461c <plotter_process_return_to_home+0xf0>
 80045aa:	4821      	ldr	r0, [pc, #132]	@ (8004630 <plotter_process_return_to_home+0x104>)
 80045ac:	f7fc fe80 	bl	80012b0 <MDXX_set_range>
 80045b0:	e02d      	b.n	800460e <plotter_process_return_to_home+0xe2>
		}
	}
// Both axes homed
	else {
		plotter_reset();
 80045b2:	f000 ff75 	bl	80054a0 <plotter_reset>

		pris_pos[0] = 0.0;
 80045b6:	4b20      	ldr	r3, [pc, #128]	@ (8004638 <plotter_process_return_to_home+0x10c>)
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
		pris_pos[1] = 0.0;
 80045be:	4b1e      	ldr	r3, [pc, #120]	@ (8004638 <plotter_process_return_to_home+0x10c>)
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	605a      	str	r2, [r3, #4]

		rev_pos[0] = 0.0;
 80045c6:	4b1d      	ldr	r3, [pc, #116]	@ (800463c <plotter_process_return_to_home+0x110>)
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
		rev_pos[1] = 0.0;
 80045ce:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <plotter_process_return_to_home+0x110>)
 80045d0:	f04f 0200 	mov.w	r2, #0
 80045d4:	605a      	str	r2, [r3, #4]

		pristrajectoryActive = false;
 80045d6:	4b1a      	ldr	r3, [pc, #104]	@ (8004640 <plotter_process_return_to_home+0x114>)
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]
		revtrajectoryActive = false;
 80045dc:	4b19      	ldr	r3, [pc, #100]	@ (8004644 <plotter_process_return_to_home+0x118>)
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]

		pris_target_p = 0.0f;
 80045e2:	4b19      	ldr	r3, [pc, #100]	@ (8004648 <plotter_process_return_to_home+0x11c>)
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
		rev_target_p = 0.0f;
 80045ea:	4b18      	ldr	r3, [pc, #96]	@ (800464c <plotter_process_return_to_home+0x120>)
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]

		if (joy_state == A2B2_GOTO_HOME) {
 80045f2:	4b17      	ldr	r3, [pc, #92]	@ (8004650 <plotter_process_return_to_home+0x124>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	2b06      	cmp	r3, #6
 80045f8:	d106      	bne.n	8004608 <plotter_process_return_to_home+0xdc>
			joy_state = A2B2_MODE;
 80045fa:	4b15      	ldr	r3, [pc, #84]	@ (8004650 <plotter_process_return_to_home+0x124>)
 80045fc:	2201      	movs	r2, #1
 80045fe:	701a      	strb	r2, [r3, #0]
			rs_current_state = RS_JOG_MODE;
 8004600:	4b14      	ldr	r3, [pc, #80]	@ (8004654 <plotter_process_return_to_home+0x128>)
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	e002      	b.n	800460e <plotter_process_return_to_home+0xe2>
		} else {
			rs_current_state = RS_IDLE;
 8004608:	4b12      	ldr	r3, [pc, #72]	@ (8004654 <plotter_process_return_to_home+0x128>)
 800460a:	2200      	movs	r2, #0
 800460c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800460e:	bd80      	pop	{r7, pc}
 8004610:	200005aa 	.word	0x200005aa
 8004614:	200002ef 	.word	0x200002ef
 8004618:	447a0000 	.word	0x447a0000
 800461c:	44fa0000 	.word	0x44fa0000
 8004620:	200005f8 	.word	0x200005f8
 8004624:	200017d4 	.word	0x200017d4
 8004628:	00000000 	.word	0x00000000
 800462c:	200002ee 	.word	0x200002ee
 8004630:	200005ac 	.word	0x200005ac
 8004634:	200017dc 	.word	0x200017dc
 8004638:	20000590 	.word	0x20000590
 800463c:	20000598 	.word	0x20000598
 8004640:	20000504 	.word	0x20000504
 8004644:	2000055c 	.word	0x2000055c
 8004648:	2000050c 	.word	0x2000050c
 800464c:	20000564 	.word	0x20000564
 8004650:	200002ed 	.word	0x200002ed
 8004654:	200002e8 	.word	0x200002e8

08004658 <plotter_process_emergency>:

void plotter_process_emergency() {
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
// Emergency stop - immediately cut power to motors
	MDXX_set_range(&prismatic_motor, 2000, 0);
 800465c:	eddf 0a10 	vldr	s1, [pc, #64]	@ 80046a0 <plotter_process_emergency+0x48>
 8004660:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80046a4 <plotter_process_emergency+0x4c>
 8004664:	4810      	ldr	r0, [pc, #64]	@ (80046a8 <plotter_process_emergency+0x50>)
 8004666:	f7fc fe23 	bl	80012b0 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 800466a:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80046a0 <plotter_process_emergency+0x48>
 800466e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80046a4 <plotter_process_emergency+0x4c>
 8004672:	480e      	ldr	r0, [pc, #56]	@ (80046ac <plotter_process_emergency+0x54>)
 8004674:	f7fc fe1c 	bl	80012b0 <MDXX_set_range>

// Exit emergency mode only if button pressed and emergency switch released
	if (joy_state == EMERGENCY_MODE && b1 && !emer) {
 8004678:	4b0d      	ldr	r3, [pc, #52]	@ (80046b0 <plotter_process_emergency+0x58>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d10d      	bne.n	800469c <plotter_process_emergency+0x44>
 8004680:	4b0c      	ldr	r3, [pc, #48]	@ (80046b4 <plotter_process_emergency+0x5c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <plotter_process_emergency+0x44>
 8004688:	4b0b      	ldr	r3, [pc, #44]	@ (80046b8 <plotter_process_emergency+0x60>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <plotter_process_emergency+0x44>
		rs_current_state = RS_RETURN_TO_HOME;
 8004690:	4b0a      	ldr	r3, [pc, #40]	@ (80046bc <plotter_process_emergency+0x64>)
 8004692:	2204      	movs	r2, #4
 8004694:	701a      	strb	r2, [r3, #0]
		emer_state = DEFAULT;
 8004696:	4b0a      	ldr	r3, [pc, #40]	@ (80046c0 <plotter_process_emergency+0x68>)
 8004698:	2201      	movs	r2, #1
 800469a:	701a      	strb	r2, [r3, #0]
	}
}
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	00000000 	.word	0x00000000
 80046a4:	44fa0000 	.word	0x44fa0000
 80046a8:	200005ac 	.word	0x200005ac
 80046ac:	200005f8 	.word	0x200005f8
 80046b0:	200002ed 	.word	0x200002ed
 80046b4:	200017c4 	.word	0x200017c4
 80046b8:	200017d8 	.word	0x200017d8
 80046bc:	200002e8 	.word	0x200002e8
 80046c0:	200002f0 	.word	0x200002f0

080046c4 <plotter_process_trajectory_control>:

void plotter_process_trajectory_control(float32_t pris_tgt, float32_t rev_tgt) {
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	ed2d 8b02 	vpush	{d8}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80046d2:	edc7 0a00 	vstr	s1, [r7]
	if (pris_tgt > PRISMATIC_MAX_POS || pris_tgt < PRISMATIC_MIN_POS) {
 80046d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80046da:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80047f0 <plotter_process_trajectory_control+0x12c>
 80046de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e6:	dc7b      	bgt.n	80047e0 <plotter_process_trajectory_control+0x11c>
 80046e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80046ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f4:	d474      	bmi.n	80047e0 <plotter_process_trajectory_control+0x11c>
		return;
	}

	if (rev_tgt > REVOLUTE_MAX_POS || rev_tgt < REVOLUTE_MIN_POS) {
 80046f6:	edd7 7a00 	vldr	s15, [r7]
 80046fa:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80047f4 <plotter_process_trajectory_control+0x130>
 80046fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004706:	dc6d      	bgt.n	80047e4 <plotter_process_trajectory_control+0x120>
 8004708:	edd7 7a00 	vldr	s15, [r7]
 800470c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004714:	d466      	bmi.n	80047e4 <plotter_process_trajectory_control+0x120>
		return;
	}

// Setup target points
	pris_target_p = pris_tgt;
 8004716:	4a38      	ldr	r2, [pc, #224]	@ (80047f8 <plotter_process_trajectory_control+0x134>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6013      	str	r3, [r2, #0]
	rev_target_p = rev_tgt;
 800471c:	4a37      	ldr	r2, [pc, #220]	@ (80047fc <plotter_process_trajectory_control+0x138>)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6013      	str	r3, [r2, #0]

// Set initial positions from current encoder readings
	pris_initial_p = prismatic_encoder.mm;
 8004722:	4b37      	ldr	r3, [pc, #220]	@ (8004800 <plotter_process_trajectory_control+0x13c>)
 8004724:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004726:	4a37      	ldr	r2, [pc, #220]	@ (8004804 <plotter_process_trajectory_control+0x140>)
 8004728:	6013      	str	r3, [r2, #0]
	rev_initial_p = revolute_encoder.rads;
 800472a:	4b37      	ldr	r3, [pc, #220]	@ (8004808 <plotter_process_trajectory_control+0x144>)
 800472c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472e:	4a37      	ldr	r2, [pc, #220]	@ (800480c <plotter_process_trajectory_control+0x148>)
 8004730:	6013      	str	r3, [r2, #0]

// Reset trajectory timers
	prisEva.t = 0.0f;
 8004732:	4b37      	ldr	r3, [pc, #220]	@ (8004810 <plotter_process_trajectory_control+0x14c>)
 8004734:	f04f 0200 	mov.w	r2, #0
 8004738:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 800473a:	4b35      	ldr	r3, [pc, #212]	@ (8004810 <plotter_process_trajectory_control+0x14c>)
 800473c:	2200      	movs	r2, #0
 800473e:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 8004740:	4b34      	ldr	r3, [pc, #208]	@ (8004814 <plotter_process_trajectory_control+0x150>)
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8004748:	4b32      	ldr	r3, [pc, #200]	@ (8004814 <plotter_process_trajectory_control+0x150>)
 800474a:	2200      	movs	r2, #0
 800474c:	741a      	strb	r2, [r3, #16]

// Generate prismatic trajectory
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 800474e:	4b2d      	ldr	r3, [pc, #180]	@ (8004804 <plotter_process_trajectory_control+0x140>)
 8004750:	ed93 8a00 	vldr	s16, [r3]
 8004754:	4b28      	ldr	r3, [pc, #160]	@ (80047f8 <plotter_process_trajectory_control+0x134>)
 8004756:	edd3 8a00 	vldr	s17, [r3]
			ZGX45RGG_400RPM_Constant.sd_max, ZGX45RGG_400RPM_Constant.sdd_max);
 800475a:	4b2f      	ldr	r3, [pc, #188]	@ (8004818 <plotter_process_trajectory_control+0x154>)
 800475c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	f7fc f9f6 	bl	8000b54 <__aeabi_d2f>
 8004768:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.sd_max, ZGX45RGG_400RPM_Constant.sdd_max);
 800476a:	4b2b      	ldr	r3, [pc, #172]	@ (8004818 <plotter_process_trajectory_control+0x154>)
 800476c:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
	Trapezoidal_Generator(&prisGen, pris_initial_p, pris_target_p,
 8004770:	4610      	mov	r0, r2
 8004772:	4619      	mov	r1, r3
 8004774:	f7fc f9ee 	bl	8000b54 <__aeabi_d2f>
 8004778:	4603      	mov	r3, r0
 800477a:	ee01 3a90 	vmov	s3, r3
 800477e:	ee01 4a10 	vmov	s2, r4
 8004782:	eef0 0a68 	vmov.f32	s1, s17
 8004786:	eeb0 0a48 	vmov.f32	s0, s16
 800478a:	4824      	ldr	r0, [pc, #144]	@ (800481c <plotter_process_trajectory_control+0x158>)
 800478c:	f7fe f875 	bl	800287a <Trapezoidal_Generator>

// Generate revolute trajectory
	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 8004790:	4b1e      	ldr	r3, [pc, #120]	@ (800480c <plotter_process_trajectory_control+0x148>)
 8004792:	ed93 8a00 	vldr	s16, [r3]
 8004796:	4b19      	ldr	r3, [pc, #100]	@ (80047fc <plotter_process_trajectory_control+0x138>)
 8004798:	edd3 8a00 	vldr	s17, [r3]
			ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qdd_max);
 800479c:	4b20      	ldr	r3, [pc, #128]	@ (8004820 <plotter_process_trajectory_control+0x15c>)
 800479e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 80047a2:	4610      	mov	r0, r2
 80047a4:	4619      	mov	r1, r3
 80047a6:	f7fc f9d5 	bl	8000b54 <__aeabi_d2f>
 80047aa:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qdd_max);
 80047ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004820 <plotter_process_trajectory_control+0x15c>)
 80047ae:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
	Trapezoidal_Generator(&revGen, rev_initial_p, rev_target_p,
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	f7fc f9cd 	bl	8000b54 <__aeabi_d2f>
 80047ba:	4603      	mov	r3, r0
 80047bc:	ee01 3a90 	vmov	s3, r3
 80047c0:	ee01 4a10 	vmov	s2, r4
 80047c4:	eef0 0a68 	vmov.f32	s1, s17
 80047c8:	eeb0 0a48 	vmov.f32	s0, s16
 80047cc:	4815      	ldr	r0, [pc, #84]	@ (8004824 <plotter_process_trajectory_control+0x160>)
 80047ce:	f7fe f854 	bl	800287a <Trapezoidal_Generator>

// Activate trajectories
	pristrajectoryActive = true;
 80047d2:	4b15      	ldr	r3, [pc, #84]	@ (8004828 <plotter_process_trajectory_control+0x164>)
 80047d4:	2201      	movs	r2, #1
 80047d6:	701a      	strb	r2, [r3, #0]
	revtrajectoryActive = true;
 80047d8:	4b14      	ldr	r3, [pc, #80]	@ (800482c <plotter_process_trajectory_control+0x168>)
 80047da:	2201      	movs	r2, #1
 80047dc:	701a      	strb	r2, [r3, #0]
 80047de:	e002      	b.n	80047e6 <plotter_process_trajectory_control+0x122>
		return;
 80047e0:	bf00      	nop
 80047e2:	e000      	b.n	80047e6 <plotter_process_trajectory_control+0x122>
		return;
 80047e4:	bf00      	nop
}
 80047e6:	370c      	adds	r7, #12
 80047e8:	46bd      	mov	sp, r7
 80047ea:	ecbd 8b02 	vpop	{d8}
 80047ee:	bd90      	pop	{r4, r7, pc}
 80047f0:	43960000 	.word	0x43960000
 80047f4:	40c90fdb 	.word	0x40c90fdb
 80047f8:	2000050c 	.word	0x2000050c
 80047fc:	20000564 	.word	0x20000564
 8004800:	20000644 	.word	0x20000644
 8004804:	20000508 	.word	0x20000508
 8004808:	200006a0 	.word	0x200006a0
 800480c:	20000560 	.word	0x20000560
 8004810:	200004f0 	.word	0x200004f0
 8004814:	20000548 	.word	0x20000548
 8004818:	20000060 	.word	0x20000060
 800481c:	200004dc 	.word	0x200004dc
 8004820:	20000000 	.word	0x20000000
 8004824:	20000534 	.word	0x20000534
 8004828:	20000504 	.word	0x20000504
 800482c:	2000055c 	.word	0x2000055c

08004830 <plotter_update_trajectories>:

void plotter_update_trajectories() {
 8004830:	b598      	push	{r3, r4, r7, lr}
 8004832:	ed2d 8b02 	vpush	{d8}
 8004836:	af00      	add	r7, sp, #0
// Evaluate prismatic trajectory
	if (pristrajectoryActive) {
 8004838:	4b43      	ldr	r3, [pc, #268]	@ (8004948 <plotter_update_trajectories+0x118>)
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d037      	beq.n	80048b0 <plotter_update_trajectories+0x80>
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 8004840:	4b42      	ldr	r3, [pc, #264]	@ (800494c <plotter_update_trajectories+0x11c>)
 8004842:	ed93 8a00 	vldr	s16, [r3]
 8004846:	4b42      	ldr	r3, [pc, #264]	@ (8004950 <plotter_update_trajectories+0x120>)
 8004848:	edd3 8a00 	vldr	s17, [r3]
				ZGX45RGG_400RPM_Constant.sd_max,
 800484c:	4b41      	ldr	r3, [pc, #260]	@ (8004954 <plotter_update_trajectories+0x124>)
 800484e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 8004852:	4610      	mov	r0, r2
 8004854:	4619      	mov	r1, r3
 8004856:	f7fc f97d 	bl	8000b54 <__aeabi_d2f>
 800485a:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.sdd_max);
 800485c:	4b3d      	ldr	r3, [pc, #244]	@ (8004954 <plotter_update_trajectories+0x124>)
 800485e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
		Trapezoidal_Evaluated(&prisGen, &prisEva, pris_initial_p, pris_target_p,
 8004862:	4610      	mov	r0, r2
 8004864:	4619      	mov	r1, r3
 8004866:	f7fc f975 	bl	8000b54 <__aeabi_d2f>
 800486a:	4603      	mov	r3, r0
 800486c:	ee01 3a90 	vmov	s3, r3
 8004870:	ee01 4a10 	vmov	s2, r4
 8004874:	eef0 0a68 	vmov.f32	s1, s17
 8004878:	eeb0 0a48 	vmov.f32	s0, s16
 800487c:	4936      	ldr	r1, [pc, #216]	@ (8004958 <plotter_update_trajectories+0x128>)
 800487e:	4837      	ldr	r0, [pc, #220]	@ (800495c <plotter_update_trajectories+0x12c>)
 8004880:	f7fe f8bc 	bl	80029fc <Trapezoidal_Evaluated>

		// Update reference signals
		prismatic_pos = prisEva.setposition;
 8004884:	4b34      	ldr	r3, [pc, #208]	@ (8004958 <plotter_update_trajectories+0x128>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a35      	ldr	r2, [pc, #212]	@ (8004960 <plotter_update_trajectories+0x130>)
 800488a:	6013      	str	r3, [r2, #0]
		prismatic_vel = prisEva.setvelocity;
 800488c:	4b32      	ldr	r3, [pc, #200]	@ (8004958 <plotter_update_trajectories+0x128>)
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	4a34      	ldr	r2, [pc, #208]	@ (8004964 <plotter_update_trajectories+0x134>)
 8004892:	6013      	str	r3, [r2, #0]
		prismatic_accel = prisEva.setacceleration;
 8004894:	4b30      	ldr	r3, [pc, #192]	@ (8004958 <plotter_update_trajectories+0x128>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	4a33      	ldr	r2, [pc, #204]	@ (8004968 <plotter_update_trajectories+0x138>)
 800489a:	6013      	str	r3, [r2, #0]

		// Check if trajectory is complete
		if (prisEva.isFinised) {
 800489c:	4b2e      	ldr	r3, [pc, #184]	@ (8004958 <plotter_update_trajectories+0x128>)
 800489e:	7c1b      	ldrb	r3, [r3, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <plotter_update_trajectories+0x80>
			pristrajectoryActive = false;
 80048a4:	4b28      	ldr	r3, [pc, #160]	@ (8004948 <plotter_update_trajectories+0x118>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	701a      	strb	r2, [r3, #0]
			prismatic_state = PP_TARGET_REACH;
 80048aa:	4b30      	ldr	r3, [pc, #192]	@ (800496c <plotter_update_trajectories+0x13c>)
 80048ac:	2205      	movs	r2, #5
 80048ae:	701a      	strb	r2, [r3, #0]
		}
	}

// Evaluate revolute trajectory
	if (revtrajectoryActive) {
 80048b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004970 <plotter_update_trajectories+0x140>)
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d037      	beq.n	8004928 <plotter_update_trajectories+0xf8>
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 80048b8:	4b2e      	ldr	r3, [pc, #184]	@ (8004974 <plotter_update_trajectories+0x144>)
 80048ba:	ed93 8a00 	vldr	s16, [r3]
 80048be:	4b2e      	ldr	r3, [pc, #184]	@ (8004978 <plotter_update_trajectories+0x148>)
 80048c0:	edd3 8a00 	vldr	s17, [r3]
				ZGX45RGG_150RPM_Constant.qd_max,
 80048c4:	4b2d      	ldr	r3, [pc, #180]	@ (800497c <plotter_update_trajectories+0x14c>)
 80048c6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 80048ca:	4610      	mov	r0, r2
 80048cc:	4619      	mov	r1, r3
 80048ce:	f7fc f941 	bl	8000b54 <__aeabi_d2f>
 80048d2:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.qdd_max);
 80048d4:	4b29      	ldr	r3, [pc, #164]	@ (800497c <plotter_update_trajectories+0x14c>)
 80048d6:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
		Trapezoidal_Evaluated(&revGen, &revEva, rev_initial_p, rev_target_p,
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	f7fc f939 	bl	8000b54 <__aeabi_d2f>
 80048e2:	4603      	mov	r3, r0
 80048e4:	ee01 3a90 	vmov	s3, r3
 80048e8:	ee01 4a10 	vmov	s2, r4
 80048ec:	eef0 0a68 	vmov.f32	s1, s17
 80048f0:	eeb0 0a48 	vmov.f32	s0, s16
 80048f4:	4922      	ldr	r1, [pc, #136]	@ (8004980 <plotter_update_trajectories+0x150>)
 80048f6:	4823      	ldr	r0, [pc, #140]	@ (8004984 <plotter_update_trajectories+0x154>)
 80048f8:	f7fe f880 	bl	80029fc <Trapezoidal_Evaluated>

		// Update reference signals
		revolute_pos = revEva.setposition;
 80048fc:	4b20      	ldr	r3, [pc, #128]	@ (8004980 <plotter_update_trajectories+0x150>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a21      	ldr	r2, [pc, #132]	@ (8004988 <plotter_update_trajectories+0x158>)
 8004902:	6013      	str	r3, [r2, #0]
		revolute_vel = revEva.setvelocity;
 8004904:	4b1e      	ldr	r3, [pc, #120]	@ (8004980 <plotter_update_trajectories+0x150>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	4a20      	ldr	r2, [pc, #128]	@ (800498c <plotter_update_trajectories+0x15c>)
 800490a:	6013      	str	r3, [r2, #0]
		revolute_accel = revEva.setacceleration;
 800490c:	4b1c      	ldr	r3, [pc, #112]	@ (8004980 <plotter_update_trajectories+0x150>)
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	4a1f      	ldr	r2, [pc, #124]	@ (8004990 <plotter_update_trajectories+0x160>)
 8004912:	6013      	str	r3, [r2, #0]

		// Check if trajectory is complete
		if (revEva.isFinised) {
 8004914:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <plotter_update_trajectories+0x150>)
 8004916:	7c1b      	ldrb	r3, [r3, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <plotter_update_trajectories+0xf8>
			revtrajectoryActive = false;
 800491c:	4b14      	ldr	r3, [pc, #80]	@ (8004970 <plotter_update_trajectories+0x140>)
 800491e:	2200      	movs	r2, #0
 8004920:	701a      	strb	r2, [r3, #0]
			revolute_state = RP_TARGET_REACH;
 8004922:	4b1c      	ldr	r3, [pc, #112]	@ (8004994 <plotter_update_trajectories+0x164>)
 8004924:	2204      	movs	r2, #4
 8004926:	701a      	strb	r2, [r3, #0]
		}
	}

// If trajectories are active, apply motion control
	if (pristrajectoryActive || revtrajectoryActive) {
 8004928:	4b07      	ldr	r3, [pc, #28]	@ (8004948 <plotter_update_trajectories+0x118>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d103      	bne.n	8004938 <plotter_update_trajectories+0x108>
 8004930:	4b0f      	ldr	r3, [pc, #60]	@ (8004970 <plotter_update_trajectories+0x140>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <plotter_update_trajectories+0x10c>
		plotter_move();
 8004938:	f7fe ff9a 	bl	8003870 <plotter_move>
	}
}
 800493c:	bf00      	nop
 800493e:	46bd      	mov	sp, r7
 8004940:	ecbd 8b02 	vpop	{d8}
 8004944:	bd98      	pop	{r3, r4, r7, pc}
 8004946:	bf00      	nop
 8004948:	20000504 	.word	0x20000504
 800494c:	20000508 	.word	0x20000508
 8004950:	2000050c 	.word	0x2000050c
 8004954:	20000060 	.word	0x20000060
 8004958:	200004f0 	.word	0x200004f0
 800495c:	200004dc 	.word	0x200004dc
 8004960:	20000510 	.word	0x20000510
 8004964:	20000514 	.word	0x20000514
 8004968:	20000518 	.word	0x20000518
 800496c:	200002ee 	.word	0x200002ee
 8004970:	2000055c 	.word	0x2000055c
 8004974:	20000560 	.word	0x20000560
 8004978:	20000564 	.word	0x20000564
 800497c:	20000000 	.word	0x20000000
 8004980:	20000548 	.word	0x20000548
 8004984:	20000534 	.word	0x20000534
 8004988:	20000568 	.word	0x20000568
 800498c:	2000056c 	.word	0x2000056c
 8004990:	20000570 	.word	0x20000570
 8004994:	200002ef 	.word	0x200002ef

08004998 <getPointRegisterR>:

uint16_t getPointRegisterR(uint8_t point_index) {
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	71fb      	strb	r3, [r7, #7]
	switch (point_index) {
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	2b09      	cmp	r3, #9
 80049a6:	d82b      	bhi.n	8004a00 <getPointRegisterR+0x68>
 80049a8:	a201      	add	r2, pc, #4	@ (adr r2, 80049b0 <getPointRegisterR+0x18>)
 80049aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ae:	bf00      	nop
 80049b0:	080049d9 	.word	0x080049d9
 80049b4:	080049dd 	.word	0x080049dd
 80049b8:	080049e1 	.word	0x080049e1
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	080049ed 	.word	0x080049ed
 80049c8:	080049f1 	.word	0x080049f1
 80049cc:	080049f5 	.word	0x080049f5
 80049d0:	080049f9 	.word	0x080049f9
 80049d4:	080049fd 	.word	0x080049fd
	case 0:
		return Target_PosR_1;
 80049d8:	2320      	movs	r3, #32
 80049da:	e012      	b.n	8004a02 <getPointRegisterR+0x6a>
	case 1:
		return Target_PosR_2;
 80049dc:	2322      	movs	r3, #34	@ 0x22
 80049de:	e010      	b.n	8004a02 <getPointRegisterR+0x6a>
	case 2:
		return Target_PosR_3;
 80049e0:	2324      	movs	r3, #36	@ 0x24
 80049e2:	e00e      	b.n	8004a02 <getPointRegisterR+0x6a>
	case 3:
		return Target_PosR_4;
 80049e4:	2326      	movs	r3, #38	@ 0x26
 80049e6:	e00c      	b.n	8004a02 <getPointRegisterR+0x6a>
	case 4:
		return Target_PosR_5;
 80049e8:	2328      	movs	r3, #40	@ 0x28
 80049ea:	e00a      	b.n	8004a02 <getPointRegisterR+0x6a>
	case 5:
		return Target_PosR_6;
 80049ec:	2330      	movs	r3, #48	@ 0x30
 80049ee:	e008      	b.n	8004a02 <getPointRegisterR+0x6a>
	case 6:
		return Target_PosR_7;
 80049f0:	2332      	movs	r3, #50	@ 0x32
 80049f2:	e006      	b.n	8004a02 <getPointRegisterR+0x6a>
	case 7:
		return Target_PosR_8;
 80049f4:	2334      	movs	r3, #52	@ 0x34
 80049f6:	e004      	b.n	8004a02 <getPointRegisterR+0x6a>
	case 8:
		return Target_PosR_9;
 80049f8:	2336      	movs	r3, #54	@ 0x36
 80049fa:	e002      	b.n	8004a02 <getPointRegisterR+0x6a>
	case 9:
		return Target_PosR_10;
 80049fc:	2338      	movs	r3, #56	@ 0x38
 80049fe:	e000      	b.n	8004a02 <getPointRegisterR+0x6a>
	default:
		return Target_PosR_1;
 8004a00:	2320      	movs	r3, #32
	}
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	370c      	adds	r7, #12
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop

08004a10 <getPointRegisterT>:

uint16_t getPointRegisterT(uint8_t point_index) {
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	71fb      	strb	r3, [r7, #7]
	switch (point_index) {
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	2b09      	cmp	r3, #9
 8004a1e:	d82b      	bhi.n	8004a78 <getPointRegisterT+0x68>
 8004a20:	a201      	add	r2, pc, #4	@ (adr r2, 8004a28 <getPointRegisterT+0x18>)
 8004a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a26:	bf00      	nop
 8004a28:	08004a51 	.word	0x08004a51
 8004a2c:	08004a55 	.word	0x08004a55
 8004a30:	08004a59 	.word	0x08004a59
 8004a34:	08004a5d 	.word	0x08004a5d
 8004a38:	08004a61 	.word	0x08004a61
 8004a3c:	08004a65 	.word	0x08004a65
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a71 	.word	0x08004a71
 8004a4c:	08004a75 	.word	0x08004a75
	case 0:
		return Target_PosT_1;
 8004a50:	2321      	movs	r3, #33	@ 0x21
 8004a52:	e012      	b.n	8004a7a <getPointRegisterT+0x6a>
	case 1:
		return Target_PosT_2;
 8004a54:	2323      	movs	r3, #35	@ 0x23
 8004a56:	e010      	b.n	8004a7a <getPointRegisterT+0x6a>
	case 2:
		return Target_PosT_3;
 8004a58:	2325      	movs	r3, #37	@ 0x25
 8004a5a:	e00e      	b.n	8004a7a <getPointRegisterT+0x6a>
	case 3:
		return Target_PosT_4;
 8004a5c:	2327      	movs	r3, #39	@ 0x27
 8004a5e:	e00c      	b.n	8004a7a <getPointRegisterT+0x6a>
	case 4:
		return Target_PosT_5;
 8004a60:	2329      	movs	r3, #41	@ 0x29
 8004a62:	e00a      	b.n	8004a7a <getPointRegisterT+0x6a>
	case 5:
		return Target_PosT_6;
 8004a64:	2331      	movs	r3, #49	@ 0x31
 8004a66:	e008      	b.n	8004a7a <getPointRegisterT+0x6a>
	case 6:
		return Target_PosT_7;
 8004a68:	2333      	movs	r3, #51	@ 0x33
 8004a6a:	e006      	b.n	8004a7a <getPointRegisterT+0x6a>
	case 7:
		return Target_PosT_8;
 8004a6c:	2335      	movs	r3, #53	@ 0x35
 8004a6e:	e004      	b.n	8004a7a <getPointRegisterT+0x6a>
	case 8:
		return Target_PosT_9;
 8004a70:	2337      	movs	r3, #55	@ 0x37
 8004a72:	e002      	b.n	8004a7a <getPointRegisterT+0x6a>
	case 9:
		return Target_PosT_10;
 8004a74:	2339      	movs	r3, #57	@ 0x39
 8004a76:	e000      	b.n	8004a7a <getPointRegisterT+0x6a>
	default:
		return Target_PosT_1;
 8004a78:	2321      	movs	r3, #33	@ 0x21
	}
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop

08004a88 <getNumberOfSetPoints>:

uint8_t getNumberOfSetPoints() {
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
	switch (setpoint_state) {
 8004a8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b04 <getNumberOfSetPoints+0x7c>)
 8004a8e:	781b      	ldrb	r3, [r3, #0]
 8004a90:	2b0b      	cmp	r3, #11
 8004a92:	d831      	bhi.n	8004af8 <getNumberOfSetPoints+0x70>
 8004a94:	a201      	add	r2, pc, #4	@ (adr r2, 8004a9c <getNumberOfSetPoints+0x14>)
 8004a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9a:	bf00      	nop
 8004a9c:	08004acd 	.word	0x08004acd
 8004aa0:	08004ad1 	.word	0x08004ad1
 8004aa4:	08004ad5 	.word	0x08004ad5
 8004aa8:	08004ad9 	.word	0x08004ad9
 8004aac:	08004add 	.word	0x08004add
 8004ab0:	08004ae1 	.word	0x08004ae1
 8004ab4:	08004ae5 	.word	0x08004ae5
 8004ab8:	08004ae9 	.word	0x08004ae9
 8004abc:	08004aed 	.word	0x08004aed
 8004ac0:	08004af1 	.word	0x08004af1
 8004ac4:	08004af5 	.word	0x08004af5
 8004ac8:	08004acd 	.word	0x08004acd
	case NO_POINT_SET:
	case POINT_IDLE:
		return 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	e014      	b.n	8004afa <getNumberOfSetPoints+0x72>
	case POINT_1_SET:
		return 1;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e012      	b.n	8004afa <getNumberOfSetPoints+0x72>
	case POINT_2_SET:
		return 2;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e010      	b.n	8004afa <getNumberOfSetPoints+0x72>
	case POINT_3_SET:
		return 3;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e00e      	b.n	8004afa <getNumberOfSetPoints+0x72>
	case POINT_4_SET:
		return 4;
 8004adc:	2304      	movs	r3, #4
 8004ade:	e00c      	b.n	8004afa <getNumberOfSetPoints+0x72>
	case POINT_5_SET:
		return 5;
 8004ae0:	2305      	movs	r3, #5
 8004ae2:	e00a      	b.n	8004afa <getNumberOfSetPoints+0x72>
	case POINT_6_SET:
		return 6;
 8004ae4:	2306      	movs	r3, #6
 8004ae6:	e008      	b.n	8004afa <getNumberOfSetPoints+0x72>
	case POINT_7_SET:
		return 7;
 8004ae8:	2307      	movs	r3, #7
 8004aea:	e006      	b.n	8004afa <getNumberOfSetPoints+0x72>
	case POINT_8_SET:
		return 8;
 8004aec:	2308      	movs	r3, #8
 8004aee:	e004      	b.n	8004afa <getNumberOfSetPoints+0x72>
	case POINT_9_SET:
		return 9;
 8004af0:	2309      	movs	r3, #9
 8004af2:	e002      	b.n	8004afa <getNumberOfSetPoints+0x72>
	case POINT_10_SET:
		return 10;
 8004af4:	230a      	movs	r3, #10
 8004af6:	e000      	b.n	8004afa <getNumberOfSetPoints+0x72>
	default:
		return 0;
 8004af8:	2300      	movs	r3, #0
	}
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	200002ea 	.word	0x200002ea

08004b08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 8004b12:	88fb      	ldrh	r3, [r7, #6]
 8004b14:	2b10      	cmp	r3, #16
 8004b16:	d105      	bne.n	8004b24 <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8004b18:	4b05      	ldr	r3, [pc, #20]	@ (8004b30 <HAL_GPIO_EXTI_Callback+0x28>)
 8004b1a:	2205      	movs	r2, #5
 8004b1c:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 8004b1e:	4b05      	ldr	r3, [pc, #20]	@ (8004b34 <HAL_GPIO_EXTI_Callback+0x2c>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
	}
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	200002e8 	.word	0x200002e8
 8004b34:	200002f0 	.word	0x200002f0

08004b38 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {

	}
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a8f      	ldr	r2, [pc, #572]	@ (8004d94 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	f040 81d2 	bne.w	8004f02 <HAL_TIM_PeriodElapsedCallback+0x3b6>
		Modbus_Protocal_Worker();
 8004b5e:	f7fc ff33 	bl	80019c8 <Modbus_Protocal_Worker>

		QEI_get_diff_count(&prismatic_encoder);
 8004b62:	488d      	ldr	r0, [pc, #564]	@ (8004d98 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004b64:	f7fd fc38 	bl	80023d8 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8004b68:	488b      	ldr	r0, [pc, #556]	@ (8004d98 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004b6a:	f7fd fd21 	bl	80025b0 <QEI_compute_data>

		pris_vin = pris_cmd_ux * ZGX45RGG_400RPM_Constant.V_max
 8004b6e:	4b8b      	ldr	r3, [pc, #556]	@ (8004d9c <HAL_TIM_PeriodElapsedCallback+0x250>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fb fcb4 	bl	80004e0 <__aeabi_f2d>
 8004b78:	4b89      	ldr	r3, [pc, #548]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004b7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004b7e:	f7fb fd07 	bl	8000590 <__aeabi_dmul>
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	4610      	mov	r0, r2
 8004b88:	4619      	mov	r1, r3
				/ ZGX45RGG_400RPM_Constant.U_max;
 8004b8a:	4b85      	ldr	r3, [pc, #532]	@ (8004da0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8004b8c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8004b90:	f7fb fe28 	bl	80007e4 <__aeabi_ddiv>
 8004b94:	4602      	mov	r2, r0
 8004b96:	460b      	mov	r3, r1
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f7fb ffda 	bl	8000b54 <__aeabi_d2f>
 8004ba0:	4603      	mov	r3, r0
		pris_vin = pris_cmd_ux * ZGX45RGG_400RPM_Constant.V_max
 8004ba2:	4a80      	ldr	r2, [pc, #512]	@ (8004da4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004ba4:	6013      	str	r3, [r2, #0]

		pris_kal_filt = SteadyStateKalmanFilter(&prismatic_kalman, pris_vin,
 8004ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8004da4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8004ba8:	edd3 7a00 	vldr	s15, [r3]
 8004bac:	4b7a      	ldr	r3, [pc, #488]	@ (8004d98 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8004bae:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004bb2:	eef0 0a47 	vmov.f32	s1, s14
 8004bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8004bba:	487b      	ldr	r0, [pc, #492]	@ (8004da8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8004bbc:	f7fe fa78 	bl	80030b0 <SteadyStateKalmanFilter>
 8004bc0:	ee10 3a10 	vmov	r3, s0
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fb fc8b 	bl	80004e0 <__aeabi_f2d>
				prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius;
 8004bca:	4b78      	ldr	r3, [pc, #480]	@ (8004dac <HAL_TIM_PeriodElapsedCallback+0x260>)
 8004bcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004bd0:	f7fb fcde 	bl	8000590 <__aeabi_dmul>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	460b      	mov	r3, r1
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4619      	mov	r1, r3
 8004bdc:	f7fb ffba 	bl	8000b54 <__aeabi_d2f>
 8004be0:	4603      	mov	r3, r0
		pris_kal_filt = SteadyStateKalmanFilter(&prismatic_kalman, pris_vin,
 8004be2:	4a73      	ldr	r2, [pc, #460]	@ (8004db0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8004be4:	6013      	str	r3, [r2, #0]

		QEI_get_diff_count(&revolute_encoder);
 8004be6:	4873      	ldr	r0, [pc, #460]	@ (8004db4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004be8:	f7fd fbf6 	bl	80023d8 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 8004bec:	4871      	ldr	r0, [pc, #452]	@ (8004db4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004bee:	f7fd fcdf 	bl	80025b0 <QEI_compute_data>

		rev_vin = rev_cmd_ux * ZGX45RGG_150RPM_Constant.V_max
 8004bf2:	4b71      	ldr	r3, [pc, #452]	@ (8004db8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7fb fc72 	bl	80004e0 <__aeabi_f2d>
 8004bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8004dbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004bfe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8004c02:	f7fb fcc5 	bl	8000590 <__aeabi_dmul>
 8004c06:	4602      	mov	r2, r0
 8004c08:	460b      	mov	r3, r1
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4619      	mov	r1, r3
				/ ZGX45RGG_150RPM_Constant.U_max;
 8004c0e:	4b6b      	ldr	r3, [pc, #428]	@ (8004dbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8004c10:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8004c14:	f7fb fde6 	bl	80007e4 <__aeabi_ddiv>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f7fb ff98 	bl	8000b54 <__aeabi_d2f>
 8004c24:	4603      	mov	r3, r0
		rev_vin = rev_cmd_ux * ZGX45RGG_150RPM_Constant.V_max
 8004c26:	4a66      	ldr	r2, [pc, #408]	@ (8004dc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004c28:	6013      	str	r3, [r2, #0]

		rev_kal_filt = SteadyStateKalmanFilter(&revolute_kalman, rev_vin,
 8004c2a:	4b65      	ldr	r3, [pc, #404]	@ (8004dc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8004c2c:	edd3 7a00 	vldr	s15, [r3]
 8004c30:	4b60      	ldr	r3, [pc, #384]	@ (8004db4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8004c32:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004c36:	eef0 0a47 	vmov.f32	s1, s14
 8004c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004c3e:	4861      	ldr	r0, [pc, #388]	@ (8004dc4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8004c40:	f7fe fa36 	bl	80030b0 <SteadyStateKalmanFilter>
 8004c44:	eef0 7a40 	vmov.f32	s15, s0
 8004c48:	4b5f      	ldr	r3, [pc, #380]	@ (8004dc8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8004c4a:	edc3 7a00 	vstr	s15, [r3]
				revolute_encoder.rads);

		// Heartbeat and pen commands
		registerFrame[Heartbeat_Protocol].U16 = 22881;
 8004c4e:	4b5f      	ldr	r3, [pc, #380]	@ (8004dcc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004c50:	f645 1261 	movw	r2, #22881	@ 0x5961
 8004c54:	801a      	strh	r2, [r3, #0]

		if (registerFrame[Servo_UP].U16 == 1) {
 8004c56:	4b5d      	ldr	r3, [pc, #372]	@ (8004dcc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004c58:	891b      	ldrh	r3, [r3, #8]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d102      	bne.n	8004c64 <HAL_TIM_PeriodElapsedCallback+0x118>
			plotter_pen_up();
 8004c5e:	f000 fcff 	bl	8005660 <plotter_pen_up>
 8004c62:	e005      	b.n	8004c70 <HAL_TIM_PeriodElapsedCallback+0x124>
		} else if (registerFrame[Servo_Down].U16 == 1) {
 8004c64:	4b59      	ldr	r3, [pc, #356]	@ (8004dcc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004c66:	895b      	ldrh	r3, [r3, #10]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIM_PeriodElapsedCallback+0x124>
			plotter_pen_down();
 8004c6c:	f000 fd08 	bl	8005680 <plotter_pen_down>
		}

		// Update limit switch status
		if (servo_state == PEN_UP) {
 8004c70:	4b57      	ldr	r3, [pc, #348]	@ (8004dd0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d103      	bne.n	8004c80 <HAL_TIM_PeriodElapsedCallback+0x134>
			registerFrame[LimitSwitch_Status].U16 = 1;
 8004c78:	4b54      	ldr	r3, [pc, #336]	@ (8004dcc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	80da      	strh	r2, [r3, #6]
 8004c7e:	e006      	b.n	8004c8e <HAL_TIM_PeriodElapsedCallback+0x142>
		} else if (servo_state == PEN_DOWN) {
 8004c80:	4b53      	ldr	r3, [pc, #332]	@ (8004dd0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d102      	bne.n	8004c8e <HAL_TIM_PeriodElapsedCallback+0x142>
			registerFrame[LimitSwitch_Status].U16 = 2;
 8004c88:	4b50      	ldr	r3, [pc, #320]	@ (8004dcc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	80da      	strh	r2, [r3, #6]
		}

		if (pristrajectoryActive || revtrajectoryActive) {
 8004c8e:	4b51      	ldr	r3, [pc, #324]	@ (8004dd4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d103      	bne.n	8004c9e <HAL_TIM_PeriodElapsedCallback+0x152>
 8004c96:	4b50      	ldr	r3, [pc, #320]	@ (8004dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d001      	beq.n	8004ca2 <HAL_TIM_PeriodElapsedCallback+0x156>
			plotter_update_trajectories();
 8004c9e:	f7ff fdc7 	bl	8004830 <plotter_update_trajectories>
		}

		plotter_handle_state_transition();
 8004ca2:	f7ff f88b 	bl	8003dbc <plotter_handle_state_transition>

		if (check_prismatic_limit() || check_revolute_limit()) {
 8004ca6:	f7fe fd77 	bl	8003798 <check_prismatic_limit>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d104      	bne.n	8004cba <HAL_TIM_PeriodElapsedCallback+0x16e>
 8004cb0:	f7fe fdb2 	bl	8003818 <check_revolute_limit>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_TIM_PeriodElapsedCallback+0x180>
			pristrajectoryActive = false;
 8004cba:	4b46      	ldr	r3, [pc, #280]	@ (8004dd4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	701a      	strb	r2, [r3, #0]
			revtrajectoryActive = false;
 8004cc0:	4b45      	ldr	r3, [pc, #276]	@ (8004dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
			rs_current_state = RS_EMERGENCY_TRIGGED;
 8004cc6:	4b45      	ldr	r3, [pc, #276]	@ (8004ddc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004cc8:	2205      	movs	r2, #5
 8004cca:	701a      	strb	r2, [r3, #0]
		}

		switch (rs_current_state) {
 8004ccc:	4b43      	ldr	r3, [pc, #268]	@ (8004ddc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	2b04      	cmp	r3, #4
 8004cd4:	d84f      	bhi.n	8004d76 <HAL_TIM_PeriodElapsedCallback+0x22a>
 8004cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cdc <HAL_TIM_PeriodElapsedCallback+0x190>)
 8004cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cdc:	08004cf1 	.word	0x08004cf1
 8004ce0:	08004cf7 	.word	0x08004cf7
 8004ce4:	08004d15 	.word	0x08004d15
 8004ce8:	08004d6b 	.word	0x08004d6b
 8004cec:	08004d71 	.word	0x08004d71
		case RS_JOG_MODE:
			plotter_process_jog_mode();
 8004cf0:	f7ff f962 	bl	8003fb8 <plotter_process_jog_mode>
			break;
 8004cf4:	e083      	b.n	8004dfe <HAL_TIM_PeriodElapsedCallback+0x2b2>

		case RS_POINT_MODE:
			MDXX_set_range(&prismatic_motor, 2000, 0);
 8004cf6:	eddf 0a3a 	vldr	s1, [pc, #232]	@ 8004de0 <HAL_TIM_PeriodElapsedCallback+0x294>
 8004cfa:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 8004de4 <HAL_TIM_PeriodElapsedCallback+0x298>
 8004cfe:	483a      	ldr	r0, [pc, #232]	@ (8004de8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004d00:	f7fc fad6 	bl	80012b0 <MDXX_set_range>
			MDXX_set_range(&revolute_motor, 2000, 0);
 8004d04:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8004de0 <HAL_TIM_PeriodElapsedCallback+0x294>
 8004d08:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8004de4 <HAL_TIM_PeriodElapsedCallback+0x298>
 8004d0c:	4837      	ldr	r0, [pc, #220]	@ (8004dec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004d0e:	f7fc facf 	bl	80012b0 <MDXX_set_range>
			break;
 8004d12:	e074      	b.n	8004dfe <HAL_TIM_PeriodElapsedCallback+0x2b2>

		case RS_MOVING:
			static bool point_initialized = false;
			if (!point_initialized) {
 8004d14:	4b36      	ldr	r3, [pc, #216]	@ (8004df0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	f083 0301 	eor.w	r3, r3, #1
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00e      	beq.n	8004d40 <HAL_TIM_PeriodElapsedCallback+0x1f4>
				plotter_process_moving_mode(pris_target_p, rev_target_p);
 8004d22:	4b34      	ldr	r3, [pc, #208]	@ (8004df4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8004d24:	edd3 7a00 	vldr	s15, [r3]
 8004d28:	4b33      	ldr	r3, [pc, #204]	@ (8004df8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8004d2a:	ed93 7a00 	vldr	s14, [r3]
 8004d2e:	eef0 0a47 	vmov.f32	s1, s14
 8004d32:	eeb0 0a67 	vmov.f32	s0, s15
 8004d36:	f7ff fb89 	bl	800444c <plotter_process_moving_mode>
				point_initialized = true;
 8004d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8004df0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	701a      	strb	r2, [r3, #0]
			}

			if (!pristrajectoryActive && !revtrajectoryActive) {
 8004d40:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	f083 0301 	eor.w	r3, r3, #1
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d056      	beq.n	8004dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8004d4e:	4b22      	ldr	r3, [pc, #136]	@ (8004dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	f083 0301 	eor.w	r3, r3, #1
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d04f      	beq.n	8004dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>
				point_initialized = false;
 8004d5c:	4b24      	ldr	r3, [pc, #144]	@ (8004df0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
				rs_current_state = RS_IDLE;
 8004d62:	4b1e      	ldr	r3, [pc, #120]	@ (8004ddc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
			}
			break;
 8004d68:	e048      	b.n	8004dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>

		case RS_RETURN_TO_HOME:
			plotter_process_return_to_home();
 8004d6a:	f7ff fbdf 	bl	800452c <plotter_process_return_to_home>
			break;
 8004d6e:	e046      	b.n	8004dfe <HAL_TIM_PeriodElapsedCallback+0x2b2>

		case RS_EMERGENCY_TRIGGED:
			plotter_process_emergency();
 8004d70:	f7ff fc72 	bl	8004658 <plotter_process_emergency>
			break;
 8004d74:	e043      	b.n	8004dfe <HAL_TIM_PeriodElapsedCallback+0x2b2>

		case RS_IDLE:
		default:
			MDXX_set_range(&prismatic_motor, 2000, 0);
 8004d76:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8004de0 <HAL_TIM_PeriodElapsedCallback+0x294>
 8004d7a:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8004de4 <HAL_TIM_PeriodElapsedCallback+0x298>
 8004d7e:	481a      	ldr	r0, [pc, #104]	@ (8004de8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8004d80:	f7fc fa96 	bl	80012b0 <MDXX_set_range>
			MDXX_set_range(&revolute_motor, 2000, 0);
 8004d84:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8004de0 <HAL_TIM_PeriodElapsedCallback+0x294>
 8004d88:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8004de4 <HAL_TIM_PeriodElapsedCallback+0x298>
 8004d8c:	4817      	ldr	r0, [pc, #92]	@ (8004dec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8004d8e:	f7fc fa8f 	bl	80012b0 <MDXX_set_range>
			break;
 8004d92:	e034      	b.n	8004dfe <HAL_TIM_PeriodElapsedCallback+0x2b2>
 8004d94:	200018bc 	.word	0x200018bc
 8004d98:	20000644 	.word	0x20000644
 8004d9c:	2000052c 	.word	0x2000052c
 8004da0:	20000060 	.word	0x20000060
 8004da4:	20000528 	.word	0x20000528
 8004da8:	20000a04 	.word	0x20000a04
 8004dac:	200000c0 	.word	0x200000c0
 8004db0:	20000524 	.word	0x20000524
 8004db4:	200006a0 	.word	0x200006a0
 8004db8:	20000584 	.word	0x20000584
 8004dbc:	20000000 	.word	0x20000000
 8004dc0:	20000580 	.word	0x20000580
 8004dc4:	20000d84 	.word	0x20000d84
 8004dc8:	2000057c 	.word	0x2000057c
 8004dcc:	2000162c 	.word	0x2000162c
 8004dd0:	200005aa 	.word	0x200005aa
 8004dd4:	20000504 	.word	0x20000504
 8004dd8:	2000055c 	.word	0x2000055c
 8004ddc:	200002e8 	.word	0x200002e8
 8004de0:	00000000 	.word	0x00000000
 8004de4:	44fa0000 	.word	0x44fa0000
 8004de8:	200005ac 	.word	0x200005ac
 8004dec:	200005f8 	.word	0x200005f8
 8004df0:	200005a9 	.word	0x200005a9
 8004df4:	2000050c 	.word	0x2000050c
 8004df8:	20000564 	.word	0x20000564
			break;
 8004dfc:	bf00      	nop
		}

		registerFrame[R_Axis_Actual_Position].U16 = prismatic_encoder.mm * 10.0;
 8004dfe:	4b43      	ldr	r3, [pc, #268]	@ (8004f0c <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7fb fb6c 	bl	80004e0 <__aeabi_f2d>
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	4b40      	ldr	r3, [pc, #256]	@ (8004f10 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004e0e:	f7fb fbbf 	bl	8000590 <__aeabi_dmul>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4610      	mov	r0, r2
 8004e18:	4619      	mov	r1, r3
 8004e1a:	f7fb fe7b 	bl	8000b14 <__aeabi_d2uiz>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	4b3c      	ldr	r3, [pc, #240]	@ (8004f14 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8004e24:	845a      	strh	r2, [r3, #34]	@ 0x22
		registerFrame[Theta_Axis_Actual_Position].U16 = revolute_encoder.rads
 8004e26:	4b3c      	ldr	r3, [pc, #240]	@ (8004f18 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fb fb58 	bl	80004e0 <__aeabi_f2d>
				* 10.0;
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	4b36      	ldr	r3, [pc, #216]	@ (8004f10 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004e36:	f7fb fbab 	bl	8000590 <__aeabi_dmul>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	460b      	mov	r3, r1
		registerFrame[Theta_Axis_Actual_Position].U16 = revolute_encoder.rads
 8004e3e:	4610      	mov	r0, r2
 8004e40:	4619      	mov	r1, r3
 8004e42:	f7fb fe67 	bl	8000b14 <__aeabi_d2uiz>
 8004e46:	4603      	mov	r3, r0
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	4b32      	ldr	r3, [pc, #200]	@ (8004f14 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8004e4c:	849a      	strh	r2, [r3, #36]	@ 0x24
		registerFrame[R_Axis_Actual_Speed].U16 = pris_kal_filt * 10.0;
 8004e4e:	4b33      	ldr	r3, [pc, #204]	@ (8004f1c <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fb fb44 	bl	80004e0 <__aeabi_f2d>
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8004f10 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004e5e:	f7fb fb97 	bl	8000590 <__aeabi_dmul>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4610      	mov	r0, r2
 8004e68:	4619      	mov	r1, r3
 8004e6a:	f7fb fe53 	bl	8000b14 <__aeabi_d2uiz>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	4b28      	ldr	r3, [pc, #160]	@ (8004f14 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8004e74:	84da      	strh	r2, [r3, #38]	@ 0x26
		registerFrame[Theta_Axis_Actual_Speed].U16 = rev_kal_filt * 10.0;
 8004e76:	4b2a      	ldr	r3, [pc, #168]	@ (8004f20 <HAL_TIM_PeriodElapsedCallback+0x3d4>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fb fb30 	bl	80004e0 <__aeabi_f2d>
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	4b22      	ldr	r3, [pc, #136]	@ (8004f10 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004e86:	f7fb fb83 	bl	8000590 <__aeabi_dmul>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	f7fb fe3f 	bl	8000b14 <__aeabi_d2uiz>
 8004e96:	4603      	mov	r3, r0
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004f14 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8004e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
		registerFrame[R_Axis_Acceleration].U16 = prismatic_encoder.mmpss * 10.0;
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004f0c <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8004ea0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fb fb1c 	bl	80004e0 <__aeabi_f2d>
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	4b18      	ldr	r3, [pc, #96]	@ (8004f10 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004eae:	f7fb fb6f 	bl	8000590 <__aeabi_dmul>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f7fb fe2b 	bl	8000b14 <__aeabi_d2uiz>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	4b14      	ldr	r3, [pc, #80]	@ (8004f14 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8004ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
		registerFrame[Theta_Axis_Acceleration].U16 = revolute_encoder.radpss
 8004ec6:	4b14      	ldr	r3, [pc, #80]	@ (8004f18 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fb fb08 	bl	80004e0 <__aeabi_f2d>
				* 10.0;
 8004ed0:	f04f 0200 	mov.w	r2, #0
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f10 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8004ed6:	f7fb fb5b 	bl	8000590 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
		registerFrame[Theta_Axis_Acceleration].U16 = revolute_encoder.radpss
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f7fb fe17 	bl	8000b14 <__aeabi_d2uiz>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	4b0a      	ldr	r3, [pc, #40]	@ (8004f14 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8004eec:	859a      	strh	r2, [r3, #44]	@ 0x2c

		if (rs_current_state == RS_IDLE) {
 8004eee:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d105      	bne.n	8004f02 <HAL_TIM_PeriodElapsedCallback+0x3b6>
			// If move is done, reset status registers
			registerFrame[BaseSystem_Status].U16 = 0;
 8004ef6:	4b07      	ldr	r3, [pc, #28]	@ (8004f14 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	805a      	strh	r2, [r3, #2]
			registerFrame[R_Theta_Status].U16 = 0;
 8004efc:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	841a      	strh	r2, [r3, #32]
		}
	}
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000644 	.word	0x20000644
 8004f10:	40240000 	.word	0x40240000
 8004f14:	2000162c 	.word	0x2000162c
 8004f18:	200006a0 	.word	0x200006a0
 8004f1c:	20000524 	.word	0x20000524
 8004f20:	2000057c 	.word	0x2000057c
 8004f24:	200002e8 	.word	0x200002e8

08004f28 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f2c:	b672      	cpsid	i
}
 8004f2e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004f30:	bf00      	nop
 8004f32:	e7fd      	b.n	8004f30 <Error_Handler+0x8>

08004f34 <plotter_begin>:
float joystick_y = 0.0f;
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, up_photo, low_photo, up_lim, low_lim;
void plotter_begin() {
 8004f34:	b590      	push	{r4, r7, lr}
 8004f36:	ed2d 8b02 	vpush	{d8}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	48c8      	ldr	r0, [pc, #800]	@ (8005264 <plotter_begin+0x330>)
 8004f42:	f000 fbad 	bl	80056a0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8004f46:	eddf 2ac8 	vldr	s5, [pc, #800]	@ 8005268 <plotter_begin+0x334>
 8004f4a:	ed9f 2ac8 	vldr	s4, [pc, #800]	@ 800526c <plotter_begin+0x338>
 8004f4e:	eddf 1ac8 	vldr	s3, [pc, #800]	@ 8005270 <plotter_begin+0x33c>
 8004f52:	ed9f 1ac7 	vldr	s2, [pc, #796]	@ 8005270 <plotter_begin+0x33c>
 8004f56:	eddf 0ac7 	vldr	s1, [pc, #796]	@ 8005274 <plotter_begin+0x340>
 8004f5a:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 8005268 <plotter_begin+0x334>
 8004f5e:	48c1      	ldr	r0, [pc, #772]	@ (8005264 <plotter_begin+0x330>)
 8004f60:	f000 fbfc 	bl	800575c <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8004f64:	2102      	movs	r1, #2
 8004f66:	48c4      	ldr	r0, [pc, #784]	@ (8005278 <plotter_begin+0x344>)
 8004f68:	f000 fb9a 	bl	80056a0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8004f6c:	ed9f 3abe 	vldr	s6, [pc, #760]	@ 8005268 <plotter_begin+0x334>
 8004f70:	eddf 2abe 	vldr	s5, [pc, #760]	@ 800526c <plotter_begin+0x338>
 8004f74:	ed9f 2abe 	vldr	s4, [pc, #760]	@ 8005270 <plotter_begin+0x33c>
 8004f78:	eddf 1abd 	vldr	s3, [pc, #756]	@ 8005270 <plotter_begin+0x33c>
 8004f7c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004f80:	eddf 0abc 	vldr	s1, [pc, #752]	@ 8005274 <plotter_begin+0x340>
 8004f84:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 8005268 <plotter_begin+0x334>
 8004f88:	48bb      	ldr	r0, [pc, #748]	@ (8005278 <plotter_begin+0x344>)
 8004f8a:	f000 fc12 	bl	80057b2 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8004f8e:	2100      	movs	r1, #0
 8004f90:	48ba      	ldr	r0, [pc, #744]	@ (800527c <plotter_begin+0x348>)
 8004f92:	f000 fb85 	bl	80056a0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8004f96:	eef3 2a09 	vmov.f32	s5, #57	@ 0x41c80000  25.0
 8004f9a:	eebb 2a09 	vmov.f32	s4, #185	@ 0xc1c80000 -25.0
 8004f9e:	eddf 1ab4 	vldr	s3, [pc, #720]	@ 8005270 <plotter_begin+0x33c>
 8004fa2:	ed9f 1ab3 	vldr	s2, [pc, #716]	@ 8005270 <plotter_begin+0x33c>
 8004fa6:	eddf 0ab3 	vldr	s1, [pc, #716]	@ 8005274 <plotter_begin+0x340>
 8004faa:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004fae:	48b3      	ldr	r0, [pc, #716]	@ (800527c <plotter_begin+0x348>)
 8004fb0:	f000 fbd4 	bl	800575c <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	48b2      	ldr	r0, [pc, #712]	@ (8005280 <plotter_begin+0x34c>)
 8004fb8:	f000 fb72 	bl	80056a0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8004fbc:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8004fc0:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8004fc4:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 8005270 <plotter_begin+0x33c>
 8004fc8:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 8005270 <plotter_begin+0x33c>
 8004fcc:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004fd0:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 8005274 <plotter_begin+0x340>
 8004fd4:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004fd8:	48a9      	ldr	r0, [pc, #676]	@ (8005280 <plotter_begin+0x34c>)
 8004fda:	f000 fbea 	bl	80057b2 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8004fde:	2100      	movs	r1, #0
 8004fe0:	48a8      	ldr	r0, [pc, #672]	@ (8005284 <plotter_begin+0x350>)
 8004fe2:	f000 fb5d 	bl	80056a0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8004fe6:	4ba8      	ldr	r3, [pc, #672]	@ (8005288 <plotter_begin+0x354>)
 8004fe8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7fb fdb0 	bl	8000b54 <__aeabi_d2f>
 8004ff4:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8004ff6:	4ba4      	ldr	r3, [pc, #656]	@ (8005288 <plotter_begin+0x354>)
 8004ff8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	f7fb fda8 	bl	8000b54 <__aeabi_d2f>
 8005004:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 800500e:	4b9e      	ldr	r3, [pc, #632]	@ (8005288 <plotter_begin+0x354>)
 8005010:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005014:	4610      	mov	r0, r2
 8005016:	4619      	mov	r1, r3
 8005018:	f7fb fd9c 	bl	8000b54 <__aeabi_d2f>
 800501c:	4603      	mov	r3, r0
 800501e:	ee02 3a90 	vmov	s5, r3
 8005022:	eeb0 2a48 	vmov.f32	s4, s16
 8005026:	eddf 1a92 	vldr	s3, [pc, #584]	@ 8005270 <plotter_begin+0x33c>
 800502a:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 8005270 <plotter_begin+0x33c>
 800502e:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8005274 <plotter_begin+0x340>
 8005032:	ee00 4a10 	vmov	s0, r4
 8005036:	4893      	ldr	r0, [pc, #588]	@ (8005284 <plotter_begin+0x350>)
 8005038:	f000 fb90 	bl	800575c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 800503c:	2102      	movs	r1, #2
 800503e:	4893      	ldr	r0, [pc, #588]	@ (800528c <plotter_begin+0x358>)
 8005040:	f000 fb2e 	bl	80056a0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005044:	4b90      	ldr	r3, [pc, #576]	@ (8005288 <plotter_begin+0x354>)
 8005046:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800504a:	4610      	mov	r0, r2
 800504c:	4619      	mov	r1, r3
 800504e:	f7fb fd81 	bl	8000b54 <__aeabi_d2f>
 8005052:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8005054:	4b8c      	ldr	r3, [pc, #560]	@ (8005288 <plotter_begin+0x354>)
 8005056:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800505a:	4610      	mov	r0, r2
 800505c:	4619      	mov	r1, r3
 800505e:	f7fb fd79 	bl	8000b54 <__aeabi_d2f>
 8005062:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005064:	ee07 3a90 	vmov	s15, r3
 8005068:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800506c:	4b86      	ldr	r3, [pc, #536]	@ (8005288 <plotter_begin+0x354>)
 800506e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8005072:	4610      	mov	r0, r2
 8005074:	4619      	mov	r1, r3
 8005076:	f7fb fd6d 	bl	8000b54 <__aeabi_d2f>
 800507a:	4603      	mov	r3, r0
 800507c:	ee03 3a10 	vmov	s6, r3
 8005080:	eef0 2a48 	vmov.f32	s5, s16
 8005084:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 8005270 <plotter_begin+0x33c>
 8005088:	eddf 1a79 	vldr	s3, [pc, #484]	@ 8005270 <plotter_begin+0x33c>
 800508c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005090:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8005274 <plotter_begin+0x340>
 8005094:	ee00 4a10 	vmov	s0, r4
 8005098:	487c      	ldr	r0, [pc, #496]	@ (800528c <plotter_begin+0x358>)
 800509a:	f000 fb8a 	bl	80057b2 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 800509e:	2100      	movs	r1, #0
 80050a0:	487b      	ldr	r0, [pc, #492]	@ (8005290 <plotter_begin+0x35c>)
 80050a2:	f000 fafd 	bl	80056a0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80050a6:	4b7b      	ldr	r3, [pc, #492]	@ (8005294 <plotter_begin+0x360>)
 80050a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	f7fb fd50 	bl	8000b54 <__aeabi_d2f>
 80050b4:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 80050b6:	4b77      	ldr	r3, [pc, #476]	@ (8005294 <plotter_begin+0x360>)
 80050b8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80050bc:	4610      	mov	r0, r2
 80050be:	4619      	mov	r1, r3
 80050c0:	f7fb fd48 	bl	8000b54 <__aeabi_d2f>
 80050c4:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80050ce:	4b71      	ldr	r3, [pc, #452]	@ (8005294 <plotter_begin+0x360>)
 80050d0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80050d4:	4610      	mov	r0, r2
 80050d6:	4619      	mov	r1, r3
 80050d8:	f7fb fd3c 	bl	8000b54 <__aeabi_d2f>
 80050dc:	4603      	mov	r3, r0
 80050de:	ee02 3a90 	vmov	s5, r3
 80050e2:	eeb0 2a48 	vmov.f32	s4, s16
 80050e6:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8005270 <plotter_begin+0x33c>
 80050ea:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8005270 <plotter_begin+0x33c>
 80050ee:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8005274 <plotter_begin+0x340>
 80050f2:	ee00 4a10 	vmov	s0, r4
 80050f6:	4866      	ldr	r0, [pc, #408]	@ (8005290 <plotter_begin+0x35c>)
 80050f8:	f000 fb30 	bl	800575c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80050fc:	2102      	movs	r1, #2
 80050fe:	4866      	ldr	r0, [pc, #408]	@ (8005298 <plotter_begin+0x364>)
 8005100:	f000 face 	bl	80056a0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005104:	4b63      	ldr	r3, [pc, #396]	@ (8005294 <plotter_begin+0x360>)
 8005106:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800510a:	4610      	mov	r0, r2
 800510c:	4619      	mov	r1, r3
 800510e:	f7fb fd21 	bl	8000b54 <__aeabi_d2f>
 8005112:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8005114:	4b5f      	ldr	r3, [pc, #380]	@ (8005294 <plotter_begin+0x360>)
 8005116:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	f7fb fd19 	bl	8000b54 <__aeabi_d2f>
 8005122:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800512c:	4b59      	ldr	r3, [pc, #356]	@ (8005294 <plotter_begin+0x360>)
 800512e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8005132:	4610      	mov	r0, r2
 8005134:	4619      	mov	r1, r3
 8005136:	f7fb fd0d 	bl	8000b54 <__aeabi_d2f>
 800513a:	4603      	mov	r3, r0
 800513c:	ee03 3a10 	vmov	s6, r3
 8005140:	eef0 2a48 	vmov.f32	s5, s16
 8005144:	ed9f 2a4a 	vldr	s4, [pc, #296]	@ 8005270 <plotter_begin+0x33c>
 8005148:	eddf 1a49 	vldr	s3, [pc, #292]	@ 8005270 <plotter_begin+0x33c>
 800514c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8005150:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8005274 <plotter_begin+0x340>
 8005154:	ee00 4a10 	vmov	s0, r4
 8005158:	484f      	ldr	r0, [pc, #316]	@ (8005298 <plotter_begin+0x364>)
 800515a:	f000 fb2a 	bl	80057b2 <SIGNAL_config_square>

	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 800515e:	4b4a      	ldr	r3, [pc, #296]	@ (8005288 <plotter_begin+0x354>)
 8005160:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius;
 8005164:	4b4d      	ldr	r3, [pc, #308]	@ (800529c <plotter_begin+0x368>)
 8005166:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800516a:	f7fb fa11 	bl	8000590 <__aeabi_dmul>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8005172:	4945      	ldr	r1, [pc, #276]	@ (8005288 <plotter_begin+0x354>)
 8005174:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 8005178:	4b43      	ldr	r3, [pc, #268]	@ (8005288 <plotter_begin+0x354>)
 800517a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	4b47      	ldr	r3, [pc, #284]	@ (80052a0 <plotter_begin+0x36c>)
 8005184:	f7fb fa04 	bl	8000590 <__aeabi_dmul>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	493e      	ldr	r1, [pc, #248]	@ (8005288 <plotter_begin+0x354>)
 800518e:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0);
 8005192:	4b42      	ldr	r3, [pc, #264]	@ (800529c <plotter_begin+0x368>)
 8005194:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	f7fb f842 	bl	8000224 <__adddf3>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	f7fb fcd4 	bl	8000b54 <__aeabi_d2f>
 80051ac:	4603      	mov	r3, r0
 80051ae:	ee00 3a90 	vmov	s1, r3
 80051b2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80051b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80051be:	4939      	ldr	r1, [pc, #228]	@ (80052a4 <plotter_begin+0x370>)
 80051c0:	4839      	ldr	r0, [pc, #228]	@ (80052a8 <plotter_begin+0x374>)
 80051c2:	f7fd f897 	bl	80022f4 <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 80051c6:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005270 <plotter_begin+0x33c>
 80051ca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80051ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80051d6:	4935      	ldr	r1, [pc, #212]	@ (80052ac <plotter_begin+0x378>)
 80051d8:	4835      	ldr	r0, [pc, #212]	@ (80052b0 <plotter_begin+0x37c>)
 80051da:	f7fd f88b 	bl	80022f4 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80051de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051e8:	2204      	movs	r2, #4
 80051ea:	4932      	ldr	r1, [pc, #200]	@ (80052b4 <plotter_begin+0x380>)
 80051ec:	4832      	ldr	r0, [pc, #200]	@ (80052b8 <plotter_begin+0x384>)
 80051ee:	f7fc f83a 	bl	8001266 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80051f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	4b30      	ldr	r3, [pc, #192]	@ (80052bc <plotter_begin+0x388>)
 80051fa:	2200      	movs	r2, #0
 80051fc:	492d      	ldr	r1, [pc, #180]	@ (80052b4 <plotter_begin+0x380>)
 80051fe:	4830      	ldr	r0, [pc, #192]	@ (80052c0 <plotter_begin+0x38c>)
 8005200:	f7fc f831 	bl	8001266 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8005204:	220c      	movs	r2, #12
 8005206:	492f      	ldr	r1, [pc, #188]	@ (80052c4 <plotter_begin+0x390>)
 8005208:	482f      	ldr	r0, [pc, #188]	@ (80052c8 <plotter_begin+0x394>)
 800520a:	f7fc fe45 	bl	8001e98 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 800520e:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8005270 <plotter_begin+0x33c>
 8005212:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80052cc <plotter_begin+0x398>
 8005216:	4828      	ldr	r0, [pc, #160]	@ (80052b8 <plotter_begin+0x384>)
 8005218:	f7fc f84a 	bl	80012b0 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 800521c:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8005270 <plotter_begin+0x33c>
 8005220:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80052cc <plotter_begin+0x398>
 8005224:	4826      	ldr	r0, [pc, #152]	@ (80052c0 <plotter_begin+0x38c>)
 8005226:	f7fc f843 	bl	80012b0 <MDXX_set_range>
	plotter_pen_up();
 800522a:	f000 fa19 	bl	8005660 <plotter_pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 500, 5, 70,
			ZGX45RGG_400RPM_Constant.qd_max);
 800522e:	4b16      	ldr	r3, [pc, #88]	@ (8005288 <plotter_begin+0x354>)
 8005230:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&prismatic_position_pid, 500, 5, 70,
 8005234:	4610      	mov	r0, r2
 8005236:	4619      	mov	r1, r3
 8005238:	f7fb fc8c 	bl	8000b54 <__aeabi_d2f>
 800523c:	4603      	mov	r3, r0
 800523e:	ee01 3a90 	vmov	s3, r3
 8005242:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 80052d0 <plotter_begin+0x39c>
 8005246:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800524a:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 80052dc <plotter_begin+0x3a8>
 800524e:	4821      	ldr	r0, [pc, #132]	@ (80052d4 <plotter_begin+0x3a0>)
 8005250:	f7fb ff4d 	bl	80010ee <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 7, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8005254:	4b0c      	ldr	r3, [pc, #48]	@ (8005288 <plotter_begin+0x354>)
 8005256:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 7, 0,
 800525a:	4610      	mov	r0, r2
 800525c:	4619      	mov	r1, r3
 800525e:	f7fb fc79 	bl	8000b54 <__aeabi_d2f>
 8005262:	e03d      	b.n	80052e0 <plotter_begin+0x3ac>
 8005264:	200007b4 	.word	0x200007b4
 8005268:	477fff00 	.word	0x477fff00
 800526c:	c77fff00 	.word	0xc77fff00
 8005270:	00000000 	.word	0x00000000
 8005274:	3dcccccd 	.word	0x3dcccccd
 8005278:	200007f8 	.word	0x200007f8
 800527c:	2000083c 	.word	0x2000083c
 8005280:	20000880 	.word	0x20000880
 8005284:	200008c4 	.word	0x200008c4
 8005288:	20000060 	.word	0x20000060
 800528c:	20000908 	.word	0x20000908
 8005290:	2000094c 	.word	0x2000094c
 8005294:	20000000 	.word	0x20000000
 8005298:	20000990 	.word	0x20000990
 800529c:	200000c0 	.word	0x200000c0
 80052a0:	3fe00000 	.word	0x3fe00000
 80052a4:	20001a54 	.word	0x20001a54
 80052a8:	20000644 	.word	0x20000644
 80052ac:	20001988 	.word	0x20001988
 80052b0:	200006a0 	.word	0x200006a0
 80052b4:	20001bec 	.word	0x20001bec
 80052b8:	200005ac 	.word	0x200005ac
 80052bc:	48000800 	.word	0x48000800
 80052c0:	200005f8 	.word	0x200005f8
 80052c4:	200017f0 	.word	0x200017f0
 80052c8:	20000784 	.word	0x20000784
 80052cc:	44fa0000 	.word	0x44fa0000
 80052d0:	428c0000 	.word	0x428c0000
 80052d4:	200006fc 	.word	0x200006fc
 80052d8:	00000000 	.word	0x00000000
 80052dc:	43fa0000 	.word	0x43fa0000
 80052e0:	4603      	mov	r3, r0
 80052e2:	ee01 3a90 	vmov	s3, r3
 80052e6:	ed1f 1a04 	vldr	s2, [pc, #-16]	@ 80052d8 <plotter_begin+0x3a4>
 80052ea:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 80052ee:	ed1f 0a05 	vldr	s0, [pc, #-20]	@ 80052dc <plotter_begin+0x3a8>
 80052f2:	4847      	ldr	r0, [pc, #284]	@ (8005410 <plotter_begin+0x4dc>)
 80052f4:	f7fb fefb 	bl	80010ee <PID_CONTROLLER_Init>

	//unit test
	//25 1e-8 0
	//2000 80 0
	PID_CONTROLLER_Init(&revolute_position_pid, 500, 1e-9, 72,
			ZGX45RGG_150RPM_Constant.qd_max);
 80052f8:	4b46      	ldr	r3, [pc, #280]	@ (8005414 <plotter_begin+0x4e0>)
 80052fa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 500, 1e-9, 72,
 80052fe:	4610      	mov	r0, r2
 8005300:	4619      	mov	r1, r3
 8005302:	f7fb fc27 	bl	8000b54 <__aeabi_d2f>
 8005306:	4603      	mov	r3, r0
 8005308:	ee01 3a90 	vmov	s3, r3
 800530c:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8005418 <plotter_begin+0x4e4>
 8005310:	eddf 0a42 	vldr	s1, [pc, #264]	@ 800541c <plotter_begin+0x4e8>
 8005314:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8005420 <plotter_begin+0x4ec>
 8005318:	4842      	ldr	r0, [pc, #264]	@ (8005424 <plotter_begin+0x4f0>)
 800531a:	f7fb fee8 	bl	80010ee <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 20, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 800531e:	4b3d      	ldr	r3, [pc, #244]	@ (8005414 <plotter_begin+0x4e0>)
 8005320:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 20, 0,
 8005324:	4610      	mov	r0, r2
 8005326:	4619      	mov	r1, r3
 8005328:	f7fb fc14 	bl	8000b54 <__aeabi_d2f>
 800532c:	4603      	mov	r3, r0
 800532e:	ee01 3a90 	vmov	s3, r3
 8005332:	ed9f 1a3d 	vldr	s2, [pc, #244]	@ 8005428 <plotter_begin+0x4f4>
 8005336:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 800533a:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 800542c <plotter_begin+0x4f8>
 800533e:	483c      	ldr	r0, [pc, #240]	@ (8005430 <plotter_begin+0x4fc>)
 8005340:	f7fb fed5 	bl	80010ee <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8005344:	4933      	ldr	r1, [pc, #204]	@ (8005414 <plotter_begin+0x4e0>)
 8005346:	483b      	ldr	r0, [pc, #236]	@ (8005434 <plotter_begin+0x500>)
 8005348:	f7fc f88c 	bl	8001464 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 800534c:	493a      	ldr	r1, [pc, #232]	@ (8005438 <plotter_begin+0x504>)
 800534e:	483b      	ldr	r0, [pc, #236]	@ (800543c <plotter_begin+0x508>)
 8005350:	f7fc f8a8 	bl	80014a4 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8005354:	4a3a      	ldr	r2, [pc, #232]	@ (8005440 <plotter_begin+0x50c>)
 8005356:	492f      	ldr	r1, [pc, #188]	@ (8005414 <plotter_begin+0x4e0>)
 8005358:	483a      	ldr	r0, [pc, #232]	@ (8005444 <plotter_begin+0x510>)
 800535a:	f7fc f891 	bl	8001480 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 800535e:	4a38      	ldr	r2, [pc, #224]	@ (8005440 <plotter_begin+0x50c>)
 8005360:	4935      	ldr	r1, [pc, #212]	@ (8005438 <plotter_begin+0x504>)
 8005362:	4839      	ldr	r0, [pc, #228]	@ (8005448 <plotter_begin+0x514>)
 8005364:	f7fc f8ac 	bl	80014c0 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE,
 8005368:	2304      	movs	r3, #4
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	eddf 0a37 	vldr	s1, [pc, #220]	@ 800544c <plotter_begin+0x518>
 8005370:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8005450 <plotter_begin+0x51c>
 8005374:	2328      	movs	r3, #40	@ 0x28
 8005376:	4a37      	ldr	r2, [pc, #220]	@ (8005454 <plotter_begin+0x520>)
 8005378:	4937      	ldr	r1, [pc, #220]	@ (8005458 <plotter_begin+0x524>)
 800537a:	4838      	ldr	r0, [pc, #224]	@ (800545c <plotter_begin+0x528>)
 800537c:	f7fb fdd0 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, 3.3f, 4095.0f);
	ADC_DMA_Start(&adc_dma);
 8005380:	4836      	ldr	r0, [pc, #216]	@ (800545c <plotter_begin+0x528>)
 8005382:	f7fb fe02 	bl	8000f8a <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8005386:	eddf 0a29 	vldr	s1, [pc, #164]	@ 800542c <plotter_begin+0x4f8>
 800538a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800538e:	211f      	movs	r1, #31
 8005390:	4833      	ldr	r0, [pc, #204]	@ (8005460 <plotter_begin+0x52c>)
 8005392:	f7fc f8a7 	bl	80014e4 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8005396:	eddf 0a25 	vldr	s1, [pc, #148]	@ 800542c <plotter_begin+0x4f8>
 800539a:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800539e:	211f      	movs	r1, #31
 80053a0:	4830      	ldr	r0, [pc, #192]	@ (8005464 <plotter_begin+0x530>)
 80053a2:	f7fc f89f 	bl	80014e4 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80053a6:	eddf 0a21 	vldr	s1, [pc, #132]	@ 800542c <plotter_begin+0x4f8>
 80053aa:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80053ae:	211f      	movs	r1, #31
 80053b0:	482d      	ldr	r0, [pc, #180]	@ (8005468 <plotter_begin+0x534>)
 80053b2:	f7fc f897 	bl	80014e4 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80053b6:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800542c <plotter_begin+0x4f8>
 80053ba:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80053be:	211f      	movs	r1, #31
 80053c0:	482a      	ldr	r0, [pc, #168]	@ (800546c <plotter_begin+0x538>)
 80053c2:	f7fc f88f 	bl	80014e4 <FIR_init>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 80053c6:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005470 <plotter_begin+0x53c>
 80053ca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80053ce:	4a29      	ldr	r2, [pc, #164]	@ (8005474 <plotter_begin+0x540>)
 80053d0:	4929      	ldr	r1, [pc, #164]	@ (8005478 <plotter_begin+0x544>)
 80053d2:	482a      	ldr	r0, [pc, #168]	@ (800547c <plotter_begin+0x548>)
 80053d4:	f7fd ffb6 	bl	8003344 <Kalman_Start>
	REVOLUTE_R);
	Kalman_Start(&prismatic_kalman, prismatic_A, prismatic_B, PRISMATIC_Q,
 80053d8:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8005470 <plotter_begin+0x53c>
 80053dc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80053e0:	4a27      	ldr	r2, [pc, #156]	@ (8005480 <plotter_begin+0x54c>)
 80053e2:	4928      	ldr	r1, [pc, #160]	@ (8005484 <plotter_begin+0x550>)
 80053e4:	4828      	ldr	r0, [pc, #160]	@ (8005488 <plotter_begin+0x554>)
 80053e6:	f7fd ffad 	bl	8003344 <Kalman_Start>
	PRISMATIC_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80053ea:	23c8      	movs	r3, #200	@ 0xc8
 80053ec:	9301      	str	r3, [sp, #4]
 80053ee:	2315      	movs	r3, #21
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	4b26      	ldr	r3, [pc, #152]	@ (800548c <plotter_begin+0x558>)
 80053f4:	4a26      	ldr	r2, [pc, #152]	@ (8005490 <plotter_begin+0x55c>)
 80053f6:	4927      	ldr	r1, [pc, #156]	@ (8005494 <plotter_begin+0x560>)
 80053f8:	4827      	ldr	r0, [pc, #156]	@ (8005498 <plotter_begin+0x564>)
 80053fa:	f7fc fa45 	bl	8001888 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80053fe:	4827      	ldr	r0, [pc, #156]	@ (800549c <plotter_begin+0x568>)
 8005400:	f004 fd98 	bl	8009f34 <HAL_TIM_Base_Start_IT>
}
 8005404:	bf00      	nop
 8005406:	3704      	adds	r7, #4
 8005408:	46bd      	mov	sp, r7
 800540a:	ecbd 8b02 	vpop	{d8}
 800540e:	bd90      	pop	{r4, r7, pc}
 8005410:	20000718 	.word	0x20000718
 8005414:	20000000 	.word	0x20000000
 8005418:	42900000 	.word	0x42900000
 800541c:	3089705f 	.word	0x3089705f
 8005420:	43fa0000 	.word	0x43fa0000
 8005424:	20000734 	.word	0x20000734
 8005428:	00000000 	.word	0x00000000
 800542c:	447a0000 	.word	0x447a0000
 8005430:	20000750 	.word	0x20000750
 8005434:	20000778 	.word	0x20000778
 8005438:	20000060 	.word	0x20000060
 800543c:	2000076c 	.word	0x2000076c
 8005440:	200000c0 	.word	0x200000c0
 8005444:	2000077c 	.word	0x2000077c
 8005448:	20000770 	.word	0x20000770
 800544c:	457ff000 	.word	0x457ff000
 8005450:	40533333 	.word	0x40533333
 8005454:	20001104 	.word	0x20001104
 8005458:	20000410 	.word	0x20000410
 800545c:	2000079c 	.word	0x2000079c
 8005460:	200009e0 	.word	0x200009e0
 8005464:	200009d4 	.word	0x200009d4
 8005468:	200009f8 	.word	0x200009f8
 800546c:	200009ec 	.word	0x200009ec
 8005470:	3d4ccccd 	.word	0x3d4ccccd
 8005474:	20000384 	.word	0x20000384
 8005478:	20000344 	.word	0x20000344
 800547c:	20000d84 	.word	0x20000d84
 8005480:	20000334 	.word	0x20000334
 8005484:	200002f4 	.word	0x200002f4
 8005488:	20000a04 	.word	0x20000a04
 800548c:	2000162c 	.word	0x2000162c
 8005490:	20001cb8 	.word	0x20001cb8
 8005494:	20001e50 	.word	0x20001e50
 8005498:	20001154 	.word	0x20001154
 800549c:	200018bc 	.word	0x200018bc

080054a0 <plotter_reset>:

void plotter_reset() {
 80054a0:	b580      	push	{r7, lr}
 80054a2:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 80054a4:	4803      	ldr	r0, [pc, #12]	@ (80054b4 <plotter_reset+0x14>)
 80054a6:	f7fd f9a7 	bl	80027f8 <QEI_reset>
	QEI_reset(&revolute_encoder);
 80054aa:	4803      	ldr	r0, [pc, #12]	@ (80054b8 <plotter_reset+0x18>)
 80054ac:	f7fd f9a4 	bl	80027f8 <QEI_reset>
}
 80054b0:	bf00      	nop
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	20000644 	.word	0x20000644
 80054b8:	200006a0 	.word	0x200006a0

080054bc <plotter_update_sensors>:

void plotter_update_sensors() {
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_X_CHANNEL, 1.0);
 80054c0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80054c4:	2106      	movs	r1, #6
 80054c6:	4854      	ldr	r0, [pc, #336]	@ (8005618 <plotter_update_sensors+0x15c>)
 80054c8:	f7fb fdba 	bl	8001040 <ADC_DMA_GetJoystick>
 80054cc:	eef0 7a40 	vmov.f32	s15, s0
 80054d0:	4b52      	ldr	r3, [pc, #328]	@ (800561c <plotter_update_sensors+0x160>)
 80054d2:	edc3 7a00 	vstr	s15, [r3]
	joystick_y = ADC_DMA_GetJoystick(&adc_dma, JOYSTICK_Y_CHANNEL, 1.0);
 80054d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80054da:	2107      	movs	r1, #7
 80054dc:	484e      	ldr	r0, [pc, #312]	@ (8005618 <plotter_update_sensors+0x15c>)
 80054de:	f7fb fdaf 	bl	8001040 <ADC_DMA_GetJoystick>
 80054e2:	eef0 7a40 	vmov.f32	s15, s0
 80054e6:	4b4e      	ldr	r3, [pc, #312]	@ (8005620 <plotter_update_sensors+0x164>)
 80054e8:	edc3 7a00 	vstr	s15, [r3]

	b1 = !HAL_GPIO_ReadPin(START_GPIO_Port, START_Pin);
 80054ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80054f0:	484c      	ldr	r0, [pc, #304]	@ (8005624 <plotter_update_sensors+0x168>)
 80054f2:	f003 fbd3 	bl	8008c9c <HAL_GPIO_ReadPin>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	461a      	mov	r2, r3
 8005504:	4b48      	ldr	r3, [pc, #288]	@ (8005628 <plotter_update_sensors+0x16c>)
 8005506:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(SAVE_GPIO_Port, SAVE_Pin);
 8005508:	2180      	movs	r1, #128	@ 0x80
 800550a:	4848      	ldr	r0, [pc, #288]	@ (800562c <plotter_update_sensors+0x170>)
 800550c:	f003 fbc6 	bl	8008c9c <HAL_GPIO_ReadPin>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	4b44      	ldr	r3, [pc, #272]	@ (8005630 <plotter_update_sensors+0x174>)
 8005520:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(DELETE_GPIO_Port, DELETE_Pin);
 8005522:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005526:	483f      	ldr	r0, [pc, #252]	@ (8005624 <plotter_update_sensors+0x168>)
 8005528:	f003 fbb8 	bl	8008c9c <HAL_GPIO_ReadPin>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	bf0c      	ite	eq
 8005532:	2301      	moveq	r3, #1
 8005534:	2300      	movne	r3, #0
 8005536:	b2db      	uxtb	r3, r3
 8005538:	461a      	mov	r2, r3
 800553a:	4b3e      	ldr	r3, [pc, #248]	@ (8005634 <plotter_update_sensors+0x178>)
 800553c:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(RESET_SYS_GPIO_Port, RESET_SYS_Pin);
 800553e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005542:	4838      	ldr	r0, [pc, #224]	@ (8005624 <plotter_update_sensors+0x168>)
 8005544:	f003 fbaa 	bl	8008c9c <HAL_GPIO_ReadPin>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	bf0c      	ite	eq
 800554e:	2301      	moveq	r3, #1
 8005550:	2300      	movne	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	4b38      	ldr	r3, [pc, #224]	@ (8005638 <plotter_update_sensors+0x17c>)
 8005558:	601a      	str	r2, [r3, #0]

	prox = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800555a:	2120      	movs	r1, #32
 800555c:	4833      	ldr	r0, [pc, #204]	@ (800562c <plotter_update_sensors+0x170>)
 800555e:	f003 fb9d 	bl	8008c9c <HAL_GPIO_ReadPin>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	4b35      	ldr	r3, [pc, #212]	@ (800563c <plotter_update_sensors+0x180>)
 8005568:	601a      	str	r2, [r3, #0]
	up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 800556a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800556e:	482f      	ldr	r0, [pc, #188]	@ (800562c <plotter_update_sensors+0x170>)
 8005570:	f003 fb94 	bl	8008c9c <HAL_GPIO_ReadPin>
 8005574:	4603      	mov	r3, r0
 8005576:	461a      	mov	r2, r3
 8005578:	4b31      	ldr	r3, [pc, #196]	@ (8005640 <plotter_update_sensors+0x184>)
 800557a:	601a      	str	r2, [r3, #0]
	low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 800557c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005580:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005584:	f003 fb8a 	bl	8008c9c <HAL_GPIO_ReadPin>
 8005588:	4603      	mov	r3, r0
 800558a:	461a      	mov	r2, r3
 800558c:	4b2d      	ldr	r3, [pc, #180]	@ (8005644 <plotter_update_sensors+0x188>)
 800558e:	601a      	str	r2, [r3, #0]
	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8005590:	2102      	movs	r1, #2
 8005592:	4826      	ldr	r0, [pc, #152]	@ (800562c <plotter_update_sensors+0x170>)
 8005594:	f003 fb82 	bl	8008c9c <HAL_GPIO_ReadPin>
 8005598:	4603      	mov	r3, r0
 800559a:	461a      	mov	r2, r3
 800559c:	4b2a      	ldr	r3, [pc, #168]	@ (8005648 <plotter_update_sensors+0x18c>)
 800559e:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80055a0:	2104      	movs	r1, #4
 80055a2:	4822      	ldr	r0, [pc, #136]	@ (800562c <plotter_update_sensors+0x170>)
 80055a4:	f003 fb7a 	bl	8008c9c <HAL_GPIO_ReadPin>
 80055a8:	4603      	mov	r3, r0
 80055aa:	461a      	mov	r2, r3
 80055ac:	4b27      	ldr	r3, [pc, #156]	@ (800564c <plotter_update_sensors+0x190>)
 80055ae:	601a      	str	r2, [r3, #0]

	emer = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 80055b0:	2110      	movs	r1, #16
 80055b2:	481e      	ldr	r0, [pc, #120]	@ (800562c <plotter_update_sensors+0x170>)
 80055b4:	f003 fb72 	bl	8008c9c <HAL_GPIO_ReadPin>
 80055b8:	4603      	mov	r3, r0
 80055ba:	461a      	mov	r2, r3
 80055bc:	4b24      	ldr	r3, [pc, #144]	@ (8005650 <plotter_update_sensors+0x194>)
 80055be:	601a      	str	r2, [r3, #0]

	if (up_lim) {
 80055c0:	4b21      	ldr	r3, [pc, #132]	@ (8005648 <plotter_update_sensors+0x18c>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <plotter_update_sensors+0x114>
		servo_state = PEN_UP;
 80055c8:	4b22      	ldr	r3, [pc, #136]	@ (8005654 <plotter_update_sensors+0x198>)
 80055ca:	2202      	movs	r2, #2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	e00a      	b.n	80055e6 <plotter_update_sensors+0x12a>
	} else if (low_lim) {
 80055d0:	4b1e      	ldr	r3, [pc, #120]	@ (800564c <plotter_update_sensors+0x190>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d003      	beq.n	80055e0 <plotter_update_sensors+0x124>
		servo_state = PEN_DOWN;
 80055d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005654 <plotter_update_sensors+0x198>)
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	e002      	b.n	80055e6 <plotter_update_sensors+0x12a>
	} else {
		servo_state = PEN_IDLE;
 80055e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005654 <plotter_update_sensors+0x198>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
	}

	if (up_photo) {
 80055e6:	4b16      	ldr	r3, [pc, #88]	@ (8005640 <plotter_update_sensors+0x184>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <plotter_update_sensors+0x13a>
		prismatic_state = PP_AT_TOP_END_POSITION;
 80055ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005658 <plotter_update_sensors+0x19c>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	e006      	b.n	8005604 <plotter_update_sensors+0x148>
	} else if (low_photo) {
 80055f6:	4b13      	ldr	r3, [pc, #76]	@ (8005644 <plotter_update_sensors+0x188>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <plotter_update_sensors+0x148>
		prismatic_state = PP_AT_BOTTOM_END_POSITION;
 80055fe:	4b16      	ldr	r3, [pc, #88]	@ (8005658 <plotter_update_sensors+0x19c>)
 8005600:	2202      	movs	r2, #2
 8005602:	701a      	strb	r2, [r3, #0]
	}

	if (prox) {
 8005604:	4b0d      	ldr	r3, [pc, #52]	@ (800563c <plotter_update_sensors+0x180>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <plotter_update_sensors+0x156>
		revolute_state = RP_AT_HOME_POSITION;
 800560c:	4b13      	ldr	r3, [pc, #76]	@ (800565c <plotter_update_sensors+0x1a0>)
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
	}

//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}
 8005612:	bf00      	nop
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	2000079c 	.word	0x2000079c
 800561c:	200017bc 	.word	0x200017bc
 8005620:	200017c0 	.word	0x200017c0
 8005624:	48000800 	.word	0x48000800
 8005628:	200017c4 	.word	0x200017c4
 800562c:	48000400 	.word	0x48000400
 8005630:	200017c8 	.word	0x200017c8
 8005634:	200017cc 	.word	0x200017cc
 8005638:	200017d0 	.word	0x200017d0
 800563c:	200017d4 	.word	0x200017d4
 8005640:	200017dc 	.word	0x200017dc
 8005644:	200017e0 	.word	0x200017e0
 8005648:	200017e4 	.word	0x200017e4
 800564c:	200017e8 	.word	0x200017e8
 8005650:	200017d8 	.word	0x200017d8
 8005654:	200005aa 	.word	0x200005aa
 8005658:	200002ee 	.word	0x200002ee
 800565c:	200002ef 	.word	0x200002ef

08005660 <plotter_pen_up>:

void plotter_pen_up() {
 8005660:	b580      	push	{r7, lr}
 8005662:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8005664:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8005668:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8005678 <plotter_pen_up+0x18>
 800566c:	4803      	ldr	r0, [pc, #12]	@ (800567c <plotter_pen_up+0x1c>)
 800566e:	f7fc fc35 	bl	8001edc <PWM_write_duty>
}
 8005672:	bf00      	nop
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	42480000 	.word	0x42480000
 800567c:	20000784 	.word	0x20000784

08005680 <plotter_pen_down>:

void plotter_pen_down() {
 8005680:	b580      	push	{r7, lr}
 8005682:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8005684:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8005688:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8005698 <plotter_pen_down+0x18>
 800568c:	4803      	ldr	r0, [pc, #12]	@ (800569c <plotter_pen_down+0x1c>)
 800568e:	f7fc fc25 	bl	8001edc <PWM_write_duty>
}
 8005692:	bf00      	nop
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	42480000 	.word	0x42480000
 800569c:	20000784 	.word	0x20000784

080056a0 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	78fa      	ldrb	r2, [r7, #3]
 80056b0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80056b8:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80056c0:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f04f 0200 	mov.w	r2, #0
 80056c8:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f04f 0200 	mov.w	r2, #0
 80056d0:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f04f 0200 	mov.w	r2, #0
 80056d8:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005754 <SIGNAL_init+0xb4>)
 80056e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80056ee:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d828      	bhi.n	8005748 <SIGNAL_init+0xa8>
 80056f6:	a201      	add	r2, pc, #4	@ (adr r2, 80056fc <SIGNAL_init+0x5c>)
 80056f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056fc:	08005747 	.word	0x08005747
 8005700:	0800570d 	.word	0x0800570d
 8005704:	0800572b 	.word	0x0800572b
 8005708:	08005735 	.word	0x08005735
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005718:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a0e      	ldr	r2, [pc, #56]	@ (8005758 <SIGNAL_init+0xb8>)
 800571e:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005726:	621a      	str	r2, [r3, #32]
            break;
 8005728:	e00e      	b.n	8005748 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8005730:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8005732:	e009      	b.n	8005748 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005742:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8005744:	e000      	b.n	8005748 <SIGNAL_init+0xa8>
            break;
 8005746:	bf00      	nop
    }
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	bf800000 	.word	0xbf800000
 8005758:	41200000 	.word	0x41200000

0800575c <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 800575c:	b480      	push	{r7}
 800575e:	b089      	sub	sp, #36	@ 0x24
 8005760:	af00      	add	r7, sp, #0
 8005762:	61f8      	str	r0, [r7, #28]
 8005764:	ed87 0a06 	vstr	s0, [r7, #24]
 8005768:	edc7 0a05 	vstr	s1, [r7, #20]
 800576c:	ed87 1a04 	vstr	s2, [r7, #16]
 8005770:	edc7 1a03 	vstr	s3, [r7, #12]
 8005774:	ed87 2a02 	vstr	s4, [r7, #8]
 8005778:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2200      	movs	r2, #0
 8005780:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	68ba      	ldr	r2, [r7, #8]
 800579e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80057a6:	bf00      	nop
 80057a8:	3724      	adds	r7, #36	@ 0x24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 80057b2:	b480      	push	{r7}
 80057b4:	b089      	sub	sp, #36	@ 0x24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	61f8      	str	r0, [r7, #28]
 80057ba:	ed87 0a06 	vstr	s0, [r7, #24]
 80057be:	edc7 0a05 	vstr	s1, [r7, #20]
 80057c2:	ed87 1a04 	vstr	s2, [r7, #16]
 80057c6:	edc7 1a03 	vstr	s3, [r7, #12]
 80057ca:	ed87 2a02 	vstr	s4, [r7, #8]
 80057ce:	edc7 2a01 	vstr	s5, [r7, #4]
 80057d2:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	2202      	movs	r2, #2
 80057da:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005806:	bf00      	nop
 8005808:	3724      	adds	r7, #36	@ 0x24
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800581a:	4b0f      	ldr	r3, [pc, #60]	@ (8005858 <HAL_MspInit+0x44>)
 800581c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800581e:	4a0e      	ldr	r2, [pc, #56]	@ (8005858 <HAL_MspInit+0x44>)
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	6613      	str	r3, [r2, #96]	@ 0x60
 8005826:	4b0c      	ldr	r3, [pc, #48]	@ (8005858 <HAL_MspInit+0x44>)
 8005828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	607b      	str	r3, [r7, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005832:	4b09      	ldr	r3, [pc, #36]	@ (8005858 <HAL_MspInit+0x44>)
 8005834:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005836:	4a08      	ldr	r2, [pc, #32]	@ (8005858 <HAL_MspInit+0x44>)
 8005838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800583c:	6593      	str	r3, [r2, #88]	@ 0x58
 800583e:	4b06      	ldr	r3, [pc, #24]	@ (8005858 <HAL_MspInit+0x44>)
 8005840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800584a:	f003 fb13 	bl	8008e74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	40021000 	.word	0x40021000

0800585c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005860:	bf00      	nop
 8005862:	e7fd      	b.n	8005860 <NMI_Handler+0x4>

08005864 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005868:	bf00      	nop
 800586a:	e7fd      	b.n	8005868 <HardFault_Handler+0x4>

0800586c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005870:	bf00      	nop
 8005872:	e7fd      	b.n	8005870 <MemManage_Handler+0x4>

08005874 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005878:	bf00      	nop
 800587a:	e7fd      	b.n	8005878 <BusFault_Handler+0x4>

0800587c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <UsageFault_Handler+0x4>

08005884 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005884:	b480      	push	{r7}
 8005886:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005892:	b480      	push	{r7}
 8005894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005896:	bf00      	nop
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr

080058ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058b2:	f000 ff99 	bl	80067e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80058c0:	4802      	ldr	r0, [pc, #8]	@ (80058cc <DMA1_Channel1_IRQHandler+0x10>)
 80058c2:	f002 ff1a 	bl	80086fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80058c6:	bf00      	nop
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	2000047c 	.word	0x2000047c

080058d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80058d4:	4802      	ldr	r0, [pc, #8]	@ (80058e0 <DMA1_Channel2_IRQHandler+0x10>)
 80058d6:	f002 ff10 	bl	80086fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80058da:	bf00      	nop
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20001fdc 	.word	0x20001fdc

080058e4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80058e8:	4802      	ldr	r0, [pc, #8]	@ (80058f4 <DMA1_Channel3_IRQHandler+0x10>)
 80058ea:	f002 ff06 	bl	80086fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80058ee:	bf00      	nop
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	2000203c 	.word	0x2000203c

080058f8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80058fc:	4802      	ldr	r0, [pc, #8]	@ (8005908 <DMA1_Channel4_IRQHandler+0x10>)
 80058fe:	f002 fefc 	bl	80086fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005902:	bf00      	nop
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20001f1c 	.word	0x20001f1c

0800590c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8005910:	4802      	ldr	r0, [pc, #8]	@ (800591c <DMA1_Channel5_IRQHandler+0x10>)
 8005912:	f002 fef2 	bl	80086fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005916:	bf00      	nop
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20001f7c 	.word	0x20001f7c

08005920 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005924:	4803      	ldr	r0, [pc, #12]	@ (8005934 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005926:	f004 ff2b 	bl	800a780 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800592a:	4803      	ldr	r0, [pc, #12]	@ (8005938 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800592c:	f004 ff28 	bl	800a780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005930:	bf00      	nop
 8005932:	bd80      	pop	{r7, pc}
 8005934:	200017f0 	.word	0x200017f0
 8005938:	20001cb8 	.word	0x20001cb8

0800593c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005940:	4802      	ldr	r0, [pc, #8]	@ (800594c <TIM2_IRQHandler+0x10>)
 8005942:	f004 ff1d 	bl	800a780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005946:	bf00      	nop
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	200018bc 	.word	0x200018bc

08005950 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005954:	4802      	ldr	r0, [pc, #8]	@ (8005960 <TIM3_IRQHandler+0x10>)
 8005956:	f004 ff13 	bl	800a780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800595a:	bf00      	nop
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20001988 	.word	0x20001988

08005964 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8005968:	4802      	ldr	r0, [pc, #8]	@ (8005974 <TIM4_IRQHandler+0x10>)
 800596a:	f004 ff09 	bl	800a780 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800596e:	bf00      	nop
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	20001a54 	.word	0x20001a54

08005978 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800597c:	4802      	ldr	r0, [pc, #8]	@ (8005988 <USART2_IRQHandler+0x10>)
 800597e:	f006 fcd3 	bl	800c328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005982:	bf00      	nop
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	20001e50 	.word	0x20001e50

0800598c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8005990:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8005994:	f003 f9b2 	bl	8008cfc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005998:	bf00      	nop
 800599a:	bd80      	pop	{r7, pc}

0800599c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80059a0:	4802      	ldr	r0, [pc, #8]	@ (80059ac <LPUART1_IRQHandler+0x10>)
 80059a2:	f006 fcc1 	bl	800c328 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80059a6:	bf00      	nop
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	20001d84 	.word	0x20001d84

080059b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80059b8:	4a14      	ldr	r2, [pc, #80]	@ (8005a0c <_sbrk+0x5c>)
 80059ba:	4b15      	ldr	r3, [pc, #84]	@ (8005a10 <_sbrk+0x60>)
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80059c4:	4b13      	ldr	r3, [pc, #76]	@ (8005a14 <_sbrk+0x64>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d102      	bne.n	80059d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80059cc:	4b11      	ldr	r3, [pc, #68]	@ (8005a14 <_sbrk+0x64>)
 80059ce:	4a12      	ldr	r2, [pc, #72]	@ (8005a18 <_sbrk+0x68>)
 80059d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80059d2:	4b10      	ldr	r3, [pc, #64]	@ (8005a14 <_sbrk+0x64>)
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d207      	bcs.n	80059f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80059e0:	f008 ff86 	bl	800e8f0 <__errno>
 80059e4:	4603      	mov	r3, r0
 80059e6:	220c      	movs	r2, #12
 80059e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80059ea:	f04f 33ff 	mov.w	r3, #4294967295
 80059ee:	e009      	b.n	8005a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80059f0:	4b08      	ldr	r3, [pc, #32]	@ (8005a14 <_sbrk+0x64>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80059f6:	4b07      	ldr	r3, [pc, #28]	@ (8005a14 <_sbrk+0x64>)
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4413      	add	r3, r2
 80059fe:	4a05      	ldr	r2, [pc, #20]	@ (8005a14 <_sbrk+0x64>)
 8005a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a02:	68fb      	ldr	r3, [r7, #12]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3718      	adds	r7, #24
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20020000 	.word	0x20020000
 8005a10:	00000400 	.word	0x00000400
 8005a14:	200017ec 	.word	0x200017ec
 8005a18:	200021e8 	.word	0x200021e8

08005a1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005a20:	4b06      	ldr	r3, [pc, #24]	@ (8005a3c <SystemInit+0x20>)
 8005a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a26:	4a05      	ldr	r2, [pc, #20]	@ (8005a3c <SystemInit+0x20>)
 8005a28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005a2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005a30:	bf00      	nop
 8005a32:	46bd      	mov	sp, r7
 8005a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a38:	4770      	bx	lr
 8005a3a:	bf00      	nop
 8005a3c:	e000ed00 	.word	0xe000ed00

08005a40 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b098      	sub	sp, #96	@ 0x60
 8005a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
 8005a50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a52:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	605a      	str	r2, [r3, #4]
 8005a5c:	609a      	str	r2, [r3, #8]
 8005a5e:	60da      	str	r2, [r3, #12]
 8005a60:	611a      	str	r2, [r3, #16]
 8005a62:	615a      	str	r2, [r3, #20]
 8005a64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a66:	1d3b      	adds	r3, r7, #4
 8005a68:	2234      	movs	r2, #52	@ 0x34
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f008 ff27 	bl	800e8c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005a72:	4b3b      	ldr	r3, [pc, #236]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005a74:	4a3b      	ldr	r2, [pc, #236]	@ (8005b64 <MX_TIM1_Init+0x124>)
 8005a76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005a78:	4b39      	ldr	r3, [pc, #228]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a7e:	4b38      	ldr	r3, [pc, #224]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005a84:	4b36      	ldr	r3, [pc, #216]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005a86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a8c:	4b34      	ldr	r3, [pc, #208]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005a92:	4b33      	ldr	r3, [pc, #204]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a98:	4b31      	ldr	r3, [pc, #196]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8005a9e:	4830      	ldr	r0, [pc, #192]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005aa0:	f004 fac0 	bl	800a024 <HAL_TIM_PWM_Init>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8005aaa:	f7ff fa3d 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005aba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4827      	ldr	r0, [pc, #156]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005ac2:	f006 f8d1 	bl	800bc68 <HAL_TIMEx_MasterConfigSynchronization>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8005acc:	f7ff fa2c 	bl	8004f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ad0:	2360      	movs	r3, #96	@ 0x60
 8005ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005adc:	2300      	movs	r3, #0
 8005ade:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005aec:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005af0:	220c      	movs	r2, #12
 8005af2:	4619      	mov	r1, r3
 8005af4:	481a      	ldr	r0, [pc, #104]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005af6:	f004 ffbd 	bl	800aa74 <HAL_TIM_PWM_ConfigChannel>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8005b00:	f7ff fa12 	bl	8004f28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b04:	2300      	movs	r3, #0
 8005b06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b14:	2300      	movs	r3, #0
 8005b16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005b22:	2300      	movs	r3, #0
 8005b24:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005b2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005b34:	2300      	movs	r3, #0
 8005b36:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005b3c:	1d3b      	adds	r3, r7, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4807      	ldr	r0, [pc, #28]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005b42:	f006 f927 	bl	800bd94 <HAL_TIMEx_ConfigBreakDeadTime>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005b4c:	f7ff f9ec 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005b50:	4803      	ldr	r0, [pc, #12]	@ (8005b60 <MX_TIM1_Init+0x120>)
 8005b52:	f000 fb5b 	bl	800620c <HAL_TIM_MspPostInit>

}
 8005b56:	bf00      	nop
 8005b58:	3760      	adds	r7, #96	@ 0x60
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	200017f0 	.word	0x200017f0
 8005b64:	40012c00 	.word	0x40012c00

08005b68 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005b6e:	f107 0310 	add.w	r3, r7, #16
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	605a      	str	r2, [r3, #4]
 8005b78:	609a      	str	r2, [r3, #8]
 8005b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b7c:	1d3b      	adds	r3, r7, #4
 8005b7e:	2200      	movs	r2, #0
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	605a      	str	r2, [r3, #4]
 8005b84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005b86:	4b1e      	ldr	r3, [pc, #120]	@ (8005c00 <MX_TIM2_Init+0x98>)
 8005b88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005b8c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8005b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8005c00 <MX_TIM2_Init+0x98>)
 8005b90:	22a9      	movs	r2, #169	@ 0xa9
 8005b92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b94:	4b1a      	ldr	r3, [pc, #104]	@ (8005c00 <MX_TIM2_Init+0x98>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8005b9a:	4b19      	ldr	r3, [pc, #100]	@ (8005c00 <MX_TIM2_Init+0x98>)
 8005b9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8005ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ba2:	4b17      	ldr	r3, [pc, #92]	@ (8005c00 <MX_TIM2_Init+0x98>)
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ba8:	4b15      	ldr	r3, [pc, #84]	@ (8005c00 <MX_TIM2_Init+0x98>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005bae:	4814      	ldr	r0, [pc, #80]	@ (8005c00 <MX_TIM2_Init+0x98>)
 8005bb0:	f004 f8ec 	bl	8009d8c <HAL_TIM_Base_Init>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005bba:	f7ff f9b5 	bl	8004f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005bbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005bc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005bc4:	f107 0310 	add.w	r3, r7, #16
 8005bc8:	4619      	mov	r1, r3
 8005bca:	480d      	ldr	r0, [pc, #52]	@ (8005c00 <MX_TIM2_Init+0x98>)
 8005bcc:	f005 f866 	bl	800ac9c <HAL_TIM_ConfigClockSource>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005bd6:	f7ff f9a7 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005be2:	1d3b      	adds	r3, r7, #4
 8005be4:	4619      	mov	r1, r3
 8005be6:	4806      	ldr	r0, [pc, #24]	@ (8005c00 <MX_TIM2_Init+0x98>)
 8005be8:	f006 f83e 	bl	800bc68 <HAL_TIMEx_MasterConfigSynchronization>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d001      	beq.n	8005bf6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005bf2:	f7ff f999 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005bf6:	bf00      	nop
 8005bf8:	3720      	adds	r7, #32
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	200018bc 	.word	0x200018bc

08005c04 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b08c      	sub	sp, #48	@ 0x30
 8005c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005c0a:	f107 030c 	add.w	r3, r7, #12
 8005c0e:	2224      	movs	r2, #36	@ 0x24
 8005c10:	2100      	movs	r1, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f008 fe54 	bl	800e8c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c18:	463b      	mov	r3, r7
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	605a      	str	r2, [r3, #4]
 8005c20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005c22:	4b21      	ldr	r3, [pc, #132]	@ (8005ca8 <MX_TIM3_Init+0xa4>)
 8005c24:	4a21      	ldr	r2, [pc, #132]	@ (8005cac <MX_TIM3_Init+0xa8>)
 8005c26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005c28:	4b1f      	ldr	r3, [pc, #124]	@ (8005ca8 <MX_TIM3_Init+0xa4>)
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c2e:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca8 <MX_TIM3_Init+0xa4>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005c34:	4b1c      	ldr	r3, [pc, #112]	@ (8005ca8 <MX_TIM3_Init+0xa4>)
 8005c36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ca8 <MX_TIM3_Init+0xa4>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c42:	4b19      	ldr	r3, [pc, #100]	@ (8005ca8 <MX_TIM3_Init+0xa4>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005c50:	2301      	movs	r3, #1
 8005c52:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005c60:	2301      	movs	r3, #1
 8005c62:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005c64:	2300      	movs	r3, #0
 8005c66:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005c6c:	f107 030c 	add.w	r3, r7, #12
 8005c70:	4619      	mov	r1, r3
 8005c72:	480d      	ldr	r0, [pc, #52]	@ (8005ca8 <MX_TIM3_Init+0xa4>)
 8005c74:	f004 fc42 	bl	800a4fc <HAL_TIM_Encoder_Init>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8005c7e:	f7ff f953 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c82:	2300      	movs	r3, #0
 8005c84:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005c8a:	463b      	mov	r3, r7
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4806      	ldr	r0, [pc, #24]	@ (8005ca8 <MX_TIM3_Init+0xa4>)
 8005c90:	f005 ffea 	bl	800bc68 <HAL_TIMEx_MasterConfigSynchronization>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8005c9a:	f7ff f945 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005c9e:	bf00      	nop
 8005ca0:	3730      	adds	r7, #48	@ 0x30
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	20001988 	.word	0x20001988
 8005cac:	40000400 	.word	0x40000400

08005cb0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08c      	sub	sp, #48	@ 0x30
 8005cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005cb6:	f107 030c 	add.w	r3, r7, #12
 8005cba:	2224      	movs	r2, #36	@ 0x24
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f008 fdfe 	bl	800e8c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cc4:	463b      	mov	r3, r7
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
 8005cca:	605a      	str	r2, [r3, #4]
 8005ccc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005cce:	4b21      	ldr	r3, [pc, #132]	@ (8005d54 <MX_TIM4_Init+0xa4>)
 8005cd0:	4a21      	ldr	r2, [pc, #132]	@ (8005d58 <MX_TIM4_Init+0xa8>)
 8005cd2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005cd4:	4b1f      	ldr	r3, [pc, #124]	@ (8005d54 <MX_TIM4_Init+0xa4>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cda:	4b1e      	ldr	r3, [pc, #120]	@ (8005d54 <MX_TIM4_Init+0xa4>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8005ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8005d54 <MX_TIM4_Init+0xa4>)
 8005ce2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ce6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d54 <MX_TIM4_Init+0xa4>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cee:	4b19      	ldr	r3, [pc, #100]	@ (8005d54 <MX_TIM4_Init+0xa4>)
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005d00:	2300      	movs	r3, #0
 8005d02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005d04:	2300      	movs	r3, #0
 8005d06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005d10:	2300      	movs	r3, #0
 8005d12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	480d      	ldr	r0, [pc, #52]	@ (8005d54 <MX_TIM4_Init+0xa4>)
 8005d20:	f004 fbec 	bl	800a4fc <HAL_TIM_Encoder_Init>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005d2a:	f7ff f8fd 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005d36:	463b      	mov	r3, r7
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4806      	ldr	r0, [pc, #24]	@ (8005d54 <MX_TIM4_Init+0xa4>)
 8005d3c:	f005 ff94 	bl	800bc68 <HAL_TIMEx_MasterConfigSynchronization>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005d46:	f7ff f8ef 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005d4a:	bf00      	nop
 8005d4c:	3730      	adds	r7, #48	@ 0x30
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20001a54 	.word	0x20001a54
 8005d58:	40000800 	.word	0x40000800

08005d5c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d62:	f107 0310 	add.w	r3, r7, #16
 8005d66:	2200      	movs	r2, #0
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	605a      	str	r2, [r3, #4]
 8005d6c:	609a      	str	r2, [r3, #8]
 8005d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d70:	1d3b      	adds	r3, r7, #4
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]
 8005d76:	605a      	str	r2, [r3, #4]
 8005d78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005df0 <MX_TIM5_Init+0x94>)
 8005d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005df4 <MX_TIM5_Init+0x98>)
 8005d7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8005d80:	4b1b      	ldr	r3, [pc, #108]	@ (8005df0 <MX_TIM5_Init+0x94>)
 8005d82:	22a9      	movs	r2, #169	@ 0xa9
 8005d84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d86:	4b1a      	ldr	r3, [pc, #104]	@ (8005df0 <MX_TIM5_Init+0x94>)
 8005d88:	2200      	movs	r2, #0
 8005d8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8005d8c:	4b18      	ldr	r3, [pc, #96]	@ (8005df0 <MX_TIM5_Init+0x94>)
 8005d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d94:	4b16      	ldr	r3, [pc, #88]	@ (8005df0 <MX_TIM5_Init+0x94>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d9a:	4b15      	ldr	r3, [pc, #84]	@ (8005df0 <MX_TIM5_Init+0x94>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005da0:	4813      	ldr	r0, [pc, #76]	@ (8005df0 <MX_TIM5_Init+0x94>)
 8005da2:	f003 fff3 	bl	8009d8c <HAL_TIM_Base_Init>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8005dac:	f7ff f8bc 	bl	8004f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005db0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005db4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005db6:	f107 0310 	add.w	r3, r7, #16
 8005dba:	4619      	mov	r1, r3
 8005dbc:	480c      	ldr	r0, [pc, #48]	@ (8005df0 <MX_TIM5_Init+0x94>)
 8005dbe:	f004 ff6d 	bl	800ac9c <HAL_TIM_ConfigClockSource>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8005dc8:	f7ff f8ae 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005dd4:	1d3b      	adds	r3, r7, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4805      	ldr	r0, [pc, #20]	@ (8005df0 <MX_TIM5_Init+0x94>)
 8005dda:	f005 ff45 	bl	800bc68 <HAL_TIMEx_MasterConfigSynchronization>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8005de4:	f7ff f8a0 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005de8:	bf00      	nop
 8005dea:	3720      	adds	r7, #32
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	20001b20 	.word	0x20001b20
 8005df4:	40000c00 	.word	0x40000c00

08005df8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b09c      	sub	sp, #112	@ 0x70
 8005dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dfe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	605a      	str	r2, [r3, #4]
 8005e08:	609a      	str	r2, [r3, #8]
 8005e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005e18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	605a      	str	r2, [r3, #4]
 8005e22:	609a      	str	r2, [r3, #8]
 8005e24:	60da      	str	r2, [r3, #12]
 8005e26:	611a      	str	r2, [r3, #16]
 8005e28:	615a      	str	r2, [r3, #20]
 8005e2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e2c:	1d3b      	adds	r3, r7, #4
 8005e2e:	2234      	movs	r2, #52	@ 0x34
 8005e30:	2100      	movs	r1, #0
 8005e32:	4618      	mov	r0, r3
 8005e34:	f008 fd44 	bl	800e8c0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005e38:	4b51      	ldr	r3, [pc, #324]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005e3a:	4a52      	ldr	r2, [pc, #328]	@ (8005f84 <MX_TIM8_Init+0x18c>)
 8005e3c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005e3e:	4b50      	ldr	r3, [pc, #320]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e44:	4b4e      	ldr	r3, [pc, #312]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005e4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005e50:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e52:	4b4b      	ldr	r3, [pc, #300]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005e58:	4b49      	ldr	r3, [pc, #292]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e5e:	4b48      	ldr	r3, [pc, #288]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005e64:	4846      	ldr	r0, [pc, #280]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005e66:	f003 ff91 	bl	8009d8c <HAL_TIM_Base_Init>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8005e70:	f7ff f85a 	bl	8004f28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e74:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e78:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005e7a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005e7e:	4619      	mov	r1, r3
 8005e80:	483f      	ldr	r0, [pc, #252]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005e82:	f004 ff0b 	bl	800ac9c <HAL_TIM_ConfigClockSource>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d001      	beq.n	8005e90 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8005e8c:	f7ff f84c 	bl	8004f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005e90:	483b      	ldr	r0, [pc, #236]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005e92:	f004 f8c7 	bl	800a024 <HAL_TIM_PWM_Init>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8005e9c:	f7ff f844 	bl	8004f28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005eac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4833      	ldr	r0, [pc, #204]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005eb4:	f005 fed8 	bl	800bc68 <HAL_TIMEx_MasterConfigSynchronization>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8005ebe:	f7ff f833 	bl	8004f28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ec2:	2360      	movs	r3, #96	@ 0x60
 8005ec4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005eda:	2300      	movs	r3, #0
 8005edc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005ede:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	4826      	ldr	r0, [pc, #152]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005ee8:	f004 fdc4 	bl	800aa74 <HAL_TIM_PWM_ConfigChannel>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8005ef2:	f7ff f819 	bl	8004f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005ef6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005efa:	2204      	movs	r2, #4
 8005efc:	4619      	mov	r1, r3
 8005efe:	4820      	ldr	r0, [pc, #128]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005f00:	f004 fdb8 	bl	800aa74 <HAL_TIM_PWM_ConfigChannel>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8005f0a:	f7ff f80d 	bl	8004f28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005f0e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005f12:	2208      	movs	r2, #8
 8005f14:	4619      	mov	r1, r3
 8005f16:	481a      	ldr	r0, [pc, #104]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005f18:	f004 fdac 	bl	800aa74 <HAL_TIM_PWM_ConfigChannel>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8005f22:	f7ff f801 	bl	8004f28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005f26:	2300      	movs	r3, #0
 8005f28:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005f36:	2300      	movs	r3, #0
 8005f38:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005f3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005f3e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005f44:	2300      	movs	r3, #0
 8005f46:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005f4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f50:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005f52:	2300      	movs	r3, #0
 8005f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005f56:	2300      	movs	r3, #0
 8005f58:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005f5e:	1d3b      	adds	r3, r7, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4807      	ldr	r0, [pc, #28]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005f64:	f005 ff16 	bl	800bd94 <HAL_TIMEx_ConfigBreakDeadTime>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8005f6e:	f7fe ffdb 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005f72:	4803      	ldr	r0, [pc, #12]	@ (8005f80 <MX_TIM8_Init+0x188>)
 8005f74:	f000 f94a 	bl	800620c <HAL_TIM_MspPostInit>

}
 8005f78:	bf00      	nop
 8005f7a:	3770      	adds	r7, #112	@ 0x70
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20001bec 	.word	0x20001bec
 8005f84:	40013400 	.word	0x40013400

08005f88 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005f8c:	4b14      	ldr	r3, [pc, #80]	@ (8005fe0 <MX_TIM16_Init+0x58>)
 8005f8e:	4a15      	ldr	r2, [pc, #84]	@ (8005fe4 <MX_TIM16_Init+0x5c>)
 8005f90:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8005f92:	4b13      	ldr	r3, [pc, #76]	@ (8005fe0 <MX_TIM16_Init+0x58>)
 8005f94:	22a9      	movs	r2, #169	@ 0xa9
 8005f96:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f98:	4b11      	ldr	r3, [pc, #68]	@ (8005fe0 <MX_TIM16_Init+0x58>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8005f9e:	4b10      	ldr	r3, [pc, #64]	@ (8005fe0 <MX_TIM16_Init+0x58>)
 8005fa0:	f240 4279 	movw	r2, #1145	@ 0x479
 8005fa4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe0 <MX_TIM16_Init+0x58>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005fac:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe0 <MX_TIM16_Init+0x58>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <MX_TIM16_Init+0x58>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005fb8:	4809      	ldr	r0, [pc, #36]	@ (8005fe0 <MX_TIM16_Init+0x58>)
 8005fba:	f003 fee7 	bl	8009d8c <HAL_TIM_Base_Init>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005fc4:	f7fe ffb0 	bl	8004f28 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8005fc8:	2108      	movs	r1, #8
 8005fca:	4805      	ldr	r0, [pc, #20]	@ (8005fe0 <MX_TIM16_Init+0x58>)
 8005fcc:	f004 f9a0 	bl	800a310 <HAL_TIM_OnePulse_Init>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8005fd6:	f7fe ffa7 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005fda:	bf00      	nop
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20001cb8 	.word	0x20001cb8
 8005fe4:	40014400 	.word	0x40014400

08005fe8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800602c <HAL_TIM_PWM_MspInit+0x44>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d113      	bne.n	8006022 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8006030 <HAL_TIM_PWM_MspInit+0x48>)
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8006030 <HAL_TIM_PWM_MspInit+0x48>)
 8006000:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006004:	6613      	str	r3, [r2, #96]	@ 0x60
 8006006:	4b0a      	ldr	r3, [pc, #40]	@ (8006030 <HAL_TIM_PWM_MspInit+0x48>)
 8006008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800600a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006012:	2200      	movs	r2, #0
 8006014:	2100      	movs	r1, #0
 8006016:	2019      	movs	r0, #25
 8006018:	f002 f957 	bl	80082ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800601c:	2019      	movs	r0, #25
 800601e:	f002 f96e 	bl	80082fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006022:	bf00      	nop
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	40012c00 	.word	0x40012c00
 8006030:	40021000 	.word	0x40021000

08006034 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006044:	d114      	bne.n	8006070 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006046:	4b2b      	ldr	r3, [pc, #172]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800604a:	4a2a      	ldr	r2, [pc, #168]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 800604c:	f043 0301 	orr.w	r3, r3, #1
 8006050:	6593      	str	r3, [r2, #88]	@ 0x58
 8006052:	4b28      	ldr	r3, [pc, #160]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 8006054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	617b      	str	r3, [r7, #20]
 800605c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800605e:	2200      	movs	r2, #0
 8006060:	2100      	movs	r1, #0
 8006062:	201c      	movs	r0, #28
 8006064:	f002 f931 	bl	80082ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006068:	201c      	movs	r0, #28
 800606a:	f002 f948 	bl	80082fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800606e:	e03c      	b.n	80060ea <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a20      	ldr	r2, [pc, #128]	@ (80060f8 <HAL_TIM_Base_MspInit+0xc4>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d10c      	bne.n	8006094 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800607a:	4b1e      	ldr	r3, [pc, #120]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 800607c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607e:	4a1d      	ldr	r2, [pc, #116]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 8006080:	f043 0308 	orr.w	r3, r3, #8
 8006084:	6593      	str	r3, [r2, #88]	@ 0x58
 8006086:	4b1b      	ldr	r3, [pc, #108]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 8006088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608a:	f003 0308 	and.w	r3, r3, #8
 800608e:	613b      	str	r3, [r7, #16]
 8006090:	693b      	ldr	r3, [r7, #16]
}
 8006092:	e02a      	b.n	80060ea <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a18      	ldr	r2, [pc, #96]	@ (80060fc <HAL_TIM_Base_MspInit+0xc8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10c      	bne.n	80060b8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800609e:	4b15      	ldr	r3, [pc, #84]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 80060a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060a2:	4a14      	ldr	r2, [pc, #80]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 80060a4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80060a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80060aa:	4b12      	ldr	r3, [pc, #72]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 80060ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
}
 80060b6:	e018      	b.n	80060ea <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a10      	ldr	r2, [pc, #64]	@ (8006100 <HAL_TIM_Base_MspInit+0xcc>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d113      	bne.n	80060ea <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80060c2:	4b0c      	ldr	r3, [pc, #48]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 80060c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060c6:	4a0b      	ldr	r2, [pc, #44]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 80060c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80060cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80060ce:	4b09      	ldr	r3, [pc, #36]	@ (80060f4 <HAL_TIM_Base_MspInit+0xc0>)
 80060d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d6:	60bb      	str	r3, [r7, #8]
 80060d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80060da:	2200      	movs	r2, #0
 80060dc:	2100      	movs	r1, #0
 80060de:	2019      	movs	r0, #25
 80060e0:	f002 f8f3 	bl	80082ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80060e4:	2019      	movs	r0, #25
 80060e6:	f002 f90a 	bl	80082fe <HAL_NVIC_EnableIRQ>
}
 80060ea:	bf00      	nop
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	40021000 	.word	0x40021000
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40013400 	.word	0x40013400
 8006100:	40014400 	.word	0x40014400

08006104 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08c      	sub	sp, #48	@ 0x30
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800610c:	f107 031c 	add.w	r3, r7, #28
 8006110:	2200      	movs	r2, #0
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	605a      	str	r2, [r3, #4]
 8006116:	609a      	str	r2, [r3, #8]
 8006118:	60da      	str	r2, [r3, #12]
 800611a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a37      	ldr	r2, [pc, #220]	@ (8006200 <HAL_TIM_Encoder_MspInit+0xfc>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d131      	bne.n	800618a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006126:	4b37      	ldr	r3, [pc, #220]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 8006128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800612a:	4a36      	ldr	r2, [pc, #216]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 800612c:	f043 0302 	orr.w	r3, r3, #2
 8006130:	6593      	str	r3, [r2, #88]	@ 0x58
 8006132:	4b34      	ldr	r3, [pc, #208]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 8006134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006136:	f003 0302 	and.w	r3, r3, #2
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800613e:	4b31      	ldr	r3, [pc, #196]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 8006140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006142:	4a30      	ldr	r2, [pc, #192]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800614a:	4b2e      	ldr	r3, [pc, #184]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 800614c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	617b      	str	r3, [r7, #20]
 8006154:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006156:	23c0      	movs	r3, #192	@ 0xc0
 8006158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800615a:	2302      	movs	r3, #2
 800615c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800615e:	2300      	movs	r3, #0
 8006160:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006162:	2300      	movs	r3, #0
 8006164:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006166:	2302      	movs	r3, #2
 8006168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800616a:	f107 031c 	add.w	r3, r7, #28
 800616e:	4619      	mov	r1, r3
 8006170:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006174:	f002 fc10 	bl	8008998 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006178:	2200      	movs	r2, #0
 800617a:	2100      	movs	r1, #0
 800617c:	201d      	movs	r0, #29
 800617e:	f002 f8a4 	bl	80082ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006182:	201d      	movs	r0, #29
 8006184:	f002 f8bb 	bl	80082fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8006188:	e036      	b.n	80061f8 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a1e      	ldr	r2, [pc, #120]	@ (8006208 <HAL_TIM_Encoder_MspInit+0x104>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d131      	bne.n	80061f8 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006194:	4b1b      	ldr	r3, [pc, #108]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 8006196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006198:	4a1a      	ldr	r2, [pc, #104]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 800619a:	f043 0304 	orr.w	r3, r3, #4
 800619e:	6593      	str	r3, [r2, #88]	@ 0x58
 80061a0:	4b18      	ldr	r3, [pc, #96]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 80061a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a4:	f003 0304 	and.w	r3, r3, #4
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061ac:	4b15      	ldr	r3, [pc, #84]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 80061ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061b0:	4a14      	ldr	r2, [pc, #80]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 80061b2:	f043 0301 	orr.w	r3, r3, #1
 80061b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061b8:	4b12      	ldr	r3, [pc, #72]	@ (8006204 <HAL_TIM_Encoder_MspInit+0x100>)
 80061ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80061c4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80061c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ca:	2302      	movs	r3, #2
 80061cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ce:	2300      	movs	r3, #0
 80061d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061d2:	2300      	movs	r3, #0
 80061d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80061d6:	230a      	movs	r3, #10
 80061d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061da:	f107 031c 	add.w	r3, r7, #28
 80061de:	4619      	mov	r1, r3
 80061e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80061e4:	f002 fbd8 	bl	8008998 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80061e8:	2200      	movs	r2, #0
 80061ea:	2100      	movs	r1, #0
 80061ec:	201e      	movs	r0, #30
 80061ee:	f002 f86c 	bl	80082ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80061f2:	201e      	movs	r0, #30
 80061f4:	f002 f883 	bl	80082fe <HAL_NVIC_EnableIRQ>
}
 80061f8:	bf00      	nop
 80061fa:	3730      	adds	r7, #48	@ 0x30
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40000400 	.word	0x40000400
 8006204:	40021000 	.word	0x40021000
 8006208:	40000800 	.word	0x40000800

0800620c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	@ 0x28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006214:	f107 0314 	add.w	r3, r7, #20
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]
 800621c:	605a      	str	r2, [r3, #4]
 800621e:	609a      	str	r2, [r3, #8]
 8006220:	60da      	str	r2, [r3, #12]
 8006222:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a30      	ldr	r2, [pc, #192]	@ (80062ec <HAL_TIM_MspPostInit+0xe0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d11c      	bne.n	8006268 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800622e:	4b30      	ldr	r3, [pc, #192]	@ (80062f0 <HAL_TIM_MspPostInit+0xe4>)
 8006230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006232:	4a2f      	ldr	r2, [pc, #188]	@ (80062f0 <HAL_TIM_MspPostInit+0xe4>)
 8006234:	f043 0304 	orr.w	r3, r3, #4
 8006238:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800623a:	4b2d      	ldr	r3, [pc, #180]	@ (80062f0 <HAL_TIM_MspPostInit+0xe4>)
 800623c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	613b      	str	r3, [r7, #16]
 8006244:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006246:	2308      	movs	r3, #8
 8006248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800624a:	2302      	movs	r3, #2
 800624c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624e:	2300      	movs	r3, #0
 8006250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006252:	2300      	movs	r3, #0
 8006254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8006256:	2302      	movs	r3, #2
 8006258:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800625a:	f107 0314 	add.w	r3, r7, #20
 800625e:	4619      	mov	r1, r3
 8006260:	4824      	ldr	r0, [pc, #144]	@ (80062f4 <HAL_TIM_MspPostInit+0xe8>)
 8006262:	f002 fb99 	bl	8008998 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006266:	e03d      	b.n	80062e4 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a22      	ldr	r2, [pc, #136]	@ (80062f8 <HAL_TIM_MspPostInit+0xec>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d138      	bne.n	80062e4 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006272:	4b1f      	ldr	r3, [pc, #124]	@ (80062f0 <HAL_TIM_MspPostInit+0xe4>)
 8006274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006276:	4a1e      	ldr	r2, [pc, #120]	@ (80062f0 <HAL_TIM_MspPostInit+0xe4>)
 8006278:	f043 0304 	orr.w	r3, r3, #4
 800627c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800627e:	4b1c      	ldr	r3, [pc, #112]	@ (80062f0 <HAL_TIM_MspPostInit+0xe4>)
 8006280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006282:	f003 0304 	and.w	r3, r3, #4
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800628a:	4b19      	ldr	r3, [pc, #100]	@ (80062f0 <HAL_TIM_MspPostInit+0xe4>)
 800628c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800628e:	4a18      	ldr	r2, [pc, #96]	@ (80062f0 <HAL_TIM_MspPostInit+0xe4>)
 8006290:	f043 0302 	orr.w	r3, r3, #2
 8006294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006296:	4b16      	ldr	r3, [pc, #88]	@ (80062f0 <HAL_TIM_MspPostInit+0xe4>)
 8006298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800629a:	f003 0302 	and.w	r3, r3, #2
 800629e:	60bb      	str	r3, [r7, #8]
 80062a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80062a2:	23c0      	movs	r3, #192	@ 0xc0
 80062a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a6:	2302      	movs	r3, #2
 80062a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062aa:	2300      	movs	r3, #0
 80062ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062ae:	2300      	movs	r3, #0
 80062b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80062b2:	2304      	movs	r3, #4
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062b6:	f107 0314 	add.w	r3, r7, #20
 80062ba:	4619      	mov	r1, r3
 80062bc:	480d      	ldr	r0, [pc, #52]	@ (80062f4 <HAL_TIM_MspPostInit+0xe8>)
 80062be:	f002 fb6b 	bl	8008998 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80062c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062c8:	2302      	movs	r3, #2
 80062ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062cc:	2300      	movs	r3, #0
 80062ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062d0:	2300      	movs	r3, #0
 80062d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80062d4:	230a      	movs	r3, #10
 80062d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062d8:	f107 0314 	add.w	r3, r7, #20
 80062dc:	4619      	mov	r1, r3
 80062de:	4807      	ldr	r0, [pc, #28]	@ (80062fc <HAL_TIM_MspPostInit+0xf0>)
 80062e0:	f002 fb5a 	bl	8008998 <HAL_GPIO_Init>
}
 80062e4:	bf00      	nop
 80062e6:	3728      	adds	r7, #40	@ 0x28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40012c00 	.word	0x40012c00
 80062f0:	40021000 	.word	0x40021000
 80062f4:	48000800 	.word	0x48000800
 80062f8:	40013400 	.word	0x40013400
 80062fc:	48000400 	.word	0x48000400

08006300 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8006304:	4b20      	ldr	r3, [pc, #128]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 8006306:	4a21      	ldr	r2, [pc, #132]	@ (800638c <MX_LPUART1_UART_Init+0x8c>)
 8006308:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800630a:	4b1f      	ldr	r3, [pc, #124]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 800630c:	4a20      	ldr	r2, [pc, #128]	@ (8006390 <MX_LPUART1_UART_Init+0x90>)
 800630e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006310:	4b1d      	ldr	r3, [pc, #116]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 8006312:	2200      	movs	r2, #0
 8006314:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8006316:	4b1c      	ldr	r3, [pc, #112]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 8006318:	2200      	movs	r2, #0
 800631a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800631c:	4b1a      	ldr	r3, [pc, #104]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 800631e:	2200      	movs	r2, #0
 8006320:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8006322:	4b19      	ldr	r3, [pc, #100]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 8006324:	220c      	movs	r2, #12
 8006326:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006328:	4b17      	ldr	r3, [pc, #92]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 800632a:	2200      	movs	r2, #0
 800632c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800632e:	4b16      	ldr	r3, [pc, #88]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 8006330:	2200      	movs	r2, #0
 8006332:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006334:	4b14      	ldr	r3, [pc, #80]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 8006336:	2200      	movs	r2, #0
 8006338:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800633a:	4b13      	ldr	r3, [pc, #76]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 800633c:	2200      	movs	r2, #0
 800633e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8006340:	4811      	ldr	r0, [pc, #68]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 8006342:	f005 fe0b 	bl	800bf5c <HAL_UART_Init>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800634c:	f7fe fdec 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006350:	2100      	movs	r1, #0
 8006352:	480d      	ldr	r0, [pc, #52]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 8006354:	f007 fc3d 	bl	800dbd2 <HAL_UARTEx_SetTxFifoThreshold>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800635e:	f7fe fde3 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006362:	2100      	movs	r1, #0
 8006364:	4808      	ldr	r0, [pc, #32]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 8006366:	f007 fc72 	bl	800dc4e <HAL_UARTEx_SetRxFifoThreshold>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d001      	beq.n	8006374 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8006370:	f7fe fdda 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8006374:	4804      	ldr	r0, [pc, #16]	@ (8006388 <MX_LPUART1_UART_Init+0x88>)
 8006376:	f007 fbf3 	bl	800db60 <HAL_UARTEx_DisableFifoMode>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	d001      	beq.n	8006384 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8006380:	f7fe fdd2 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8006384:	bf00      	nop
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20001d84 	.word	0x20001d84
 800638c:	40008000 	.word	0x40008000
 8006390:	001e8480 	.word	0x001e8480

08006394 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006398:	4b23      	ldr	r3, [pc, #140]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 800639a:	4a24      	ldr	r2, [pc, #144]	@ (800642c <MX_USART2_UART_Init+0x98>)
 800639c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800639e:	4b22      	ldr	r3, [pc, #136]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063a0:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80063a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80063a6:	4b20      	ldr	r3, [pc, #128]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80063ac:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80063ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80063b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80063ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80063bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063be:	220c      	movs	r2, #12
 80063c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063c2:	4b19      	ldr	r3, [pc, #100]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80063c8:	4b17      	ldr	r3, [pc, #92]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063ce:	4b16      	ldr	r3, [pc, #88]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80063d4:	4b14      	ldr	r3, [pc, #80]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063d6:	2200      	movs	r2, #0
 80063d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063da:	4b13      	ldr	r3, [pc, #76]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063dc:	2200      	movs	r2, #0
 80063de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80063e0:	4811      	ldr	r0, [pc, #68]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063e2:	f005 fdbb 	bl	800bf5c <HAL_UART_Init>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80063ec:	f7fe fd9c 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063f0:	2100      	movs	r1, #0
 80063f2:	480d      	ldr	r0, [pc, #52]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 80063f4:	f007 fbed 	bl	800dbd2 <HAL_UARTEx_SetTxFifoThreshold>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80063fe:	f7fe fd93 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006402:	2100      	movs	r1, #0
 8006404:	4808      	ldr	r0, [pc, #32]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 8006406:	f007 fc22 	bl	800dc4e <HAL_UARTEx_SetRxFifoThreshold>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8006410:	f7fe fd8a 	bl	8004f28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8006414:	4804      	ldr	r0, [pc, #16]	@ (8006428 <MX_USART2_UART_Init+0x94>)
 8006416:	f007 fba3 	bl	800db60 <HAL_UARTEx_DisableFifoMode>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8006420:	f7fe fd82 	bl	8004f28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006424:	bf00      	nop
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20001e50 	.word	0x20001e50
 800642c:	40004400 	.word	0x40004400

08006430 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b0a0      	sub	sp, #128	@ 0x80
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006438:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800643c:	2200      	movs	r2, #0
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	605a      	str	r2, [r3, #4]
 8006442:	609a      	str	r2, [r3, #8]
 8006444:	60da      	str	r2, [r3, #12]
 8006446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006448:	f107 0318 	add.w	r3, r7, #24
 800644c:	2254      	movs	r2, #84	@ 0x54
 800644e:	2100      	movs	r1, #0
 8006450:	4618      	mov	r0, r3
 8006452:	f008 fa35 	bl	800e8c0 <memset>
  if(uartHandle->Instance==LPUART1)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a99      	ldr	r2, [pc, #612]	@ (80066c0 <HAL_UART_MspInit+0x290>)
 800645c:	4293      	cmp	r3, r2
 800645e:	f040 8093 	bne.w	8006588 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006462:	2320      	movs	r3, #32
 8006464:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006466:	2300      	movs	r3, #0
 8006468:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800646a:	f107 0318 	add.w	r3, r7, #24
 800646e:	4618      	mov	r0, r3
 8006470:	f003 fa3e 	bl	80098f0 <HAL_RCCEx_PeriphCLKConfig>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800647a:	f7fe fd55 	bl	8004f28 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800647e:	4b91      	ldr	r3, [pc, #580]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 8006480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006482:	4a90      	ldr	r2, [pc, #576]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 8006484:	f043 0301 	orr.w	r3, r3, #1
 8006488:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800648a:	4b8e      	ldr	r3, [pc, #568]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 800648c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006496:	4b8b      	ldr	r3, [pc, #556]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 8006498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649a:	4a8a      	ldr	r2, [pc, #552]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 800649c:	f043 0302 	orr.w	r3, r3, #2
 80064a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064a2:	4b88      	ldr	r3, [pc, #544]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 80064a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80064ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80064b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064b4:	2302      	movs	r3, #2
 80064b6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064bc:	2300      	movs	r3, #0
 80064be:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80064c0:	2308      	movs	r3, #8
 80064c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80064c8:	4619      	mov	r1, r3
 80064ca:	487f      	ldr	r0, [pc, #508]	@ (80066c8 <HAL_UART_MspInit+0x298>)
 80064cc:	f002 fa64 	bl	8008998 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 80064d0:	4b7e      	ldr	r3, [pc, #504]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 80064d2:	4a7f      	ldr	r2, [pc, #508]	@ (80066d0 <HAL_UART_MspInit+0x2a0>)
 80064d4:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80064d6:	4b7d      	ldr	r3, [pc, #500]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 80064d8:	2222      	movs	r2, #34	@ 0x22
 80064da:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064dc:	4b7b      	ldr	r3, [pc, #492]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 80064de:	2200      	movs	r2, #0
 80064e0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064e2:	4b7a      	ldr	r3, [pc, #488]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064e8:	4b78      	ldr	r3, [pc, #480]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 80064ea:	2280      	movs	r2, #128	@ 0x80
 80064ec:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064ee:	4b77      	ldr	r3, [pc, #476]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064f4:	4b75      	ldr	r3, [pc, #468]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80064fa:	4b74      	ldr	r3, [pc, #464]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 80064fc:	2200      	movs	r2, #0
 80064fe:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006500:	4b72      	ldr	r3, [pc, #456]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 8006502:	2200      	movs	r2, #0
 8006504:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8006506:	4871      	ldr	r0, [pc, #452]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 8006508:	f001 ff14 	bl	8008334 <HAL_DMA_Init>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8006512:	f7fe fd09 	bl	8004f28 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a6c      	ldr	r2, [pc, #432]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 800651a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800651e:	4a6b      	ldr	r2, [pc, #428]	@ (80066cc <HAL_UART_MspInit+0x29c>)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8006524:	4b6b      	ldr	r3, [pc, #428]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 8006526:	4a6c      	ldr	r2, [pc, #432]	@ (80066d8 <HAL_UART_MspInit+0x2a8>)
 8006528:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800652a:	4b6a      	ldr	r3, [pc, #424]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 800652c:	2223      	movs	r2, #35	@ 0x23
 800652e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006530:	4b68      	ldr	r3, [pc, #416]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 8006532:	2210      	movs	r2, #16
 8006534:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006536:	4b67      	ldr	r3, [pc, #412]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 8006538:	2200      	movs	r2, #0
 800653a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800653c:	4b65      	ldr	r3, [pc, #404]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 800653e:	2280      	movs	r2, #128	@ 0x80
 8006540:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006542:	4b64      	ldr	r3, [pc, #400]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 8006544:	2200      	movs	r2, #0
 8006546:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006548:	4b62      	ldr	r3, [pc, #392]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 800654a:	2200      	movs	r2, #0
 800654c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800654e:	4b61      	ldr	r3, [pc, #388]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 8006550:	2200      	movs	r2, #0
 8006552:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006554:	4b5f      	ldr	r3, [pc, #380]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 8006556:	2200      	movs	r2, #0
 8006558:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800655a:	485e      	ldr	r0, [pc, #376]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 800655c:	f001 feea 	bl	8008334 <HAL_DMA_Init>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d001      	beq.n	800656a <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8006566:	f7fe fcdf 	bl	8004f28 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a59      	ldr	r2, [pc, #356]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 800656e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006570:	4a58      	ldr	r2, [pc, #352]	@ (80066d4 <HAL_UART_MspInit+0x2a4>)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8006576:	2200      	movs	r2, #0
 8006578:	2100      	movs	r1, #0
 800657a:	205b      	movs	r0, #91	@ 0x5b
 800657c:	f001 fea5 	bl	80082ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006580:	205b      	movs	r0, #91	@ 0x5b
 8006582:	f001 febc 	bl	80082fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8006586:	e097      	b.n	80066b8 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a53      	ldr	r2, [pc, #332]	@ (80066dc <HAL_UART_MspInit+0x2ac>)
 800658e:	4293      	cmp	r3, r2
 8006590:	f040 8092 	bne.w	80066b8 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8006594:	2302      	movs	r3, #2
 8006596:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8006598:	2300      	movs	r3, #0
 800659a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800659c:	f107 0318 	add.w	r3, r7, #24
 80065a0:	4618      	mov	r0, r3
 80065a2:	f003 f9a5 	bl	80098f0 <HAL_RCCEx_PeriphCLKConfig>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d001      	beq.n	80065b0 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80065ac:	f7fe fcbc 	bl	8004f28 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80065b0:	4b44      	ldr	r3, [pc, #272]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 80065b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b4:	4a43      	ldr	r2, [pc, #268]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 80065b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80065bc:	4b41      	ldr	r3, [pc, #260]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 80065be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065c8:	4b3e      	ldr	r3, [pc, #248]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 80065ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065cc:	4a3d      	ldr	r2, [pc, #244]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065d4:	4b3b      	ldr	r3, [pc, #236]	@ (80066c4 <HAL_UART_MspInit+0x294>)
 80065d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	60bb      	str	r3, [r7, #8]
 80065de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80065e0:	230c      	movs	r3, #12
 80065e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e4:	2302      	movs	r3, #2
 80065e6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e8:	2300      	movs	r3, #0
 80065ea:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065ec:	2300      	movs	r3, #0
 80065ee:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80065f0:	2307      	movs	r3, #7
 80065f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065f4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80065f8:	4619      	mov	r1, r3
 80065fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80065fe:	f002 f9cb 	bl	8008998 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8006602:	4b37      	ldr	r3, [pc, #220]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 8006604:	4a37      	ldr	r2, [pc, #220]	@ (80066e4 <HAL_UART_MspInit+0x2b4>)
 8006606:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006608:	4b35      	ldr	r3, [pc, #212]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 800660a:	221a      	movs	r2, #26
 800660c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800660e:	4b34      	ldr	r3, [pc, #208]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 8006610:	2200      	movs	r2, #0
 8006612:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006614:	4b32      	ldr	r3, [pc, #200]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 8006616:	2200      	movs	r2, #0
 8006618:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800661a:	4b31      	ldr	r3, [pc, #196]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 800661c:	2280      	movs	r2, #128	@ 0x80
 800661e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006620:	4b2f      	ldr	r3, [pc, #188]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 8006622:	2200      	movs	r2, #0
 8006624:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006626:	4b2e      	ldr	r3, [pc, #184]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 8006628:	2200      	movs	r2, #0
 800662a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800662c:	4b2c      	ldr	r3, [pc, #176]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 800662e:	2200      	movs	r2, #0
 8006630:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006632:	4b2b      	ldr	r3, [pc, #172]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 8006634:	2200      	movs	r2, #0
 8006636:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006638:	4829      	ldr	r0, [pc, #164]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 800663a:	f001 fe7b 	bl	8008334 <HAL_DMA_Init>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <HAL_UART_MspInit+0x218>
      Error_Handler();
 8006644:	f7fe fc70 	bl	8004f28 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a25      	ldr	r2, [pc, #148]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 800664c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006650:	4a23      	ldr	r2, [pc, #140]	@ (80066e0 <HAL_UART_MspInit+0x2b0>)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8006656:	4b24      	ldr	r3, [pc, #144]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 8006658:	4a24      	ldr	r2, [pc, #144]	@ (80066ec <HAL_UART_MspInit+0x2bc>)
 800665a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800665c:	4b22      	ldr	r3, [pc, #136]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 800665e:	221b      	movs	r2, #27
 8006660:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006662:	4b21      	ldr	r3, [pc, #132]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 8006664:	2210      	movs	r2, #16
 8006666:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006668:	4b1f      	ldr	r3, [pc, #124]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 800666a:	2200      	movs	r2, #0
 800666c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800666e:	4b1e      	ldr	r3, [pc, #120]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 8006670:	2280      	movs	r2, #128	@ 0x80
 8006672:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006674:	4b1c      	ldr	r3, [pc, #112]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 8006676:	2200      	movs	r2, #0
 8006678:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800667a:	4b1b      	ldr	r3, [pc, #108]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 800667c:	2200      	movs	r2, #0
 800667e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006680:	4b19      	ldr	r3, [pc, #100]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 8006682:	2200      	movs	r2, #0
 8006684:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006686:	4b18      	ldr	r3, [pc, #96]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 8006688:	2200      	movs	r2, #0
 800668a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800668c:	4816      	ldr	r0, [pc, #88]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 800668e:	f001 fe51 	bl	8008334 <HAL_DMA_Init>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8006698:	f7fe fc46 	bl	8004f28 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a12      	ldr	r2, [pc, #72]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 80066a0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80066a2:	4a11      	ldr	r2, [pc, #68]	@ (80066e8 <HAL_UART_MspInit+0x2b8>)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80066a8:	2200      	movs	r2, #0
 80066aa:	2100      	movs	r1, #0
 80066ac:	2026      	movs	r0, #38	@ 0x26
 80066ae:	f001 fe0c 	bl	80082ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80066b2:	2026      	movs	r0, #38	@ 0x26
 80066b4:	f001 fe23 	bl	80082fe <HAL_NVIC_EnableIRQ>
}
 80066b8:	bf00      	nop
 80066ba:	3780      	adds	r7, #128	@ 0x80
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40008000 	.word	0x40008000
 80066c4:	40021000 	.word	0x40021000
 80066c8:	48000400 	.word	0x48000400
 80066cc:	20001f1c 	.word	0x20001f1c
 80066d0:	40020044 	.word	0x40020044
 80066d4:	20001f7c 	.word	0x20001f7c
 80066d8:	40020058 	.word	0x40020058
 80066dc:	40004400 	.word	0x40004400
 80066e0:	20001fdc 	.word	0x20001fdc
 80066e4:	4002001c 	.word	0x4002001c
 80066e8:	2000203c 	.word	0x2000203c
 80066ec:	40020030 	.word	0x40020030

080066f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80066f0:	480d      	ldr	r0, [pc, #52]	@ (8006728 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80066f2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80066f4:	f7ff f992 	bl	8005a1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80066f8:	480c      	ldr	r0, [pc, #48]	@ (800672c <LoopForever+0x6>)
  ldr r1, =_edata
 80066fa:	490d      	ldr	r1, [pc, #52]	@ (8006730 <LoopForever+0xa>)
  ldr r2, =_sidata
 80066fc:	4a0d      	ldr	r2, [pc, #52]	@ (8006734 <LoopForever+0xe>)
  movs r3, #0
 80066fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006700:	e002      	b.n	8006708 <LoopCopyDataInit>

08006702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006706:	3304      	adds	r3, #4

08006708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800670a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800670c:	d3f9      	bcc.n	8006702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800670e:	4a0a      	ldr	r2, [pc, #40]	@ (8006738 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006710:	4c0a      	ldr	r4, [pc, #40]	@ (800673c <LoopForever+0x16>)
  movs r3, #0
 8006712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006714:	e001      	b.n	800671a <LoopFillZerobss>

08006716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006718:	3204      	adds	r2, #4

0800671a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800671a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800671c:	d3fb      	bcc.n	8006716 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800671e:	f008 f8ed 	bl	800e8fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006722:	f7fc ffcb 	bl	80036bc <main>

08006726 <LoopForever>:

LoopForever:
    b LoopForever
 8006726:	e7fe      	b.n	8006726 <LoopForever>
  ldr   r0, =_estack
 8006728:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800672c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006730:	200003f0 	.word	0x200003f0
  ldr r2, =_sidata
 8006734:	0800f9f8 	.word	0x0800f9f8
  ldr r2, =_sbss
 8006738:	200003f0 	.word	0x200003f0
  ldr r4, =_ebss
 800673c:	200021e8 	.word	0x200021e8

08006740 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006740:	e7fe      	b.n	8006740 <ADC1_2_IRQHandler>

08006742 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006742:	b580      	push	{r7, lr}
 8006744:	b082      	sub	sp, #8
 8006746:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006748:	2300      	movs	r3, #0
 800674a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800674c:	2003      	movs	r0, #3
 800674e:	f001 fdb1 	bl	80082b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006752:	2000      	movs	r0, #0
 8006754:	f000 f80e 	bl	8006774 <HAL_InitTick>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	71fb      	strb	r3, [r7, #7]
 8006762:	e001      	b.n	8006768 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006764:	f7ff f856 	bl	8005814 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006768:	79fb      	ldrb	r3, [r7, #7]

}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006780:	4b16      	ldr	r3, [pc, #88]	@ (80067dc <HAL_InitTick+0x68>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d022      	beq.n	80067ce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006788:	4b15      	ldr	r3, [pc, #84]	@ (80067e0 <HAL_InitTick+0x6c>)
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	4b13      	ldr	r3, [pc, #76]	@ (80067dc <HAL_InitTick+0x68>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8006794:	fbb1 f3f3 	udiv	r3, r1, r3
 8006798:	fbb2 f3f3 	udiv	r3, r2, r3
 800679c:	4618      	mov	r0, r3
 800679e:	f001 fdbc 	bl	800831a <HAL_SYSTICK_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d10f      	bne.n	80067c8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b0f      	cmp	r3, #15
 80067ac:	d809      	bhi.n	80067c2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067ae:	2200      	movs	r2, #0
 80067b0:	6879      	ldr	r1, [r7, #4]
 80067b2:	f04f 30ff 	mov.w	r0, #4294967295
 80067b6:	f001 fd88 	bl	80082ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80067ba:	4a0a      	ldr	r2, [pc, #40]	@ (80067e4 <HAL_InitTick+0x70>)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6013      	str	r3, [r2, #0]
 80067c0:	e007      	b.n	80067d2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	73fb      	strb	r3, [r7, #15]
 80067c6:	e004      	b.n	80067d2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	73fb      	strb	r3, [r7, #15]
 80067cc:	e001      	b.n	80067d2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	2000039c 	.word	0x2000039c
 80067e0:	20000394 	.word	0x20000394
 80067e4:	20000398 	.word	0x20000398

080067e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80067e8:	b480      	push	{r7}
 80067ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80067ec:	4b05      	ldr	r3, [pc, #20]	@ (8006804 <HAL_IncTick+0x1c>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	4b05      	ldr	r3, [pc, #20]	@ (8006808 <HAL_IncTick+0x20>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4413      	add	r3, r2
 80067f6:	4a03      	ldr	r2, [pc, #12]	@ (8006804 <HAL_IncTick+0x1c>)
 80067f8:	6013      	str	r3, [r2, #0]
}
 80067fa:	bf00      	nop
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	2000209c 	.word	0x2000209c
 8006808:	2000039c 	.word	0x2000039c

0800680c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
  return uwTick;
 8006810:	4b03      	ldr	r3, [pc, #12]	@ (8006820 <HAL_GetTick+0x14>)
 8006812:	681b      	ldr	r3, [r3, #0]
}
 8006814:	4618      	mov	r0, r3
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	2000209c 	.word	0x2000209c

08006824 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	431a      	orrs	r2, r3
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	609a      	str	r2, [r3, #8]
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	431a      	orrs	r2, r3
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	609a      	str	r2, [r3, #8]
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006880:	4618      	mov	r0, r3
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
 8006898:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3360      	adds	r3, #96	@ 0x60
 800689e:	461a      	mov	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	4b08      	ldr	r3, [pc, #32]	@ (80068d0 <LL_ADC_SetOffset+0x44>)
 80068ae:	4013      	ands	r3, r2
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	4313      	orrs	r3, r2
 80068bc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	03fff000 	.word	0x03fff000

080068d4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3360      	adds	r3, #96	@ 0x60
 80068e2:	461a      	mov	r2, r3
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3360      	adds	r3, #96	@ 0x60
 8006910:	461a      	mov	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4413      	add	r3, r2
 8006918:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	431a      	orrs	r2, r3
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006936:	b480      	push	{r7}
 8006938:	b087      	sub	sp, #28
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3360      	adds	r3, #96	@ 0x60
 8006946:	461a      	mov	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	431a      	orrs	r2, r3
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006960:	bf00      	nop
 8006962:	371c      	adds	r7, #28
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3360      	adds	r3, #96	@ 0x60
 800697c:	461a      	mov	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	431a      	orrs	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	695b      	ldr	r3, [r3, #20]
 80069b0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	615a      	str	r2, [r3, #20]
}
 80069bc:	bf00      	nop
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80069dc:	2301      	movs	r3, #1
 80069de:	e000      	b.n	80069e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b087      	sub	sp, #28
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	3330      	adds	r3, #48	@ 0x30
 80069fe:	461a      	mov	r2, r3
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	0a1b      	lsrs	r3, r3, #8
 8006a04:	009b      	lsls	r3, r3, #2
 8006a06:	f003 030c 	and.w	r3, r3, #12
 8006a0a:	4413      	add	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	f003 031f 	and.w	r3, r3, #31
 8006a18:	211f      	movs	r1, #31
 8006a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1e:	43db      	mvns	r3, r3
 8006a20:	401a      	ands	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	0e9b      	lsrs	r3, r3, #26
 8006a26:	f003 011f 	and.w	r1, r3, #31
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f003 031f 	and.w	r3, r3, #31
 8006a30:	fa01 f303 	lsl.w	r3, r1, r3
 8006a34:	431a      	orrs	r2, r3
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006a3a:	bf00      	nop
 8006a3c:	371c      	adds	r7, #28
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b087      	sub	sp, #28
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	60f8      	str	r0, [r7, #12]
 8006a4e:	60b9      	str	r1, [r7, #8]
 8006a50:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	3314      	adds	r3, #20
 8006a56:	461a      	mov	r2, r3
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	0e5b      	lsrs	r3, r3, #25
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	4413      	add	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	0d1b      	lsrs	r3, r3, #20
 8006a6e:	f003 031f 	and.w	r3, r3, #31
 8006a72:	2107      	movs	r1, #7
 8006a74:	fa01 f303 	lsl.w	r3, r1, r3
 8006a78:	43db      	mvns	r3, r3
 8006a7a:	401a      	ands	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	0d1b      	lsrs	r3, r3, #20
 8006a80:	f003 031f 	and.w	r3, r3, #31
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8a:	431a      	orrs	r2, r3
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006a90:	bf00      	nop
 8006a92:	371c      	adds	r7, #28
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f003 0318 	and.w	r3, r3, #24
 8006abe:	4908      	ldr	r1, [pc, #32]	@ (8006ae0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006ac0:	40d9      	lsrs	r1, r3
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	400b      	ands	r3, r1
 8006ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aca:	431a      	orrs	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006ad2:	bf00      	nop
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	0007ffff 	.word	0x0007ffff

08006ae4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f003 031f 	and.w	r3, r3, #31
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006b10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6093      	str	r3, [r2, #8]
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	689b      	ldr	r3, [r3, #8]
 8006b30:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b38:	d101      	bne.n	8006b3e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e000      	b.n	8006b40 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006b5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006b60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006b84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b88:	d101      	bne.n	8006b8e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006bb0:	f043 0201 	orr.w	r2, r3, #1
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006bd8:	f043 0202 	orr.w	r2, r3, #2
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f003 0301 	and.w	r3, r3, #1
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d101      	bne.n	8006c04 <LL_ADC_IsEnabled+0x18>
 8006c00:	2301      	movs	r3, #1
 8006c02:	e000      	b.n	8006c06 <LL_ADC_IsEnabled+0x1a>
 8006c04:	2300      	movs	r3, #0
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	370c      	adds	r7, #12
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d101      	bne.n	8006c2a <LL_ADC_IsDisableOngoing+0x18>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <LL_ADC_IsDisableOngoing+0x1a>
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006c4c:	f043 0204 	orr.w	r2, r3, #4
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f003 0304 	and.w	r3, r3, #4
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d101      	bne.n	8006c78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006c74:	2301      	movs	r3, #1
 8006c76:	e000      	b.n	8006c7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	370c      	adds	r7, #12
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b08      	cmp	r3, #8
 8006c98:	d101      	bne.n	8006c9e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e000      	b.n	8006ca0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006cac:	b590      	push	{r4, r7, lr}
 8006cae:	b089      	sub	sp, #36	@ 0x24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e1a9      	b.n	800701a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d109      	bne.n	8006ce8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7fc f86d 	bl	8002db4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7ff ff19 	bl	8006b24 <LL_ADC_IsDeepPowerDownEnabled>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d004      	beq.n	8006d02 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff feff 	bl	8006b00 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7ff ff34 	bl	8006b74 <LL_ADC_IsInternalRegulatorEnabled>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d115      	bne.n	8006d3e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff ff18 	bl	8006b4c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d1c:	4b9c      	ldr	r3, [pc, #624]	@ (8006f90 <HAL_ADC_Init+0x2e4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	099b      	lsrs	r3, r3, #6
 8006d22:	4a9c      	ldr	r2, [pc, #624]	@ (8006f94 <HAL_ADC_Init+0x2e8>)
 8006d24:	fba2 2303 	umull	r2, r3, r2, r3
 8006d28:	099b      	lsrs	r3, r3, #6
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006d30:	e002      	b.n	8006d38 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f9      	bne.n	8006d32 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff ff16 	bl	8006b74 <LL_ADC_IsInternalRegulatorEnabled>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10d      	bne.n	8006d6a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d52:	f043 0210 	orr.w	r2, r3, #16
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d5e:	f043 0201 	orr.w	r2, r3, #1
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff ff76 	bl	8006c60 <LL_ADC_REG_IsConversionOngoing>
 8006d74:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d7a:	f003 0310 	and.w	r3, r3, #16
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f040 8142 	bne.w	8007008 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 813e 	bne.w	8007008 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d90:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006d94:	f043 0202 	orr.w	r2, r3, #2
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ff23 	bl	8006bec <LL_ADC_IsEnabled>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d141      	bne.n	8006e30 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006db4:	d004      	beq.n	8006dc0 <HAL_ADC_Init+0x114>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a77      	ldr	r2, [pc, #476]	@ (8006f98 <HAL_ADC_Init+0x2ec>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d10f      	bne.n	8006de0 <HAL_ADC_Init+0x134>
 8006dc0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006dc4:	f7ff ff12 	bl	8006bec <LL_ADC_IsEnabled>
 8006dc8:	4604      	mov	r4, r0
 8006dca:	4873      	ldr	r0, [pc, #460]	@ (8006f98 <HAL_ADC_Init+0x2ec>)
 8006dcc:	f7ff ff0e 	bl	8006bec <LL_ADC_IsEnabled>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	4323      	orrs	r3, r4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bf0c      	ite	eq
 8006dd8:	2301      	moveq	r3, #1
 8006dda:	2300      	movne	r3, #0
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	e012      	b.n	8006e06 <HAL_ADC_Init+0x15a>
 8006de0:	486e      	ldr	r0, [pc, #440]	@ (8006f9c <HAL_ADC_Init+0x2f0>)
 8006de2:	f7ff ff03 	bl	8006bec <LL_ADC_IsEnabled>
 8006de6:	4604      	mov	r4, r0
 8006de8:	486d      	ldr	r0, [pc, #436]	@ (8006fa0 <HAL_ADC_Init+0x2f4>)
 8006dea:	f7ff feff 	bl	8006bec <LL_ADC_IsEnabled>
 8006dee:	4603      	mov	r3, r0
 8006df0:	431c      	orrs	r4, r3
 8006df2:	486c      	ldr	r0, [pc, #432]	@ (8006fa4 <HAL_ADC_Init+0x2f8>)
 8006df4:	f7ff fefa 	bl	8006bec <LL_ADC_IsEnabled>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	4323      	orrs	r3, r4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bf0c      	ite	eq
 8006e00:	2301      	moveq	r3, #1
 8006e02:	2300      	movne	r3, #0
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d012      	beq.n	8006e30 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e12:	d004      	beq.n	8006e1e <HAL_ADC_Init+0x172>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a5f      	ldr	r2, [pc, #380]	@ (8006f98 <HAL_ADC_Init+0x2ec>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d101      	bne.n	8006e22 <HAL_ADC_Init+0x176>
 8006e1e:	4a62      	ldr	r2, [pc, #392]	@ (8006fa8 <HAL_ADC_Init+0x2fc>)
 8006e20:	e000      	b.n	8006e24 <HAL_ADC_Init+0x178>
 8006e22:	4a62      	ldr	r2, [pc, #392]	@ (8006fac <HAL_ADC_Init+0x300>)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	f7ff fcfa 	bl	8006824 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	7f5b      	ldrb	r3, [r3, #29]
 8006e34:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e3a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006e40:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006e46:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e4e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006e50:	4313      	orrs	r3, r2
 8006e52:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d106      	bne.n	8006e6c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e62:	3b01      	subs	r3, #1
 8006e64:	045b      	lsls	r3, r3, #17
 8006e66:	69ba      	ldr	r2, [r7, #24]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d009      	beq.n	8006e88 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e78:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e80:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	68da      	ldr	r2, [r3, #12]
 8006e8e:	4b48      	ldr	r3, [pc, #288]	@ (8006fb0 <HAL_ADC_Init+0x304>)
 8006e90:	4013      	ands	r3, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	6812      	ldr	r2, [r2, #0]
 8006e96:	69b9      	ldr	r1, [r7, #24]
 8006e98:	430b      	orrs	r3, r1
 8006e9a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7ff fee5 	bl	8006c86 <LL_ADC_INJ_IsConversionOngoing>
 8006ebc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d17f      	bne.n	8006fc4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d17c      	bne.n	8006fc4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006ece:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ed6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ee6:	f023 0302 	bic.w	r3, r3, #2
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	6812      	ldr	r2, [r2, #0]
 8006eee:	69b9      	ldr	r1, [r7, #24]
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	691b      	ldr	r3, [r3, #16]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d017      	beq.n	8006f2c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	691a      	ldr	r2, [r3, #16]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006f0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006f14:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006f18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6911      	ldr	r1, [r2, #16]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	430b      	orrs	r3, r1
 8006f26:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006f2a:	e013      	b.n	8006f54 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	691a      	ldr	r2, [r3, #16]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f3a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	6812      	ldr	r2, [r2, #0]
 8006f48:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006f4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006f50:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d12a      	bne.n	8006fb4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006f68:	f023 0304 	bic.w	r3, r3, #4
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006f74:	4311      	orrs	r1, r2
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006f7a:	4311      	orrs	r1, r2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006f80:	430a      	orrs	r2, r1
 8006f82:	431a      	orrs	r2, r3
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f042 0201 	orr.w	r2, r2, #1
 8006f8c:	611a      	str	r2, [r3, #16]
 8006f8e:	e019      	b.n	8006fc4 <HAL_ADC_Init+0x318>
 8006f90:	20000394 	.word	0x20000394
 8006f94:	053e2d63 	.word	0x053e2d63
 8006f98:	50000100 	.word	0x50000100
 8006f9c:	50000400 	.word	0x50000400
 8006fa0:	50000500 	.word	0x50000500
 8006fa4:	50000600 	.word	0x50000600
 8006fa8:	50000300 	.word	0x50000300
 8006fac:	50000700 	.word	0x50000700
 8006fb0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f022 0201 	bic.w	r2, r2, #1
 8006fc2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d10c      	bne.n	8006fe6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd2:	f023 010f 	bic.w	r1, r3, #15
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	1e5a      	subs	r2, r3, #1
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fe4:	e007      	b.n	8006ff6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 020f 	bic.w	r2, r2, #15
 8006ff4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ffa:	f023 0303 	bic.w	r3, r3, #3
 8006ffe:	f043 0201 	orr.w	r2, r3, #1
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007006:	e007      	b.n	8007018 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800700c:	f043 0210 	orr.w	r2, r3, #16
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8007018:	7ffb      	ldrb	r3, [r7, #31]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3724      	adds	r7, #36	@ 0x24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd90      	pop	{r4, r7, pc}
 8007022:	bf00      	nop

08007024 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007038:	d004      	beq.n	8007044 <HAL_ADC_Start_DMA+0x20>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a5a      	ldr	r2, [pc, #360]	@ (80071a8 <HAL_ADC_Start_DMA+0x184>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d101      	bne.n	8007048 <HAL_ADC_Start_DMA+0x24>
 8007044:	4b59      	ldr	r3, [pc, #356]	@ (80071ac <HAL_ADC_Start_DMA+0x188>)
 8007046:	e000      	b.n	800704a <HAL_ADC_Start_DMA+0x26>
 8007048:	4b59      	ldr	r3, [pc, #356]	@ (80071b0 <HAL_ADC_Start_DMA+0x18c>)
 800704a:	4618      	mov	r0, r3
 800704c:	f7ff fd4a 	bl	8006ae4 <LL_ADC_GetMultimode>
 8007050:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fe02 	bl	8006c60 <LL_ADC_REG_IsConversionOngoing>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	f040 809b 	bne.w	800719a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800706a:	2b01      	cmp	r3, #1
 800706c:	d101      	bne.n	8007072 <HAL_ADC_Start_DMA+0x4e>
 800706e:	2302      	movs	r3, #2
 8007070:	e096      	b.n	80071a0 <HAL_ADC_Start_DMA+0x17c>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2201      	movs	r2, #1
 8007076:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a4d      	ldr	r2, [pc, #308]	@ (80071b4 <HAL_ADC_Start_DMA+0x190>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d008      	beq.n	8007096 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d005      	beq.n	8007096 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b05      	cmp	r3, #5
 800708e:	d002      	beq.n	8007096 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	2b09      	cmp	r3, #9
 8007094:	d17a      	bne.n	800718c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fcf6 	bl	8007a88 <ADC_Enable>
 800709c:	4603      	mov	r3, r0
 800709e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d16d      	bne.n	8007182 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070aa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80070ae:	f023 0301 	bic.w	r3, r3, #1
 80070b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a3a      	ldr	r2, [pc, #232]	@ (80071a8 <HAL_ADC_Start_DMA+0x184>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d009      	beq.n	80070d8 <HAL_ADC_Start_DMA+0xb4>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a3b      	ldr	r2, [pc, #236]	@ (80071b8 <HAL_ADC_Start_DMA+0x194>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d002      	beq.n	80070d4 <HAL_ADC_Start_DMA+0xb0>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	e003      	b.n	80070dc <HAL_ADC_Start_DMA+0xb8>
 80070d4:	4b39      	ldr	r3, [pc, #228]	@ (80071bc <HAL_ADC_Start_DMA+0x198>)
 80070d6:	e001      	b.n	80070dc <HAL_ADC_Start_DMA+0xb8>
 80070d8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d002      	beq.n	80070ea <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d105      	bne.n	80070f6 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ee:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d006      	beq.n	8007110 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007106:	f023 0206 	bic.w	r2, r3, #6
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	661a      	str	r2, [r3, #96]	@ 0x60
 800710e:	e002      	b.n	8007116 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800711a:	4a29      	ldr	r2, [pc, #164]	@ (80071c0 <HAL_ADC_Start_DMA+0x19c>)
 800711c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007122:	4a28      	ldr	r2, [pc, #160]	@ (80071c4 <HAL_ADC_Start_DMA+0x1a0>)
 8007124:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712a:	4a27      	ldr	r2, [pc, #156]	@ (80071c8 <HAL_ADC_Start_DMA+0x1a4>)
 800712c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	221c      	movs	r2, #28
 8007134:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f042 0210 	orr.w	r2, r2, #16
 800714c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68da      	ldr	r2, [r3, #12]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0201 	orr.w	r2, r2, #1
 800715c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3340      	adds	r3, #64	@ 0x40
 8007168:	4619      	mov	r1, r3
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f001 f989 	bl	8008484 <HAL_DMA_Start_IT>
 8007172:	4603      	mov	r3, r0
 8007174:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4618      	mov	r0, r3
 800717c:	f7ff fd5c 	bl	8006c38 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007180:	e00d      	b.n	800719e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800718a:	e008      	b.n	800719e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8007198:	e001      	b.n	800719e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800719a:	2302      	movs	r3, #2
 800719c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	50000100 	.word	0x50000100
 80071ac:	50000300 	.word	0x50000300
 80071b0:	50000700 	.word	0x50000700
 80071b4:	50000600 	.word	0x50000600
 80071b8:	50000500 	.word	0x50000500
 80071bc:	50000400 	.word	0x50000400
 80071c0:	08007c73 	.word	0x08007c73
 80071c4:	08007d4b 	.word	0x08007d4b
 80071c8:	08007d67 	.word	0x08007d67

080071cc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b0b6      	sub	sp, #216	@ 0xd8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007218:	2300      	movs	r3, #0
 800721a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007222:	2b01      	cmp	r3, #1
 8007224:	d102      	bne.n	800722c <HAL_ADC_ConfigChannel+0x24>
 8007226:	2302      	movs	r3, #2
 8007228:	f000 bc13 	b.w	8007a52 <HAL_ADC_ConfigChannel+0x84a>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff fd11 	bl	8006c60 <LL_ADC_REG_IsConversionOngoing>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	f040 83f3 	bne.w	8007a2c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6818      	ldr	r0, [r3, #0]
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6859      	ldr	r1, [r3, #4]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	f7ff fbcb 	bl	80069ee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff fcff 	bl	8006c60 <LL_ADC_REG_IsConversionOngoing>
 8007262:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fd0b 	bl	8006c86 <LL_ADC_INJ_IsConversionOngoing>
 8007270:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007274:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007278:	2b00      	cmp	r3, #0
 800727a:	f040 81d9 	bne.w	8007630 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800727e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007282:	2b00      	cmp	r3, #0
 8007284:	f040 81d4 	bne.w	8007630 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007290:	d10f      	bne.n	80072b2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6818      	ldr	r0, [r3, #0]
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	2200      	movs	r2, #0
 800729c:	4619      	mov	r1, r3
 800729e:	f7ff fbd2 	bl	8006a46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fb79 	bl	80069a2 <LL_ADC_SetSamplingTimeCommonConfig>
 80072b0:	e00e      	b.n	80072d0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6818      	ldr	r0, [r3, #0]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	6819      	ldr	r1, [r3, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	461a      	mov	r2, r3
 80072c0:	f7ff fbc1 	bl	8006a46 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2100      	movs	r1, #0
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7ff fb69 	bl	80069a2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	695a      	ldr	r2, [r3, #20]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68db      	ldr	r3, [r3, #12]
 80072da:	08db      	lsrs	r3, r3, #3
 80072dc:	f003 0303 	and.w	r3, r3, #3
 80072e0:	005b      	lsls	r3, r3, #1
 80072e2:	fa02 f303 	lsl.w	r3, r2, r3
 80072e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d022      	beq.n	8007338 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6818      	ldr	r0, [r3, #0]
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	6919      	ldr	r1, [r3, #16]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007302:	f7ff fac3 	bl	800688c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6818      	ldr	r0, [r3, #0]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	6919      	ldr	r1, [r3, #16]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	461a      	mov	r2, r3
 8007314:	f7ff fb0f 	bl	8006936 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6818      	ldr	r0, [r3, #0]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007324:	2b01      	cmp	r3, #1
 8007326:	d102      	bne.n	800732e <HAL_ADC_ConfigChannel+0x126>
 8007328:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800732c:	e000      	b.n	8007330 <HAL_ADC_ConfigChannel+0x128>
 800732e:	2300      	movs	r3, #0
 8007330:	461a      	mov	r2, r3
 8007332:	f7ff fb1b 	bl	800696c <LL_ADC_SetOffsetSaturation>
 8007336:	e17b      	b.n	8007630 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	2100      	movs	r1, #0
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff fac8 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 8007344:	4603      	mov	r3, r0
 8007346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <HAL_ADC_ConfigChannel+0x15c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	2100      	movs	r1, #0
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fabd 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 800735a:	4603      	mov	r3, r0
 800735c:	0e9b      	lsrs	r3, r3, #26
 800735e:	f003 021f 	and.w	r2, r3, #31
 8007362:	e01e      	b.n	80073a2 <HAL_ADC_ConfigChannel+0x19a>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2100      	movs	r1, #0
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff fab2 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 8007370:	4603      	mov	r3, r0
 8007372:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007376:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800737a:	fa93 f3a3 	rbit	r3, r3
 800737e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007386:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800738a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8007392:	2320      	movs	r3, #32
 8007394:	e004      	b.n	80073a0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8007396:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800739a:	fab3 f383 	clz	r3, r3
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d105      	bne.n	80073ba <HAL_ADC_ConfigChannel+0x1b2>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	0e9b      	lsrs	r3, r3, #26
 80073b4:	f003 031f 	and.w	r3, r3, #31
 80073b8:	e018      	b.n	80073ec <HAL_ADC_ConfigChannel+0x1e4>
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80073c6:	fa93 f3a3 	rbit	r3, r3
 80073ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80073ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80073d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80073de:	2320      	movs	r3, #32
 80073e0:	e004      	b.n	80073ec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80073e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073e6:	fab3 f383 	clz	r3, r3
 80073ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d106      	bne.n	80073fe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2200      	movs	r2, #0
 80073f6:	2100      	movs	r1, #0
 80073f8:	4618      	mov	r0, r3
 80073fa:	f7ff fa81 	bl	8006900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2101      	movs	r1, #1
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff fa65 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 800740a:	4603      	mov	r3, r0
 800740c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10a      	bne.n	800742a <HAL_ADC_ConfigChannel+0x222>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2101      	movs	r1, #1
 800741a:	4618      	mov	r0, r3
 800741c:	f7ff fa5a 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 8007420:	4603      	mov	r3, r0
 8007422:	0e9b      	lsrs	r3, r3, #26
 8007424:	f003 021f 	and.w	r2, r3, #31
 8007428:	e01e      	b.n	8007468 <HAL_ADC_ConfigChannel+0x260>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2101      	movs	r1, #1
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff fa4f 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 8007436:	4603      	mov	r3, r0
 8007438:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800743c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007440:	fa93 f3a3 	rbit	r3, r3
 8007444:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007448:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800744c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007458:	2320      	movs	r3, #32
 800745a:	e004      	b.n	8007466 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800745c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007460:	fab3 f383 	clz	r3, r3
 8007464:	b2db      	uxtb	r3, r3
 8007466:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007470:	2b00      	cmp	r3, #0
 8007472:	d105      	bne.n	8007480 <HAL_ADC_ConfigChannel+0x278>
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	0e9b      	lsrs	r3, r3, #26
 800747a:	f003 031f 	and.w	r3, r3, #31
 800747e:	e018      	b.n	80074b2 <HAL_ADC_ConfigChannel+0x2aa>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007488:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800748c:	fa93 f3a3 	rbit	r3, r3
 8007490:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8007494:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007498:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800749c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d101      	bne.n	80074a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80074a4:	2320      	movs	r3, #32
 80074a6:	e004      	b.n	80074b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80074a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074ac:	fab3 f383 	clz	r3, r3
 80074b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d106      	bne.n	80074c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2200      	movs	r2, #0
 80074bc:	2101      	movs	r1, #1
 80074be:	4618      	mov	r0, r3
 80074c0:	f7ff fa1e 	bl	8006900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2102      	movs	r1, #2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fa02 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 80074d0:	4603      	mov	r3, r0
 80074d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10a      	bne.n	80074f0 <HAL_ADC_ConfigChannel+0x2e8>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	2102      	movs	r1, #2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff f9f7 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 80074e6:	4603      	mov	r3, r0
 80074e8:	0e9b      	lsrs	r3, r3, #26
 80074ea:	f003 021f 	and.w	r2, r3, #31
 80074ee:	e01e      	b.n	800752e <HAL_ADC_ConfigChannel+0x326>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2102      	movs	r1, #2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff f9ec 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 80074fc:	4603      	mov	r3, r0
 80074fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007502:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007506:	fa93 f3a3 	rbit	r3, r3
 800750a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800750e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007512:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007516:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800751e:	2320      	movs	r3, #32
 8007520:	e004      	b.n	800752c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8007522:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007526:	fab3 f383 	clz	r3, r3
 800752a:	b2db      	uxtb	r3, r3
 800752c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <HAL_ADC_ConfigChannel+0x33e>
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	0e9b      	lsrs	r3, r3, #26
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	e016      	b.n	8007574 <HAL_ADC_ConfigChannel+0x36c>
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800754e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007552:	fa93 f3a3 	rbit	r3, r3
 8007556:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007558:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800755a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800755e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007562:	2b00      	cmp	r3, #0
 8007564:	d101      	bne.n	800756a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007566:	2320      	movs	r3, #32
 8007568:	e004      	b.n	8007574 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800756a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800756e:	fab3 f383 	clz	r3, r3
 8007572:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007574:	429a      	cmp	r2, r3
 8007576:	d106      	bne.n	8007586 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2200      	movs	r2, #0
 800757e:	2102      	movs	r1, #2
 8007580:	4618      	mov	r0, r3
 8007582:	f7ff f9bd 	bl	8006900 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2103      	movs	r1, #3
 800758c:	4618      	mov	r0, r3
 800758e:	f7ff f9a1 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 8007592:	4603      	mov	r3, r0
 8007594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10a      	bne.n	80075b2 <HAL_ADC_ConfigChannel+0x3aa>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2103      	movs	r1, #3
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7ff f996 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 80075a8:	4603      	mov	r3, r0
 80075aa:	0e9b      	lsrs	r3, r3, #26
 80075ac:	f003 021f 	and.w	r2, r3, #31
 80075b0:	e017      	b.n	80075e2 <HAL_ADC_ConfigChannel+0x3da>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2103      	movs	r1, #3
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff f98b 	bl	80068d4 <LL_ADC_GetOffsetChannel>
 80075be:	4603      	mov	r3, r0
 80075c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075c4:	fa93 f3a3 	rbit	r3, r3
 80075c8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80075ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80075ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d101      	bne.n	80075d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80075d4:	2320      	movs	r3, #32
 80075d6:	e003      	b.n	80075e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80075d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075da:	fab3 f383 	clz	r3, r3
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <HAL_ADC_ConfigChannel+0x3f2>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	0e9b      	lsrs	r3, r3, #26
 80075f4:	f003 031f 	and.w	r3, r3, #31
 80075f8:	e011      	b.n	800761e <HAL_ADC_ConfigChannel+0x416>
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007602:	fa93 f3a3 	rbit	r3, r3
 8007606:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007608:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800760a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800760c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8007612:	2320      	movs	r3, #32
 8007614:	e003      	b.n	800761e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007618:	fab3 f383 	clz	r3, r3
 800761c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800761e:	429a      	cmp	r2, r3
 8007620:	d106      	bne.n	8007630 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	2103      	movs	r1, #3
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff f968 	bl	8006900 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff fad9 	bl	8006bec <LL_ADC_IsEnabled>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 813d 	bne.w	80078bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	6819      	ldr	r1, [r3, #0]
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	461a      	mov	r2, r3
 8007650:	f7ff fa24 	bl	8006a9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	4aa2      	ldr	r2, [pc, #648]	@ (80078e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800765a:	4293      	cmp	r3, r2
 800765c:	f040 812e 	bne.w	80078bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10b      	bne.n	8007688 <HAL_ADC_ConfigChannel+0x480>
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	0e9b      	lsrs	r3, r3, #26
 8007676:	3301      	adds	r3, #1
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	2b09      	cmp	r3, #9
 800767e:	bf94      	ite	ls
 8007680:	2301      	movls	r3, #1
 8007682:	2300      	movhi	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	e019      	b.n	80076bc <HAL_ADC_ConfigChannel+0x4b4>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800768e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007690:	fa93 f3a3 	rbit	r3, r3
 8007694:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8007696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007698:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800769a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80076a0:	2320      	movs	r3, #32
 80076a2:	e003      	b.n	80076ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80076a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076a6:	fab3 f383 	clz	r3, r3
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	3301      	adds	r3, #1
 80076ae:	f003 031f 	and.w	r3, r3, #31
 80076b2:	2b09      	cmp	r3, #9
 80076b4:	bf94      	ite	ls
 80076b6:	2301      	movls	r3, #1
 80076b8:	2300      	movhi	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d079      	beq.n	80077b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d107      	bne.n	80076dc <HAL_ADC_ConfigChannel+0x4d4>
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	0e9b      	lsrs	r3, r3, #26
 80076d2:	3301      	adds	r3, #1
 80076d4:	069b      	lsls	r3, r3, #26
 80076d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80076da:	e015      	b.n	8007708 <HAL_ADC_ConfigChannel+0x500>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076e4:	fa93 f3a3 	rbit	r3, r3
 80076e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80076ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80076ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80076f4:	2320      	movs	r3, #32
 80076f6:	e003      	b.n	8007700 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80076f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076fa:	fab3 f383 	clz	r3, r3
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	3301      	adds	r3, #1
 8007702:	069b      	lsls	r3, r3, #26
 8007704:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007710:	2b00      	cmp	r3, #0
 8007712:	d109      	bne.n	8007728 <HAL_ADC_ConfigChannel+0x520>
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	0e9b      	lsrs	r3, r3, #26
 800771a:	3301      	adds	r3, #1
 800771c:	f003 031f 	and.w	r3, r3, #31
 8007720:	2101      	movs	r1, #1
 8007722:	fa01 f303 	lsl.w	r3, r1, r3
 8007726:	e017      	b.n	8007758 <HAL_ADC_ConfigChannel+0x550>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800772e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007730:	fa93 f3a3 	rbit	r3, r3
 8007734:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007738:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800773a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007740:	2320      	movs	r3, #32
 8007742:	e003      	b.n	800774c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007744:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007746:	fab3 f383 	clz	r3, r3
 800774a:	b2db      	uxtb	r3, r3
 800774c:	3301      	adds	r3, #1
 800774e:	f003 031f 	and.w	r3, r3, #31
 8007752:	2101      	movs	r1, #1
 8007754:	fa01 f303 	lsl.w	r3, r1, r3
 8007758:	ea42 0103 	orr.w	r1, r2, r3
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10a      	bne.n	800777e <HAL_ADC_ConfigChannel+0x576>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	0e9b      	lsrs	r3, r3, #26
 800776e:	3301      	adds	r3, #1
 8007770:	f003 021f 	and.w	r2, r3, #31
 8007774:	4613      	mov	r3, r2
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	4413      	add	r3, r2
 800777a:	051b      	lsls	r3, r3, #20
 800777c:	e018      	b.n	80077b0 <HAL_ADC_ConfigChannel+0x5a8>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007786:	fa93 f3a3 	rbit	r3, r3
 800778a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800778c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800778e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8007796:	2320      	movs	r3, #32
 8007798:	e003      	b.n	80077a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800779a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800779c:	fab3 f383 	clz	r3, r3
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	3301      	adds	r3, #1
 80077a4:	f003 021f 	and.w	r2, r3, #31
 80077a8:	4613      	mov	r3, r2
 80077aa:	005b      	lsls	r3, r3, #1
 80077ac:	4413      	add	r3, r2
 80077ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077b0:	430b      	orrs	r3, r1
 80077b2:	e07e      	b.n	80078b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d107      	bne.n	80077d0 <HAL_ADC_ConfigChannel+0x5c8>
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	0e9b      	lsrs	r3, r3, #26
 80077c6:	3301      	adds	r3, #1
 80077c8:	069b      	lsls	r3, r3, #26
 80077ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80077ce:	e015      	b.n	80077fc <HAL_ADC_ConfigChannel+0x5f4>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077d8:	fa93 f3a3 	rbit	r3, r3
 80077dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80077e8:	2320      	movs	r3, #32
 80077ea:	e003      	b.n	80077f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80077ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077ee:	fab3 f383 	clz	r3, r3
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	3301      	adds	r3, #1
 80077f6:	069b      	lsls	r3, r3, #26
 80077f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007804:	2b00      	cmp	r3, #0
 8007806:	d109      	bne.n	800781c <HAL_ADC_ConfigChannel+0x614>
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	0e9b      	lsrs	r3, r3, #26
 800780e:	3301      	adds	r3, #1
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	2101      	movs	r1, #1
 8007816:	fa01 f303 	lsl.w	r3, r1, r3
 800781a:	e017      	b.n	800784c <HAL_ADC_ConfigChannel+0x644>
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007822:	6a3b      	ldr	r3, [r7, #32]
 8007824:	fa93 f3a3 	rbit	r3, r3
 8007828:	61fb      	str	r3, [r7, #28]
  return result;
 800782a:	69fb      	ldr	r3, [r7, #28]
 800782c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800782e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007834:	2320      	movs	r3, #32
 8007836:	e003      	b.n	8007840 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783a:	fab3 f383 	clz	r3, r3
 800783e:	b2db      	uxtb	r3, r3
 8007840:	3301      	adds	r3, #1
 8007842:	f003 031f 	and.w	r3, r3, #31
 8007846:	2101      	movs	r1, #1
 8007848:	fa01 f303 	lsl.w	r3, r1, r3
 800784c:	ea42 0103 	orr.w	r1, r2, r3
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10d      	bne.n	8007878 <HAL_ADC_ConfigChannel+0x670>
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	0e9b      	lsrs	r3, r3, #26
 8007862:	3301      	adds	r3, #1
 8007864:	f003 021f 	and.w	r2, r3, #31
 8007868:	4613      	mov	r3, r2
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	4413      	add	r3, r2
 800786e:	3b1e      	subs	r3, #30
 8007870:	051b      	lsls	r3, r3, #20
 8007872:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007876:	e01b      	b.n	80078b0 <HAL_ADC_ConfigChannel+0x6a8>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	fa93 f3a3 	rbit	r3, r3
 8007884:	613b      	str	r3, [r7, #16]
  return result;
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007890:	2320      	movs	r3, #32
 8007892:	e003      	b.n	800789c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	fab3 f383 	clz	r3, r3
 800789a:	b2db      	uxtb	r3, r3
 800789c:	3301      	adds	r3, #1
 800789e:	f003 021f 	and.w	r2, r3, #31
 80078a2:	4613      	mov	r3, r2
 80078a4:	005b      	lsls	r3, r3, #1
 80078a6:	4413      	add	r3, r2
 80078a8:	3b1e      	subs	r3, #30
 80078aa:	051b      	lsls	r3, r3, #20
 80078ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078b6:	4619      	mov	r1, r3
 80078b8:	f7ff f8c5 	bl	8006a46 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	4b09      	ldr	r3, [pc, #36]	@ (80078e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80be 	beq.w	8007a46 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078d2:	d004      	beq.n	80078de <HAL_ADC_ConfigChannel+0x6d6>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a04      	ldr	r2, [pc, #16]	@ (80078ec <HAL_ADC_ConfigChannel+0x6e4>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d10a      	bne.n	80078f4 <HAL_ADC_ConfigChannel+0x6ec>
 80078de:	4b04      	ldr	r3, [pc, #16]	@ (80078f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80078e0:	e009      	b.n	80078f6 <HAL_ADC_ConfigChannel+0x6ee>
 80078e2:	bf00      	nop
 80078e4:	407f0000 	.word	0x407f0000
 80078e8:	80080000 	.word	0x80080000
 80078ec:	50000100 	.word	0x50000100
 80078f0:	50000300 	.word	0x50000300
 80078f4:	4b59      	ldr	r3, [pc, #356]	@ (8007a5c <HAL_ADC_ConfigChannel+0x854>)
 80078f6:	4618      	mov	r0, r3
 80078f8:	f7fe ffba 	bl	8006870 <LL_ADC_GetCommonPathInternalCh>
 80078fc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a56      	ldr	r2, [pc, #344]	@ (8007a60 <HAL_ADC_ConfigChannel+0x858>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d004      	beq.n	8007914 <HAL_ADC_ConfigChannel+0x70c>
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a55      	ldr	r2, [pc, #340]	@ (8007a64 <HAL_ADC_ConfigChannel+0x85c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d13a      	bne.n	800798a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007914:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007918:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800791c:	2b00      	cmp	r3, #0
 800791e:	d134      	bne.n	800798a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007928:	d005      	beq.n	8007936 <HAL_ADC_ConfigChannel+0x72e>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a4e      	ldr	r2, [pc, #312]	@ (8007a68 <HAL_ADC_ConfigChannel+0x860>)
 8007930:	4293      	cmp	r3, r2
 8007932:	f040 8085 	bne.w	8007a40 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800793e:	d004      	beq.n	800794a <HAL_ADC_ConfigChannel+0x742>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a49      	ldr	r2, [pc, #292]	@ (8007a6c <HAL_ADC_ConfigChannel+0x864>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d101      	bne.n	800794e <HAL_ADC_ConfigChannel+0x746>
 800794a:	4a49      	ldr	r2, [pc, #292]	@ (8007a70 <HAL_ADC_ConfigChannel+0x868>)
 800794c:	e000      	b.n	8007950 <HAL_ADC_ConfigChannel+0x748>
 800794e:	4a43      	ldr	r2, [pc, #268]	@ (8007a5c <HAL_ADC_ConfigChannel+0x854>)
 8007950:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007954:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007958:	4619      	mov	r1, r3
 800795a:	4610      	mov	r0, r2
 800795c:	f7fe ff75 	bl	800684a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007960:	4b44      	ldr	r3, [pc, #272]	@ (8007a74 <HAL_ADC_ConfigChannel+0x86c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	099b      	lsrs	r3, r3, #6
 8007966:	4a44      	ldr	r2, [pc, #272]	@ (8007a78 <HAL_ADC_ConfigChannel+0x870>)
 8007968:	fba2 2303 	umull	r2, r3, r2, r3
 800796c:	099b      	lsrs	r3, r3, #6
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	4613      	mov	r3, r2
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	4413      	add	r3, r2
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800797a:	e002      	b.n	8007982 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3b01      	subs	r3, #1
 8007980:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1f9      	bne.n	800797c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007988:	e05a      	b.n	8007a40 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a3b      	ldr	r2, [pc, #236]	@ (8007a7c <HAL_ADC_ConfigChannel+0x874>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d125      	bne.n	80079e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8007994:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007998:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d11f      	bne.n	80079e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a31      	ldr	r2, [pc, #196]	@ (8007a6c <HAL_ADC_ConfigChannel+0x864>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d104      	bne.n	80079b4 <HAL_ADC_ConfigChannel+0x7ac>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a34      	ldr	r2, [pc, #208]	@ (8007a80 <HAL_ADC_ConfigChannel+0x878>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d047      	beq.n	8007a44 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079bc:	d004      	beq.n	80079c8 <HAL_ADC_ConfigChannel+0x7c0>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a2a      	ldr	r2, [pc, #168]	@ (8007a6c <HAL_ADC_ConfigChannel+0x864>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d101      	bne.n	80079cc <HAL_ADC_ConfigChannel+0x7c4>
 80079c8:	4a29      	ldr	r2, [pc, #164]	@ (8007a70 <HAL_ADC_ConfigChannel+0x868>)
 80079ca:	e000      	b.n	80079ce <HAL_ADC_ConfigChannel+0x7c6>
 80079cc:	4a23      	ldr	r2, [pc, #140]	@ (8007a5c <HAL_ADC_ConfigChannel+0x854>)
 80079ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079d6:	4619      	mov	r1, r3
 80079d8:	4610      	mov	r0, r2
 80079da:	f7fe ff36 	bl	800684a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80079de:	e031      	b.n	8007a44 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a27      	ldr	r2, [pc, #156]	@ (8007a84 <HAL_ADC_ConfigChannel+0x87c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d12d      	bne.n	8007a46 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80079ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d127      	bne.n	8007a46 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1c      	ldr	r2, [pc, #112]	@ (8007a6c <HAL_ADC_ConfigChannel+0x864>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d022      	beq.n	8007a46 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a08:	d004      	beq.n	8007a14 <HAL_ADC_ConfigChannel+0x80c>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a17      	ldr	r2, [pc, #92]	@ (8007a6c <HAL_ADC_ConfigChannel+0x864>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d101      	bne.n	8007a18 <HAL_ADC_ConfigChannel+0x810>
 8007a14:	4a16      	ldr	r2, [pc, #88]	@ (8007a70 <HAL_ADC_ConfigChannel+0x868>)
 8007a16:	e000      	b.n	8007a1a <HAL_ADC_ConfigChannel+0x812>
 8007a18:	4a10      	ldr	r2, [pc, #64]	@ (8007a5c <HAL_ADC_ConfigChannel+0x854>)
 8007a1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a22:	4619      	mov	r1, r3
 8007a24:	4610      	mov	r0, r2
 8007a26:	f7fe ff10 	bl	800684a <LL_ADC_SetCommonPathInternalCh>
 8007a2a:	e00c      	b.n	8007a46 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a30:	f043 0220 	orr.w	r2, r3, #32
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007a3e:	e002      	b.n	8007a46 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007a40:	bf00      	nop
 8007a42:	e000      	b.n	8007a46 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007a44:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007a4e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	37d8      	adds	r7, #216	@ 0xd8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	50000700 	.word	0x50000700
 8007a60:	c3210000 	.word	0xc3210000
 8007a64:	90c00010 	.word	0x90c00010
 8007a68:	50000600 	.word	0x50000600
 8007a6c:	50000100 	.word	0x50000100
 8007a70:	50000300 	.word	0x50000300
 8007a74:	20000394 	.word	0x20000394
 8007a78:	053e2d63 	.word	0x053e2d63
 8007a7c:	c7520000 	.word	0xc7520000
 8007a80:	50000500 	.word	0x50000500
 8007a84:	cb840000 	.word	0xcb840000

08007a88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7ff f8a7 	bl	8006bec <LL_ADC_IsEnabled>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d176      	bne.n	8007b92 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	689a      	ldr	r2, [r3, #8]
 8007aaa:	4b3c      	ldr	r3, [pc, #240]	@ (8007b9c <ADC_Enable+0x114>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00d      	beq.n	8007ace <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ab6:	f043 0210 	orr.w	r2, r3, #16
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ac2:	f043 0201 	orr.w	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e062      	b.n	8007b94 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff f862 	bl	8006b9c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ae0:	d004      	beq.n	8007aec <ADC_Enable+0x64>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a2e      	ldr	r2, [pc, #184]	@ (8007ba0 <ADC_Enable+0x118>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d101      	bne.n	8007af0 <ADC_Enable+0x68>
 8007aec:	4b2d      	ldr	r3, [pc, #180]	@ (8007ba4 <ADC_Enable+0x11c>)
 8007aee:	e000      	b.n	8007af2 <ADC_Enable+0x6a>
 8007af0:	4b2d      	ldr	r3, [pc, #180]	@ (8007ba8 <ADC_Enable+0x120>)
 8007af2:	4618      	mov	r0, r3
 8007af4:	f7fe febc 	bl	8006870 <LL_ADC_GetCommonPathInternalCh>
 8007af8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007afa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d013      	beq.n	8007b2a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007b02:	4b2a      	ldr	r3, [pc, #168]	@ (8007bac <ADC_Enable+0x124>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	099b      	lsrs	r3, r3, #6
 8007b08:	4a29      	ldr	r2, [pc, #164]	@ (8007bb0 <ADC_Enable+0x128>)
 8007b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0e:	099b      	lsrs	r3, r3, #6
 8007b10:	1c5a      	adds	r2, r3, #1
 8007b12:	4613      	mov	r3, r2
 8007b14:	005b      	lsls	r3, r3, #1
 8007b16:	4413      	add	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007b1c:	e002      	b.n	8007b24 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	3b01      	subs	r3, #1
 8007b22:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1f9      	bne.n	8007b1e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007b2a:	f7fe fe6f 	bl	800680c <HAL_GetTick>
 8007b2e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b30:	e028      	b.n	8007b84 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff f858 	bl	8006bec <LL_ADC_IsEnabled>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d104      	bne.n	8007b4c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff f828 	bl	8006b9c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007b4c:	f7fe fe5e 	bl	800680c <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d914      	bls.n	8007b84 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f003 0301 	and.w	r3, r3, #1
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d00d      	beq.n	8007b84 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b6c:	f043 0210 	orr.w	r2, r3, #16
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b78:	f043 0201 	orr.w	r2, r3, #1
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e007      	b.n	8007b94 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b01      	cmp	r3, #1
 8007b90:	d1cf      	bne.n	8007b32 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}
 8007b9c:	8000003f 	.word	0x8000003f
 8007ba0:	50000100 	.word	0x50000100
 8007ba4:	50000300 	.word	0x50000300
 8007ba8:	50000700 	.word	0x50000700
 8007bac:	20000394 	.word	0x20000394
 8007bb0:	053e2d63 	.word	0x053e2d63

08007bb4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff f826 	bl	8006c12 <LL_ADC_IsDisableOngoing>
 8007bc6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7ff f80d 	bl	8006bec <LL_ADC_IsEnabled>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d047      	beq.n	8007c68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d144      	bne.n	8007c68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 030d 	and.w	r3, r3, #13
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d10c      	bne.n	8007c06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7fe ffe7 	bl	8006bc4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007bfe:	f7fe fe05 	bl	800680c <HAL_GetTick>
 8007c02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007c04:	e029      	b.n	8007c5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c0a:	f043 0210 	orr.w	r2, r3, #16
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c16:	f043 0201 	orr.w	r2, r3, #1
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e023      	b.n	8007c6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007c22:	f7fe fdf3 	bl	800680c <HAL_GetTick>
 8007c26:	4602      	mov	r2, r0
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d914      	bls.n	8007c5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00d      	beq.n	8007c5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c42:	f043 0210 	orr.w	r2, r3, #16
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c4e:	f043 0201 	orr.w	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e007      	b.n	8007c6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1dc      	bne.n	8007c22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d14b      	bne.n	8007d24 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d021      	beq.n	8007cea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fe8c 	bl	80069c8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d032      	beq.n	8007d1c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d12b      	bne.n	8007d1c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d11f      	bne.n	8007d1c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ce0:	f043 0201 	orr.w	r2, r3, #1
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007ce8:	e018      	b.n	8007d1c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d111      	bne.n	8007d1c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d105      	bne.n	8007d1c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d14:	f043 0201 	orr.w	r2, r3, #1
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f7ff fa55 	bl	80071cc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d22:	e00e      	b.n	8007d42 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d28:	f003 0310 	and.w	r3, r3, #16
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007d30:	68f8      	ldr	r0, [r7, #12]
 8007d32:	f7ff fa5f 	bl	80071f4 <HAL_ADC_ErrorCallback>
}
 8007d36:	e004      	b.n	8007d42 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	4798      	blx	r3
}
 8007d42:	bf00      	nop
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d56:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f7ff fa41 	bl	80071e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d5e:	bf00      	nop
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d84:	f043 0204 	orr.w	r2, r3, #4
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff fa31 	bl	80071f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <LL_ADC_IsEnabled>:
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f003 0301 	and.w	r3, r3, #1
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d101      	bne.n	8007db2 <LL_ADC_IsEnabled+0x18>
 8007dae:	2301      	movs	r3, #1
 8007db0:	e000      	b.n	8007db4 <LL_ADC_IsEnabled+0x1a>
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <LL_ADC_StartCalibration>:
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007dd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	609a      	str	r2, [r3, #8]
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <LL_ADC_IsCalibrationOnGoing>:
{
 8007df2:	b480      	push	{r7}
 8007df4:	b083      	sub	sp, #12
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e06:	d101      	bne.n	8007e0c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e000      	b.n	8007e0e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <LL_ADC_REG_IsConversionOngoing>:
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d101      	bne.n	8007e32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e000      	b.n	8007e34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d101      	bne.n	8007e5c <HAL_ADCEx_Calibration_Start+0x1c>
 8007e58:	2302      	movs	r3, #2
 8007e5a:	e04d      	b.n	8007ef8 <HAL_ADCEx_Calibration_Start+0xb8>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f7ff fea5 	bl	8007bb4 <ADC_Disable>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007e6e:	7bfb      	ldrb	r3, [r7, #15]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d136      	bne.n	8007ee2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007e7c:	f023 0302 	bic.w	r3, r3, #2
 8007e80:	f043 0202 	orr.w	r2, r3, #2
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff ff96 	bl	8007dc0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007e94:	e014      	b.n	8007ec0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4a18      	ldr	r2, [pc, #96]	@ (8007f00 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d90d      	bls.n	8007ec0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea8:	f023 0312 	bic.w	r3, r3, #18
 8007eac:	f043 0210 	orr.w	r2, r3, #16
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e01b      	b.n	8007ef8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7ff ff94 	bl	8007df2 <LL_ADC_IsCalibrationOnGoing>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e2      	bne.n	8007e96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed4:	f023 0303 	bic.w	r3, r3, #3
 8007ed8:	f043 0201 	orr.w	r2, r3, #1
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007ee0:	e005      	b.n	8007eee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ee6:	f043 0210 	orr.w	r2, r3, #16
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	0004de01 	.word	0x0004de01

08007f04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007f04:	b590      	push	{r4, r7, lr}
 8007f06:	b0a1      	sub	sp, #132	@ 0x84
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e0e7      	b.n	80080f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007f2e:	2300      	movs	r3, #0
 8007f30:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007f3a:	d102      	bne.n	8007f42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007f3c:	4b6f      	ldr	r3, [pc, #444]	@ (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007f3e:	60bb      	str	r3, [r7, #8]
 8007f40:	e009      	b.n	8007f56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a6e      	ldr	r2, [pc, #440]	@ (8008100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d102      	bne.n	8007f52 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007f4c:	4b6d      	ldr	r3, [pc, #436]	@ (8008104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007f4e:	60bb      	str	r3, [r7, #8]
 8007f50:	e001      	b.n	8007f56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007f52:	2300      	movs	r3, #0
 8007f54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10b      	bne.n	8007f74 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f60:	f043 0220 	orr.w	r2, r3, #32
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	e0be      	b.n	80080f2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f7ff ff4f 	bl	8007e1a <LL_ADC_REG_IsConversionOngoing>
 8007f7c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7ff ff49 	bl	8007e1a <LL_ADC_REG_IsConversionOngoing>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	f040 80a0 	bne.w	80080d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007f90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f040 809c 	bne.w	80080d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fa0:	d004      	beq.n	8007fac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a55      	ldr	r2, [pc, #340]	@ (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d101      	bne.n	8007fb0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007fac:	4b56      	ldr	r3, [pc, #344]	@ (8008108 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007fae:	e000      	b.n	8007fb2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007fb0:	4b56      	ldr	r3, [pc, #344]	@ (800810c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007fb2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d04b      	beq.n	8008054 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007fbc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	6859      	ldr	r1, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007fce:	035b      	lsls	r3, r3, #13
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007fd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007fe0:	d004      	beq.n	8007fec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a45      	ldr	r2, [pc, #276]	@ (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d10f      	bne.n	800800c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007fec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007ff0:	f7ff fed3 	bl	8007d9a <LL_ADC_IsEnabled>
 8007ff4:	4604      	mov	r4, r0
 8007ff6:	4841      	ldr	r0, [pc, #260]	@ (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007ff8:	f7ff fecf 	bl	8007d9a <LL_ADC_IsEnabled>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	4323      	orrs	r3, r4
 8008000:	2b00      	cmp	r3, #0
 8008002:	bf0c      	ite	eq
 8008004:	2301      	moveq	r3, #1
 8008006:	2300      	movne	r3, #0
 8008008:	b2db      	uxtb	r3, r3
 800800a:	e012      	b.n	8008032 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800800c:	483c      	ldr	r0, [pc, #240]	@ (8008100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800800e:	f7ff fec4 	bl	8007d9a <LL_ADC_IsEnabled>
 8008012:	4604      	mov	r4, r0
 8008014:	483b      	ldr	r0, [pc, #236]	@ (8008104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8008016:	f7ff fec0 	bl	8007d9a <LL_ADC_IsEnabled>
 800801a:	4603      	mov	r3, r0
 800801c:	431c      	orrs	r4, r3
 800801e:	483c      	ldr	r0, [pc, #240]	@ (8008110 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8008020:	f7ff febb 	bl	8007d9a <LL_ADC_IsEnabled>
 8008024:	4603      	mov	r3, r0
 8008026:	4323      	orrs	r3, r4
 8008028:	2b00      	cmp	r3, #0
 800802a:	bf0c      	ite	eq
 800802c:	2301      	moveq	r3, #1
 800802e:	2300      	movne	r3, #0
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d056      	beq.n	80080e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008036:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800803e:	f023 030f 	bic.w	r3, r3, #15
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	6811      	ldr	r1, [r2, #0]
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	6892      	ldr	r2, [r2, #8]
 800804a:	430a      	orrs	r2, r1
 800804c:	431a      	orrs	r2, r3
 800804e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008050:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008052:	e047      	b.n	80080e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008054:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800805c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800805e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008068:	d004      	beq.n	8008074 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a23      	ldr	r2, [pc, #140]	@ (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d10f      	bne.n	8008094 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8008074:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008078:	f7ff fe8f 	bl	8007d9a <LL_ADC_IsEnabled>
 800807c:	4604      	mov	r4, r0
 800807e:	481f      	ldr	r0, [pc, #124]	@ (80080fc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008080:	f7ff fe8b 	bl	8007d9a <LL_ADC_IsEnabled>
 8008084:	4603      	mov	r3, r0
 8008086:	4323      	orrs	r3, r4
 8008088:	2b00      	cmp	r3, #0
 800808a:	bf0c      	ite	eq
 800808c:	2301      	moveq	r3, #1
 800808e:	2300      	movne	r3, #0
 8008090:	b2db      	uxtb	r3, r3
 8008092:	e012      	b.n	80080ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8008094:	481a      	ldr	r0, [pc, #104]	@ (8008100 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8008096:	f7ff fe80 	bl	8007d9a <LL_ADC_IsEnabled>
 800809a:	4604      	mov	r4, r0
 800809c:	4819      	ldr	r0, [pc, #100]	@ (8008104 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800809e:	f7ff fe7c 	bl	8007d9a <LL_ADC_IsEnabled>
 80080a2:	4603      	mov	r3, r0
 80080a4:	431c      	orrs	r4, r3
 80080a6:	481a      	ldr	r0, [pc, #104]	@ (8008110 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80080a8:	f7ff fe77 	bl	8007d9a <LL_ADC_IsEnabled>
 80080ac:	4603      	mov	r3, r0
 80080ae:	4323      	orrs	r3, r4
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	bf0c      	ite	eq
 80080b4:	2301      	moveq	r3, #1
 80080b6:	2300      	movne	r3, #0
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d012      	beq.n	80080e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80080be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80080c6:	f023 030f 	bic.w	r3, r3, #15
 80080ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80080cc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80080ce:	e009      	b.n	80080e4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80080d4:	f043 0220 	orr.w	r2, r3, #32
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80080e2:	e000      	b.n	80080e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80080e4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80080ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3784      	adds	r7, #132	@ 0x84
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd90      	pop	{r4, r7, pc}
 80080fa:	bf00      	nop
 80080fc:	50000100 	.word	0x50000100
 8008100:	50000400 	.word	0x50000400
 8008104:	50000500 	.word	0x50000500
 8008108:	50000300 	.word	0x50000300
 800810c:	50000700 	.word	0x50000700
 8008110:	50000600 	.word	0x50000600

08008114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008114:	b480      	push	{r7}
 8008116:	b085      	sub	sp, #20
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008124:	4b0c      	ldr	r3, [pc, #48]	@ (8008158 <__NVIC_SetPriorityGrouping+0x44>)
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008130:	4013      	ands	r3, r2
 8008132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800813c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008146:	4a04      	ldr	r2, [pc, #16]	@ (8008158 <__NVIC_SetPriorityGrouping+0x44>)
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	60d3      	str	r3, [r2, #12]
}
 800814c:	bf00      	nop
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	e000ed00 	.word	0xe000ed00

0800815c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008160:	4b04      	ldr	r3, [pc, #16]	@ (8008174 <__NVIC_GetPriorityGrouping+0x18>)
 8008162:	68db      	ldr	r3, [r3, #12]
 8008164:	0a1b      	lsrs	r3, r3, #8
 8008166:	f003 0307 	and.w	r3, r3, #7
}
 800816a:	4618      	mov	r0, r3
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	e000ed00 	.word	0xe000ed00

08008178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	4603      	mov	r3, r0
 8008180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008186:	2b00      	cmp	r3, #0
 8008188:	db0b      	blt.n	80081a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800818a:	79fb      	ldrb	r3, [r7, #7]
 800818c:	f003 021f 	and.w	r2, r3, #31
 8008190:	4907      	ldr	r1, [pc, #28]	@ (80081b0 <__NVIC_EnableIRQ+0x38>)
 8008192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008196:	095b      	lsrs	r3, r3, #5
 8008198:	2001      	movs	r0, #1
 800819a:	fa00 f202 	lsl.w	r2, r0, r2
 800819e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80081a2:	bf00      	nop
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	e000e100 	.word	0xe000e100

080081b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b083      	sub	sp, #12
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	4603      	mov	r3, r0
 80081bc:	6039      	str	r1, [r7, #0]
 80081be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	db0a      	blt.n	80081de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	490c      	ldr	r1, [pc, #48]	@ (8008200 <__NVIC_SetPriority+0x4c>)
 80081ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081d2:	0112      	lsls	r2, r2, #4
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	440b      	add	r3, r1
 80081d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80081dc:	e00a      	b.n	80081f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	b2da      	uxtb	r2, r3
 80081e2:	4908      	ldr	r1, [pc, #32]	@ (8008204 <__NVIC_SetPriority+0x50>)
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	f003 030f 	and.w	r3, r3, #15
 80081ea:	3b04      	subs	r3, #4
 80081ec:	0112      	lsls	r2, r2, #4
 80081ee:	b2d2      	uxtb	r2, r2
 80081f0:	440b      	add	r3, r1
 80081f2:	761a      	strb	r2, [r3, #24]
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr
 8008200:	e000e100 	.word	0xe000e100
 8008204:	e000ed00 	.word	0xe000ed00

08008208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008208:	b480      	push	{r7}
 800820a:	b089      	sub	sp, #36	@ 0x24
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	f1c3 0307 	rsb	r3, r3, #7
 8008222:	2b04      	cmp	r3, #4
 8008224:	bf28      	it	cs
 8008226:	2304      	movcs	r3, #4
 8008228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800822a:	69fb      	ldr	r3, [r7, #28]
 800822c:	3304      	adds	r3, #4
 800822e:	2b06      	cmp	r3, #6
 8008230:	d902      	bls.n	8008238 <NVIC_EncodePriority+0x30>
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	3b03      	subs	r3, #3
 8008236:	e000      	b.n	800823a <NVIC_EncodePriority+0x32>
 8008238:	2300      	movs	r3, #0
 800823a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800823c:	f04f 32ff 	mov.w	r2, #4294967295
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	fa02 f303 	lsl.w	r3, r2, r3
 8008246:	43da      	mvns	r2, r3
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	401a      	ands	r2, r3
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008250:	f04f 31ff 	mov.w	r1, #4294967295
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	fa01 f303 	lsl.w	r3, r1, r3
 800825a:	43d9      	mvns	r1, r3
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008260:	4313      	orrs	r3, r2
         );
}
 8008262:	4618      	mov	r0, r3
 8008264:	3724      	adds	r7, #36	@ 0x24
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
	...

08008270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3b01      	subs	r3, #1
 800827c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008280:	d301      	bcc.n	8008286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008282:	2301      	movs	r3, #1
 8008284:	e00f      	b.n	80082a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008286:	4a0a      	ldr	r2, [pc, #40]	@ (80082b0 <SysTick_Config+0x40>)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3b01      	subs	r3, #1
 800828c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800828e:	210f      	movs	r1, #15
 8008290:	f04f 30ff 	mov.w	r0, #4294967295
 8008294:	f7ff ff8e 	bl	80081b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008298:	4b05      	ldr	r3, [pc, #20]	@ (80082b0 <SysTick_Config+0x40>)
 800829a:	2200      	movs	r2, #0
 800829c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800829e:	4b04      	ldr	r3, [pc, #16]	@ (80082b0 <SysTick_Config+0x40>)
 80082a0:	2207      	movs	r2, #7
 80082a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3708      	adds	r7, #8
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
 80082ae:	bf00      	nop
 80082b0:	e000e010 	.word	0xe000e010

080082b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff ff29 	bl	8008114 <__NVIC_SetPriorityGrouping>
}
 80082c2:	bf00      	nop
 80082c4:	3708      	adds	r7, #8
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b086      	sub	sp, #24
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	4603      	mov	r3, r0
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	607a      	str	r2, [r7, #4]
 80082d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80082d8:	f7ff ff40 	bl	800815c <__NVIC_GetPriorityGrouping>
 80082dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	68b9      	ldr	r1, [r7, #8]
 80082e2:	6978      	ldr	r0, [r7, #20]
 80082e4:	f7ff ff90 	bl	8008208 <NVIC_EncodePriority>
 80082e8:	4602      	mov	r2, r0
 80082ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082ee:	4611      	mov	r1, r2
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7ff ff5f 	bl	80081b4 <__NVIC_SetPriority>
}
 80082f6:	bf00      	nop
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	4603      	mov	r3, r0
 8008306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800830c:	4618      	mov	r0, r3
 800830e:	f7ff ff33 	bl	8008178 <__NVIC_EnableIRQ>
}
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b082      	sub	sp, #8
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f7ff ffa4 	bl	8008270 <SysTick_Config>
 8008328:	4603      	mov	r3, r0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}
	...

08008334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008342:	2301      	movs	r3, #1
 8008344:	e08d      	b.n	8008462 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	4b47      	ldr	r3, [pc, #284]	@ (800846c <HAL_DMA_Init+0x138>)
 800834e:	429a      	cmp	r2, r3
 8008350:	d80f      	bhi.n	8008372 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	4b45      	ldr	r3, [pc, #276]	@ (8008470 <HAL_DMA_Init+0x13c>)
 800835a:	4413      	add	r3, r2
 800835c:	4a45      	ldr	r2, [pc, #276]	@ (8008474 <HAL_DMA_Init+0x140>)
 800835e:	fba2 2303 	umull	r2, r3, r2, r3
 8008362:	091b      	lsrs	r3, r3, #4
 8008364:	009a      	lsls	r2, r3, #2
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a42      	ldr	r2, [pc, #264]	@ (8008478 <HAL_DMA_Init+0x144>)
 800836e:	641a      	str	r2, [r3, #64]	@ 0x40
 8008370:	e00e      	b.n	8008390 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	4b40      	ldr	r3, [pc, #256]	@ (800847c <HAL_DMA_Init+0x148>)
 800837a:	4413      	add	r3, r2
 800837c:	4a3d      	ldr	r2, [pc, #244]	@ (8008474 <HAL_DMA_Init+0x140>)
 800837e:	fba2 2303 	umull	r2, r3, r2, r3
 8008382:	091b      	lsrs	r3, r3, #4
 8008384:	009a      	lsls	r2, r3, #2
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	4a3c      	ldr	r2, [pc, #240]	@ (8008480 <HAL_DMA_Init+0x14c>)
 800838e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80083a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80083b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80083c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80083cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa76 	bl	80088d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	689b      	ldr	r3, [r3, #8]
 80083ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80083f0:	d102      	bne.n	80083f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008400:	b2d2      	uxtb	r2, r2
 8008402:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800840c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d010      	beq.n	8008438 <HAL_DMA_Init+0x104>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d80c      	bhi.n	8008438 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fa96 	bl	8008950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008434:	605a      	str	r2, [r3, #4]
 8008436:	e008      	b.n	800844a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	40020407 	.word	0x40020407
 8008470:	bffdfff8 	.word	0xbffdfff8
 8008474:	cccccccd 	.word	0xcccccccd
 8008478:	40020000 	.word	0x40020000
 800847c:	bffdfbf8 	.word	0xbffdfbf8
 8008480:	40020400 	.word	0x40020400

08008484 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800849c:	2b01      	cmp	r3, #1
 800849e:	d101      	bne.n	80084a4 <HAL_DMA_Start_IT+0x20>
 80084a0:	2302      	movs	r3, #2
 80084a2:	e066      	b.n	8008572 <HAL_DMA_Start_IT+0xee>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d155      	bne.n	8008564 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2202      	movs	r2, #2
 80084bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f022 0201 	bic.w	r2, r2, #1
 80084d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	68b9      	ldr	r1, [r7, #8]
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f000 f9bb 	bl	8008858 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d008      	beq.n	80084fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f042 020e 	orr.w	r2, r2, #14
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	e00f      	b.n	800851c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 0204 	bic.w	r2, r2, #4
 800850a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 020a 	orr.w	r2, r2, #10
 800851a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008526:	2b00      	cmp	r3, #0
 8008528:	d007      	beq.n	800853a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008534:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008538:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800853e:	2b00      	cmp	r3, #0
 8008540:	d007      	beq.n	8008552 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800854c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008550:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f042 0201 	orr.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]
 8008562:	e005      	b.n	8008570 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800856c:	2302      	movs	r3, #2
 800856e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008570:	7dfb      	ldrb	r3, [r7, #23]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800857a:	b480      	push	{r7}
 800857c:	b085      	sub	sp, #20
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800858c:	b2db      	uxtb	r3, r3
 800858e:	2b02      	cmp	r3, #2
 8008590:	d005      	beq.n	800859e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2204      	movs	r2, #4
 8008596:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	73fb      	strb	r3, [r7, #15]
 800859c:	e037      	b.n	800860e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 020e 	bic.w	r2, r2, #14
 80085ac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80085bc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0201 	bic.w	r2, r2, #1
 80085cc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085d2:	f003 021f 	and.w	r2, r3, #31
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085da:	2101      	movs	r1, #1
 80085dc:	fa01 f202 	lsl.w	r2, r1, r2
 80085e0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80085ea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00c      	beq.n	800860e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008602:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800860c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800861e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d00d      	beq.n	8008660 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2204      	movs	r2, #4
 8008648:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	73fb      	strb	r3, [r7, #15]
 800865e:	e047      	b.n	80086f0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 020e 	bic.w	r2, r2, #14
 800866e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f022 0201 	bic.w	r2, r2, #1
 800867e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800868a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800868e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008694:	f003 021f 	and.w	r2, r3, #31
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800869c:	2101      	movs	r1, #1
 800869e:	fa01 f202 	lsl.w	r2, r1, r2
 80086a2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80086ac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00c      	beq.n	80086d0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80086c4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80086ce:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	4798      	blx	r3
    }
  }
  return status;
 80086f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3710      	adds	r7, #16
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b084      	sub	sp, #16
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008716:	f003 031f 	and.w	r3, r3, #31
 800871a:	2204      	movs	r2, #4
 800871c:	409a      	lsls	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	4013      	ands	r3, r2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d026      	beq.n	8008774 <HAL_DMA_IRQHandler+0x7a>
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f003 0304 	and.w	r3, r3, #4
 800872c:	2b00      	cmp	r3, #0
 800872e:	d021      	beq.n	8008774 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f003 0320 	and.w	r3, r3, #32
 800873a:	2b00      	cmp	r3, #0
 800873c:	d107      	bne.n	800874e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0204 	bic.w	r2, r2, #4
 800874c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008752:	f003 021f 	and.w	r2, r3, #31
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800875a:	2104      	movs	r1, #4
 800875c:	fa01 f202 	lsl.w	r2, r1, r2
 8008760:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008766:	2b00      	cmp	r3, #0
 8008768:	d071      	beq.n	800884e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008772:	e06c      	b.n	800884e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008778:	f003 031f 	and.w	r3, r3, #31
 800877c:	2202      	movs	r2, #2
 800877e:	409a      	lsls	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4013      	ands	r3, r2
 8008784:	2b00      	cmp	r3, #0
 8008786:	d02e      	beq.n	80087e6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d029      	beq.n	80087e6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10b      	bne.n	80087b8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	681a      	ldr	r2, [r3, #0]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 020a 	bic.w	r2, r2, #10
 80087ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087bc:	f003 021f 	and.w	r2, r3, #31
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087c4:	2102      	movs	r1, #2
 80087c6:	fa01 f202 	lsl.w	r2, r1, r2
 80087ca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d038      	beq.n	800884e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80087e4:	e033      	b.n	800884e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ea:	f003 031f 	and.w	r3, r3, #31
 80087ee:	2208      	movs	r2, #8
 80087f0:	409a      	lsls	r2, r3
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4013      	ands	r3, r2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d02a      	beq.n	8008850 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	f003 0308 	and.w	r3, r3, #8
 8008800:	2b00      	cmp	r3, #0
 8008802:	d025      	beq.n	8008850 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f022 020e 	bic.w	r2, r2, #14
 8008812:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008818:	f003 021f 	and.w	r2, r3, #31
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008820:	2101      	movs	r1, #1
 8008822:	fa01 f202 	lsl.w	r2, r1, r2
 8008826:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800884e:	bf00      	nop
 8008850:	bf00      	nop
}
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
 800885e:	60f8      	str	r0, [r7, #12]
 8008860:	60b9      	str	r1, [r7, #8]
 8008862:	607a      	str	r2, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800886e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008874:	2b00      	cmp	r3, #0
 8008876:	d004      	beq.n	8008882 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800887c:	68fa      	ldr	r2, [r7, #12]
 800887e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008880:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008886:	f003 021f 	and.w	r2, r3, #31
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888e:	2101      	movs	r1, #1
 8008890:	fa01 f202 	lsl.w	r2, r1, r2
 8008894:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	2b10      	cmp	r3, #16
 80088a4:	d108      	bne.n	80088b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68ba      	ldr	r2, [r7, #8]
 80088b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80088b6:	e007      	b.n	80088c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	687a      	ldr	r2, [r7, #4]
 80088c6:	60da      	str	r2, [r3, #12]
}
 80088c8:	bf00      	nop
 80088ca:	3714      	adds	r7, #20
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b087      	sub	sp, #28
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	461a      	mov	r2, r3
 80088e2:	4b16      	ldr	r3, [pc, #88]	@ (800893c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d802      	bhi.n	80088ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80088e8:	4b15      	ldr	r3, [pc, #84]	@ (8008940 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80088ea:	617b      	str	r3, [r7, #20]
 80088ec:	e001      	b.n	80088f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80088ee:	4b15      	ldr	r3, [pc, #84]	@ (8008944 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80088f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	3b08      	subs	r3, #8
 80088fe:	4a12      	ldr	r2, [pc, #72]	@ (8008948 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008900:	fba2 2303 	umull	r2, r3, r2, r3
 8008904:	091b      	lsrs	r3, r3, #4
 8008906:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800890c:	089b      	lsrs	r3, r3, #2
 800890e:	009a      	lsls	r2, r3, #2
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	4413      	add	r3, r2
 8008914:	461a      	mov	r2, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a0b      	ldr	r2, [pc, #44]	@ (800894c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800891e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f003 031f 	and.w	r3, r3, #31
 8008926:	2201      	movs	r2, #1
 8008928:	409a      	lsls	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800892e:	bf00      	nop
 8008930:	371c      	adds	r7, #28
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	40020407 	.word	0x40020407
 8008940:	40020800 	.word	0x40020800
 8008944:	40020820 	.word	0x40020820
 8008948:	cccccccd 	.word	0xcccccccd
 800894c:	40020880 	.word	0x40020880

08008950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	b2db      	uxtb	r3, r3
 800895e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	4b0b      	ldr	r3, [pc, #44]	@ (8008990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008964:	4413      	add	r3, r2
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	461a      	mov	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a08      	ldr	r2, [pc, #32]	@ (8008994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008972:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	3b01      	subs	r3, #1
 8008978:	f003 031f 	and.w	r3, r3, #31
 800897c:	2201      	movs	r2, #1
 800897e:	409a      	lsls	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008984:	bf00      	nop
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr
 8008990:	1000823f 	.word	0x1000823f
 8008994:	40020940 	.word	0x40020940

08008998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089a2:	2300      	movs	r3, #0
 80089a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80089a6:	e15a      	b.n	8008c5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	2101      	movs	r1, #1
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	fa01 f303 	lsl.w	r3, r1, r3
 80089b4:	4013      	ands	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 814c 	beq.w	8008c58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d005      	beq.n	80089d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d130      	bne.n	8008a3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	689b      	ldr	r3, [r3, #8]
 80089dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	2203      	movs	r2, #3
 80089e4:	fa02 f303 	lsl.w	r3, r2, r3
 80089e8:	43db      	mvns	r3, r3
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	4013      	ands	r3, r2
 80089ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	68da      	ldr	r2, [r3, #12]
 80089f4:	697b      	ldr	r3, [r7, #20]
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	fa02 f303 	lsl.w	r3, r2, r3
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a0e:	2201      	movs	r2, #1
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	fa02 f303 	lsl.w	r3, r2, r3
 8008a16:	43db      	mvns	r3, r3
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	091b      	lsrs	r3, r3, #4
 8008a24:	f003 0201 	and.w	r2, r3, #1
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	693a      	ldr	r2, [r7, #16]
 8008a38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	f003 0303 	and.w	r3, r3, #3
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d017      	beq.n	8008a76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	2203      	movs	r2, #3
 8008a52:	fa02 f303 	lsl.w	r3, r2, r3
 8008a56:	43db      	mvns	r3, r3
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	689a      	ldr	r2, [r3, #8]
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f003 0303 	and.w	r3, r3, #3
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d123      	bne.n	8008aca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	08da      	lsrs	r2, r3, #3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	3208      	adds	r2, #8
 8008a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f003 0307 	and.w	r3, r3, #7
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	220f      	movs	r2, #15
 8008a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9e:	43db      	mvns	r3, r3
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	691a      	ldr	r2, [r3, #16]
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	f003 0307 	and.w	r3, r3, #7
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	08da      	lsrs	r2, r3, #3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	3208      	adds	r2, #8
 8008ac4:	6939      	ldr	r1, [r7, #16]
 8008ac6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	43db      	mvns	r3, r3
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f003 0203 	and.w	r2, r3, #3
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	005b      	lsls	r3, r3, #1
 8008aee:	fa02 f303 	lsl.w	r3, r2, r3
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	693a      	ldr	r2, [r7, #16]
 8008afc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f000 80a6 	beq.w	8008c58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b0c:	4b5b      	ldr	r3, [pc, #364]	@ (8008c7c <HAL_GPIO_Init+0x2e4>)
 8008b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b10:	4a5a      	ldr	r2, [pc, #360]	@ (8008c7c <HAL_GPIO_Init+0x2e4>)
 8008b12:	f043 0301 	orr.w	r3, r3, #1
 8008b16:	6613      	str	r3, [r2, #96]	@ 0x60
 8008b18:	4b58      	ldr	r3, [pc, #352]	@ (8008c7c <HAL_GPIO_Init+0x2e4>)
 8008b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	60bb      	str	r3, [r7, #8]
 8008b22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b24:	4a56      	ldr	r2, [pc, #344]	@ (8008c80 <HAL_GPIO_Init+0x2e8>)
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	089b      	lsrs	r3, r3, #2
 8008b2a:	3302      	adds	r3, #2
 8008b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f003 0303 	and.w	r3, r3, #3
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	220f      	movs	r2, #15
 8008b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b40:	43db      	mvns	r3, r3
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4013      	ands	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008b4e:	d01f      	beq.n	8008b90 <HAL_GPIO_Init+0x1f8>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a4c      	ldr	r2, [pc, #304]	@ (8008c84 <HAL_GPIO_Init+0x2ec>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d019      	beq.n	8008b8c <HAL_GPIO_Init+0x1f4>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a4b      	ldr	r2, [pc, #300]	@ (8008c88 <HAL_GPIO_Init+0x2f0>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d013      	beq.n	8008b88 <HAL_GPIO_Init+0x1f0>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a4a      	ldr	r2, [pc, #296]	@ (8008c8c <HAL_GPIO_Init+0x2f4>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d00d      	beq.n	8008b84 <HAL_GPIO_Init+0x1ec>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a49      	ldr	r2, [pc, #292]	@ (8008c90 <HAL_GPIO_Init+0x2f8>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d007      	beq.n	8008b80 <HAL_GPIO_Init+0x1e8>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a48      	ldr	r2, [pc, #288]	@ (8008c94 <HAL_GPIO_Init+0x2fc>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d101      	bne.n	8008b7c <HAL_GPIO_Init+0x1e4>
 8008b78:	2305      	movs	r3, #5
 8008b7a:	e00a      	b.n	8008b92 <HAL_GPIO_Init+0x1fa>
 8008b7c:	2306      	movs	r3, #6
 8008b7e:	e008      	b.n	8008b92 <HAL_GPIO_Init+0x1fa>
 8008b80:	2304      	movs	r3, #4
 8008b82:	e006      	b.n	8008b92 <HAL_GPIO_Init+0x1fa>
 8008b84:	2303      	movs	r3, #3
 8008b86:	e004      	b.n	8008b92 <HAL_GPIO_Init+0x1fa>
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e002      	b.n	8008b92 <HAL_GPIO_Init+0x1fa>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e000      	b.n	8008b92 <HAL_GPIO_Init+0x1fa>
 8008b90:	2300      	movs	r3, #0
 8008b92:	697a      	ldr	r2, [r7, #20]
 8008b94:	f002 0203 	and.w	r2, r2, #3
 8008b98:	0092      	lsls	r2, r2, #2
 8008b9a:	4093      	lsls	r3, r2
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ba2:	4937      	ldr	r1, [pc, #220]	@ (8008c80 <HAL_GPIO_Init+0x2e8>)
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	089b      	lsrs	r3, r3, #2
 8008ba8:	3302      	adds	r3, #2
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008bb0:	4b39      	ldr	r3, [pc, #228]	@ (8008c98 <HAL_GPIO_Init+0x300>)
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	43db      	mvns	r3, r3
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008bcc:	693a      	ldr	r2, [r7, #16]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008bd4:	4a30      	ldr	r2, [pc, #192]	@ (8008c98 <HAL_GPIO_Init+0x300>)
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008bda:	4b2f      	ldr	r3, [pc, #188]	@ (8008c98 <HAL_GPIO_Init+0x300>)
 8008bdc:	68db      	ldr	r3, [r3, #12]
 8008bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	43db      	mvns	r3, r3
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4013      	ands	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	685b      	ldr	r3, [r3, #4]
 8008bee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d003      	beq.n	8008bfe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008bfe:	4a26      	ldr	r2, [pc, #152]	@ (8008c98 <HAL_GPIO_Init+0x300>)
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008c04:	4b24      	ldr	r3, [pc, #144]	@ (8008c98 <HAL_GPIO_Init+0x300>)
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	43db      	mvns	r3, r3
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	4013      	ands	r3, r2
 8008c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d003      	beq.n	8008c28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008c20:	693a      	ldr	r2, [r7, #16]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008c28:	4a1b      	ldr	r2, [pc, #108]	@ (8008c98 <HAL_GPIO_Init+0x300>)
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8008c98 <HAL_GPIO_Init+0x300>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	43db      	mvns	r3, r3
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008c52:	4a11      	ldr	r2, [pc, #68]	@ (8008c98 <HAL_GPIO_Init+0x300>)
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	fa22 f303 	lsr.w	r3, r2, r3
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f47f ae9d 	bne.w	80089a8 <HAL_GPIO_Init+0x10>
  }
}
 8008c6e:	bf00      	nop
 8008c70:	bf00      	nop
 8008c72:	371c      	adds	r7, #28
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	40021000 	.word	0x40021000
 8008c80:	40010000 	.word	0x40010000
 8008c84:	48000400 	.word	0x48000400
 8008c88:	48000800 	.word	0x48000800
 8008c8c:	48000c00 	.word	0x48000c00
 8008c90:	48001000 	.word	0x48001000
 8008c94:	48001400 	.word	0x48001400
 8008c98:	40010400 	.word	0x40010400

08008c9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	887b      	ldrh	r3, [r7, #2]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	73fb      	strb	r3, [r7, #15]
 8008cb8:	e001      	b.n	8008cbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	807b      	strh	r3, [r7, #2]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008cdc:	787b      	ldrb	r3, [r7, #1]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d003      	beq.n	8008cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ce2:	887a      	ldrh	r2, [r7, #2]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ce8:	e002      	b.n	8008cf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008cea:	887a      	ldrh	r2, [r7, #2]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4603      	mov	r3, r0
 8008d04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8008d06:	4b08      	ldr	r3, [pc, #32]	@ (8008d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d08:	695a      	ldr	r2, [r3, #20]
 8008d0a:	88fb      	ldrh	r3, [r7, #6]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d006      	beq.n	8008d20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008d12:	4a05      	ldr	r2, [pc, #20]	@ (8008d28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d14:	88fb      	ldrh	r3, [r7, #6]
 8008d16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fb fef4 	bl	8004b08 <HAL_GPIO_EXTI_Callback>
  }
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	40010400 	.word	0x40010400

08008d2c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d141      	bne.n	8008dbe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d46:	d131      	bne.n	8008dac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008d48:	4b47      	ldr	r3, [pc, #284]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d4e:	4a46      	ldr	r2, [pc, #280]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d58:	4b43      	ldr	r3, [pc, #268]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008d60:	4a41      	ldr	r2, [pc, #260]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008d66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008d68:	4b40      	ldr	r3, [pc, #256]	@ (8008e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2232      	movs	r2, #50	@ 0x32
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
 8008d72:	4a3f      	ldr	r2, [pc, #252]	@ (8008e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008d74:	fba2 2303 	umull	r2, r3, r2, r3
 8008d78:	0c9b      	lsrs	r3, r3, #18
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d7e:	e002      	b.n	8008d86 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d86:	4b38      	ldr	r3, [pc, #224]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d92:	d102      	bne.n	8008d9a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1f2      	bne.n	8008d80 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008d9a:	4b33      	ldr	r3, [pc, #204]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008da6:	d158      	bne.n	8008e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008da8:	2303      	movs	r3, #3
 8008daa:	e057      	b.n	8008e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008dac:	4b2e      	ldr	r3, [pc, #184]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008db2:	4a2d      	ldr	r2, [pc, #180]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008db8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008dbc:	e04d      	b.n	8008e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dc4:	d141      	bne.n	8008e4a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008dc6:	4b28      	ldr	r3, [pc, #160]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008dce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dd2:	d131      	bne.n	8008e38 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008dd4:	4b24      	ldr	r3, [pc, #144]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dda:	4a23      	ldr	r2, [pc, #140]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008de0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008de4:	4b20      	ldr	r3, [pc, #128]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008dec:	4a1e      	ldr	r2, [pc, #120]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008df2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008df4:	4b1d      	ldr	r3, [pc, #116]	@ (8008e6c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2232      	movs	r2, #50	@ 0x32
 8008dfa:	fb02 f303 	mul.w	r3, r2, r3
 8008dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8008e70 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008e00:	fba2 2303 	umull	r2, r3, r2, r3
 8008e04:	0c9b      	lsrs	r3, r3, #18
 8008e06:	3301      	adds	r3, #1
 8008e08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e0a:	e002      	b.n	8008e12 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e12:	4b15      	ldr	r3, [pc, #84]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e14:	695b      	ldr	r3, [r3, #20]
 8008e16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e1e:	d102      	bne.n	8008e26 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d1f2      	bne.n	8008e0c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e26:	4b10      	ldr	r3, [pc, #64]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e28:	695b      	ldr	r3, [r3, #20]
 8008e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e32:	d112      	bne.n	8008e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e011      	b.n	8008e5c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e38:	4b0b      	ldr	r3, [pc, #44]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008e48:	e007      	b.n	8008e5a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008e4a:	4b07      	ldr	r3, [pc, #28]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008e52:	4a05      	ldr	r2, [pc, #20]	@ (8008e68 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008e58:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008e5a:	2300      	movs	r3, #0
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3714      	adds	r7, #20
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	40007000 	.word	0x40007000
 8008e6c:	20000394 	.word	0x20000394
 8008e70:	431bde83 	.word	0x431bde83

08008e74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008e78:	4b05      	ldr	r3, [pc, #20]	@ (8008e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	4a04      	ldr	r2, [pc, #16]	@ (8008e90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008e7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e82:	6093      	str	r3, [r2, #8]
}
 8008e84:	bf00      	nop
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	40007000 	.word	0x40007000

08008e94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e2fe      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d075      	beq.n	8008f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008eb2:	4b97      	ldr	r3, [pc, #604]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f003 030c 	and.w	r3, r3, #12
 8008eba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ebc:	4b94      	ldr	r3, [pc, #592]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	2b0c      	cmp	r3, #12
 8008eca:	d102      	bne.n	8008ed2 <HAL_RCC_OscConfig+0x3e>
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d002      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x44>
 8008ed2:	69bb      	ldr	r3, [r7, #24]
 8008ed4:	2b08      	cmp	r3, #8
 8008ed6:	d10b      	bne.n	8008ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ed8:	4b8d      	ldr	r3, [pc, #564]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d05b      	beq.n	8008f9c <HAL_RCC_OscConfig+0x108>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d157      	bne.n	8008f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e2d9      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ef8:	d106      	bne.n	8008f08 <HAL_RCC_OscConfig+0x74>
 8008efa:	4b85      	ldr	r3, [pc, #532]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a84      	ldr	r2, [pc, #528]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	e01d      	b.n	8008f44 <HAL_RCC_OscConfig+0xb0>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f10:	d10c      	bne.n	8008f2c <HAL_RCC_OscConfig+0x98>
 8008f12:	4b7f      	ldr	r3, [pc, #508]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a7e      	ldr	r2, [pc, #504]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	4b7c      	ldr	r3, [pc, #496]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a7b      	ldr	r2, [pc, #492]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f28:	6013      	str	r3, [r2, #0]
 8008f2a:	e00b      	b.n	8008f44 <HAL_RCC_OscConfig+0xb0>
 8008f2c:	4b78      	ldr	r3, [pc, #480]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a77      	ldr	r2, [pc, #476]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f36:	6013      	str	r3, [r2, #0]
 8008f38:	4b75      	ldr	r3, [pc, #468]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a74      	ldr	r2, [pc, #464]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d013      	beq.n	8008f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f4c:	f7fd fc5e 	bl	800680c <HAL_GetTick>
 8008f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f52:	e008      	b.n	8008f66 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f54:	f7fd fc5a 	bl	800680c <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	2b64      	cmp	r3, #100	@ 0x64
 8008f60:	d901      	bls.n	8008f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e29e      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f66:	4b6a      	ldr	r3, [pc, #424]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0f0      	beq.n	8008f54 <HAL_RCC_OscConfig+0xc0>
 8008f72:	e014      	b.n	8008f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f74:	f7fd fc4a 	bl	800680c <HAL_GetTick>
 8008f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f7a:	e008      	b.n	8008f8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f7c:	f7fd fc46 	bl	800680c <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	2b64      	cmp	r3, #100	@ 0x64
 8008f88:	d901      	bls.n	8008f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e28a      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f8e:	4b60      	ldr	r3, [pc, #384]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d1f0      	bne.n	8008f7c <HAL_RCC_OscConfig+0xe8>
 8008f9a:	e000      	b.n	8008f9e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 0302 	and.w	r3, r3, #2
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d075      	beq.n	8009096 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008faa:	4b59      	ldr	r3, [pc, #356]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	f003 030c 	and.w	r3, r3, #12
 8008fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fb4:	4b56      	ldr	r3, [pc, #344]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f003 0303 	and.w	r3, r3, #3
 8008fbc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	2b0c      	cmp	r3, #12
 8008fc2:	d102      	bne.n	8008fca <HAL_RCC_OscConfig+0x136>
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d002      	beq.n	8008fd0 <HAL_RCC_OscConfig+0x13c>
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	2b04      	cmp	r3, #4
 8008fce:	d11f      	bne.n	8009010 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fd0:	4b4f      	ldr	r3, [pc, #316]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d005      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x154>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d101      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	e25d      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fe8:	4b49      	ldr	r3, [pc, #292]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	061b      	lsls	r3, r3, #24
 8008ff6:	4946      	ldr	r1, [pc, #280]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008ffc:	4b45      	ldr	r3, [pc, #276]	@ (8009114 <HAL_RCC_OscConfig+0x280>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4618      	mov	r0, r3
 8009002:	f7fd fbb7 	bl	8006774 <HAL_InitTick>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d043      	beq.n	8009094 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e249      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d023      	beq.n	8009060 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009018:	4b3d      	ldr	r3, [pc, #244]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a3c      	ldr	r2, [pc, #240]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 800901e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009024:	f7fd fbf2 	bl	800680c <HAL_GetTick>
 8009028:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800902a:	e008      	b.n	800903e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800902c:	f7fd fbee 	bl	800680c <HAL_GetTick>
 8009030:	4602      	mov	r2, r0
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	2b02      	cmp	r3, #2
 8009038:	d901      	bls.n	800903e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800903a:	2303      	movs	r3, #3
 800903c:	e232      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800903e:	4b34      	ldr	r3, [pc, #208]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009046:	2b00      	cmp	r3, #0
 8009048:	d0f0      	beq.n	800902c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800904a:	4b31      	ldr	r3, [pc, #196]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	061b      	lsls	r3, r3, #24
 8009058:	492d      	ldr	r1, [pc, #180]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 800905a:	4313      	orrs	r3, r2
 800905c:	604b      	str	r3, [r1, #4]
 800905e:	e01a      	b.n	8009096 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009060:	4b2b      	ldr	r3, [pc, #172]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a2a      	ldr	r2, [pc, #168]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8009066:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800906a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800906c:	f7fd fbce 	bl	800680c <HAL_GetTick>
 8009070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009072:	e008      	b.n	8009086 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009074:	f7fd fbca 	bl	800680c <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	2b02      	cmp	r3, #2
 8009080:	d901      	bls.n	8009086 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e20e      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009086:	4b22      	ldr	r3, [pc, #136]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800908e:	2b00      	cmp	r3, #0
 8009090:	d1f0      	bne.n	8009074 <HAL_RCC_OscConfig+0x1e0>
 8009092:	e000      	b.n	8009096 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009094:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f003 0308 	and.w	r3, r3, #8
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d041      	beq.n	8009126 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	695b      	ldr	r3, [r3, #20]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d01c      	beq.n	80090e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090aa:	4b19      	ldr	r3, [pc, #100]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 80090ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090b0:	4a17      	ldr	r2, [pc, #92]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 80090b2:	f043 0301 	orr.w	r3, r3, #1
 80090b6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090ba:	f7fd fba7 	bl	800680c <HAL_GetTick>
 80090be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090c0:	e008      	b.n	80090d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090c2:	f7fd fba3 	bl	800680c <HAL_GetTick>
 80090c6:	4602      	mov	r2, r0
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	1ad3      	subs	r3, r2, r3
 80090cc:	2b02      	cmp	r3, #2
 80090ce:	d901      	bls.n	80090d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80090d0:	2303      	movs	r3, #3
 80090d2:	e1e7      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090d4:	4b0e      	ldr	r3, [pc, #56]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 80090d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090da:	f003 0302 	and.w	r3, r3, #2
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0ef      	beq.n	80090c2 <HAL_RCC_OscConfig+0x22e>
 80090e2:	e020      	b.n	8009126 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090e4:	4b0a      	ldr	r3, [pc, #40]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 80090e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090ea:	4a09      	ldr	r2, [pc, #36]	@ (8009110 <HAL_RCC_OscConfig+0x27c>)
 80090ec:	f023 0301 	bic.w	r3, r3, #1
 80090f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f4:	f7fd fb8a 	bl	800680c <HAL_GetTick>
 80090f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80090fa:	e00d      	b.n	8009118 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090fc:	f7fd fb86 	bl	800680c <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	2b02      	cmp	r3, #2
 8009108:	d906      	bls.n	8009118 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e1ca      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
 800910e:	bf00      	nop
 8009110:	40021000 	.word	0x40021000
 8009114:	20000398 	.word	0x20000398
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009118:	4b8c      	ldr	r3, [pc, #560]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 800911a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800911e:	f003 0302 	and.w	r3, r3, #2
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1ea      	bne.n	80090fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0304 	and.w	r3, r3, #4
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 80a6 	beq.w	8009280 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009134:	2300      	movs	r3, #0
 8009136:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009138:	4b84      	ldr	r3, [pc, #528]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 800913a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800913c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009140:	2b00      	cmp	r3, #0
 8009142:	d101      	bne.n	8009148 <HAL_RCC_OscConfig+0x2b4>
 8009144:	2301      	movs	r3, #1
 8009146:	e000      	b.n	800914a <HAL_RCC_OscConfig+0x2b6>
 8009148:	2300      	movs	r3, #0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00d      	beq.n	800916a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800914e:	4b7f      	ldr	r3, [pc, #508]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 8009150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009152:	4a7e      	ldr	r2, [pc, #504]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 8009154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009158:	6593      	str	r3, [r2, #88]	@ 0x58
 800915a:	4b7c      	ldr	r3, [pc, #496]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 800915c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800915e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009162:	60fb      	str	r3, [r7, #12]
 8009164:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009166:	2301      	movs	r3, #1
 8009168:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800916a:	4b79      	ldr	r3, [pc, #484]	@ (8009350 <HAL_RCC_OscConfig+0x4bc>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009172:	2b00      	cmp	r3, #0
 8009174:	d118      	bne.n	80091a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009176:	4b76      	ldr	r3, [pc, #472]	@ (8009350 <HAL_RCC_OscConfig+0x4bc>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a75      	ldr	r2, [pc, #468]	@ (8009350 <HAL_RCC_OscConfig+0x4bc>)
 800917c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009182:	f7fd fb43 	bl	800680c <HAL_GetTick>
 8009186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009188:	e008      	b.n	800919c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800918a:	f7fd fb3f 	bl	800680c <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	2b02      	cmp	r3, #2
 8009196:	d901      	bls.n	800919c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e183      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800919c:	4b6c      	ldr	r3, [pc, #432]	@ (8009350 <HAL_RCC_OscConfig+0x4bc>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0f0      	beq.n	800918a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d108      	bne.n	80091c2 <HAL_RCC_OscConfig+0x32e>
 80091b0:	4b66      	ldr	r3, [pc, #408]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80091b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b6:	4a65      	ldr	r2, [pc, #404]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80091b8:	f043 0301 	orr.w	r3, r3, #1
 80091bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80091c0:	e024      	b.n	800920c <HAL_RCC_OscConfig+0x378>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	689b      	ldr	r3, [r3, #8]
 80091c6:	2b05      	cmp	r3, #5
 80091c8:	d110      	bne.n	80091ec <HAL_RCC_OscConfig+0x358>
 80091ca:	4b60      	ldr	r3, [pc, #384]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80091cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d0:	4a5e      	ldr	r2, [pc, #376]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80091d2:	f043 0304 	orr.w	r3, r3, #4
 80091d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80091da:	4b5c      	ldr	r3, [pc, #368]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80091dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091e0:	4a5a      	ldr	r2, [pc, #360]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80091e2:	f043 0301 	orr.w	r3, r3, #1
 80091e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80091ea:	e00f      	b.n	800920c <HAL_RCC_OscConfig+0x378>
 80091ec:	4b57      	ldr	r3, [pc, #348]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80091ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f2:	4a56      	ldr	r2, [pc, #344]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80091f4:	f023 0301 	bic.w	r3, r3, #1
 80091f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80091fc:	4b53      	ldr	r3, [pc, #332]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80091fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009202:	4a52      	ldr	r2, [pc, #328]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 8009204:	f023 0304 	bic.w	r3, r3, #4
 8009208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d016      	beq.n	8009242 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009214:	f7fd fafa 	bl	800680c <HAL_GetTick>
 8009218:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800921a:	e00a      	b.n	8009232 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800921c:	f7fd faf6 	bl	800680c <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	f241 3288 	movw	r2, #5000	@ 0x1388
 800922a:	4293      	cmp	r3, r2
 800922c:	d901      	bls.n	8009232 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e138      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009232:	4b46      	ldr	r3, [pc, #280]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 8009234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009238:	f003 0302 	and.w	r3, r3, #2
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0ed      	beq.n	800921c <HAL_RCC_OscConfig+0x388>
 8009240:	e015      	b.n	800926e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009242:	f7fd fae3 	bl	800680c <HAL_GetTick>
 8009246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009248:	e00a      	b.n	8009260 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800924a:	f7fd fadf 	bl	800680c <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009258:	4293      	cmp	r3, r2
 800925a:	d901      	bls.n	8009260 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e121      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009260:	4b3a      	ldr	r3, [pc, #232]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 8009262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1ed      	bne.n	800924a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800926e:	7ffb      	ldrb	r3, [r7, #31]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d105      	bne.n	8009280 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009274:	4b35      	ldr	r3, [pc, #212]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 8009276:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009278:	4a34      	ldr	r2, [pc, #208]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 800927a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800927e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0320 	and.w	r3, r3, #32
 8009288:	2b00      	cmp	r3, #0
 800928a:	d03c      	beq.n	8009306 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d01c      	beq.n	80092ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009294:	4b2d      	ldr	r3, [pc, #180]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 8009296:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800929a:	4a2c      	ldr	r2, [pc, #176]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 800929c:	f043 0301 	orr.w	r3, r3, #1
 80092a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092a4:	f7fd fab2 	bl	800680c <HAL_GetTick>
 80092a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80092aa:	e008      	b.n	80092be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092ac:	f7fd faae 	bl	800680c <HAL_GetTick>
 80092b0:	4602      	mov	r2, r0
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	1ad3      	subs	r3, r2, r3
 80092b6:	2b02      	cmp	r3, #2
 80092b8:	d901      	bls.n	80092be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80092ba:	2303      	movs	r3, #3
 80092bc:	e0f2      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80092be:	4b23      	ldr	r3, [pc, #140]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80092c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d0ef      	beq.n	80092ac <HAL_RCC_OscConfig+0x418>
 80092cc:	e01b      	b.n	8009306 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092ce:	4b1f      	ldr	r3, [pc, #124]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80092d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092d4:	4a1d      	ldr	r2, [pc, #116]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80092d6:	f023 0301 	bic.w	r3, r3, #1
 80092da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092de:	f7fd fa95 	bl	800680c <HAL_GetTick>
 80092e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80092e4:	e008      	b.n	80092f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092e6:	f7fd fa91 	bl	800680c <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	2b02      	cmp	r3, #2
 80092f2:	d901      	bls.n	80092f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e0d5      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80092f8:	4b14      	ldr	r3, [pc, #80]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 80092fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1ef      	bne.n	80092e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	69db      	ldr	r3, [r3, #28]
 800930a:	2b00      	cmp	r3, #0
 800930c:	f000 80c9 	beq.w	80094a2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009310:	4b0e      	ldr	r3, [pc, #56]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	f003 030c 	and.w	r3, r3, #12
 8009318:	2b0c      	cmp	r3, #12
 800931a:	f000 8083 	beq.w	8009424 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	2b02      	cmp	r3, #2
 8009324:	d15e      	bne.n	80093e4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009326:	4b09      	ldr	r3, [pc, #36]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a08      	ldr	r2, [pc, #32]	@ (800934c <HAL_RCC_OscConfig+0x4b8>)
 800932c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009332:	f7fd fa6b 	bl	800680c <HAL_GetTick>
 8009336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009338:	e00c      	b.n	8009354 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800933a:	f7fd fa67 	bl	800680c <HAL_GetTick>
 800933e:	4602      	mov	r2, r0
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	1ad3      	subs	r3, r2, r3
 8009344:	2b02      	cmp	r3, #2
 8009346:	d905      	bls.n	8009354 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009348:	2303      	movs	r3, #3
 800934a:	e0ab      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
 800934c:	40021000 	.word	0x40021000
 8009350:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009354:	4b55      	ldr	r3, [pc, #340]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1ec      	bne.n	800933a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009360:	4b52      	ldr	r3, [pc, #328]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	4b52      	ldr	r3, [pc, #328]	@ (80094b0 <HAL_RCC_OscConfig+0x61c>)
 8009366:	4013      	ands	r3, r2
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6a11      	ldr	r1, [r2, #32]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009370:	3a01      	subs	r2, #1
 8009372:	0112      	lsls	r2, r2, #4
 8009374:	4311      	orrs	r1, r2
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800937a:	0212      	lsls	r2, r2, #8
 800937c:	4311      	orrs	r1, r2
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009382:	0852      	lsrs	r2, r2, #1
 8009384:	3a01      	subs	r2, #1
 8009386:	0552      	lsls	r2, r2, #21
 8009388:	4311      	orrs	r1, r2
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800938e:	0852      	lsrs	r2, r2, #1
 8009390:	3a01      	subs	r2, #1
 8009392:	0652      	lsls	r2, r2, #25
 8009394:	4311      	orrs	r1, r2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800939a:	06d2      	lsls	r2, r2, #27
 800939c:	430a      	orrs	r2, r1
 800939e:	4943      	ldr	r1, [pc, #268]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093a4:	4b41      	ldr	r3, [pc, #260]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a40      	ldr	r2, [pc, #256]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 80093aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80093b0:	4b3e      	ldr	r3, [pc, #248]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	4a3d      	ldr	r2, [pc, #244]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 80093b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093bc:	f7fd fa26 	bl	800680c <HAL_GetTick>
 80093c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093c2:	e008      	b.n	80093d6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093c4:	f7fd fa22 	bl	800680c <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d901      	bls.n	80093d6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e066      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093d6:	4b35      	ldr	r3, [pc, #212]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d0f0      	beq.n	80093c4 <HAL_RCC_OscConfig+0x530>
 80093e2:	e05e      	b.n	80094a2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093e4:	4b31      	ldr	r3, [pc, #196]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a30      	ldr	r2, [pc, #192]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 80093ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f0:	f7fd fa0c 	bl	800680c <HAL_GetTick>
 80093f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093f6:	e008      	b.n	800940a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093f8:	f7fd fa08 	bl	800680c <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	2b02      	cmp	r3, #2
 8009404:	d901      	bls.n	800940a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e04c      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800940a:	4b28      	ldr	r3, [pc, #160]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1f0      	bne.n	80093f8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009416:	4b25      	ldr	r3, [pc, #148]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	4924      	ldr	r1, [pc, #144]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 800941c:	4b25      	ldr	r3, [pc, #148]	@ (80094b4 <HAL_RCC_OscConfig+0x620>)
 800941e:	4013      	ands	r3, r2
 8009420:	60cb      	str	r3, [r1, #12]
 8009422:	e03e      	b.n	80094a2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	69db      	ldr	r3, [r3, #28]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d101      	bne.n	8009430 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	e039      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009430:	4b1e      	ldr	r3, [pc, #120]	@ (80094ac <HAL_RCC_OscConfig+0x618>)
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	f003 0203 	and.w	r2, r3, #3
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a1b      	ldr	r3, [r3, #32]
 8009440:	429a      	cmp	r2, r3
 8009442:	d12c      	bne.n	800949e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944e:	3b01      	subs	r3, #1
 8009450:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009452:	429a      	cmp	r2, r3
 8009454:	d123      	bne.n	800949e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009460:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009462:	429a      	cmp	r2, r3
 8009464:	d11b      	bne.n	800949e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009470:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009472:	429a      	cmp	r2, r3
 8009474:	d113      	bne.n	800949e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009480:	085b      	lsrs	r3, r3, #1
 8009482:	3b01      	subs	r3, #1
 8009484:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009486:	429a      	cmp	r2, r3
 8009488:	d109      	bne.n	800949e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009494:	085b      	lsrs	r3, r3, #1
 8009496:	3b01      	subs	r3, #1
 8009498:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800949a:	429a      	cmp	r2, r3
 800949c:	d001      	beq.n	80094a2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e000      	b.n	80094a4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80094a2:	2300      	movs	r3, #0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3720      	adds	r7, #32
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	40021000 	.word	0x40021000
 80094b0:	019f800c 	.word	0x019f800c
 80094b4:	feeefffc 	.word	0xfeeefffc

080094b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	e11e      	b.n	800970e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80094d0:	4b91      	ldr	r3, [pc, #580]	@ (8009718 <HAL_RCC_ClockConfig+0x260>)
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 030f 	and.w	r3, r3, #15
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d910      	bls.n	8009500 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094de:	4b8e      	ldr	r3, [pc, #568]	@ (8009718 <HAL_RCC_ClockConfig+0x260>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f023 020f 	bic.w	r2, r3, #15
 80094e6:	498c      	ldr	r1, [pc, #560]	@ (8009718 <HAL_RCC_ClockConfig+0x260>)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094ee:	4b8a      	ldr	r3, [pc, #552]	@ (8009718 <HAL_RCC_ClockConfig+0x260>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 030f 	and.w	r3, r3, #15
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d001      	beq.n	8009500 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	e106      	b.n	800970e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 0301 	and.w	r3, r3, #1
 8009508:	2b00      	cmp	r3, #0
 800950a:	d073      	beq.n	80095f4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	2b03      	cmp	r3, #3
 8009512:	d129      	bne.n	8009568 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009514:	4b81      	ldr	r3, [pc, #516]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e0f4      	b.n	800970e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009524:	f000 f99e 	bl	8009864 <RCC_GetSysClockFreqFromPLLSource>
 8009528:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	4a7c      	ldr	r2, [pc, #496]	@ (8009720 <HAL_RCC_ClockConfig+0x268>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d93f      	bls.n	80095b2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009532:	4b7a      	ldr	r3, [pc, #488]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d009      	beq.n	8009552 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009546:	2b00      	cmp	r3, #0
 8009548:	d033      	beq.n	80095b2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800954e:	2b00      	cmp	r3, #0
 8009550:	d12f      	bne.n	80095b2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009552:	4b72      	ldr	r3, [pc, #456]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800955a:	4a70      	ldr	r2, [pc, #448]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 800955c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009560:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009562:	2380      	movs	r3, #128	@ 0x80
 8009564:	617b      	str	r3, [r7, #20]
 8009566:	e024      	b.n	80095b2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	2b02      	cmp	r3, #2
 800956e:	d107      	bne.n	8009580 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009570:	4b6a      	ldr	r3, [pc, #424]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d109      	bne.n	8009590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e0c6      	b.n	800970e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009580:	4b66      	ldr	r3, [pc, #408]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e0be      	b.n	800970e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009590:	f000 f8ce 	bl	8009730 <HAL_RCC_GetSysClockFreq>
 8009594:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	4a61      	ldr	r2, [pc, #388]	@ (8009720 <HAL_RCC_ClockConfig+0x268>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d909      	bls.n	80095b2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800959e:	4b5f      	ldr	r3, [pc, #380]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095a6:	4a5d      	ldr	r2, [pc, #372]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 80095a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095ac:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80095ae:	2380      	movs	r3, #128	@ 0x80
 80095b0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095b2:	4b5a      	ldr	r3, [pc, #360]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f023 0203 	bic.w	r2, r3, #3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	4957      	ldr	r1, [pc, #348]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 80095c0:	4313      	orrs	r3, r2
 80095c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095c4:	f7fd f922 	bl	800680c <HAL_GetTick>
 80095c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095ca:	e00a      	b.n	80095e2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095cc:	f7fd f91e 	bl	800680c <HAL_GetTick>
 80095d0:	4602      	mov	r2, r0
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095da:	4293      	cmp	r3, r2
 80095dc:	d901      	bls.n	80095e2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e095      	b.n	800970e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095e2:	4b4e      	ldr	r3, [pc, #312]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f003 020c 	and.w	r2, r3, #12
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	429a      	cmp	r2, r3
 80095f2:	d1eb      	bne.n	80095cc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d023      	beq.n	8009648 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d005      	beq.n	8009618 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800960c:	4b43      	ldr	r3, [pc, #268]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	4a42      	ldr	r2, [pc, #264]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 8009612:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009616:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0308 	and.w	r3, r3, #8
 8009620:	2b00      	cmp	r3, #0
 8009622:	d007      	beq.n	8009634 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009624:	4b3d      	ldr	r3, [pc, #244]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800962c:	4a3b      	ldr	r2, [pc, #236]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 800962e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009632:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009634:	4b39      	ldr	r3, [pc, #228]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	4936      	ldr	r1, [pc, #216]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 8009642:	4313      	orrs	r3, r2
 8009644:	608b      	str	r3, [r1, #8]
 8009646:	e008      	b.n	800965a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	2b80      	cmp	r3, #128	@ 0x80
 800964c:	d105      	bne.n	800965a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800964e:	4b33      	ldr	r3, [pc, #204]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	4a32      	ldr	r2, [pc, #200]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 8009654:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009658:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800965a:	4b2f      	ldr	r3, [pc, #188]	@ (8009718 <HAL_RCC_ClockConfig+0x260>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	429a      	cmp	r2, r3
 8009666:	d21d      	bcs.n	80096a4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009668:	4b2b      	ldr	r3, [pc, #172]	@ (8009718 <HAL_RCC_ClockConfig+0x260>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f023 020f 	bic.w	r2, r3, #15
 8009670:	4929      	ldr	r1, [pc, #164]	@ (8009718 <HAL_RCC_ClockConfig+0x260>)
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	4313      	orrs	r3, r2
 8009676:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009678:	f7fd f8c8 	bl	800680c <HAL_GetTick>
 800967c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800967e:	e00a      	b.n	8009696 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009680:	f7fd f8c4 	bl	800680c <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800968e:	4293      	cmp	r3, r2
 8009690:	d901      	bls.n	8009696 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e03b      	b.n	800970e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009696:	4b20      	ldr	r3, [pc, #128]	@ (8009718 <HAL_RCC_ClockConfig+0x260>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 030f 	and.w	r3, r3, #15
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d1ed      	bne.n	8009680 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 0304 	and.w	r3, r3, #4
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d008      	beq.n	80096c2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80096b0:	4b1a      	ldr	r3, [pc, #104]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	4917      	ldr	r1, [pc, #92]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0308 	and.w	r3, r3, #8
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d009      	beq.n	80096e2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096ce:	4b13      	ldr	r3, [pc, #76]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	490f      	ldr	r1, [pc, #60]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80096e2:	f000 f825 	bl	8009730 <HAL_RCC_GetSysClockFreq>
 80096e6:	4602      	mov	r2, r0
 80096e8:	4b0c      	ldr	r3, [pc, #48]	@ (800971c <HAL_RCC_ClockConfig+0x264>)
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	091b      	lsrs	r3, r3, #4
 80096ee:	f003 030f 	and.w	r3, r3, #15
 80096f2:	490c      	ldr	r1, [pc, #48]	@ (8009724 <HAL_RCC_ClockConfig+0x26c>)
 80096f4:	5ccb      	ldrb	r3, [r1, r3]
 80096f6:	f003 031f 	and.w	r3, r3, #31
 80096fa:	fa22 f303 	lsr.w	r3, r2, r3
 80096fe:	4a0a      	ldr	r2, [pc, #40]	@ (8009728 <HAL_RCC_ClockConfig+0x270>)
 8009700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009702:	4b0a      	ldr	r3, [pc, #40]	@ (800972c <HAL_RCC_ClockConfig+0x274>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4618      	mov	r0, r3
 8009708:	f7fd f834 	bl	8006774 <HAL_InitTick>
 800970c:	4603      	mov	r3, r0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3718      	adds	r7, #24
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}
 8009716:	bf00      	nop
 8009718:	40022000 	.word	0x40022000
 800971c:	40021000 	.word	0x40021000
 8009720:	04c4b400 	.word	0x04c4b400
 8009724:	0800f5d8 	.word	0x0800f5d8
 8009728:	20000394 	.word	0x20000394
 800972c:	20000398 	.word	0x20000398

08009730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009736:	4b2c      	ldr	r3, [pc, #176]	@ (80097e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f003 030c 	and.w	r3, r3, #12
 800973e:	2b04      	cmp	r3, #4
 8009740:	d102      	bne.n	8009748 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009742:	4b2a      	ldr	r3, [pc, #168]	@ (80097ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8009744:	613b      	str	r3, [r7, #16]
 8009746:	e047      	b.n	80097d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009748:	4b27      	ldr	r3, [pc, #156]	@ (80097e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	f003 030c 	and.w	r3, r3, #12
 8009750:	2b08      	cmp	r3, #8
 8009752:	d102      	bne.n	800975a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009754:	4b26      	ldr	r3, [pc, #152]	@ (80097f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009756:	613b      	str	r3, [r7, #16]
 8009758:	e03e      	b.n	80097d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800975a:	4b23      	ldr	r3, [pc, #140]	@ (80097e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800975c:	689b      	ldr	r3, [r3, #8]
 800975e:	f003 030c 	and.w	r3, r3, #12
 8009762:	2b0c      	cmp	r3, #12
 8009764:	d136      	bne.n	80097d4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009766:	4b20      	ldr	r3, [pc, #128]	@ (80097e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f003 0303 	and.w	r3, r3, #3
 800976e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009770:	4b1d      	ldr	r3, [pc, #116]	@ (80097e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	091b      	lsrs	r3, r3, #4
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	3301      	adds	r3, #1
 800977c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b03      	cmp	r3, #3
 8009782:	d10c      	bne.n	800979e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009784:	4a1a      	ldr	r2, [pc, #104]	@ (80097f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	fbb2 f3f3 	udiv	r3, r2, r3
 800978c:	4a16      	ldr	r2, [pc, #88]	@ (80097e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800978e:	68d2      	ldr	r2, [r2, #12]
 8009790:	0a12      	lsrs	r2, r2, #8
 8009792:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009796:	fb02 f303 	mul.w	r3, r2, r3
 800979a:	617b      	str	r3, [r7, #20]
      break;
 800979c:	e00c      	b.n	80097b8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800979e:	4a13      	ldr	r2, [pc, #76]	@ (80097ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a6:	4a10      	ldr	r2, [pc, #64]	@ (80097e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80097a8:	68d2      	ldr	r2, [r2, #12]
 80097aa:	0a12      	lsrs	r2, r2, #8
 80097ac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80097b0:	fb02 f303 	mul.w	r3, r2, r3
 80097b4:	617b      	str	r3, [r7, #20]
      break;
 80097b6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80097b8:	4b0b      	ldr	r3, [pc, #44]	@ (80097e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	0e5b      	lsrs	r3, r3, #25
 80097be:	f003 0303 	and.w	r3, r3, #3
 80097c2:	3301      	adds	r3, #1
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097d0:	613b      	str	r3, [r7, #16]
 80097d2:	e001      	b.n	80097d8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80097d4:	2300      	movs	r3, #0
 80097d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80097d8:	693b      	ldr	r3, [r7, #16]
}
 80097da:	4618      	mov	r0, r3
 80097dc:	371c      	adds	r7, #28
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	40021000 	.word	0x40021000
 80097ec:	00f42400 	.word	0x00f42400
 80097f0:	016e3600 	.word	0x016e3600

080097f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097f4:	b480      	push	{r7}
 80097f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80097f8:	4b03      	ldr	r3, [pc, #12]	@ (8009808 <HAL_RCC_GetHCLKFreq+0x14>)
 80097fa:	681b      	ldr	r3, [r3, #0]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	20000394 	.word	0x20000394

0800980c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009810:	f7ff fff0 	bl	80097f4 <HAL_RCC_GetHCLKFreq>
 8009814:	4602      	mov	r2, r0
 8009816:	4b06      	ldr	r3, [pc, #24]	@ (8009830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	0a1b      	lsrs	r3, r3, #8
 800981c:	f003 0307 	and.w	r3, r3, #7
 8009820:	4904      	ldr	r1, [pc, #16]	@ (8009834 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009822:	5ccb      	ldrb	r3, [r1, r3]
 8009824:	f003 031f 	and.w	r3, r3, #31
 8009828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800982c:	4618      	mov	r0, r3
 800982e:	bd80      	pop	{r7, pc}
 8009830:	40021000 	.word	0x40021000
 8009834:	0800f5e8 	.word	0x0800f5e8

08009838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800983c:	f7ff ffda 	bl	80097f4 <HAL_RCC_GetHCLKFreq>
 8009840:	4602      	mov	r2, r0
 8009842:	4b06      	ldr	r3, [pc, #24]	@ (800985c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	0adb      	lsrs	r3, r3, #11
 8009848:	f003 0307 	and.w	r3, r3, #7
 800984c:	4904      	ldr	r1, [pc, #16]	@ (8009860 <HAL_RCC_GetPCLK2Freq+0x28>)
 800984e:	5ccb      	ldrb	r3, [r1, r3]
 8009850:	f003 031f 	and.w	r3, r3, #31
 8009854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009858:	4618      	mov	r0, r3
 800985a:	bd80      	pop	{r7, pc}
 800985c:	40021000 	.word	0x40021000
 8009860:	0800f5e8 	.word	0x0800f5e8

08009864 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009864:	b480      	push	{r7}
 8009866:	b087      	sub	sp, #28
 8009868:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800986a:	4b1e      	ldr	r3, [pc, #120]	@ (80098e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	f003 0303 	and.w	r3, r3, #3
 8009872:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009874:	4b1b      	ldr	r3, [pc, #108]	@ (80098e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	091b      	lsrs	r3, r3, #4
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	3301      	adds	r3, #1
 8009880:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	2b03      	cmp	r3, #3
 8009886:	d10c      	bne.n	80098a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009888:	4a17      	ldr	r2, [pc, #92]	@ (80098e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009890:	4a14      	ldr	r2, [pc, #80]	@ (80098e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009892:	68d2      	ldr	r2, [r2, #12]
 8009894:	0a12      	lsrs	r2, r2, #8
 8009896:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800989a:	fb02 f303 	mul.w	r3, r2, r3
 800989e:	617b      	str	r3, [r7, #20]
    break;
 80098a0:	e00c      	b.n	80098bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80098a2:	4a12      	ldr	r2, [pc, #72]	@ (80098ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098aa:	4a0e      	ldr	r2, [pc, #56]	@ (80098e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098ac:	68d2      	ldr	r2, [r2, #12]
 80098ae:	0a12      	lsrs	r2, r2, #8
 80098b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80098b4:	fb02 f303 	mul.w	r3, r2, r3
 80098b8:	617b      	str	r3, [r7, #20]
    break;
 80098ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098bc:	4b09      	ldr	r3, [pc, #36]	@ (80098e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	0e5b      	lsrs	r3, r3, #25
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	3301      	adds	r3, #1
 80098c8:	005b      	lsls	r3, r3, #1
 80098ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80098d6:	687b      	ldr	r3, [r7, #4]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	371c      	adds	r7, #28
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	40021000 	.word	0x40021000
 80098e8:	016e3600 	.word	0x016e3600
 80098ec:	00f42400 	.word	0x00f42400

080098f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b086      	sub	sp, #24
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098f8:	2300      	movs	r3, #0
 80098fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098fc:	2300      	movs	r3, #0
 80098fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009908:	2b00      	cmp	r3, #0
 800990a:	f000 8098 	beq.w	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800990e:	2300      	movs	r3, #0
 8009910:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009912:	4b43      	ldr	r3, [pc, #268]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10d      	bne.n	800993a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800991e:	4b40      	ldr	r3, [pc, #256]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009922:	4a3f      	ldr	r2, [pc, #252]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009928:	6593      	str	r3, [r2, #88]	@ 0x58
 800992a:	4b3d      	ldr	r3, [pc, #244]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800992c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800992e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009932:	60bb      	str	r3, [r7, #8]
 8009934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009936:	2301      	movs	r3, #1
 8009938:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800993a:	4b3a      	ldr	r3, [pc, #232]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a39      	ldr	r2, [pc, #228]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009944:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009946:	f7fc ff61 	bl	800680c <HAL_GetTick>
 800994a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800994c:	e009      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800994e:	f7fc ff5d 	bl	800680c <HAL_GetTick>
 8009952:	4602      	mov	r2, r0
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	1ad3      	subs	r3, r2, r3
 8009958:	2b02      	cmp	r3, #2
 800995a:	d902      	bls.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800995c:	2303      	movs	r3, #3
 800995e:	74fb      	strb	r3, [r7, #19]
        break;
 8009960:	e005      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009962:	4b30      	ldr	r3, [pc, #192]	@ (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800996a:	2b00      	cmp	r3, #0
 800996c:	d0ef      	beq.n	800994e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800996e:	7cfb      	ldrb	r3, [r7, #19]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d159      	bne.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009974:	4b2a      	ldr	r3, [pc, #168]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800997a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800997e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d01e      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	429a      	cmp	r2, r3
 800998e:	d019      	beq.n	80099c4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009990:	4b23      	ldr	r3, [pc, #140]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800999a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800999c:	4b20      	ldr	r3, [pc, #128]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800999e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80099ac:	4b1c      	ldr	r3, [pc, #112]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80099bc:	4a18      	ldr	r2, [pc, #96]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d016      	beq.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ce:	f7fc ff1d 	bl	800680c <HAL_GetTick>
 80099d2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099d4:	e00b      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099d6:	f7fc ff19 	bl	800680c <HAL_GetTick>
 80099da:	4602      	mov	r2, r0
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	1ad3      	subs	r3, r2, r3
 80099e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d902      	bls.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	74fb      	strb	r3, [r7, #19]
            break;
 80099ec:	e006      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099f4:	f003 0302 	and.w	r3, r3, #2
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d0ec      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80099fc:	7cfb      	ldrb	r3, [r7, #19]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d10b      	bne.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a02:	4b07      	ldr	r3, [pc, #28]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a10:	4903      	ldr	r1, [pc, #12]	@ (8009a20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a12:	4313      	orrs	r3, r2
 8009a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009a18:	e008      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a1a:	7cfb      	ldrb	r3, [r7, #19]
 8009a1c:	74bb      	strb	r3, [r7, #18]
 8009a1e:	e005      	b.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009a20:	40021000 	.word	0x40021000
 8009a24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a28:	7cfb      	ldrb	r3, [r7, #19]
 8009a2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a2c:	7c7b      	ldrb	r3, [r7, #17]
 8009a2e:	2b01      	cmp	r3, #1
 8009a30:	d105      	bne.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a32:	4ba7      	ldr	r3, [pc, #668]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a36:	4aa6      	ldr	r2, [pc, #664]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a3c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00a      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a4a:	4ba1      	ldr	r3, [pc, #644]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a50:	f023 0203 	bic.w	r2, r3, #3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	499d      	ldr	r1, [pc, #628]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0302 	and.w	r3, r3, #2
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00a      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a6c:	4b98      	ldr	r3, [pc, #608]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a72:	f023 020c 	bic.w	r2, r3, #12
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	4995      	ldr	r1, [pc, #596]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0304 	and.w	r3, r3, #4
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009a8e:	4b90      	ldr	r3, [pc, #576]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a94:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	498c      	ldr	r1, [pc, #560]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0308 	and.w	r3, r3, #8
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00a      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ab0:	4b87      	ldr	r3, [pc, #540]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ab6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	4984      	ldr	r1, [pc, #528]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0310 	and.w	r3, r3, #16
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009ad2:	4b7f      	ldr	r3, [pc, #508]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	497b      	ldr	r1, [pc, #492]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0320 	and.w	r3, r3, #32
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00a      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009af4:	4b76      	ldr	r3, [pc, #472]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009afa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	4973      	ldr	r1, [pc, #460]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b16:	4b6e      	ldr	r3, [pc, #440]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b1c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	69db      	ldr	r3, [r3, #28]
 8009b24:	496a      	ldr	r1, [pc, #424]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00a      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009b38:	4b65      	ldr	r3, [pc, #404]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b3e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	4962      	ldr	r1, [pc, #392]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b60:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b68:	4959      	ldr	r1, [pc, #356]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d00a      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b7c:	4b54      	ldr	r3, [pc, #336]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b82:	f023 0203 	bic.w	r2, r3, #3
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b8a:	4951      	ldr	r1, [pc, #324]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00a      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ba4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bac:	4948      	ldr	r1, [pc, #288]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d015      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009bc0:	4b43      	ldr	r3, [pc, #268]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bce:	4940      	ldr	r1, [pc, #256]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bde:	d105      	bne.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009be0:	4b3b      	ldr	r3, [pc, #236]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	4a3a      	ldr	r2, [pc, #232]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009be6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009bea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d015      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009bf8:	4b35      	ldr	r3, [pc, #212]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bfe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c06:	4932      	ldr	r1, [pc, #200]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c16:	d105      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c18:	4b2d      	ldr	r3, [pc, #180]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	4a2c      	ldr	r2, [pc, #176]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c22:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d015      	beq.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c30:	4b27      	ldr	r3, [pc, #156]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c36:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c3e:	4924      	ldr	r1, [pc, #144]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c4e:	d105      	bne.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c50:	4b1f      	ldr	r3, [pc, #124]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	4a1e      	ldr	r2, [pc, #120]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d015      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c68:	4b19      	ldr	r3, [pc, #100]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c76:	4916      	ldr	r1, [pc, #88]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c86:	d105      	bne.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c88:	4b11      	ldr	r3, [pc, #68]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	4a10      	ldr	r2, [pc, #64]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d019      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ca6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cae:	4908      	ldr	r1, [pc, #32]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cbe:	d109      	bne.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009cc0:	4b03      	ldr	r3, [pc, #12]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	4a02      	ldr	r2, [pc, #8]	@ (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cca:	60d3      	str	r3, [r2, #12]
 8009ccc:	e002      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009cce:	bf00      	nop
 8009cd0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d015      	beq.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009ce0:	4b29      	ldr	r3, [pc, #164]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ce6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cee:	4926      	ldr	r1, [pc, #152]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cfa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009cfe:	d105      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d00:	4b21      	ldr	r3, [pc, #132]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	4a20      	ldr	r2, [pc, #128]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d0a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d015      	beq.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009d18:	4b1b      	ldr	r3, [pc, #108]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d1e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d26:	4918      	ldr	r1, [pc, #96]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d36:	d105      	bne.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d38:	4b13      	ldr	r3, [pc, #76]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	4a12      	ldr	r2, [pc, #72]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d42:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d015      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009d50:	4b0d      	ldr	r3, [pc, #52]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d5e:	490a      	ldr	r1, [pc, #40]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d6e:	d105      	bne.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d70:	4b05      	ldr	r3, [pc, #20]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	4a04      	ldr	r2, [pc, #16]	@ (8009d88 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009d7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3718      	adds	r7, #24
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	40021000 	.word	0x40021000

08009d8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d101      	bne.n	8009d9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e054      	b.n	8009e48 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d111      	bne.n	8009dce <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f001 fee2 	bl	800bb7c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d102      	bne.n	8009dc6 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a23      	ldr	r2, [pc, #140]	@ (8009e50 <HAL_TIM_Base_Init+0xc4>)
 8009dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	4619      	mov	r1, r3
 8009de0:	4610      	mov	r0, r2
 8009de2:	f001 fa2b 	bl	800b23c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2201      	movs	r2, #1
 8009df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2201      	movs	r2, #1
 8009e22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2201      	movs	r2, #1
 8009e3a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	08006035 	.word	0x08006035

08009e54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d001      	beq.n	8009e6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e04c      	b.n	8009f06 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2202      	movs	r2, #2
 8009e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a26      	ldr	r2, [pc, #152]	@ (8009f14 <HAL_TIM_Base_Start+0xc0>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d022      	beq.n	8009ec4 <HAL_TIM_Base_Start+0x70>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e86:	d01d      	beq.n	8009ec4 <HAL_TIM_Base_Start+0x70>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a22      	ldr	r2, [pc, #136]	@ (8009f18 <HAL_TIM_Base_Start+0xc4>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d018      	beq.n	8009ec4 <HAL_TIM_Base_Start+0x70>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a21      	ldr	r2, [pc, #132]	@ (8009f1c <HAL_TIM_Base_Start+0xc8>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d013      	beq.n	8009ec4 <HAL_TIM_Base_Start+0x70>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8009f20 <HAL_TIM_Base_Start+0xcc>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00e      	beq.n	8009ec4 <HAL_TIM_Base_Start+0x70>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8009f24 <HAL_TIM_Base_Start+0xd0>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d009      	beq.n	8009ec4 <HAL_TIM_Base_Start+0x70>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8009f28 <HAL_TIM_Base_Start+0xd4>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d004      	beq.n	8009ec4 <HAL_TIM_Base_Start+0x70>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a1b      	ldr	r2, [pc, #108]	@ (8009f2c <HAL_TIM_Base_Start+0xd8>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d115      	bne.n	8009ef0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	689a      	ldr	r2, [r3, #8]
 8009eca:	4b19      	ldr	r3, [pc, #100]	@ (8009f30 <HAL_TIM_Base_Start+0xdc>)
 8009ecc:	4013      	ands	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2b06      	cmp	r3, #6
 8009ed4:	d015      	beq.n	8009f02 <HAL_TIM_Base_Start+0xae>
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009edc:	d011      	beq.n	8009f02 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f042 0201 	orr.w	r2, r2, #1
 8009eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eee:	e008      	b.n	8009f02 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f042 0201 	orr.w	r2, r2, #1
 8009efe:	601a      	str	r2, [r3, #0]
 8009f00:	e000      	b.n	8009f04 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3714      	adds	r7, #20
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	40012c00 	.word	0x40012c00
 8009f18:	40000400 	.word	0x40000400
 8009f1c:	40000800 	.word	0x40000800
 8009f20:	40000c00 	.word	0x40000c00
 8009f24:	40013400 	.word	0x40013400
 8009f28:	40014000 	.word	0x40014000
 8009f2c:	40015000 	.word	0x40015000
 8009f30:	00010007 	.word	0x00010007

08009f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d001      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e054      	b.n	8009ff6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68da      	ldr	r2, [r3, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0201 	orr.w	r2, r2, #1
 8009f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a26      	ldr	r2, [pc, #152]	@ (800a004 <HAL_TIM_Base_Start_IT+0xd0>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d022      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f76:	d01d      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a22      	ldr	r2, [pc, #136]	@ (800a008 <HAL_TIM_Base_Start_IT+0xd4>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d018      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a21      	ldr	r2, [pc, #132]	@ (800a00c <HAL_TIM_Base_Start_IT+0xd8>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d013      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a1f      	ldr	r2, [pc, #124]	@ (800a010 <HAL_TIM_Base_Start_IT+0xdc>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d00e      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a1e      	ldr	r2, [pc, #120]	@ (800a014 <HAL_TIM_Base_Start_IT+0xe0>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d009      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a1c      	ldr	r2, [pc, #112]	@ (800a018 <HAL_TIM_Base_Start_IT+0xe4>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d004      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a1b      	ldr	r2, [pc, #108]	@ (800a01c <HAL_TIM_Base_Start_IT+0xe8>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d115      	bne.n	8009fe0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689a      	ldr	r2, [r3, #8]
 8009fba:	4b19      	ldr	r3, [pc, #100]	@ (800a020 <HAL_TIM_Base_Start_IT+0xec>)
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b06      	cmp	r3, #6
 8009fc4:	d015      	beq.n	8009ff2 <HAL_TIM_Base_Start_IT+0xbe>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fcc:	d011      	beq.n	8009ff2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f042 0201 	orr.w	r2, r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fde:	e008      	b.n	8009ff2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f042 0201 	orr.w	r2, r2, #1
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	e000      	b.n	8009ff4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	40012c00 	.word	0x40012c00
 800a008:	40000400 	.word	0x40000400
 800a00c:	40000800 	.word	0x40000800
 800a010:	40000c00 	.word	0x40000c00
 800a014:	40013400 	.word	0x40013400
 800a018:	40014000 	.word	0x40014000
 800a01c:	40015000 	.word	0x40015000
 800a020:	00010007 	.word	0x00010007

0800a024 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d101      	bne.n	800a036 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a032:	2301      	movs	r3, #1
 800a034:	e054      	b.n	800a0e0 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d111      	bne.n	800a066 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f001 fd96 	bl	800bb7c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a23      	ldr	r2, [pc, #140]	@ (800a0e8 <HAL_TIM_PWM_Init+0xc4>)
 800a05c:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2202      	movs	r2, #2
 800a06a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3304      	adds	r3, #4
 800a076:	4619      	mov	r1, r3
 800a078:	4610      	mov	r0, r2
 800a07a:	f001 f8df 	bl	800b23c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2201      	movs	r2, #1
 800a092:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2201      	movs	r2, #1
 800a0ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3708      	adds	r7, #8
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	08005fe9 	.word	0x08005fe9

0800a0ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d109      	bne.n	800a110 <HAL_TIM_PWM_Start+0x24>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a102:	b2db      	uxtb	r3, r3
 800a104:	2b01      	cmp	r3, #1
 800a106:	bf14      	ite	ne
 800a108:	2301      	movne	r3, #1
 800a10a:	2300      	moveq	r3, #0
 800a10c:	b2db      	uxtb	r3, r3
 800a10e:	e03c      	b.n	800a18a <HAL_TIM_PWM_Start+0x9e>
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	2b04      	cmp	r3, #4
 800a114:	d109      	bne.n	800a12a <HAL_TIM_PWM_Start+0x3e>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b01      	cmp	r3, #1
 800a120:	bf14      	ite	ne
 800a122:	2301      	movne	r3, #1
 800a124:	2300      	moveq	r3, #0
 800a126:	b2db      	uxtb	r3, r3
 800a128:	e02f      	b.n	800a18a <HAL_TIM_PWM_Start+0x9e>
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	2b08      	cmp	r3, #8
 800a12e:	d109      	bne.n	800a144 <HAL_TIM_PWM_Start+0x58>
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a136:	b2db      	uxtb	r3, r3
 800a138:	2b01      	cmp	r3, #1
 800a13a:	bf14      	ite	ne
 800a13c:	2301      	movne	r3, #1
 800a13e:	2300      	moveq	r3, #0
 800a140:	b2db      	uxtb	r3, r3
 800a142:	e022      	b.n	800a18a <HAL_TIM_PWM_Start+0x9e>
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	2b0c      	cmp	r3, #12
 800a148:	d109      	bne.n	800a15e <HAL_TIM_PWM_Start+0x72>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b01      	cmp	r3, #1
 800a154:	bf14      	ite	ne
 800a156:	2301      	movne	r3, #1
 800a158:	2300      	moveq	r3, #0
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	e015      	b.n	800a18a <HAL_TIM_PWM_Start+0x9e>
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	2b10      	cmp	r3, #16
 800a162:	d109      	bne.n	800a178 <HAL_TIM_PWM_Start+0x8c>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	bf14      	ite	ne
 800a170:	2301      	movne	r3, #1
 800a172:	2300      	moveq	r3, #0
 800a174:	b2db      	uxtb	r3, r3
 800a176:	e008      	b.n	800a18a <HAL_TIM_PWM_Start+0x9e>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b01      	cmp	r3, #1
 800a182:	bf14      	ite	ne
 800a184:	2301      	movne	r3, #1
 800a186:	2300      	moveq	r3, #0
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e0a6      	b.n	800a2e0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d104      	bne.n	800a1a2 <HAL_TIM_PWM_Start+0xb6>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2202      	movs	r2, #2
 800a19c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1a0:	e023      	b.n	800a1ea <HAL_TIM_PWM_Start+0xfe>
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	d104      	bne.n	800a1b2 <HAL_TIM_PWM_Start+0xc6>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2202      	movs	r2, #2
 800a1ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1b0:	e01b      	b.n	800a1ea <HAL_TIM_PWM_Start+0xfe>
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b08      	cmp	r3, #8
 800a1b6:	d104      	bne.n	800a1c2 <HAL_TIM_PWM_Start+0xd6>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a1c0:	e013      	b.n	800a1ea <HAL_TIM_PWM_Start+0xfe>
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	2b0c      	cmp	r3, #12
 800a1c6:	d104      	bne.n	800a1d2 <HAL_TIM_PWM_Start+0xe6>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2202      	movs	r2, #2
 800a1cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a1d0:	e00b      	b.n	800a1ea <HAL_TIM_PWM_Start+0xfe>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2b10      	cmp	r3, #16
 800a1d6:	d104      	bne.n	800a1e2 <HAL_TIM_PWM_Start+0xf6>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a1e0:	e003      	b.n	800a1ea <HAL_TIM_PWM_Start+0xfe>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2202      	movs	r2, #2
 800a1e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	6839      	ldr	r1, [r7, #0]
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f001 fc9c 	bl	800bb30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a3a      	ldr	r2, [pc, #232]	@ (800a2e8 <HAL_TIM_PWM_Start+0x1fc>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d018      	beq.n	800a234 <HAL_TIM_PWM_Start+0x148>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a39      	ldr	r2, [pc, #228]	@ (800a2ec <HAL_TIM_PWM_Start+0x200>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d013      	beq.n	800a234 <HAL_TIM_PWM_Start+0x148>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a37      	ldr	r2, [pc, #220]	@ (800a2f0 <HAL_TIM_PWM_Start+0x204>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d00e      	beq.n	800a234 <HAL_TIM_PWM_Start+0x148>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a36      	ldr	r2, [pc, #216]	@ (800a2f4 <HAL_TIM_PWM_Start+0x208>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d009      	beq.n	800a234 <HAL_TIM_PWM_Start+0x148>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a34      	ldr	r2, [pc, #208]	@ (800a2f8 <HAL_TIM_PWM_Start+0x20c>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d004      	beq.n	800a234 <HAL_TIM_PWM_Start+0x148>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a33      	ldr	r2, [pc, #204]	@ (800a2fc <HAL_TIM_PWM_Start+0x210>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d101      	bne.n	800a238 <HAL_TIM_PWM_Start+0x14c>
 800a234:	2301      	movs	r3, #1
 800a236:	e000      	b.n	800a23a <HAL_TIM_PWM_Start+0x14e>
 800a238:	2300      	movs	r3, #0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d007      	beq.n	800a24e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a24c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a25      	ldr	r2, [pc, #148]	@ (800a2e8 <HAL_TIM_PWM_Start+0x1fc>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d022      	beq.n	800a29e <HAL_TIM_PWM_Start+0x1b2>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a260:	d01d      	beq.n	800a29e <HAL_TIM_PWM_Start+0x1b2>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a26      	ldr	r2, [pc, #152]	@ (800a300 <HAL_TIM_PWM_Start+0x214>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d018      	beq.n	800a29e <HAL_TIM_PWM_Start+0x1b2>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a24      	ldr	r2, [pc, #144]	@ (800a304 <HAL_TIM_PWM_Start+0x218>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d013      	beq.n	800a29e <HAL_TIM_PWM_Start+0x1b2>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a23      	ldr	r2, [pc, #140]	@ (800a308 <HAL_TIM_PWM_Start+0x21c>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d00e      	beq.n	800a29e <HAL_TIM_PWM_Start+0x1b2>
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a19      	ldr	r2, [pc, #100]	@ (800a2ec <HAL_TIM_PWM_Start+0x200>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d009      	beq.n	800a29e <HAL_TIM_PWM_Start+0x1b2>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a18      	ldr	r2, [pc, #96]	@ (800a2f0 <HAL_TIM_PWM_Start+0x204>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d004      	beq.n	800a29e <HAL_TIM_PWM_Start+0x1b2>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a18      	ldr	r2, [pc, #96]	@ (800a2fc <HAL_TIM_PWM_Start+0x210>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d115      	bne.n	800a2ca <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	4b19      	ldr	r3, [pc, #100]	@ (800a30c <HAL_TIM_PWM_Start+0x220>)
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b06      	cmp	r3, #6
 800a2ae:	d015      	beq.n	800a2dc <HAL_TIM_PWM_Start+0x1f0>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2b6:	d011      	beq.n	800a2dc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f042 0201 	orr.w	r2, r2, #1
 800a2c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c8:	e008      	b.n	800a2dc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f042 0201 	orr.w	r2, r2, #1
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	e000      	b.n	800a2de <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	40012c00 	.word	0x40012c00
 800a2ec:	40013400 	.word	0x40013400
 800a2f0:	40014000 	.word	0x40014000
 800a2f4:	40014400 	.word	0x40014400
 800a2f8:	40014800 	.word	0x40014800
 800a2fc:	40015000 	.word	0x40015000
 800a300:	40000400 	.word	0x40000400
 800a304:	40000800 	.word	0x40000800
 800a308:	40000c00 	.word	0x40000c00
 800a30c:	00010007 	.word	0x00010007

0800a310 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	e04c      	b.n	800a3be <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d111      	bne.n	800a354 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2200      	movs	r2, #0
 800a334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f001 fc1f 	bl	800bb7c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a342:	2b00      	cmp	r3, #0
 800a344:	d102      	bne.n	800a34c <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	4a1f      	ldr	r2, [pc, #124]	@ (800a3c8 <HAL_TIM_OnePulse_Init+0xb8>)
 800a34a:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a350:	6878      	ldr	r0, [r7, #4]
 800a352:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	3304      	adds	r3, #4
 800a364:	4619      	mov	r1, r3
 800a366:	4610      	mov	r0, r2
 800a368:	f000 ff68 	bl	800b23c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f022 0208 	bic.w	r2, r2, #8
 800a37a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6819      	ldr	r1, [r3, #0]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	430a      	orrs	r2, r1
 800a38a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2201      	movs	r2, #1
 800a390:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2201      	movs	r2, #1
 800a3b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	0800a3cd 	.word	0x0800a3cd

0800a3cc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800a3d4:	bf00      	nop
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a3f0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a3f8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a400:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a408:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d108      	bne.n	800a422 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a410:	7bbb      	ldrb	r3, [r7, #14]
 800a412:	2b01      	cmp	r3, #1
 800a414:	d105      	bne.n	800a422 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a416:	7b7b      	ldrb	r3, [r7, #13]
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d102      	bne.n	800a422 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a41c:	7b3b      	ldrb	r3, [r7, #12]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d001      	beq.n	800a426 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e059      	b.n	800a4da <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2202      	movs	r2, #2
 800a42a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	2202      	movs	r2, #2
 800a432:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2202      	movs	r2, #2
 800a43a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2202      	movs	r2, #2
 800a442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68da      	ldr	r2, [r3, #12]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f042 0202 	orr.w	r2, r2, #2
 800a454:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68da      	ldr	r2, [r3, #12]
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f042 0204 	orr.w	r2, r2, #4
 800a464:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2201      	movs	r2, #1
 800a46c:	2100      	movs	r1, #0
 800a46e:	4618      	mov	r0, r3
 800a470:	f001 fb5e 	bl	800bb30 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2201      	movs	r2, #1
 800a47a:	2104      	movs	r1, #4
 800a47c:	4618      	mov	r0, r3
 800a47e:	f001 fb57 	bl	800bb30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a17      	ldr	r2, [pc, #92]	@ (800a4e4 <HAL_TIM_OnePulse_Start_IT+0x104>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d018      	beq.n	800a4be <HAL_TIM_OnePulse_Start_IT+0xde>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	4a15      	ldr	r2, [pc, #84]	@ (800a4e8 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d013      	beq.n	800a4be <HAL_TIM_OnePulse_Start_IT+0xde>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a14      	ldr	r2, [pc, #80]	@ (800a4ec <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d00e      	beq.n	800a4be <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a12      	ldr	r2, [pc, #72]	@ (800a4f0 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d009      	beq.n	800a4be <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a11      	ldr	r2, [pc, #68]	@ (800a4f4 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d004      	beq.n	800a4be <HAL_TIM_OnePulse_Start_IT+0xde>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a0f      	ldr	r2, [pc, #60]	@ (800a4f8 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d101      	bne.n	800a4c2 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e000      	b.n	800a4c4 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d007      	beq.n	800a4d8 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4d6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	40012c00 	.word	0x40012c00
 800a4e8:	40013400 	.word	0x40013400
 800a4ec:	40014000 	.word	0x40014000
 800a4f0:	40014400 	.word	0x40014400
 800a4f4:	40014800 	.word	0x40014800
 800a4f8:	40015000 	.word	0x40015000

0800a4fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e0a2      	b.n	800a656 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d111      	bne.n	800a540 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2200      	movs	r2, #0
 800a520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f001 fb29 	bl	800bb7c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d102      	bne.n	800a538 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a4a      	ldr	r2, [pc, #296]	@ (800a660 <HAL_TIM_Encoder_Init+0x164>)
 800a536:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	6812      	ldr	r2, [r2, #0]
 800a552:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a556:	f023 0307 	bic.w	r3, r3, #7
 800a55a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3304      	adds	r3, #4
 800a564:	4619      	mov	r1, r3
 800a566:	4610      	mov	r0, r2
 800a568:	f000 fe68 	bl	800b23c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	6a1b      	ldr	r3, [r3, #32]
 800a582:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a594:	f023 0303 	bic.w	r3, r3, #3
 800a598:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	689a      	ldr	r2, [r3, #8]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	699b      	ldr	r3, [r3, #24]
 800a5a2:	021b      	lsls	r3, r3, #8
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	693a      	ldr	r2, [r7, #16]
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a5b2:	f023 030c 	bic.w	r3, r3, #12
 800a5b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a5be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a5c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	68da      	ldr	r2, [r3, #12]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	693a      	ldr	r2, [r7, #16]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	011a      	lsls	r2, r3, #4
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	031b      	lsls	r3, r3, #12
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a5f0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a5f8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	685a      	ldr	r2, [r3, #4]
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	695b      	ldr	r3, [r3, #20]
 800a602:	011b      	lsls	r3, r3, #4
 800a604:	4313      	orrs	r3, r2
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	4313      	orrs	r3, r2
 800a60a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2201      	movs	r2, #1
 800a628:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2201      	movs	r2, #1
 800a630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3718      	adds	r7, #24
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	08006105 	.word	0x08006105

0800a664 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a674:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a67c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a684:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a68c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d110      	bne.n	800a6b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a694:	7bfb      	ldrb	r3, [r7, #15]
 800a696:	2b01      	cmp	r3, #1
 800a698:	d102      	bne.n	800a6a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a69a:	7b7b      	ldrb	r3, [r7, #13]
 800a69c:	2b01      	cmp	r3, #1
 800a69e:	d001      	beq.n	800a6a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	e069      	b.n	800a778 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2202      	movs	r2, #2
 800a6a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6b4:	e031      	b.n	800a71a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	d110      	bne.n	800a6de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6bc:	7bbb      	ldrb	r3, [r7, #14]
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d102      	bne.n	800a6c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a6c2:	7b3b      	ldrb	r3, [r7, #12]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d001      	beq.n	800a6cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e055      	b.n	800a778 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2202      	movs	r2, #2
 800a6d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2202      	movs	r2, #2
 800a6d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6dc:	e01d      	b.n	800a71a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6de:	7bfb      	ldrb	r3, [r7, #15]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d108      	bne.n	800a6f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d105      	bne.n	800a6f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a6ea:	7b7b      	ldrb	r3, [r7, #13]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d102      	bne.n	800a6f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a6f0:	7b3b      	ldrb	r3, [r7, #12]
 800a6f2:	2b01      	cmp	r3, #1
 800a6f4:	d001      	beq.n	800a6fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e03e      	b.n	800a778 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2202      	movs	r2, #2
 800a706:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2202      	movs	r2, #2
 800a70e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2202      	movs	r2, #2
 800a716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d003      	beq.n	800a728 <HAL_TIM_Encoder_Start+0xc4>
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	2b04      	cmp	r3, #4
 800a724:	d008      	beq.n	800a738 <HAL_TIM_Encoder_Start+0xd4>
 800a726:	e00f      	b.n	800a748 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2201      	movs	r2, #1
 800a72e:	2100      	movs	r1, #0
 800a730:	4618      	mov	r0, r3
 800a732:	f001 f9fd 	bl	800bb30 <TIM_CCxChannelCmd>
      break;
 800a736:	e016      	b.n	800a766 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2201      	movs	r2, #1
 800a73e:	2104      	movs	r1, #4
 800a740:	4618      	mov	r0, r3
 800a742:	f001 f9f5 	bl	800bb30 <TIM_CCxChannelCmd>
      break;
 800a746:	e00e      	b.n	800a766 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2201      	movs	r2, #1
 800a74e:	2100      	movs	r1, #0
 800a750:	4618      	mov	r0, r3
 800a752:	f001 f9ed 	bl	800bb30 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2201      	movs	r2, #1
 800a75c:	2104      	movs	r1, #4
 800a75e:	4618      	mov	r0, r3
 800a760:	f001 f9e6 	bl	800bb30 <TIM_CCxChannelCmd>
      break;
 800a764:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f042 0201 	orr.w	r2, r2, #1
 800a774:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	3710      	adds	r7, #16
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd80      	pop	{r7, pc}

0800a780 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	691b      	ldr	r3, [r3, #16]
 800a796:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	f003 0302 	and.w	r3, r3, #2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d026      	beq.n	800a7f0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f003 0302 	and.w	r3, r3, #2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d021      	beq.n	800a7f0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f06f 0202 	mvn.w	r2, #2
 800a7b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	699b      	ldr	r3, [r3, #24]
 800a7c2:	f003 0303 	and.w	r3, r3, #3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d005      	beq.n	800a7d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	4798      	blx	r3
 800a7d4:	e009      	b.n	800a7ea <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	f003 0304 	and.w	r3, r3, #4
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d026      	beq.n	800a848 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f003 0304 	and.w	r3, r3, #4
 800a800:	2b00      	cmp	r3, #0
 800a802:	d021      	beq.n	800a848 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f06f 0204 	mvn.w	r2, #4
 800a80c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2202      	movs	r2, #2
 800a812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d005      	beq.n	800a82e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	4798      	blx	r3
 800a82c:	e009      	b.n	800a842 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	f003 0308 	and.w	r3, r3, #8
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d026      	beq.n	800a8a0 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f003 0308 	and.w	r3, r3, #8
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d021      	beq.n	800a8a0 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f06f 0208 	mvn.w	r2, #8
 800a864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2204      	movs	r2, #4
 800a86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	69db      	ldr	r3, [r3, #28]
 800a872:	f003 0303 	and.w	r3, r3, #3
 800a876:	2b00      	cmp	r3, #0
 800a878:	d005      	beq.n	800a886 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	4798      	blx	r3
 800a884:	e009      	b.n	800a89a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2200      	movs	r2, #0
 800a89e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f003 0310 	and.w	r3, r3, #16
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d026      	beq.n	800a8f8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	f003 0310 	and.w	r3, r3, #16
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d021      	beq.n	800a8f8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f06f 0210 	mvn.w	r2, #16
 800a8bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2208      	movs	r2, #8
 800a8c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d005      	beq.n	800a8de <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	4798      	blx	r3
 800a8dc:	e009      	b.n	800a8f2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a8f8:	68bb      	ldr	r3, [r7, #8]
 800a8fa:	f003 0301 	and.w	r3, r3, #1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00e      	beq.n	800a920 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f003 0301 	and.w	r3, r3, #1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d009      	beq.n	800a920 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f06f 0201 	mvn.w	r2, #1
 800a914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a926:	2b00      	cmp	r3, #0
 800a928:	d104      	bne.n	800a934 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00e      	beq.n	800a952 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d009      	beq.n	800a952 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d00e      	beq.n	800a97a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a962:	2b00      	cmp	r3, #0
 800a964:	d009      	beq.n	800a97a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a96e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a980:	2b00      	cmp	r3, #0
 800a982:	d00e      	beq.n	800a9a2 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d009      	beq.n	800a9a2 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f003 0320 	and.w	r3, r3, #32
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00e      	beq.n	800a9ca <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f003 0320 	and.w	r3, r3, #32
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d009      	beq.n	800a9ca <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f06f 0220 	mvn.w	r2, #32
 800a9be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00e      	beq.n	800a9f2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d009      	beq.n	800a9f2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00e      	beq.n	800aa1a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d009      	beq.n	800aa1a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800aa0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00e      	beq.n	800aa42 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d009      	beq.n	800aa42 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800aa36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00e      	beq.n	800aa6a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d009      	beq.n	800aa6a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800aa5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa6a:	bf00      	nop
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
	...

0800aa74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b086      	sub	sp, #24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa80:	2300      	movs	r3, #0
 800aa82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d101      	bne.n	800aa92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa8e:	2302      	movs	r3, #2
 800aa90:	e0ff      	b.n	800ac92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2b14      	cmp	r3, #20
 800aa9e:	f200 80f0 	bhi.w	800ac82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aaa2:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aaa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa8:	0800aafd 	.word	0x0800aafd
 800aaac:	0800ac83 	.word	0x0800ac83
 800aab0:	0800ac83 	.word	0x0800ac83
 800aab4:	0800ac83 	.word	0x0800ac83
 800aab8:	0800ab3d 	.word	0x0800ab3d
 800aabc:	0800ac83 	.word	0x0800ac83
 800aac0:	0800ac83 	.word	0x0800ac83
 800aac4:	0800ac83 	.word	0x0800ac83
 800aac8:	0800ab7f 	.word	0x0800ab7f
 800aacc:	0800ac83 	.word	0x0800ac83
 800aad0:	0800ac83 	.word	0x0800ac83
 800aad4:	0800ac83 	.word	0x0800ac83
 800aad8:	0800abbf 	.word	0x0800abbf
 800aadc:	0800ac83 	.word	0x0800ac83
 800aae0:	0800ac83 	.word	0x0800ac83
 800aae4:	0800ac83 	.word	0x0800ac83
 800aae8:	0800ac01 	.word	0x0800ac01
 800aaec:	0800ac83 	.word	0x0800ac83
 800aaf0:	0800ac83 	.word	0x0800ac83
 800aaf4:	0800ac83 	.word	0x0800ac83
 800aaf8:	0800ac41 	.word	0x0800ac41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	68b9      	ldr	r1, [r7, #8]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f000 fc4e 	bl	800b3a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	699a      	ldr	r2, [r3, #24]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f042 0208 	orr.w	r2, r2, #8
 800ab16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	699a      	ldr	r2, [r3, #24]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f022 0204 	bic.w	r2, r2, #4
 800ab26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6999      	ldr	r1, [r3, #24]
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	691a      	ldr	r2, [r3, #16]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	430a      	orrs	r2, r1
 800ab38:	619a      	str	r2, [r3, #24]
      break;
 800ab3a:	e0a5      	b.n	800ac88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	68b9      	ldr	r1, [r7, #8]
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 fcc8 	bl	800b4d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	699a      	ldr	r2, [r3, #24]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	699a      	ldr	r2, [r3, #24]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6999      	ldr	r1, [r3, #24]
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	691b      	ldr	r3, [r3, #16]
 800ab72:	021a      	lsls	r2, r3, #8
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	430a      	orrs	r2, r1
 800ab7a:	619a      	str	r2, [r3, #24]
      break;
 800ab7c:	e084      	b.n	800ac88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	68b9      	ldr	r1, [r7, #8]
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 fd3b 	bl	800b600 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	69da      	ldr	r2, [r3, #28]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f042 0208 	orr.w	r2, r2, #8
 800ab98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	69da      	ldr	r2, [r3, #28]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f022 0204 	bic.w	r2, r2, #4
 800aba8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	69d9      	ldr	r1, [r3, #28]
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	691a      	ldr	r2, [r3, #16]
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	430a      	orrs	r2, r1
 800abba:	61da      	str	r2, [r3, #28]
      break;
 800abbc:	e064      	b.n	800ac88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	68b9      	ldr	r1, [r7, #8]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 fdad 	bl	800b724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	69da      	ldr	r2, [r3, #28]
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800abd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	69da      	ldr	r2, [r3, #28]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	69d9      	ldr	r1, [r3, #28]
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	691b      	ldr	r3, [r3, #16]
 800abf4:	021a      	lsls	r2, r3, #8
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	430a      	orrs	r2, r1
 800abfc:	61da      	str	r2, [r3, #28]
      break;
 800abfe:	e043      	b.n	800ac88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	68b9      	ldr	r1, [r7, #8]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f000 fe20 	bl	800b84c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f042 0208 	orr.w	r2, r2, #8
 800ac1a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f022 0204 	bic.w	r2, r2, #4
 800ac2a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	691a      	ldr	r2, [r3, #16]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	430a      	orrs	r2, r1
 800ac3c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ac3e:	e023      	b.n	800ac88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68b9      	ldr	r1, [r7, #8]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f000 fe6a 	bl	800b920 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac6a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	021a      	lsls	r2, r3, #8
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ac80:	e002      	b.n	800ac88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	75fb      	strb	r3, [r7, #23]
      break;
 800ac86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac90:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3718      	adds	r7, #24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop

0800ac9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
 800aca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aca6:	2300      	movs	r3, #0
 800aca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	d101      	bne.n	800acb8 <HAL_TIM_ConfigClockSource+0x1c>
 800acb4:	2302      	movs	r3, #2
 800acb6:	e0f6      	b.n	800aea6 <HAL_TIM_ConfigClockSource+0x20a>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2202      	movs	r2, #2
 800acc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800acd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800acda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ace2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	68ba      	ldr	r2, [r7, #8]
 800acea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a6f      	ldr	r2, [pc, #444]	@ (800aeb0 <HAL_TIM_ConfigClockSource+0x214>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	f000 80c1 	beq.w	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800acf8:	4a6d      	ldr	r2, [pc, #436]	@ (800aeb0 <HAL_TIM_ConfigClockSource+0x214>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	f200 80c6 	bhi.w	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad00:	4a6c      	ldr	r2, [pc, #432]	@ (800aeb4 <HAL_TIM_ConfigClockSource+0x218>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	f000 80b9 	beq.w	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800ad08:	4a6a      	ldr	r2, [pc, #424]	@ (800aeb4 <HAL_TIM_ConfigClockSource+0x218>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	f200 80be 	bhi.w	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad10:	4a69      	ldr	r2, [pc, #420]	@ (800aeb8 <HAL_TIM_ConfigClockSource+0x21c>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	f000 80b1 	beq.w	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800ad18:	4a67      	ldr	r2, [pc, #412]	@ (800aeb8 <HAL_TIM_ConfigClockSource+0x21c>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	f200 80b6 	bhi.w	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad20:	4a66      	ldr	r2, [pc, #408]	@ (800aebc <HAL_TIM_ConfigClockSource+0x220>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	f000 80a9 	beq.w	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800ad28:	4a64      	ldr	r2, [pc, #400]	@ (800aebc <HAL_TIM_ConfigClockSource+0x220>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	f200 80ae 	bhi.w	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad30:	4a63      	ldr	r2, [pc, #396]	@ (800aec0 <HAL_TIM_ConfigClockSource+0x224>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	f000 80a1 	beq.w	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800ad38:	4a61      	ldr	r2, [pc, #388]	@ (800aec0 <HAL_TIM_ConfigClockSource+0x224>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	f200 80a6 	bhi.w	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad40:	4a60      	ldr	r2, [pc, #384]	@ (800aec4 <HAL_TIM_ConfigClockSource+0x228>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	f000 8099 	beq.w	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800ad48:	4a5e      	ldr	r2, [pc, #376]	@ (800aec4 <HAL_TIM_ConfigClockSource+0x228>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	f200 809e 	bhi.w	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ad54:	f000 8091 	beq.w	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800ad58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ad5c:	f200 8096 	bhi.w	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad64:	f000 8089 	beq.w	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800ad68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad6c:	f200 808e 	bhi.w	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad74:	d03e      	beq.n	800adf4 <HAL_TIM_ConfigClockSource+0x158>
 800ad76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad7a:	f200 8087 	bhi.w	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad82:	f000 8086 	beq.w	800ae92 <HAL_TIM_ConfigClockSource+0x1f6>
 800ad86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad8a:	d87f      	bhi.n	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad8c:	2b70      	cmp	r3, #112	@ 0x70
 800ad8e:	d01a      	beq.n	800adc6 <HAL_TIM_ConfigClockSource+0x12a>
 800ad90:	2b70      	cmp	r3, #112	@ 0x70
 800ad92:	d87b      	bhi.n	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad94:	2b60      	cmp	r3, #96	@ 0x60
 800ad96:	d050      	beq.n	800ae3a <HAL_TIM_ConfigClockSource+0x19e>
 800ad98:	2b60      	cmp	r3, #96	@ 0x60
 800ad9a:	d877      	bhi.n	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ad9c:	2b50      	cmp	r3, #80	@ 0x50
 800ad9e:	d03c      	beq.n	800ae1a <HAL_TIM_ConfigClockSource+0x17e>
 800ada0:	2b50      	cmp	r3, #80	@ 0x50
 800ada2:	d873      	bhi.n	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800ada4:	2b40      	cmp	r3, #64	@ 0x40
 800ada6:	d058      	beq.n	800ae5a <HAL_TIM_ConfigClockSource+0x1be>
 800ada8:	2b40      	cmp	r3, #64	@ 0x40
 800adaa:	d86f      	bhi.n	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800adac:	2b30      	cmp	r3, #48	@ 0x30
 800adae:	d064      	beq.n	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800adb0:	2b30      	cmp	r3, #48	@ 0x30
 800adb2:	d86b      	bhi.n	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800adb4:	2b20      	cmp	r3, #32
 800adb6:	d060      	beq.n	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800adb8:	2b20      	cmp	r3, #32
 800adba:	d867      	bhi.n	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d05c      	beq.n	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800adc0:	2b10      	cmp	r3, #16
 800adc2:	d05a      	beq.n	800ae7a <HAL_TIM_ConfigClockSource+0x1de>
 800adc4:	e062      	b.n	800ae8c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800add6:	f000 fe8b 	bl	800baf0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ade8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	68ba      	ldr	r2, [r7, #8]
 800adf0:	609a      	str	r2, [r3, #8]
      break;
 800adf2:	e04f      	b.n	800ae94 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae04:	f000 fe74 	bl	800baf0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689a      	ldr	r2, [r3, #8]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae16:	609a      	str	r2, [r3, #8]
      break;
 800ae18:	e03c      	b.n	800ae94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae26:	461a      	mov	r2, r3
 800ae28:	f000 fde6 	bl	800b9f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2150      	movs	r1, #80	@ 0x50
 800ae32:	4618      	mov	r0, r3
 800ae34:	f000 fe3f 	bl	800bab6 <TIM_ITRx_SetConfig>
      break;
 800ae38:	e02c      	b.n	800ae94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae46:	461a      	mov	r2, r3
 800ae48:	f000 fe05 	bl	800ba56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2160      	movs	r1, #96	@ 0x60
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 fe2f 	bl	800bab6 <TIM_ITRx_SetConfig>
      break;
 800ae58:	e01c      	b.n	800ae94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae66:	461a      	mov	r2, r3
 800ae68:	f000 fdc6 	bl	800b9f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2140      	movs	r1, #64	@ 0x40
 800ae72:	4618      	mov	r0, r3
 800ae74:	f000 fe1f 	bl	800bab6 <TIM_ITRx_SetConfig>
      break;
 800ae78:	e00c      	b.n	800ae94 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4619      	mov	r1, r3
 800ae84:	4610      	mov	r0, r2
 800ae86:	f000 fe16 	bl	800bab6 <TIM_ITRx_SetConfig>
      break;
 800ae8a:	e003      	b.n	800ae94 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	73fb      	strb	r3, [r7, #15]
      break;
 800ae90:	e000      	b.n	800ae94 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800ae92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	00100070 	.word	0x00100070
 800aeb4:	00100060 	.word	0x00100060
 800aeb8:	00100050 	.word	0x00100050
 800aebc:	00100040 	.word	0x00100040
 800aec0:	00100030 	.word	0x00100030
 800aec4:	00100020 	.word	0x00100020

0800aec8 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aec8:	b480      	push	{r7}
 800aeca:	b083      	sub	sp, #12
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aee4:	bf00      	nop
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aef8:	bf00      	nop
 800aefa:	370c      	adds	r7, #12
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af18:	b480      	push	{r7}
 800af1a:	b083      	sub	sp, #12
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b087      	sub	sp, #28
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	460b      	mov	r3, r1
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d101      	bne.n	800af98 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e14a      	b.n	800b22e <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800af9e:	b2db      	uxtb	r3, r3
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	f040 80dd 	bne.w	800b160 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800afa6:	7afb      	ldrb	r3, [r7, #11]
 800afa8:	2b1f      	cmp	r3, #31
 800afaa:	f200 80d6 	bhi.w	800b15a <HAL_TIM_RegisterCallback+0x1de>
 800afae:	a201      	add	r2, pc, #4	@ (adr r2, 800afb4 <HAL_TIM_RegisterCallback+0x38>)
 800afb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb4:	0800b035 	.word	0x0800b035
 800afb8:	0800b03d 	.word	0x0800b03d
 800afbc:	0800b045 	.word	0x0800b045
 800afc0:	0800b04d 	.word	0x0800b04d
 800afc4:	0800b055 	.word	0x0800b055
 800afc8:	0800b05d 	.word	0x0800b05d
 800afcc:	0800b065 	.word	0x0800b065
 800afd0:	0800b06d 	.word	0x0800b06d
 800afd4:	0800b075 	.word	0x0800b075
 800afd8:	0800b07d 	.word	0x0800b07d
 800afdc:	0800b085 	.word	0x0800b085
 800afe0:	0800b08d 	.word	0x0800b08d
 800afe4:	0800b095 	.word	0x0800b095
 800afe8:	0800b09d 	.word	0x0800b09d
 800afec:	0800b0a7 	.word	0x0800b0a7
 800aff0:	0800b0b1 	.word	0x0800b0b1
 800aff4:	0800b0bb 	.word	0x0800b0bb
 800aff8:	0800b0c5 	.word	0x0800b0c5
 800affc:	0800b0cf 	.word	0x0800b0cf
 800b000:	0800b0d9 	.word	0x0800b0d9
 800b004:	0800b0e3 	.word	0x0800b0e3
 800b008:	0800b0ed 	.word	0x0800b0ed
 800b00c:	0800b0f7 	.word	0x0800b0f7
 800b010:	0800b101 	.word	0x0800b101
 800b014:	0800b10b 	.word	0x0800b10b
 800b018:	0800b115 	.word	0x0800b115
 800b01c:	0800b11f 	.word	0x0800b11f
 800b020:	0800b129 	.word	0x0800b129
 800b024:	0800b133 	.word	0x0800b133
 800b028:	0800b13d 	.word	0x0800b13d
 800b02c:	0800b147 	.word	0x0800b147
 800b030:	0800b151 	.word	0x0800b151
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b03a:	e0f7      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b042:	e0f3      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b04a:	e0ef      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b052:	e0eb      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b05a:	e0e7      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	687a      	ldr	r2, [r7, #4]
 800b060:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b062:	e0e3      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b06a:	e0df      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b072:	e0db      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b07a:	e0d7      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	687a      	ldr	r2, [r7, #4]
 800b080:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b082:	e0d3      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b08a:	e0cf      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b092:	e0cb      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b09a:	e0c7      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b0a4:	e0c2      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800b0ae:	e0bd      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800b0b8:	e0b8      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800b0c2:	e0b3      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800b0cc:	e0ae      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	687a      	ldr	r2, [r7, #4]
 800b0d2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800b0d6:	e0a9      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	687a      	ldr	r2, [r7, #4]
 800b0dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800b0e0:	e0a4      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800b0ea:	e09f      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800b0f4:	e09a      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800b0fe:	e095      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	687a      	ldr	r2, [r7, #4]
 800b104:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800b108:	e090      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	687a      	ldr	r2, [r7, #4]
 800b10e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800b112:	e08b      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800b11c:	e086      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	687a      	ldr	r2, [r7, #4]
 800b122:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800b126:	e081      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	687a      	ldr	r2, [r7, #4]
 800b12c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800b130:	e07c      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800b13a:	e077      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800b144:	e072      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800b14e:	e06d      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800b158:	e068      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b15a:	2301      	movs	r3, #1
 800b15c:	75fb      	strb	r3, [r7, #23]
        break;
 800b15e:	e065      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d15d      	bne.n	800b228 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800b16c:	7afb      	ldrb	r3, [r7, #11]
 800b16e:	2b0d      	cmp	r3, #13
 800b170:	d857      	bhi.n	800b222 <HAL_TIM_RegisterCallback+0x2a6>
 800b172:	a201      	add	r2, pc, #4	@ (adr r2, 800b178 <HAL_TIM_RegisterCallback+0x1fc>)
 800b174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b178:	0800b1b1 	.word	0x0800b1b1
 800b17c:	0800b1b9 	.word	0x0800b1b9
 800b180:	0800b1c1 	.word	0x0800b1c1
 800b184:	0800b1c9 	.word	0x0800b1c9
 800b188:	0800b1d1 	.word	0x0800b1d1
 800b18c:	0800b1d9 	.word	0x0800b1d9
 800b190:	0800b1e1 	.word	0x0800b1e1
 800b194:	0800b1e9 	.word	0x0800b1e9
 800b198:	0800b1f1 	.word	0x0800b1f1
 800b19c:	0800b1f9 	.word	0x0800b1f9
 800b1a0:	0800b201 	.word	0x0800b201
 800b1a4:	0800b209 	.word	0x0800b209
 800b1a8:	0800b211 	.word	0x0800b211
 800b1ac:	0800b219 	.word	0x0800b219
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800b1b6:	e039      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800b1be:	e035      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800b1c6:	e031      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	687a      	ldr	r2, [r7, #4]
 800b1cc:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800b1ce:	e02d      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800b1d6:	e029      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800b1de:	e025      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800b1e6:	e021      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800b1ee:	e01d      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800b1f6:	e019      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800b1fe:	e015      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800b206:	e011      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800b20e:	e00d      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	687a      	ldr	r2, [r7, #4]
 800b214:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800b216:	e009      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800b220:	e004      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800b222:	2301      	movs	r3, #1
 800b224:	75fb      	strb	r3, [r7, #23]
        break;
 800b226:	e001      	b.n	800b22c <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800b228:	2301      	movs	r3, #1
 800b22a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800b22c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b22e:	4618      	mov	r0, r3
 800b230:	371c      	adds	r7, #28
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop

0800b23c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b23c:	b480      	push	{r7}
 800b23e:	b085      	sub	sp, #20
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a4c      	ldr	r2, [pc, #304]	@ (800b380 <TIM_Base_SetConfig+0x144>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d017      	beq.n	800b284 <TIM_Base_SetConfig+0x48>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b25a:	d013      	beq.n	800b284 <TIM_Base_SetConfig+0x48>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a49      	ldr	r2, [pc, #292]	@ (800b384 <TIM_Base_SetConfig+0x148>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d00f      	beq.n	800b284 <TIM_Base_SetConfig+0x48>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a48      	ldr	r2, [pc, #288]	@ (800b388 <TIM_Base_SetConfig+0x14c>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d00b      	beq.n	800b284 <TIM_Base_SetConfig+0x48>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a47      	ldr	r2, [pc, #284]	@ (800b38c <TIM_Base_SetConfig+0x150>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d007      	beq.n	800b284 <TIM_Base_SetConfig+0x48>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a46      	ldr	r2, [pc, #280]	@ (800b390 <TIM_Base_SetConfig+0x154>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d003      	beq.n	800b284 <TIM_Base_SetConfig+0x48>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a45      	ldr	r2, [pc, #276]	@ (800b394 <TIM_Base_SetConfig+0x158>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d108      	bne.n	800b296 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b28a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	68fa      	ldr	r2, [r7, #12]
 800b292:	4313      	orrs	r3, r2
 800b294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a39      	ldr	r2, [pc, #228]	@ (800b380 <TIM_Base_SetConfig+0x144>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d023      	beq.n	800b2e6 <TIM_Base_SetConfig+0xaa>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2a4:	d01f      	beq.n	800b2e6 <TIM_Base_SetConfig+0xaa>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a36      	ldr	r2, [pc, #216]	@ (800b384 <TIM_Base_SetConfig+0x148>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d01b      	beq.n	800b2e6 <TIM_Base_SetConfig+0xaa>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a35      	ldr	r2, [pc, #212]	@ (800b388 <TIM_Base_SetConfig+0x14c>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d017      	beq.n	800b2e6 <TIM_Base_SetConfig+0xaa>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a34      	ldr	r2, [pc, #208]	@ (800b38c <TIM_Base_SetConfig+0x150>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d013      	beq.n	800b2e6 <TIM_Base_SetConfig+0xaa>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a33      	ldr	r2, [pc, #204]	@ (800b390 <TIM_Base_SetConfig+0x154>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d00f      	beq.n	800b2e6 <TIM_Base_SetConfig+0xaa>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a33      	ldr	r2, [pc, #204]	@ (800b398 <TIM_Base_SetConfig+0x15c>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d00b      	beq.n	800b2e6 <TIM_Base_SetConfig+0xaa>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a32      	ldr	r2, [pc, #200]	@ (800b39c <TIM_Base_SetConfig+0x160>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d007      	beq.n	800b2e6 <TIM_Base_SetConfig+0xaa>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a31      	ldr	r2, [pc, #196]	@ (800b3a0 <TIM_Base_SetConfig+0x164>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d003      	beq.n	800b2e6 <TIM_Base_SetConfig+0xaa>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a2c      	ldr	r2, [pc, #176]	@ (800b394 <TIM_Base_SetConfig+0x158>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d108      	bne.n	800b2f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b2ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	68fa      	ldr	r2, [r7, #12]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	4313      	orrs	r3, r2
 800b304:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	689a      	ldr	r2, [r3, #8]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	4a18      	ldr	r2, [pc, #96]	@ (800b380 <TIM_Base_SetConfig+0x144>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d013      	beq.n	800b34c <TIM_Base_SetConfig+0x110>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	4a1a      	ldr	r2, [pc, #104]	@ (800b390 <TIM_Base_SetConfig+0x154>)
 800b328:	4293      	cmp	r3, r2
 800b32a:	d00f      	beq.n	800b34c <TIM_Base_SetConfig+0x110>
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	4a1a      	ldr	r2, [pc, #104]	@ (800b398 <TIM_Base_SetConfig+0x15c>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d00b      	beq.n	800b34c <TIM_Base_SetConfig+0x110>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a19      	ldr	r2, [pc, #100]	@ (800b39c <TIM_Base_SetConfig+0x160>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d007      	beq.n	800b34c <TIM_Base_SetConfig+0x110>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a18      	ldr	r2, [pc, #96]	@ (800b3a0 <TIM_Base_SetConfig+0x164>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d003      	beq.n	800b34c <TIM_Base_SetConfig+0x110>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a13      	ldr	r2, [pc, #76]	@ (800b394 <TIM_Base_SetConfig+0x158>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d103      	bne.n	800b354 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	691a      	ldr	r2, [r3, #16]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	691b      	ldr	r3, [r3, #16]
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	2b01      	cmp	r3, #1
 800b364:	d105      	bne.n	800b372 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	691b      	ldr	r3, [r3, #16]
 800b36a:	f023 0201 	bic.w	r2, r3, #1
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	611a      	str	r2, [r3, #16]
  }
}
 800b372:	bf00      	nop
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	40012c00 	.word	0x40012c00
 800b384:	40000400 	.word	0x40000400
 800b388:	40000800 	.word	0x40000800
 800b38c:	40000c00 	.word	0x40000c00
 800b390:	40013400 	.word	0x40013400
 800b394:	40015000 	.word	0x40015000
 800b398:	40014000 	.word	0x40014000
 800b39c:	40014400 	.word	0x40014400
 800b3a0:	40014800 	.word	0x40014800

0800b3a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b087      	sub	sp, #28
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a1b      	ldr	r3, [r3, #32]
 800b3b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6a1b      	ldr	r3, [r3, #32]
 800b3b8:	f023 0201 	bic.w	r2, r3, #1
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	699b      	ldr	r3, [r3, #24]
 800b3ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	f023 0303 	bic.w	r3, r3, #3
 800b3de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	68fa      	ldr	r2, [r7, #12]
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	f023 0302 	bic.w	r3, r3, #2
 800b3f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	697a      	ldr	r2, [r7, #20]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	4a30      	ldr	r2, [pc, #192]	@ (800b4c0 <TIM_OC1_SetConfig+0x11c>)
 800b400:	4293      	cmp	r3, r2
 800b402:	d013      	beq.n	800b42c <TIM_OC1_SetConfig+0x88>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a2f      	ldr	r2, [pc, #188]	@ (800b4c4 <TIM_OC1_SetConfig+0x120>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d00f      	beq.n	800b42c <TIM_OC1_SetConfig+0x88>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a2e      	ldr	r2, [pc, #184]	@ (800b4c8 <TIM_OC1_SetConfig+0x124>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d00b      	beq.n	800b42c <TIM_OC1_SetConfig+0x88>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a2d      	ldr	r2, [pc, #180]	@ (800b4cc <TIM_OC1_SetConfig+0x128>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d007      	beq.n	800b42c <TIM_OC1_SetConfig+0x88>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a2c      	ldr	r2, [pc, #176]	@ (800b4d0 <TIM_OC1_SetConfig+0x12c>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d003      	beq.n	800b42c <TIM_OC1_SetConfig+0x88>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a2b      	ldr	r2, [pc, #172]	@ (800b4d4 <TIM_OC1_SetConfig+0x130>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d10c      	bne.n	800b446 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f023 0308 	bic.w	r3, r3, #8
 800b432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	697a      	ldr	r2, [r7, #20]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b43e:	697b      	ldr	r3, [r7, #20]
 800b440:	f023 0304 	bic.w	r3, r3, #4
 800b444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	4a1d      	ldr	r2, [pc, #116]	@ (800b4c0 <TIM_OC1_SetConfig+0x11c>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d013      	beq.n	800b476 <TIM_OC1_SetConfig+0xd2>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4a1c      	ldr	r2, [pc, #112]	@ (800b4c4 <TIM_OC1_SetConfig+0x120>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d00f      	beq.n	800b476 <TIM_OC1_SetConfig+0xd2>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	4a1b      	ldr	r2, [pc, #108]	@ (800b4c8 <TIM_OC1_SetConfig+0x124>)
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d00b      	beq.n	800b476 <TIM_OC1_SetConfig+0xd2>
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	4a1a      	ldr	r2, [pc, #104]	@ (800b4cc <TIM_OC1_SetConfig+0x128>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d007      	beq.n	800b476 <TIM_OC1_SetConfig+0xd2>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	4a19      	ldr	r2, [pc, #100]	@ (800b4d0 <TIM_OC1_SetConfig+0x12c>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d003      	beq.n	800b476 <TIM_OC1_SetConfig+0xd2>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	4a18      	ldr	r2, [pc, #96]	@ (800b4d4 <TIM_OC1_SetConfig+0x130>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d111      	bne.n	800b49a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b476:	693b      	ldr	r3, [r7, #16]
 800b478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b47c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	4313      	orrs	r3, r2
 800b48e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	699b      	ldr	r3, [r3, #24]
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	4313      	orrs	r3, r2
 800b498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	621a      	str	r2, [r3, #32]
}
 800b4b4:	bf00      	nop
 800b4b6:	371c      	adds	r7, #28
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4be:	4770      	bx	lr
 800b4c0:	40012c00 	.word	0x40012c00
 800b4c4:	40013400 	.word	0x40013400
 800b4c8:	40014000 	.word	0x40014000
 800b4cc:	40014400 	.word	0x40014400
 800b4d0:	40014800 	.word	0x40014800
 800b4d4:	40015000 	.word	0x40015000

0800b4d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	f023 0210 	bic.w	r2, r3, #16
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	699b      	ldr	r3, [r3, #24]
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	021b      	lsls	r3, r3, #8
 800b51a:	68fa      	ldr	r2, [r7, #12]
 800b51c:	4313      	orrs	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	f023 0320 	bic.w	r3, r3, #32
 800b526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	011b      	lsls	r3, r3, #4
 800b52e:	697a      	ldr	r2, [r7, #20]
 800b530:	4313      	orrs	r3, r2
 800b532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4a2c      	ldr	r2, [pc, #176]	@ (800b5e8 <TIM_OC2_SetConfig+0x110>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d007      	beq.n	800b54c <TIM_OC2_SetConfig+0x74>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	4a2b      	ldr	r2, [pc, #172]	@ (800b5ec <TIM_OC2_SetConfig+0x114>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d003      	beq.n	800b54c <TIM_OC2_SetConfig+0x74>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	4a2a      	ldr	r2, [pc, #168]	@ (800b5f0 <TIM_OC2_SetConfig+0x118>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d10d      	bne.n	800b568 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	011b      	lsls	r3, r3, #4
 800b55a:	697a      	ldr	r2, [r7, #20]
 800b55c:	4313      	orrs	r3, r2
 800b55e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b566:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a1f      	ldr	r2, [pc, #124]	@ (800b5e8 <TIM_OC2_SetConfig+0x110>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d013      	beq.n	800b598 <TIM_OC2_SetConfig+0xc0>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a1e      	ldr	r2, [pc, #120]	@ (800b5ec <TIM_OC2_SetConfig+0x114>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d00f      	beq.n	800b598 <TIM_OC2_SetConfig+0xc0>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a1e      	ldr	r2, [pc, #120]	@ (800b5f4 <TIM_OC2_SetConfig+0x11c>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d00b      	beq.n	800b598 <TIM_OC2_SetConfig+0xc0>
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	4a1d      	ldr	r2, [pc, #116]	@ (800b5f8 <TIM_OC2_SetConfig+0x120>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d007      	beq.n	800b598 <TIM_OC2_SetConfig+0xc0>
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	4a1c      	ldr	r2, [pc, #112]	@ (800b5fc <TIM_OC2_SetConfig+0x124>)
 800b58c:	4293      	cmp	r3, r2
 800b58e:	d003      	beq.n	800b598 <TIM_OC2_SetConfig+0xc0>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	4a17      	ldr	r2, [pc, #92]	@ (800b5f0 <TIM_OC2_SetConfig+0x118>)
 800b594:	4293      	cmp	r3, r2
 800b596:	d113      	bne.n	800b5c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b59e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b5a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	695b      	ldr	r3, [r3, #20]
 800b5ac:	009b      	lsls	r3, r3, #2
 800b5ae:	693a      	ldr	r2, [r7, #16]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	693a      	ldr	r2, [r7, #16]
 800b5c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	68fa      	ldr	r2, [r7, #12]
 800b5ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	685a      	ldr	r2, [r3, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	621a      	str	r2, [r3, #32]
}
 800b5da:	bf00      	nop
 800b5dc:	371c      	adds	r7, #28
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
 800b5e6:	bf00      	nop
 800b5e8:	40012c00 	.word	0x40012c00
 800b5ec:	40013400 	.word	0x40013400
 800b5f0:	40015000 	.word	0x40015000
 800b5f4:	40014000 	.word	0x40014000
 800b5f8:	40014400 	.word	0x40014400
 800b5fc:	40014800 	.word	0x40014800

0800b600 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b600:	b480      	push	{r7}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6a1b      	ldr	r3, [r3, #32]
 800b60e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a1b      	ldr	r3, [r3, #32]
 800b614:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	69db      	ldr	r3, [r3, #28]
 800b626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b62e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	f023 0303 	bic.w	r3, r3, #3
 800b63a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	4313      	orrs	r3, r2
 800b644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b64c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	021b      	lsls	r3, r3, #8
 800b654:	697a      	ldr	r2, [r7, #20]
 800b656:	4313      	orrs	r3, r2
 800b658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	4a2b      	ldr	r2, [pc, #172]	@ (800b70c <TIM_OC3_SetConfig+0x10c>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d007      	beq.n	800b672 <TIM_OC3_SetConfig+0x72>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	4a2a      	ldr	r2, [pc, #168]	@ (800b710 <TIM_OC3_SetConfig+0x110>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d003      	beq.n	800b672 <TIM_OC3_SetConfig+0x72>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	4a29      	ldr	r2, [pc, #164]	@ (800b714 <TIM_OC3_SetConfig+0x114>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d10d      	bne.n	800b68e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b678:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	68db      	ldr	r3, [r3, #12]
 800b67e:	021b      	lsls	r3, r3, #8
 800b680:	697a      	ldr	r2, [r7, #20]
 800b682:	4313      	orrs	r3, r2
 800b684:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b68c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	4a1e      	ldr	r2, [pc, #120]	@ (800b70c <TIM_OC3_SetConfig+0x10c>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d013      	beq.n	800b6be <TIM_OC3_SetConfig+0xbe>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	4a1d      	ldr	r2, [pc, #116]	@ (800b710 <TIM_OC3_SetConfig+0x110>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d00f      	beq.n	800b6be <TIM_OC3_SetConfig+0xbe>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	4a1d      	ldr	r2, [pc, #116]	@ (800b718 <TIM_OC3_SetConfig+0x118>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d00b      	beq.n	800b6be <TIM_OC3_SetConfig+0xbe>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	4a1c      	ldr	r2, [pc, #112]	@ (800b71c <TIM_OC3_SetConfig+0x11c>)
 800b6aa:	4293      	cmp	r3, r2
 800b6ac:	d007      	beq.n	800b6be <TIM_OC3_SetConfig+0xbe>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	4a1b      	ldr	r2, [pc, #108]	@ (800b720 <TIM_OC3_SetConfig+0x120>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d003      	beq.n	800b6be <TIM_OC3_SetConfig+0xbe>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	4a16      	ldr	r2, [pc, #88]	@ (800b714 <TIM_OC3_SetConfig+0x114>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d113      	bne.n	800b6e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b6c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b6cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	695b      	ldr	r3, [r3, #20]
 800b6d2:	011b      	lsls	r3, r3, #4
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	4313      	orrs	r3, r2
 800b6d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	699b      	ldr	r3, [r3, #24]
 800b6de:	011b      	lsls	r3, r3, #4
 800b6e0:	693a      	ldr	r2, [r7, #16]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	693a      	ldr	r2, [r7, #16]
 800b6ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	685a      	ldr	r2, [r3, #4]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	621a      	str	r2, [r3, #32]
}
 800b700:	bf00      	nop
 800b702:	371c      	adds	r7, #28
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	40012c00 	.word	0x40012c00
 800b710:	40013400 	.word	0x40013400
 800b714:	40015000 	.word	0x40015000
 800b718:	40014000 	.word	0x40014000
 800b71c:	40014400 	.word	0x40014400
 800b720:	40014800 	.word	0x40014800

0800b724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b724:	b480      	push	{r7}
 800b726:	b087      	sub	sp, #28
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6a1b      	ldr	r3, [r3, #32]
 800b732:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a1b      	ldr	r3, [r3, #32]
 800b738:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	69db      	ldr	r3, [r3, #28]
 800b74a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	021b      	lsls	r3, r3, #8
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	4313      	orrs	r3, r2
 800b76a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	031b      	lsls	r3, r3, #12
 800b77a:	697a      	ldr	r2, [r7, #20]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a2c      	ldr	r2, [pc, #176]	@ (800b834 <TIM_OC4_SetConfig+0x110>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d007      	beq.n	800b798 <TIM_OC4_SetConfig+0x74>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a2b      	ldr	r2, [pc, #172]	@ (800b838 <TIM_OC4_SetConfig+0x114>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d003      	beq.n	800b798 <TIM_OC4_SetConfig+0x74>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a2a      	ldr	r2, [pc, #168]	@ (800b83c <TIM_OC4_SetConfig+0x118>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d10d      	bne.n	800b7b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b79e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	031b      	lsls	r3, r3, #12
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b7b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a1f      	ldr	r2, [pc, #124]	@ (800b834 <TIM_OC4_SetConfig+0x110>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d013      	beq.n	800b7e4 <TIM_OC4_SetConfig+0xc0>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a1e      	ldr	r2, [pc, #120]	@ (800b838 <TIM_OC4_SetConfig+0x114>)
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d00f      	beq.n	800b7e4 <TIM_OC4_SetConfig+0xc0>
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a1e      	ldr	r2, [pc, #120]	@ (800b840 <TIM_OC4_SetConfig+0x11c>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d00b      	beq.n	800b7e4 <TIM_OC4_SetConfig+0xc0>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a1d      	ldr	r2, [pc, #116]	@ (800b844 <TIM_OC4_SetConfig+0x120>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d007      	beq.n	800b7e4 <TIM_OC4_SetConfig+0xc0>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a1c      	ldr	r2, [pc, #112]	@ (800b848 <TIM_OC4_SetConfig+0x124>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d003      	beq.n	800b7e4 <TIM_OC4_SetConfig+0xc0>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a17      	ldr	r2, [pc, #92]	@ (800b83c <TIM_OC4_SetConfig+0x118>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d113      	bne.n	800b80c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b7ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b7f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	019b      	lsls	r3, r3, #6
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	019b      	lsls	r3, r3, #6
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	4313      	orrs	r3, r2
 800b80a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	693a      	ldr	r2, [r7, #16]
 800b810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	685a      	ldr	r2, [r3, #4]
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	697a      	ldr	r2, [r7, #20]
 800b824:	621a      	str	r2, [r3, #32]
}
 800b826:	bf00      	nop
 800b828:	371c      	adds	r7, #28
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	40012c00 	.word	0x40012c00
 800b838:	40013400 	.word	0x40013400
 800b83c:	40015000 	.word	0x40015000
 800b840:	40014000 	.word	0x40014000
 800b844:	40014400 	.word	0x40014400
 800b848:	40014800 	.word	0x40014800

0800b84c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
 800b854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6a1b      	ldr	r3, [r3, #32]
 800b860:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b87a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b87e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	4313      	orrs	r3, r2
 800b888:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b88a:	693b      	ldr	r3, [r7, #16]
 800b88c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b890:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	041b      	lsls	r3, r3, #16
 800b898:	693a      	ldr	r2, [r7, #16]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a19      	ldr	r2, [pc, #100]	@ (800b908 <TIM_OC5_SetConfig+0xbc>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d013      	beq.n	800b8ce <TIM_OC5_SetConfig+0x82>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	4a18      	ldr	r2, [pc, #96]	@ (800b90c <TIM_OC5_SetConfig+0xc0>)
 800b8aa:	4293      	cmp	r3, r2
 800b8ac:	d00f      	beq.n	800b8ce <TIM_OC5_SetConfig+0x82>
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	4a17      	ldr	r2, [pc, #92]	@ (800b910 <TIM_OC5_SetConfig+0xc4>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d00b      	beq.n	800b8ce <TIM_OC5_SetConfig+0x82>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4a16      	ldr	r2, [pc, #88]	@ (800b914 <TIM_OC5_SetConfig+0xc8>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d007      	beq.n	800b8ce <TIM_OC5_SetConfig+0x82>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	4a15      	ldr	r2, [pc, #84]	@ (800b918 <TIM_OC5_SetConfig+0xcc>)
 800b8c2:	4293      	cmp	r3, r2
 800b8c4:	d003      	beq.n	800b8ce <TIM_OC5_SetConfig+0x82>
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	4a14      	ldr	r2, [pc, #80]	@ (800b91c <TIM_OC5_SetConfig+0xd0>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d109      	bne.n	800b8e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b8d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	021b      	lsls	r3, r3, #8
 800b8dc:	697a      	ldr	r2, [r7, #20]
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	697a      	ldr	r2, [r7, #20]
 800b8e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	685a      	ldr	r2, [r3, #4]
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	693a      	ldr	r2, [r7, #16]
 800b8fa:	621a      	str	r2, [r3, #32]
}
 800b8fc:	bf00      	nop
 800b8fe:	371c      	adds	r7, #28
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr
 800b908:	40012c00 	.word	0x40012c00
 800b90c:	40013400 	.word	0x40013400
 800b910:	40014000 	.word	0x40014000
 800b914:	40014400 	.word	0x40014400
 800b918:	40014800 	.word	0x40014800
 800b91c:	40015000 	.word	0x40015000

0800b920 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b920:	b480      	push	{r7}
 800b922:	b087      	sub	sp, #28
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6a1b      	ldr	r3, [r3, #32]
 800b92e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6a1b      	ldr	r3, [r3, #32]
 800b934:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b94e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b952:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	021b      	lsls	r3, r3, #8
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	689b      	ldr	r3, [r3, #8]
 800b96c:	051b      	lsls	r3, r3, #20
 800b96e:	693a      	ldr	r2, [r7, #16]
 800b970:	4313      	orrs	r3, r2
 800b972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a1a      	ldr	r2, [pc, #104]	@ (800b9e0 <TIM_OC6_SetConfig+0xc0>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d013      	beq.n	800b9a4 <TIM_OC6_SetConfig+0x84>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a19      	ldr	r2, [pc, #100]	@ (800b9e4 <TIM_OC6_SetConfig+0xc4>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d00f      	beq.n	800b9a4 <TIM_OC6_SetConfig+0x84>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a18      	ldr	r2, [pc, #96]	@ (800b9e8 <TIM_OC6_SetConfig+0xc8>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d00b      	beq.n	800b9a4 <TIM_OC6_SetConfig+0x84>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a17      	ldr	r2, [pc, #92]	@ (800b9ec <TIM_OC6_SetConfig+0xcc>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d007      	beq.n	800b9a4 <TIM_OC6_SetConfig+0x84>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a16      	ldr	r2, [pc, #88]	@ (800b9f0 <TIM_OC6_SetConfig+0xd0>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d003      	beq.n	800b9a4 <TIM_OC6_SetConfig+0x84>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	4a15      	ldr	r2, [pc, #84]	@ (800b9f4 <TIM_OC6_SetConfig+0xd4>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d109      	bne.n	800b9b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b9aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	695b      	ldr	r3, [r3, #20]
 800b9b0:	029b      	lsls	r3, r3, #10
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	697a      	ldr	r2, [r7, #20]
 800b9bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	68fa      	ldr	r2, [r7, #12]
 800b9c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	685a      	ldr	r2, [r3, #4]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	621a      	str	r2, [r3, #32]
}
 800b9d2:	bf00      	nop
 800b9d4:	371c      	adds	r7, #28
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop
 800b9e0:	40012c00 	.word	0x40012c00
 800b9e4:	40013400 	.word	0x40013400
 800b9e8:	40014000 	.word	0x40014000
 800b9ec:	40014400 	.word	0x40014400
 800b9f0:	40014800 	.word	0x40014800
 800b9f4:	40015000 	.word	0x40015000

0800b9f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b087      	sub	sp, #28
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	60f8      	str	r0, [r7, #12]
 800ba00:	60b9      	str	r1, [r7, #8]
 800ba02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6a1b      	ldr	r3, [r3, #32]
 800ba08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	6a1b      	ldr	r3, [r3, #32]
 800ba0e:	f023 0201 	bic.w	r2, r3, #1
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	699b      	ldr	r3, [r3, #24]
 800ba1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ba22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	011b      	lsls	r3, r3, #4
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	f023 030a 	bic.w	r3, r3, #10
 800ba34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	621a      	str	r2, [r3, #32]
}
 800ba4a:	bf00      	nop
 800ba4c:	371c      	adds	r7, #28
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b087      	sub	sp, #28
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	60f8      	str	r0, [r7, #12]
 800ba5e:	60b9      	str	r1, [r7, #8]
 800ba60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6a1b      	ldr	r3, [r3, #32]
 800ba66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6a1b      	ldr	r3, [r3, #32]
 800ba6c:	f023 0210 	bic.w	r2, r3, #16
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	699b      	ldr	r3, [r3, #24]
 800ba78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ba80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	031b      	lsls	r3, r3, #12
 800ba86:	693a      	ldr	r2, [r7, #16]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ba92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	011b      	lsls	r3, r3, #4
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	693a      	ldr	r2, [r7, #16]
 800baa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	621a      	str	r2, [r3, #32]
}
 800baaa:	bf00      	nop
 800baac:	371c      	adds	r7, #28
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b085      	sub	sp, #20
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	689b      	ldr	r3, [r3, #8]
 800bac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bacc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bad2:	683a      	ldr	r2, [r7, #0]
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	4313      	orrs	r3, r2
 800bad8:	f043 0307 	orr.w	r3, r3, #7
 800badc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	68fa      	ldr	r2, [r7, #12]
 800bae2:	609a      	str	r2, [r3, #8]
}
 800bae4:	bf00      	nop
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b087      	sub	sp, #28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	60b9      	str	r1, [r7, #8]
 800bafa:	607a      	str	r2, [r7, #4]
 800bafc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	021a      	lsls	r2, r3, #8
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	431a      	orrs	r2, r3
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	4313      	orrs	r3, r2
 800bb18:	697a      	ldr	r2, [r7, #20]
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	697a      	ldr	r2, [r7, #20]
 800bb22:	609a      	str	r2, [r3, #8]
}
 800bb24:	bf00      	nop
 800bb26:	371c      	adds	r7, #28
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b087      	sub	sp, #28
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f003 031f 	and.w	r3, r3, #31
 800bb42:	2201      	movs	r2, #1
 800bb44:	fa02 f303 	lsl.w	r3, r2, r3
 800bb48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	6a1a      	ldr	r2, [r3, #32]
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	43db      	mvns	r3, r3
 800bb52:	401a      	ands	r2, r3
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	6a1a      	ldr	r2, [r3, #32]
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	f003 031f 	and.w	r3, r3, #31
 800bb62:	6879      	ldr	r1, [r7, #4]
 800bb64:	fa01 f303 	lsl.w	r3, r1, r3
 800bb68:	431a      	orrs	r2, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	621a      	str	r2, [r3, #32]
}
 800bb6e:	bf00      	nop
 800bb70:	371c      	adds	r7, #28
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr
	...

0800bb7c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b083      	sub	sp, #12
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a26      	ldr	r2, [pc, #152]	@ (800bc20 <TIM_ResetCallback+0xa4>)
 800bb88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a25      	ldr	r2, [pc, #148]	@ (800bc24 <TIM_ResetCallback+0xa8>)
 800bb90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4a24      	ldr	r2, [pc, #144]	@ (800bc28 <TIM_ResetCallback+0xac>)
 800bb98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	4a23      	ldr	r2, [pc, #140]	@ (800bc2c <TIM_ResetCallback+0xb0>)
 800bba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	4a22      	ldr	r2, [pc, #136]	@ (800bc30 <TIM_ResetCallback+0xb4>)
 800bba8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	4a21      	ldr	r2, [pc, #132]	@ (800bc34 <TIM_ResetCallback+0xb8>)
 800bbb0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	4a20      	ldr	r2, [pc, #128]	@ (800bc38 <TIM_ResetCallback+0xbc>)
 800bbb8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4a1f      	ldr	r2, [pc, #124]	@ (800bc3c <TIM_ResetCallback+0xc0>)
 800bbc0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	4a1e      	ldr	r2, [pc, #120]	@ (800bc40 <TIM_ResetCallback+0xc4>)
 800bbc8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a1d      	ldr	r2, [pc, #116]	@ (800bc44 <TIM_ResetCallback+0xc8>)
 800bbd0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a1c      	ldr	r2, [pc, #112]	@ (800bc48 <TIM_ResetCallback+0xcc>)
 800bbd8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a1b      	ldr	r2, [pc, #108]	@ (800bc4c <TIM_ResetCallback+0xd0>)
 800bbe0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a1a      	ldr	r2, [pc, #104]	@ (800bc50 <TIM_ResetCallback+0xd4>)
 800bbe8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a19      	ldr	r2, [pc, #100]	@ (800bc54 <TIM_ResetCallback+0xd8>)
 800bbf0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	4a18      	ldr	r2, [pc, #96]	@ (800bc58 <TIM_ResetCallback+0xdc>)
 800bbf8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	4a17      	ldr	r2, [pc, #92]	@ (800bc5c <TIM_ResetCallback+0xe0>)
 800bc00:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a16      	ldr	r2, [pc, #88]	@ (800bc60 <TIM_ResetCallback+0xe4>)
 800bc08:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a15      	ldr	r2, [pc, #84]	@ (800bc64 <TIM_ResetCallback+0xe8>)
 800bc10:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr
 800bc20:	08004b4d 	.word	0x08004b4d
 800bc24:	0800aec9 	.word	0x0800aec9
 800bc28:	0800af41 	.word	0x0800af41
 800bc2c:	0800af55 	.word	0x0800af55
 800bc30:	0800aef1 	.word	0x0800aef1
 800bc34:	0800af05 	.word	0x0800af05
 800bc38:	0800aedd 	.word	0x0800aedd
 800bc3c:	0800af19 	.word	0x0800af19
 800bc40:	0800af2d 	.word	0x0800af2d
 800bc44:	0800af69 	.word	0x0800af69
 800bc48:	0800bebd 	.word	0x0800bebd
 800bc4c:	0800bed1 	.word	0x0800bed1
 800bc50:	0800bee5 	.word	0x0800bee5
 800bc54:	0800bef9 	.word	0x0800bef9
 800bc58:	0800bf0d 	.word	0x0800bf0d
 800bc5c:	0800bf21 	.word	0x0800bf21
 800bc60:	0800bf35 	.word	0x0800bf35
 800bc64:	0800bf49 	.word	0x0800bf49

0800bc68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d101      	bne.n	800bc80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	e074      	b.n	800bd6a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2201      	movs	r2, #1
 800bc84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2202      	movs	r2, #2
 800bc8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a34      	ldr	r2, [pc, #208]	@ (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d009      	beq.n	800bcbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4a33      	ldr	r2, [pc, #204]	@ (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d004      	beq.n	800bcbe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a31      	ldr	r2, [pc, #196]	@ (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d108      	bne.n	800bcd0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bcc4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	4313      	orrs	r3, r2
 800bcce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bcd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	68fa      	ldr	r2, [r7, #12]
 800bce2:	4313      	orrs	r3, r2
 800bce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	68fa      	ldr	r2, [r7, #12]
 800bcec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a21      	ldr	r2, [pc, #132]	@ (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d022      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd00:	d01d      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4a1f      	ldr	r2, [pc, #124]	@ (800bd84 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d018      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	4a1d      	ldr	r2, [pc, #116]	@ (800bd88 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d013      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	4a1c      	ldr	r2, [pc, #112]	@ (800bd8c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d00e      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a15      	ldr	r2, [pc, #84]	@ (800bd7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d009      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	4a18      	ldr	r2, [pc, #96]	@ (800bd90 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800bd30:	4293      	cmp	r3, r2
 800bd32:	d004      	beq.n	800bd3e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a11      	ldr	r2, [pc, #68]	@ (800bd80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d10c      	bne.n	800bd58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68ba      	ldr	r2, [r7, #8]
 800bd56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd68:	2300      	movs	r3, #0
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	40012c00 	.word	0x40012c00
 800bd7c:	40013400 	.word	0x40013400
 800bd80:	40015000 	.word	0x40015000
 800bd84:	40000400 	.word	0x40000400
 800bd88:	40000800 	.word	0x40000800
 800bd8c:	40000c00 	.word	0x40000c00
 800bd90:	40014000 	.word	0x40014000

0800bd94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b085      	sub	sp, #20
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
 800bd9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d101      	bne.n	800bdb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bdac:	2302      	movs	r3, #2
 800bdae:	e078      	b.n	800bea2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2201      	movs	r2, #1
 800bdb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	4313      	orrs	r3, r2
 800bde0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	4313      	orrs	r3, r2
 800bdee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	695b      	ldr	r3, [r3, #20]
 800be08:	4313      	orrs	r3, r2
 800be0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be16:	4313      	orrs	r3, r2
 800be18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	041b      	lsls	r3, r3, #16
 800be26:	4313      	orrs	r3, r2
 800be28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	69db      	ldr	r3, [r3, #28]
 800be34:	4313      	orrs	r3, r2
 800be36:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a1c      	ldr	r2, [pc, #112]	@ (800beb0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800be3e:	4293      	cmp	r3, r2
 800be40:	d009      	beq.n	800be56 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a1b      	ldr	r2, [pc, #108]	@ (800beb4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d004      	beq.n	800be56 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a19      	ldr	r2, [pc, #100]	@ (800beb8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d11c      	bne.n	800be90 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be60:	051b      	lsls	r3, r3, #20
 800be62:	4313      	orrs	r3, r2
 800be64:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800be6c:	683b      	ldr	r3, [r7, #0]
 800be6e:	6a1b      	ldr	r3, [r3, #32]
 800be70:	4313      	orrs	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be7e:	4313      	orrs	r3, r2
 800be80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be8c:	4313      	orrs	r3, r2
 800be8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3714      	adds	r7, #20
 800bea6:	46bd      	mov	sp, r7
 800bea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beac:	4770      	bx	lr
 800beae:	bf00      	nop
 800beb0:	40012c00 	.word	0x40012c00
 800beb4:	40013400 	.word	0x40013400
 800beb8:	40015000 	.word	0x40015000

0800bebc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bec4:	bf00      	nop
 800bec6:	370c      	adds	r7, #12
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b083      	sub	sp, #12
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bed8:	bf00      	nop
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr

0800bee4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800beec:	bf00      	nop
 800beee:	370c      	adds	r7, #12
 800bef0:	46bd      	mov	sp, r7
 800bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef6:	4770      	bx	lr

0800bef8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bf14:	bf00      	nop
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr

0800bf20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b083      	sub	sp, #12
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bf28:	bf00      	nop
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr

0800bf34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bf3c:	bf00      	nop
 800bf3e:	370c      	adds	r7, #12
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b083      	sub	sp, #12
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bf50:	bf00      	nop
 800bf52:	370c      	adds	r7, #12
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d101      	bne.n	800bf6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	e050      	b.n	800c010 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d114      	bne.n	800bfa2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fddb 	bl	800cb3c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d103      	bne.n	800bf98 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a21      	ldr	r2, [pc, #132]	@ (800c018 <HAL_UART_Init+0xbc>)
 800bf94:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2224      	movs	r2, #36	@ 0x24
 800bfa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	681a      	ldr	r2, [r3, #0]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f022 0201 	bic.w	r2, r2, #1
 800bfb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d002      	beq.n	800bfc8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f001 f908 	bl	800d1d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f000 fe09 	bl	800cbe0 <UART_SetConfig>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d101      	bne.n	800bfd8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	e01b      	b.n	800c010 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	685a      	ldr	r2, [r3, #4]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bfe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	689a      	ldr	r2, [r3, #8]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f042 0201 	orr.w	r2, r2, #1
 800c006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f001 f987 	bl	800d31c <UART_CheckIdleState>
 800c00e:	4603      	mov	r3, r0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}
 800c018:	08006431 	.word	0x08006431

0800c01c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b087      	sub	sp, #28
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	460b      	mov	r3, r1
 800c026:	607a      	str	r2, [r7, #4]
 800c028:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d109      	bne.n	800c048 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c03a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e09c      	b.n	800c182 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c04e:	2b20      	cmp	r3, #32
 800c050:	d16c      	bne.n	800c12c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800c052:	7afb      	ldrb	r3, [r7, #11]
 800c054:	2b0c      	cmp	r3, #12
 800c056:	d85e      	bhi.n	800c116 <HAL_UART_RegisterCallback+0xfa>
 800c058:	a201      	add	r2, pc, #4	@ (adr r2, 800c060 <HAL_UART_RegisterCallback+0x44>)
 800c05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c05e:	bf00      	nop
 800c060:	0800c095 	.word	0x0800c095
 800c064:	0800c09f 	.word	0x0800c09f
 800c068:	0800c0a9 	.word	0x0800c0a9
 800c06c:	0800c0b3 	.word	0x0800c0b3
 800c070:	0800c0bd 	.word	0x0800c0bd
 800c074:	0800c0c7 	.word	0x0800c0c7
 800c078:	0800c0d1 	.word	0x0800c0d1
 800c07c:	0800c0db 	.word	0x0800c0db
 800c080:	0800c0e5 	.word	0x0800c0e5
 800c084:	0800c0ef 	.word	0x0800c0ef
 800c088:	0800c0f9 	.word	0x0800c0f9
 800c08c:	0800c103 	.word	0x0800c103
 800c090:	0800c10d 	.word	0x0800c10d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	687a      	ldr	r2, [r7, #4]
 800c098:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800c09c:	e070      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	687a      	ldr	r2, [r7, #4]
 800c0a2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800c0a6:	e06b      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800c0b0:	e066      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800c0ba:	e061      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800c0c4:	e05c      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800c0ce:	e057      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	687a      	ldr	r2, [r7, #4]
 800c0d4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800c0d8:	e052      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800c0e2:	e04d      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	687a      	ldr	r2, [r7, #4]
 800c0e8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800c0ec:	e048      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800c0f6:	e043      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800c100:	e03e      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	687a      	ldr	r2, [r7, #4]
 800c106:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c10a:	e039      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c114:	e034      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c11c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c126:	2301      	movs	r3, #1
 800c128:	75fb      	strb	r3, [r7, #23]
        break;
 800c12a:	e029      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c132:	2b00      	cmp	r3, #0
 800c134:	d11a      	bne.n	800c16c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800c136:	7afb      	ldrb	r3, [r7, #11]
 800c138:	2b0b      	cmp	r3, #11
 800c13a:	d002      	beq.n	800c142 <HAL_UART_RegisterCallback+0x126>
 800c13c:	2b0c      	cmp	r3, #12
 800c13e:	d005      	beq.n	800c14c <HAL_UART_RegisterCallback+0x130>
 800c140:	e009      	b.n	800c156 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800c14a:	e019      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800c154:	e014      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c15c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	75fb      	strb	r3, [r7, #23]
        break;
 800c16a:	e009      	b.n	800c180 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c172:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800c17c:	2301      	movs	r3, #1
 800c17e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800c180:	7dfb      	ldrb	r3, [r7, #23]
}
 800c182:	4618      	mov	r0, r3
 800c184:	371c      	adds	r7, #28
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop

0800c190 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b08a      	sub	sp, #40	@ 0x28
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	4613      	mov	r3, r2
 800c19c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1a4:	2b20      	cmp	r3, #32
 800c1a6:	d167      	bne.n	800c278 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d002      	beq.n	800c1b4 <HAL_UART_Transmit_DMA+0x24>
 800c1ae:	88fb      	ldrh	r3, [r7, #6]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d101      	bne.n	800c1b8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e060      	b.n	800c27a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	88fa      	ldrh	r2, [r7, #6]
 800c1c2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	88fa      	ldrh	r2, [r7, #6]
 800c1ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2221      	movs	r2, #33	@ 0x21
 800c1da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d028      	beq.n	800c238 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c1ea:	4a26      	ldr	r2, [pc, #152]	@ (800c284 <HAL_UART_Transmit_DMA+0xf4>)
 800c1ec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c1f2:	4a25      	ldr	r2, [pc, #148]	@ (800c288 <HAL_UART_Transmit_DMA+0xf8>)
 800c1f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c1fa:	4a24      	ldr	r2, [pc, #144]	@ (800c28c <HAL_UART_Transmit_DMA+0xfc>)
 800c1fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c202:	2200      	movs	r2, #0
 800c204:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c20e:	4619      	mov	r1, r3
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	3328      	adds	r3, #40	@ 0x28
 800c216:	461a      	mov	r2, r3
 800c218:	88fb      	ldrh	r3, [r7, #6]
 800c21a:	f7fc f933 	bl	8008484 <HAL_DMA_Start_IT>
 800c21e:	4603      	mov	r3, r0
 800c220:	2b00      	cmp	r3, #0
 800c222:	d009      	beq.n	800c238 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	2210      	movs	r2, #16
 800c228:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	2220      	movs	r2, #32
 800c230:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	e020      	b.n	800c27a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	2240      	movs	r2, #64	@ 0x40
 800c23e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	3308      	adds	r3, #8
 800c246:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	e853 3f00 	ldrex	r3, [r3]
 800c24e:	613b      	str	r3, [r7, #16]
   return(result);
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c256:	627b      	str	r3, [r7, #36]	@ 0x24
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3308      	adds	r3, #8
 800c25e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c260:	623a      	str	r2, [r7, #32]
 800c262:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c264:	69f9      	ldr	r1, [r7, #28]
 800c266:	6a3a      	ldr	r2, [r7, #32]
 800c268:	e841 2300 	strex	r3, r2, [r1]
 800c26c:	61bb      	str	r3, [r7, #24]
   return(result);
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d1e5      	bne.n	800c240 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800c274:	2300      	movs	r3, #0
 800c276:	e000      	b.n	800c27a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c278:	2302      	movs	r3, #2
  }
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3728      	adds	r7, #40	@ 0x28
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	0800d7e7 	.word	0x0800d7e7
 800c288:	0800d885 	.word	0x0800d885
 800c28c:	0800da1f 	.word	0x0800da1f

0800c290 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b08a      	sub	sp, #40	@ 0x28
 800c294:	af00      	add	r7, sp, #0
 800c296:	60f8      	str	r0, [r7, #12]
 800c298:	60b9      	str	r1, [r7, #8]
 800c29a:	4613      	mov	r3, r2
 800c29c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c2a4:	2b20      	cmp	r3, #32
 800c2a6:	d137      	bne.n	800c318 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d002      	beq.n	800c2b4 <HAL_UART_Receive_DMA+0x24>
 800c2ae:	88fb      	ldrh	r3, [r7, #6]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d101      	bne.n	800c2b8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e030      	b.n	800c31a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	4a18      	ldr	r2, [pc, #96]	@ (800c324 <HAL_UART_Receive_DMA+0x94>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d01f      	beq.n	800c308 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	685b      	ldr	r3, [r3, #4]
 800c2ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d018      	beq.n	800c308 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	e853 3f00 	ldrex	r3, [r3]
 800c2e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c2ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f4:	623b      	str	r3, [r7, #32]
 800c2f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f8:	69f9      	ldr	r1, [r7, #28]
 800c2fa:	6a3a      	ldr	r2, [r7, #32]
 800c2fc:	e841 2300 	strex	r3, r2, [r1]
 800c300:	61bb      	str	r3, [r7, #24]
   return(result);
 800c302:	69bb      	ldr	r3, [r7, #24]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d1e6      	bne.n	800c2d6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c308:	88fb      	ldrh	r3, [r7, #6]
 800c30a:	461a      	mov	r2, r3
 800c30c:	68b9      	ldr	r1, [r7, #8]
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f001 f91c 	bl	800d54c <UART_Start_Receive_DMA>
 800c314:	4603      	mov	r3, r0
 800c316:	e000      	b.n	800c31a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c318:	2302      	movs	r3, #2
  }
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3728      	adds	r7, #40	@ 0x28
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	bf00      	nop
 800c324:	40008000 	.word	0x40008000

0800c328 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b0ba      	sub	sp, #232	@ 0xe8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	69db      	ldr	r3, [r3, #28]
 800c336:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c34e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800c352:	f640 030f 	movw	r3, #2063	@ 0x80f
 800c356:	4013      	ands	r3, r2
 800c358:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800c35c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c360:	2b00      	cmp	r3, #0
 800c362:	d11b      	bne.n	800c39c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c368:	f003 0320 	and.w	r3, r3, #32
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d015      	beq.n	800c39c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c374:	f003 0320 	and.w	r3, r3, #32
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d105      	bne.n	800c388 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c37c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c384:	2b00      	cmp	r3, #0
 800c386:	d009      	beq.n	800c39c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f000 8312 	beq.w	800c9b6 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	4798      	blx	r3
      }
      return;
 800c39a:	e30c      	b.n	800c9b6 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c39c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	f000 8129 	beq.w	800c5f8 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c3a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c3aa:	4b90      	ldr	r3, [pc, #576]	@ (800c5ec <HAL_UART_IRQHandler+0x2c4>)
 800c3ac:	4013      	ands	r3, r2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d106      	bne.n	800c3c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c3b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800c3b6:	4b8e      	ldr	r3, [pc, #568]	@ (800c5f0 <HAL_UART_IRQHandler+0x2c8>)
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	f000 811c 	beq.w	800c5f8 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c3c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3c4:	f003 0301 	and.w	r3, r3, #1
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d011      	beq.n	800c3f0 <HAL_UART_IRQHandler+0xc8>
 800c3cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c3d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2201      	movs	r2, #1
 800c3de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c3e6:	f043 0201 	orr.w	r2, r3, #1
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c3f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3f4:	f003 0302 	and.w	r3, r3, #2
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d011      	beq.n	800c420 <HAL_UART_IRQHandler+0xf8>
 800c3fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c400:	f003 0301 	and.w	r3, r3, #1
 800c404:	2b00      	cmp	r3, #0
 800c406:	d00b      	beq.n	800c420 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2202      	movs	r2, #2
 800c40e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c416:	f043 0204 	orr.w	r2, r3, #4
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d011      	beq.n	800c450 <HAL_UART_IRQHandler+0x128>
 800c42c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c430:	f003 0301 	and.w	r3, r3, #1
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00b      	beq.n	800c450 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2204      	movs	r2, #4
 800c43e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c446:	f043 0202 	orr.w	r2, r3, #2
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c454:	f003 0308 	and.w	r3, r3, #8
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d017      	beq.n	800c48c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c45c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c460:	f003 0320 	and.w	r3, r3, #32
 800c464:	2b00      	cmp	r3, #0
 800c466:	d105      	bne.n	800c474 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c468:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c46c:	4b5f      	ldr	r3, [pc, #380]	@ (800c5ec <HAL_UART_IRQHandler+0x2c4>)
 800c46e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c470:	2b00      	cmp	r3, #0
 800c472:	d00b      	beq.n	800c48c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2208      	movs	r2, #8
 800c47a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c482:	f043 0208 	orr.w	r2, r3, #8
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c48c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c490:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c494:	2b00      	cmp	r3, #0
 800c496:	d012      	beq.n	800c4be <HAL_UART_IRQHandler+0x196>
 800c498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c49c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d00c      	beq.n	800c4be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c4ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4b4:	f043 0220 	orr.w	r2, r3, #32
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	f000 8278 	beq.w	800c9ba <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4ce:	f003 0320 	and.w	r3, r3, #32
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d013      	beq.n	800c4fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c4d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4da:	f003 0320 	and.w	r3, r3, #32
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d105      	bne.n	800c4ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c4e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d007      	beq.n	800c4fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d003      	beq.n	800c4fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c504:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c512:	2b40      	cmp	r3, #64	@ 0x40
 800c514:	d005      	beq.n	800c522 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c51a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d058      	beq.n	800c5d4 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f001 f8f9 	bl	800d71a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	689b      	ldr	r3, [r3, #8]
 800c52e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c532:	2b40      	cmp	r3, #64	@ 0x40
 800c534:	d148      	bne.n	800c5c8 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	3308      	adds	r3, #8
 800c53c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c540:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c544:	e853 3f00 	ldrex	r3, [r3]
 800c548:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c54c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	3308      	adds	r3, #8
 800c55e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c562:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c566:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c56e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c572:	e841 2300 	strex	r3, r2, [r1]
 800c576:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c57a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d1d9      	bne.n	800c536 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d017      	beq.n	800c5bc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c592:	4a18      	ldr	r2, [pc, #96]	@ (800c5f4 <HAL_UART_IRQHandler+0x2cc>)
 800c594:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c59c:	4618      	mov	r0, r3
 800c59e:	f7fc f845 	bl	800862c <HAL_DMA_Abort_IT>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d01f      	beq.n	800c5e8 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c5ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c5b6:	4610      	mov	r0, r2
 800c5b8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5ba:	e015      	b.n	800c5e8 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5c6:	e00f      	b.n	800c5e8 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5d2:	e009      	b.n	800c5e8 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c5e6:	e1e8      	b.n	800c9ba <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5e8:	bf00      	nop
    return;
 800c5ea:	e1e6      	b.n	800c9ba <HAL_UART_IRQHandler+0x692>
 800c5ec:	10000001 	.word	0x10000001
 800c5f0:	04000120 	.word	0x04000120
 800c5f4:	0800daa3 	.word	0x0800daa3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	f040 8176 	bne.w	800c8ee <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c606:	f003 0310 	and.w	r3, r3, #16
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	f000 816f 	beq.w	800c8ee <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c614:	f003 0310 	and.w	r3, r3, #16
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f000 8168 	beq.w	800c8ee <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	2210      	movs	r2, #16
 800c624:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c630:	2b40      	cmp	r3, #64	@ 0x40
 800c632:	f040 80dc 	bne.w	800c7ee <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c644:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f000 80b1 	beq.w	800c7b0 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c654:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c658:	429a      	cmp	r2, r3
 800c65a:	f080 80a9 	bcs.w	800c7b0 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c664:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f003 0320 	and.w	r3, r3, #32
 800c676:	2b00      	cmp	r3, #0
 800c678:	f040 8087 	bne.w	800c78a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c684:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c688:	e853 3f00 	ldrex	r3, [r3]
 800c68c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c690:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c694:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c698:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c6a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c6aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c6b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c6b6:	e841 2300 	strex	r3, r2, [r1]
 800c6ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c6be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1da      	bne.n	800c67c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c6d0:	e853 3f00 	ldrex	r3, [r3]
 800c6d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c6d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c6d8:	f023 0301 	bic.w	r3, r3, #1
 800c6dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	3308      	adds	r3, #8
 800c6e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c6ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c6ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c6f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c6f6:	e841 2300 	strex	r3, r2, [r1]
 800c6fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c6fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d1e1      	bne.n	800c6c6 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3308      	adds	r3, #8
 800c708:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c70a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c70c:	e853 3f00 	ldrex	r3, [r3]
 800c710:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c714:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c718:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	3308      	adds	r3, #8
 800c722:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c726:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c728:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c72c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c72e:	e841 2300 	strex	r3, r2, [r1]
 800c732:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c734:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c736:	2b00      	cmp	r3, #0
 800c738:	d1e3      	bne.n	800c702 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2220      	movs	r2, #32
 800c73e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2200      	movs	r2, #0
 800c746:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c750:	e853 3f00 	ldrex	r3, [r3]
 800c754:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c758:	f023 0310 	bic.w	r3, r3, #16
 800c75c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	461a      	mov	r2, r3
 800c766:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c76a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c76c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c770:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c772:	e841 2300 	strex	r3, r2, [r1]
 800c776:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c778:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d1e4      	bne.n	800c748 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c784:	4618      	mov	r0, r3
 800c786:	f7fb fef8 	bl	800857a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2202      	movs	r2, #2
 800c78e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800c7a2:	b292      	uxth	r2, r2
 800c7a4:	1a8a      	subs	r2, r1, r2
 800c7a6:	b292      	uxth	r2, r2
 800c7a8:	4611      	mov	r1, r2
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c7ae:	e106      	b.n	800c9be <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c7b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	f040 80ff 	bne.w	800c9be <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f003 0320 	and.w	r3, r3, #32
 800c7ce:	2b20      	cmp	r3, #32
 800c7d0:	f040 80f5 	bne.w	800c9be <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c7e6:	4611      	mov	r1, r2
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	4798      	blx	r3
      return;
 800c7ec:	e0e7      	b.n	800c9be <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c7fa:	b29b      	uxth	r3, r3
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c808:	b29b      	uxth	r3, r3
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	f000 80d9 	beq.w	800c9c2 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800c810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 80d4 	beq.w	800c9c2 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c822:	e853 3f00 	ldrex	r3, [r3]
 800c826:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c82a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c82e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	461a      	mov	r2, r3
 800c838:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c83c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c83e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c840:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c842:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c844:	e841 2300 	strex	r3, r2, [r1]
 800c848:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1e4      	bne.n	800c81a <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	3308      	adds	r3, #8
 800c856:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85a:	e853 3f00 	ldrex	r3, [r3]
 800c85e:	623b      	str	r3, [r7, #32]
   return(result);
 800c860:	6a3b      	ldr	r3, [r7, #32]
 800c862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c866:	f023 0301 	bic.w	r3, r3, #1
 800c86a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	3308      	adds	r3, #8
 800c874:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c878:	633a      	str	r2, [r7, #48]	@ 0x30
 800c87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c87c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c87e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c880:	e841 2300 	strex	r3, r2, [r1]
 800c884:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1e1      	bne.n	800c850 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2220      	movs	r2, #32
 800c890:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2200      	movs	r2, #0
 800c89e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	e853 3f00 	ldrex	r3, [r3]
 800c8ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	f023 0310 	bic.w	r3, r3, #16
 800c8b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	461a      	mov	r2, r3
 800c8be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c8c2:	61fb      	str	r3, [r7, #28]
 800c8c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c6:	69b9      	ldr	r1, [r7, #24]
 800c8c8:	69fa      	ldr	r2, [r7, #28]
 800c8ca:	e841 2300 	strex	r3, r2, [r1]
 800c8ce:	617b      	str	r3, [r7, #20]
   return(result);
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d1e4      	bne.n	800c8a0 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	2202      	movs	r2, #2
 800c8da:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c8e2:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800c8e6:	4611      	mov	r1, r2
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c8ec:	e069      	b.n	800c9c2 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c8ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c8f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d010      	beq.n	800c91c <HAL_UART_IRQHandler+0x5f4>
 800c8fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c8fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c902:	2b00      	cmp	r3, #0
 800c904:	d00a      	beq.n	800c91c <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c90e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c91a:	e055      	b.n	800c9c8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c924:	2b00      	cmp	r3, #0
 800c926:	d014      	beq.n	800c952 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c92c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c930:	2b00      	cmp	r3, #0
 800c932:	d105      	bne.n	800c940 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d008      	beq.n	800c952 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c944:	2b00      	cmp	r3, #0
 800c946:	d03e      	beq.n	800c9c6 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	4798      	blx	r3
    }
    return;
 800c950:	e039      	b.n	800c9c6 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d009      	beq.n	800c972 <HAL_UART_IRQHandler+0x64a>
 800c95e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c966:	2b00      	cmp	r3, #0
 800c968:	d003      	beq.n	800c972 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f001 f8ad 	bl	800daca <UART_EndTransmit_IT>
    return;
 800c970:	e02a      	b.n	800c9c8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c976:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00b      	beq.n	800c996 <HAL_UART_IRQHandler+0x66e>
 800c97e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c982:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c986:	2b00      	cmp	r3, #0
 800c988:	d005      	beq.n	800c996 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c994:	e018      	b.n	800c9c8 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c99a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d012      	beq.n	800c9c8 <HAL_UART_IRQHandler+0x6a0>
 800c9a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	da0e      	bge.n	800c9c8 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c9b4:	e008      	b.n	800c9c8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c9b6:	bf00      	nop
 800c9b8:	e006      	b.n	800c9c8 <HAL_UART_IRQHandler+0x6a0>
    return;
 800c9ba:	bf00      	nop
 800c9bc:	e004      	b.n	800c9c8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c9be:	bf00      	nop
 800c9c0:	e002      	b.n	800c9c8 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c9c2:	bf00      	nop
 800c9c4:	e000      	b.n	800c9c8 <HAL_UART_IRQHandler+0x6a0>
    return;
 800c9c6:	bf00      	nop
  }
}
 800c9c8:	37e8      	adds	r7, #232	@ 0xe8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop

0800c9d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c9d8:	bf00      	nop
 800c9da:	370c      	adds	r7, #12
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b083      	sub	sp, #12
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c9ec:	bf00      	nop
 800c9ee:	370c      	adds	r7, #12
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f6:	4770      	bx	lr

0800c9f8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ca00:	bf00      	nop
 800ca02:	370c      	adds	r7, #12
 800ca04:	46bd      	mov	sp, r7
 800ca06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0a:	4770      	bx	lr

0800ca0c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b083      	sub	sp, #12
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ca14:	bf00      	nop
 800ca16:	370c      	adds	r7, #12
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ca28:	bf00      	nop
 800ca2a:	370c      	adds	r7, #12
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca32:	4770      	bx	lr

0800ca34 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b083      	sub	sp, #12
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b083      	sub	sp, #12
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ca50:	bf00      	nop
 800ca52:	370c      	adds	r7, #12
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b083      	sub	sp, #12
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
 800ca64:	460b      	mov	r3, r1
 800ca66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ca68:	bf00      	nop
 800ca6a:	370c      	adds	r7, #12
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca72:	4770      	bx	lr

0800ca74 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b083      	sub	sp, #12
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a09      	ldr	r2, [pc, #36]	@ (800caa8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d009      	beq.n	800ca9c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	695b      	ldr	r3, [r3, #20]
 800ca8e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	683a      	ldr	r2, [r7, #0]
 800ca98:	430a      	orrs	r2, r1
 800ca9a:	615a      	str	r2, [r3, #20]
  }
}
 800ca9c:	bf00      	nop
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr
 800caa8:	40008000 	.word	0x40008000

0800caac <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a18      	ldr	r2, [pc, #96]	@ (800cb1c <HAL_UART_EnableReceiverTimeout+0x70>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d027      	beq.n	800cb0e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cac4:	2b20      	cmp	r3, #32
 800cac6:	d120      	bne.n	800cb0a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d101      	bne.n	800cad6 <HAL_UART_EnableReceiverTimeout+0x2a>
 800cad2:	2302      	movs	r3, #2
 800cad4:	e01c      	b.n	800cb10 <HAL_UART_EnableReceiverTimeout+0x64>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2201      	movs	r2, #1
 800cada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	2224      	movs	r2, #36	@ 0x24
 800cae2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800caf4:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2220      	movs	r2, #32
 800cafa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800cb06:	2300      	movs	r3, #0
 800cb08:	e002      	b.n	800cb10 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800cb0a:	2302      	movs	r3, #2
 800cb0c:	e000      	b.n	800cb10 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800cb0e:	2301      	movs	r3, #1
  }
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr
 800cb1c:	40008000 	.word	0x40008000

0800cb20 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	370c      	adds	r7, #12
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
	...

0800cb3c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a1a      	ldr	r2, [pc, #104]	@ (800cbb0 <UART_InitCallbacksToDefault+0x74>)
 800cb48:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a19      	ldr	r2, [pc, #100]	@ (800cbb4 <UART_InitCallbacksToDefault+0x78>)
 800cb50:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a18      	ldr	r2, [pc, #96]	@ (800cbb8 <UART_InitCallbacksToDefault+0x7c>)
 800cb58:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a17      	ldr	r2, [pc, #92]	@ (800cbbc <UART_InitCallbacksToDefault+0x80>)
 800cb60:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a16      	ldr	r2, [pc, #88]	@ (800cbc0 <UART_InitCallbacksToDefault+0x84>)
 800cb68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	4a15      	ldr	r2, [pc, #84]	@ (800cbc4 <UART_InitCallbacksToDefault+0x88>)
 800cb70:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a14      	ldr	r2, [pc, #80]	@ (800cbc8 <UART_InitCallbacksToDefault+0x8c>)
 800cb78:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4a13      	ldr	r2, [pc, #76]	@ (800cbcc <UART_InitCallbacksToDefault+0x90>)
 800cb80:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a12      	ldr	r2, [pc, #72]	@ (800cbd0 <UART_InitCallbacksToDefault+0x94>)
 800cb88:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a11      	ldr	r2, [pc, #68]	@ (800cbd4 <UART_InitCallbacksToDefault+0x98>)
 800cb90:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a10      	ldr	r2, [pc, #64]	@ (800cbd8 <UART_InitCallbacksToDefault+0x9c>)
 800cb98:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a0f      	ldr	r2, [pc, #60]	@ (800cbdc <UART_InitCallbacksToDefault+0xa0>)
 800cba0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800cba4:	bf00      	nop
 800cba6:	370c      	adds	r7, #12
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbae:	4770      	bx	lr
 800cbb0:	0800c9e5 	.word	0x0800c9e5
 800cbb4:	0800c9d1 	.word	0x0800c9d1
 800cbb8:	0800c9f9 	.word	0x0800c9f9
 800cbbc:	08004b39 	.word	0x08004b39
 800cbc0:	0800ca0d 	.word	0x0800ca0d
 800cbc4:	0800ca21 	.word	0x0800ca21
 800cbc8:	0800ca35 	.word	0x0800ca35
 800cbcc:	0800ca49 	.word	0x0800ca49
 800cbd0:	0800db25 	.word	0x0800db25
 800cbd4:	0800db39 	.word	0x0800db39
 800cbd8:	0800db4d 	.word	0x0800db4d
 800cbdc:	0800ca5d 	.word	0x0800ca5d

0800cbe0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbe4:	b08c      	sub	sp, #48	@ 0x30
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cbea:	2300      	movs	r3, #0
 800cbec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	689a      	ldr	r2, [r3, #8]
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	691b      	ldr	r3, [r3, #16]
 800cbf8:	431a      	orrs	r2, r3
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	695b      	ldr	r3, [r3, #20]
 800cbfe:	431a      	orrs	r2, r3
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	69db      	ldr	r3, [r3, #28]
 800cc04:	4313      	orrs	r3, r2
 800cc06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	4baa      	ldr	r3, [pc, #680]	@ (800ceb8 <UART_SetConfig+0x2d8>)
 800cc10:	4013      	ands	r3, r2
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	6812      	ldr	r2, [r2, #0]
 800cc16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc18:	430b      	orrs	r3, r1
 800cc1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	68da      	ldr	r2, [r3, #12]
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	430a      	orrs	r2, r1
 800cc30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	699b      	ldr	r3, [r3, #24]
 800cc36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a9f      	ldr	r2, [pc, #636]	@ (800cebc <UART_SetConfig+0x2dc>)
 800cc3e:	4293      	cmp	r3, r2
 800cc40:	d004      	beq.n	800cc4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	6a1b      	ldr	r3, [r3, #32]
 800cc46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	689b      	ldr	r3, [r3, #8]
 800cc52:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800cc56:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cc5a:	697a      	ldr	r2, [r7, #20]
 800cc5c:	6812      	ldr	r2, [r2, #0]
 800cc5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc60:	430b      	orrs	r3, r1
 800cc62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc6a:	f023 010f 	bic.w	r1, r3, #15
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	430a      	orrs	r2, r1
 800cc78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4a90      	ldr	r2, [pc, #576]	@ (800cec0 <UART_SetConfig+0x2e0>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d125      	bne.n	800ccd0 <UART_SetConfig+0xf0>
 800cc84:	4b8f      	ldr	r3, [pc, #572]	@ (800cec4 <UART_SetConfig+0x2e4>)
 800cc86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc8a:	f003 0303 	and.w	r3, r3, #3
 800cc8e:	2b03      	cmp	r3, #3
 800cc90:	d81a      	bhi.n	800ccc8 <UART_SetConfig+0xe8>
 800cc92:	a201      	add	r2, pc, #4	@ (adr r2, 800cc98 <UART_SetConfig+0xb8>)
 800cc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc98:	0800cca9 	.word	0x0800cca9
 800cc9c:	0800ccb9 	.word	0x0800ccb9
 800cca0:	0800ccb1 	.word	0x0800ccb1
 800cca4:	0800ccc1 	.word	0x0800ccc1
 800cca8:	2301      	movs	r3, #1
 800ccaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccae:	e116      	b.n	800cede <UART_SetConfig+0x2fe>
 800ccb0:	2302      	movs	r3, #2
 800ccb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccb6:	e112      	b.n	800cede <UART_SetConfig+0x2fe>
 800ccb8:	2304      	movs	r3, #4
 800ccba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccbe:	e10e      	b.n	800cede <UART_SetConfig+0x2fe>
 800ccc0:	2308      	movs	r3, #8
 800ccc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccc6:	e10a      	b.n	800cede <UART_SetConfig+0x2fe>
 800ccc8:	2310      	movs	r3, #16
 800ccca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ccce:	e106      	b.n	800cede <UART_SetConfig+0x2fe>
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a7c      	ldr	r2, [pc, #496]	@ (800cec8 <UART_SetConfig+0x2e8>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d138      	bne.n	800cd4c <UART_SetConfig+0x16c>
 800ccda:	4b7a      	ldr	r3, [pc, #488]	@ (800cec4 <UART_SetConfig+0x2e4>)
 800ccdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cce0:	f003 030c 	and.w	r3, r3, #12
 800cce4:	2b0c      	cmp	r3, #12
 800cce6:	d82d      	bhi.n	800cd44 <UART_SetConfig+0x164>
 800cce8:	a201      	add	r2, pc, #4	@ (adr r2, 800ccf0 <UART_SetConfig+0x110>)
 800ccea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccee:	bf00      	nop
 800ccf0:	0800cd25 	.word	0x0800cd25
 800ccf4:	0800cd45 	.word	0x0800cd45
 800ccf8:	0800cd45 	.word	0x0800cd45
 800ccfc:	0800cd45 	.word	0x0800cd45
 800cd00:	0800cd35 	.word	0x0800cd35
 800cd04:	0800cd45 	.word	0x0800cd45
 800cd08:	0800cd45 	.word	0x0800cd45
 800cd0c:	0800cd45 	.word	0x0800cd45
 800cd10:	0800cd2d 	.word	0x0800cd2d
 800cd14:	0800cd45 	.word	0x0800cd45
 800cd18:	0800cd45 	.word	0x0800cd45
 800cd1c:	0800cd45 	.word	0x0800cd45
 800cd20:	0800cd3d 	.word	0x0800cd3d
 800cd24:	2300      	movs	r3, #0
 800cd26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd2a:	e0d8      	b.n	800cede <UART_SetConfig+0x2fe>
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd32:	e0d4      	b.n	800cede <UART_SetConfig+0x2fe>
 800cd34:	2304      	movs	r3, #4
 800cd36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd3a:	e0d0      	b.n	800cede <UART_SetConfig+0x2fe>
 800cd3c:	2308      	movs	r3, #8
 800cd3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd42:	e0cc      	b.n	800cede <UART_SetConfig+0x2fe>
 800cd44:	2310      	movs	r3, #16
 800cd46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd4a:	e0c8      	b.n	800cede <UART_SetConfig+0x2fe>
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	4a5e      	ldr	r2, [pc, #376]	@ (800cecc <UART_SetConfig+0x2ec>)
 800cd52:	4293      	cmp	r3, r2
 800cd54:	d125      	bne.n	800cda2 <UART_SetConfig+0x1c2>
 800cd56:	4b5b      	ldr	r3, [pc, #364]	@ (800cec4 <UART_SetConfig+0x2e4>)
 800cd58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd5c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800cd60:	2b30      	cmp	r3, #48	@ 0x30
 800cd62:	d016      	beq.n	800cd92 <UART_SetConfig+0x1b2>
 800cd64:	2b30      	cmp	r3, #48	@ 0x30
 800cd66:	d818      	bhi.n	800cd9a <UART_SetConfig+0x1ba>
 800cd68:	2b20      	cmp	r3, #32
 800cd6a:	d00a      	beq.n	800cd82 <UART_SetConfig+0x1a2>
 800cd6c:	2b20      	cmp	r3, #32
 800cd6e:	d814      	bhi.n	800cd9a <UART_SetConfig+0x1ba>
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d002      	beq.n	800cd7a <UART_SetConfig+0x19a>
 800cd74:	2b10      	cmp	r3, #16
 800cd76:	d008      	beq.n	800cd8a <UART_SetConfig+0x1aa>
 800cd78:	e00f      	b.n	800cd9a <UART_SetConfig+0x1ba>
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd80:	e0ad      	b.n	800cede <UART_SetConfig+0x2fe>
 800cd82:	2302      	movs	r3, #2
 800cd84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd88:	e0a9      	b.n	800cede <UART_SetConfig+0x2fe>
 800cd8a:	2304      	movs	r3, #4
 800cd8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd90:	e0a5      	b.n	800cede <UART_SetConfig+0x2fe>
 800cd92:	2308      	movs	r3, #8
 800cd94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd98:	e0a1      	b.n	800cede <UART_SetConfig+0x2fe>
 800cd9a:	2310      	movs	r3, #16
 800cd9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cda0:	e09d      	b.n	800cede <UART_SetConfig+0x2fe>
 800cda2:	697b      	ldr	r3, [r7, #20]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a4a      	ldr	r2, [pc, #296]	@ (800ced0 <UART_SetConfig+0x2f0>)
 800cda8:	4293      	cmp	r3, r2
 800cdaa:	d125      	bne.n	800cdf8 <UART_SetConfig+0x218>
 800cdac:	4b45      	ldr	r3, [pc, #276]	@ (800cec4 <UART_SetConfig+0x2e4>)
 800cdae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cdb2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800cdb6:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdb8:	d016      	beq.n	800cde8 <UART_SetConfig+0x208>
 800cdba:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdbc:	d818      	bhi.n	800cdf0 <UART_SetConfig+0x210>
 800cdbe:	2b80      	cmp	r3, #128	@ 0x80
 800cdc0:	d00a      	beq.n	800cdd8 <UART_SetConfig+0x1f8>
 800cdc2:	2b80      	cmp	r3, #128	@ 0x80
 800cdc4:	d814      	bhi.n	800cdf0 <UART_SetConfig+0x210>
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d002      	beq.n	800cdd0 <UART_SetConfig+0x1f0>
 800cdca:	2b40      	cmp	r3, #64	@ 0x40
 800cdcc:	d008      	beq.n	800cde0 <UART_SetConfig+0x200>
 800cdce:	e00f      	b.n	800cdf0 <UART_SetConfig+0x210>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdd6:	e082      	b.n	800cede <UART_SetConfig+0x2fe>
 800cdd8:	2302      	movs	r3, #2
 800cdda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdde:	e07e      	b.n	800cede <UART_SetConfig+0x2fe>
 800cde0:	2304      	movs	r3, #4
 800cde2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cde6:	e07a      	b.n	800cede <UART_SetConfig+0x2fe>
 800cde8:	2308      	movs	r3, #8
 800cdea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdee:	e076      	b.n	800cede <UART_SetConfig+0x2fe>
 800cdf0:	2310      	movs	r3, #16
 800cdf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdf6:	e072      	b.n	800cede <UART_SetConfig+0x2fe>
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a35      	ldr	r2, [pc, #212]	@ (800ced4 <UART_SetConfig+0x2f4>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d12a      	bne.n	800ce58 <UART_SetConfig+0x278>
 800ce02:	4b30      	ldr	r3, [pc, #192]	@ (800cec4 <UART_SetConfig+0x2e4>)
 800ce04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ce0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce10:	d01a      	beq.n	800ce48 <UART_SetConfig+0x268>
 800ce12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ce16:	d81b      	bhi.n	800ce50 <UART_SetConfig+0x270>
 800ce18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce1c:	d00c      	beq.n	800ce38 <UART_SetConfig+0x258>
 800ce1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce22:	d815      	bhi.n	800ce50 <UART_SetConfig+0x270>
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d003      	beq.n	800ce30 <UART_SetConfig+0x250>
 800ce28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ce2c:	d008      	beq.n	800ce40 <UART_SetConfig+0x260>
 800ce2e:	e00f      	b.n	800ce50 <UART_SetConfig+0x270>
 800ce30:	2300      	movs	r3, #0
 800ce32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce36:	e052      	b.n	800cede <UART_SetConfig+0x2fe>
 800ce38:	2302      	movs	r3, #2
 800ce3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce3e:	e04e      	b.n	800cede <UART_SetConfig+0x2fe>
 800ce40:	2304      	movs	r3, #4
 800ce42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce46:	e04a      	b.n	800cede <UART_SetConfig+0x2fe>
 800ce48:	2308      	movs	r3, #8
 800ce4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce4e:	e046      	b.n	800cede <UART_SetConfig+0x2fe>
 800ce50:	2310      	movs	r3, #16
 800ce52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce56:	e042      	b.n	800cede <UART_SetConfig+0x2fe>
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	4a17      	ldr	r2, [pc, #92]	@ (800cebc <UART_SetConfig+0x2dc>)
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	d13a      	bne.n	800ced8 <UART_SetConfig+0x2f8>
 800ce62:	4b18      	ldr	r3, [pc, #96]	@ (800cec4 <UART_SetConfig+0x2e4>)
 800ce64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce68:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ce6c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce70:	d01a      	beq.n	800cea8 <UART_SetConfig+0x2c8>
 800ce72:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ce76:	d81b      	bhi.n	800ceb0 <UART_SetConfig+0x2d0>
 800ce78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce7c:	d00c      	beq.n	800ce98 <UART_SetConfig+0x2b8>
 800ce7e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ce82:	d815      	bhi.n	800ceb0 <UART_SetConfig+0x2d0>
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d003      	beq.n	800ce90 <UART_SetConfig+0x2b0>
 800ce88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce8c:	d008      	beq.n	800cea0 <UART_SetConfig+0x2c0>
 800ce8e:	e00f      	b.n	800ceb0 <UART_SetConfig+0x2d0>
 800ce90:	2300      	movs	r3, #0
 800ce92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce96:	e022      	b.n	800cede <UART_SetConfig+0x2fe>
 800ce98:	2302      	movs	r3, #2
 800ce9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ce9e:	e01e      	b.n	800cede <UART_SetConfig+0x2fe>
 800cea0:	2304      	movs	r3, #4
 800cea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cea6:	e01a      	b.n	800cede <UART_SetConfig+0x2fe>
 800cea8:	2308      	movs	r3, #8
 800ceaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceae:	e016      	b.n	800cede <UART_SetConfig+0x2fe>
 800ceb0:	2310      	movs	r3, #16
 800ceb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ceb6:	e012      	b.n	800cede <UART_SetConfig+0x2fe>
 800ceb8:	cfff69f3 	.word	0xcfff69f3
 800cebc:	40008000 	.word	0x40008000
 800cec0:	40013800 	.word	0x40013800
 800cec4:	40021000 	.word	0x40021000
 800cec8:	40004400 	.word	0x40004400
 800cecc:	40004800 	.word	0x40004800
 800ced0:	40004c00 	.word	0x40004c00
 800ced4:	40005000 	.word	0x40005000
 800ced8:	2310      	movs	r3, #16
 800ceda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4aae      	ldr	r2, [pc, #696]	@ (800d19c <UART_SetConfig+0x5bc>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	f040 8097 	bne.w	800d018 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ceea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ceee:	2b08      	cmp	r3, #8
 800cef0:	d823      	bhi.n	800cf3a <UART_SetConfig+0x35a>
 800cef2:	a201      	add	r2, pc, #4	@ (adr r2, 800cef8 <UART_SetConfig+0x318>)
 800cef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef8:	0800cf1d 	.word	0x0800cf1d
 800cefc:	0800cf3b 	.word	0x0800cf3b
 800cf00:	0800cf25 	.word	0x0800cf25
 800cf04:	0800cf3b 	.word	0x0800cf3b
 800cf08:	0800cf2b 	.word	0x0800cf2b
 800cf0c:	0800cf3b 	.word	0x0800cf3b
 800cf10:	0800cf3b 	.word	0x0800cf3b
 800cf14:	0800cf3b 	.word	0x0800cf3b
 800cf18:	0800cf33 	.word	0x0800cf33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf1c:	f7fc fc76 	bl	800980c <HAL_RCC_GetPCLK1Freq>
 800cf20:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cf22:	e010      	b.n	800cf46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf24:	4b9e      	ldr	r3, [pc, #632]	@ (800d1a0 <UART_SetConfig+0x5c0>)
 800cf26:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cf28:	e00d      	b.n	800cf46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf2a:	f7fc fc01 	bl	8009730 <HAL_RCC_GetSysClockFreq>
 800cf2e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cf30:	e009      	b.n	800cf46 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf36:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cf38:	e005      	b.n	800cf46 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cf44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f000 8130 	beq.w	800d1ae <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf52:	4a94      	ldr	r2, [pc, #592]	@ (800d1a4 <UART_SetConfig+0x5c4>)
 800cf54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf58:	461a      	mov	r2, r3
 800cf5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf60:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	685a      	ldr	r2, [r3, #4]
 800cf66:	4613      	mov	r3, r2
 800cf68:	005b      	lsls	r3, r3, #1
 800cf6a:	4413      	add	r3, r2
 800cf6c:	69ba      	ldr	r2, [r7, #24]
 800cf6e:	429a      	cmp	r2, r3
 800cf70:	d305      	bcc.n	800cf7e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	685b      	ldr	r3, [r3, #4]
 800cf76:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf78:	69ba      	ldr	r2, [r7, #24]
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d903      	bls.n	800cf86 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cf84:	e113      	b.n	800d1ae <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf88:	2200      	movs	r2, #0
 800cf8a:	60bb      	str	r3, [r7, #8]
 800cf8c:	60fa      	str	r2, [r7, #12]
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf92:	4a84      	ldr	r2, [pc, #528]	@ (800d1a4 <UART_SetConfig+0x5c4>)
 800cf94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	603b      	str	r3, [r7, #0]
 800cf9e:	607a      	str	r2, [r7, #4]
 800cfa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cfa8:	f7f3 fe24 	bl	8000bf4 <__aeabi_uldivmod>
 800cfac:	4602      	mov	r2, r0
 800cfae:	460b      	mov	r3, r1
 800cfb0:	4610      	mov	r0, r2
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	f04f 0200 	mov.w	r2, #0
 800cfb8:	f04f 0300 	mov.w	r3, #0
 800cfbc:	020b      	lsls	r3, r1, #8
 800cfbe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cfc2:	0202      	lsls	r2, r0, #8
 800cfc4:	6979      	ldr	r1, [r7, #20]
 800cfc6:	6849      	ldr	r1, [r1, #4]
 800cfc8:	0849      	lsrs	r1, r1, #1
 800cfca:	2000      	movs	r0, #0
 800cfcc:	460c      	mov	r4, r1
 800cfce:	4605      	mov	r5, r0
 800cfd0:	eb12 0804 	adds.w	r8, r2, r4
 800cfd4:	eb43 0905 	adc.w	r9, r3, r5
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	685b      	ldr	r3, [r3, #4]
 800cfdc:	2200      	movs	r2, #0
 800cfde:	469a      	mov	sl, r3
 800cfe0:	4693      	mov	fp, r2
 800cfe2:	4652      	mov	r2, sl
 800cfe4:	465b      	mov	r3, fp
 800cfe6:	4640      	mov	r0, r8
 800cfe8:	4649      	mov	r1, r9
 800cfea:	f7f3 fe03 	bl	8000bf4 <__aeabi_uldivmod>
 800cfee:	4602      	mov	r2, r0
 800cff0:	460b      	mov	r3, r1
 800cff2:	4613      	mov	r3, r2
 800cff4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cff6:	6a3b      	ldr	r3, [r7, #32]
 800cff8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cffc:	d308      	bcc.n	800d010 <UART_SetConfig+0x430>
 800cffe:	6a3b      	ldr	r3, [r7, #32]
 800d000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d004:	d204      	bcs.n	800d010 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	6a3a      	ldr	r2, [r7, #32]
 800d00c:	60da      	str	r2, [r3, #12]
 800d00e:	e0ce      	b.n	800d1ae <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d016:	e0ca      	b.n	800d1ae <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	69db      	ldr	r3, [r3, #28]
 800d01c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d020:	d166      	bne.n	800d0f0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800d022:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d026:	2b08      	cmp	r3, #8
 800d028:	d827      	bhi.n	800d07a <UART_SetConfig+0x49a>
 800d02a:	a201      	add	r2, pc, #4	@ (adr r2, 800d030 <UART_SetConfig+0x450>)
 800d02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d030:	0800d055 	.word	0x0800d055
 800d034:	0800d05d 	.word	0x0800d05d
 800d038:	0800d065 	.word	0x0800d065
 800d03c:	0800d07b 	.word	0x0800d07b
 800d040:	0800d06b 	.word	0x0800d06b
 800d044:	0800d07b 	.word	0x0800d07b
 800d048:	0800d07b 	.word	0x0800d07b
 800d04c:	0800d07b 	.word	0x0800d07b
 800d050:	0800d073 	.word	0x0800d073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d054:	f7fc fbda 	bl	800980c <HAL_RCC_GetPCLK1Freq>
 800d058:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d05a:	e014      	b.n	800d086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d05c:	f7fc fbec 	bl	8009838 <HAL_RCC_GetPCLK2Freq>
 800d060:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d062:	e010      	b.n	800d086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d064:	4b4e      	ldr	r3, [pc, #312]	@ (800d1a0 <UART_SetConfig+0x5c0>)
 800d066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d068:	e00d      	b.n	800d086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d06a:	f7fc fb61 	bl	8009730 <HAL_RCC_GetSysClockFreq>
 800d06e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d070:	e009      	b.n	800d086 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d076:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d078:	e005      	b.n	800d086 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800d07a:	2300      	movs	r3, #0
 800d07c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d07e:	2301      	movs	r3, #1
 800d080:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d084:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f000 8090 	beq.w	800d1ae <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d092:	4a44      	ldr	r2, [pc, #272]	@ (800d1a4 <UART_SetConfig+0x5c4>)
 800d094:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d098:	461a      	mov	r2, r3
 800d09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d09c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0a0:	005a      	lsls	r2, r3, #1
 800d0a2:	697b      	ldr	r3, [r7, #20]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	085b      	lsrs	r3, r3, #1
 800d0a8:	441a      	add	r2, r3
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0b4:	6a3b      	ldr	r3, [r7, #32]
 800d0b6:	2b0f      	cmp	r3, #15
 800d0b8:	d916      	bls.n	800d0e8 <UART_SetConfig+0x508>
 800d0ba:	6a3b      	ldr	r3, [r7, #32]
 800d0bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0c0:	d212      	bcs.n	800d0e8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d0c2:	6a3b      	ldr	r3, [r7, #32]
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	f023 030f 	bic.w	r3, r3, #15
 800d0ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d0cc:	6a3b      	ldr	r3, [r7, #32]
 800d0ce:	085b      	lsrs	r3, r3, #1
 800d0d0:	b29b      	uxth	r3, r3
 800d0d2:	f003 0307 	and.w	r3, r3, #7
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	8bfb      	ldrh	r3, [r7, #30]
 800d0da:	4313      	orrs	r3, r2
 800d0dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	8bfa      	ldrh	r2, [r7, #30]
 800d0e4:	60da      	str	r2, [r3, #12]
 800d0e6:	e062      	b.n	800d1ae <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d0ee:	e05e      	b.n	800d1ae <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d0f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d0f4:	2b08      	cmp	r3, #8
 800d0f6:	d828      	bhi.n	800d14a <UART_SetConfig+0x56a>
 800d0f8:	a201      	add	r2, pc, #4	@ (adr r2, 800d100 <UART_SetConfig+0x520>)
 800d0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fe:	bf00      	nop
 800d100:	0800d125 	.word	0x0800d125
 800d104:	0800d12d 	.word	0x0800d12d
 800d108:	0800d135 	.word	0x0800d135
 800d10c:	0800d14b 	.word	0x0800d14b
 800d110:	0800d13b 	.word	0x0800d13b
 800d114:	0800d14b 	.word	0x0800d14b
 800d118:	0800d14b 	.word	0x0800d14b
 800d11c:	0800d14b 	.word	0x0800d14b
 800d120:	0800d143 	.word	0x0800d143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d124:	f7fc fb72 	bl	800980c <HAL_RCC_GetPCLK1Freq>
 800d128:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d12a:	e014      	b.n	800d156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d12c:	f7fc fb84 	bl	8009838 <HAL_RCC_GetPCLK2Freq>
 800d130:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d132:	e010      	b.n	800d156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d134:	4b1a      	ldr	r3, [pc, #104]	@ (800d1a0 <UART_SetConfig+0x5c0>)
 800d136:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d138:	e00d      	b.n	800d156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d13a:	f7fc faf9 	bl	8009730 <HAL_RCC_GetSysClockFreq>
 800d13e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d140:	e009      	b.n	800d156 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d146:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d148:	e005      	b.n	800d156 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800d14a:	2300      	movs	r3, #0
 800d14c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d14e:	2301      	movs	r3, #1
 800d150:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d154:	bf00      	nop
    }

    if (pclk != 0U)
 800d156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d028      	beq.n	800d1ae <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d15c:	697b      	ldr	r3, [r7, #20]
 800d15e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d160:	4a10      	ldr	r2, [pc, #64]	@ (800d1a4 <UART_SetConfig+0x5c4>)
 800d162:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d166:	461a      	mov	r2, r3
 800d168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d16a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	085b      	lsrs	r3, r3, #1
 800d174:	441a      	add	r2, r3
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d17e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d180:	6a3b      	ldr	r3, [r7, #32]
 800d182:	2b0f      	cmp	r3, #15
 800d184:	d910      	bls.n	800d1a8 <UART_SetConfig+0x5c8>
 800d186:	6a3b      	ldr	r3, [r7, #32]
 800d188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d18c:	d20c      	bcs.n	800d1a8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d18e:	6a3b      	ldr	r3, [r7, #32]
 800d190:	b29a      	uxth	r2, r3
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	60da      	str	r2, [r3, #12]
 800d198:	e009      	b.n	800d1ae <UART_SetConfig+0x5ce>
 800d19a:	bf00      	nop
 800d19c:	40008000 	.word	0x40008000
 800d1a0:	00f42400 	.word	0x00f42400
 800d1a4:	0800f5f0 	.word	0x0800f5f0
      }
      else
      {
        ret = HAL_ERROR;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d1ca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3730      	adds	r7, #48	@ 0x30
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d1d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1e4:	f003 0308 	and.w	r3, r3, #8
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00a      	beq.n	800d202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	430a      	orrs	r2, r1
 800d200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d206:	f003 0301 	and.w	r3, r3, #1
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00a      	beq.n	800d224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	430a      	orrs	r2, r1
 800d222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d228:	f003 0302 	and.w	r3, r3, #2
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00a      	beq.n	800d246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	430a      	orrs	r2, r1
 800d244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d24a:	f003 0304 	and.w	r3, r3, #4
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00a      	beq.n	800d268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	430a      	orrs	r2, r1
 800d266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d26c:	f003 0310 	and.w	r3, r3, #16
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00a      	beq.n	800d28a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	430a      	orrs	r2, r1
 800d288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d28e:	f003 0320 	and.w	r3, r3, #32
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00a      	beq.n	800d2ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	689b      	ldr	r3, [r3, #8]
 800d29c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	430a      	orrs	r2, r1
 800d2aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d01a      	beq.n	800d2ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	685b      	ldr	r3, [r3, #4]
 800d2be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	430a      	orrs	r2, r1
 800d2cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d2d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d2d6:	d10a      	bne.n	800d2ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	685b      	ldr	r3, [r3, #4]
 800d2de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	430a      	orrs	r2, r1
 800d2ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d00a      	beq.n	800d310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	685b      	ldr	r3, [r3, #4]
 800d300:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	430a      	orrs	r2, r1
 800d30e:	605a      	str	r2, [r3, #4]
  }
}
 800d310:	bf00      	nop
 800d312:	370c      	adds	r7, #12
 800d314:	46bd      	mov	sp, r7
 800d316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31a:	4770      	bx	lr

0800d31c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b098      	sub	sp, #96	@ 0x60
 800d320:	af02      	add	r7, sp, #8
 800d322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d32c:	f7f9 fa6e 	bl	800680c <HAL_GetTick>
 800d330:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f003 0308 	and.w	r3, r3, #8
 800d33c:	2b08      	cmp	r3, #8
 800d33e:	d12f      	bne.n	800d3a0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d340:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d348:	2200      	movs	r2, #0
 800d34a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 f88e 	bl	800d470 <UART_WaitOnFlagUntilTimeout>
 800d354:	4603      	mov	r3, r0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d022      	beq.n	800d3a0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d362:	e853 3f00 	ldrex	r3, [r3]
 800d366:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d36a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d36e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	461a      	mov	r2, r3
 800d376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d378:	647b      	str	r3, [r7, #68]	@ 0x44
 800d37a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d37c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d37e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d380:	e841 2300 	strex	r3, r2, [r1]
 800d384:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d386:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1e6      	bne.n	800d35a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2220      	movs	r2, #32
 800d390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d39c:	2303      	movs	r3, #3
 800d39e:	e063      	b.n	800d468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f003 0304 	and.w	r3, r3, #4
 800d3aa:	2b04      	cmp	r3, #4
 800d3ac:	d149      	bne.n	800d442 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3ae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d3b2:	9300      	str	r3, [sp, #0]
 800d3b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 f857 	bl	800d470 <UART_WaitOnFlagUntilTimeout>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d03c      	beq.n	800d442 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d0:	e853 3f00 	ldrex	r3, [r3]
 800d3d4:	623b      	str	r3, [r7, #32]
   return(result);
 800d3d6:	6a3b      	ldr	r3, [r7, #32]
 800d3d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d3dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d3e6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d3ee:	e841 2300 	strex	r3, r2, [r1]
 800d3f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d1e6      	bne.n	800d3c8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	3308      	adds	r3, #8
 800d400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	e853 3f00 	ldrex	r3, [r3]
 800d408:	60fb      	str	r3, [r7, #12]
   return(result);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f023 0301 	bic.w	r3, r3, #1
 800d410:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3308      	adds	r3, #8
 800d418:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d41a:	61fa      	str	r2, [r7, #28]
 800d41c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41e:	69b9      	ldr	r1, [r7, #24]
 800d420:	69fa      	ldr	r2, [r7, #28]
 800d422:	e841 2300 	strex	r3, r2, [r1]
 800d426:	617b      	str	r3, [r7, #20]
   return(result);
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d1e5      	bne.n	800d3fa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	2220      	movs	r2, #32
 800d432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2200      	movs	r2, #0
 800d43a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d43e:	2303      	movs	r3, #3
 800d440:	e012      	b.n	800d468 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2220      	movs	r2, #32
 800d446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2220      	movs	r2, #32
 800d44e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3758      	adds	r7, #88	@ 0x58
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b084      	sub	sp, #16
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	603b      	str	r3, [r7, #0]
 800d47c:	4613      	mov	r3, r2
 800d47e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d480:	e04f      	b.n	800d522 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d488:	d04b      	beq.n	800d522 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d48a:	f7f9 f9bf 	bl	800680c <HAL_GetTick>
 800d48e:	4602      	mov	r2, r0
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	1ad3      	subs	r3, r2, r3
 800d494:	69ba      	ldr	r2, [r7, #24]
 800d496:	429a      	cmp	r2, r3
 800d498:	d302      	bcc.n	800d4a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d101      	bne.n	800d4a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	e04e      	b.n	800d542 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f003 0304 	and.w	r3, r3, #4
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d037      	beq.n	800d522 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	2b80      	cmp	r3, #128	@ 0x80
 800d4b6:	d034      	beq.n	800d522 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	2b40      	cmp	r3, #64	@ 0x40
 800d4bc:	d031      	beq.n	800d522 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	69db      	ldr	r3, [r3, #28]
 800d4c4:	f003 0308 	and.w	r3, r3, #8
 800d4c8:	2b08      	cmp	r3, #8
 800d4ca:	d110      	bne.n	800d4ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2208      	movs	r2, #8
 800d4d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f000 f920 	bl	800d71a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2208      	movs	r2, #8
 800d4de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e029      	b.n	800d542 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	69db      	ldr	r3, [r3, #28]
 800d4f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d4f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d4fc:	d111      	bne.n	800d522 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d506:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d508:	68f8      	ldr	r0, [r7, #12]
 800d50a:	f000 f906 	bl	800d71a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	2220      	movs	r2, #32
 800d512:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d51e:	2303      	movs	r3, #3
 800d520:	e00f      	b.n	800d542 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	69da      	ldr	r2, [r3, #28]
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	4013      	ands	r3, r2
 800d52c:	68ba      	ldr	r2, [r7, #8]
 800d52e:	429a      	cmp	r2, r3
 800d530:	bf0c      	ite	eq
 800d532:	2301      	moveq	r3, #1
 800d534:	2300      	movne	r3, #0
 800d536:	b2db      	uxtb	r3, r3
 800d538:	461a      	mov	r2, r3
 800d53a:	79fb      	ldrb	r3, [r7, #7]
 800d53c:	429a      	cmp	r2, r3
 800d53e:	d0a0      	beq.n	800d482 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d540:	2300      	movs	r3, #0
}
 800d542:	4618      	mov	r0, r3
 800d544:	3710      	adds	r7, #16
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
	...

0800d54c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b096      	sub	sp, #88	@ 0x58
 800d550:	af00      	add	r7, sp, #0
 800d552:	60f8      	str	r0, [r7, #12]
 800d554:	60b9      	str	r1, [r7, #8]
 800d556:	4613      	mov	r3, r2
 800d558:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	68ba      	ldr	r2, [r7, #8]
 800d55e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	88fa      	ldrh	r2, [r7, #6]
 800d564:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	2222      	movs	r2, #34	@ 0x22
 800d574:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d02d      	beq.n	800d5de <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d588:	4a40      	ldr	r2, [pc, #256]	@ (800d68c <UART_Start_Receive_DMA+0x140>)
 800d58a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d592:	4a3f      	ldr	r2, [pc, #252]	@ (800d690 <UART_Start_Receive_DMA+0x144>)
 800d594:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d59c:	4a3d      	ldr	r2, [pc, #244]	@ (800d694 <UART_Start_Receive_DMA+0x148>)
 800d59e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3324      	adds	r3, #36	@ 0x24
 800d5b6:	4619      	mov	r1, r3
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5bc:	461a      	mov	r2, r3
 800d5be:	88fb      	ldrh	r3, [r7, #6]
 800d5c0:	f7fa ff60 	bl	8008484 <HAL_DMA_Start_IT>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d009      	beq.n	800d5de <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2210      	movs	r2, #16
 800d5ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2220      	movs	r2, #32
 800d5d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d5da:	2301      	movs	r3, #1
 800d5dc:	e051      	b.n	800d682 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d018      	beq.n	800d618 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5ee:	e853 3f00 	ldrex	r3, [r3]
 800d5f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d5fa:	657b      	str	r3, [r7, #84]	@ 0x54
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	461a      	mov	r2, r3
 800d602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d604:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d606:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d608:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d60a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d60c:	e841 2300 	strex	r3, r2, [r1]
 800d610:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d612:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d614:	2b00      	cmp	r3, #0
 800d616:	d1e6      	bne.n	800d5e6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	3308      	adds	r3, #8
 800d61e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d622:	e853 3f00 	ldrex	r3, [r3]
 800d626:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d62a:	f043 0301 	orr.w	r3, r3, #1
 800d62e:	653b      	str	r3, [r7, #80]	@ 0x50
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	3308      	adds	r3, #8
 800d636:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d638:	637a      	str	r2, [r7, #52]	@ 0x34
 800d63a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d63c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d63e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d640:	e841 2300 	strex	r3, r2, [r1]
 800d644:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d1e5      	bne.n	800d618 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	3308      	adds	r3, #8
 800d652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	e853 3f00 	ldrex	r3, [r3]
 800d65a:	613b      	str	r3, [r7, #16]
   return(result);
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	3308      	adds	r3, #8
 800d66a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d66c:	623a      	str	r2, [r7, #32]
 800d66e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d670:	69f9      	ldr	r1, [r7, #28]
 800d672:	6a3a      	ldr	r2, [r7, #32]
 800d674:	e841 2300 	strex	r3, r2, [r1]
 800d678:	61bb      	str	r3, [r7, #24]
   return(result);
 800d67a:	69bb      	ldr	r3, [r7, #24]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d1e5      	bne.n	800d64c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d680:	2300      	movs	r3, #0
}
 800d682:	4618      	mov	r0, r3
 800d684:	3758      	adds	r7, #88	@ 0x58
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	0800d8a5 	.word	0x0800d8a5
 800d690:	0800d9d9 	.word	0x0800d9d9
 800d694:	0800da1f 	.word	0x0800da1f

0800d698 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d698:	b480      	push	{r7}
 800d69a:	b08f      	sub	sp, #60	@ 0x3c
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a6:	6a3b      	ldr	r3, [r7, #32]
 800d6a8:	e853 3f00 	ldrex	r3, [r3]
 800d6ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d6b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	461a      	mov	r2, r3
 800d6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d6c0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d6c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6c6:	e841 2300 	strex	r3, r2, [r1]
 800d6ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d1e6      	bne.n	800d6a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	3308      	adds	r3, #8
 800d6d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	e853 3f00 	ldrex	r3, [r3]
 800d6e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d6e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	3308      	adds	r3, #8
 800d6f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6f2:	61ba      	str	r2, [r7, #24]
 800d6f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f6:	6979      	ldr	r1, [r7, #20]
 800d6f8:	69ba      	ldr	r2, [r7, #24]
 800d6fa:	e841 2300 	strex	r3, r2, [r1]
 800d6fe:	613b      	str	r3, [r7, #16]
   return(result);
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1e5      	bne.n	800d6d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2220      	movs	r2, #32
 800d70a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d70e:	bf00      	nop
 800d710:	373c      	adds	r7, #60	@ 0x3c
 800d712:	46bd      	mov	sp, r7
 800d714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d718:	4770      	bx	lr

0800d71a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d71a:	b480      	push	{r7}
 800d71c:	b095      	sub	sp, #84	@ 0x54
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d72a:	e853 3f00 	ldrex	r3, [r3]
 800d72e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d732:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	461a      	mov	r2, r3
 800d73e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d740:	643b      	str	r3, [r7, #64]	@ 0x40
 800d742:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d744:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d746:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d748:	e841 2300 	strex	r3, r2, [r1]
 800d74c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d74e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d750:	2b00      	cmp	r3, #0
 800d752:	d1e6      	bne.n	800d722 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	3308      	adds	r3, #8
 800d75a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	e853 3f00 	ldrex	r3, [r3]
 800d762:	61fb      	str	r3, [r7, #28]
   return(result);
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d76a:	f023 0301 	bic.w	r3, r3, #1
 800d76e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	3308      	adds	r3, #8
 800d776:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d778:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d77a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d77c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d77e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d780:	e841 2300 	strex	r3, r2, [r1]
 800d784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d1e3      	bne.n	800d754 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d790:	2b01      	cmp	r3, #1
 800d792:	d118      	bne.n	800d7c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	e853 3f00 	ldrex	r3, [r3]
 800d7a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	f023 0310 	bic.w	r3, r3, #16
 800d7a8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	461a      	mov	r2, r3
 800d7b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7b2:	61bb      	str	r3, [r7, #24]
 800d7b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b6:	6979      	ldr	r1, [r7, #20]
 800d7b8:	69ba      	ldr	r2, [r7, #24]
 800d7ba:	e841 2300 	strex	r3, r2, [r1]
 800d7be:	613b      	str	r3, [r7, #16]
   return(result);
 800d7c0:	693b      	ldr	r3, [r7, #16]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d1e6      	bne.n	800d794 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2220      	movs	r2, #32
 800d7ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d7da:	bf00      	nop
 800d7dc:	3754      	adds	r7, #84	@ 0x54
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr

0800d7e6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d7e6:	b580      	push	{r7, lr}
 800d7e8:	b090      	sub	sp, #64	@ 0x40
 800d7ea:	af00      	add	r7, sp, #0
 800d7ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	f003 0320 	and.w	r3, r3, #32
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d137      	bne.n	800d872 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800d802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d804:	2200      	movs	r2, #0
 800d806:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d80a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	3308      	adds	r3, #8
 800d810:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d814:	e853 3f00 	ldrex	r3, [r3]
 800d818:	623b      	str	r3, [r7, #32]
   return(result);
 800d81a:	6a3b      	ldr	r3, [r7, #32]
 800d81c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d820:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d822:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3308      	adds	r3, #8
 800d828:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d82a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d82c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d832:	e841 2300 	strex	r3, r2, [r1]
 800d836:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1e5      	bne.n	800d80a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d83e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	e853 3f00 	ldrex	r3, [r3]
 800d84a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d852:	637b      	str	r3, [r7, #52]	@ 0x34
 800d854:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	461a      	mov	r2, r3
 800d85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d85c:	61fb      	str	r3, [r7, #28]
 800d85e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d860:	69b9      	ldr	r1, [r7, #24]
 800d862:	69fa      	ldr	r2, [r7, #28]
 800d864:	e841 2300 	strex	r3, r2, [r1]
 800d868:	617b      	str	r3, [r7, #20]
   return(result);
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d1e6      	bne.n	800d83e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d870:	e004      	b.n	800d87c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800d872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d874:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d878:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d87a:	4798      	blx	r3
}
 800d87c:	bf00      	nop
 800d87e:	3740      	adds	r7, #64	@ 0x40
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b084      	sub	sp, #16
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d890:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d898:	68f8      	ldr	r0, [r7, #12]
 800d89a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d89c:	bf00      	nop
 800d89e:	3710      	adds	r7, #16
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b09c      	sub	sp, #112	@ 0x70
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f003 0320 	and.w	r3, r3, #32
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d171      	bne.n	800d9a4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d8c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8d0:	e853 3f00 	ldrex	r3, [r3]
 800d8d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d8d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d8d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d8dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d8de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d8e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d8e8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d8ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8ee:	e841 2300 	strex	r3, r2, [r1]
 800d8f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d8f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d1e6      	bne.n	800d8c8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	3308      	adds	r3, #8
 800d900:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d904:	e853 3f00 	ldrex	r3, [r3]
 800d908:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d90a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d90c:	f023 0301 	bic.w	r3, r3, #1
 800d910:	667b      	str	r3, [r7, #100]	@ 0x64
 800d912:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	3308      	adds	r3, #8
 800d918:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d91a:	647a      	str	r2, [r7, #68]	@ 0x44
 800d91c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d920:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d922:	e841 2300 	strex	r3, r2, [r1]
 800d926:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e5      	bne.n	800d8fa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d92e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	3308      	adds	r3, #8
 800d934:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d938:	e853 3f00 	ldrex	r3, [r3]
 800d93c:	623b      	str	r3, [r7, #32]
   return(result);
 800d93e:	6a3b      	ldr	r3, [r7, #32]
 800d940:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d944:	663b      	str	r3, [r7, #96]	@ 0x60
 800d946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	3308      	adds	r3, #8
 800d94c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d94e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d950:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d956:	e841 2300 	strex	r3, r2, [r1]
 800d95a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d95c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d1e5      	bne.n	800d92e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d964:	2220      	movs	r2, #32
 800d966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d96a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d96c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d118      	bne.n	800d9a4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	e853 3f00 	ldrex	r3, [r3]
 800d97e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	f023 0310 	bic.w	r3, r3, #16
 800d986:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d988:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	461a      	mov	r2, r3
 800d98e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d990:	61fb      	str	r3, [r7, #28]
 800d992:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d994:	69b9      	ldr	r1, [r7, #24]
 800d996:	69fa      	ldr	r2, [r7, #28]
 800d998:	e841 2300 	strex	r3, r2, [r1]
 800d99c:	617b      	str	r3, [r7, #20]
   return(result);
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d1e6      	bne.n	800d972 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d9a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d109      	bne.n	800d9c6 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d9b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d9b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d9ba:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d9be:	4611      	mov	r1, r2
 800d9c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d9c2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d9c4:	e004      	b.n	800d9d0 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800d9c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d9c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d9cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d9ce:	4798      	blx	r3
}
 800d9d0:	bf00      	nop
 800d9d2:	3770      	adds	r7, #112	@ 0x70
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d10b      	bne.n	800da0c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d9fa:	68fa      	ldr	r2, [r7, #12]
 800d9fc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800da00:	0852      	lsrs	r2, r2, #1
 800da02:	b292      	uxth	r2, r2
 800da04:	4611      	mov	r1, r2
 800da06:	68f8      	ldr	r0, [r7, #12]
 800da08:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da0a:	e004      	b.n	800da16 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800da12:	68f8      	ldr	r0, [r7, #12]
 800da14:	4798      	blx	r3
}
 800da16:	bf00      	nop
 800da18:	3710      	adds	r7, #16
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}

0800da1e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b086      	sub	sp, #24
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da2a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da32:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800da3a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da46:	2b80      	cmp	r3, #128	@ 0x80
 800da48:	d109      	bne.n	800da5e <UART_DMAError+0x40>
 800da4a:	693b      	ldr	r3, [r7, #16]
 800da4c:	2b21      	cmp	r3, #33	@ 0x21
 800da4e:	d106      	bne.n	800da5e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	2200      	movs	r2, #0
 800da54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800da58:	6978      	ldr	r0, [r7, #20]
 800da5a:	f7ff fe1d 	bl	800d698 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800da5e:	697b      	ldr	r3, [r7, #20]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da68:	2b40      	cmp	r3, #64	@ 0x40
 800da6a:	d109      	bne.n	800da80 <UART_DMAError+0x62>
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	2b22      	cmp	r3, #34	@ 0x22
 800da70:	d106      	bne.n	800da80 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	2200      	movs	r2, #0
 800da76:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800da7a:	6978      	ldr	r0, [r7, #20]
 800da7c:	f7ff fe4d 	bl	800d71a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800da86:	f043 0210 	orr.w	r2, r3, #16
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800da96:	6978      	ldr	r0, [r7, #20]
 800da98:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da9a:	bf00      	nop
 800da9c:	3718      	adds	r7, #24
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b084      	sub	sp, #16
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800daae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2200      	movs	r2, #0
 800dab4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800dabe:	68f8      	ldr	r0, [r7, #12]
 800dac0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dac2:	bf00      	nop
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b088      	sub	sp, #32
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	e853 3f00 	ldrex	r3, [r3]
 800dade:	60bb      	str	r3, [r7, #8]
   return(result);
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dae6:	61fb      	str	r3, [r7, #28]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	461a      	mov	r2, r3
 800daee:	69fb      	ldr	r3, [r7, #28]
 800daf0:	61bb      	str	r3, [r7, #24]
 800daf2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daf4:	6979      	ldr	r1, [r7, #20]
 800daf6:	69ba      	ldr	r2, [r7, #24]
 800daf8:	e841 2300 	strex	r3, r2, [r1]
 800dafc:	613b      	str	r3, [r7, #16]
   return(result);
 800dafe:	693b      	ldr	r3, [r7, #16]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d1e6      	bne.n	800dad2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2220      	movs	r2, #32
 800db08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2200      	movs	r2, #0
 800db10:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db1c:	bf00      	nop
 800db1e:	3720      	adds	r7, #32
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800db2c:	bf00      	nop
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr

0800db38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800db38:	b480      	push	{r7}
 800db3a:	b083      	sub	sp, #12
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800db40:	bf00      	nop
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800db54:	bf00      	nop
 800db56:	370c      	adds	r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db60:	b480      	push	{r7}
 800db62:	b085      	sub	sp, #20
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d101      	bne.n	800db76 <HAL_UARTEx_DisableFifoMode+0x16>
 800db72:	2302      	movs	r3, #2
 800db74:	e027      	b.n	800dbc6 <HAL_UARTEx_DisableFifoMode+0x66>
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2201      	movs	r2, #1
 800db7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2224      	movs	r2, #36	@ 0x24
 800db82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f022 0201 	bic.w	r2, r2, #1
 800db9c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dba4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	68fa      	ldr	r2, [r7, #12]
 800dbb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2220      	movs	r2, #32
 800dbb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3714      	adds	r7, #20
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr

0800dbd2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
 800dbda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dbe2:	2b01      	cmp	r3, #1
 800dbe4:	d101      	bne.n	800dbea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dbe6:	2302      	movs	r3, #2
 800dbe8:	e02d      	b.n	800dc46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	2201      	movs	r2, #1
 800dbee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2224      	movs	r2, #36	@ 0x24
 800dbf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f022 0201 	bic.w	r2, r2, #1
 800dc10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	689b      	ldr	r3, [r3, #8]
 800dc18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	683a      	ldr	r2, [r7, #0]
 800dc22:	430a      	orrs	r2, r1
 800dc24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f850 	bl	800dccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	68fa      	ldr	r2, [r7, #12]
 800dc32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2220      	movs	r2, #32
 800dc38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2200      	movs	r2, #0
 800dc40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc44:	2300      	movs	r3, #0
}
 800dc46:	4618      	mov	r0, r3
 800dc48:	3710      	adds	r7, #16
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b084      	sub	sp, #16
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
 800dc56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d101      	bne.n	800dc66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc62:	2302      	movs	r3, #2
 800dc64:	e02d      	b.n	800dcc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2224      	movs	r2, #36	@ 0x24
 800dc72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f022 0201 	bic.w	r2, r2, #1
 800dc8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	683a      	ldr	r2, [r7, #0]
 800dc9e:	430a      	orrs	r2, r1
 800dca0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f812 	bl	800dccc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2220      	movs	r2, #32
 800dcb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dcc0:	2300      	movs	r3, #0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
	...

0800dccc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d108      	bne.n	800dcee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2201      	movs	r2, #1
 800dce0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	2201      	movs	r2, #1
 800dce8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dcec:	e031      	b.n	800dd52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcee:	2308      	movs	r3, #8
 800dcf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcf2:	2308      	movs	r3, #8
 800dcf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	0e5b      	lsrs	r3, r3, #25
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	f003 0307 	and.w	r3, r3, #7
 800dd04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	0f5b      	lsrs	r3, r3, #29
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	f003 0307 	and.w	r3, r3, #7
 800dd14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd16:	7bbb      	ldrb	r3, [r7, #14]
 800dd18:	7b3a      	ldrb	r2, [r7, #12]
 800dd1a:	4911      	ldr	r1, [pc, #68]	@ (800dd60 <UARTEx_SetNbDataToProcess+0x94>)
 800dd1c:	5c8a      	ldrb	r2, [r1, r2]
 800dd1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dd22:	7b3a      	ldrb	r2, [r7, #12]
 800dd24:	490f      	ldr	r1, [pc, #60]	@ (800dd64 <UARTEx_SetNbDataToProcess+0x98>)
 800dd26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dd28:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
 800dd36:	7b7a      	ldrb	r2, [r7, #13]
 800dd38:	4909      	ldr	r1, [pc, #36]	@ (800dd60 <UARTEx_SetNbDataToProcess+0x94>)
 800dd3a:	5c8a      	ldrb	r2, [r1, r2]
 800dd3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dd40:	7b7a      	ldrb	r2, [r7, #13]
 800dd42:	4908      	ldr	r1, [pc, #32]	@ (800dd64 <UARTEx_SetNbDataToProcess+0x98>)
 800dd44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd46:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd4a:	b29a      	uxth	r2, r3
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dd52:	bf00      	nop
 800dd54:	3714      	adds	r7, #20
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	0800f608 	.word	0x0800f608
 800dd64:	0800f610 	.word	0x0800f610

0800dd68 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b08b      	sub	sp, #44	@ 0x2c
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	60f8      	str	r0, [r7, #12]
 800dd70:	60b9      	str	r1, [r7, #8]
 800dd72:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	881b      	ldrh	r3, [r3, #0]
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	885b      	ldrh	r3, [r3, #2]
 800dd90:	fb02 f303 	mul.w	r3, r2, r3
 800dd94:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800dd9a:	e013      	b.n	800ddc4 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800dd9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd9e:	1d1a      	adds	r2, r3, #4
 800dda0:	627a      	str	r2, [r7, #36]	@ 0x24
 800dda2:	ed93 7a00 	vldr	s14, [r3]
 800dda6:	6a3b      	ldr	r3, [r7, #32]
 800dda8:	1d1a      	adds	r2, r3, #4
 800ddaa:	623a      	str	r2, [r7, #32]
 800ddac:	edd3 7a00 	vldr	s15, [r3]
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	1d1a      	adds	r2, r3, #4
 800ddb4:	61fa      	str	r2, [r7, #28]
 800ddb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddba:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ddbe:	69bb      	ldr	r3, [r7, #24]
 800ddc0:	3b01      	subs	r3, #1
 800ddc2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1e8      	bne.n	800dd9c <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800ddce:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	372c      	adds	r7, #44	@ 0x2c
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr

0800ddde <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800ddde:	b480      	push	{r7}
 800dde0:	b085      	sub	sp, #20
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	60f8      	str	r0, [r7, #12]
 800dde6:	607b      	str	r3, [r7, #4]
 800dde8:	460b      	mov	r3, r1
 800ddea:	817b      	strh	r3, [r7, #10]
 800ddec:	4613      	mov	r3, r2
 800ddee:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	897a      	ldrh	r2, [r7, #10]
 800ddf4:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	893a      	ldrh	r2, [r7, #8]
 800ddfa:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	605a      	str	r2, [r3, #4]
}
 800de02:	bf00      	nop
 800de04:	3714      	adds	r7, #20
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr

0800de0e <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800de0e:	b480      	push	{r7}
 800de10:	b0bb      	sub	sp, #236	@ 0xec
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
 800de16:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	881b      	ldrh	r3, [r3, #0]
 800de28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	885b      	ldrh	r3, [r3, #2]
 800de2e:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800de30:	f04f 0300 	mov.w	r3, #0
 800de34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800de38:	f04f 0300 	mov.w	r3, #0
 800de3c:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800de3e:	2300      	movs	r3, #0
 800de40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800de44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800de46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800de4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de4c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800de50:	e03b      	b.n	800deca <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800de52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800de54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800de58:	1ad3      	subs	r3, r2, r3
 800de5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800de5e:	e00c      	b.n	800de7a <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800de60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de64:	1d1a      	adds	r2, r3, #4
 800de66:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800de6a:	f04f 0200 	mov.w	r2, #0
 800de6e:	601a      	str	r2, [r3, #0]
        j--;
 800de70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de74:	3b01      	subs	r3, #1
 800de76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800de7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d1ee      	bne.n	800de60 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800de82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800de86:	1d1a      	adds	r2, r3, #4
 800de88:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800de8c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800de90:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800de92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800de96:	3b01      	subs	r3, #1
 800de98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800de9c:	e00c      	b.n	800deb8 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800de9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dea2:	1d1a      	adds	r2, r3, #4
 800dea4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800dea8:	f04f 0200 	mov.w	r2, #0
 800deac:	601a      	str	r2, [r3, #0]
        j--;
 800deae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800deb2:	3b01      	subs	r3, #1
 800deb4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800deb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800debc:	2b00      	cmp	r3, #0
 800debe:	d1ee      	bne.n	800de9e <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800dec0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800dec4:	3b01      	subs	r3, #1
 800dec6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800deca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d1bf      	bne.n	800de52 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800ded2:	2300      	movs	r3, #0
 800ded4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ded8:	e2c7      	b.n	800e46a <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800deda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dede:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	685a      	ldr	r2, [r3, #4]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	885b      	ldrh	r3, [r3, #2]
 800dee8:	3301      	adds	r3, #1
 800deea:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800deee:	fb01 f303 	mul.w	r3, r1, r3
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	4413      	add	r3, r2
 800def6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800defa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800df04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800df08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800df0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800df10:	3301      	adds	r3, #1
 800df12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800df16:	e02c      	b.n	800df72 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	685a      	ldr	r2, [r3, #4]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	885b      	ldrh	r3, [r3, #2]
 800df20:	4619      	mov	r1, r3
 800df22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df26:	fb03 f101 	mul.w	r1, r3, r1
 800df2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800df2e:	440b      	add	r3, r1
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4413      	add	r3, r2
 800df34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800df38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800df40:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800df44:	eeb0 7ae7 	vabs.f32	s14, s15
 800df48:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800df4c:	eef0 7ae7 	vabs.f32	s15, s15
 800df50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800df54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df58:	dd06      	ble.n	800df68 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800df5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df5e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800df62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800df68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800df6c:	3301      	adds	r3, #1
 800df6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800df72:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800df76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df78:	429a      	cmp	r2, r3
 800df7a:	d3cd      	bcc.n	800df18 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800df7c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800df80:	eef5 7a40 	vcmp.f32	s15, #0.0
 800df84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df88:	f000 809b 	beq.w	800e0c2 <arm_mat_inverse_f32+0x2b4>
 800df8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800df90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800df94:	429a      	cmp	r2, r3
 800df96:	f000 8094 	beq.w	800e0c2 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	885b      	ldrh	r3, [r3, #2]
 800dfae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dfb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dfb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dfb6:	1ad3      	subs	r3, r2, r3
 800dfb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dfbe:	fb03 f202 	mul.w	r2, r3, r2
 800dfc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dfc6:	4413      	add	r3, r2
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800dfce:	4413      	add	r3, r2
 800dfd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800dfd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dfd6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800dfda:	fb03 f202 	mul.w	r2, r3, r2
 800dfde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dfe2:	4413      	add	r3, r2
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800dfea:	4413      	add	r3, r2
 800dfec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800dff0:	2300      	movs	r3, #0
 800dff2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800dff6:	e018      	b.n	800e02a <arm_mat_inverse_f32+0x21c>
 800dff8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e000:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e004:	1d1a      	adds	r2, r3, #4
 800e006:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800e00a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e00e:	6812      	ldr	r2, [r2, #0]
 800e010:	601a      	str	r2, [r3, #0]
 800e012:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e016:	1d1a      	adds	r2, r3, #4
 800e018:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800e01c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e01e:	601a      	str	r2, [r3, #0]
 800e020:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e024:	3301      	adds	r3, #1
 800e026:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e02a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800e02e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e030:	429a      	cmp	r2, r3
 800e032:	dbe1      	blt.n	800dff8 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	685b      	ldr	r3, [r3, #4]
 800e038:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	885b      	ldrh	r3, [r3, #2]
 800e048:	647b      	str	r3, [r7, #68]	@ 0x44
 800e04a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e04c:	643b      	str	r3, [r7, #64]	@ 0x40
 800e04e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e050:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e052:	fb02 f303 	mul.w	r3, r2, r3
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e05c:	4413      	add	r3, r2
 800e05e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e062:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e064:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800e068:	fb02 f303 	mul.w	r3, r2, r3
 800e06c:	009b      	lsls	r3, r3, #2
 800e06e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e072:	4413      	add	r3, r2
 800e074:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e078:	2300      	movs	r3, #0
 800e07a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e07e:	e018      	b.n	800e0b2 <arm_mat_inverse_f32+0x2a4>
 800e080:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e08c:	1d1a      	adds	r2, r3, #4
 800e08e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800e092:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800e096:	6812      	ldr	r2, [r2, #0]
 800e098:	601a      	str	r2, [r3, #0]
 800e09a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e09e:	1d1a      	adds	r2, r3, #4
 800e0a0:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800e0a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e0a6:	601a      	str	r2, [r3, #0]
 800e0a8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e0b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800e0b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	dbe1      	blt.n	800e080 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800e0bc:	2301      	movs	r3, #1
 800e0be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800e0c2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e0c6:	2b01      	cmp	r3, #1
 800e0c8:	d009      	beq.n	800e0de <arm_mat_inverse_f32+0x2d0>
 800e0ca:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e0ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0d6:	d102      	bne.n	800e0de <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800e0d8:	f06f 0304 	mvn.w	r3, #4
 800e0dc:	e208      	b.n	800e4f0 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800e0de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e0e2:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800e0e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0ea:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	885b      	ldrh	r3, [r3, #2]
 800e0fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800e0fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e0fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e102:	1ad3      	subs	r3, r2, r3
 800e104:	633b      	str	r3, [r7, #48]	@ 0x30
 800e106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e108:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e10a:	fb03 f202 	mul.w	r2, r3, r2
 800e10e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e112:	4413      	add	r3, r2
 800e114:	009b      	lsls	r3, r3, #2
 800e116:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800e11a:	4413      	add	r3, r2
 800e11c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e120:	2300      	movs	r3, #0
 800e122:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e126:	e011      	b.n	800e14c <arm_mat_inverse_f32+0x33e>
 800e128:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e12c:	1d1a      	adds	r2, r3, #4
 800e12e:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800e132:	ed93 7a00 	vldr	s14, [r3]
 800e136:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e13e:	edc3 7a00 	vstr	s15, [r3]
 800e142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e146:	3301      	adds	r3, #1
 800e148:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e14c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800e150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e152:	429a      	cmp	r2, r3
 800e154:	dbe8      	blt.n	800e128 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	885b      	ldrh	r3, [r3, #2]
 800e162:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e166:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e16c:	fb02 f303 	mul.w	r3, r2, r3
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800e176:	4413      	add	r3, r2
 800e178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e17c:	2300      	movs	r3, #0
 800e17e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e182:	e011      	b.n	800e1a8 <arm_mat_inverse_f32+0x39a>
 800e184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e188:	1d1a      	adds	r2, r3, #4
 800e18a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800e18e:	ed93 7a00 	vldr	s14, [r3]
 800e192:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e19a:	edc3 7a00 	vstr	s15, [r3]
 800e19e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e1a8:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800e1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	dbe8      	blt.n	800e184 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800e1b8:	e0ae      	b.n	800e318 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	685a      	ldr	r2, [r3, #4]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	885b      	ldrh	r3, [r3, #2]
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e1c8:	fb03 f101 	mul.w	r1, r3, r1
 800e1cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e1d0:	440b      	add	r3, r1
 800e1d2:	009b      	lsls	r3, r3, #2
 800e1d4:	4413      	add	r3, r2
 800e1d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800e1da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	885b      	ldrh	r3, [r3, #2]
 800e1f8:	617b      	str	r3, [r7, #20]
 800e1fa:	697a      	ldr	r2, [r7, #20]
 800e1fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	613b      	str	r3, [r7, #16]
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e20a:	fb03 f202 	mul.w	r2, r3, r2
 800e20e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e212:	4413      	add	r3, r2
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e21a:	4413      	add	r3, r2
 800e21c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e220:	697b      	ldr	r3, [r7, #20]
 800e222:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e224:	fb03 f202 	mul.w	r2, r3, r2
 800e228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e22c:	4413      	add	r3, r2
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800e234:	4413      	add	r3, r2
 800e236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e23a:	2300      	movs	r3, #0
 800e23c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e240:	e01a      	b.n	800e278 <arm_mat_inverse_f32+0x46a>
 800e242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e246:	1d1a      	adds	r2, r3, #4
 800e248:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800e24c:	ed93 7a00 	vldr	s14, [r3]
 800e250:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e254:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e258:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e25c:	1d1a      	adds	r2, r3, #4
 800e25e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800e262:	ed93 7a00 	vldr	s14, [r3]
 800e266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e26a:	edc3 7a00 	vstr	s15, [r3]
 800e26e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800e272:	3301      	adds	r3, #1
 800e274:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800e278:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800e27c:	693b      	ldr	r3, [r7, #16]
 800e27e:	429a      	cmp	r2, r3
 800e280:	dbdf      	blt.n	800e242 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e28a:	683b      	ldr	r3, [r7, #0]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	885b      	ldrh	r3, [r3, #2]
 800e296:	60fb      	str	r3, [r7, #12]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	60bb      	str	r3, [r7, #8]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e2a2:	fb02 f303 	mul.w	r3, r2, r3
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e2ac:	4413      	add	r3, r2
 800e2ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e2b6:	fb02 f303 	mul.w	r3, r2, r3
 800e2ba:	009b      	lsls	r3, r3, #2
 800e2bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800e2c0:	4413      	add	r3, r2
 800e2c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e2cc:	e01a      	b.n	800e304 <arm_mat_inverse_f32+0x4f6>
 800e2ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e2d2:	1d1a      	adds	r2, r3, #4
 800e2d4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800e2d8:	ed93 7a00 	vldr	s14, [r3]
 800e2dc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e2e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e2e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e2e8:	1d1a      	adds	r2, r3, #4
 800e2ea:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800e2ee:	ed93 7a00 	vldr	s14, [r3]
 800e2f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2f6:	edc3 7a00 	vstr	s15, [r3]
 800e2fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e2fe:	3301      	adds	r3, #1
 800e300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800e304:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	429a      	cmp	r2, r3
 800e30c:	dbdf      	blt.n	800e2ce <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800e30e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e312:	3301      	adds	r3, #1
 800e314:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e318:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e31c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e31e:	429a      	cmp	r2, r3
 800e320:	f4ff af4b 	bcc.w	800e1ba <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800e324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e326:	3301      	adds	r3, #1
 800e328:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e32c:	e092      	b.n	800e454 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	685a      	ldr	r2, [r3, #4]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	885b      	ldrh	r3, [r3, #2]
 800e336:	4619      	mov	r1, r3
 800e338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e33c:	fb03 f101 	mul.w	r1, r3, r1
 800e340:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e344:	440b      	add	r3, r1
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4413      	add	r3, r2
 800e34a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800e34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	677b      	str	r3, [r7, #116]	@ 0x74
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	885b      	ldrh	r3, [r3, #2]
 800e368:	627b      	str	r3, [r7, #36]	@ 0x24
 800e36a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e36c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e370:	1ad3      	subs	r3, r2, r3
 800e372:	623b      	str	r3, [r7, #32]
 800e374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e376:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e37a:	fb03 f202 	mul.w	r2, r3, r2
 800e37e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e382:	4413      	add	r3, r2
 800e384:	009b      	lsls	r3, r3, #2
 800e386:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800e388:	4413      	add	r3, r2
 800e38a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e390:	fb03 f202 	mul.w	r2, r3, r2
 800e394:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e398:	4413      	add	r3, r2
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800e39e:	4413      	add	r3, r2
 800e3a0:	677b      	str	r3, [r7, #116]	@ 0x74
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e3a6:	e014      	b.n	800e3d2 <arm_mat_inverse_f32+0x5c4>
 800e3a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e3aa:	1d1a      	adds	r2, r3, #4
 800e3ac:	677a      	str	r2, [r7, #116]	@ 0x74
 800e3ae:	ed93 7a00 	vldr	s14, [r3]
 800e3b2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e3bc:	1d1a      	adds	r2, r3, #4
 800e3be:	67ba      	str	r2, [r7, #120]	@ 0x78
 800e3c0:	ed93 7a00 	vldr	s14, [r3]
 800e3c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3c8:	edc3 7a00 	vstr	s15, [r3]
 800e3cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e3d2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e3d4:	6a3b      	ldr	r3, [r7, #32]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	dbe6      	blt.n	800e3a8 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	685b      	ldr	r3, [r3, #4]
 800e3de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e3e0:	683b      	ldr	r3, [r7, #0]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	885b      	ldrh	r3, [r3, #2]
 800e3ea:	61fb      	str	r3, [r7, #28]
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	61bb      	str	r3, [r7, #24]
 800e3f0:	69fb      	ldr	r3, [r7, #28]
 800e3f2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e3f6:	fb02 f303 	mul.w	r3, r2, r3
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800e3fe:	4413      	add	r3, r2
 800e400:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e406:	fb02 f303 	mul.w	r3, r2, r3
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800e40e:	4413      	add	r3, r2
 800e410:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e412:	2300      	movs	r3, #0
 800e414:	673b      	str	r3, [r7, #112]	@ 0x70
 800e416:	e014      	b.n	800e442 <arm_mat_inverse_f32+0x634>
 800e418:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e41a:	1d1a      	adds	r2, r3, #4
 800e41c:	66ba      	str	r2, [r7, #104]	@ 0x68
 800e41e:	ed93 7a00 	vldr	s14, [r3]
 800e422:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e42a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e42c:	1d1a      	adds	r2, r3, #4
 800e42e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800e430:	ed93 7a00 	vldr	s14, [r3]
 800e434:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e438:	edc3 7a00 	vstr	s15, [r3]
 800e43c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e43e:	3301      	adds	r3, #1
 800e440:	673b      	str	r3, [r7, #112]	@ 0x70
 800e442:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	429a      	cmp	r2, r3
 800e448:	dbe6      	blt.n	800e418 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800e44a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e44e:	3301      	adds	r3, #1
 800e450:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e454:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800e458:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e45a:	429a      	cmp	r2, r3
 800e45c:	f4ff af67 	bcc.w	800e32e <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800e460:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e464:	3301      	adds	r3, #1
 800e466:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e46a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800e46e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e470:	429a      	cmp	r2, r3
 800e472:	f4ff ad32 	bcc.w	800deda <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e476:	2300      	movs	r3, #0
 800e478:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800e47c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e480:	2b01      	cmp	r3, #1
 800e482:	d033      	beq.n	800e4ec <arm_mat_inverse_f32+0x6de>
 800e484:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800e488:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e48c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e490:	d12c      	bne.n	800e4ec <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800e498:	2300      	movs	r3, #0
 800e49a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e49e:	e010      	b.n	800e4c2 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800e4a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800e4a8:	4413      	add	r3, r2
 800e4aa:	edd3 7a00 	vldr	s15, [r3]
 800e4ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b6:	d10d      	bne.n	800e4d4 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800e4b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e4bc:	3301      	adds	r3, #1
 800e4be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e4c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4c6:	fb02 f303 	mul.w	r3, r2, r3
 800e4ca:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d3e6      	bcc.n	800e4a0 <arm_mat_inverse_f32+0x692>
 800e4d2:	e000      	b.n	800e4d6 <arm_mat_inverse_f32+0x6c8>
            break;
 800e4d4:	bf00      	nop
      }

      if (i == numRows * numCols)
 800e4d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e4da:	fb02 f303 	mul.w	r3, r2, r3
 800e4de:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	d102      	bne.n	800e4ec <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800e4e6:	23fb      	movs	r3, #251	@ 0xfb
 800e4e8:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800e4ec:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	37ec      	adds	r7, #236	@ 0xec
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b093      	sub	sp, #76	@ 0x4c
 800e500:	af00      	add	r7, sp, #0
 800e502:	60f8      	str	r0, [r7, #12]
 800e504:	60b9      	str	r1, [r7, #8]
 800e506:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	685b      	ldr	r3, [r3, #4]
 800e512:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	685b      	ldr	r3, [r3, #4]
 800e518:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	685b      	ldr	r3, [r3, #4]
 800e51e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	881b      	ldrh	r3, [r3, #0]
 800e52a:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	885b      	ldrh	r3, [r3, #2]
 800e530:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	885b      	ldrh	r3, [r3, #2]
 800e536:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800e538:	2300      	movs	r3, #0
 800e53a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e53c:	8b7b      	ldrh	r3, [r7, #26]
 800e53e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800e540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	69fa      	ldr	r2, [r7, #28]
 800e546:	4413      	add	r3, r2
 800e548:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800e54a:	8b3b      	ldrh	r3, [r7, #24]
 800e54c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	685b      	ldr	r3, [r3, #4]
 800e552:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800e554:	f04f 0300 	mov.w	r3, #0
 800e558:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800e55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e55c:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800e55e:	8afb      	ldrh	r3, [r7, #22]
 800e560:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800e562:	e017      	b.n	800e594 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800e564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e566:	1d1a      	adds	r2, r3, #4
 800e568:	647a      	str	r2, [r7, #68]	@ 0x44
 800e56a:	ed93 7a00 	vldr	s14, [r3]
 800e56e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e570:	edd3 7a00 	vldr	s15, [r3]
 800e574:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e578:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800e57c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e580:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800e584:	8b3b      	ldrh	r3, [r7, #24]
 800e586:	009b      	lsls	r3, r3, #2
 800e588:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e58a:	4413      	add	r3, r2
 800e58c:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800e58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e590:	3b01      	subs	r3, #1
 800e592:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800e594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e596:	2b00      	cmp	r3, #0
 800e598:	d1e4      	bne.n	800e564 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800e59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e59c:	1d1a      	adds	r2, r3, #4
 800e59e:	63ba      	str	r2, [r7, #56]	@ 0x38
 800e5a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e5a2:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800e5a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5a6:	3b01      	subs	r3, #1
 800e5a8:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800e5aa:	8b3a      	ldrh	r2, [r7, #24]
 800e5ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ae:	1ad3      	subs	r3, r2, r3
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	6a3a      	ldr	r2, [r7, #32]
 800e5b4:	4413      	add	r3, r2
 800e5b6:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800e5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d1ca      	bne.n	800e554 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800e5be:	8b3b      	ldrh	r3, [r7, #24]
 800e5c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5c2:	4413      	add	r3, r2
 800e5c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800e5c6:	8afb      	ldrh	r3, [r7, #22]
 800e5c8:	009b      	lsls	r3, r3, #2
 800e5ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e5cc:	4413      	add	r3, r2
 800e5ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800e5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5d2:	3b01      	subs	r3, #1
 800e5d4:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800e5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d1b1      	bne.n	800e540 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800e5e0:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	374c      	adds	r7, #76	@ 0x4c
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b08b      	sub	sp, #44	@ 0x2c
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	ed87 0a02 	vstr	s0, [r7, #8]
 800e5fc:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	881b      	ldrh	r3, [r3, #0]
 800e60e:	461a      	mov	r2, r3
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	885b      	ldrh	r3, [r3, #2]
 800e614:	fb02 f303 	mul.w	r3, r2, r3
 800e618:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800e61e:	e010      	b.n	800e642 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800e620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e622:	1d1a      	adds	r2, r3, #4
 800e624:	627a      	str	r2, [r7, #36]	@ 0x24
 800e626:	ed93 7a00 	vldr	s14, [r3]
 800e62a:	6a3b      	ldr	r3, [r7, #32]
 800e62c:	1d1a      	adds	r2, r3, #4
 800e62e:	623a      	str	r2, [r7, #32]
 800e630:	edd7 7a02 	vldr	s15, [r7, #8]
 800e634:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e638:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800e63c:	69fb      	ldr	r3, [r7, #28]
 800e63e:	3b01      	subs	r3, #1
 800e640:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d1eb      	bne.n	800e620 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e648:	2300      	movs	r3, #0
 800e64a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800e64c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e650:	4618      	mov	r0, r3
 800e652:	372c      	adds	r7, #44	@ 0x2c
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b08b      	sub	sp, #44	@ 0x2c
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	685b      	ldr	r3, [r3, #4]
 800e66c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	881b      	ldrh	r3, [r3, #0]
 800e67e:	461a      	mov	r2, r3
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	885b      	ldrh	r3, [r3, #2]
 800e684:	fb02 f303 	mul.w	r3, r2, r3
 800e688:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800e68e:	e013      	b.n	800e6b8 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800e690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e692:	1d1a      	adds	r2, r3, #4
 800e694:	627a      	str	r2, [r7, #36]	@ 0x24
 800e696:	ed93 7a00 	vldr	s14, [r3]
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	1d1a      	adds	r2, r3, #4
 800e69e:	623a      	str	r2, [r7, #32]
 800e6a0:	edd3 7a00 	vldr	s15, [r3]
 800e6a4:	69fb      	ldr	r3, [r7, #28]
 800e6a6:	1d1a      	adds	r2, r3, #4
 800e6a8:	61fa      	str	r2, [r7, #28]
 800e6aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e6ae:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d1e8      	bne.n	800e690 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800e6c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	372c      	adds	r7, #44	@ 0x2c
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d0:	4770      	bx	lr

0800e6d2 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800e6d2:	b480      	push	{r7}
 800e6d4:	b08b      	sub	sp, #44	@ 0x2c
 800e6d6:	af00      	add	r7, sp, #0
 800e6d8:	6078      	str	r0, [r7, #4]
 800e6da:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	685b      	ldr	r3, [r3, #4]
 800e6e0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	685b      	ldr	r3, [r3, #4]
 800e6e6:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	885b      	ldrh	r3, [r3, #2]
 800e6f2:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800e6f4:	89fb      	ldrh	r3, [r7, #14]
 800e6f6:	61bb      	str	r3, [r7, #24]
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	693a      	ldr	r2, [r7, #16]
 800e702:	4413      	add	r3, r2
 800e704:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800e706:	89bb      	ldrh	r3, [r7, #12]
 800e708:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800e70a:	e00d      	b.n	800e728 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800e70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e70e:	1d1a      	adds	r2, r3, #4
 800e710:	627a      	str	r2, [r7, #36]	@ 0x24
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	6a3b      	ldr	r3, [r7, #32]
 800e716:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800e718:	89fb      	ldrh	r3, [r7, #14]
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	6a3a      	ldr	r2, [r7, #32]
 800e71e:	4413      	add	r3, r2
 800e720:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800e722:	69fb      	ldr	r3, [r7, #28]
 800e724:	3b01      	subs	r3, #1
 800e726:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800e728:	69fb      	ldr	r3, [r7, #28]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1ee      	bne.n	800e70c <arm_mat_trans_f32+0x3a>
      }

      i++;
 800e72e:	697b      	ldr	r3, [r7, #20]
 800e730:	3301      	adds	r3, #1
 800e732:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800e734:	69bb      	ldr	r3, [r7, #24]
 800e736:	3b01      	subs	r3, #1
 800e738:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800e73a:	69bb      	ldr	r3, [r7, #24]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1dd      	bne.n	800e6fc <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e740:	2300      	movs	r3, #0
 800e742:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800e744:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	372c      	adds	r7, #44	@ 0x2c
 800e74c:	46bd      	mov	sp, r7
 800e74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e752:	4770      	bx	lr

0800e754 <malloc>:
 800e754:	4b02      	ldr	r3, [pc, #8]	@ (800e760 <malloc+0xc>)
 800e756:	4601      	mov	r1, r0
 800e758:	6818      	ldr	r0, [r3, #0]
 800e75a:	f000 b825 	b.w	800e7a8 <_malloc_r>
 800e75e:	bf00      	nop
 800e760:	200003a0 	.word	0x200003a0

0800e764 <sbrk_aligned>:
 800e764:	b570      	push	{r4, r5, r6, lr}
 800e766:	4e0f      	ldr	r6, [pc, #60]	@ (800e7a4 <sbrk_aligned+0x40>)
 800e768:	460c      	mov	r4, r1
 800e76a:	6831      	ldr	r1, [r6, #0]
 800e76c:	4605      	mov	r5, r0
 800e76e:	b911      	cbnz	r1, 800e776 <sbrk_aligned+0x12>
 800e770:	f000 f8ae 	bl	800e8d0 <_sbrk_r>
 800e774:	6030      	str	r0, [r6, #0]
 800e776:	4621      	mov	r1, r4
 800e778:	4628      	mov	r0, r5
 800e77a:	f000 f8a9 	bl	800e8d0 <_sbrk_r>
 800e77e:	1c43      	adds	r3, r0, #1
 800e780:	d103      	bne.n	800e78a <sbrk_aligned+0x26>
 800e782:	f04f 34ff 	mov.w	r4, #4294967295
 800e786:	4620      	mov	r0, r4
 800e788:	bd70      	pop	{r4, r5, r6, pc}
 800e78a:	1cc4      	adds	r4, r0, #3
 800e78c:	f024 0403 	bic.w	r4, r4, #3
 800e790:	42a0      	cmp	r0, r4
 800e792:	d0f8      	beq.n	800e786 <sbrk_aligned+0x22>
 800e794:	1a21      	subs	r1, r4, r0
 800e796:	4628      	mov	r0, r5
 800e798:	f000 f89a 	bl	800e8d0 <_sbrk_r>
 800e79c:	3001      	adds	r0, #1
 800e79e:	d1f2      	bne.n	800e786 <sbrk_aligned+0x22>
 800e7a0:	e7ef      	b.n	800e782 <sbrk_aligned+0x1e>
 800e7a2:	bf00      	nop
 800e7a4:	200020a0 	.word	0x200020a0

0800e7a8 <_malloc_r>:
 800e7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7ac:	1ccd      	adds	r5, r1, #3
 800e7ae:	f025 0503 	bic.w	r5, r5, #3
 800e7b2:	3508      	adds	r5, #8
 800e7b4:	2d0c      	cmp	r5, #12
 800e7b6:	bf38      	it	cc
 800e7b8:	250c      	movcc	r5, #12
 800e7ba:	2d00      	cmp	r5, #0
 800e7bc:	4606      	mov	r6, r0
 800e7be:	db01      	blt.n	800e7c4 <_malloc_r+0x1c>
 800e7c0:	42a9      	cmp	r1, r5
 800e7c2:	d904      	bls.n	800e7ce <_malloc_r+0x26>
 800e7c4:	230c      	movs	r3, #12
 800e7c6:	6033      	str	r3, [r6, #0]
 800e7c8:	2000      	movs	r0, #0
 800e7ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e7ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e8a4 <_malloc_r+0xfc>
 800e7d2:	f000 f869 	bl	800e8a8 <__malloc_lock>
 800e7d6:	f8d8 3000 	ldr.w	r3, [r8]
 800e7da:	461c      	mov	r4, r3
 800e7dc:	bb44      	cbnz	r4, 800e830 <_malloc_r+0x88>
 800e7de:	4629      	mov	r1, r5
 800e7e0:	4630      	mov	r0, r6
 800e7e2:	f7ff ffbf 	bl	800e764 <sbrk_aligned>
 800e7e6:	1c43      	adds	r3, r0, #1
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	d158      	bne.n	800e89e <_malloc_r+0xf6>
 800e7ec:	f8d8 4000 	ldr.w	r4, [r8]
 800e7f0:	4627      	mov	r7, r4
 800e7f2:	2f00      	cmp	r7, #0
 800e7f4:	d143      	bne.n	800e87e <_malloc_r+0xd6>
 800e7f6:	2c00      	cmp	r4, #0
 800e7f8:	d04b      	beq.n	800e892 <_malloc_r+0xea>
 800e7fa:	6823      	ldr	r3, [r4, #0]
 800e7fc:	4639      	mov	r1, r7
 800e7fe:	4630      	mov	r0, r6
 800e800:	eb04 0903 	add.w	r9, r4, r3
 800e804:	f000 f864 	bl	800e8d0 <_sbrk_r>
 800e808:	4581      	cmp	r9, r0
 800e80a:	d142      	bne.n	800e892 <_malloc_r+0xea>
 800e80c:	6821      	ldr	r1, [r4, #0]
 800e80e:	1a6d      	subs	r5, r5, r1
 800e810:	4629      	mov	r1, r5
 800e812:	4630      	mov	r0, r6
 800e814:	f7ff ffa6 	bl	800e764 <sbrk_aligned>
 800e818:	3001      	adds	r0, #1
 800e81a:	d03a      	beq.n	800e892 <_malloc_r+0xea>
 800e81c:	6823      	ldr	r3, [r4, #0]
 800e81e:	442b      	add	r3, r5
 800e820:	6023      	str	r3, [r4, #0]
 800e822:	f8d8 3000 	ldr.w	r3, [r8]
 800e826:	685a      	ldr	r2, [r3, #4]
 800e828:	bb62      	cbnz	r2, 800e884 <_malloc_r+0xdc>
 800e82a:	f8c8 7000 	str.w	r7, [r8]
 800e82e:	e00f      	b.n	800e850 <_malloc_r+0xa8>
 800e830:	6822      	ldr	r2, [r4, #0]
 800e832:	1b52      	subs	r2, r2, r5
 800e834:	d420      	bmi.n	800e878 <_malloc_r+0xd0>
 800e836:	2a0b      	cmp	r2, #11
 800e838:	d917      	bls.n	800e86a <_malloc_r+0xc2>
 800e83a:	1961      	adds	r1, r4, r5
 800e83c:	42a3      	cmp	r3, r4
 800e83e:	6025      	str	r5, [r4, #0]
 800e840:	bf18      	it	ne
 800e842:	6059      	strne	r1, [r3, #4]
 800e844:	6863      	ldr	r3, [r4, #4]
 800e846:	bf08      	it	eq
 800e848:	f8c8 1000 	streq.w	r1, [r8]
 800e84c:	5162      	str	r2, [r4, r5]
 800e84e:	604b      	str	r3, [r1, #4]
 800e850:	4630      	mov	r0, r6
 800e852:	f000 f82f 	bl	800e8b4 <__malloc_unlock>
 800e856:	f104 000b 	add.w	r0, r4, #11
 800e85a:	1d23      	adds	r3, r4, #4
 800e85c:	f020 0007 	bic.w	r0, r0, #7
 800e860:	1ac2      	subs	r2, r0, r3
 800e862:	bf1c      	itt	ne
 800e864:	1a1b      	subne	r3, r3, r0
 800e866:	50a3      	strne	r3, [r4, r2]
 800e868:	e7af      	b.n	800e7ca <_malloc_r+0x22>
 800e86a:	6862      	ldr	r2, [r4, #4]
 800e86c:	42a3      	cmp	r3, r4
 800e86e:	bf0c      	ite	eq
 800e870:	f8c8 2000 	streq.w	r2, [r8]
 800e874:	605a      	strne	r2, [r3, #4]
 800e876:	e7eb      	b.n	800e850 <_malloc_r+0xa8>
 800e878:	4623      	mov	r3, r4
 800e87a:	6864      	ldr	r4, [r4, #4]
 800e87c:	e7ae      	b.n	800e7dc <_malloc_r+0x34>
 800e87e:	463c      	mov	r4, r7
 800e880:	687f      	ldr	r7, [r7, #4]
 800e882:	e7b6      	b.n	800e7f2 <_malloc_r+0x4a>
 800e884:	461a      	mov	r2, r3
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	42a3      	cmp	r3, r4
 800e88a:	d1fb      	bne.n	800e884 <_malloc_r+0xdc>
 800e88c:	2300      	movs	r3, #0
 800e88e:	6053      	str	r3, [r2, #4]
 800e890:	e7de      	b.n	800e850 <_malloc_r+0xa8>
 800e892:	230c      	movs	r3, #12
 800e894:	6033      	str	r3, [r6, #0]
 800e896:	4630      	mov	r0, r6
 800e898:	f000 f80c 	bl	800e8b4 <__malloc_unlock>
 800e89c:	e794      	b.n	800e7c8 <_malloc_r+0x20>
 800e89e:	6005      	str	r5, [r0, #0]
 800e8a0:	e7d6      	b.n	800e850 <_malloc_r+0xa8>
 800e8a2:	bf00      	nop
 800e8a4:	200020a4 	.word	0x200020a4

0800e8a8 <__malloc_lock>:
 800e8a8:	4801      	ldr	r0, [pc, #4]	@ (800e8b0 <__malloc_lock+0x8>)
 800e8aa:	f000 b84b 	b.w	800e944 <__retarget_lock_acquire_recursive>
 800e8ae:	bf00      	nop
 800e8b0:	200021e4 	.word	0x200021e4

0800e8b4 <__malloc_unlock>:
 800e8b4:	4801      	ldr	r0, [pc, #4]	@ (800e8bc <__malloc_unlock+0x8>)
 800e8b6:	f000 b846 	b.w	800e946 <__retarget_lock_release_recursive>
 800e8ba:	bf00      	nop
 800e8bc:	200021e4 	.word	0x200021e4

0800e8c0 <memset>:
 800e8c0:	4402      	add	r2, r0
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d100      	bne.n	800e8ca <memset+0xa>
 800e8c8:	4770      	bx	lr
 800e8ca:	f803 1b01 	strb.w	r1, [r3], #1
 800e8ce:	e7f9      	b.n	800e8c4 <memset+0x4>

0800e8d0 <_sbrk_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4d06      	ldr	r5, [pc, #24]	@ (800e8ec <_sbrk_r+0x1c>)
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	602b      	str	r3, [r5, #0]
 800e8dc:	f7f7 f868 	bl	80059b0 <_sbrk>
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	d102      	bne.n	800e8ea <_sbrk_r+0x1a>
 800e8e4:	682b      	ldr	r3, [r5, #0]
 800e8e6:	b103      	cbz	r3, 800e8ea <_sbrk_r+0x1a>
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	bd38      	pop	{r3, r4, r5, pc}
 800e8ec:	200021e0 	.word	0x200021e0

0800e8f0 <__errno>:
 800e8f0:	4b01      	ldr	r3, [pc, #4]	@ (800e8f8 <__errno+0x8>)
 800e8f2:	6818      	ldr	r0, [r3, #0]
 800e8f4:	4770      	bx	lr
 800e8f6:	bf00      	nop
 800e8f8:	200003a0 	.word	0x200003a0

0800e8fc <__libc_init_array>:
 800e8fc:	b570      	push	{r4, r5, r6, lr}
 800e8fe:	4d0d      	ldr	r5, [pc, #52]	@ (800e934 <__libc_init_array+0x38>)
 800e900:	4c0d      	ldr	r4, [pc, #52]	@ (800e938 <__libc_init_array+0x3c>)
 800e902:	1b64      	subs	r4, r4, r5
 800e904:	10a4      	asrs	r4, r4, #2
 800e906:	2600      	movs	r6, #0
 800e908:	42a6      	cmp	r6, r4
 800e90a:	d109      	bne.n	800e920 <__libc_init_array+0x24>
 800e90c:	4d0b      	ldr	r5, [pc, #44]	@ (800e93c <__libc_init_array+0x40>)
 800e90e:	4c0c      	ldr	r4, [pc, #48]	@ (800e940 <__libc_init_array+0x44>)
 800e910:	f000 fe36 	bl	800f580 <_init>
 800e914:	1b64      	subs	r4, r4, r5
 800e916:	10a4      	asrs	r4, r4, #2
 800e918:	2600      	movs	r6, #0
 800e91a:	42a6      	cmp	r6, r4
 800e91c:	d105      	bne.n	800e92a <__libc_init_array+0x2e>
 800e91e:	bd70      	pop	{r4, r5, r6, pc}
 800e920:	f855 3b04 	ldr.w	r3, [r5], #4
 800e924:	4798      	blx	r3
 800e926:	3601      	adds	r6, #1
 800e928:	e7ee      	b.n	800e908 <__libc_init_array+0xc>
 800e92a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e92e:	4798      	blx	r3
 800e930:	3601      	adds	r6, #1
 800e932:	e7f2      	b.n	800e91a <__libc_init_array+0x1e>
 800e934:	0800f9f0 	.word	0x0800f9f0
 800e938:	0800f9f0 	.word	0x0800f9f0
 800e93c:	0800f9f0 	.word	0x0800f9f0
 800e940:	0800f9f4 	.word	0x0800f9f4

0800e944 <__retarget_lock_acquire_recursive>:
 800e944:	4770      	bx	lr

0800e946 <__retarget_lock_release_recursive>:
 800e946:	4770      	bx	lr

0800e948 <memcpy>:
 800e948:	440a      	add	r2, r1
 800e94a:	4291      	cmp	r1, r2
 800e94c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e950:	d100      	bne.n	800e954 <memcpy+0xc>
 800e952:	4770      	bx	lr
 800e954:	b510      	push	{r4, lr}
 800e956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e95a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e95e:	4291      	cmp	r1, r2
 800e960:	d1f9      	bne.n	800e956 <memcpy+0xe>
 800e962:	bd10      	pop	{r4, pc}

0800e964 <sqrtf>:
 800e964:	b508      	push	{r3, lr}
 800e966:	ed2d 8b02 	vpush	{d8}
 800e96a:	eeb0 8a40 	vmov.f32	s16, s0
 800e96e:	f000 f919 	bl	800eba4 <__ieee754_sqrtf>
 800e972:	eeb4 8a48 	vcmp.f32	s16, s16
 800e976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e97a:	d60c      	bvs.n	800e996 <sqrtf+0x32>
 800e97c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e99c <sqrtf+0x38>
 800e980:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e988:	d505      	bpl.n	800e996 <sqrtf+0x32>
 800e98a:	f7ff ffb1 	bl	800e8f0 <__errno>
 800e98e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e992:	2321      	movs	r3, #33	@ 0x21
 800e994:	6003      	str	r3, [r0, #0]
 800e996:	ecbd 8b02 	vpop	{d8}
 800e99a:	bd08      	pop	{r3, pc}
 800e99c:	00000000 	.word	0x00000000

0800e9a0 <cosf>:
 800e9a0:	ee10 3a10 	vmov	r3, s0
 800e9a4:	b507      	push	{r0, r1, r2, lr}
 800e9a6:	4a1e      	ldr	r2, [pc, #120]	@ (800ea20 <cosf+0x80>)
 800e9a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e9ac:	4293      	cmp	r3, r2
 800e9ae:	d806      	bhi.n	800e9be <cosf+0x1e>
 800e9b0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800ea24 <cosf+0x84>
 800e9b4:	b003      	add	sp, #12
 800e9b6:	f85d eb04 	ldr.w	lr, [sp], #4
 800e9ba:	f000 b8f7 	b.w	800ebac <__kernel_cosf>
 800e9be:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e9c2:	d304      	bcc.n	800e9ce <cosf+0x2e>
 800e9c4:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e9c8:	b003      	add	sp, #12
 800e9ca:	f85d fb04 	ldr.w	pc, [sp], #4
 800e9ce:	4668      	mov	r0, sp
 800e9d0:	f000 f98c 	bl	800ecec <__ieee754_rem_pio2f>
 800e9d4:	f000 0003 	and.w	r0, r0, #3
 800e9d8:	2801      	cmp	r0, #1
 800e9da:	d009      	beq.n	800e9f0 <cosf+0x50>
 800e9dc:	2802      	cmp	r0, #2
 800e9de:	d010      	beq.n	800ea02 <cosf+0x62>
 800e9e0:	b9b0      	cbnz	r0, 800ea10 <cosf+0x70>
 800e9e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800e9e6:	ed9d 0a00 	vldr	s0, [sp]
 800e9ea:	f000 f8df 	bl	800ebac <__kernel_cosf>
 800e9ee:	e7eb      	b.n	800e9c8 <cosf+0x28>
 800e9f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800e9f4:	ed9d 0a00 	vldr	s0, [sp]
 800e9f8:	f000 f930 	bl	800ec5c <__kernel_sinf>
 800e9fc:	eeb1 0a40 	vneg.f32	s0, s0
 800ea00:	e7e2      	b.n	800e9c8 <cosf+0x28>
 800ea02:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea06:	ed9d 0a00 	vldr	s0, [sp]
 800ea0a:	f000 f8cf 	bl	800ebac <__kernel_cosf>
 800ea0e:	e7f5      	b.n	800e9fc <cosf+0x5c>
 800ea10:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea14:	ed9d 0a00 	vldr	s0, [sp]
 800ea18:	2001      	movs	r0, #1
 800ea1a:	f000 f91f 	bl	800ec5c <__kernel_sinf>
 800ea1e:	e7d3      	b.n	800e9c8 <cosf+0x28>
 800ea20:	3f490fd8 	.word	0x3f490fd8
 800ea24:	00000000 	.word	0x00000000

0800ea28 <sinf>:
 800ea28:	ee10 3a10 	vmov	r3, s0
 800ea2c:	b507      	push	{r0, r1, r2, lr}
 800ea2e:	4a1f      	ldr	r2, [pc, #124]	@ (800eaac <sinf+0x84>)
 800ea30:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d807      	bhi.n	800ea48 <sinf+0x20>
 800ea38:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800eab0 <sinf+0x88>
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	b003      	add	sp, #12
 800ea40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea44:	f000 b90a 	b.w	800ec5c <__kernel_sinf>
 800ea48:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ea4c:	d304      	bcc.n	800ea58 <sinf+0x30>
 800ea4e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ea52:	b003      	add	sp, #12
 800ea54:	f85d fb04 	ldr.w	pc, [sp], #4
 800ea58:	4668      	mov	r0, sp
 800ea5a:	f000 f947 	bl	800ecec <__ieee754_rem_pio2f>
 800ea5e:	f000 0003 	and.w	r0, r0, #3
 800ea62:	2801      	cmp	r0, #1
 800ea64:	d00a      	beq.n	800ea7c <sinf+0x54>
 800ea66:	2802      	cmp	r0, #2
 800ea68:	d00f      	beq.n	800ea8a <sinf+0x62>
 800ea6a:	b9c0      	cbnz	r0, 800ea9e <sinf+0x76>
 800ea6c:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea70:	ed9d 0a00 	vldr	s0, [sp]
 800ea74:	2001      	movs	r0, #1
 800ea76:	f000 f8f1 	bl	800ec5c <__kernel_sinf>
 800ea7a:	e7ea      	b.n	800ea52 <sinf+0x2a>
 800ea7c:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea80:	ed9d 0a00 	vldr	s0, [sp]
 800ea84:	f000 f892 	bl	800ebac <__kernel_cosf>
 800ea88:	e7e3      	b.n	800ea52 <sinf+0x2a>
 800ea8a:	eddd 0a01 	vldr	s1, [sp, #4]
 800ea8e:	ed9d 0a00 	vldr	s0, [sp]
 800ea92:	2001      	movs	r0, #1
 800ea94:	f000 f8e2 	bl	800ec5c <__kernel_sinf>
 800ea98:	eeb1 0a40 	vneg.f32	s0, s0
 800ea9c:	e7d9      	b.n	800ea52 <sinf+0x2a>
 800ea9e:	eddd 0a01 	vldr	s1, [sp, #4]
 800eaa2:	ed9d 0a00 	vldr	s0, [sp]
 800eaa6:	f000 f881 	bl	800ebac <__kernel_cosf>
 800eaaa:	e7f5      	b.n	800ea98 <sinf+0x70>
 800eaac:	3f490fd8 	.word	0x3f490fd8
 800eab0:	00000000 	.word	0x00000000

0800eab4 <fmax>:
 800eab4:	b508      	push	{r3, lr}
 800eab6:	ed2d 8b04 	vpush	{d8-d9}
 800eaba:	eeb0 8a40 	vmov.f32	s16, s0
 800eabe:	eef0 8a60 	vmov.f32	s17, s1
 800eac2:	eeb0 9a41 	vmov.f32	s18, s2
 800eac6:	eef0 9a61 	vmov.f32	s19, s3
 800eaca:	f000 f847 	bl	800eb5c <__fpclassifyd>
 800eace:	b950      	cbnz	r0, 800eae6 <fmax+0x32>
 800ead0:	eeb0 8a49 	vmov.f32	s16, s18
 800ead4:	eef0 8a69 	vmov.f32	s17, s19
 800ead8:	eeb0 0a48 	vmov.f32	s0, s16
 800eadc:	eef0 0a68 	vmov.f32	s1, s17
 800eae0:	ecbd 8b04 	vpop	{d8-d9}
 800eae4:	bd08      	pop	{r3, pc}
 800eae6:	eeb0 0a49 	vmov.f32	s0, s18
 800eaea:	eef0 0a69 	vmov.f32	s1, s19
 800eaee:	f000 f835 	bl	800eb5c <__fpclassifyd>
 800eaf2:	2800      	cmp	r0, #0
 800eaf4:	d0f0      	beq.n	800ead8 <fmax+0x24>
 800eaf6:	ec53 2b19 	vmov	r2, r3, d9
 800eafa:	ec51 0b18 	vmov	r0, r1, d8
 800eafe:	f7f1 ffd7 	bl	8000ab0 <__aeabi_dcmpgt>
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d0e4      	beq.n	800ead0 <fmax+0x1c>
 800eb06:	e7e7      	b.n	800ead8 <fmax+0x24>

0800eb08 <fmin>:
 800eb08:	b508      	push	{r3, lr}
 800eb0a:	ed2d 8b04 	vpush	{d8-d9}
 800eb0e:	eeb0 8a40 	vmov.f32	s16, s0
 800eb12:	eef0 8a60 	vmov.f32	s17, s1
 800eb16:	eeb0 9a41 	vmov.f32	s18, s2
 800eb1a:	eef0 9a61 	vmov.f32	s19, s3
 800eb1e:	f000 f81d 	bl	800eb5c <__fpclassifyd>
 800eb22:	b950      	cbnz	r0, 800eb3a <fmin+0x32>
 800eb24:	eeb0 8a49 	vmov.f32	s16, s18
 800eb28:	eef0 8a69 	vmov.f32	s17, s19
 800eb2c:	eeb0 0a48 	vmov.f32	s0, s16
 800eb30:	eef0 0a68 	vmov.f32	s1, s17
 800eb34:	ecbd 8b04 	vpop	{d8-d9}
 800eb38:	bd08      	pop	{r3, pc}
 800eb3a:	eeb0 0a49 	vmov.f32	s0, s18
 800eb3e:	eef0 0a69 	vmov.f32	s1, s19
 800eb42:	f000 f80b 	bl	800eb5c <__fpclassifyd>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d0f0      	beq.n	800eb2c <fmin+0x24>
 800eb4a:	ec53 2b19 	vmov	r2, r3, d9
 800eb4e:	ec51 0b18 	vmov	r0, r1, d8
 800eb52:	f7f1 ff8f 	bl	8000a74 <__aeabi_dcmplt>
 800eb56:	2800      	cmp	r0, #0
 800eb58:	d0e4      	beq.n	800eb24 <fmin+0x1c>
 800eb5a:	e7e7      	b.n	800eb2c <fmin+0x24>

0800eb5c <__fpclassifyd>:
 800eb5c:	ec51 0b10 	vmov	r0, r1, d0
 800eb60:	460b      	mov	r3, r1
 800eb62:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 800eb66:	b510      	push	{r4, lr}
 800eb68:	d104      	bne.n	800eb74 <__fpclassifyd+0x18>
 800eb6a:	2800      	cmp	r0, #0
 800eb6c:	bf0c      	ite	eq
 800eb6e:	2002      	moveq	r0, #2
 800eb70:	2003      	movne	r0, #3
 800eb72:	bd10      	pop	{r4, pc}
 800eb74:	4a09      	ldr	r2, [pc, #36]	@ (800eb9c <__fpclassifyd+0x40>)
 800eb76:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 800eb7a:	4294      	cmp	r4, r2
 800eb7c:	d908      	bls.n	800eb90 <__fpclassifyd+0x34>
 800eb7e:	4a08      	ldr	r2, [pc, #32]	@ (800eba0 <__fpclassifyd+0x44>)
 800eb80:	4213      	tst	r3, r2
 800eb82:	d007      	beq.n	800eb94 <__fpclassifyd+0x38>
 800eb84:	4291      	cmp	r1, r2
 800eb86:	d107      	bne.n	800eb98 <__fpclassifyd+0x3c>
 800eb88:	fab0 f080 	clz	r0, r0
 800eb8c:	0940      	lsrs	r0, r0, #5
 800eb8e:	e7f0      	b.n	800eb72 <__fpclassifyd+0x16>
 800eb90:	2004      	movs	r0, #4
 800eb92:	e7ee      	b.n	800eb72 <__fpclassifyd+0x16>
 800eb94:	2003      	movs	r0, #3
 800eb96:	e7ec      	b.n	800eb72 <__fpclassifyd+0x16>
 800eb98:	2000      	movs	r0, #0
 800eb9a:	e7ea      	b.n	800eb72 <__fpclassifyd+0x16>
 800eb9c:	7fdfffff 	.word	0x7fdfffff
 800eba0:	7ff00000 	.word	0x7ff00000

0800eba4 <__ieee754_sqrtf>:
 800eba4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800eba8:	4770      	bx	lr
	...

0800ebac <__kernel_cosf>:
 800ebac:	ee10 3a10 	vmov	r3, s0
 800ebb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ebb4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ebb8:	eef0 6a40 	vmov.f32	s13, s0
 800ebbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ebc0:	d204      	bcs.n	800ebcc <__kernel_cosf+0x20>
 800ebc2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ebc6:	ee17 2a90 	vmov	r2, s15
 800ebca:	b342      	cbz	r2, 800ec1e <__kernel_cosf+0x72>
 800ebcc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ebd0:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ec3c <__kernel_cosf+0x90>
 800ebd4:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ec40 <__kernel_cosf+0x94>
 800ebd8:	4a1a      	ldr	r2, [pc, #104]	@ (800ec44 <__kernel_cosf+0x98>)
 800ebda:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ec48 <__kernel_cosf+0x9c>
 800ebe4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ebe8:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ec4c <__kernel_cosf+0xa0>
 800ebec:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ebf0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ec50 <__kernel_cosf+0xa4>
 800ebf4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ebf8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ec54 <__kernel_cosf+0xa8>
 800ebfc:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ec00:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ec04:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ec08:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ec0c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ec10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec14:	d804      	bhi.n	800ec20 <__kernel_cosf+0x74>
 800ec16:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ec1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ec1e:	4770      	bx	lr
 800ec20:	4a0d      	ldr	r2, [pc, #52]	@ (800ec58 <__kernel_cosf+0xac>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	bf9a      	itte	ls
 800ec26:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ec2a:	ee07 3a10 	vmovls	s14, r3
 800ec2e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ec32:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ec36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ec3a:	e7ec      	b.n	800ec16 <__kernel_cosf+0x6a>
 800ec3c:	ad47d74e 	.word	0xad47d74e
 800ec40:	310f74f6 	.word	0x310f74f6
 800ec44:	3e999999 	.word	0x3e999999
 800ec48:	b493f27c 	.word	0xb493f27c
 800ec4c:	37d00d01 	.word	0x37d00d01
 800ec50:	bab60b61 	.word	0xbab60b61
 800ec54:	3d2aaaab 	.word	0x3d2aaaab
 800ec58:	3f480000 	.word	0x3f480000

0800ec5c <__kernel_sinf>:
 800ec5c:	ee10 3a10 	vmov	r3, s0
 800ec60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ec64:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ec68:	d204      	bcs.n	800ec74 <__kernel_sinf+0x18>
 800ec6a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ec6e:	ee17 3a90 	vmov	r3, s15
 800ec72:	b35b      	cbz	r3, 800eccc <__kernel_sinf+0x70>
 800ec74:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ec78:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800ecd0 <__kernel_sinf+0x74>
 800ec7c:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800ecd4 <__kernel_sinf+0x78>
 800ec80:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ec84:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800ecd8 <__kernel_sinf+0x7c>
 800ec88:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ec8c:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800ecdc <__kernel_sinf+0x80>
 800ec90:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ec94:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800ece0 <__kernel_sinf+0x84>
 800ec98:	ee60 6a07 	vmul.f32	s13, s0, s14
 800ec9c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eca0:	b930      	cbnz	r0, 800ecb0 <__kernel_sinf+0x54>
 800eca2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ece4 <__kernel_sinf+0x88>
 800eca6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ecaa:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ecae:	4770      	bx	lr
 800ecb0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800ecb4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800ecb8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800ecbc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800ecc0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ece8 <__kernel_sinf+0x8c>
 800ecc4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ecc8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800eccc:	4770      	bx	lr
 800ecce:	bf00      	nop
 800ecd0:	2f2ec9d3 	.word	0x2f2ec9d3
 800ecd4:	b2d72f34 	.word	0xb2d72f34
 800ecd8:	3638ef1b 	.word	0x3638ef1b
 800ecdc:	b9500d01 	.word	0xb9500d01
 800ece0:	3c088889 	.word	0x3c088889
 800ece4:	be2aaaab 	.word	0xbe2aaaab
 800ece8:	3e2aaaab 	.word	0x3e2aaaab

0800ecec <__ieee754_rem_pio2f>:
 800ecec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecee:	ee10 6a10 	vmov	r6, s0
 800ecf2:	4b88      	ldr	r3, [pc, #544]	@ (800ef14 <__ieee754_rem_pio2f+0x228>)
 800ecf4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800ecf8:	429d      	cmp	r5, r3
 800ecfa:	b087      	sub	sp, #28
 800ecfc:	4604      	mov	r4, r0
 800ecfe:	d805      	bhi.n	800ed0c <__ieee754_rem_pio2f+0x20>
 800ed00:	2300      	movs	r3, #0
 800ed02:	ed80 0a00 	vstr	s0, [r0]
 800ed06:	6043      	str	r3, [r0, #4]
 800ed08:	2000      	movs	r0, #0
 800ed0a:	e022      	b.n	800ed52 <__ieee754_rem_pio2f+0x66>
 800ed0c:	4b82      	ldr	r3, [pc, #520]	@ (800ef18 <__ieee754_rem_pio2f+0x22c>)
 800ed0e:	429d      	cmp	r5, r3
 800ed10:	d83a      	bhi.n	800ed88 <__ieee754_rem_pio2f+0x9c>
 800ed12:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ed16:	2e00      	cmp	r6, #0
 800ed18:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800ef1c <__ieee754_rem_pio2f+0x230>
 800ed1c:	4a80      	ldr	r2, [pc, #512]	@ (800ef20 <__ieee754_rem_pio2f+0x234>)
 800ed1e:	f023 030f 	bic.w	r3, r3, #15
 800ed22:	dd18      	ble.n	800ed56 <__ieee754_rem_pio2f+0x6a>
 800ed24:	4293      	cmp	r3, r2
 800ed26:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ed2a:	bf09      	itett	eq
 800ed2c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800ef24 <__ieee754_rem_pio2f+0x238>
 800ed30:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800ef28 <__ieee754_rem_pio2f+0x23c>
 800ed34:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800ef2c <__ieee754_rem_pio2f+0x240>
 800ed38:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ed3c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800ed40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed44:	ed80 7a00 	vstr	s14, [r0]
 800ed48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ed4c:	edc0 7a01 	vstr	s15, [r0, #4]
 800ed50:	2001      	movs	r0, #1
 800ed52:	b007      	add	sp, #28
 800ed54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed56:	4293      	cmp	r3, r2
 800ed58:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ed5c:	bf09      	itett	eq
 800ed5e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800ef24 <__ieee754_rem_pio2f+0x238>
 800ed62:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800ef28 <__ieee754_rem_pio2f+0x23c>
 800ed66:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800ef2c <__ieee754_rem_pio2f+0x240>
 800ed6a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ed6e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ed72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed76:	ed80 7a00 	vstr	s14, [r0]
 800ed7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ed7e:	edc0 7a01 	vstr	s15, [r0, #4]
 800ed82:	f04f 30ff 	mov.w	r0, #4294967295
 800ed86:	e7e4      	b.n	800ed52 <__ieee754_rem_pio2f+0x66>
 800ed88:	4b69      	ldr	r3, [pc, #420]	@ (800ef30 <__ieee754_rem_pio2f+0x244>)
 800ed8a:	429d      	cmp	r5, r3
 800ed8c:	d873      	bhi.n	800ee76 <__ieee754_rem_pio2f+0x18a>
 800ed8e:	f000 f8dd 	bl	800ef4c <fabsf>
 800ed92:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800ef34 <__ieee754_rem_pio2f+0x248>
 800ed96:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ed9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ed9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800eda2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eda6:	ee17 0a90 	vmov	r0, s15
 800edaa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ef1c <__ieee754_rem_pio2f+0x230>
 800edae:	eea7 0a67 	vfms.f32	s0, s14, s15
 800edb2:	281f      	cmp	r0, #31
 800edb4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800ef28 <__ieee754_rem_pio2f+0x23c>
 800edb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edbc:	eeb1 6a47 	vneg.f32	s12, s14
 800edc0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800edc4:	ee16 1a90 	vmov	r1, s13
 800edc8:	dc09      	bgt.n	800edde <__ieee754_rem_pio2f+0xf2>
 800edca:	4a5b      	ldr	r2, [pc, #364]	@ (800ef38 <__ieee754_rem_pio2f+0x24c>)
 800edcc:	1e47      	subs	r7, r0, #1
 800edce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800edd2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800edd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800edda:	4293      	cmp	r3, r2
 800eddc:	d107      	bne.n	800edee <__ieee754_rem_pio2f+0x102>
 800edde:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800ede2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800ede6:	2a08      	cmp	r2, #8
 800ede8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800edec:	dc14      	bgt.n	800ee18 <__ieee754_rem_pio2f+0x12c>
 800edee:	6021      	str	r1, [r4, #0]
 800edf0:	ed94 7a00 	vldr	s14, [r4]
 800edf4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800edf8:	2e00      	cmp	r6, #0
 800edfa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800edfe:	ed84 0a01 	vstr	s0, [r4, #4]
 800ee02:	daa6      	bge.n	800ed52 <__ieee754_rem_pio2f+0x66>
 800ee04:	eeb1 7a47 	vneg.f32	s14, s14
 800ee08:	eeb1 0a40 	vneg.f32	s0, s0
 800ee0c:	ed84 7a00 	vstr	s14, [r4]
 800ee10:	ed84 0a01 	vstr	s0, [r4, #4]
 800ee14:	4240      	negs	r0, r0
 800ee16:	e79c      	b.n	800ed52 <__ieee754_rem_pio2f+0x66>
 800ee18:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800ef24 <__ieee754_rem_pio2f+0x238>
 800ee1c:	eef0 6a40 	vmov.f32	s13, s0
 800ee20:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ee24:	ee70 7a66 	vsub.f32	s15, s0, s13
 800ee28:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ee2c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800ef2c <__ieee754_rem_pio2f+0x240>
 800ee30:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ee34:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ee38:	ee15 2a90 	vmov	r2, s11
 800ee3c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ee40:	1a5b      	subs	r3, r3, r1
 800ee42:	2b19      	cmp	r3, #25
 800ee44:	dc04      	bgt.n	800ee50 <__ieee754_rem_pio2f+0x164>
 800ee46:	edc4 5a00 	vstr	s11, [r4]
 800ee4a:	eeb0 0a66 	vmov.f32	s0, s13
 800ee4e:	e7cf      	b.n	800edf0 <__ieee754_rem_pio2f+0x104>
 800ee50:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800ef3c <__ieee754_rem_pio2f+0x250>
 800ee54:	eeb0 0a66 	vmov.f32	s0, s13
 800ee58:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ee5c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ee60:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800ef40 <__ieee754_rem_pio2f+0x254>
 800ee64:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ee68:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800ee6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ee70:	ed84 7a00 	vstr	s14, [r4]
 800ee74:	e7bc      	b.n	800edf0 <__ieee754_rem_pio2f+0x104>
 800ee76:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800ee7a:	d306      	bcc.n	800ee8a <__ieee754_rem_pio2f+0x19e>
 800ee7c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ee80:	edc0 7a01 	vstr	s15, [r0, #4]
 800ee84:	edc0 7a00 	vstr	s15, [r0]
 800ee88:	e73e      	b.n	800ed08 <__ieee754_rem_pio2f+0x1c>
 800ee8a:	15ea      	asrs	r2, r5, #23
 800ee8c:	3a86      	subs	r2, #134	@ 0x86
 800ee8e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800ee92:	ee07 3a90 	vmov	s15, r3
 800ee96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ee9a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800ef44 <__ieee754_rem_pio2f+0x258>
 800ee9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eea2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eea6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800eeaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eeae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800eeb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800eeb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800eeba:	ed8d 7a04 	vstr	s14, [sp, #16]
 800eebe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800eec2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeca:	edcd 7a05 	vstr	s15, [sp, #20]
 800eece:	d11e      	bne.n	800ef0e <__ieee754_rem_pio2f+0x222>
 800eed0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed8:	bf0c      	ite	eq
 800eeda:	2301      	moveq	r3, #1
 800eedc:	2302      	movne	r3, #2
 800eede:	491a      	ldr	r1, [pc, #104]	@ (800ef48 <__ieee754_rem_pio2f+0x25c>)
 800eee0:	9101      	str	r1, [sp, #4]
 800eee2:	2102      	movs	r1, #2
 800eee4:	9100      	str	r1, [sp, #0]
 800eee6:	a803      	add	r0, sp, #12
 800eee8:	4621      	mov	r1, r4
 800eeea:	f000 f89d 	bl	800f028 <__kernel_rem_pio2f>
 800eeee:	2e00      	cmp	r6, #0
 800eef0:	f6bf af2f 	bge.w	800ed52 <__ieee754_rem_pio2f+0x66>
 800eef4:	edd4 7a00 	vldr	s15, [r4]
 800eef8:	eef1 7a67 	vneg.f32	s15, s15
 800eefc:	edc4 7a00 	vstr	s15, [r4]
 800ef00:	edd4 7a01 	vldr	s15, [r4, #4]
 800ef04:	eef1 7a67 	vneg.f32	s15, s15
 800ef08:	edc4 7a01 	vstr	s15, [r4, #4]
 800ef0c:	e782      	b.n	800ee14 <__ieee754_rem_pio2f+0x128>
 800ef0e:	2303      	movs	r3, #3
 800ef10:	e7e5      	b.n	800eede <__ieee754_rem_pio2f+0x1f2>
 800ef12:	bf00      	nop
 800ef14:	3f490fd8 	.word	0x3f490fd8
 800ef18:	4016cbe3 	.word	0x4016cbe3
 800ef1c:	3fc90f80 	.word	0x3fc90f80
 800ef20:	3fc90fd0 	.word	0x3fc90fd0
 800ef24:	37354400 	.word	0x37354400
 800ef28:	37354443 	.word	0x37354443
 800ef2c:	2e85a308 	.word	0x2e85a308
 800ef30:	43490f80 	.word	0x43490f80
 800ef34:	3f22f984 	.word	0x3f22f984
 800ef38:	0800f618 	.word	0x0800f618
 800ef3c:	2e85a300 	.word	0x2e85a300
 800ef40:	248d3132 	.word	0x248d3132
 800ef44:	43800000 	.word	0x43800000
 800ef48:	0800f698 	.word	0x0800f698

0800ef4c <fabsf>:
 800ef4c:	ee10 3a10 	vmov	r3, s0
 800ef50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ef54:	ee00 3a10 	vmov	s0, r3
 800ef58:	4770      	bx	lr
	...

0800ef5c <scalbnf>:
 800ef5c:	ee10 3a10 	vmov	r3, s0
 800ef60:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800ef64:	d02b      	beq.n	800efbe <scalbnf+0x62>
 800ef66:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ef6a:	d302      	bcc.n	800ef72 <scalbnf+0x16>
 800ef6c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ef70:	4770      	bx	lr
 800ef72:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800ef76:	d123      	bne.n	800efc0 <scalbnf+0x64>
 800ef78:	4b24      	ldr	r3, [pc, #144]	@ (800f00c <scalbnf+0xb0>)
 800ef7a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f010 <scalbnf+0xb4>
 800ef7e:	4298      	cmp	r0, r3
 800ef80:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ef84:	db17      	blt.n	800efb6 <scalbnf+0x5a>
 800ef86:	ee10 3a10 	vmov	r3, s0
 800ef8a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ef8e:	3a19      	subs	r2, #25
 800ef90:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800ef94:	4288      	cmp	r0, r1
 800ef96:	dd15      	ble.n	800efc4 <scalbnf+0x68>
 800ef98:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f014 <scalbnf+0xb8>
 800ef9c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f018 <scalbnf+0xbc>
 800efa0:	ee10 3a10 	vmov	r3, s0
 800efa4:	eeb0 7a67 	vmov.f32	s14, s15
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	bfb8      	it	lt
 800efac:	eef0 7a66 	vmovlt.f32	s15, s13
 800efb0:	ee27 0a87 	vmul.f32	s0, s15, s14
 800efb4:	4770      	bx	lr
 800efb6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f01c <scalbnf+0xc0>
 800efba:	ee27 0a80 	vmul.f32	s0, s15, s0
 800efbe:	4770      	bx	lr
 800efc0:	0dd2      	lsrs	r2, r2, #23
 800efc2:	e7e5      	b.n	800ef90 <scalbnf+0x34>
 800efc4:	4410      	add	r0, r2
 800efc6:	28fe      	cmp	r0, #254	@ 0xfe
 800efc8:	dce6      	bgt.n	800ef98 <scalbnf+0x3c>
 800efca:	2800      	cmp	r0, #0
 800efcc:	dd06      	ble.n	800efdc <scalbnf+0x80>
 800efce:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800efd2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800efd6:	ee00 3a10 	vmov	s0, r3
 800efda:	4770      	bx	lr
 800efdc:	f110 0f16 	cmn.w	r0, #22
 800efe0:	da09      	bge.n	800eff6 <scalbnf+0x9a>
 800efe2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f01c <scalbnf+0xc0>
 800efe6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f020 <scalbnf+0xc4>
 800efea:	ee10 3a10 	vmov	r3, s0
 800efee:	eeb0 7a67 	vmov.f32	s14, s15
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	e7d9      	b.n	800efaa <scalbnf+0x4e>
 800eff6:	3019      	adds	r0, #25
 800eff8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800effc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f000:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f024 <scalbnf+0xc8>
 800f004:	ee07 3a90 	vmov	s15, r3
 800f008:	e7d7      	b.n	800efba <scalbnf+0x5e>
 800f00a:	bf00      	nop
 800f00c:	ffff3cb0 	.word	0xffff3cb0
 800f010:	4c000000 	.word	0x4c000000
 800f014:	7149f2ca 	.word	0x7149f2ca
 800f018:	f149f2ca 	.word	0xf149f2ca
 800f01c:	0da24260 	.word	0x0da24260
 800f020:	8da24260 	.word	0x8da24260
 800f024:	33000000 	.word	0x33000000

0800f028 <__kernel_rem_pio2f>:
 800f028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f02c:	ed2d 8b04 	vpush	{d8-d9}
 800f030:	b0d9      	sub	sp, #356	@ 0x164
 800f032:	4690      	mov	r8, r2
 800f034:	9001      	str	r0, [sp, #4]
 800f036:	4ab6      	ldr	r2, [pc, #728]	@ (800f310 <__kernel_rem_pio2f+0x2e8>)
 800f038:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800f03a:	f118 0f04 	cmn.w	r8, #4
 800f03e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800f042:	460f      	mov	r7, r1
 800f044:	f103 3bff 	add.w	fp, r3, #4294967295
 800f048:	db26      	blt.n	800f098 <__kernel_rem_pio2f+0x70>
 800f04a:	f1b8 0203 	subs.w	r2, r8, #3
 800f04e:	bf48      	it	mi
 800f050:	f108 0204 	addmi.w	r2, r8, #4
 800f054:	10d2      	asrs	r2, r2, #3
 800f056:	1c55      	adds	r5, r2, #1
 800f058:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f05a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800f320 <__kernel_rem_pio2f+0x2f8>
 800f05e:	00e8      	lsls	r0, r5, #3
 800f060:	eba2 060b 	sub.w	r6, r2, fp
 800f064:	9002      	str	r0, [sp, #8]
 800f066:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800f06a:	eb0a 0c0b 	add.w	ip, sl, fp
 800f06e:	ac1c      	add	r4, sp, #112	@ 0x70
 800f070:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800f074:	2000      	movs	r0, #0
 800f076:	4560      	cmp	r0, ip
 800f078:	dd10      	ble.n	800f09c <__kernel_rem_pio2f+0x74>
 800f07a:	a91c      	add	r1, sp, #112	@ 0x70
 800f07c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800f080:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800f084:	2600      	movs	r6, #0
 800f086:	4556      	cmp	r6, sl
 800f088:	dc24      	bgt.n	800f0d4 <__kernel_rem_pio2f+0xac>
 800f08a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f08e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800f320 <__kernel_rem_pio2f+0x2f8>
 800f092:	4684      	mov	ip, r0
 800f094:	2400      	movs	r4, #0
 800f096:	e016      	b.n	800f0c6 <__kernel_rem_pio2f+0x9e>
 800f098:	2200      	movs	r2, #0
 800f09a:	e7dc      	b.n	800f056 <__kernel_rem_pio2f+0x2e>
 800f09c:	42c6      	cmn	r6, r0
 800f09e:	bf5d      	ittte	pl
 800f0a0:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800f0a4:	ee07 1a90 	vmovpl	s15, r1
 800f0a8:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f0ac:	eef0 7a47 	vmovmi.f32	s15, s14
 800f0b0:	ece4 7a01 	vstmia	r4!, {s15}
 800f0b4:	3001      	adds	r0, #1
 800f0b6:	e7de      	b.n	800f076 <__kernel_rem_pio2f+0x4e>
 800f0b8:	ecfe 6a01 	vldmia	lr!, {s13}
 800f0bc:	ed3c 7a01 	vldmdb	ip!, {s14}
 800f0c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f0c4:	3401      	adds	r4, #1
 800f0c6:	455c      	cmp	r4, fp
 800f0c8:	ddf6      	ble.n	800f0b8 <__kernel_rem_pio2f+0x90>
 800f0ca:	ece9 7a01 	vstmia	r9!, {s15}
 800f0ce:	3601      	adds	r6, #1
 800f0d0:	3004      	adds	r0, #4
 800f0d2:	e7d8      	b.n	800f086 <__kernel_rem_pio2f+0x5e>
 800f0d4:	a908      	add	r1, sp, #32
 800f0d6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f0da:	9104      	str	r1, [sp, #16]
 800f0dc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800f0de:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800f31c <__kernel_rem_pio2f+0x2f4>
 800f0e2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800f318 <__kernel_rem_pio2f+0x2f0>
 800f0e6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800f0ea:	9203      	str	r2, [sp, #12]
 800f0ec:	4654      	mov	r4, sl
 800f0ee:	00a2      	lsls	r2, r4, #2
 800f0f0:	9205      	str	r2, [sp, #20]
 800f0f2:	aa58      	add	r2, sp, #352	@ 0x160
 800f0f4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800f0f8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800f0fc:	a944      	add	r1, sp, #272	@ 0x110
 800f0fe:	aa08      	add	r2, sp, #32
 800f100:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800f104:	4694      	mov	ip, r2
 800f106:	4626      	mov	r6, r4
 800f108:	2e00      	cmp	r6, #0
 800f10a:	dc4c      	bgt.n	800f1a6 <__kernel_rem_pio2f+0x17e>
 800f10c:	4628      	mov	r0, r5
 800f10e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f112:	f7ff ff23 	bl	800ef5c <scalbnf>
 800f116:	eeb0 8a40 	vmov.f32	s16, s0
 800f11a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800f11e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f122:	f000 f9e9 	bl	800f4f8 <floorf>
 800f126:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800f12a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f12e:	2d00      	cmp	r5, #0
 800f130:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f134:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f138:	ee17 9a90 	vmov	r9, s15
 800f13c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f140:	ee38 8a67 	vsub.f32	s16, s16, s15
 800f144:	dd41      	ble.n	800f1ca <__kernel_rem_pio2f+0x1a2>
 800f146:	f104 3cff 	add.w	ip, r4, #4294967295
 800f14a:	a908      	add	r1, sp, #32
 800f14c:	f1c5 0e08 	rsb	lr, r5, #8
 800f150:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800f154:	fa46 f00e 	asr.w	r0, r6, lr
 800f158:	4481      	add	r9, r0
 800f15a:	fa00 f00e 	lsl.w	r0, r0, lr
 800f15e:	1a36      	subs	r6, r6, r0
 800f160:	f1c5 0007 	rsb	r0, r5, #7
 800f164:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800f168:	4106      	asrs	r6, r0
 800f16a:	2e00      	cmp	r6, #0
 800f16c:	dd3c      	ble.n	800f1e8 <__kernel_rem_pio2f+0x1c0>
 800f16e:	f04f 0e00 	mov.w	lr, #0
 800f172:	f109 0901 	add.w	r9, r9, #1
 800f176:	4670      	mov	r0, lr
 800f178:	4574      	cmp	r4, lr
 800f17a:	dc68      	bgt.n	800f24e <__kernel_rem_pio2f+0x226>
 800f17c:	2d00      	cmp	r5, #0
 800f17e:	dd03      	ble.n	800f188 <__kernel_rem_pio2f+0x160>
 800f180:	2d01      	cmp	r5, #1
 800f182:	d074      	beq.n	800f26e <__kernel_rem_pio2f+0x246>
 800f184:	2d02      	cmp	r5, #2
 800f186:	d07d      	beq.n	800f284 <__kernel_rem_pio2f+0x25c>
 800f188:	2e02      	cmp	r6, #2
 800f18a:	d12d      	bne.n	800f1e8 <__kernel_rem_pio2f+0x1c0>
 800f18c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f190:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f194:	b340      	cbz	r0, 800f1e8 <__kernel_rem_pio2f+0x1c0>
 800f196:	4628      	mov	r0, r5
 800f198:	9306      	str	r3, [sp, #24]
 800f19a:	f7ff fedf 	bl	800ef5c <scalbnf>
 800f19e:	9b06      	ldr	r3, [sp, #24]
 800f1a0:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f1a4:	e020      	b.n	800f1e8 <__kernel_rem_pio2f+0x1c0>
 800f1a6:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f1aa:	3e01      	subs	r6, #1
 800f1ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f1b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f1b4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f1b8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f1bc:	ecac 0a01 	vstmia	ip!, {s0}
 800f1c0:	ed30 0a01 	vldmdb	r0!, {s0}
 800f1c4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f1c8:	e79e      	b.n	800f108 <__kernel_rem_pio2f+0xe0>
 800f1ca:	d105      	bne.n	800f1d8 <__kernel_rem_pio2f+0x1b0>
 800f1cc:	1e60      	subs	r0, r4, #1
 800f1ce:	a908      	add	r1, sp, #32
 800f1d0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800f1d4:	11f6      	asrs	r6, r6, #7
 800f1d6:	e7c8      	b.n	800f16a <__kernel_rem_pio2f+0x142>
 800f1d8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f1dc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e4:	da31      	bge.n	800f24a <__kernel_rem_pio2f+0x222>
 800f1e6:	2600      	movs	r6, #0
 800f1e8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f1ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f0:	f040 8098 	bne.w	800f324 <__kernel_rem_pio2f+0x2fc>
 800f1f4:	1e60      	subs	r0, r4, #1
 800f1f6:	2200      	movs	r2, #0
 800f1f8:	4550      	cmp	r0, sl
 800f1fa:	da4b      	bge.n	800f294 <__kernel_rem_pio2f+0x26c>
 800f1fc:	2a00      	cmp	r2, #0
 800f1fe:	d065      	beq.n	800f2cc <__kernel_rem_pio2f+0x2a4>
 800f200:	3c01      	subs	r4, #1
 800f202:	ab08      	add	r3, sp, #32
 800f204:	3d08      	subs	r5, #8
 800f206:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d0f8      	beq.n	800f200 <__kernel_rem_pio2f+0x1d8>
 800f20e:	4628      	mov	r0, r5
 800f210:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f214:	f7ff fea2 	bl	800ef5c <scalbnf>
 800f218:	1c63      	adds	r3, r4, #1
 800f21a:	aa44      	add	r2, sp, #272	@ 0x110
 800f21c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800f31c <__kernel_rem_pio2f+0x2f4>
 800f220:	0099      	lsls	r1, r3, #2
 800f222:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f226:	4623      	mov	r3, r4
 800f228:	2b00      	cmp	r3, #0
 800f22a:	f280 80a9 	bge.w	800f380 <__kernel_rem_pio2f+0x358>
 800f22e:	4623      	mov	r3, r4
 800f230:	2b00      	cmp	r3, #0
 800f232:	f2c0 80c7 	blt.w	800f3c4 <__kernel_rem_pio2f+0x39c>
 800f236:	aa44      	add	r2, sp, #272	@ 0x110
 800f238:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800f23c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800f314 <__kernel_rem_pio2f+0x2ec>
 800f240:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800f320 <__kernel_rem_pio2f+0x2f8>
 800f244:	2000      	movs	r0, #0
 800f246:	1ae2      	subs	r2, r4, r3
 800f248:	e0b1      	b.n	800f3ae <__kernel_rem_pio2f+0x386>
 800f24a:	2602      	movs	r6, #2
 800f24c:	e78f      	b.n	800f16e <__kernel_rem_pio2f+0x146>
 800f24e:	f852 1b04 	ldr.w	r1, [r2], #4
 800f252:	b948      	cbnz	r0, 800f268 <__kernel_rem_pio2f+0x240>
 800f254:	b121      	cbz	r1, 800f260 <__kernel_rem_pio2f+0x238>
 800f256:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800f25a:	f842 1c04 	str.w	r1, [r2, #-4]
 800f25e:	2101      	movs	r1, #1
 800f260:	f10e 0e01 	add.w	lr, lr, #1
 800f264:	4608      	mov	r0, r1
 800f266:	e787      	b.n	800f178 <__kernel_rem_pio2f+0x150>
 800f268:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800f26c:	e7f5      	b.n	800f25a <__kernel_rem_pio2f+0x232>
 800f26e:	f104 3cff 	add.w	ip, r4, #4294967295
 800f272:	aa08      	add	r2, sp, #32
 800f274:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800f278:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800f27c:	a908      	add	r1, sp, #32
 800f27e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800f282:	e781      	b.n	800f188 <__kernel_rem_pio2f+0x160>
 800f284:	f104 3cff 	add.w	ip, r4, #4294967295
 800f288:	aa08      	add	r2, sp, #32
 800f28a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800f28e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f292:	e7f3      	b.n	800f27c <__kernel_rem_pio2f+0x254>
 800f294:	a908      	add	r1, sp, #32
 800f296:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800f29a:	3801      	subs	r0, #1
 800f29c:	430a      	orrs	r2, r1
 800f29e:	e7ab      	b.n	800f1f8 <__kernel_rem_pio2f+0x1d0>
 800f2a0:	3201      	adds	r2, #1
 800f2a2:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800f2a6:	2e00      	cmp	r6, #0
 800f2a8:	d0fa      	beq.n	800f2a0 <__kernel_rem_pio2f+0x278>
 800f2aa:	9905      	ldr	r1, [sp, #20]
 800f2ac:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800f2b0:	eb0d 0001 	add.w	r0, sp, r1
 800f2b4:	18e6      	adds	r6, r4, r3
 800f2b6:	a91c      	add	r1, sp, #112	@ 0x70
 800f2b8:	f104 0c01 	add.w	ip, r4, #1
 800f2bc:	384c      	subs	r0, #76	@ 0x4c
 800f2be:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800f2c2:	4422      	add	r2, r4
 800f2c4:	4562      	cmp	r2, ip
 800f2c6:	da04      	bge.n	800f2d2 <__kernel_rem_pio2f+0x2aa>
 800f2c8:	4614      	mov	r4, r2
 800f2ca:	e710      	b.n	800f0ee <__kernel_rem_pio2f+0xc6>
 800f2cc:	9804      	ldr	r0, [sp, #16]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	e7e7      	b.n	800f2a2 <__kernel_rem_pio2f+0x27a>
 800f2d2:	9903      	ldr	r1, [sp, #12]
 800f2d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800f2d8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800f2dc:	9105      	str	r1, [sp, #20]
 800f2de:	ee07 1a90 	vmov	s15, r1
 800f2e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f2e6:	2400      	movs	r4, #0
 800f2e8:	ece6 7a01 	vstmia	r6!, {s15}
 800f2ec:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800f320 <__kernel_rem_pio2f+0x2f8>
 800f2f0:	46b1      	mov	r9, r6
 800f2f2:	455c      	cmp	r4, fp
 800f2f4:	dd04      	ble.n	800f300 <__kernel_rem_pio2f+0x2d8>
 800f2f6:	ece0 7a01 	vstmia	r0!, {s15}
 800f2fa:	f10c 0c01 	add.w	ip, ip, #1
 800f2fe:	e7e1      	b.n	800f2c4 <__kernel_rem_pio2f+0x29c>
 800f300:	ecfe 6a01 	vldmia	lr!, {s13}
 800f304:	ed39 7a01 	vldmdb	r9!, {s14}
 800f308:	3401      	adds	r4, #1
 800f30a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f30e:	e7f0      	b.n	800f2f2 <__kernel_rem_pio2f+0x2ca>
 800f310:	0800f9dc 	.word	0x0800f9dc
 800f314:	0800f9b0 	.word	0x0800f9b0
 800f318:	43800000 	.word	0x43800000
 800f31c:	3b800000 	.word	0x3b800000
 800f320:	00000000 	.word	0x00000000
 800f324:	9b02      	ldr	r3, [sp, #8]
 800f326:	eeb0 0a48 	vmov.f32	s0, s16
 800f32a:	eba3 0008 	sub.w	r0, r3, r8
 800f32e:	f7ff fe15 	bl	800ef5c <scalbnf>
 800f332:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800f318 <__kernel_rem_pio2f+0x2f0>
 800f336:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f33e:	db19      	blt.n	800f374 <__kernel_rem_pio2f+0x34c>
 800f340:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800f31c <__kernel_rem_pio2f+0x2f4>
 800f344:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f348:	aa08      	add	r2, sp, #32
 800f34a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f34e:	3508      	adds	r5, #8
 800f350:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f354:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f35c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f360:	ee10 3a10 	vmov	r3, s0
 800f364:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f368:	ee17 3a90 	vmov	r3, s15
 800f36c:	3401      	adds	r4, #1
 800f36e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f372:	e74c      	b.n	800f20e <__kernel_rem_pio2f+0x1e6>
 800f374:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f378:	aa08      	add	r2, sp, #32
 800f37a:	ee10 3a10 	vmov	r3, s0
 800f37e:	e7f6      	b.n	800f36e <__kernel_rem_pio2f+0x346>
 800f380:	a808      	add	r0, sp, #32
 800f382:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800f386:	9001      	str	r0, [sp, #4]
 800f388:	ee07 0a90 	vmov	s15, r0
 800f38c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f390:	3b01      	subs	r3, #1
 800f392:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f396:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f39a:	ed62 7a01 	vstmdb	r2!, {s15}
 800f39e:	e743      	b.n	800f228 <__kernel_rem_pio2f+0x200>
 800f3a0:	ecfc 6a01 	vldmia	ip!, {s13}
 800f3a4:	ecb5 7a01 	vldmia	r5!, {s14}
 800f3a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f3ac:	3001      	adds	r0, #1
 800f3ae:	4550      	cmp	r0, sl
 800f3b0:	dc01      	bgt.n	800f3b6 <__kernel_rem_pio2f+0x38e>
 800f3b2:	4290      	cmp	r0, r2
 800f3b4:	ddf4      	ble.n	800f3a0 <__kernel_rem_pio2f+0x378>
 800f3b6:	a858      	add	r0, sp, #352	@ 0x160
 800f3b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800f3bc:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	e735      	b.n	800f230 <__kernel_rem_pio2f+0x208>
 800f3c4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800f3c6:	2b02      	cmp	r3, #2
 800f3c8:	dc09      	bgt.n	800f3de <__kernel_rem_pio2f+0x3b6>
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	dc27      	bgt.n	800f41e <__kernel_rem_pio2f+0x3f6>
 800f3ce:	d040      	beq.n	800f452 <__kernel_rem_pio2f+0x42a>
 800f3d0:	f009 0007 	and.w	r0, r9, #7
 800f3d4:	b059      	add	sp, #356	@ 0x164
 800f3d6:	ecbd 8b04 	vpop	{d8-d9}
 800f3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3de:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800f3e0:	2b03      	cmp	r3, #3
 800f3e2:	d1f5      	bne.n	800f3d0 <__kernel_rem_pio2f+0x3a8>
 800f3e4:	aa30      	add	r2, sp, #192	@ 0xc0
 800f3e6:	1f0b      	subs	r3, r1, #4
 800f3e8:	4413      	add	r3, r2
 800f3ea:	461a      	mov	r2, r3
 800f3ec:	4620      	mov	r0, r4
 800f3ee:	2800      	cmp	r0, #0
 800f3f0:	dc50      	bgt.n	800f494 <__kernel_rem_pio2f+0x46c>
 800f3f2:	4622      	mov	r2, r4
 800f3f4:	2a01      	cmp	r2, #1
 800f3f6:	dc5d      	bgt.n	800f4b4 <__kernel_rem_pio2f+0x48c>
 800f3f8:	ab30      	add	r3, sp, #192	@ 0xc0
 800f3fa:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800f320 <__kernel_rem_pio2f+0x2f8>
 800f3fe:	440b      	add	r3, r1
 800f400:	2c01      	cmp	r4, #1
 800f402:	dc67      	bgt.n	800f4d4 <__kernel_rem_pio2f+0x4ac>
 800f404:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800f408:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800f40c:	2e00      	cmp	r6, #0
 800f40e:	d167      	bne.n	800f4e0 <__kernel_rem_pio2f+0x4b8>
 800f410:	edc7 6a00 	vstr	s13, [r7]
 800f414:	ed87 7a01 	vstr	s14, [r7, #4]
 800f418:	edc7 7a02 	vstr	s15, [r7, #8]
 800f41c:	e7d8      	b.n	800f3d0 <__kernel_rem_pio2f+0x3a8>
 800f41e:	ab30      	add	r3, sp, #192	@ 0xc0
 800f420:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800f320 <__kernel_rem_pio2f+0x2f8>
 800f424:	440b      	add	r3, r1
 800f426:	4622      	mov	r2, r4
 800f428:	2a00      	cmp	r2, #0
 800f42a:	da24      	bge.n	800f476 <__kernel_rem_pio2f+0x44e>
 800f42c:	b34e      	cbz	r6, 800f482 <__kernel_rem_pio2f+0x45a>
 800f42e:	eef1 7a47 	vneg.f32	s15, s14
 800f432:	edc7 7a00 	vstr	s15, [r7]
 800f436:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800f43a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f43e:	aa31      	add	r2, sp, #196	@ 0xc4
 800f440:	2301      	movs	r3, #1
 800f442:	429c      	cmp	r4, r3
 800f444:	da20      	bge.n	800f488 <__kernel_rem_pio2f+0x460>
 800f446:	b10e      	cbz	r6, 800f44c <__kernel_rem_pio2f+0x424>
 800f448:	eef1 7a67 	vneg.f32	s15, s15
 800f44c:	edc7 7a01 	vstr	s15, [r7, #4]
 800f450:	e7be      	b.n	800f3d0 <__kernel_rem_pio2f+0x3a8>
 800f452:	ab30      	add	r3, sp, #192	@ 0xc0
 800f454:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800f320 <__kernel_rem_pio2f+0x2f8>
 800f458:	440b      	add	r3, r1
 800f45a:	2c00      	cmp	r4, #0
 800f45c:	da05      	bge.n	800f46a <__kernel_rem_pio2f+0x442>
 800f45e:	b10e      	cbz	r6, 800f464 <__kernel_rem_pio2f+0x43c>
 800f460:	eef1 7a67 	vneg.f32	s15, s15
 800f464:	edc7 7a00 	vstr	s15, [r7]
 800f468:	e7b2      	b.n	800f3d0 <__kernel_rem_pio2f+0x3a8>
 800f46a:	ed33 7a01 	vldmdb	r3!, {s14}
 800f46e:	3c01      	subs	r4, #1
 800f470:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f474:	e7f1      	b.n	800f45a <__kernel_rem_pio2f+0x432>
 800f476:	ed73 7a01 	vldmdb	r3!, {s15}
 800f47a:	3a01      	subs	r2, #1
 800f47c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f480:	e7d2      	b.n	800f428 <__kernel_rem_pio2f+0x400>
 800f482:	eef0 7a47 	vmov.f32	s15, s14
 800f486:	e7d4      	b.n	800f432 <__kernel_rem_pio2f+0x40a>
 800f488:	ecb2 7a01 	vldmia	r2!, {s14}
 800f48c:	3301      	adds	r3, #1
 800f48e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f492:	e7d6      	b.n	800f442 <__kernel_rem_pio2f+0x41a>
 800f494:	ed72 7a01 	vldmdb	r2!, {s15}
 800f498:	edd2 6a01 	vldr	s13, [r2, #4]
 800f49c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f4a0:	3801      	subs	r0, #1
 800f4a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4a6:	ed82 7a00 	vstr	s14, [r2]
 800f4aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4ae:	edc2 7a01 	vstr	s15, [r2, #4]
 800f4b2:	e79c      	b.n	800f3ee <__kernel_rem_pio2f+0x3c6>
 800f4b4:	ed73 7a01 	vldmdb	r3!, {s15}
 800f4b8:	edd3 6a01 	vldr	s13, [r3, #4]
 800f4bc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f4c0:	3a01      	subs	r2, #1
 800f4c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4c6:	ed83 7a00 	vstr	s14, [r3]
 800f4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f4ce:	edc3 7a01 	vstr	s15, [r3, #4]
 800f4d2:	e78f      	b.n	800f3f4 <__kernel_rem_pio2f+0x3cc>
 800f4d4:	ed33 7a01 	vldmdb	r3!, {s14}
 800f4d8:	3c01      	subs	r4, #1
 800f4da:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f4de:	e78f      	b.n	800f400 <__kernel_rem_pio2f+0x3d8>
 800f4e0:	eef1 6a66 	vneg.f32	s13, s13
 800f4e4:	eeb1 7a47 	vneg.f32	s14, s14
 800f4e8:	edc7 6a00 	vstr	s13, [r7]
 800f4ec:	ed87 7a01 	vstr	s14, [r7, #4]
 800f4f0:	eef1 7a67 	vneg.f32	s15, s15
 800f4f4:	e790      	b.n	800f418 <__kernel_rem_pio2f+0x3f0>
 800f4f6:	bf00      	nop

0800f4f8 <floorf>:
 800f4f8:	ee10 3a10 	vmov	r3, s0
 800f4fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f500:	3a7f      	subs	r2, #127	@ 0x7f
 800f502:	2a16      	cmp	r2, #22
 800f504:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800f508:	dc2b      	bgt.n	800f562 <floorf+0x6a>
 800f50a:	2a00      	cmp	r2, #0
 800f50c:	da12      	bge.n	800f534 <floorf+0x3c>
 800f50e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f574 <floorf+0x7c>
 800f512:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f516:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51e:	dd06      	ble.n	800f52e <floorf+0x36>
 800f520:	2b00      	cmp	r3, #0
 800f522:	da24      	bge.n	800f56e <floorf+0x76>
 800f524:	2900      	cmp	r1, #0
 800f526:	4b14      	ldr	r3, [pc, #80]	@ (800f578 <floorf+0x80>)
 800f528:	bf08      	it	eq
 800f52a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800f52e:	ee00 3a10 	vmov	s0, r3
 800f532:	4770      	bx	lr
 800f534:	4911      	ldr	r1, [pc, #68]	@ (800f57c <floorf+0x84>)
 800f536:	4111      	asrs	r1, r2
 800f538:	420b      	tst	r3, r1
 800f53a:	d0fa      	beq.n	800f532 <floorf+0x3a>
 800f53c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800f574 <floorf+0x7c>
 800f540:	ee30 0a27 	vadd.f32	s0, s0, s15
 800f544:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54c:	ddef      	ble.n	800f52e <floorf+0x36>
 800f54e:	2b00      	cmp	r3, #0
 800f550:	bfbe      	ittt	lt
 800f552:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800f556:	fa40 f202 	asrlt.w	r2, r0, r2
 800f55a:	189b      	addlt	r3, r3, r2
 800f55c:	ea23 0301 	bic.w	r3, r3, r1
 800f560:	e7e5      	b.n	800f52e <floorf+0x36>
 800f562:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f566:	d3e4      	bcc.n	800f532 <floorf+0x3a>
 800f568:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f56c:	4770      	bx	lr
 800f56e:	2300      	movs	r3, #0
 800f570:	e7dd      	b.n	800f52e <floorf+0x36>
 800f572:	bf00      	nop
 800f574:	7149f2ca 	.word	0x7149f2ca
 800f578:	bf800000 	.word	0xbf800000
 800f57c:	007fffff 	.word	0x007fffff

0800f580 <_init>:
 800f580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f582:	bf00      	nop
 800f584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f586:	bc08      	pop	{r3}
 800f588:	469e      	mov	lr, r3
 800f58a:	4770      	bx	lr

0800f58c <_fini>:
 800f58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58e:	bf00      	nop
 800f590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f592:	bc08      	pop	{r3}
 800f594:	469e      	mov	lr, r3
 800f596:	4770      	bx	lr
