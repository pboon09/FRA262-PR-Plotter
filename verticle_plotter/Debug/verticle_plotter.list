
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8f8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800dad0  0800dad0  0000ead0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df20  0800df20  0000f1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800df20  0800df20  0000ef20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df28  0800df28  0000f1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df28  0800df28  0000ef28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df2c  0800df2c  0000ef2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800df30  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002094  200001e8  0800e118  0000f1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000227c  0800e118  0000f27c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b096  00000000  00000000  0000f218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051da  00000000  00000000  0003a2ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  0003f488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001583  00000000  00000000  00041040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d0a0  00000000  00000000  000425c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028d90  00000000  00000000  0006f663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119984  00000000  00000000  000983f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b1d77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b5c  00000000  00000000  001b1dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001b9918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001e8 	.word	0x200001e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800dab8 	.word	0x0800dab8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001ec 	.word	0x200001ec
 8000214:	0800dab8 	.word	0x0800dab8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e008      	b.n	8000e14 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f2      	bcc.n	8000e02 <ADC_DMA_Init+0x42>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	217f      	movs	r1, #127	@ 0x7f
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f005 fc1b 	bl	8006674 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f004 fd04 	bl	8005858 <HAL_ADC_Start_DMA>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b087      	sub	sp, #28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6178      	str	r0, [r7, #20]
 8000e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e68:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e6c:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	f04f 0200 	mov.w	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]

}
 8000ea0:	bf00      	nop
 8000ea2:	371c      	adds	r7, #28
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	88fa      	ldrh	r2, [r7, #6]
 8000ec6:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3328      	adds	r3, #40	@ 0x28
 8000ecc:	88fa      	ldrh	r2, [r7, #6]
 8000ece:	68b9      	ldr	r1, [r7, #8]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f001 fa21 	bl	8002318 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	8b3a      	ldrh	r2, [r7, #24]
 8000ee0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000eec:	bf00      	nop
 8000eee:	3710      	adds	r7, #16
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f00:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d15f      	bne.n	8000fce <MDXX_set_range+0xda>
		if (duty == 0) {
 8000f0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f1a:	d115      	bne.n	8000f48 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	3310      	adds	r3, #16
 8000f20:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 80010a0 <MDXX_set_range+0x1ac>
 8000f24:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 fb1d 	bl	8002568 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3328      	adds	r3, #40	@ 0x28
 8000f32:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 80010a0 <MDXX_set_range+0x1ac>
 8000f36:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fb14 	bl	8002568 <PWM_write_range>
			mdxx->cmd = 0;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 8000f46:	e0a6      	b.n	8001096 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000f48:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f54:	dd1a      	ble.n	8000f8c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3310      	adds	r3, #16
 8000f5a:	eddf 0a51 	vldr	s1, [pc, #324]	@ 80010a0 <MDXX_set_range+0x1ac>
 8000f5e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f001 fb00 	bl	8002568 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3328      	adds	r3, #40	@ 0x28
 8000f6c:	edd7 0a01 	vldr	s1, [r7, #4]
 8000f70:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f001 faf7 	bl	8002568 <PWM_write_range>
			mdxx->cmd = duty;
 8000f7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f82:	ee17 2a90 	vmov	r2, s15
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000f8a:	e084      	b.n	8001096 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	3310      	adds	r3, #16
 8000f90:	eddf 0a44 	vldr	s1, [pc, #272]	@ 80010a4 <MDXX_set_range+0x1b0>
 8000f94:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f001 fae5 	bl	8002568 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3328      	adds	r3, #40	@ 0x28
 8000fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa6:	eef0 7ae7 	vabs.f32	s15, s15
 8000faa:	eef0 0a67 	vmov.f32	s1, s15
 8000fae:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fad8 	bl	8002568 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fbc:	eef0 7ae7 	vabs.f32	s15, s15
 8000fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000fcc:	e063      	b.n	8001096 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d15e      	bne.n	8001096 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8000fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fdc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fe4:	d115      	bne.n	8001012 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f006 fa6c 	bl	80074d0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3328      	adds	r3, #40	@ 0x28
 8000ffc:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80010a0 <MDXX_set_range+0x1ac>
 8001000:	ed97 0a02 	vldr	s0, [r7, #8]
 8001004:	4618      	mov	r0, r3
 8001006:	f001 faaf 	bl	8002568 <PWM_write_range>
			mdxx->cmd = 0;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	2200      	movs	r2, #0
 800100e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001010:	e041      	b.n	8001096 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001012:	edd7 7a01 	vldr	s15, [r7, #4]
 8001016:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	dd1a      	ble.n	8001056 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800102a:	2200      	movs	r2, #0
 800102c:	4619      	mov	r1, r3
 800102e:	f006 fa4f 	bl	80074d0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3328      	adds	r3, #40	@ 0x28
 8001036:	edd7 0a01 	vldr	s1, [r7, #4]
 800103a:	ed97 0a02 	vldr	s0, [r7, #8]
 800103e:	4618      	mov	r0, r3
 8001040:	f001 fa92 	bl	8002568 <PWM_write_range>
			mdxx->cmd = duty;
 8001044:	edd7 7a01 	vldr	s15, [r7, #4]
 8001048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800104c:	ee17 2a90 	vmov	r2, s15
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001054:	e01f      	b.n	8001096 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001060:	2201      	movs	r2, #1
 8001062:	4619      	mov	r1, r3
 8001064:	f006 fa34 	bl	80074d0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3328      	adds	r3, #40	@ 0x28
 800106c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001070:	eef0 7ae7 	vabs.f32	s15, s15
 8001074:	eef0 0a67 	vmov.f32	s1, s15
 8001078:	ed97 0a02 	vldr	s0, [r7, #8]
 800107c:	4618      	mov	r0, r3
 800107e:	f001 fa73 	bl	8002568 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	eef0 7ae7 	vabs.f32	s15, s15
 800108a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108e:	ee17 2a90 	vmov	r2, s15
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001096:	bf00      	nop
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	00000000 	.word	0x00000000
 80010a4:	42c80000 	.word	0x42c80000

080010a8 <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, 		// kg
    .c = 64.83e-3,           			// m
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	601a      	str	r2, [r3, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	605a      	str	r2, [r3, #4]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	601a      	str	r2, [r3, #0]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	605a      	str	r2, [r3, #4]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001128:	b580      	push	{r7, lr}
 800112a:	ed2d 8b02 	vpush	{d8}
 800112e:	b08a      	sub	sp, #40	@ 0x28
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	460b      	mov	r3, r1
 8001136:	ed87 0a01 	vstr	s0, [r7, #4]
 800113a:	edc7 0a00 	vstr	s1, [r7]
 800113e:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001140:	897b      	ldrh	r3, [r7, #10]
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	b29b      	uxth	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <FIR_init+0x2a>
        numTaps += 1;
 800114c:	897b      	ldrh	r3, [r7, #10]
 800114e:	3301      	adds	r3, #1
 8001150:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	897a      	ldrh	r2, [r7, #10]
 8001156:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 800115e:	897b      	ldrh	r3, [r7, #10]
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4618      	mov	r0, r3
 8001164:	f00b fe18 	bl	800cd98 <malloc>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001170:	897b      	ldrh	r3, [r7, #10]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4618      	mov	r0, r3
 8001176:	f00b fe0f 	bl	800cd98 <malloc>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80e0 	beq.w	800134c <FIR_init+0x224>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80db 	beq.w	800134c <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001196:	2300      	movs	r3, #0
 8001198:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800119a:	e00a      	b.n	80011b2 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	4413      	add	r3, r2
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 80011ac:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011ae:	3301      	adds	r3, #1
 80011b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80011b2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80011b4:	897b      	ldrh	r3, [r7, #10]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d3f0      	bcc.n	800119c <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 80011ba:	edd7 6a01 	vldr	s13, [r7, #4]
 80011be:	ed97 7a00 	vldr	s14, [r7]
 80011c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c6:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 80011ca:	897b      	ldrh	r3, [r7, #10]
 80011cc:	085b      	lsrs	r3, r3, #1
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80011d6:	e077      	b.n	80012c8 <FIR_init+0x1a0>
            if (i == half_taps) {
 80011d8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80011dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d10c      	bne.n	80011fe <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80011f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011f8:	edc3 7a00 	vstr	s15, [r3]
 80011fc:	e02c      	b.n	8001258 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 80011fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001200:	8afb      	ldrh	r3, [r7, #22]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001208:	edd7 7a06 	vldr	s15, [r7, #24]
 800120c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001358 <FIR_init+0x230>
 8001210:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001214:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001218:	ee07 3a90 	vmov	s15, r3
 800121c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001224:	eeb0 0a67 	vmov.f32	s0, s15
 8001228:	f00b ff12 	bl	800d050 <sinf>
 800122c:	eef0 6a40 	vmov.f32	s13, s0
 8001230:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123c:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 800135c <FIR_init+0x234>
 8001240:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001254:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	ed93 8a00 	vldr	s16, [r3]
 8001268:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001274:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001358 <FIR_init+0x230>
 8001278:	ee27 7a87 	vmul.f32	s14, s15, s14
 800127c:	897b      	ldrh	r3, [r7, #10]
 800127e:	3b01      	subs	r3, #1
 8001280:	ee07 3a90 	vmov	s15, r3
 8001284:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001288:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800128c:	eeb0 0a66 	vmov.f32	s0, s13
 8001290:	f00b fe9a 	bl	800cfc8 <cosf>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001360 <FIR_init+0x238>
 800129c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001364 <FIR_init+0x23c>
 80012a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80012b8:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 80012bc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	3301      	adds	r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80012c8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80012cc:	897b      	ldrh	r3, [r7, #10]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	db82      	blt.n	80011d8 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 80012d2:	f04f 0300 	mov.w	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	83fb      	strh	r3, [r7, #30]
 80012dc:	e00f      	b.n	80012fe <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	8bfb      	ldrh	r3, [r7, #30]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80012f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f4:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 80012f8:	8bfb      	ldrh	r3, [r7, #30]
 80012fa:	3301      	adds	r3, #1
 80012fc:	83fb      	strh	r3, [r7, #30]
 80012fe:	8bfa      	ldrh	r2, [r7, #30]
 8001300:	897b      	ldrh	r3, [r7, #10]
 8001302:	429a      	cmp	r2, r3
 8001304:	d3eb      	bcc.n	80012de <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001306:	edd7 7a08 	vldr	s15, [r7, #32]
 800130a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800130e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001312:	d01b      	beq.n	800134c <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001314:	2300      	movs	r3, #0
 8001316:	83bb      	strh	r3, [r7, #28]
 8001318:	e014      	b.n	8001344 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	8bbb      	ldrh	r3, [r7, #28]
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	edd3 6a00 	vldr	s13, [r3]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	8bbb      	ldrh	r3, [r7, #28]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	ed97 7a08 	vldr	s14, [r7, #32]
 8001336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800133a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 800133e:	8bbb      	ldrh	r3, [r7, #28]
 8001340:	3301      	adds	r3, #1
 8001342:	83bb      	strh	r3, [r7, #28]
 8001344:	8bba      	ldrh	r2, [r7, #28]
 8001346:	897b      	ldrh	r3, [r7, #10]
 8001348:	429a      	cmp	r2, r3
 800134a:	d3e6      	bcc.n	800131a <FIR_init+0x1f2>
            }
        }
    }
}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	@ 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	ecbd 8b02 	vpop	{d8}
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40c90fdb 	.word	0x40c90fdb
 800135c:	40490fdb 	.word	0x40490fdb
 8001360:	3eeb851f 	.word	0x3eeb851f
 8001364:	3f0a3d71 	.word	0x3f0a3d71

08001368 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800136c:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <modbus_1t5_Timeout+0x3c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2201      	movs	r2, #1
 8001372:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <modbus_1t5_Timeout+0x3c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <modbus_1t5_Timeout+0x3c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <modbus_1t5_Timeout+0x3c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0201 	orr.w	r2, r2, #1
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000204 	.word	0x20000204

080013a8 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80013b0:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <modbus_3t5_Timeout+0x1c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	755a      	strb	r2, [r3, #21]

}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	20000204 	.word	0x20000204

080013c8 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f009 ff27 	bl	800b224 <HAL_UART_GetError>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b20      	cmp	r3, #32
 80013da:	d101      	bne.n	80013e0 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 80013dc:	f7ff ffc4 	bl	8001368 <modbus_1t5_Timeout>

	}
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 80013f6:	4a2d      	ldr	r2, [pc, #180]	@ (80014ac <Modbus_init+0xc4>)
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 80013fc:	4b2b      	ldr	r3, [pc, #172]	@ (80014ac <Modbus_init+0xc4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001404:	4b29      	ldr	r3, [pc, #164]	@ (80014ac <Modbus_init+0xc4>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <Modbus_init+0xc4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001414:	4b25      	ldr	r3, [pc, #148]	@ (80014ac <Modbus_init+0xc4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	7e3a      	ldrb	r2, [r7, #24]
 800141a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 800141c:	4b23      	ldr	r3, [pc, #140]	@ (80014ac <Modbus_init+0xc4>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69fa      	ldr	r2, [r7, #28]
 8001422:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	4a21      	ldr	r2, [pc, #132]	@ (80014b0 <Modbus_init+0xc8>)
 800142a:	210e      	movs	r1, #14
 800142c:	4618      	mov	r0, r3
 800142e:	f008 f9a7 	bl	8009780 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2110      	movs	r1, #16
 8001438:	4618      	mov	r0, r3
 800143a:	f009 fe9d 	bl	800b178 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	4618      	mov	r0, r3
 8001444:	f009 feb4 	bl	800b1b0 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	4a19      	ldr	r2, [pc, #100]	@ (80014b4 <Modbus_init+0xcc>)
 800144e:	2104      	movs	r1, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f009 f9e5 	bl	800a820 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001456:	4b15      	ldr	r3, [pc, #84]	@ (80014ac <Modbus_init+0xc4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800145c:	4b13      	ldr	r3, [pc, #76]	@ (80014ac <Modbus_init+0xc4>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	4b12      	ldr	r3, [pc, #72]	@ (80014ac <Modbus_init+0xc4>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001468:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800146c:	4413      	add	r3, r2
 800146e:	3302      	adds	r3, #2
 8001470:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001474:	4619      	mov	r1, r3
 8001476:	f009 fa8d 	bl	800a994 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 800147a:	4b0c      	ldr	r3, [pc, #48]	@ (80014ac <Modbus_init+0xc4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	691b      	ldr	r3, [r3, #16]
 8001480:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001484:	b2db      	uxtb	r3, r3
 8001486:	2b01      	cmp	r3, #1
 8001488:	d10c      	bne.n	80014a4 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 800148a:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <Modbus_init+0xc4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	4618      	mov	r0, r3
 8001492:	f007 f951 	bl	8008738 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001496:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <Modbus_init+0xc4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f007 fba0 	bl	8008be4 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80014a4:	bf00      	nop
 80014a6:	3710      	adds	r7, #16
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000204 	.word	0x20000204
 80014b0:	080013a9 	.word	0x080013a9
 80014b4:	080013c9 	.word	0x080013c9

080014b8 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	@ 0x30
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6278      	str	r0, [r7, #36]	@ 0x24
 80014c0:	ed87 0a08 	vstr	s0, [r7, #32]
 80014c4:	edc7 0a07 	vstr	s1, [r7, #28]
 80014c8:	ed87 1a06 	vstr	s2, [r7, #24]
 80014cc:	edc7 1a05 	vstr	s3, [r7, #20]
 80014d0:	ed87 2a04 	vstr	s4, [r7, #16]
 80014d4:	edc7 2a03 	vstr	s5, [r7, #12]
 80014d8:	ed87 3a02 	vstr	s6, [r7, #8]
 80014dc:	edc7 3a01 	vstr	s7, [r7, #4]
 80014e0:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	6a3a      	ldr	r2, [r7, #32]
 80014e8:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    filter->J = J;
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->b = b;
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->K_t = K_t;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->K_e = K_e;
 8001504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368
    filter->R_a = R_a;
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	f8c3 236c 	str.w	r2, [r3, #876]	@ 0x36c
    filter->L_a = L_a;
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 800151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151e:	2210      	movs	r2, #16
 8001520:	2100      	movs	r1, #0
 8001522:	4618      	mov	r0, r3
 8001524:	f00b fcee 	bl	800cf04 <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152a:	3310      	adds	r3, #16
 800152c:	2240      	movs	r2, #64	@ 0x40
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f00b fce7 	bl	800cf04 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001536:	2300      	movs	r3, #0
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800153a:	e00c      	b.n	8001556 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 800153c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001546:	3304      	adds	r3, #4
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	4413      	add	r3, r2
 800154c:	4ab1      	ldr	r2, [pc, #708]	@ (8001814 <MotorKalman_Init+0x35c>)
 800154e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001552:	3301      	adds	r3, #1
 8001554:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001558:	2b03      	cmp	r3, #3
 800155a:	ddef      	ble.n	800153c <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 8001562:	2240      	movs	r2, #64	@ 0x40
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f00b fccc 	bl	800cf04 <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001570:	e00d      	b.n	800158e <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001572:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157c:	33c6      	adds	r3, #198	@ 0xc6
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	4413      	add	r3, r2
 8001582:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001586:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158a:	3301      	adds	r3, #1
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800158e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001590:	2b03      	cmp	r3, #3
 8001592:	ddee      	ble.n	8001572 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001596:	33f0      	adds	r3, #240	@ 0xf0
 8001598:	2210      	movs	r2, #16
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f00b fcb1 	bl	800cf04 <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 80015a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015a8:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 80015ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80015b2:	2210      	movs	r2, #16
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f00b fca4 	bl	800cf04 <memset>
    filter->G[1] = 1.0f; // Process noise only affects the load torque state (state 1)
 80015bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015be:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80015c2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104

    // Default measurement configuration - only position
    filter->use_position_measurement = 1;
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 238c 	strb.w	r2, [r3, #908]	@ 0x38c

    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 80015ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80015d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015d4:	f000 f9bf 	bl	8001956 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 80015d8:	ed97 0a00 	vldr	s0, [r7]
 80015dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015de:	f000 f9f2 	bl	80019c6 <MotorKalman_SetMeasurementNoise>

    // Initialize temporary matrices with zeros
    memset(filter->temp_state_data, 0, sizeof(filter->temp_state_data));
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 80015e8:	2210      	movs	r2, #16
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00b fc89 	bl	800cf04 <memset>
    memset(filter->temp_state_state_data, 0, sizeof(filter->temp_state_state_data));
 80015f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80015f8:	2240      	movs	r2, #64	@ 0x40
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00b fc81 	bl	800cf04 <memset>
    memset(filter->temp_output_state_data, 0, sizeof(filter->temp_output_state_data));
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8001608:	2210      	movs	r2, #16
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f00b fc79 	bl	800cf04 <memset>
    memset(filter->temp_output_output_data, 0, sizeof(filter->temp_output_output_data));
 8001612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001614:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001618:	2204      	movs	r2, #4
 800161a:	2100      	movs	r1, #0
 800161c:	4618      	mov	r0, r3
 800161e:	f00b fc71 	bl	800cf04 <memset>
    memset(filter->temp_state_output_data, 0, sizeof(filter->temp_state_output_data));
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001628:	2210      	movs	r2, #16
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f00b fc69 	bl	800cf04 <memset>
    memset(filter->measurement_data, 0, sizeof(filter->measurement_data));
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8001638:	2204      	movs	r2, #4
 800163a:	2100      	movs	r1, #0
 800163c:	4618      	mov	r0, r3
 800163e:	f00b fc61 	bl	800cf04 <memset>
    memset(filter->input_data, 0, sizeof(filter->input_data));
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8001648:	2204      	movs	r2, #4
 800164a:	2100      	movs	r1, #0
 800164c:	4618      	mov	r0, r3
 800164e:	f00b fc59 	bl	800cf04 <memset>
    memset(filter->A_transpose_data, 0, sizeof(filter->A_transpose_data));
 8001652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001654:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8001658:	2240      	movs	r2, #64	@ 0x40
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f00b fc51 	bl	800cf04 <memset>
    memset(filter->C_transpose_data, 0, sizeof(filter->C_transpose_data));
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8001668:	2210      	movs	r2, #16
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f00b fc49 	bl	800cf04 <memset>

    // Initialize ARM CMSIS DSP matrix instances
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8001672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001674:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	2201      	movs	r2, #1
 800167c:	2104      	movs	r1, #4
 800167e:	f00a fed0 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8001682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001684:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8001688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800168a:	3310      	adds	r3, #16
 800168c:	2204      	movs	r2, #4
 800168e:	2104      	movs	r1, #4
 8001690:	f00a fec7 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8001694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001696:	f503 7044 	add.w	r0, r3, #784	@ 0x310
 800169a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169c:	f503 7346 	add.w	r3, r3, #792	@ 0x318
 80016a0:	2204      	movs	r2, #4
 80016a2:	2104      	movs	r1, #4
 80016a4:	f00a febd 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->C);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	33f0      	adds	r3, #240	@ 0xf0
 80016b2:	2204      	movs	r2, #4
 80016b4:	2101      	movs	r1, #1
 80016b6:	f00a feb4 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016bc:	f503 70f6 	add.w	r0, r3, #492	@ 0x1ec
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80016c6:	2201      	movs	r2, #1
 80016c8:	2101      	movs	r1, #1
 80016ca:	f00a feaa 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 80016ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d0:	f503 703e 	add.w	r0, r3, #760	@ 0x2f8
 80016d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d6:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 80016da:	2201      	movs	r2, #1
 80016dc:	2101      	movs	r1, #1
 80016de:	f00a fea0 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80016e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e4:	f503 7040 	add.w	r0, r3, #768	@ 0x300
 80016e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ea:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 80016ee:	2201      	movs	r2, #1
 80016f0:	2101      	movs	r1, #1
 80016f2:	f00a fe96 	bl	800c422 <arm_mat_init_f32>

    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	f503 70fe 	add.w	r0, r3, #508	@ 0x1fc
 80016fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fe:	f503 7303 	add.w	r3, r3, #524	@ 0x20c
 8001702:	2204      	movs	r2, #4
 8001704:	2104      	movs	r1, #4
 8001706:	f00a fe8c 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	f503 7001 	add.w	r0, r3, #516	@ 0x204
 8001710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001712:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8001716:	2201      	movs	r2, #1
 8001718:	2104      	movs	r1, #4
 800171a:	f00a fe82 	bl	800c422 <arm_mat_init_f32>

    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 800171e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001720:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8001724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001726:	f503 7321 	add.w	r3, r3, #644	@ 0x284
 800172a:	2201      	movs	r2, #1
 800172c:	2104      	movs	r1, #4
 800172e:	f00a fe78 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	f503 7019 	add.w	r0, r3, #612	@ 0x264
 8001738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800173e:	2204      	movs	r2, #4
 8001740:	2104      	movs	r1, #4
 8001742:	f00a fe6e 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	f503 701b 	add.w	r0, r3, #620	@ 0x26c
 800174c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174e:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8001752:	2204      	movs	r2, #4
 8001754:	2101      	movs	r1, #1
 8001756:	f00a fe64 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	f503 701d 	add.w	r0, r3, #628	@ 0x274
 8001760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001762:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001766:	2201      	movs	r2, #1
 8001768:	2101      	movs	r1, #1
 800176a:	f00a fe5a 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	f503 701f 	add.w	r0, r3, #636	@ 0x27c
 8001774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001776:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800177a:	2201      	movs	r2, #1
 800177c:	2104      	movs	r1, #4
 800177e:	f00a fe50 	bl	800c422 <arm_mat_init_f32>

    // Discretize the model for digital implementation
    MotorKalman_DiscretizeModel(filter);
 8001782:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001784:	f000 f848 	bl	8001818 <MotorKalman_DiscretizeModel>

    // Initialize system matrices
    arm_mat_init_f32(&filter->A_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A);
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800178e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001790:	3350      	adds	r3, #80	@ 0x50
 8001792:	2204      	movs	r2, #4
 8001794:	2104      	movs	r1, #4
 8001796:	f00a fe44 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 80017a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a2:	3390      	adds	r3, #144	@ 0x90
 80017a4:	2204      	movs	r2, #4
 80017a6:	2104      	movs	r1, #4
 80017a8:	f00a fe3b 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B);
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b4:	33d0      	adds	r3, #208	@ 0xd0
 80017b6:	2201      	movs	r2, #1
 80017b8:	2104      	movs	r1, #4
 80017ba:	f00a fe32 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 80017c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c6:	33e0      	adds	r3, #224	@ 0xe0
 80017c8:	2201      	movs	r2, #1
 80017ca:	2104      	movs	r1, #4
 80017cc:	f00a fe29 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q);
 80017d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d2:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80017d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d8:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80017dc:	2204      	movs	r2, #4
 80017de:	2104      	movs	r1, #4
 80017e0:	f00a fe1f 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 80017e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e6:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80017ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80017f0:	2204      	movs	r2, #4
 80017f2:	2104      	movs	r1, #4
 80017f4:	f00a fe15 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	f503 70fa 	add.w	r0, r3, #500	@ 0x1f4
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001804:	2201      	movs	r2, #1
 8001806:	2104      	movs	r1, #4
 8001808:	f00a fe0b 	bl	800c422 <arm_mat_init_f32>
}
 800180c:	bf00      	nop
 800180e:	3730      	adds	r7, #48	@ 0x30
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	42c80000 	.word	0x42c80000

08001818 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
    // Create the continuous time model before discretization
    // Initialize continuous time state matrix A
    memset(filter->A, 0, sizeof(filter->A));
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3350      	adds	r3, #80	@ 0x50
 8001824:	2240      	movs	r2, #64	@ 0x40
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f00b fb6b 	bl	800cf04 <memset>

    // Fill in A matrix based on the physics of the DC motor
    filter->A[0 * MOTOR_KALMAN_NUM_STATES + 1] = 1.0f; // dx1/dt = x2 (position derivative = velocity)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001834:	655a      	str	r2, [r3, #84]	@ 0x54
    filter->A[1 * MOTOR_KALMAN_NUM_STATES + 1] = -filter->b / filter->J; // Friction term
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	edd3 7ad8 	vldr	s15, [r3, #864]	@ 0x360
 800183c:	eef1 6a67 	vneg.f32	s13, s15
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	ed93 7ad7 	vldr	s14, [r3, #860]	@ 0x35c
 8001846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64
    filter->A[1 * MOTOR_KALMAN_NUM_STATES + 2] = -1.0f / filter->J; // Load torque term
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	ed93 7ad7 	vldr	s14, [r3, #860]	@ 0x35c
 8001856:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800185a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68
    filter->A[1 * MOTOR_KALMAN_NUM_STATES + 3] = filter->K_t / filter->J; // Motor torque term
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	edd3 6ad9 	vldr	s13, [r3, #868]	@ 0x364
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	ed93 7ad7 	vldr	s14, [r3, #860]	@ 0x35c
 8001870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	edc3 7a1b 	vstr	s15, [r3, #108]	@ 0x6c
    filter->A[3 * MOTOR_KALMAN_NUM_STATES + 1] = -filter->K_e / filter->L_a; // Back-EMF term
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	edd3 7ada 	vldr	s15, [r3, #872]	@ 0x368
 8001880:	eef1 6a67 	vneg.f32	s13, s15
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	ed93 7adc 	vldr	s14, [r3, #880]	@ 0x370
 800188a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	edc3 7a21 	vstr	s15, [r3, #132]	@ 0x84
    filter->A[3 * MOTOR_KALMAN_NUM_STATES + 3] = -filter->R_a / filter->L_a; // Armature resistance term
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	edd3 7adb 	vldr	s15, [r3, #876]	@ 0x36c
 800189a:	eef1 6a67 	vneg.f32	s13, s15
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	ed93 7adc 	vldr	s14, [r3, #880]	@ 0x370
 80018a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c

    // Initialize continuous time input matrix B
    memset(filter->B, 0, sizeof(filter->B));
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	33d0      	adds	r3, #208	@ 0xd0
 80018b2:	2210      	movs	r2, #16
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f00b fb24 	bl	800cf04 <memset>
    filter->B[3] = 1.0f / filter->L_a; // Voltage affects current: dI/dt = V/L - R*I/L - K*ω/L
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	ed93 7adc 	vldr	s14, [r3, #880]	@ 0x370
 80018c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc

    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	edd3 7adb 	vldr	s15, [r3, #876]	@ 0x36c
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	ed93 7adc 	vldr	s14, [r3, #880]	@ 0x370
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	edd3 6ad7 	vldr	s13, [r3, #860]	@ 0x35c
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	ed93 6ad8 	vldr	s12, [r3, #864]	@ 0x360
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	edd3 5ada 	vldr	s11, [r3, #872]	@ 0x368
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	ed93 5ad9 	vldr	s10, [r3, #868]	@ 0x364
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	edd3 4ad6 	vldr	s9, [r3, #856]	@ 0x358
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8001904:	4619      	mov	r1, r3
 8001906:	4610      	mov	r0, r2
 8001908:	eeb0 3a64 	vmov.f32	s6, s9
 800190c:	eef0 2a45 	vmov.f32	s5, s10
 8001910:	eeb0 2a65 	vmov.f32	s4, s11
 8001914:	eef0 1a46 	vmov.f32	s3, s12
 8001918:	eeb0 1a66 	vmov.f32	s2, s13
 800191c:	eef0 0a47 	vmov.f32	s1, s14
 8001920:	eeb0 0a67 	vmov.f32	s0, s15
 8001924:	f000 fc90 	bl	8002248 <GenerateMotorMatrices>
    );

    // Process noise discretization - simple approximation
    // Initialize discrete Q matrix with zeros
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800192e:	2240      	movs	r2, #64	@ 0x40
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f00b fae6 	bl	800cf04 <memset>

    // Set the process noise for the load torque state
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	edd3 7ad6 	vldr	s15, [r3, #856]	@ 0x358
 8001944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001968:	2240      	movs	r2, #64	@ 0x40
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f00b fac9 	bl	800cf04 <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8001972:	edd7 7a00 	vldr	s15, [r7]
 8001976:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	f8c3 2374 	str.w	r2, [r3, #884]	@ 0x374

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 800198e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	d107      	bne.n	80019a8 <MotorKalman_SetProcessNoise+0x52>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 800199e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a6:	d00a      	beq.n	80019be <MotorKalman_SetProcessNoise+0x68>
        // Just update the Q_d part without full discretization
        filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	edd3 7ad6 	vldr	s15, [r3, #856]	@ 0x358
 80019b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    }
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80019d2:	ed97 0a00 	vldr	s0, [r7]
 80019d6:	f00b fad9 	bl	800cf8c <sqrtf>
 80019da:	eef0 7a40 	vmov.f32	s15, s0
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	edc3 7ade 	vstr	s15, [r3, #888]	@ 0x378

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <MotorKalman_Predict>:
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

// Simplified version of the predict step
void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80019f4:	b480      	push	{r7}
 80019f6:	b08d      	sub	sp, #52	@ 0x34
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c

    // 1. State prediction: x = A*x + B*u
    float32_t temp_x[MOTOR_KALMAN_NUM_STATES] = {0};
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]

    // Calculate A*x
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a1a:	e035      	b.n	8001a88 <MotorKalman_Predict+0x94>
        temp_x[i] = 0;
 8001a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	3330      	adds	r3, #48	@ 0x30
 8001a22:	443b      	add	r3, r7
 8001a24:	3b24      	subs	r3, #36	@ 0x24
 8001a26:	f04f 0200 	mov.w	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a30:	e024      	b.n	8001a7c <MotorKalman_Predict+0x88>
            temp_x[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8001a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	3330      	adds	r3, #48	@ 0x30
 8001a38:	443b      	add	r3, r7
 8001a3a:	3b24      	subs	r3, #36	@ 0x24
 8001a3c:	ed93 7a00 	vldr	s14, [r3]
 8001a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a42:	009a      	lsls	r2, r3, #2
 8001a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a46:	4413      	add	r3, r2
 8001a48:	687a      	ldr	r2, [r7, #4]
 8001a4a:	3324      	adds	r3, #36	@ 0x24
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	edd3 6a00 	vldr	s13, [r3]
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	4413      	add	r3, r2
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	3330      	adds	r3, #48	@ 0x30
 8001a6e:	443b      	add	r3, r7
 8001a70:	3b24      	subs	r3, #36	@ 0x24
 8001a72:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a78:	3301      	adds	r3, #1
 8001a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	ddd7      	ble.n	8001a32 <MotorKalman_Predict+0x3e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a84:	3301      	adds	r3, #1
 8001a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	ddc6      	ble.n	8001a1c <MotorKalman_Predict+0x28>
        }
    }

    // Add B*u
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a92:	e01c      	b.n	8001ace <MotorKalman_Predict+0xda>
        filter->X[i] = temp_x[i] + filter->B_d[i] * voltage_input;
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	3330      	adds	r3, #48	@ 0x30
 8001a9a:	443b      	add	r3, r7
 8001a9c:	3b24      	subs	r3, #36	@ 0x24
 8001a9e:	ed93 7a00 	vldr	s14, [r3]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa6:	3338      	adds	r3, #56	@ 0x38
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	edd3 6a00 	vldr	s13, [r3]
 8001ab0:	edd7 7a00 	vldr	s15, [r7]
 8001ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4413      	add	r3, r2
 8001ac4:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aca:	3301      	adds	r3, #1
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	dddf      	ble.n	8001a94 <MotorKalman_Predict+0xa0>
    }

    // 2. Covariance prediction: P = A*P*A' + Q
    // Use a simple approximation for covariance update to avoid matrix operations
    // This is a simplification that works for most practical cases
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
 8001ad8:	e023      	b.n	8001b22 <MotorKalman_Predict+0x12e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
 8001ade:	e01a      	b.n	8001b16 <MotorKalman_Predict+0x122>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] *= 1.01f; // Simple inflation of covariance
 8001ae0:	6a3b      	ldr	r3, [r7, #32]
 8001ae2:	009a      	lsls	r2, r3, #2
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	3304      	adds	r3, #4
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	009a      	lsls	r2, r3, #2
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	4413      	add	r3, r2
 8001afc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001b74 <MotorKalman_Predict+0x180>
 8001b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	3304      	adds	r3, #4
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	4413      	add	r3, r2
 8001b0c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	3301      	adds	r3, #1
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	dde1      	ble.n	8001ae0 <MotorKalman_Predict+0xec>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	623b      	str	r3, [r7, #32]
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	ddd8      	ble.n	8001ada <MotorKalman_Predict+0xe6>
        }
    }

    // Add process noise Q to diagonal
    filter->P[1 * MOTOR_KALMAN_NUM_STATES + 1] += filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1];
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	edd3 7a59 	vldr	s15, [r3, #356]	@ 0x164
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Update state estimates
    filter->position = filter->X[0];
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
    filter->velocity = filter->X[1];
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
    filter->load_torque = filter->X[2];
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
    filter->current = filter->X[3];
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
}
 8001b66:	bf00      	nop
 8001b68:	3734      	adds	r7, #52	@ 0x34
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	3f8147ae 	.word	0x3f8147ae

08001b78 <MotorKalman_Update>:

// Simplified version of the update step
void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8001b78:	b480      	push	{r7}
 8001b7a:	b08d      	sub	sp, #52	@ 0x34
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	ed87 0a00 	vstr	s0, [r7]
    // We're only measuring position (the first state)
    float32_t innovation = position - filter->X[0];
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	edd3 7a00 	vldr	s15, [r3]
 8001b8a:	ed97 7a00 	vldr	s14, [r7]
 8001b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b92:	edc7 7a07 	vstr	s15, [r7, #28]

    // Calculate Kalman gain for position measurement
    // This is a simplified version that assumes we only measure position
    float32_t S = filter->P[0] + filter->R[0];  // Innovation covariance
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8001ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ba6:	edc7 7a06 	vstr	s15, [r7, #24]

    // Simplified Kalman gain calculation (K = P*C'/S)
    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8001baa:	f107 0308 	add.w	r3, r7, #8
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bbc:	e015      	b.n	8001bea <MotorKalman_Update+0x72>
        K[i] = filter->P[i * MOTOR_KALMAN_NUM_STATES + 0] / S;
 8001bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	edd3 6a00 	vldr	s13, [r3]
 8001bce:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	3330      	adds	r3, #48	@ 0x30
 8001bdc:	443b      	add	r3, r7
 8001bde:	3b28      	subs	r3, #40	@ 0x28
 8001be0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be6:	3301      	adds	r3, #1
 8001be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	dde6      	ble.n	8001bbe <MotorKalman_Update+0x46>
    }

    // Update state estimate: x = x + K*(z - H*x)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bf4:	e01b      	b.n	8001c2e <MotorKalman_Update+0xb6>
        filter->X[i] += K[i] * innovation;
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	ed93 7a00 	vldr	s14, [r3]
 8001c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	3330      	adds	r3, #48	@ 0x30
 8001c08:	443b      	add	r3, r7
 8001c0a:	3b28      	subs	r3, #40	@ 0x28
 8001c0c:	edd3 6a00 	vldr	s13, [r3]
 8001c10:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4413      	add	r3, r2
 8001c24:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	dde0      	ble.n	8001bf6 <MotorKalman_Update+0x7e>
    }

    // Update covariance matrix: P = (I - K*H)*P
    // Simplified for position-only measurement
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c38:	e031      	b.n	8001c9e <MotorKalman_Update+0x126>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
 8001c3e:	e028      	b.n	8001c92 <MotorKalman_Update+0x11a>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] -= K[i] * filter->P[0 * MOTOR_KALMAN_NUM_STATES + j];
 8001c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c42:	009a      	lsls	r2, r3, #2
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	4413      	add	r3, r2
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	4413      	add	r3, r2
 8001c50:	ed93 7a00 	vldr	s14, [r3]
 8001c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	3330      	adds	r3, #48	@ 0x30
 8001c5a:	443b      	add	r3, r7
 8001c5c:	3b28      	subs	r3, #40	@ 0x28
 8001c5e:	edd3 6a00 	vldr	s13, [r3]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	3304      	adds	r3, #4
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c76:	009a      	lsls	r2, r3, #2
 8001c78:	6a3b      	ldr	r3, [r7, #32]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	3304      	adds	r3, #4
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	623b      	str	r3, [r7, #32]
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	ddd3      	ble.n	8001c40 <MotorKalman_Update+0xc8>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	ddca      	ble.n	8001c3a <MotorKalman_Update+0xc2>
        }
    }

    // Update state estimates
    filter->position = filter->X[0];
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
    filter->velocity = filter->X[1];
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
    filter->load_torque = filter->X[2];
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
    filter->current = filter->X[3];
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
}
 8001ccc:	bf00      	nop
 8001cce:	3734      	adds	r7, #52	@ 0x34
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <MotorKalman_Estimate>:

float32_t MotorKalman_GetCurrent(MotorKalman* filter) {
    return filter->X[3];
}

void MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ce4:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8001ce8:	ed97 0a02 	vldr	s0, [r7, #8]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fe81 	bl	80019f4 <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8001cf2:	ed97 0a01 	vldr	s0, [r7, #4]
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7ff ff3e 	bl	8001b78 <MotorKalman_Update>
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	e00c      	b.n	8001d30 <matrix_copy+0x2c>
        dst[i] = src[i];
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	441a      	add	r2, r3
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	68b9      	ldr	r1, [r7, #8]
 8001d24:	440b      	add	r3, r1
 8001d26:	6812      	ldr	r2, [r2, #0]
 8001d28:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	dbee      	blt.n	8001d16 <matrix_copy+0x12>
    }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	371c      	adds	r7, #28
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8001d54:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8001d58:	6020      	str	r0, [r4, #0]
 8001d5a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8001d5e:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8001d62:	6001      	str	r1, [r0, #0]
 8001d64:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8001d68:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8001d6c:	ed81 0a00 	vstr	s0, [r1]
 8001d70:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8001d74:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8001d78:	600a      	str	r2, [r1, #0]
 8001d7a:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8001d7e:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8001d82:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8001d84:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d88:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8001d8c:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2204      	movs	r2, #4
 8001d94:	2104      	movs	r1, #4
 8001d96:	f00a fb44 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8001d9a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001d9e:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8001da2:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2204      	movs	r2, #4
 8001daa:	2104      	movs	r1, #4
 8001dac:	f00a fb39 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8001db0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001db4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8001db8:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	f00a fb2e 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8001dc6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001dca:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8001dce:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2104      	movs	r1, #4
 8001dd8:	f00a fb23 	bl	800c422 <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8001ddc:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8001de0:	2240      	movs	r2, #64	@ 0x40
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f00b f88d 	bl	800cf04 <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8001dea:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8001dee:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8001df2:	2204      	movs	r2, #4
 8001df4:	2104      	movs	r1, #4
 8001df6:	f00a fb14 	bl	800c422 <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001e00:	e011      	b.n	8001e26 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8001e02:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8001e12:	443b      	add	r3, r7
 8001e14:	3b6c      	subs	r3, #108	@ 0x6c
 8001e16:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001e1a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8001e1c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001e20:	3301      	adds	r3, #1
 8001e22:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001e26:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	dde9      	ble.n	8001e02 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8001e2e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001e32:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8001e36:	2204      	movs	r2, #4
 8001e38:	2104      	movs	r1, #4
 8001e3a:	f00a faf2 	bl	800c422 <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8001e3e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8001e42:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001e46:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001e4a:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8001e4e:	ed93 0a00 	vldr	s0, [r3]
 8001e52:	4610      	mov	r0, r2
 8001e54:	f00a feee 	bl	800cc34 <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8001e58:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001e5c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8001e60:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8001e64:	2210      	movs	r2, #16
 8001e66:	6819      	ldr	r1, [r3, #0]
 8001e68:	f7ff ff4c 	bl	8001d04 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8001e6c:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8001e70:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8001e74:	2204      	movs	r2, #4
 8001e76:	2104      	movs	r1, #4
 8001e78:	f00a fad3 	bl	800c422 <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8001e7c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001e80:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8001e84:	2204      	movs	r2, #4
 8001e86:	2104      	movs	r1, #4
 8001e88:	f00a facb 	bl	800c422 <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8001e8c:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8001e90:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8001e94:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f00a fa87 	bl	800c3ac <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8001e9e:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8001ea2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff2b 	bl	8001d04 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8001eae:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001eb2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8001ebc:	e03a      	b.n	8001f34 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8001ebe:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eca:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8001ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed2:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8001ed6:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001eda:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8001ede:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f00a fe2c 	bl	800cb40 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8001ee8:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8001eec:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff06 	bl	8001d04 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8001ef8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001efc:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8001f00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f04:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8001f08:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8001f0c:	4611      	mov	r1, r2
 8001f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8001f12:	4618      	mov	r0, r3
 8001f14:	f00a fe8e 	bl	800cc34 <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8001f18:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8001f1c:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8001f20:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8001f24:	4618      	mov	r0, r3
 8001f26:	f00a fa41 	bl	800c3ac <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8001f2a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8001f34:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8001f38:	2b0a      	cmp	r3, #10
 8001f3a:	ddc0      	ble.n	8001ebe <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8001f3c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8001f40:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f44:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001f48:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8001f4c:	ed93 0a00 	vldr	s0, [r3]
 8001f50:	4610      	mov	r0, r2
 8001f52:	f00a fe6f 	bl	800cc34 <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8001f56:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001f5a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2300      	movs	r3, #0
 8001f62:	6013      	str	r3, [r2, #0]
 8001f64:	6053      	str	r3, [r2, #4]
 8001f66:	6093      	str	r3, [r2, #8]
 8001f68:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8001f6a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8001f6e:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8001f72:	2201      	movs	r2, #1
 8001f74:	2104      	movs	r1, #4
 8001f76:	f00a fa54 	bl	800c422 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8001f7a:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8001f7e:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001f82:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8001f86:	4618      	mov	r0, r3
 8001f88:	f00a fdda 	bl	800cb40 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8001f8c:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001f90:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8001f94:	2201      	movs	r2, #1
 8001f96:	2104      	movs	r1, #4
 8001f98:	f00a fa43 	bl	800c422 <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8001f9c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001fa0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001fac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001fb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fb4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8001fb8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	eeb0 0a47 	vmov.f32	s0, s14
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f00a fe36 	bl	800cc34 <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8001fc8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8001fcc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8001fd0:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f00a f9e9 	bl	800c3ac <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8001fda:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8001fde:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	2340      	movs	r3, #64	@ 0x40
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	2100      	movs	r1, #0
 8001fea:	f00a ff8b 	bl	800cf04 <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 8001fee:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8001ff2:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8001ff6:	2204      	movs	r2, #4
 8001ff8:	2104      	movs	r1, #4
 8001ffa:	f00a fa12 	bl	800c422 <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 8001ffe:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8002002:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002006:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800200a:	4618      	mov	r0, r3
 800200c:	f00a fd98 	bl	800cb40 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8002010:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002014:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002018:	461a      	mov	r2, r3
 800201a:	2300      	movs	r3, #0
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	6053      	str	r3, [r2, #4]
 8002020:	6093      	str	r3, [r2, #8]
 8002022:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8002024:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002028:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800202c:	2201      	movs	r2, #1
 800202e:	2104      	movs	r1, #4
 8002030:	f00a f9f7 	bl	800c422 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8002034:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8002038:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800203c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002040:	4618      	mov	r0, r3
 8002042:	f00a fd7d 	bl	800cb40 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8002046:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800204a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800204e:	edd3 7a00 	vldr	s15, [r3]
 8002052:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002056:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800205a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800206a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800206e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002072:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002076:	4611      	mov	r1, r2
 8002078:	eeb0 0a47 	vmov.f32	s0, s14
 800207c:	4618      	mov	r0, r3
 800207e:	f00a fdd9 	bl	800cc34 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002082:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002086:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800208a:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800208e:	4618      	mov	r0, r3
 8002090:	f00a f98c 	bl	800c3ac <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8002094:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002098:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 800209c:	4618      	mov	r0, r3
 800209e:	2340      	movs	r3, #64	@ 0x40
 80020a0:	461a      	mov	r2, r3
 80020a2:	2100      	movs	r1, #0
 80020a4:	f00a ff2e 	bl	800cf04 <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80020a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80020ac:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80020b0:	2204      	movs	r2, #4
 80020b2:	2104      	movs	r1, #4
 80020b4:	f00a f9b5 	bl	800c422 <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80020b8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80020bc:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80020c0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80020c4:	4618      	mov	r0, r3
 80020c6:	f00a fd3b 	bl	800cb40 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80020ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80020ce:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80020d2:	461a      	mov	r2, r3
 80020d4:	2300      	movs	r3, #0
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	6053      	str	r3, [r2, #4]
 80020da:	6093      	str	r3, [r2, #8]
 80020dc:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80020de:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80020e2:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80020e6:	2201      	movs	r2, #1
 80020e8:	2104      	movs	r1, #4
 80020ea:	f00a f99a 	bl	800c422 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 80020ee:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80020f2:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80020f6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80020fa:	4618      	mov	r0, r3
 80020fc:	f00a fd20 	bl	800cb40 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8002100:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002104:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002110:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002114:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002120:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002124:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002128:	edd3 7a00 	vldr	s15, [r3]
 800212c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002130:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8002134:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002138:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800213c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002140:	4611      	mov	r1, r2
 8002142:	eeb0 0a47 	vmov.f32	s0, s14
 8002146:	4618      	mov	r0, r3
 8002148:	f00a fd74 	bl	800cc34 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800214c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002150:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002154:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002158:	4618      	mov	r0, r3
 800215a:	f00a f927 	bl	800c3ac <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800215e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002162:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002166:	4618      	mov	r0, r3
 8002168:	2340      	movs	r3, #64	@ 0x40
 800216a:	461a      	mov	r2, r3
 800216c:	2100      	movs	r1, #0
 800216e:	f00a fec9 	bl	800cf04 <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8002172:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002176:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800217a:	2204      	movs	r2, #4
 800217c:	2104      	movs	r1, #4
 800217e:	f00a f950 	bl	800c422 <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8002182:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002186:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800218a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800218e:	4618      	mov	r0, r3
 8002190:	f00a fcd6 	bl	800cb40 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8002194:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002198:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 800219c:	461a      	mov	r2, r3
 800219e:	2300      	movs	r3, #0
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	6053      	str	r3, [r2, #4]
 80021a4:	6093      	str	r3, [r2, #8]
 80021a6:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80021a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ac:	f107 001c 	add.w	r0, r7, #28
 80021b0:	2201      	movs	r2, #1
 80021b2:	2104      	movs	r1, #4
 80021b4:	f00a f935 	bl	800c422 <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80021b8:	f107 021c 	add.w	r2, r7, #28
 80021bc:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80021c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80021c4:	4618      	mov	r0, r3
 80021c6:	f00a fcbb 	bl	800cb40 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80021ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80021ce:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80021d2:	edd3 7a00 	vldr	s15, [r3]
 80021d6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80021da:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80021de:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80021e2:	edd3 7a00 	vldr	s15, [r3]
 80021e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ea:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80021ee:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021fa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80021fe:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002202:	edd3 7a00 	vldr	s15, [r3]
 8002206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800220a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002244 <discretize_system_with_arm+0x4fc>
 800220e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002212:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002216:	f107 031c 	add.w	r3, r7, #28
 800221a:	4611      	mov	r1, r2
 800221c:	eeb0 0a47 	vmov.f32	s0, s14
 8002220:	4618      	mov	r0, r3
 8002222:	f00a fd07 	bl	800cc34 <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002226:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800222a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800222e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002232:	4618      	mov	r0, r3
 8002234:	f00a f8ba 	bl	800c3ac <arm_mat_add_f32>
}
 8002238:	bf00      	nop
 800223a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800223e:	46bd      	mov	sp, r7
 8002240:	bd90      	pop	{r4, r7, pc}
 8002242:	bf00      	nop
 8002244:	42f00000 	.word	0x42f00000

08002248 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8002248:	b580      	push	{r7, lr}
 800224a:	b09e      	sub	sp, #120	@ 0x78
 800224c:	af00      	add	r7, sp, #0
 800224e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8002252:	edc7 0a08 	vstr	s1, [r7, #32]
 8002256:	ed87 1a07 	vstr	s2, [r7, #28]
 800225a:	edc7 1a06 	vstr	s3, [r7, #24]
 800225e:	ed87 2a05 	vstr	s4, [r7, #20]
 8002262:	edc7 2a04 	vstr	s5, [r7, #16]
 8002266:	ed87 3a03 	vstr	s6, [r7, #12]
 800226a:	60b8      	str	r0, [r7, #8]
 800226c:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800226e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002272:	2240      	movs	r2, #64	@ 0x40
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f00a fe44 	bl	800cf04 <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 800227c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 800228a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800228e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8002290:	edd7 7a06 	vldr	s15, [r7, #24]
 8002294:	eef1 6a67 	vneg.f32	s13, s15
 8002298:	ed97 7a07 	vldr	s14, [r7, #28]
 800229c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80022a4:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80022a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80022ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80022b4:	edd7 6a04 	vldr	s13, [r7, #16]
 80022b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80022bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022c0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80022c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80022c8:	eef1 6a67 	vneg.f32	s13, s15
 80022cc:	ed97 7a08 	vldr	s14, [r7, #32]
 80022d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d4:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 80022d8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80022dc:	eef1 6a67 	vneg.f32	s13, s15
 80022e0:	ed97 7a08 	vldr	s14, [r7, #32]
 80022e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e8:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 80022ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022f0:	ed97 7a08 	vldr	s14, [r7, #32]
 80022f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80022fc:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002300:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68ba      	ldr	r2, [r7, #8]
 8002308:	ed97 0a03 	vldr	s0, [r7, #12]
 800230c:	f7ff fd1c 	bl	8001d48 <discretize_system_with_arm>
}
 8002310:	bf00      	nop
 8002312:	3778      	adds	r7, #120	@ 0x78
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	4613      	mov	r3, r2
 8002324:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	4a0b      	ldr	r2, [pc, #44]	@ (8002358 <PWM_init+0x40>)
 800232a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	88fa      	ldrh	r2, [r7, #6]
 8002336:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800233e:	68b8      	ldr	r0, [r7, #8]
 8002340:	f006 f98a 	bl	8008658 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	4619      	mov	r1, r3
 8002348:	68b8      	ldr	r0, [r7, #8]
 800234a:	f006 fad1 	bl	80088f0 <HAL_TIM_PWM_Start>
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	0a21fe80 	.word	0x0a21fe80

0800235c <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 800235c:	b5b0      	push	{r4, r5, r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	ed87 0a02 	vstr	s0, [r7, #8]
 8002368:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 800236c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002370:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	d137      	bne.n	80023ea <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	889b      	ldrh	r3, [r3, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d105      	bne.n	800238e <PWM_write_duty+0x32>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2200      	movs	r2, #0
 800238a:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 800238c:	e0e1      	b.n	8002552 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	889b      	ldrh	r3, [r3, #4]
 8002392:	2b04      	cmp	r3, #4
 8002394:	d105      	bne.n	80023a2 <PWM_write_duty+0x46>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2300      	movs	r3, #0
 800239e:	6393      	str	r3, [r2, #56]	@ 0x38
 80023a0:	e0d7      	b.n	8002552 <PWM_write_duty+0x1f6>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	889b      	ldrh	r3, [r3, #4]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d105      	bne.n	80023b6 <PWM_write_duty+0x5a>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2300      	movs	r3, #0
 80023b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80023b4:	e0cd      	b.n	8002552 <PWM_write_duty+0x1f6>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	889b      	ldrh	r3, [r3, #4]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d105      	bne.n	80023ca <PWM_write_duty+0x6e>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2300      	movs	r3, #0
 80023c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c8:	e0c3      	b.n	8002552 <PWM_write_duty+0x1f6>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	889b      	ldrh	r3, [r3, #4]
 80023ce:	2b10      	cmp	r3, #16
 80023d0:	d105      	bne.n	80023de <PWM_write_duty+0x82>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	2300      	movs	r3, #0
 80023da:	6493      	str	r3, [r2, #72]	@ 0x48
 80023dc:	e0b9      	b.n	8002552 <PWM_write_duty+0x1f6>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2300      	movs	r3, #0
 80023e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80023e8:	e0b3      	b.n	8002552 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80023fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002402:	ee17 2a90 	vmov	r2, s15
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8002412:	33fe      	adds	r3, #254	@ 0xfe
 8002414:	4a51      	ldr	r2, [pc, #324]	@ (800255c <PWM_write_duty+0x200>)
 8002416:	fba2 2303 	umull	r2, r3, r2, r3
 800241a:	0bdb      	lsrs	r3, r3, #15
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	ee07 3a90 	vmov	s15, r3
 800242e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	899b      	ldrh	r3, [r3, #12]
 8002436:	3301      	adds	r3, #1
 8002438:	ee07 3a90 	vmov	s15, r3
 800243c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002440:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002444:	ed97 7a02 	vldr	s14, [r7, #8]
 8002448:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800244c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002458:	ee17 3a90 	vmov	r3, s15
 800245c:	b29a      	uxth	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	89db      	ldrh	r3, [r3, #14]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe f828 	bl	80004bc <__aeabi_i2d>
 800246c:	4604      	mov	r4, r0
 800246e:	460d      	mov	r5, r1
 8002470:	edd7 7a01 	vldr	s15, [r7, #4]
 8002474:	eef0 7ae7 	vabs.f32	s15, s15
 8002478:	ee17 0a90 	vmov	r0, s15
 800247c:	f7fe f830 	bl	80004e0 <__aeabi_f2d>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4620      	mov	r0, r4
 8002486:	4629      	mov	r1, r5
 8002488:	f7fe f882 	bl	8000590 <__aeabi_dmul>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <PWM_write_duty+0x204>)
 800249a:	f7fe f9a3 	bl	80007e4 <__aeabi_ddiv>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	f7fe fa85 	bl	80009b4 <__aeabi_d2uiz>
 80024aa:	4603      	mov	r3, r0
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	461a      	mov	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	899a      	ldrh	r2, [r3, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	89da      	ldrh	r2, [r3, #14]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	89da      	ldrh	r2, [r3, #14]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	889b      	ldrh	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d106      	bne.n	80024ec <PWM_write_duty+0x190>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	6952      	ldr	r2, [r2, #20]
 80024e8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80024ea:	e032      	b.n	8002552 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	889b      	ldrh	r3, [r3, #4]
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d106      	bne.n	8002502 <PWM_write_duty+0x1a6>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002500:	e027      	b.n	8002552 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	889b      	ldrh	r3, [r3, #4]
 8002506:	2b08      	cmp	r3, #8
 8002508:	d106      	bne.n	8002518 <PWM_write_duty+0x1bc>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002516:	e01c      	b.n	8002552 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	889b      	ldrh	r3, [r3, #4]
 800251c:	2b0c      	cmp	r3, #12
 800251e:	d106      	bne.n	800252e <PWM_write_duty+0x1d2>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800252c:	e011      	b.n	8002552 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	889b      	ldrh	r3, [r3, #4]
 8002532:	2b10      	cmp	r3, #16
 8002534:	d106      	bne.n	8002544 <PWM_write_duty+0x1e8>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8002542:	e006      	b.n	8002552 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002550:	e7ff      	b.n	8002552 <PWM_write_duty+0x1f6>
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bdb0      	pop	{r4, r5, r7, pc}
 800255a:	bf00      	nop
 800255c:	80008001 	.word	0x80008001
 8002560:	40590000 	.word	0x40590000
 8002564:	00000000 	.word	0x00000000

08002568 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8002568:	b5b0      	push	{r4, r5, r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	ed87 0a02 	vstr	s0, [r7, #8]
 8002574:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8002578:	edd7 7a02 	vldr	s15, [r7, #8]
 800257c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002584:	d137      	bne.n	80025f6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	889b      	ldrh	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <PWM_write_range+0x32>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2200      	movs	r2, #0
 8002596:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002598:	e0e1      	b.n	800275e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	889b      	ldrh	r3, [r3, #4]
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d105      	bne.n	80025ae <PWM_write_range+0x46>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	2300      	movs	r3, #0
 80025aa:	6393      	str	r3, [r2, #56]	@ 0x38
 80025ac:	e0d7      	b.n	800275e <PWM_write_range+0x1f6>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	889b      	ldrh	r3, [r3, #4]
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d105      	bne.n	80025c2 <PWM_write_range+0x5a>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2300      	movs	r3, #0
 80025be:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80025c0:	e0cd      	b.n	800275e <PWM_write_range+0x1f6>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	889b      	ldrh	r3, [r3, #4]
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d105      	bne.n	80025d6 <PWM_write_range+0x6e>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	2300      	movs	r3, #0
 80025d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d4:	e0c3      	b.n	800275e <PWM_write_range+0x1f6>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	889b      	ldrh	r3, [r3, #4]
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d105      	bne.n	80025ea <PWM_write_range+0x82>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2300      	movs	r3, #0
 80025e6:	6493      	str	r3, [r2, #72]	@ 0x48
 80025e8:	e0b9      	b.n	800275e <PWM_write_range+0x1f6>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	2300      	movs	r3, #0
 80025f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80025f4:	e0b3      	b.n	800275e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	ee07 3a90 	vmov	s15, r3
 80025fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002602:	ed97 7a02 	vldr	s14, [r7, #8]
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800260e:	ee17 2a90 	vmov	r2, s15
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 800261e:	33fe      	adds	r3, #254	@ 0xfe
 8002620:	4a53      	ldr	r2, [pc, #332]	@ (8002770 <PWM_write_range+0x208>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	0bdb      	lsrs	r3, r3, #15
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	899b      	ldrh	r3, [r3, #12]
 8002642:	3301      	adds	r3, #1
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800264c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002650:	ed97 7a02 	vldr	s14, [r7, #8]
 8002654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002658:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800265c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002664:	ee17 3a90 	vmov	r3, s15
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	89db      	ldrh	r3, [r3, #14]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff22 	bl	80004bc <__aeabi_i2d>
 8002678:	4604      	mov	r4, r0
 800267a:	460d      	mov	r5, r1
 800267c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002680:	eef0 7ae7 	vabs.f32	s15, s15
 8002684:	ee17 0a90 	vmov	r0, s15
 8002688:	f7fd ff2a 	bl	80004e0 <__aeabi_f2d>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4620      	mov	r0, r4
 8002692:	4629      	mov	r1, r5
 8002694:	f7fd ff7c 	bl	8000590 <__aeabi_dmul>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4610      	mov	r0, r2
 800269e:	4619      	mov	r1, r3
 80026a0:	a331      	add	r3, pc, #196	@ (adr r3, 8002768 <PWM_write_range+0x200>)
 80026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a6:	f7fe f89d 	bl	80007e4 <__aeabi_ddiv>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f7fe f97f 	bl	80009b4 <__aeabi_d2uiz>
 80026b6:	4603      	mov	r3, r0
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	899a      	ldrh	r2, [r3, #12]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	89da      	ldrh	r2, [r3, #14]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	89da      	ldrh	r2, [r3, #14]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	889b      	ldrh	r3, [r3, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <PWM_write_range+0x190>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	6952      	ldr	r2, [r2, #20]
 80026f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80026f6:	e032      	b.n	800275e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	889b      	ldrh	r3, [r3, #4]
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d106      	bne.n	800270e <PWM_write_range+0x1a6>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800270c:	e027      	b.n	800275e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	889b      	ldrh	r3, [r3, #4]
 8002712:	2b08      	cmp	r3, #8
 8002714:	d106      	bne.n	8002724 <PWM_write_range+0x1bc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002722:	e01c      	b.n	800275e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	889b      	ldrh	r3, [r3, #4]
 8002728:	2b0c      	cmp	r3, #12
 800272a:	d106      	bne.n	800273a <PWM_write_range+0x1d2>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002738:	e011      	b.n	800275e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	889b      	ldrh	r3, [r3, #4]
 800273e:	2b10      	cmp	r3, #16
 8002740:	d106      	bne.n	8002750 <PWM_write_range+0x1e8>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800274e:	e006      	b.n	800275e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800275c:	e7ff      	b.n	800275e <PWM_write_range+0x1f6>
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bdb0      	pop	{r4, r5, r7, pc}
 8002766:	bf00      	nop
 8002768:	00000000 	.word	0x00000000
 800276c:	40efffe0 	.word	0x40efffe0
 8002770:	80008001 	.word	0x80008001

08002774 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6178      	str	r0, [r7, #20]
 800277c:	6139      	str	r1, [r7, #16]
 800277e:	60fa      	str	r2, [r7, #12]
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	ed87 0a01 	vstr	s0, [r7, #4]
 8002786:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2200      	movs	r2, #0
 80027b2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 80027d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	fb93 f2f2 	sdiv	r2, r3, r2
 80027de:	68f9      	ldr	r1, [r7, #12]
 80027e0:	fb01 f202 	mul.w	r2, r1, r2
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	2200      	movs	r2, #0
 80027f2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2200      	movs	r2, #0
 80027f8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8002842:	213c      	movs	r1, #60	@ 0x3c
 8002844:	6938      	ldr	r0, [r7, #16]
 8002846:	f006 fb0f 	bl	8008e68 <HAL_TIM_Encoder_Start>
}
 800284a:	bf00      	nop
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	0000      	movs	r0, r0
 8002854:	0000      	movs	r0, r0
	...

08002858 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8002858:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	0fda      	lsrs	r2, r3, #31
 8002880:	4413      	add	r3, r2
 8002882:	105b      	asrs	r3, r3, #1
 8002884:	461a      	mov	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4293      	cmp	r3, r2
 800288a:	dd05      	ble.n	8002898 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	e00e      	b.n	80028b6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	0fda      	lsrs	r2, r3, #31
 800289e:	4413      	add	r3, r2
 80028a0:	105b      	asrs	r3, r3, #1
 80028a2:	425b      	negs	r3, r3
 80028a4:	461a      	mov	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	4293      	cmp	r3, r2
 80028aa:	da04      	bge.n	80028b6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	68fa      	ldr	r2, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c4:	441a      	add	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	ee07 3a90 	vmov	s15, r3
 80028d8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	ee07 3a90 	vmov	s15, r3
 80028e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028e8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80028f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fdeb 	bl	80004e0 <__aeabi_f2d>
 800290a:	4604      	mov	r4, r0
 800290c:	460d      	mov	r5, r1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002912:	ee07 3a90 	vmov	s15, r3
 8002916:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002926:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800292e:	ee17 0a90 	vmov	r0, s15
 8002932:	f7fd fdd5 	bl	80004e0 <__aeabi_f2d>
 8002936:	a33c      	add	r3, pc, #240	@ (adr r3, 8002a28 <QEI_get_diff_count+0x1d0>)
 8002938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293c:	f7fd fe28 	bl	8000590 <__aeabi_dmul>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4690      	mov	r8, r2
 8002946:	4699      	mov	r9, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fdc7 	bl	80004e0 <__aeabi_f2d>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	4640      	mov	r0, r8
 8002958:	4649      	mov	r1, r9
 800295a:	f7fd fe19 	bl	8000590 <__aeabi_dmul>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4620      	mov	r0, r4
 8002964:	4629      	mov	r1, r5
 8002966:	f7fd fc5d 	bl	8000224 <__adddf3>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	f7fe f83f 	bl	80009f4 <__aeabi_d2f>
 8002976:	4602      	mov	r2, r0
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002980:	4618      	mov	r0, r3
 8002982:	f7fd fdad 	bl	80004e0 <__aeabi_f2d>
 8002986:	4604      	mov	r4, r0
 8002988:	460d      	mov	r5, r1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	ee07 3a90 	vmov	s15, r3
 800299e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80029a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029a6:	ee16 0a90 	vmov	r0, s13
 80029aa:	f7fd fd99 	bl	80004e0 <__aeabi_f2d>
 80029ae:	a31e      	add	r3, pc, #120	@ (adr r3, 8002a28 <QEI_get_diff_count+0x1d0>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fdec 	bl	8000590 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4690      	mov	r8, r2
 80029be:	4699      	mov	r9, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fd fd8b 	bl	80004e0 <__aeabi_f2d>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4640      	mov	r0, r8
 80029d0:	4649      	mov	r1, r9
 80029d2:	f7fd fddd 	bl	8000590 <__aeabi_dmul>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4690      	mov	r8, r2
 80029dc:	4699      	mov	r9, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fd7c 	bl	80004e0 <__aeabi_f2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4640      	mov	r0, r8
 80029ee:	4649      	mov	r1, r9
 80029f0:	f7fd fdce 	bl	8000590 <__aeabi_dmul>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4620      	mov	r0, r4
 80029fa:	4629      	mov	r1, r5
 80029fc:	f7fd fc12 	bl	8000224 <__adddf3>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7fd fff4 	bl	80009f4 <__aeabi_d2f>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	605a      	str	r2, [r3, #4]
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a24:	f3af 8000 	nop.w
 8002a28:	54442d18 	.word	0x54442d18
 8002a2c:	400921fb 	.word	0x400921fb

08002a30 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002a40:	fb02 f303 	mul.w	r3, r2, r3
 8002a44:	ee07 3a90 	vmov	s15, r3
 8002a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fd42 	bl	80004e0 <__aeabi_f2d>
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	4b83      	ldr	r3, [pc, #524]	@ (8002c70 <QEI_compute_data+0x240>)
 8002a62:	f7fd fd95 	bl	8000590 <__aeabi_dmul>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4614      	mov	r4, r2
 8002a6c:	461d      	mov	r5, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7a:	ee17 0a90 	vmov	r0, s15
 8002a7e:	f7fd fd2f 	bl	80004e0 <__aeabi_f2d>
 8002a82:	4602      	mov	r2, r0
 8002a84:	460b      	mov	r3, r1
 8002a86:	4620      	mov	r0, r4
 8002a88:	4629      	mov	r1, r5
 8002a8a:	f7fd feab 	bl	80007e4 <__aeabi_ddiv>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4614      	mov	r4, r2
 8002a94:	461d      	mov	r5, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd20 	bl	80004e0 <__aeabi_f2d>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4620      	mov	r0, r4
 8002aa6:	4629      	mov	r1, r5
 8002aa8:	f7fd fd72 	bl	8000590 <__aeabi_dmul>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fd ff9e 	bl	80009f4 <__aeabi_d2f>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002ac4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ac8:	ee17 0a90 	vmov	r0, s15
 8002acc:	f7fd fd08 	bl	80004e0 <__aeabi_f2d>
 8002ad0:	a365      	add	r3, pc, #404	@ (adr r3, 8002c68 <QEI_compute_data+0x238>)
 8002ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad6:	f7fd fd5b 	bl	8000590 <__aeabi_dmul>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4614      	mov	r4, r2
 8002ae0:	461d      	mov	r5, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aee:	ee17 0a90 	vmov	r0, s15
 8002af2:	f7fd fcf5 	bl	80004e0 <__aeabi_f2d>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4620      	mov	r0, r4
 8002afc:	4629      	mov	r1, r5
 8002afe:	f7fd fe71 	bl	80007e4 <__aeabi_ddiv>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4614      	mov	r4, r2
 8002b08:	461d      	mov	r5, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7fd fce6 	bl	80004e0 <__aeabi_f2d>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4620      	mov	r0, r4
 8002b1a:	4629      	mov	r1, r5
 8002b1c:	f7fd fd38 	bl	8000590 <__aeabi_dmul>
 8002b20:	4602      	mov	r2, r0
 8002b22:	460b      	mov	r3, r1
 8002b24:	4610      	mov	r0, r2
 8002b26:	4619      	mov	r1, r3
 8002b28:	f7fd ff64 	bl	80009f4 <__aeabi_d2f>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fcd2 	bl	80004e0 <__aeabi_f2d>
 8002b3c:	a34a      	add	r3, pc, #296	@ (adr r3, 8002c68 <QEI_compute_data+0x238>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fd25 	bl	8000590 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4614      	mov	r4, r2
 8002b4c:	461d      	mov	r5, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fcc4 	bl	80004e0 <__aeabi_f2d>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	4629      	mov	r1, r5
 8002b60:	f7fd fd16 	bl	8000590 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4614      	mov	r4, r2
 8002b6a:	461d      	mov	r5, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b78:	ee17 0a90 	vmov	r0, s15
 8002b7c:	f7fd fcb0 	bl	80004e0 <__aeabi_f2d>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4620      	mov	r0, r4
 8002b86:	4629      	mov	r1, r5
 8002b88:	f7fd fe2c 	bl	80007e4 <__aeabi_ddiv>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4614      	mov	r4, r2
 8002b92:	461d      	mov	r5, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fca1 	bl	80004e0 <__aeabi_f2d>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd fcf3 	bl	8000590 <__aeabi_dmul>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7fd ff1f 	bl	80009f4 <__aeabi_d2f>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	ed93 7a02 	vldr	s14, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bdc:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8002be0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002be4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bec:	d00a      	beq.n	8002c04 <QEI_compute_data+0x1d4>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bfa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c02:	e001      	b.n	8002c08 <QEI_compute_data+0x1d8>
 8002c04:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8002c74 <QEI_compute_data+0x244>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	ed93 7a04 	vldr	s14, [r3, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8002c22:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c26:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c2e:	d00a      	beq.n	8002c46 <QEI_compute_data+0x216>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	ee07 3a90 	vmov	s15, r3
 8002c38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c44:	e001      	b.n	8002c4a <QEI_compute_data+0x21a>
 8002c46:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8002c74 <QEI_compute_data+0x244>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	615a      	str	r2, [r3, #20]
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bdb0      	pop	{r4, r5, r7, pc}
 8002c68:	54442d18 	.word	0x54442d18
 8002c6c:	400921fb 	.word	0x400921fb
 8002c70:	404e0000 	.word	0x404e0000
 8002c74:	00000000 	.word	0x00000000

08002c78 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08c      	sub	sp, #48	@ 0x30
 8002c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002c8a:	1d3b      	adds	r3, r7, #4
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	2100      	movs	r1, #0
 8002c90:	4618      	mov	r0, r3
 8002c92:	f00a f937 	bl	800cf04 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002c96:	4b39      	ldr	r3, [pc, #228]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002c98:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002c9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c9e:	4b37      	ldr	r3, [pc, #220]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002ca0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002ca4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ca6:	4b35      	ldr	r3, [pc, #212]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cac:	4b33      	ldr	r3, [pc, #204]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002cb2:	4b32      	ldr	r3, [pc, #200]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002cb8:	4b30      	ldr	r3, [pc, #192]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002cc0:	2204      	movs	r2, #4
 8002cc2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002cca:	4b2c      	ldr	r3, [pc, #176]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cd6:	4b29      	ldr	r3, [pc, #164]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cde:	4b27      	ldr	r3, [pc, #156]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ce4:	4b25      	ldr	r3, [pc, #148]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cea:	4b24      	ldr	r3, [pc, #144]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002cf2:	4b22      	ldr	r3, [pc, #136]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002cf8:	4b20      	ldr	r3, [pc, #128]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d00:	481e      	ldr	r0, [pc, #120]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002d02:	f002 fbed 	bl	80054e0 <HAL_ADC_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002d0c:	f000 fe16 	bl	800393c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4818      	ldr	r0, [pc, #96]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002d1c:	f003 fd0c 	bl	8006738 <HAL_ADCEx_MultiModeConfigChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002d26:	f000 fe09 	bl	800393c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002d2a:	4b15      	ldr	r3, [pc, #84]	@ (8002d80 <MX_ADC1_Init+0x108>)
 8002d2c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d2e:	2306      	movs	r3, #6
 8002d30:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002d32:	2307      	movs	r3, #7
 8002d34:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002d36:	237f      	movs	r3, #127	@ 0x7f
 8002d38:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d3a:	2304      	movs	r3, #4
 8002d3c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d42:	1d3b      	adds	r3, r7, #4
 8002d44:	4619      	mov	r1, r3
 8002d46:	480d      	ldr	r0, [pc, #52]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002d48:	f002 fe78 	bl	8005a3c <HAL_ADC_ConfigChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002d52:	f000 fdf3 	bl	800393c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002d56:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <MX_ADC1_Init+0x10c>)
 8002d58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002d5a:	230c      	movs	r3, #12
 8002d5c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	4619      	mov	r1, r3
 8002d62:	4806      	ldr	r0, [pc, #24]	@ (8002d7c <MX_ADC1_Init+0x104>)
 8002d64:	f002 fe6a 	bl	8005a3c <HAL_ADC_ConfigChannel>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8002d6e:	f000 fde5 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	3730      	adds	r7, #48	@ 0x30
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000208 	.word	0x20000208
 8002d80:	19200040 	.word	0x19200040
 8002d84:	1d500080 	.word	0x1d500080

08002d88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b09e      	sub	sp, #120	@ 0x78
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002da0:	f107 0310 	add.w	r3, r7, #16
 8002da4:	2254      	movs	r2, #84	@ 0x54
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f00a f8ab 	bl	800cf04 <memset>
  if(adcHandle->Instance==ADC1)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002db6:	d15e      	bne.n	8002e76 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002db8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dbc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002dbe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002dc2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f005 f993 	bl	80080f4 <HAL_RCCEx_PeriphCLKConfig>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002dd4:	f000 fdb2 	bl	800393c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002dd8:	4b29      	ldr	r3, [pc, #164]	@ (8002e80 <HAL_ADC_MspInit+0xf8>)
 8002dda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ddc:	4a28      	ldr	r2, [pc, #160]	@ (8002e80 <HAL_ADC_MspInit+0xf8>)
 8002dde:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002de2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002de4:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <HAL_ADC_MspInit+0xf8>)
 8002de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df0:	4b23      	ldr	r3, [pc, #140]	@ (8002e80 <HAL_ADC_MspInit+0xf8>)
 8002df2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002df4:	4a22      	ldr	r2, [pc, #136]	@ (8002e80 <HAL_ADC_MspInit+0xf8>)
 8002df6:	f043 0304 	orr.w	r3, r3, #4
 8002dfa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002dfc:	4b20      	ldr	r3, [pc, #128]	@ (8002e80 <HAL_ADC_MspInit+0xf8>)
 8002dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e18:	4619      	mov	r1, r3
 8002e1a:	481a      	ldr	r0, [pc, #104]	@ (8002e84 <HAL_ADC_MspInit+0xfc>)
 8002e1c:	f004 f9d6 	bl	80071cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002e20:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e22:	4a1a      	ldr	r2, [pc, #104]	@ (8002e8c <HAL_ADC_MspInit+0x104>)
 8002e24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002e26:	4b18      	ldr	r3, [pc, #96]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e28:	2205      	movs	r2, #5
 8002e2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e2c:	4b16      	ldr	r3, [pc, #88]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e32:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e38:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e3a:	2280      	movs	r2, #128	@ 0x80
 8002e3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e3e:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e46:	4b10      	ldr	r3, [pc, #64]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e50:	2220      	movs	r2, #32
 8002e52:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e5a:	480b      	ldr	r0, [pc, #44]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e5c:	f003 fe84 	bl	8006b68 <HAL_DMA_Init>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8002e66:	f000 fd69 	bl	800393c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a06      	ldr	r2, [pc, #24]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e6e:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e70:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <HAL_ADC_MspInit+0x100>)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002e76:	bf00      	nop
 8002e78:	3778      	adds	r7, #120	@ 0x78
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000
 8002e84:	48000800 	.word	0x48000800
 8002e88:	20000274 	.word	0x20000274
 8002e8c:	40020008 	.word	0x40020008

08002e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002e96:	4b22      	ldr	r3, [pc, #136]	@ (8002f20 <MX_DMA_Init+0x90>)
 8002e98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9a:	4a21      	ldr	r2, [pc, #132]	@ (8002f20 <MX_DMA_Init+0x90>)
 8002e9c:	f043 0304 	orr.w	r3, r3, #4
 8002ea0:	6493      	str	r3, [r2, #72]	@ 0x48
 8002ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8002f20 <MX_DMA_Init+0x90>)
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	607b      	str	r3, [r7, #4]
 8002eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002eae:	4b1c      	ldr	r3, [pc, #112]	@ (8002f20 <MX_DMA_Init+0x90>)
 8002eb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eb2:	4a1b      	ldr	r2, [pc, #108]	@ (8002f20 <MX_DMA_Init+0x90>)
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	6493      	str	r3, [r2, #72]	@ 0x48
 8002eba:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <MX_DMA_Init+0x90>)
 8002ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	200b      	movs	r0, #11
 8002ecc:	f003 fe17 	bl	8006afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002ed0:	200b      	movs	r0, #11
 8002ed2:	f003 fe2e 	bl	8006b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2100      	movs	r1, #0
 8002eda:	200c      	movs	r0, #12
 8002edc:	f003 fe0f 	bl	8006afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002ee0:	200c      	movs	r0, #12
 8002ee2:	f003 fe26 	bl	8006b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2100      	movs	r1, #0
 8002eea:	200d      	movs	r0, #13
 8002eec:	f003 fe07 	bl	8006afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002ef0:	200d      	movs	r0, #13
 8002ef2:	f003 fe1e 	bl	8006b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	200e      	movs	r0, #14
 8002efc:	f003 fdff 	bl	8006afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002f00:	200e      	movs	r0, #14
 8002f02:	f003 fe16 	bl	8006b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	200f      	movs	r0, #15
 8002f0c:	f003 fdf7 	bl	8006afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002f10:	200f      	movs	r0, #15
 8002f12:	f003 fe0e 	bl	8006b32 <HAL_NVIC_EnableIRQ>

}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000

08002f24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	@ 0x28
 8002f28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f2a:	f107 0314 	add.w	r3, r7, #20
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	609a      	str	r2, [r3, #8]
 8002f36:	60da      	str	r2, [r3, #12]
 8002f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3e:	4a4e      	ldr	r2, [pc, #312]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f46:	4b4c      	ldr	r3, [pc, #304]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f52:	4b49      	ldr	r3, [pc, #292]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f56:	4a48      	ldr	r2, [pc, #288]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f58:	f043 0320 	orr.w	r3, r3, #32
 8002f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f5e:	4b46      	ldr	r3, [pc, #280]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6a:	4b43      	ldr	r3, [pc, #268]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f6e:	4a42      	ldr	r2, [pc, #264]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f76:	4b40      	ldr	r3, [pc, #256]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f82:	4b3d      	ldr	r3, [pc, #244]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f86:	4a3c      	ldr	r2, [pc, #240]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f88:	f043 0302 	orr.w	r3, r3, #2
 8002f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003078 <MX_GPIO_Init+0x154>)
 8002f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	607b      	str	r3, [r7, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8002fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fa4:	f004 fa94 	bl	80074d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fae:	4833      	ldr	r0, [pc, #204]	@ (800307c <MX_GPIO_Init+0x158>)
 8002fb0:	f004 fa8e 	bl	80074d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fb4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fc4:	f107 0314 	add.w	r3, r7, #20
 8002fc8:	4619      	mov	r1, r3
 8002fca:	482c      	ldr	r0, [pc, #176]	@ (800307c <MX_GPIO_Init+0x158>)
 8002fcc:	f004 f8fe 	bl	80071cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8002fd0:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8002fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe2:	f107 0314 	add.w	r3, r7, #20
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fec:	f004 f8ee 	bl	80071cc <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin UPPER_PHOTO_Pin EMER_Pin
                           PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|UPPER_PHOTO_Pin|EMER_Pin
 8002ff0:	f241 03b6 	movw	r3, #4278	@ 0x10b6
 8002ff4:	617b      	str	r3, [r7, #20]
                          |PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffe:	f107 0314 	add.w	r3, r7, #20
 8003002:	4619      	mov	r1, r3
 8003004:	481e      	ldr	r0, [pc, #120]	@ (8003080 <MX_GPIO_Init+0x15c>)
 8003006:	f004 f8e1 	bl	80071cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800300a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800300e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003010:	2301      	movs	r3, #1
 8003012:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800301c:	f107 0314 	add.w	r3, r7, #20
 8003020:	4619      	mov	r1, r3
 8003022:	4816      	ldr	r0, [pc, #88]	@ (800307c <MX_GPIO_Init+0x158>)
 8003024:	f004 f8d2 	bl	80071cc <HAL_GPIO_Init>

  /*Configure GPIO pin : LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = LOWER_PHOTO_Pin;
 8003028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800302c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302e:	2300      	movs	r3, #0
 8003030:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LOWER_PHOTO_GPIO_Port, &GPIO_InitStruct);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003040:	f004 f8c4 	bl	80071cc <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 8003044:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304e:	2300      	movs	r3, #0
 8003050:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	4808      	ldr	r0, [pc, #32]	@ (800307c <MX_GPIO_Init+0x158>)
 800305a:	f004 f8b7 	bl	80071cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800305e:	2200      	movs	r2, #0
 8003060:	2100      	movs	r1, #0
 8003062:	2028      	movs	r0, #40	@ 0x28
 8003064:	f003 fd4b 	bl	8006afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003068:	2028      	movs	r0, #40	@ 0x28
 800306a:	f003 fd62 	bl	8006b32 <HAL_NVIC_EnableIRQ>

}
 800306e:	bf00      	nop
 8003070:	3728      	adds	r7, #40	@ 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40021000 	.word	0x40021000
 800307c:	48000800 	.word	0x48000800
 8003080:	48000400 	.word	0x48000400

08003084 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8003084:	b580      	push	{r7, lr}
 8003086:	b096      	sub	sp, #88	@ 0x58
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003090:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2201      	movs	r2, #1
 800309e:	2101      	movs	r1, #1
 80030a0:	f009 f9bf 	bl	800c422 <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80030b0:	4619      	mov	r1, r3
 80030b2:	4610      	mov	r0, r2
 80030b4:	f009 fe2f 	bl	800cd16 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 80030c4:	4619      	mov	r1, r3
 80030c6:	4610      	mov	r0, r2
 80030c8:	f009 fe25 	bl	800cd16 <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80030d8:	4619      	mov	r1, r3
 80030da:	4610      	mov	r0, r2
 80030dc:	f009 fe1b 	bl	800cd16 <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 80030ec:	4619      	mov	r1, r3
 80030ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80030f2:	4610      	mov	r0, r2
 80030f4:	f009 fd9e 	bl	800cc34 <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 800310a:	461a      	mov	r2, r3
 800310c:	f009 fd18 	bl	800cb40 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8003122:	461a      	mov	r2, r3
 8003124:	f009 f942 	bl	800c3ac <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 800313a:	461a      	mov	r2, r3
 800313c:	f009 fd00 	bl	800cb40 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003152:	461a      	mov	r2, r3
 8003154:	f009 fcf4 	bl	800cb40 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 800316a:	461a      	mov	r2, r3
 800316c:	f009 fce8 	bl	800cb40 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8003182:	4619      	mov	r1, r3
 8003184:	eeb0 0a67 	vmov.f32	s0, s15
 8003188:	4610      	mov	r0, r2
 800318a:	f009 fd53 	bl	800cc34 <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80031a0:	461a      	mov	r2, r3
 80031a2:	f009 f903 	bl	800c3ac <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 80031b8:	461a      	mov	r2, r3
 80031ba:	f009 fcc1 	bl	800cb40 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 80031d0:	461a      	mov	r2, r3
 80031d2:	f009 fcb5 	bl	800cb40 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 80031e8:	461a      	mov	r2, r3
 80031ea:	f009 f8df 	bl	800c3ac <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80031fa:	4619      	mov	r1, r3
 80031fc:	4610      	mov	r0, r2
 80031fe:	f009 f928 	bl	800c452 <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8003214:	461a      	mov	r2, r3
 8003216:	f009 fc93 	bl	800cb40 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 800322c:	461a      	mov	r2, r3
 800322e:	f009 fc87 	bl	800cb40 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003244:	461a      	mov	r2, r3
 8003246:	f009 fc7b 	bl	800cb40 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 800325c:	461a      	mov	r2, r3
 800325e:	f009 fd1f 	bl	800cca0 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8003274:	461a      	mov	r2, r3
 8003276:	f009 fc63 	bl	800cb40 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800328c:	461a      	mov	r2, r3
 800328e:	f009 f88d 	bl	800c3ac <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80032a4:	461a      	mov	r2, r3
 80032a6:	f009 fc4b 	bl	800cb40 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 80032aa:	f107 0310 	add.w	r3, r7, #16
 80032ae:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80032b2:	2204      	movs	r2, #4
 80032b4:	2104      	movs	r1, #4
 80032b6:	f009 f8b4 	bl	800c422 <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 80032c6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80032ca:	4619      	mov	r1, r3
 80032cc:	f009 fc38 	bl	800cb40 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80032d6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80032da:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80032de:	4618      	mov	r0, r3
 80032e0:	f009 fcde 	bl	800cca0 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 80032f0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80032f4:	4618      	mov	r0, r3
 80032f6:	f009 fc23 	bl	800cb40 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800330a:	ee07 3a90 	vmov	s15, r3
}
 800330e:	eeb0 0a67 	vmov.f32	s0, s15
 8003312:	3758      	adds	r7, #88	@ 0x58
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8003318:	b5b0      	push	{r4, r5, r7, lr}
 800331a:	b0a4      	sub	sp, #144	@ 0x90
 800331c:	af00      	add	r7, sp, #0
 800331e:	6178      	str	r0, [r7, #20]
 8003320:	6139      	str	r1, [r7, #16]
 8003322:	60fa      	str	r2, [r7, #12]
 8003324:	ed87 0a02 	vstr	s0, [r7, #8]
 8003328:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 800333c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003340:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003352:	f04f 0300 	mov.w	r3, #0
 8003356:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003360:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003364:	673b      	str	r3, [r7, #112]	@ 0x70
 8003366:	f04f 0300 	mov.w	r3, #0
 800336a:	677b      	str	r3, [r7, #116]	@ 0x74
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8003372:	4bc6      	ldr	r3, [pc, #792]	@ (800368c <Kalman_Start+0x374>)
 8003374:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8003378:	461d      	mov	r5, r3
 800337a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800337c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800337e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003386:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800338a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 800338e:	f107 031c 	add.w	r3, r7, #28
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033ac:	e028      	b.n	8003400 <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 80033ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4413      	add	r3, r2
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	6979      	ldr	r1, [r7, #20]
 80033bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033c0:	3314      	adds	r3, #20
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 80033c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	3390      	adds	r3, #144	@ 0x90
 80033d0:	443b      	add	r3, r7
 80033d2:	3b64      	subs	r3, #100	@ 0x64
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	6979      	ldr	r1, [r7, #20]
 80033d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033dc:	3398      	adds	r3, #152	@ 0x98
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033ea:	3304      	adds	r3, #4
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	4413      	add	r3, r2
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 80033f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033fa:	3301      	adds	r3, #1
 80033fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003400:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003404:	2b0f      	cmp	r3, #15
 8003406:	ddd2      	ble.n	80033ae <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8003408:	2300      	movs	r3, #0
 800340a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800340e:	e03a      	b.n	8003486 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8003410:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	3390      	adds	r3, #144	@ 0x90
 8003418:	443b      	add	r3, r7
 800341a:	3b74      	subs	r3, #116	@ 0x74
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	6979      	ldr	r1, [r7, #20]
 8003420:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 800342a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4413      	add	r3, r2
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	6979      	ldr	r1, [r7, #20]
 8003438:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800343c:	3324      	adds	r3, #36	@ 0x24
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8003444:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	3390      	adds	r3, #144	@ 0x90
 800344c:	443b      	add	r3, r7
 800344e:	3b14      	subs	r3, #20
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	6979      	ldr	r1, [r7, #20]
 8003454:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003458:	3328      	adds	r3, #40	@ 0x28
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8003460:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	3390      	adds	r3, #144	@ 0x90
 8003468:	443b      	add	r3, r7
 800346a:	3b24      	subs	r3, #36	@ 0x24
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	6979      	ldr	r1, [r7, #20]
 8003470:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003474:	332c      	adds	r3, #44	@ 0x2c
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 800347c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003480:	3301      	adds	r3, #1
 8003482:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003486:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800348a:	2b03      	cmp	r3, #3
 800348c:	ddc0      	ble.n	8003410 <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2201      	movs	r2, #1
 8003498:	2104      	movs	r1, #4
 800349a:	f008 ffc2 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	3310      	adds	r3, #16
 80034a8:	2204      	movs	r2, #4
 80034aa:	2104      	movs	r1, #4
 80034ac:	f008 ffb9 	bl	800c422 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	3350      	adds	r3, #80	@ 0x50
 80034ba:	2204      	movs	r2, #4
 80034bc:	2104      	movs	r1, #4
 80034be:	f008 ffb0 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	3390      	adds	r3, #144	@ 0x90
 80034cc:	2201      	movs	r2, #1
 80034ce:	2104      	movs	r1, #4
 80034d0:	f008 ffa7 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	33a0      	adds	r3, #160	@ 0xa0
 80034de:	2204      	movs	r2, #4
 80034e0:	2101      	movs	r1, #1
 80034e2:	f008 ff9e 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	33b0      	adds	r3, #176	@ 0xb0
 80034f0:	2201      	movs	r2, #1
 80034f2:	2104      	movs	r1, #4
 80034f4:	f008 ff95 	bl	800c422 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	33c8      	adds	r3, #200	@ 0xc8
 8003502:	2204      	movs	r2, #4
 8003504:	2104      	movs	r1, #4
 8003506:	f008 ff8c 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003516:	2201      	movs	r2, #1
 8003518:	2104      	movs	r1, #4
 800351a:	f008 ff82 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 800352a:	2204      	movs	r2, #4
 800352c:	2101      	movs	r1, #1
 800352e:	f008 ff78 	bl	800c422 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800353e:	2204      	movs	r2, #4
 8003540:	2104      	movs	r1, #4
 8003542:	f008 ff6e 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003552:	2204      	movs	r2, #4
 8003554:	2104      	movs	r1, #4
 8003556:	f008 ff64 	bl	800c422 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003566:	2201      	movs	r2, #1
 8003568:	2104      	movs	r1, #4
 800356a:	f008 ff5a 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 800357a:	2201      	movs	r2, #1
 800357c:	2104      	movs	r1, #4
 800357e:	f008 ff50 	bl	800c422 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800358e:	2204      	movs	r2, #4
 8003590:	2101      	movs	r1, #1
 8003592:	f008 ff46 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80035a2:	2201      	movs	r2, #1
 80035a4:	2101      	movs	r1, #1
 80035a6:	f008 ff3c 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80035b6:	2201      	movs	r2, #1
 80035b8:	2101      	movs	r1, #1
 80035ba:	f008 ff32 	bl	800c422 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80035ca:	2201      	movs	r2, #1
 80035cc:	2104      	movs	r1, #4
 80035ce:	f008 ff28 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80035de:	2201      	movs	r2, #1
 80035e0:	2104      	movs	r1, #4
 80035e2:	f008 ff1e 	bl	800c422 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80035f2:	2201      	movs	r2, #1
 80035f4:	2101      	movs	r1, #1
 80035f6:	f008 ff14 	bl	800c422 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8003606:	2201      	movs	r2, #1
 8003608:	2101      	movs	r1, #1
 800360a:	f008 ff0a 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 800361a:	2201      	movs	r2, #1
 800361c:	2101      	movs	r1, #1
 800361e:	f008 ff00 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800362e:	2201      	movs	r2, #1
 8003630:	2104      	movs	r1, #4
 8003632:	f008 fef6 	bl	800c422 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003642:	2201      	movs	r2, #1
 8003644:	2101      	movs	r1, #1
 8003646:	f008 feec 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003656:	2204      	movs	r2, #4
 8003658:	2104      	movs	r1, #4
 800365a:	f008 fee2 	bl	800c422 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	33c4      	adds	r3, #196	@ 0xc4
 8003668:	2201      	movs	r2, #1
 800366a:	2101      	movs	r1, #1
 800366c:	f008 fed9 	bl	800c422 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 800367c:	2201      	movs	r2, #1
 800367e:	2101      	movs	r1, #1
 8003680:	f008 fecf 	bl	800c422 <arm_mat_init_f32>
}
 8003684:	bf00      	nop
 8003686:	3790      	adds	r7, #144	@ 0x90
 8003688:	46bd      	mov	sp, r7
 800368a:	bdb0      	pop	{r4, r5, r7, pc}
 800368c:	0800dad0 	.word	0x0800dad0

08003690 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003694:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003696:	f001 fc6e 	bl	8004f76 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800369a:	f000 f875 	bl	8003788 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800369e:	f7ff fc41 	bl	8002f24 <MX_GPIO_Init>
	MX_DMA_Init();
 80036a2:	f7ff fbf5 	bl	8002e90 <MX_DMA_Init>
	MX_ADC1_Init();
 80036a6:	f7ff fae7 	bl	8002c78 <MX_ADC1_Init>
	MX_TIM2_Init();
 80036aa:	f000 fe77 	bl	800439c <MX_TIM2_Init>
	MX_TIM3_Init();
 80036ae:	f000 fec3 	bl	8004438 <MX_TIM3_Init>
	MX_TIM4_Init();
 80036b2:	f000 ff17 	bl	80044e4 <MX_TIM4_Init>
	MX_TIM5_Init();
 80036b6:	f000 ff6b 	bl	8004590 <MX_TIM5_Init>
	MX_TIM8_Init();
 80036ba:	f000 ffb7 	bl	800462c <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80036be:	f001 fa83 	bl	8004bc8 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80036c2:	f001 f87b 	bl	80047bc <MX_TIM16_Init>
	MX_TIM1_Init();
 80036c6:	f000 fdd5 	bl	8004274 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 80036ca:	f001 fa33 	bl	8004b34 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 80036ce:	f000 f93b 	bl	8003948 <plotter_begin>
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80036d2:	4b29      	ldr	r3, [pc, #164]	@ (8003778 <main+0xe8>)
 80036d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80036d8:	4610      	mov	r0, r2
 80036da:	4619      	mov	r1, r3
 80036dc:	f7fd f98a 	bl	80009f4 <__aeabi_d2f>
 80036e0:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.B * 0.735, ZGX45RGG_150RPM_Constant.Kt,
 80036e2:	4b25      	ldr	r3, [pc, #148]	@ (8003778 <main+0xe8>)
 80036e4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80036e8:	a321      	add	r3, pc, #132	@ (adr r3, 8003770 <main+0xe0>)
 80036ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ee:	f7fc ff4f 	bl	8000590 <__aeabi_dmul>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	f7fd f97b 	bl	80009f4 <__aeabi_d2f>
 80036fe:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.B * 0.735, ZGX45RGG_150RPM_Constant.Kt,
 8003700:	4b1d      	ldr	r3, [pc, #116]	@ (8003778 <main+0xe8>)
 8003702:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	f7fd f973 	bl	80009f4 <__aeabi_d2f>
 800370e:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8003710:	4b19      	ldr	r3, [pc, #100]	@ (8003778 <main+0xe8>)
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	f7fd f96b 	bl	80009f4 <__aeabi_d2f>
 800371e:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.Ke, ZGX45RGG_150RPM_Constant.R,
 8003720:	4b15      	ldr	r3, [pc, #84]	@ (8003778 <main+0xe8>)
 8003722:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8003726:	4610      	mov	r0, r2
 8003728:	4619      	mov	r1, r3
 800372a:	f7fd f963 	bl	80009f4 <__aeabi_d2f>
 800372e:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.L, 1.0, 0.05);
 8003730:	4b11      	ldr	r3, [pc, #68]	@ (8003778 <main+0xe8>)
 8003732:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&motor_filter, 1e-3, ZGX45RGG_150RPM_Constant.J,
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	f7fd f95b 	bl	80009f4 <__aeabi_d2f>
 800373e:	4603      	mov	r3, r0
 8003740:	ed9f 4a0e 	vldr	s8, [pc, #56]	@ 800377c <main+0xec>
 8003744:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 8003748:	ee03 3a10 	vmov	s6, r3
 800374c:	ee02 9a90 	vmov	s5, r9
 8003750:	ee02 8a10 	vmov	s4, r8
 8003754:	ee01 6a90 	vmov	s3, r6
 8003758:	ee01 5a10 	vmov	s2, r5
 800375c:	ee00 4a90 	vmov	s1, r4
 8003760:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8003780 <main+0xf0>
 8003764:	4807      	ldr	r0, [pc, #28]	@ (8003784 <main+0xf4>)
 8003766:	f7fd fea7 	bl	80014b8 <MotorKalman_Init>
//	SerialFrame_StartReceive(&serial_frame);
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800376a:	bf00      	nop
 800376c:	e7fd      	b.n	800376a <main+0xda>
 800376e:	bf00      	nop
 8003770:	b851eb85 	.word	0xb851eb85
 8003774:	3fe7851e 	.word	0x3fe7851e
 8003778:	20000000 	.word	0x20000000
 800377c:	3d4ccccd 	.word	0x3d4ccccd
 8003780:	3a83126f 	.word	0x3a83126f
 8003784:	200002d4 	.word	0x200002d4

08003788 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003788:	b580      	push	{r7, lr}
 800378a:	b094      	sub	sp, #80	@ 0x50
 800378c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800378e:	f107 0318 	add.w	r3, r7, #24
 8003792:	2238      	movs	r2, #56	@ 0x38
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f009 fbb4 	bl	800cf04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800379c:	1d3b      	adds	r3, r7, #4
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	609a      	str	r2, [r3, #8]
 80037a6:	60da      	str	r2, [r3, #12]
 80037a8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80037aa:	2000      	movs	r0, #0
 80037ac:	f003 fec0 	bl	8007530 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80037b0:	2302      	movs	r3, #2
 80037b2:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037ba:	2340      	movs	r3, #64	@ 0x40
 80037bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037be:	2302      	movs	r3, #2
 80037c0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80037c2:	2302      	movs	r3, #2
 80037c4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80037c6:	2304      	movs	r3, #4
 80037c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80037ca:	2355      	movs	r3, #85	@ 0x55
 80037cc:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037ce:	2302      	movs	r3, #2
 80037d0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037d2:	2302      	movs	r3, #2
 80037d4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037d6:	2302      	movs	r3, #2
 80037d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80037da:	f107 0318 	add.w	r3, r7, #24
 80037de:	4618      	mov	r0, r3
 80037e0:	f003 ff5a 	bl	8007698 <HAL_RCC_OscConfig>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <SystemClock_Config+0x66>
		Error_Handler();
 80037ea:	f000 f8a7 	bl	800393c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80037ee:	230f      	movs	r3, #15
 80037f0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037f2:	2303      	movs	r3, #3
 80037f4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037f6:	2300      	movs	r3, #0
 80037f8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	2104      	movs	r1, #4
 8003806:	4618      	mov	r0, r3
 8003808:	f004 fa58 	bl	8007cbc <HAL_RCC_ClockConfig>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <SystemClock_Config+0x8e>
		Error_Handler();
 8003812:	f000 f893 	bl	800393c <Error_Handler>
	}
}
 8003816:	bf00      	nop
 8003818:	3750      	adds	r7, #80	@ 0x50
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <HAL_GPIO_EXTI_Callback>:
	default:
		return 0;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == EMER_Pin) {
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b10      	cmp	r3, #16
 800382e:	d105      	bne.n	800383c <HAL_GPIO_EXTI_Callback+0x1c>
		rs_current_state = RS_EMERGENCY_TRIGGED;
 8003830:	4b05      	ldr	r3, [pc, #20]	@ (8003848 <HAL_GPIO_EXTI_Callback+0x28>)
 8003832:	2205      	movs	r2, #5
 8003834:	701a      	strb	r2, [r3, #0]
		emer_state = PUSHED;
 8003836:	4b05      	ldr	r3, [pc, #20]	@ (800384c <HAL_GPIO_EXTI_Callback+0x2c>)
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
	}
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	200000e8 	.word	0x200000e8
 800384c:	200000e9 	.word	0x200000e9

08003850 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	if (huart == &hlpuart1) {

	}
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a29      	ldr	r2, [pc, #164]	@ (8003914 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d14a      	bne.n	800390a <HAL_TIM_PeriodElapsedCallback+0xa6>
//		rev_cmd_ux = SIGNAL_generate(&sine_sg_PWM, 0.001f);
		QEI_get_diff_count(&revolute_encoder);
 8003874:	4828      	ldr	r0, [pc, #160]	@ (8003918 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003876:	f7fe ffef 	bl	8002858 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 800387a:	4827      	ldr	r0, [pc, #156]	@ (8003918 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800387c:	f7ff f8d8 	bl	8002a30 <QEI_compute_data>
//
		rev_vin = rev_cmd_ux * ZGX45RGG_150RPM_Constant.V_max / ZGX45RGG_150RPM_Constant.U_max;
 8003880:	4b26      	ldr	r3, [pc, #152]	@ (800391c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fc fe2b 	bl	80004e0 <__aeabi_f2d>
 800388a:	4b25      	ldr	r3, [pc, #148]	@ (8003920 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800388c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003890:	f7fc fe7e 	bl	8000590 <__aeabi_dmul>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800389e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80038a2:	f7fc ff9f 	bl	80007e4 <__aeabi_ddiv>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4610      	mov	r0, r2
 80038ac:	4619      	mov	r1, r3
 80038ae:	f7fd f8a1 	bl	80009f4 <__aeabi_d2f>
 80038b2:	4603      	mov	r3, r0
 80038b4:	4a1b      	ldr	r2, [pc, #108]	@ (8003924 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80038b6:	6013      	str	r3, [r2, #0]
//
		MotorKalman_Estimate(&motor_filter, rev_vin, revolute_encoder.rads);
 80038b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003924 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80038ba:	edd3 7a00 	vldr	s15, [r3]
 80038be:	4b16      	ldr	r3, [pc, #88]	@ (8003918 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80038c0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80038c4:	eef0 0a47 	vmov.f32	s1, s14
 80038c8:	eeb0 0a67 	vmov.f32	s0, s15
 80038cc:	4816      	ldr	r0, [pc, #88]	@ (8003928 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80038ce:	f7fe fa03 	bl	8001cd8 <MotorKalman_Estimate>
		rev_kal_filt = SteadyStateKalmanFilter(&revolute_kalman, rev_vin, revolute_encoder.rads);
 80038d2:	4b14      	ldr	r3, [pc, #80]	@ (8003924 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80038d4:	edd3 7a00 	vldr	s15, [r3]
 80038d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003918 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80038da:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80038de:	eef0 0a47 	vmov.f32	s1, s14
 80038e2:	eeb0 0a67 	vmov.f32	s0, s15
 80038e6:	4811      	ldr	r0, [pc, #68]	@ (800392c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80038e8:	f7ff fbcc 	bl	8003084 <SteadyStateKalmanFilter>
 80038ec:	eef0 7a40 	vmov.f32	s15, s0
 80038f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003930 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80038f2:	edc3 7a00 	vstr	s15, [r3]

		MDXX_set_range(&revolute_motor, 2000, rev_cmd_ux);
 80038f6:	4b09      	ldr	r3, [pc, #36]	@ (800391c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80038f8:	edd3 7a00 	vldr	s15, [r3]
 80038fc:	eef0 0a67 	vmov.f32	s1, s15
 8003900:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003934 <HAL_TIM_PeriodElapsedCallback+0xd0>
 8003904:	480c      	ldr	r0, [pc, #48]	@ (8003938 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8003906:	f7fd faf5 	bl	8000ef4 <MDXX_set_range>
	}
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20001950 	.word	0x20001950
 8003918:	20000764 	.word	0x20000764
 800391c:	2000066c 	.word	0x2000066c
 8003920:	20000000 	.word	0x20000000
 8003924:	20000668 	.word	0x20000668
 8003928:	200002d4 	.word	0x200002d4
 800392c:	20000e48 	.word	0x20000e48
 8003930:	20000664 	.word	0x20000664
 8003934:	44fa0000 	.word	0x44fa0000
 8003938:	200006bc 	.word	0x200006bc

0800393c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003940:	b672      	cpsid	i
}
 8003942:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003944:	bf00      	nop
 8003946:	e7fd      	b.n	8003944 <Error_Handler+0x8>

08003948 <plotter_begin>:
float joystick_y = 0.0f;
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, up_photo, low_photo, up_lim, low_lim;
void plotter_begin() {
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	ed2d 8b02 	vpush	{d8}
 800394e:	b083      	sub	sp, #12
 8003950:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8003952:	2100      	movs	r1, #0
 8003954:	48c8      	ldr	r0, [pc, #800]	@ (8003c78 <plotter_begin+0x330>)
 8003956:	f000 fabd 	bl	8003ed4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 800395a:	eddf 2ac8 	vldr	s5, [pc, #800]	@ 8003c7c <plotter_begin+0x334>
 800395e:	ed9f 2ac8 	vldr	s4, [pc, #800]	@ 8003c80 <plotter_begin+0x338>
 8003962:	eddf 1ac8 	vldr	s3, [pc, #800]	@ 8003c84 <plotter_begin+0x33c>
 8003966:	ed9f 1ac7 	vldr	s2, [pc, #796]	@ 8003c84 <plotter_begin+0x33c>
 800396a:	eddf 0ac7 	vldr	s1, [pc, #796]	@ 8003c88 <plotter_begin+0x340>
 800396e:	ed9f 0ac3 	vldr	s0, [pc, #780]	@ 8003c7c <plotter_begin+0x334>
 8003972:	48c1      	ldr	r0, [pc, #772]	@ (8003c78 <plotter_begin+0x330>)
 8003974:	f000 fb0c 	bl	8003f90 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8003978:	2102      	movs	r1, #2
 800397a:	48c4      	ldr	r0, [pc, #784]	@ (8003c8c <plotter_begin+0x344>)
 800397c:	f000 faaa 	bl	8003ed4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8003980:	ed9f 3abe 	vldr	s6, [pc, #760]	@ 8003c7c <plotter_begin+0x334>
 8003984:	eddf 2abe 	vldr	s5, [pc, #760]	@ 8003c80 <plotter_begin+0x338>
 8003988:	ed9f 2abe 	vldr	s4, [pc, #760]	@ 8003c84 <plotter_begin+0x33c>
 800398c:	eddf 1abd 	vldr	s3, [pc, #756]	@ 8003c84 <plotter_begin+0x33c>
 8003990:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003994:	eddf 0abc 	vldr	s1, [pc, #752]	@ 8003c88 <plotter_begin+0x340>
 8003998:	ed9f 0ab8 	vldr	s0, [pc, #736]	@ 8003c7c <plotter_begin+0x334>
 800399c:	48bb      	ldr	r0, [pc, #748]	@ (8003c8c <plotter_begin+0x344>)
 800399e:	f000 fb22 	bl	8003fe6 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 80039a2:	2100      	movs	r1, #0
 80039a4:	48ba      	ldr	r0, [pc, #744]	@ (8003c90 <plotter_begin+0x348>)
 80039a6:	f000 fa95 	bl	8003ed4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 80039aa:	eef3 2a09 	vmov.f32	s5, #57	@ 0x41c80000  25.0
 80039ae:	eebb 2a09 	vmov.f32	s4, #185	@ 0xc1c80000 -25.0
 80039b2:	eddf 1ab4 	vldr	s3, [pc, #720]	@ 8003c84 <plotter_begin+0x33c>
 80039b6:	ed9f 1ab3 	vldr	s2, [pc, #716]	@ 8003c84 <plotter_begin+0x33c>
 80039ba:	eddf 0ab3 	vldr	s1, [pc, #716]	@ 8003c88 <plotter_begin+0x340>
 80039be:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80039c2:	48b3      	ldr	r0, [pc, #716]	@ (8003c90 <plotter_begin+0x348>)
 80039c4:	f000 fae4 	bl	8003f90 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 80039c8:	2102      	movs	r1, #2
 80039ca:	48b2      	ldr	r0, [pc, #712]	@ (8003c94 <plotter_begin+0x34c>)
 80039cc:	f000 fa82 	bl	8003ed4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 80039d0:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80039d4:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 80039d8:	ed9f 2aaa 	vldr	s4, [pc, #680]	@ 8003c84 <plotter_begin+0x33c>
 80039dc:	eddf 1aa9 	vldr	s3, [pc, #676]	@ 8003c84 <plotter_begin+0x33c>
 80039e0:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80039e4:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 8003c88 <plotter_begin+0x340>
 80039e8:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80039ec:	48a9      	ldr	r0, [pc, #676]	@ (8003c94 <plotter_begin+0x34c>)
 80039ee:	f000 fafa 	bl	8003fe6 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80039f2:	2100      	movs	r1, #0
 80039f4:	48a8      	ldr	r0, [pc, #672]	@ (8003c98 <plotter_begin+0x350>)
 80039f6:	f000 fa6d 	bl	8003ed4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80039fa:	4ba8      	ldr	r3, [pc, #672]	@ (8003c9c <plotter_begin+0x354>)
 80039fc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	f7fc fff6 	bl	80009f4 <__aeabi_d2f>
 8003a08:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8003a0a:	4ba4      	ldr	r3, [pc, #656]	@ (8003c9c <plotter_begin+0x354>)
 8003a0c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003a10:	4610      	mov	r0, r2
 8003a12:	4619      	mov	r1, r3
 8003a14:	f7fc ffee 	bl	80009f4 <__aeabi_d2f>
 8003a18:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8003a22:	4b9e      	ldr	r3, [pc, #632]	@ (8003c9c <plotter_begin+0x354>)
 8003a24:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003a28:	4610      	mov	r0, r2
 8003a2a:	4619      	mov	r1, r3
 8003a2c:	f7fc ffe2 	bl	80009f4 <__aeabi_d2f>
 8003a30:	4603      	mov	r3, r0
 8003a32:	ee02 3a90 	vmov	s5, r3
 8003a36:	eeb0 2a48 	vmov.f32	s4, s16
 8003a3a:	eddf 1a92 	vldr	s3, [pc, #584]	@ 8003c84 <plotter_begin+0x33c>
 8003a3e:	ed9f 1a91 	vldr	s2, [pc, #580]	@ 8003c84 <plotter_begin+0x33c>
 8003a42:	eddf 0a91 	vldr	s1, [pc, #580]	@ 8003c88 <plotter_begin+0x340>
 8003a46:	ee00 4a10 	vmov	s0, r4
 8003a4a:	4893      	ldr	r0, [pc, #588]	@ (8003c98 <plotter_begin+0x350>)
 8003a4c:	f000 faa0 	bl	8003f90 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8003a50:	2102      	movs	r1, #2
 8003a52:	4893      	ldr	r0, [pc, #588]	@ (8003ca0 <plotter_begin+0x358>)
 8003a54:	f000 fa3e 	bl	8003ed4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003a58:	4b90      	ldr	r3, [pc, #576]	@ (8003c9c <plotter_begin+0x354>)
 8003a5a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003a5e:	4610      	mov	r0, r2
 8003a60:	4619      	mov	r1, r3
 8003a62:	f7fc ffc7 	bl	80009f4 <__aeabi_d2f>
 8003a66:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8003a68:	4b8c      	ldr	r3, [pc, #560]	@ (8003c9c <plotter_begin+0x354>)
 8003a6a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003a6e:	4610      	mov	r0, r2
 8003a70:	4619      	mov	r1, r3
 8003a72:	f7fc ffbf 	bl	80009f4 <__aeabi_d2f>
 8003a76:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003a78:	ee07 3a90 	vmov	s15, r3
 8003a7c:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8003a80:	4b86      	ldr	r3, [pc, #536]	@ (8003c9c <plotter_begin+0x354>)
 8003a82:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8003a86:	4610      	mov	r0, r2
 8003a88:	4619      	mov	r1, r3
 8003a8a:	f7fc ffb3 	bl	80009f4 <__aeabi_d2f>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	ee03 3a10 	vmov	s6, r3
 8003a94:	eef0 2a48 	vmov.f32	s5, s16
 8003a98:	ed9f 2a7a 	vldr	s4, [pc, #488]	@ 8003c84 <plotter_begin+0x33c>
 8003a9c:	eddf 1a79 	vldr	s3, [pc, #484]	@ 8003c84 <plotter_begin+0x33c>
 8003aa0:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003aa4:	eddf 0a78 	vldr	s1, [pc, #480]	@ 8003c88 <plotter_begin+0x340>
 8003aa8:	ee00 4a10 	vmov	s0, r4
 8003aac:	487c      	ldr	r0, [pc, #496]	@ (8003ca0 <plotter_begin+0x358>)
 8003aae:	f000 fa9a 	bl	8003fe6 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	487b      	ldr	r0, [pc, #492]	@ (8003ca4 <plotter_begin+0x35c>)
 8003ab6:	f000 fa0d 	bl	8003ed4 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8003aba:	4b7b      	ldr	r3, [pc, #492]	@ (8003ca8 <plotter_begin+0x360>)
 8003abc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f7fc ff96 	bl	80009f4 <__aeabi_d2f>
 8003ac8:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8003aca:	4b77      	ldr	r3, [pc, #476]	@ (8003ca8 <plotter_begin+0x360>)
 8003acc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003ad0:	4610      	mov	r0, r2
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f7fc ff8e 	bl	80009f4 <__aeabi_d2f>
 8003ad8:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8003ada:	ee07 3a90 	vmov	s15, r3
 8003ade:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8003ae2:	4b71      	ldr	r3, [pc, #452]	@ (8003ca8 <plotter_begin+0x360>)
 8003ae4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8003ae8:	4610      	mov	r0, r2
 8003aea:	4619      	mov	r1, r3
 8003aec:	f7fc ff82 	bl	80009f4 <__aeabi_d2f>
 8003af0:	4603      	mov	r3, r0
 8003af2:	ee02 3a90 	vmov	s5, r3
 8003af6:	eeb0 2a48 	vmov.f32	s4, s16
 8003afa:	eddf 1a62 	vldr	s3, [pc, #392]	@ 8003c84 <plotter_begin+0x33c>
 8003afe:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8003c84 <plotter_begin+0x33c>
 8003b02:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8003c88 <plotter_begin+0x340>
 8003b06:	ee00 4a10 	vmov	s0, r4
 8003b0a:	4866      	ldr	r0, [pc, #408]	@ (8003ca4 <plotter_begin+0x35c>)
 8003b0c:	f000 fa40 	bl	8003f90 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8003b10:	2102      	movs	r1, #2
 8003b12:	4866      	ldr	r0, [pc, #408]	@ (8003cac <plotter_begin+0x364>)
 8003b14:	f000 f9de 	bl	8003ed4 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8003b18:	4b63      	ldr	r3, [pc, #396]	@ (8003ca8 <plotter_begin+0x360>)
 8003b1a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003b1e:	4610      	mov	r0, r2
 8003b20:	4619      	mov	r1, r3
 8003b22:	f7fc ff67 	bl	80009f4 <__aeabi_d2f>
 8003b26:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8003b28:	4b5f      	ldr	r3, [pc, #380]	@ (8003ca8 <plotter_begin+0x360>)
 8003b2a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8003b2e:	4610      	mov	r0, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	f7fc ff5f 	bl	80009f4 <__aeabi_d2f>
 8003b36:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8003b40:	4b59      	ldr	r3, [pc, #356]	@ (8003ca8 <plotter_begin+0x360>)
 8003b42:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8003b46:	4610      	mov	r0, r2
 8003b48:	4619      	mov	r1, r3
 8003b4a:	f7fc ff53 	bl	80009f4 <__aeabi_d2f>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	ee03 3a10 	vmov	s6, r3
 8003b54:	eef0 2a48 	vmov.f32	s5, s16
 8003b58:	ed9f 2a4a 	vldr	s4, [pc, #296]	@ 8003c84 <plotter_begin+0x33c>
 8003b5c:	eddf 1a49 	vldr	s3, [pc, #292]	@ 8003c84 <plotter_begin+0x33c>
 8003b60:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8003b64:	eddf 0a48 	vldr	s1, [pc, #288]	@ 8003c88 <plotter_begin+0x340>
 8003b68:	ee00 4a10 	vmov	s0, r4
 8003b6c:	484f      	ldr	r0, [pc, #316]	@ (8003cac <plotter_begin+0x364>)
 8003b6e:	f000 fa3a 	bl	8003fe6 <SIGNAL_config_square>

	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8003b72:	4b4a      	ldr	r3, [pc, #296]	@ (8003c9c <plotter_begin+0x354>)
 8003b74:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius;
 8003b78:	4b4d      	ldr	r3, [pc, #308]	@ (8003cb0 <plotter_begin+0x368>)
 8003b7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b7e:	f7fc fd07 	bl	8000590 <__aeabi_dmul>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8003b86:	4945      	ldr	r1, [pc, #276]	@ (8003c9c <plotter_begin+0x354>)
 8003b88:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 0.5;
 8003b8c:	4b43      	ldr	r3, [pc, #268]	@ (8003c9c <plotter_begin+0x354>)
 8003b8e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	4b47      	ldr	r3, [pc, #284]	@ (8003cb4 <plotter_begin+0x36c>)
 8003b98:	f7fc fcfa 	bl	8000590 <__aeabi_dmul>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	493e      	ldr	r1, [pc, #248]	@ (8003c9c <plotter_begin+0x354>)
 8003ba2:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0);
 8003ba6:	4b42      	ldr	r3, [pc, #264]	@ (8003cb0 <plotter_begin+0x368>)
 8003ba8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	f7fc fb38 	bl	8000224 <__adddf3>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f7fc ff1a 	bl	80009f4 <__aeabi_d2f>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	ee00 3a90 	vmov	s1, r3
 8003bc6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003bca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bd2:	4939      	ldr	r1, [pc, #228]	@ (8003cb8 <plotter_begin+0x370>)
 8003bd4:	4839      	ldr	r0, [pc, #228]	@ (8003cbc <plotter_begin+0x374>)
 8003bd6:	f7fe fdcd 	bl	8002774 <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8003bda:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8003c84 <plotter_begin+0x33c>
 8003bde:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003be2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003be6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003bea:	4935      	ldr	r1, [pc, #212]	@ (8003cc0 <plotter_begin+0x378>)
 8003bec:	4835      	ldr	r0, [pc, #212]	@ (8003cc4 <plotter_begin+0x37c>)
 8003bee:	f7fe fdc1 	bl	8002774 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8003bf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	4932      	ldr	r1, [pc, #200]	@ (8003cc8 <plotter_begin+0x380>)
 8003c00:	4832      	ldr	r0, [pc, #200]	@ (8003ccc <plotter_begin+0x384>)
 8003c02:	f7fd f953 	bl	8000eac <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8003c06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	4b30      	ldr	r3, [pc, #192]	@ (8003cd0 <plotter_begin+0x388>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	492d      	ldr	r1, [pc, #180]	@ (8003cc8 <plotter_begin+0x380>)
 8003c12:	4830      	ldr	r0, [pc, #192]	@ (8003cd4 <plotter_begin+0x38c>)
 8003c14:	f7fd f94a 	bl	8000eac <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8003c18:	220c      	movs	r2, #12
 8003c1a:	492f      	ldr	r1, [pc, #188]	@ (8003cd8 <plotter_begin+0x390>)
 8003c1c:	482f      	ldr	r0, [pc, #188]	@ (8003cdc <plotter_begin+0x394>)
 8003c1e:	f7fe fb7b 	bl	8002318 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8003c22:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8003c84 <plotter_begin+0x33c>
 8003c26:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8003ce0 <plotter_begin+0x398>
 8003c2a:	4828      	ldr	r0, [pc, #160]	@ (8003ccc <plotter_begin+0x384>)
 8003c2c:	f7fd f962 	bl	8000ef4 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8003c30:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8003c84 <plotter_begin+0x33c>
 8003c34:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8003ce0 <plotter_begin+0x398>
 8003c38:	4826      	ldr	r0, [pc, #152]	@ (8003cd4 <plotter_begin+0x38c>)
 8003c3a:	f7fd f95b 	bl	8000ef4 <MDXX_set_range>
	plotter_pen_up();
 8003c3e:	f000 f939 	bl	8003eb4 <plotter_pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 500, 5, 70,
			ZGX45RGG_400RPM_Constant.qd_max);
 8003c42:	4b16      	ldr	r3, [pc, #88]	@ (8003c9c <plotter_begin+0x354>)
 8003c44:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&prismatic_position_pid, 500, 5, 70,
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f7fc fed2 	bl	80009f4 <__aeabi_d2f>
 8003c50:	4603      	mov	r3, r0
 8003c52:	ee01 3a90 	vmov	s3, r3
 8003c56:	ed9f 1a23 	vldr	s2, [pc, #140]	@ 8003ce4 <plotter_begin+0x39c>
 8003c5a:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 8003c5e:	ed9f 0a24 	vldr	s0, [pc, #144]	@ 8003cf0 <plotter_begin+0x3a8>
 8003c62:	4821      	ldr	r0, [pc, #132]	@ (8003ce8 <plotter_begin+0x3a0>)
 8003c64:	f7fd f8f8 	bl	8000e58 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 7, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8003c68:	4b0c      	ldr	r3, [pc, #48]	@ (8003c9c <plotter_begin+0x354>)
 8003c6a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 7, 0,
 8003c6e:	4610      	mov	r0, r2
 8003c70:	4619      	mov	r1, r3
 8003c72:	f7fc febf 	bl	80009f4 <__aeabi_d2f>
 8003c76:	e03d      	b.n	8003cf4 <plotter_begin+0x3ac>
 8003c78:	20000878 	.word	0x20000878
 8003c7c:	477fff00 	.word	0x477fff00
 8003c80:	c77fff00 	.word	0xc77fff00
 8003c84:	00000000 	.word	0x00000000
 8003c88:	3dcccccd 	.word	0x3dcccccd
 8003c8c:	200008bc 	.word	0x200008bc
 8003c90:	20000900 	.word	0x20000900
 8003c94:	20000944 	.word	0x20000944
 8003c98:	20000988 	.word	0x20000988
 8003c9c:	20000060 	.word	0x20000060
 8003ca0:	200009cc 	.word	0x200009cc
 8003ca4:	20000a10 	.word	0x20000a10
 8003ca8:	20000000 	.word	0x20000000
 8003cac:	20000a54 	.word	0x20000a54
 8003cb0:	200000c0 	.word	0x200000c0
 8003cb4:	3fe00000 	.word	0x3fe00000
 8003cb8:	20001ae8 	.word	0x20001ae8
 8003cbc:	20000708 	.word	0x20000708
 8003cc0:	20001a1c 	.word	0x20001a1c
 8003cc4:	20000764 	.word	0x20000764
 8003cc8:	20001c80 	.word	0x20001c80
 8003ccc:	20000670 	.word	0x20000670
 8003cd0:	48000800 	.word	0x48000800
 8003cd4:	200006bc 	.word	0x200006bc
 8003cd8:	20001884 	.word	0x20001884
 8003cdc:	20000848 	.word	0x20000848
 8003ce0:	44fa0000 	.word	0x44fa0000
 8003ce4:	428c0000 	.word	0x428c0000
 8003ce8:	200007c0 	.word	0x200007c0
 8003cec:	00000000 	.word	0x00000000
 8003cf0:	43fa0000 	.word	0x43fa0000
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	ee01 3a90 	vmov	s3, r3
 8003cfa:	ed1f 1a04 	vldr	s2, [pc, #-16]	@ 8003cec <plotter_begin+0x3a4>
 8003cfe:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8003d02:	ed1f 0a05 	vldr	s0, [pc, #-20]	@ 8003cf0 <plotter_begin+0x3a8>
 8003d06:	4847      	ldr	r0, [pc, #284]	@ (8003e24 <plotter_begin+0x4dc>)
 8003d08:	f7fd f8a6 	bl	8000e58 <PID_CONTROLLER_Init>

	//unit test
	//25 1e-8 0
	//2000 80 0
	PID_CONTROLLER_Init(&revolute_position_pid, 500, 1e-9, 72,
			ZGX45RGG_150RPM_Constant.qd_max);
 8003d0c:	4b46      	ldr	r3, [pc, #280]	@ (8003e28 <plotter_begin+0x4e0>)
 8003d0e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 500, 1e-9, 72,
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	f7fc fe6d 	bl	80009f4 <__aeabi_d2f>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	ee01 3a90 	vmov	s3, r3
 8003d20:	ed9f 1a42 	vldr	s2, [pc, #264]	@ 8003e2c <plotter_begin+0x4e4>
 8003d24:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8003e30 <plotter_begin+0x4e8>
 8003d28:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8003e34 <plotter_begin+0x4ec>
 8003d2c:	4842      	ldr	r0, [pc, #264]	@ (8003e38 <plotter_begin+0x4f0>)
 8003d2e:	f7fd f893 	bl	8000e58 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 20, 0,
			ZGX45RGG_150RPM_Constant.U_max);
 8003d32:	4b3d      	ldr	r3, [pc, #244]	@ (8003e28 <plotter_begin+0x4e0>)
 8003d34:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 1000, 20, 0,
 8003d38:	4610      	mov	r0, r2
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	f7fc fe5a 	bl	80009f4 <__aeabi_d2f>
 8003d40:	4603      	mov	r3, r0
 8003d42:	ee01 3a90 	vmov	s3, r3
 8003d46:	ed9f 1a3d 	vldr	s2, [pc, #244]	@ 8003e3c <plotter_begin+0x4f4>
 8003d4a:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8003d4e:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8003e40 <plotter_begin+0x4f8>
 8003d52:	483c      	ldr	r0, [pc, #240]	@ (8003e44 <plotter_begin+0x4fc>)
 8003d54:	f7fd f880 	bl	8000e58 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8003d58:	4933      	ldr	r1, [pc, #204]	@ (8003e28 <plotter_begin+0x4e0>)
 8003d5a:	483b      	ldr	r0, [pc, #236]	@ (8003e48 <plotter_begin+0x500>)
 8003d5c:	f7fd f9a4 	bl	80010a8 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8003d60:	493a      	ldr	r1, [pc, #232]	@ (8003e4c <plotter_begin+0x504>)
 8003d62:	483b      	ldr	r0, [pc, #236]	@ (8003e50 <plotter_begin+0x508>)
 8003d64:	f7fd f9c0 	bl	80010e8 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8003d68:	4a3a      	ldr	r2, [pc, #232]	@ (8003e54 <plotter_begin+0x50c>)
 8003d6a:	492f      	ldr	r1, [pc, #188]	@ (8003e28 <plotter_begin+0x4e0>)
 8003d6c:	483a      	ldr	r0, [pc, #232]	@ (8003e58 <plotter_begin+0x510>)
 8003d6e:	f7fd f9a9 	bl	80010c4 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8003d72:	4a38      	ldr	r2, [pc, #224]	@ (8003e54 <plotter_begin+0x50c>)
 8003d74:	4935      	ldr	r1, [pc, #212]	@ (8003e4c <plotter_begin+0x504>)
 8003d76:	4839      	ldr	r0, [pc, #228]	@ (8003e5c <plotter_begin+0x514>)
 8003d78:	f7fd f9c4 	bl	8001104 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE,
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8003e60 <plotter_begin+0x518>
 8003d84:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 8003e64 <plotter_begin+0x51c>
 8003d88:	2328      	movs	r3, #40	@ 0x28
 8003d8a:	4a37      	ldr	r2, [pc, #220]	@ (8003e68 <plotter_begin+0x520>)
 8003d8c:	4937      	ldr	r1, [pc, #220]	@ (8003e6c <plotter_begin+0x524>)
 8003d8e:	4838      	ldr	r0, [pc, #224]	@ (8003e70 <plotter_begin+0x528>)
 8003d90:	f7fd f816 	bl	8000dc0 <ADC_DMA_Init>
	ADC_CHANNELS, 3.3f, 4095.0f);
	ADC_DMA_Start(&adc_dma);
 8003d94:	4836      	ldr	r0, [pc, #216]	@ (8003e70 <plotter_begin+0x528>)
 8003d96:	f7fd f848 	bl	8000e2a <ADC_DMA_Start>

	FIR_init(&prismatic_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003d9a:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8003e40 <plotter_begin+0x4f8>
 8003d9e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003da2:	211f      	movs	r1, #31
 8003da4:	4833      	ldr	r0, [pc, #204]	@ (8003e74 <plotter_begin+0x52c>)
 8003da6:	f7fd f9bf 	bl	8001128 <FIR_init>
	FIR_init(&prismatic_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003daa:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8003e40 <plotter_begin+0x4f8>
 8003dae:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003db2:	211f      	movs	r1, #31
 8003db4:	4830      	ldr	r0, [pc, #192]	@ (8003e78 <plotter_begin+0x530>)
 8003db6:	f7fd f9b7 	bl	8001128 <FIR_init>
	FIR_init(&revolute_lp_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003dba:	eddf 0a21 	vldr	s1, [pc, #132]	@ 8003e40 <plotter_begin+0x4f8>
 8003dbe:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003dc2:	211f      	movs	r1, #31
 8003dc4:	482d      	ldr	r0, [pc, #180]	@ (8003e7c <plotter_begin+0x534>)
 8003dc6:	f7fd f9af 	bl	8001128 <FIR_init>
	FIR_init(&revolute_lp_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8003dca:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8003e40 <plotter_begin+0x4f8>
 8003dce:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003dd2:	211f      	movs	r1, #31
 8003dd4:	482a      	ldr	r0, [pc, #168]	@ (8003e80 <plotter_begin+0x538>)
 8003dd6:	f7fd f9a7 	bl	8001128 <FIR_init>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8003dda:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8003e84 <plotter_begin+0x53c>
 8003dde:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003de2:	4a29      	ldr	r2, [pc, #164]	@ (8003e88 <plotter_begin+0x540>)
 8003de4:	4929      	ldr	r1, [pc, #164]	@ (8003e8c <plotter_begin+0x544>)
 8003de6:	482a      	ldr	r0, [pc, #168]	@ (8003e90 <plotter_begin+0x548>)
 8003de8:	f7ff fa96 	bl	8003318 <Kalman_Start>
	REVOLUTE_R);
	Kalman_Start(&prismatic_kalman, prismatic_A, prismatic_B, PRISMATIC_Q,
 8003dec:	eddf 0a25 	vldr	s1, [pc, #148]	@ 8003e84 <plotter_begin+0x53c>
 8003df0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003df4:	4a27      	ldr	r2, [pc, #156]	@ (8003e94 <plotter_begin+0x54c>)
 8003df6:	4928      	ldr	r1, [pc, #160]	@ (8003e98 <plotter_begin+0x550>)
 8003df8:	4828      	ldr	r0, [pc, #160]	@ (8003e9c <plotter_begin+0x554>)
 8003dfa:	f7ff fa8d 	bl	8003318 <Kalman_Start>
	PRISMATIC_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8003dfe:	23c8      	movs	r3, #200	@ 0xc8
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	2315      	movs	r3, #21
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	4b26      	ldr	r3, [pc, #152]	@ (8003ea0 <plotter_begin+0x558>)
 8003e08:	4a26      	ldr	r2, [pc, #152]	@ (8003ea4 <plotter_begin+0x55c>)
 8003e0a:	4927      	ldr	r1, [pc, #156]	@ (8003ea8 <plotter_begin+0x560>)
 8003e0c:	4827      	ldr	r0, [pc, #156]	@ (8003eac <plotter_begin+0x564>)
 8003e0e:	f7fd faeb 	bl	80013e8 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8003e12:	4827      	ldr	r0, [pc, #156]	@ (8003eb0 <plotter_begin+0x568>)
 8003e14:	f004 fc90 	bl	8008738 <HAL_TIM_Base_Start_IT>
}
 8003e18:	bf00      	nop
 8003e1a:	3704      	adds	r7, #4
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	ecbd 8b02 	vpop	{d8}
 8003e22:	bd90      	pop	{r4, r7, pc}
 8003e24:	200007dc 	.word	0x200007dc
 8003e28:	20000000 	.word	0x20000000
 8003e2c:	42900000 	.word	0x42900000
 8003e30:	3089705f 	.word	0x3089705f
 8003e34:	43fa0000 	.word	0x43fa0000
 8003e38:	200007f8 	.word	0x200007f8
 8003e3c:	00000000 	.word	0x00000000
 8003e40:	447a0000 	.word	0x447a0000
 8003e44:	20000814 	.word	0x20000814
 8003e48:	2000083c 	.word	0x2000083c
 8003e4c:	20000060 	.word	0x20000060
 8003e50:	20000830 	.word	0x20000830
 8003e54:	200000c0 	.word	0x200000c0
 8003e58:	20000840 	.word	0x20000840
 8003e5c:	20000834 	.word	0x20000834
 8003e60:	457ff000 	.word	0x457ff000
 8003e64:	40533333 	.word	0x40533333
 8003e68:	200011c8 	.word	0x200011c8
 8003e6c:	20000208 	.word	0x20000208
 8003e70:	20000860 	.word	0x20000860
 8003e74:	20000aa4 	.word	0x20000aa4
 8003e78:	20000a98 	.word	0x20000a98
 8003e7c:	20000abc 	.word	0x20000abc
 8003e80:	20000ab0 	.word	0x20000ab0
 8003e84:	3d4ccccd 	.word	0x3d4ccccd
 8003e88:	2000017c 	.word	0x2000017c
 8003e8c:	2000013c 	.word	0x2000013c
 8003e90:	20000e48 	.word	0x20000e48
 8003e94:	2000012c 	.word	0x2000012c
 8003e98:	200000ec 	.word	0x200000ec
 8003e9c:	20000ac8 	.word	0x20000ac8
 8003ea0:	200016f0 	.word	0x200016f0
 8003ea4:	20001d4c 	.word	0x20001d4c
 8003ea8:	20001ee4 	.word	0x20001ee4
 8003eac:	20001218 	.word	0x20001218
 8003eb0:	20001950 	.word	0x20001950

08003eb4 <plotter_pen_up>:

//    prismatic_current = ADC_DMA_ComputeCurrent(&adc_dma, PRISMATIC_CURRENT_CHANNEL, PRISMATIC_CURRENT_OFFSET);
//    revolute_current = ADC_DMA_ComputeCurrent(&adc_dma, REVOLUTE_CURRENT_CHANNEL, REVOLUTE_CURRENT_OFFSET);
}

void plotter_pen_up() {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8003eb8:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8003ebc:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8003ecc <plotter_pen_up+0x18>
 8003ec0:	4803      	ldr	r0, [pc, #12]	@ (8003ed0 <plotter_pen_up+0x1c>)
 8003ec2:	f7fe fa4b 	bl	800235c <PWM_write_duty>
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	42480000 	.word	0x42480000
 8003ed0:	20000848 	.word	0x20000848

08003ed4 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003eec:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003ef4:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a1b      	ldr	r2, [pc, #108]	@ (8003f88 <SIGNAL_init+0xb4>)
 8003f1a:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003f22:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d828      	bhi.n	8003f7c <SIGNAL_init+0xa8>
 8003f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f30 <SIGNAL_init+0x5c>)
 8003f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f30:	08003f7b 	.word	0x08003f7b
 8003f34:	08003f41 	.word	0x08003f41
 8003f38:	08003f5f 	.word	0x08003f5f
 8003f3c:	08003f69 	.word	0x08003f69
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003f4c:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a0e      	ldr	r2, [pc, #56]	@ (8003f8c <SIGNAL_init+0xb8>)
 8003f52:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003f5a:	621a      	str	r2, [r3, #32]
            break;
 8003f5c:	e00e      	b.n	8003f7c <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8003f64:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8003f66:	e009      	b.n	8003f7c <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003f76:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8003f78:	e000      	b.n	8003f7c <SIGNAL_init+0xa8>
            break;
 8003f7a:	bf00      	nop
    }
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	bf800000 	.word	0xbf800000
 8003f8c:	41200000 	.word	0x41200000

08003f90 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8003f90:	b480      	push	{r7}
 8003f92:	b089      	sub	sp, #36	@ 0x24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	61f8      	str	r0, [r7, #28]
 8003f98:	ed87 0a06 	vstr	s0, [r7, #24]
 8003f9c:	edc7 0a05 	vstr	s1, [r7, #20]
 8003fa0:	ed87 1a04 	vstr	s2, [r7, #16]
 8003fa4:	edc7 1a03 	vstr	s3, [r7, #12]
 8003fa8:	ed87 2a02 	vstr	s4, [r7, #8]
 8003fac:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003fda:	bf00      	nop
 8003fdc:	3724      	adds	r7, #36	@ 0x24
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8003fe6:	b480      	push	{r7}
 8003fe8:	b089      	sub	sp, #36	@ 0x24
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	61f8      	str	r0, [r7, #28]
 8003fee:	ed87 0a06 	vstr	s0, [r7, #24]
 8003ff2:	edc7 0a05 	vstr	s1, [r7, #20]
 8003ff6:	ed87 1a04 	vstr	s2, [r7, #16]
 8003ffa:	edc7 1a03 	vstr	s3, [r7, #12]
 8003ffe:	ed87 2a02 	vstr	s4, [r7, #8]
 8004002:	edc7 2a01 	vstr	s5, [r7, #4]
 8004006:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2202      	movs	r2, #2
 800400e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800403a:	bf00      	nop
 800403c:	3724      	adds	r7, #36	@ 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
	...

08004048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404e:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <HAL_MspInit+0x44>)
 8004050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004052:	4a0e      	ldr	r2, [pc, #56]	@ (800408c <HAL_MspInit+0x44>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6613      	str	r3, [r2, #96]	@ 0x60
 800405a:	4b0c      	ldr	r3, [pc, #48]	@ (800408c <HAL_MspInit+0x44>)
 800405c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004066:	4b09      	ldr	r3, [pc, #36]	@ (800408c <HAL_MspInit+0x44>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406a:	4a08      	ldr	r2, [pc, #32]	@ (800408c <HAL_MspInit+0x44>)
 800406c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004070:	6593      	str	r3, [r2, #88]	@ 0x58
 8004072:	4b06      	ldr	r3, [pc, #24]	@ (800408c <HAL_MspInit+0x44>)
 8004074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800407e:	f003 fafb 	bl	8007678 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004082:	bf00      	nop
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000

08004090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <NMI_Handler+0x4>

08004098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800409c:	bf00      	nop
 800409e:	e7fd      	b.n	800409c <HardFault_Handler+0x4>

080040a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040a4:	bf00      	nop
 80040a6:	e7fd      	b.n	80040a4 <MemManage_Handler+0x4>

080040a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ac:	bf00      	nop
 80040ae:	e7fd      	b.n	80040ac <BusFault_Handler+0x4>

080040b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040b4:	bf00      	nop
 80040b6:	e7fd      	b.n	80040b4 <UsageFault_Handler+0x4>

080040b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040b8:	b480      	push	{r7}
 80040ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040bc:	bf00      	nop
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040c6:	b480      	push	{r7}
 80040c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040ca:	bf00      	nop
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr

080040e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040e6:	f000 ff99 	bl	800501c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040f4:	4802      	ldr	r0, [pc, #8]	@ (8004100 <DMA1_Channel1_IRQHandler+0x10>)
 80040f6:	f002 ff1a 	bl	8006f2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	20000274 	.word	0x20000274

08004104 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004108:	4802      	ldr	r0, [pc, #8]	@ (8004114 <DMA1_Channel2_IRQHandler+0x10>)
 800410a:	f002 ff10 	bl	8006f2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20002070 	.word	0x20002070

08004118 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800411c:	4802      	ldr	r0, [pc, #8]	@ (8004128 <DMA1_Channel3_IRQHandler+0x10>)
 800411e:	f002 ff06 	bl	8006f2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004122:	bf00      	nop
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	200020d0 	.word	0x200020d0

0800412c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8004130:	4802      	ldr	r0, [pc, #8]	@ (800413c <DMA1_Channel4_IRQHandler+0x10>)
 8004132:	f002 fefc 	bl	8006f2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	20001fb0 	.word	0x20001fb0

08004140 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8004144:	4802      	ldr	r0, [pc, #8]	@ (8004150 <DMA1_Channel5_IRQHandler+0x10>)
 8004146:	f002 fef2 	bl	8006f2e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800414a:	bf00      	nop
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20002010 	.word	0x20002010

08004154 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004158:	4803      	ldr	r0, [pc, #12]	@ (8004168 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800415a:	f004 ff13 	bl	8008f84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800415e:	4803      	ldr	r0, [pc, #12]	@ (800416c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004160:	f004 ff10 	bl	8008f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004164:	bf00      	nop
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20001884 	.word	0x20001884
 800416c:	20001d4c 	.word	0x20001d4c

08004170 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004174:	4802      	ldr	r0, [pc, #8]	@ (8004180 <TIM2_IRQHandler+0x10>)
 8004176:	f004 ff05 	bl	8008f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	20001950 	.word	0x20001950

08004184 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004188:	4802      	ldr	r0, [pc, #8]	@ (8004194 <TIM3_IRQHandler+0x10>)
 800418a:	f004 fefb 	bl	8008f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800418e:	bf00      	nop
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20001a1c 	.word	0x20001a1c

08004198 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800419c:	4802      	ldr	r0, [pc, #8]	@ (80041a8 <TIM4_IRQHandler+0x10>)
 800419e:	f004 fef1 	bl	8008f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20001ae8 	.word	0x20001ae8

080041ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80041b0:	4802      	ldr	r0, [pc, #8]	@ (80041bc <USART2_IRQHandler+0x10>)
 80041b2:	f006 fc3b 	bl	800aa2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80041b6:	bf00      	nop
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20001ee4 	.word	0x20001ee4

080041c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80041c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80041c8:	f003 f99a 	bl	8007500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041cc:	bf00      	nop
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80041d4:	4802      	ldr	r0, [pc, #8]	@ (80041e0 <LPUART1_IRQHandler+0x10>)
 80041d6:	f006 fc29 	bl	800aa2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80041da:	bf00      	nop
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20001e18 	.word	0x20001e18

080041e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041ec:	4a14      	ldr	r2, [pc, #80]	@ (8004240 <_sbrk+0x5c>)
 80041ee:	4b15      	ldr	r3, [pc, #84]	@ (8004244 <_sbrk+0x60>)
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041f8:	4b13      	ldr	r3, [pc, #76]	@ (8004248 <_sbrk+0x64>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d102      	bne.n	8004206 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004200:	4b11      	ldr	r3, [pc, #68]	@ (8004248 <_sbrk+0x64>)
 8004202:	4a12      	ldr	r2, [pc, #72]	@ (800424c <_sbrk+0x68>)
 8004204:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004206:	4b10      	ldr	r3, [pc, #64]	@ (8004248 <_sbrk+0x64>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	429a      	cmp	r2, r3
 8004212:	d207      	bcs.n	8004224 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004214:	f008 fe8e 	bl	800cf34 <__errno>
 8004218:	4603      	mov	r3, r0
 800421a:	220c      	movs	r2, #12
 800421c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800421e:	f04f 33ff 	mov.w	r3, #4294967295
 8004222:	e009      	b.n	8004238 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004224:	4b08      	ldr	r3, [pc, #32]	@ (8004248 <_sbrk+0x64>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800422a:	4b07      	ldr	r3, [pc, #28]	@ (8004248 <_sbrk+0x64>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	4a05      	ldr	r2, [pc, #20]	@ (8004248 <_sbrk+0x64>)
 8004234:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004236:	68fb      	ldr	r3, [r7, #12]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20020000 	.word	0x20020000
 8004244:	00000400 	.word	0x00000400
 8004248:	20001880 	.word	0x20001880
 800424c:	20002280 	.word	0x20002280

08004250 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004254:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <SystemInit+0x20>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	4a05      	ldr	r2, [pc, #20]	@ (8004270 <SystemInit+0x20>)
 800425c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004260:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b098      	sub	sp, #96	@ 0x60
 8004278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800427a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800427e:	2200      	movs	r2, #0
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	605a      	str	r2, [r3, #4]
 8004284:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004286:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	605a      	str	r2, [r3, #4]
 8004290:	609a      	str	r2, [r3, #8]
 8004292:	60da      	str	r2, [r3, #12]
 8004294:	611a      	str	r2, [r3, #16]
 8004296:	615a      	str	r2, [r3, #20]
 8004298:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800429a:	1d3b      	adds	r3, r7, #4
 800429c:	2234      	movs	r2, #52	@ 0x34
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f008 fe2f 	bl	800cf04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80042a6:	4b3b      	ldr	r3, [pc, #236]	@ (8004394 <MX_TIM1_Init+0x120>)
 80042a8:	4a3b      	ldr	r2, [pc, #236]	@ (8004398 <MX_TIM1_Init+0x124>)
 80042aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80042ac:	4b39      	ldr	r3, [pc, #228]	@ (8004394 <MX_TIM1_Init+0x120>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b2:	4b38      	ldr	r3, [pc, #224]	@ (8004394 <MX_TIM1_Init+0x120>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80042b8:	4b36      	ldr	r3, [pc, #216]	@ (8004394 <MX_TIM1_Init+0x120>)
 80042ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80042be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042c0:	4b34      	ldr	r3, [pc, #208]	@ (8004394 <MX_TIM1_Init+0x120>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80042c6:	4b33      	ldr	r3, [pc, #204]	@ (8004394 <MX_TIM1_Init+0x120>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042cc:	4b31      	ldr	r3, [pc, #196]	@ (8004394 <MX_TIM1_Init+0x120>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80042d2:	4830      	ldr	r0, [pc, #192]	@ (8004394 <MX_TIM1_Init+0x120>)
 80042d4:	f004 faa8 	bl	8008828 <HAL_TIM_PWM_Init>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80042de:	f7ff fb2d 	bl	800393c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042e2:	2300      	movs	r3, #0
 80042e4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042ea:	2300      	movs	r3, #0
 80042ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80042ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80042f2:	4619      	mov	r1, r3
 80042f4:	4827      	ldr	r0, [pc, #156]	@ (8004394 <MX_TIM1_Init+0x120>)
 80042f6:	f006 f8b9 	bl	800a46c <HAL_TIMEx_MasterConfigSynchronization>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8004300:	f7ff fb1c 	bl	800393c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004304:	2360      	movs	r3, #96	@ 0x60
 8004306:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004308:	2300      	movs	r3, #0
 800430a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800430c:	2300      	movs	r3, #0
 800430e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004310:	2300      	movs	r3, #0
 8004312:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004314:	2300      	movs	r3, #0
 8004316:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004318:	2300      	movs	r3, #0
 800431a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800431c:	2300      	movs	r3, #0
 800431e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004320:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004324:	220c      	movs	r2, #12
 8004326:	4619      	mov	r1, r3
 8004328:	481a      	ldr	r0, [pc, #104]	@ (8004394 <MX_TIM1_Init+0x120>)
 800432a:	f004 ffa5 	bl	8009278 <HAL_TIM_PWM_ConfigChannel>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8004334:	f7ff fb02 	bl	800393c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004338:	2300      	movs	r3, #0
 800433a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800433c:	2300      	movs	r3, #0
 800433e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004348:	2300      	movs	r3, #0
 800434a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800434c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004350:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004356:	2300      	movs	r3, #0
 8004358:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800435a:	2300      	movs	r3, #0
 800435c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800435e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004362:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004364:	2300      	movs	r3, #0
 8004366:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004368:	2300      	movs	r3, #0
 800436a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800436c:	2300      	movs	r3, #0
 800436e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004370:	1d3b      	adds	r3, r7, #4
 8004372:	4619      	mov	r1, r3
 8004374:	4807      	ldr	r0, [pc, #28]	@ (8004394 <MX_TIM1_Init+0x120>)
 8004376:	f006 f90f 	bl	800a598 <HAL_TIMEx_ConfigBreakDeadTime>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8004380:	f7ff fadc 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004384:	4803      	ldr	r0, [pc, #12]	@ (8004394 <MX_TIM1_Init+0x120>)
 8004386:	f000 fb5b 	bl	8004a40 <HAL_TIM_MspPostInit>

}
 800438a:	bf00      	nop
 800438c:	3760      	adds	r7, #96	@ 0x60
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20001884 	.word	0x20001884
 8004398:	40012c00 	.word	0x40012c00

0800439c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b088      	sub	sp, #32
 80043a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043a2:	f107 0310 	add.w	r3, r7, #16
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	605a      	str	r2, [r3, #4]
 80043ac:	609a      	str	r2, [r3, #8]
 80043ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043b0:	1d3b      	adds	r3, r7, #4
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	605a      	str	r2, [r3, #4]
 80043b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80043ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004434 <MX_TIM2_Init+0x98>)
 80043bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80043c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80043c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004434 <MX_TIM2_Init+0x98>)
 80043c4:	22a9      	movs	r2, #169	@ 0xa9
 80043c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043c8:	4b1a      	ldr	r3, [pc, #104]	@ (8004434 <MX_TIM2_Init+0x98>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80043ce:	4b19      	ldr	r3, [pc, #100]	@ (8004434 <MX_TIM2_Init+0x98>)
 80043d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80043d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043d6:	4b17      	ldr	r3, [pc, #92]	@ (8004434 <MX_TIM2_Init+0x98>)
 80043d8:	2200      	movs	r2, #0
 80043da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043dc:	4b15      	ldr	r3, [pc, #84]	@ (8004434 <MX_TIM2_Init+0x98>)
 80043de:	2200      	movs	r2, #0
 80043e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80043e2:	4814      	ldr	r0, [pc, #80]	@ (8004434 <MX_TIM2_Init+0x98>)
 80043e4:	f004 f8d4 	bl	8008590 <HAL_TIM_Base_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80043ee:	f7ff faa5 	bl	800393c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80043f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80043f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80043f8:	f107 0310 	add.w	r3, r7, #16
 80043fc:	4619      	mov	r1, r3
 80043fe:	480d      	ldr	r0, [pc, #52]	@ (8004434 <MX_TIM2_Init+0x98>)
 8004400:	f005 f84e 	bl	80094a0 <HAL_TIM_ConfigClockSource>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800440a:	f7ff fa97 	bl	800393c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	4619      	mov	r1, r3
 800441a:	4806      	ldr	r0, [pc, #24]	@ (8004434 <MX_TIM2_Init+0x98>)
 800441c:	f006 f826 	bl	800a46c <HAL_TIMEx_MasterConfigSynchronization>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004426:	f7ff fa89 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800442a:	bf00      	nop
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	20001950 	.word	0x20001950

08004438 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08c      	sub	sp, #48	@ 0x30
 800443c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800443e:	f107 030c 	add.w	r3, r7, #12
 8004442:	2224      	movs	r2, #36	@ 0x24
 8004444:	2100      	movs	r1, #0
 8004446:	4618      	mov	r0, r3
 8004448:	f008 fd5c 	bl	800cf04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800444c:	463b      	mov	r3, r7
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	605a      	str	r2, [r3, #4]
 8004454:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004456:	4b21      	ldr	r3, [pc, #132]	@ (80044dc <MX_TIM3_Init+0xa4>)
 8004458:	4a21      	ldr	r2, [pc, #132]	@ (80044e0 <MX_TIM3_Init+0xa8>)
 800445a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800445c:	4b1f      	ldr	r3, [pc, #124]	@ (80044dc <MX_TIM3_Init+0xa4>)
 800445e:	2200      	movs	r2, #0
 8004460:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004462:	4b1e      	ldr	r3, [pc, #120]	@ (80044dc <MX_TIM3_Init+0xa4>)
 8004464:	2200      	movs	r2, #0
 8004466:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004468:	4b1c      	ldr	r3, [pc, #112]	@ (80044dc <MX_TIM3_Init+0xa4>)
 800446a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800446e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004470:	4b1a      	ldr	r3, [pc, #104]	@ (80044dc <MX_TIM3_Init+0xa4>)
 8004472:	2200      	movs	r2, #0
 8004474:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004476:	4b19      	ldr	r3, [pc, #100]	@ (80044dc <MX_TIM3_Init+0xa4>)
 8004478:	2200      	movs	r2, #0
 800447a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800447c:	2303      	movs	r3, #3
 800447e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004480:	2300      	movs	r3, #0
 8004482:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004484:	2301      	movs	r3, #1
 8004486:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004490:	2300      	movs	r3, #0
 8004492:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004494:	2301      	movs	r3, #1
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004498:	2300      	movs	r3, #0
 800449a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80044a0:	f107 030c 	add.w	r3, r7, #12
 80044a4:	4619      	mov	r1, r3
 80044a6:	480d      	ldr	r0, [pc, #52]	@ (80044dc <MX_TIM3_Init+0xa4>)
 80044a8:	f004 fc2a 	bl	8008d00 <HAL_TIM_Encoder_Init>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80044b2:	f7ff fa43 	bl	800393c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044b6:	2300      	movs	r3, #0
 80044b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80044be:	463b      	mov	r3, r7
 80044c0:	4619      	mov	r1, r3
 80044c2:	4806      	ldr	r0, [pc, #24]	@ (80044dc <MX_TIM3_Init+0xa4>)
 80044c4:	f005 ffd2 	bl	800a46c <HAL_TIMEx_MasterConfigSynchronization>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80044ce:	f7ff fa35 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80044d2:	bf00      	nop
 80044d4:	3730      	adds	r7, #48	@ 0x30
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20001a1c 	.word	0x20001a1c
 80044e0:	40000400 	.word	0x40000400

080044e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b08c      	sub	sp, #48	@ 0x30
 80044e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	2224      	movs	r2, #36	@ 0x24
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f008 fd06 	bl	800cf04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044f8:	463b      	mov	r3, r7
 80044fa:	2200      	movs	r2, #0
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	605a      	str	r2, [r3, #4]
 8004500:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004502:	4b21      	ldr	r3, [pc, #132]	@ (8004588 <MX_TIM4_Init+0xa4>)
 8004504:	4a21      	ldr	r2, [pc, #132]	@ (800458c <MX_TIM4_Init+0xa8>)
 8004506:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004508:	4b1f      	ldr	r3, [pc, #124]	@ (8004588 <MX_TIM4_Init+0xa4>)
 800450a:	2200      	movs	r2, #0
 800450c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800450e:	4b1e      	ldr	r3, [pc, #120]	@ (8004588 <MX_TIM4_Init+0xa4>)
 8004510:	2200      	movs	r2, #0
 8004512:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8004514:	4b1c      	ldr	r3, [pc, #112]	@ (8004588 <MX_TIM4_Init+0xa4>)
 8004516:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800451a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800451c:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <MX_TIM4_Init+0xa4>)
 800451e:	2200      	movs	r2, #0
 8004520:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004522:	4b19      	ldr	r3, [pc, #100]	@ (8004588 <MX_TIM4_Init+0xa4>)
 8004524:	2200      	movs	r2, #0
 8004526:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004528:	2303      	movs	r3, #3
 800452a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004530:	2301      	movs	r3, #1
 8004532:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004534:	2300      	movs	r3, #0
 8004536:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800453c:	2300      	movs	r3, #0
 800453e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004540:	2301      	movs	r3, #1
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004544:	2300      	movs	r3, #0
 8004546:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8004548:	2300      	movs	r3, #0
 800454a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800454c:	f107 030c 	add.w	r3, r7, #12
 8004550:	4619      	mov	r1, r3
 8004552:	480d      	ldr	r0, [pc, #52]	@ (8004588 <MX_TIM4_Init+0xa4>)
 8004554:	f004 fbd4 	bl	8008d00 <HAL_TIM_Encoder_Init>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800455e:	f7ff f9ed 	bl	800393c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004562:	2300      	movs	r3, #0
 8004564:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004566:	2300      	movs	r3, #0
 8004568:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800456a:	463b      	mov	r3, r7
 800456c:	4619      	mov	r1, r3
 800456e:	4806      	ldr	r0, [pc, #24]	@ (8004588 <MX_TIM4_Init+0xa4>)
 8004570:	f005 ff7c 	bl	800a46c <HAL_TIMEx_MasterConfigSynchronization>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800457a:	f7ff f9df 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800457e:	bf00      	nop
 8004580:	3730      	adds	r7, #48	@ 0x30
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20001ae8 	.word	0x20001ae8
 800458c:	40000800 	.word	0x40000800

08004590 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004596:	f107 0310 	add.w	r3, r7, #16
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	605a      	str	r2, [r3, #4]
 80045a0:	609a      	str	r2, [r3, #8]
 80045a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045a4:	1d3b      	adds	r3, r7, #4
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	605a      	str	r2, [r3, #4]
 80045ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80045ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004624 <MX_TIM5_Init+0x94>)
 80045b0:	4a1d      	ldr	r2, [pc, #116]	@ (8004628 <MX_TIM5_Init+0x98>)
 80045b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80045b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <MX_TIM5_Init+0x94>)
 80045b6:	22a9      	movs	r2, #169	@ 0xa9
 80045b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004624 <MX_TIM5_Init+0x94>)
 80045bc:	2200      	movs	r2, #0
 80045be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80045c0:	4b18      	ldr	r3, [pc, #96]	@ (8004624 <MX_TIM5_Init+0x94>)
 80045c2:	f04f 32ff 	mov.w	r2, #4294967295
 80045c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045c8:	4b16      	ldr	r3, [pc, #88]	@ (8004624 <MX_TIM5_Init+0x94>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045ce:	4b15      	ldr	r3, [pc, #84]	@ (8004624 <MX_TIM5_Init+0x94>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80045d4:	4813      	ldr	r0, [pc, #76]	@ (8004624 <MX_TIM5_Init+0x94>)
 80045d6:	f003 ffdb 	bl	8008590 <HAL_TIM_Base_Init>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80045e0:	f7ff f9ac 	bl	800393c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80045ea:	f107 0310 	add.w	r3, r7, #16
 80045ee:	4619      	mov	r1, r3
 80045f0:	480c      	ldr	r0, [pc, #48]	@ (8004624 <MX_TIM5_Init+0x94>)
 80045f2:	f004 ff55 	bl	80094a0 <HAL_TIM_ConfigClockSource>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80045fc:	f7ff f99e 	bl	800393c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004600:	2300      	movs	r3, #0
 8004602:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004608:	1d3b      	adds	r3, r7, #4
 800460a:	4619      	mov	r1, r3
 800460c:	4805      	ldr	r0, [pc, #20]	@ (8004624 <MX_TIM5_Init+0x94>)
 800460e:	f005 ff2d 	bl	800a46c <HAL_TIMEx_MasterConfigSynchronization>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d001      	beq.n	800461c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004618:	f7ff f990 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800461c:	bf00      	nop
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20001bb4 	.word	0x20001bb4
 8004628:	40000c00 	.word	0x40000c00

0800462c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b09c      	sub	sp, #112	@ 0x70
 8004630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004632:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	605a      	str	r2, [r3, #4]
 800463c:	609a      	str	r2, [r3, #8]
 800463e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004640:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	605a      	str	r2, [r3, #4]
 800464a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800464c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004650:	2200      	movs	r2, #0
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	609a      	str	r2, [r3, #8]
 8004658:	60da      	str	r2, [r3, #12]
 800465a:	611a      	str	r2, [r3, #16]
 800465c:	615a      	str	r2, [r3, #20]
 800465e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004660:	1d3b      	adds	r3, r7, #4
 8004662:	2234      	movs	r2, #52	@ 0x34
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f008 fc4c 	bl	800cf04 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800466c:	4b51      	ldr	r3, [pc, #324]	@ (80047b4 <MX_TIM8_Init+0x188>)
 800466e:	4a52      	ldr	r2, [pc, #328]	@ (80047b8 <MX_TIM8_Init+0x18c>)
 8004670:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004672:	4b50      	ldr	r3, [pc, #320]	@ (80047b4 <MX_TIM8_Init+0x188>)
 8004674:	2200      	movs	r2, #0
 8004676:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004678:	4b4e      	ldr	r3, [pc, #312]	@ (80047b4 <MX_TIM8_Init+0x188>)
 800467a:	2200      	movs	r2, #0
 800467c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800467e:	4b4d      	ldr	r3, [pc, #308]	@ (80047b4 <MX_TIM8_Init+0x188>)
 8004680:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004684:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004686:	4b4b      	ldr	r3, [pc, #300]	@ (80047b4 <MX_TIM8_Init+0x188>)
 8004688:	2200      	movs	r2, #0
 800468a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800468c:	4b49      	ldr	r3, [pc, #292]	@ (80047b4 <MX_TIM8_Init+0x188>)
 800468e:	2200      	movs	r2, #0
 8004690:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004692:	4b48      	ldr	r3, [pc, #288]	@ (80047b4 <MX_TIM8_Init+0x188>)
 8004694:	2200      	movs	r2, #0
 8004696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004698:	4846      	ldr	r0, [pc, #280]	@ (80047b4 <MX_TIM8_Init+0x188>)
 800469a:	f003 ff79 	bl	8008590 <HAL_TIM_Base_Init>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80046a4:	f7ff f94a 	bl	800393c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80046ac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80046ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80046b2:	4619      	mov	r1, r3
 80046b4:	483f      	ldr	r0, [pc, #252]	@ (80047b4 <MX_TIM8_Init+0x188>)
 80046b6:	f004 fef3 	bl	80094a0 <HAL_TIM_ConfigClockSource>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80046c0:	f7ff f93c 	bl	800393c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80046c4:	483b      	ldr	r0, [pc, #236]	@ (80047b4 <MX_TIM8_Init+0x188>)
 80046c6:	f004 f8af 	bl	8008828 <HAL_TIM_PWM_Init>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80046d0:	f7ff f934 	bl	800393c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046d4:	2300      	movs	r3, #0
 80046d6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80046d8:	2300      	movs	r3, #0
 80046da:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046dc:	2300      	movs	r3, #0
 80046de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80046e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80046e4:	4619      	mov	r1, r3
 80046e6:	4833      	ldr	r0, [pc, #204]	@ (80047b4 <MX_TIM8_Init+0x188>)
 80046e8:	f005 fec0 	bl	800a46c <HAL_TIMEx_MasterConfigSynchronization>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80046f2:	f7ff f923 	bl	800393c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046f6:	2360      	movs	r3, #96	@ 0x60
 80046f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80046fa:	2300      	movs	r3, #0
 80046fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046fe:	2300      	movs	r3, #0
 8004700:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004702:	2300      	movs	r3, #0
 8004704:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004706:	2300      	movs	r3, #0
 8004708:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800470a:	2300      	movs	r3, #0
 800470c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800470e:	2300      	movs	r3, #0
 8004710:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004712:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004716:	2200      	movs	r2, #0
 8004718:	4619      	mov	r1, r3
 800471a:	4826      	ldr	r0, [pc, #152]	@ (80047b4 <MX_TIM8_Init+0x188>)
 800471c:	f004 fdac 	bl	8009278 <HAL_TIM_PWM_ConfigChannel>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8004726:	f7ff f909 	bl	800393c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800472a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800472e:	2204      	movs	r2, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4820      	ldr	r0, [pc, #128]	@ (80047b4 <MX_TIM8_Init+0x188>)
 8004734:	f004 fda0 	bl	8009278 <HAL_TIM_PWM_ConfigChannel>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 800473e:	f7ff f8fd 	bl	800393c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004742:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004746:	2208      	movs	r2, #8
 8004748:	4619      	mov	r1, r3
 800474a:	481a      	ldr	r0, [pc, #104]	@ (80047b4 <MX_TIM8_Init+0x188>)
 800474c:	f004 fd94 	bl	8009278 <HAL_TIM_PWM_ConfigChannel>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8004756:	f7ff f8f1 	bl	800393c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800475a:	2300      	movs	r3, #0
 800475c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800476a:	2300      	movs	r3, #0
 800476c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800476e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004772:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004778:	2300      	movs	r3, #0
 800477a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800477c:	2300      	movs	r3, #0
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004780:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800478a:	2300      	movs	r3, #0
 800478c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800478e:	2300      	movs	r3, #0
 8004790:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004792:	1d3b      	adds	r3, r7, #4
 8004794:	4619      	mov	r1, r3
 8004796:	4807      	ldr	r0, [pc, #28]	@ (80047b4 <MX_TIM8_Init+0x188>)
 8004798:	f005 fefe 	bl	800a598 <HAL_TIMEx_ConfigBreakDeadTime>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 80047a2:	f7ff f8cb 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80047a6:	4803      	ldr	r0, [pc, #12]	@ (80047b4 <MX_TIM8_Init+0x188>)
 80047a8:	f000 f94a 	bl	8004a40 <HAL_TIM_MspPostInit>

}
 80047ac:	bf00      	nop
 80047ae:	3770      	adds	r7, #112	@ 0x70
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	20001c80 	.word	0x20001c80
 80047b8:	40013400 	.word	0x40013400

080047bc <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80047c0:	4b14      	ldr	r3, [pc, #80]	@ (8004814 <MX_TIM16_Init+0x58>)
 80047c2:	4a15      	ldr	r2, [pc, #84]	@ (8004818 <MX_TIM16_Init+0x5c>)
 80047c4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80047c6:	4b13      	ldr	r3, [pc, #76]	@ (8004814 <MX_TIM16_Init+0x58>)
 80047c8:	22a9      	movs	r2, #169	@ 0xa9
 80047ca:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047cc:	4b11      	ldr	r3, [pc, #68]	@ (8004814 <MX_TIM16_Init+0x58>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80047d2:	4b10      	ldr	r3, [pc, #64]	@ (8004814 <MX_TIM16_Init+0x58>)
 80047d4:	f240 4279 	movw	r2, #1145	@ 0x479
 80047d8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047da:	4b0e      	ldr	r3, [pc, #56]	@ (8004814 <MX_TIM16_Init+0x58>)
 80047dc:	2200      	movs	r2, #0
 80047de:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80047e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004814 <MX_TIM16_Init+0x58>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <MX_TIM16_Init+0x58>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80047ec:	4809      	ldr	r0, [pc, #36]	@ (8004814 <MX_TIM16_Init+0x58>)
 80047ee:	f003 fecf 	bl	8008590 <HAL_TIM_Base_Init>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80047f8:	f7ff f8a0 	bl	800393c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80047fc:	2108      	movs	r1, #8
 80047fe:	4805      	ldr	r0, [pc, #20]	@ (8004814 <MX_TIM16_Init+0x58>)
 8004800:	f004 f988 	bl	8008b14 <HAL_TIM_OnePulse_Init>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800480a:	f7ff f897 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800480e:	bf00      	nop
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	20001d4c 	.word	0x20001d4c
 8004818:	40014400 	.word	0x40014400

0800481c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a0d      	ldr	r2, [pc, #52]	@ (8004860 <HAL_TIM_PWM_MspInit+0x44>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d113      	bne.n	8004856 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800482e:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <HAL_TIM_PWM_MspInit+0x48>)
 8004830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004832:	4a0c      	ldr	r2, [pc, #48]	@ (8004864 <HAL_TIM_PWM_MspInit+0x48>)
 8004834:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004838:	6613      	str	r3, [r2, #96]	@ 0x60
 800483a:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <HAL_TIM_PWM_MspInit+0x48>)
 800483c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800483e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004842:	60fb      	str	r3, [r7, #12]
 8004844:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004846:	2200      	movs	r2, #0
 8004848:	2100      	movs	r1, #0
 800484a:	2019      	movs	r0, #25
 800484c:	f002 f957 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004850:	2019      	movs	r0, #25
 8004852:	f002 f96e 	bl	8006b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40012c00 	.word	0x40012c00
 8004864:	40021000 	.word	0x40021000

08004868 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004878:	d114      	bne.n	80048a4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800487a:	4b2b      	ldr	r3, [pc, #172]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487e:	4a2a      	ldr	r2, [pc, #168]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	6593      	str	r3, [r2, #88]	@ 0x58
 8004886:	4b28      	ldr	r3, [pc, #160]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 8004888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004892:	2200      	movs	r2, #0
 8004894:	2100      	movs	r1, #0
 8004896:	201c      	movs	r0, #28
 8004898:	f002 f931 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800489c:	201c      	movs	r0, #28
 800489e:	f002 f948 	bl	8006b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80048a2:	e03c      	b.n	800491e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a20      	ldr	r2, [pc, #128]	@ (800492c <HAL_TIM_Base_MspInit+0xc4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d10c      	bne.n	80048c8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 80048b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 80048b4:	f043 0308 	orr.w	r3, r3, #8
 80048b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 80048bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	613b      	str	r3, [r7, #16]
 80048c4:	693b      	ldr	r3, [r7, #16]
}
 80048c6:	e02a      	b.n	800491e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a18      	ldr	r2, [pc, #96]	@ (8004930 <HAL_TIM_Base_MspInit+0xc8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d10c      	bne.n	80048ec <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80048d2:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 80048d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d6:	4a14      	ldr	r2, [pc, #80]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 80048d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80048dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80048de:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 80048e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	68fb      	ldr	r3, [r7, #12]
}
 80048ea:	e018      	b.n	800491e <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a10      	ldr	r2, [pc, #64]	@ (8004934 <HAL_TIM_Base_MspInit+0xcc>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d113      	bne.n	800491e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80048f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 80048f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048fa:	4a0b      	ldr	r2, [pc, #44]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 80048fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004900:	6613      	str	r3, [r2, #96]	@ 0x60
 8004902:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <HAL_TIM_Base_MspInit+0xc0>)
 8004904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800490e:	2200      	movs	r2, #0
 8004910:	2100      	movs	r1, #0
 8004912:	2019      	movs	r0, #25
 8004914:	f002 f8f3 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004918:	2019      	movs	r0, #25
 800491a:	f002 f90a 	bl	8006b32 <HAL_NVIC_EnableIRQ>
}
 800491e:	bf00      	nop
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40013400 	.word	0x40013400
 8004934:	40014400 	.word	0x40014400

08004938 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08c      	sub	sp, #48	@ 0x30
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004940:	f107 031c 	add.w	r3, r7, #28
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	605a      	str	r2, [r3, #4]
 800494a:	609a      	str	r2, [r3, #8]
 800494c:	60da      	str	r2, [r3, #12]
 800494e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a37      	ldr	r2, [pc, #220]	@ (8004a34 <HAL_TIM_Encoder_MspInit+0xfc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d131      	bne.n	80049be <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800495a:	4b37      	ldr	r3, [pc, #220]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 800495c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495e:	4a36      	ldr	r2, [pc, #216]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 8004960:	f043 0302 	orr.w	r3, r3, #2
 8004964:	6593      	str	r3, [r2, #88]	@ 0x58
 8004966:	4b34      	ldr	r3, [pc, #208]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004972:	4b31      	ldr	r3, [pc, #196]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 8004974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004976:	4a30      	ldr	r2, [pc, #192]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800497e:	4b2e      	ldr	r3, [pc, #184]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 8004980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800498a:	23c0      	movs	r3, #192	@ 0xc0
 800498c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498e:	2302      	movs	r3, #2
 8004990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004996:	2300      	movs	r3, #0
 8004998:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800499a:	2302      	movs	r3, #2
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800499e:	f107 031c 	add.w	r3, r7, #28
 80049a2:	4619      	mov	r1, r3
 80049a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049a8:	f002 fc10 	bl	80071cc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80049ac:	2200      	movs	r2, #0
 80049ae:	2100      	movs	r1, #0
 80049b0:	201d      	movs	r0, #29
 80049b2:	f002 f8a4 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80049b6:	201d      	movs	r0, #29
 80049b8:	f002 f8bb 	bl	8006b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80049bc:	e036      	b.n	8004a2c <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a1e      	ldr	r2, [pc, #120]	@ (8004a3c <HAL_TIM_Encoder_MspInit+0x104>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d131      	bne.n	8004a2c <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80049c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 80049ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 80049ce:	f043 0304 	orr.w	r3, r3, #4
 80049d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80049d4:	4b18      	ldr	r3, [pc, #96]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 80049d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049e0:	4b15      	ldr	r3, [pc, #84]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 80049e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e4:	4a14      	ldr	r2, [pc, #80]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 80049e6:	f043 0301 	orr.w	r3, r3, #1
 80049ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049ec:	4b12      	ldr	r3, [pc, #72]	@ (8004a38 <HAL_TIM_Encoder_MspInit+0x100>)
 80049ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	60fb      	str	r3, [r7, #12]
 80049f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80049f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80049fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049fe:	2302      	movs	r3, #2
 8004a00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a06:	2300      	movs	r3, #0
 8004a08:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8004a0a:	230a      	movs	r3, #10
 8004a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a0e:	f107 031c 	add.w	r3, r7, #28
 8004a12:	4619      	mov	r1, r3
 8004a14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a18:	f002 fbd8 	bl	80071cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2100      	movs	r1, #0
 8004a20:	201e      	movs	r0, #30
 8004a22:	f002 f86c 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004a26:	201e      	movs	r0, #30
 8004a28:	f002 f883 	bl	8006b32 <HAL_NVIC_EnableIRQ>
}
 8004a2c:	bf00      	nop
 8004a2e:	3730      	adds	r7, #48	@ 0x30
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40000800 	.word	0x40000800

08004a40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b08a      	sub	sp, #40	@ 0x28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a48:	f107 0314 	add.w	r3, r7, #20
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	605a      	str	r2, [r3, #4]
 8004a52:	609a      	str	r2, [r3, #8]
 8004a54:	60da      	str	r2, [r3, #12]
 8004a56:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a30      	ldr	r2, [pc, #192]	@ (8004b20 <HAL_TIM_MspPostInit+0xe0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d11c      	bne.n	8004a9c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a62:	4b30      	ldr	r3, [pc, #192]	@ (8004b24 <HAL_TIM_MspPostInit+0xe4>)
 8004a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a66:	4a2f      	ldr	r2, [pc, #188]	@ (8004b24 <HAL_TIM_MspPostInit+0xe4>)
 8004a68:	f043 0304 	orr.w	r3, r3, #4
 8004a6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004b24 <HAL_TIM_MspPostInit+0xe4>)
 8004a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a7a:	2308      	movs	r3, #8
 8004a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a7e:	2302      	movs	r3, #2
 8004a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a86:	2300      	movs	r3, #0
 8004a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a8e:	f107 0314 	add.w	r3, r7, #20
 8004a92:	4619      	mov	r1, r3
 8004a94:	4824      	ldr	r0, [pc, #144]	@ (8004b28 <HAL_TIM_MspPostInit+0xe8>)
 8004a96:	f002 fb99 	bl	80071cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004a9a:	e03d      	b.n	8004b18 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM8)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a22      	ldr	r2, [pc, #136]	@ (8004b2c <HAL_TIM_MspPostInit+0xec>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d138      	bne.n	8004b18 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8004b24 <HAL_TIM_MspPostInit+0xe4>)
 8004aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aaa:	4a1e      	ldr	r2, [pc, #120]	@ (8004b24 <HAL_TIM_MspPostInit+0xe4>)
 8004aac:	f043 0304 	orr.w	r3, r3, #4
 8004ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b24 <HAL_TIM_MspPostInit+0xe4>)
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004abe:	4b19      	ldr	r3, [pc, #100]	@ (8004b24 <HAL_TIM_MspPostInit+0xe4>)
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac2:	4a18      	ldr	r2, [pc, #96]	@ (8004b24 <HAL_TIM_MspPostInit+0xe4>)
 8004ac4:	f043 0302 	orr.w	r3, r3, #2
 8004ac8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004aca:	4b16      	ldr	r3, [pc, #88]	@ (8004b24 <HAL_TIM_MspPostInit+0xe4>)
 8004acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	60bb      	str	r3, [r7, #8]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004ad6:	23c0      	movs	r3, #192	@ 0xc0
 8004ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ada:	2302      	movs	r3, #2
 8004adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aea:	f107 0314 	add.w	r3, r7, #20
 8004aee:	4619      	mov	r1, r3
 8004af0:	480d      	ldr	r0, [pc, #52]	@ (8004b28 <HAL_TIM_MspPostInit+0xe8>)
 8004af2:	f002 fb6b 	bl	80071cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004af6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004afc:	2302      	movs	r3, #2
 8004afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b04:	2300      	movs	r3, #0
 8004b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8004b08:	230a      	movs	r3, #10
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b0c:	f107 0314 	add.w	r3, r7, #20
 8004b10:	4619      	mov	r1, r3
 8004b12:	4807      	ldr	r0, [pc, #28]	@ (8004b30 <HAL_TIM_MspPostInit+0xf0>)
 8004b14:	f002 fb5a 	bl	80071cc <HAL_GPIO_Init>
}
 8004b18:	bf00      	nop
 8004b1a:	3728      	adds	r7, #40	@ 0x28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	40012c00 	.word	0x40012c00
 8004b24:	40021000 	.word	0x40021000
 8004b28:	48000800 	.word	0x48000800
 8004b2c:	40013400 	.word	0x40013400
 8004b30:	48000400 	.word	0x48000400

08004b34 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8004b38:	4b20      	ldr	r3, [pc, #128]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b3a:	4a21      	ldr	r2, [pc, #132]	@ (8004bc0 <MX_LPUART1_UART_Init+0x8c>)
 8004b3c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8004b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b40:	4a20      	ldr	r2, [pc, #128]	@ (8004bc4 <MX_LPUART1_UART_Init+0x90>)
 8004b42:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004b44:	4b1d      	ldr	r3, [pc, #116]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8004b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8004b50:	4b1a      	ldr	r3, [pc, #104]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8004b56:	4b19      	ldr	r3, [pc, #100]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b58:	220c      	movs	r2, #12
 8004b5a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b5c:	4b17      	ldr	r3, [pc, #92]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b62:	4b16      	ldr	r3, [pc, #88]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004b68:	4b14      	ldr	r3, [pc, #80]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b6e:	4b13      	ldr	r3, [pc, #76]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8004b74:	4811      	ldr	r0, [pc, #68]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b76:	f005 fdf3 	bl	800a760 <HAL_UART_Init>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8004b80:	f7fe fedc 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b84:	2100      	movs	r1, #0
 8004b86:	480d      	ldr	r0, [pc, #52]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b88:	f007 fb46 	bl	800c218 <HAL_UARTEx_SetTxFifoThreshold>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8004b92:	f7fe fed3 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004b96:	2100      	movs	r1, #0
 8004b98:	4808      	ldr	r0, [pc, #32]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004b9a:	f007 fb7b 	bl	800c294 <HAL_UARTEx_SetRxFifoThreshold>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8004ba4:	f7fe feca 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8004ba8:	4804      	ldr	r0, [pc, #16]	@ (8004bbc <MX_LPUART1_UART_Init+0x88>)
 8004baa:	f007 fafc 	bl	800c1a6 <HAL_UARTEx_DisableFifoMode>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8004bb4:	f7fe fec2 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8004bb8:	bf00      	nop
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20001e18 	.word	0x20001e18
 8004bc0:	40008000 	.word	0x40008000
 8004bc4:	001e8480 	.word	0x001e8480

08004bc8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004bcc:	4b23      	ldr	r3, [pc, #140]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004bce:	4a24      	ldr	r2, [pc, #144]	@ (8004c60 <MX_USART2_UART_Init+0x98>)
 8004bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8004bd2:	4b22      	ldr	r3, [pc, #136]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004bd4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8004bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8004bda:	4b20      	ldr	r3, [pc, #128]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004bdc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004be0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004be2:	4b1e      	ldr	r3, [pc, #120]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8004be8:	4b1c      	ldr	r3, [pc, #112]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004bea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004bee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004bf2:	220c      	movs	r2, #12
 8004bf4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bf6:	4b19      	ldr	r3, [pc, #100]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bfc:	4b17      	ldr	r3, [pc, #92]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c02:	4b16      	ldr	r3, [pc, #88]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004c04:	2200      	movs	r2, #0
 8004c06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004c08:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c0e:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c14:	4811      	ldr	r0, [pc, #68]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004c16:	f005 fda3 	bl	800a760 <HAL_UART_Init>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8004c20:	f7fe fe8c 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c24:	2100      	movs	r1, #0
 8004c26:	480d      	ldr	r0, [pc, #52]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004c28:	f007 faf6 	bl	800c218 <HAL_UARTEx_SetTxFifoThreshold>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8004c32:	f7fe fe83 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004c36:	2100      	movs	r1, #0
 8004c38:	4808      	ldr	r0, [pc, #32]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004c3a:	f007 fb2b 	bl	800c294 <HAL_UARTEx_SetRxFifoThreshold>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8004c44:	f7fe fe7a 	bl	800393c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004c48:	4804      	ldr	r0, [pc, #16]	@ (8004c5c <MX_USART2_UART_Init+0x94>)
 8004c4a:	f007 faac 	bl	800c1a6 <HAL_UARTEx_DisableFifoMode>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d001      	beq.n	8004c58 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8004c54:	f7fe fe72 	bl	800393c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c58:	bf00      	nop
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20001ee4 	.word	0x20001ee4
 8004c60:	40004400 	.word	0x40004400

08004c64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b0a0      	sub	sp, #128	@ 0x80
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	605a      	str	r2, [r3, #4]
 8004c76:	609a      	str	r2, [r3, #8]
 8004c78:	60da      	str	r2, [r3, #12]
 8004c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c7c:	f107 0318 	add.w	r3, r7, #24
 8004c80:	2254      	movs	r2, #84	@ 0x54
 8004c82:	2100      	movs	r1, #0
 8004c84:	4618      	mov	r0, r3
 8004c86:	f008 f93d 	bl	800cf04 <memset>
  if(uartHandle->Instance==LPUART1)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a99      	ldr	r2, [pc, #612]	@ (8004ef4 <HAL_UART_MspInit+0x290>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	f040 8093 	bne.w	8004dbc <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004c96:	2320      	movs	r3, #32
 8004c98:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c9e:	f107 0318 	add.w	r3, r7, #24
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f003 fa26 	bl	80080f4 <HAL_RCCEx_PeriphCLKConfig>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004cae:	f7fe fe45 	bl	800393c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004cb2:	4b91      	ldr	r3, [pc, #580]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb6:	4a90      	ldr	r2, [pc, #576]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8004cbe:	4b8e      	ldr	r3, [pc, #568]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cca:	4b8b      	ldr	r3, [pc, #556]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cce:	4a8a      	ldr	r2, [pc, #552]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004cd0:	f043 0302 	orr.w	r3, r3, #2
 8004cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cd6:	4b88      	ldr	r3, [pc, #544]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	613b      	str	r3, [r7, #16]
 8004ce0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ce2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce8:	2302      	movs	r3, #2
 8004cea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	487f      	ldr	r0, [pc, #508]	@ (8004efc <HAL_UART_MspInit+0x298>)
 8004d00:	f002 fa64 	bl	80071cc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 8004d04:	4b7e      	ldr	r3, [pc, #504]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d06:	4a7f      	ldr	r2, [pc, #508]	@ (8004f04 <HAL_UART_MspInit+0x2a0>)
 8004d08:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8004d0a:	4b7d      	ldr	r3, [pc, #500]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d0c:	2222      	movs	r2, #34	@ 0x22
 8004d0e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d10:	4b7b      	ldr	r3, [pc, #492]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d16:	4b7a      	ldr	r3, [pc, #488]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d1c:	4b78      	ldr	r3, [pc, #480]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d1e:	2280      	movs	r2, #128	@ 0x80
 8004d20:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d22:	4b77      	ldr	r3, [pc, #476]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d28:	4b75      	ldr	r3, [pc, #468]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8004d2e:	4b74      	ldr	r3, [pc, #464]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004d34:	4b72      	ldr	r3, [pc, #456]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8004d3a:	4871      	ldr	r0, [pc, #452]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d3c:	f001 ff14 	bl	8006b68 <HAL_DMA_Init>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004d46:	f7fe fdf9 	bl	800393c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	4a6c      	ldr	r2, [pc, #432]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d4e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004d52:	4a6b      	ldr	r2, [pc, #428]	@ (8004f00 <HAL_UART_MspInit+0x29c>)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8004d58:	4b6b      	ldr	r3, [pc, #428]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004d5a:	4a6c      	ldr	r2, [pc, #432]	@ (8004f0c <HAL_UART_MspInit+0x2a8>)
 8004d5c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8004d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004d60:	2223      	movs	r2, #35	@ 0x23
 8004d62:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d64:	4b68      	ldr	r3, [pc, #416]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004d66:	2210      	movs	r2, #16
 8004d68:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d6a:	4b67      	ldr	r3, [pc, #412]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d70:	4b65      	ldr	r3, [pc, #404]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004d72:	2280      	movs	r2, #128	@ 0x80
 8004d74:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d76:	4b64      	ldr	r3, [pc, #400]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d7c:	4b62      	ldr	r3, [pc, #392]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8004d82:	4b61      	ldr	r3, [pc, #388]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d88:	4b5f      	ldr	r3, [pc, #380]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8004d8e:	485e      	ldr	r0, [pc, #376]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004d90:	f001 feea 	bl	8006b68 <HAL_DMA_Init>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8004d9a:	f7fe fdcf 	bl	800393c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a59      	ldr	r2, [pc, #356]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004da2:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004da4:	4a58      	ldr	r2, [pc, #352]	@ (8004f08 <HAL_UART_MspInit+0x2a4>)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8004daa:	2200      	movs	r2, #0
 8004dac:	2100      	movs	r1, #0
 8004dae:	205b      	movs	r0, #91	@ 0x5b
 8004db0:	f001 fea5 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004db4:	205b      	movs	r0, #91	@ 0x5b
 8004db6:	f001 febc 	bl	8006b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004dba:	e097      	b.n	8004eec <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a53      	ldr	r2, [pc, #332]	@ (8004f10 <HAL_UART_MspInit+0x2ac>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	f040 8092 	bne.w	8004eec <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004dc8:	2302      	movs	r3, #2
 8004dca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dd0:	f107 0318 	add.w	r3, r7, #24
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f003 f98d 	bl	80080f4 <HAL_RCCEx_PeriphCLKConfig>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8004de0:	f7fe fdac 	bl	800393c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004de4:	4b44      	ldr	r3, [pc, #272]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de8:	4a43      	ldr	r2, [pc, #268]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8004df0:	4b41      	ldr	r3, [pc, #260]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dfc:	4b3e      	ldr	r3, [pc, #248]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e00:	4a3d      	ldr	r2, [pc, #244]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e08:	4b3b      	ldr	r3, [pc, #236]	@ (8004ef8 <HAL_UART_MspInit+0x294>)
 8004e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004e14:	230c      	movs	r3, #12
 8004e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e18:	2302      	movs	r3, #2
 8004e1a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e20:	2300      	movs	r3, #0
 8004e22:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e24:	2307      	movs	r3, #7
 8004e26:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e28:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e32:	f002 f9cb 	bl	80071cc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004e36:	4b37      	ldr	r3, [pc, #220]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e38:	4a37      	ldr	r2, [pc, #220]	@ (8004f18 <HAL_UART_MspInit+0x2b4>)
 8004e3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004e3c:	4b35      	ldr	r3, [pc, #212]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e3e:	221a      	movs	r2, #26
 8004e40:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e42:	4b34      	ldr	r3, [pc, #208]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e48:	4b32      	ldr	r3, [pc, #200]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e4e:	4b31      	ldr	r3, [pc, #196]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e50:	2280      	movs	r2, #128	@ 0x80
 8004e52:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e54:	4b2f      	ldr	r3, [pc, #188]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e5a:	4b2e      	ldr	r3, [pc, #184]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004e60:	4b2c      	ldr	r3, [pc, #176]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e66:	4b2b      	ldr	r3, [pc, #172]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e68:	2200      	movs	r2, #0
 8004e6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004e6c:	4829      	ldr	r0, [pc, #164]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e6e:	f001 fe7b 	bl	8006b68 <HAL_DMA_Init>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d001      	beq.n	8004e7c <HAL_UART_MspInit+0x218>
      Error_Handler();
 8004e78:	f7fe fd60 	bl	800393c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a25      	ldr	r2, [pc, #148]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004e84:	4a23      	ldr	r2, [pc, #140]	@ (8004f14 <HAL_UART_MspInit+0x2b0>)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8004e8a:	4b24      	ldr	r3, [pc, #144]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004e8c:	4a24      	ldr	r2, [pc, #144]	@ (8004f20 <HAL_UART_MspInit+0x2bc>)
 8004e8e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004e90:	4b22      	ldr	r3, [pc, #136]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004e92:	221b      	movs	r2, #27
 8004e94:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004e96:	4b21      	ldr	r3, [pc, #132]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004e98:	2210      	movs	r2, #16
 8004e9a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004ea4:	2280      	movs	r2, #128	@ 0x80
 8004ea6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004eae:	4b1b      	ldr	r3, [pc, #108]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004eb4:	4b19      	ldr	r3, [pc, #100]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004eba:	4b18      	ldr	r3, [pc, #96]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004ec0:	4816      	ldr	r0, [pc, #88]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004ec2:	f001 fe51 	bl	8006b68 <HAL_DMA_Init>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d001      	beq.n	8004ed0 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8004ecc:	f7fe fd36 	bl	800393c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a12      	ldr	r2, [pc, #72]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004ed4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004ed6:	4a11      	ldr	r2, [pc, #68]	@ (8004f1c <HAL_UART_MspInit+0x2b8>)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004edc:	2200      	movs	r2, #0
 8004ede:	2100      	movs	r1, #0
 8004ee0:	2026      	movs	r0, #38	@ 0x26
 8004ee2:	f001 fe0c 	bl	8006afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004ee6:	2026      	movs	r0, #38	@ 0x26
 8004ee8:	f001 fe23 	bl	8006b32 <HAL_NVIC_EnableIRQ>
}
 8004eec:	bf00      	nop
 8004eee:	3780      	adds	r7, #128	@ 0x80
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40008000 	.word	0x40008000
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	48000400 	.word	0x48000400
 8004f00:	20001fb0 	.word	0x20001fb0
 8004f04:	40020044 	.word	0x40020044
 8004f08:	20002010 	.word	0x20002010
 8004f0c:	40020058 	.word	0x40020058
 8004f10:	40004400 	.word	0x40004400
 8004f14:	20002070 	.word	0x20002070
 8004f18:	4002001c 	.word	0x4002001c
 8004f1c:	200020d0 	.word	0x200020d0
 8004f20:	40020030 	.word	0x40020030

08004f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f24:	480d      	ldr	r0, [pc, #52]	@ (8004f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f26:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004f28:	f7ff f992 	bl	8004250 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f2c:	480c      	ldr	r0, [pc, #48]	@ (8004f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f2e:	490d      	ldr	r1, [pc, #52]	@ (8004f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f30:	4a0d      	ldr	r2, [pc, #52]	@ (8004f68 <LoopForever+0xe>)
  movs r3, #0
 8004f32:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004f34:	e002      	b.n	8004f3c <LoopCopyDataInit>

08004f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f3a:	3304      	adds	r3, #4

08004f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f40:	d3f9      	bcc.n	8004f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f42:	4a0a      	ldr	r2, [pc, #40]	@ (8004f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f44:	4c0a      	ldr	r4, [pc, #40]	@ (8004f70 <LoopForever+0x16>)
  movs r3, #0
 8004f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f48:	e001      	b.n	8004f4e <LoopFillZerobss>

08004f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f4c:	3204      	adds	r2, #4

08004f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f50:	d3fb      	bcc.n	8004f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004f52:	f007 fff5 	bl	800cf40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004f56:	f7fe fb9b 	bl	8003690 <main>

08004f5a <LoopForever>:

LoopForever:
    b LoopForever
 8004f5a:	e7fe      	b.n	8004f5a <LoopForever>
  ldr   r0, =_estack
 8004f5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f64:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004f68:	0800df30 	.word	0x0800df30
  ldr r2, =_sbss
 8004f6c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004f70:	2000227c 	.word	0x2000227c

08004f74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004f74:	e7fe      	b.n	8004f74 <ADC1_2_IRQHandler>

08004f76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f80:	2003      	movs	r0, #3
 8004f82:	f001 fdb1 	bl	8006ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f86:	2000      	movs	r0, #0
 8004f88:	f000 f80e 	bl	8004fa8 <HAL_InitTick>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	71fb      	strb	r3, [r7, #7]
 8004f96:	e001      	b.n	8004f9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f98:	f7ff f856 	bl	8004048 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f9c:	79fb      	ldrb	r3, [r7, #7]

}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b084      	sub	sp, #16
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004fb4:	4b16      	ldr	r3, [pc, #88]	@ (8005010 <HAL_InitTick+0x68>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d022      	beq.n	8005002 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004fbc:	4b15      	ldr	r3, [pc, #84]	@ (8005014 <HAL_InitTick+0x6c>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4b13      	ldr	r3, [pc, #76]	@ (8005010 <HAL_InitTick+0x68>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004fc8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f001 fdbc 	bl	8006b4e <HAL_SYSTICK_Config>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10f      	bne.n	8004ffc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b0f      	cmp	r3, #15
 8004fe0:	d809      	bhi.n	8004ff6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8004fea:	f001 fd88 	bl	8006afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004fee:	4a0a      	ldr	r2, [pc, #40]	@ (8005018 <HAL_InitTick+0x70>)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	e007      	b.n	8005006 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	73fb      	strb	r3, [r7, #15]
 8004ffa:	e004      	b.n	8005006 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e001      	b.n	8005006 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005006:	7bfb      	ldrb	r3, [r7, #15]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20000194 	.word	0x20000194
 8005014:	2000018c 	.word	0x2000018c
 8005018:	20000190 	.word	0x20000190

0800501c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005020:	4b05      	ldr	r3, [pc, #20]	@ (8005038 <HAL_IncTick+0x1c>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	4b05      	ldr	r3, [pc, #20]	@ (800503c <HAL_IncTick+0x20>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4413      	add	r3, r2
 800502a:	4a03      	ldr	r2, [pc, #12]	@ (8005038 <HAL_IncTick+0x1c>)
 800502c:	6013      	str	r3, [r2, #0]
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20002130 	.word	0x20002130
 800503c:	20000194 	.word	0x20000194

08005040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  return uwTick;
 8005044:	4b03      	ldr	r3, [pc, #12]	@ (8005054 <HAL_GetTick+0x14>)
 8005046:	681b      	ldr	r3, [r3, #0]
}
 8005048:	4618      	mov	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	20002130 	.word	0x20002130

08005058 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005058:	b480      	push	{r7}
 800505a:	b083      	sub	sp, #12
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	609a      	str	r2, [r3, #8]
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
 8005086:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	431a      	orrs	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	609a      	str	r2, [r3, #8]
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3360      	adds	r3, #96	@ 0x60
 80050d2:	461a      	mov	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	4b08      	ldr	r3, [pc, #32]	@ (8005104 <LL_ADC_SetOffset+0x44>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80050f8:	bf00      	nop
 80050fa:	371c      	adds	r7, #28
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	03fff000 	.word	0x03fff000

08005108 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	3360      	adds	r3, #96	@ 0x60
 8005116:	461a      	mov	r2, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005128:	4618      	mov	r0, r3
 800512a:	3714      	adds	r7, #20
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	3360      	adds	r3, #96	@ 0x60
 8005144:	461a      	mov	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	431a      	orrs	r2, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800516a:	b480      	push	{r7}
 800516c:	b087      	sub	sp, #28
 800516e:	af00      	add	r7, sp, #0
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3360      	adds	r3, #96	@ 0x60
 800517a:	461a      	mov	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	431a      	orrs	r2, r3
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3360      	adds	r3, #96	@ 0x60
 80051b0:	461a      	mov	r2, r3
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4413      	add	r3, r2
 80051b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	615a      	str	r2, [r3, #20]
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005210:	2301      	movs	r3, #1
 8005212:	e000      	b.n	8005216 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr

08005222 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005222:	b480      	push	{r7}
 8005224:	b087      	sub	sp, #28
 8005226:	af00      	add	r7, sp, #0
 8005228:	60f8      	str	r0, [r7, #12]
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	3330      	adds	r3, #48	@ 0x30
 8005232:	461a      	mov	r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	4413      	add	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	211f      	movs	r1, #31
 800524e:	fa01 f303 	lsl.w	r3, r1, r3
 8005252:	43db      	mvns	r3, r3
 8005254:	401a      	ands	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	0e9b      	lsrs	r3, r3, #26
 800525a:	f003 011f 	and.w	r1, r3, #31
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	fa01 f303 	lsl.w	r3, r1, r3
 8005268:	431a      	orrs	r2, r3
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800527a:	b480      	push	{r7}
 800527c:	b087      	sub	sp, #28
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	3314      	adds	r3, #20
 800528a:	461a      	mov	r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	0e5b      	lsrs	r3, r3, #25
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	4413      	add	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	0d1b      	lsrs	r3, r3, #20
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	2107      	movs	r1, #7
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	43db      	mvns	r3, r3
 80052ae:	401a      	ands	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	0d1b      	lsrs	r3, r3, #20
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	fa01 f303 	lsl.w	r3, r1, r3
 80052be:	431a      	orrs	r2, r3
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80052c4:	bf00      	nop
 80052c6:	371c      	adds	r7, #28
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e8:	43db      	mvns	r3, r3
 80052ea:	401a      	ands	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f003 0318 	and.w	r3, r3, #24
 80052f2:	4908      	ldr	r1, [pc, #32]	@ (8005314 <LL_ADC_SetChannelSingleDiff+0x44>)
 80052f4:	40d9      	lsrs	r1, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	400b      	ands	r3, r1
 80052fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052fe:	431a      	orrs	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005306:	bf00      	nop
 8005308:	3714      	adds	r7, #20
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	0007ffff 	.word	0x0007ffff

08005318 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 031f 	and.w	r3, r3, #31
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005344:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	6093      	str	r3, [r2, #8]
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800536c:	d101      	bne.n	8005372 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005390:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005394:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053bc:	d101      	bne.n	80053c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80053be:	2301      	movs	r3, #1
 80053c0:	e000      	b.n	80053c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80053e4:	f043 0201 	orr.w	r2, r3, #1
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800540c:	f043 0202 	orr.w	r2, r3, #2
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b01      	cmp	r3, #1
 8005432:	d101      	bne.n	8005438 <LL_ADC_IsEnabled+0x18>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <LL_ADC_IsEnabled+0x1a>
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	370c      	adds	r7, #12
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b02      	cmp	r3, #2
 8005458:	d101      	bne.n	800545e <LL_ADC_IsDisableOngoing+0x18>
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <LL_ADC_IsDisableOngoing+0x1a>
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800547c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005480:	f043 0204 	orr.w	r2, r3, #4
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d101      	bne.n	80054ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80054a8:	2301      	movs	r3, #1
 80054aa:	e000      	b.n	80054ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d101      	bne.n	80054d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80054ce:	2301      	movs	r3, #1
 80054d0:	e000      	b.n	80054d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80054e0:	b590      	push	{r4, r7, lr}
 80054e2:	b089      	sub	sp, #36	@ 0x24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054e8:	2300      	movs	r3, #0
 80054ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e1a9      	b.n	800584e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005504:	2b00      	cmp	r3, #0
 8005506:	d109      	bne.n	800551c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7fd fc3d 	bl	8002d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff ff19 	bl	8005358 <LL_ADC_IsDeepPowerDownEnabled>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff feff 	bl	8005334 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff ff34 	bl	80053a8 <LL_ADC_IsInternalRegulatorEnabled>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d115      	bne.n	8005572 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff ff18 	bl	8005380 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005550:	4b9c      	ldr	r3, [pc, #624]	@ (80057c4 <HAL_ADC_Init+0x2e4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	099b      	lsrs	r3, r3, #6
 8005556:	4a9c      	ldr	r2, [pc, #624]	@ (80057c8 <HAL_ADC_Init+0x2e8>)
 8005558:	fba2 2303 	umull	r2, r3, r2, r3
 800555c:	099b      	lsrs	r3, r3, #6
 800555e:	3301      	adds	r3, #1
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005564:	e002      	b.n	800556c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3b01      	subs	r3, #1
 800556a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f9      	bne.n	8005566 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff ff16 	bl	80053a8 <LL_ADC_IsInternalRegulatorEnabled>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10d      	bne.n	800559e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005586:	f043 0210 	orr.w	r2, r3, #16
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005592:	f043 0201 	orr.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7ff ff76 	bl	8005494 <LL_ADC_REG_IsConversionOngoing>
 80055a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 8142 	bne.w	800583c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f040 813e 	bne.w	800583c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80055c8:	f043 0202 	orr.w	r2, r3, #2
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff ff23 	bl	8005420 <LL_ADC_IsEnabled>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d141      	bne.n	8005664 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055e8:	d004      	beq.n	80055f4 <HAL_ADC_Init+0x114>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a77      	ldr	r2, [pc, #476]	@ (80057cc <HAL_ADC_Init+0x2ec>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d10f      	bne.n	8005614 <HAL_ADC_Init+0x134>
 80055f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80055f8:	f7ff ff12 	bl	8005420 <LL_ADC_IsEnabled>
 80055fc:	4604      	mov	r4, r0
 80055fe:	4873      	ldr	r0, [pc, #460]	@ (80057cc <HAL_ADC_Init+0x2ec>)
 8005600:	f7ff ff0e 	bl	8005420 <LL_ADC_IsEnabled>
 8005604:	4603      	mov	r3, r0
 8005606:	4323      	orrs	r3, r4
 8005608:	2b00      	cmp	r3, #0
 800560a:	bf0c      	ite	eq
 800560c:	2301      	moveq	r3, #1
 800560e:	2300      	movne	r3, #0
 8005610:	b2db      	uxtb	r3, r3
 8005612:	e012      	b.n	800563a <HAL_ADC_Init+0x15a>
 8005614:	486e      	ldr	r0, [pc, #440]	@ (80057d0 <HAL_ADC_Init+0x2f0>)
 8005616:	f7ff ff03 	bl	8005420 <LL_ADC_IsEnabled>
 800561a:	4604      	mov	r4, r0
 800561c:	486d      	ldr	r0, [pc, #436]	@ (80057d4 <HAL_ADC_Init+0x2f4>)
 800561e:	f7ff feff 	bl	8005420 <LL_ADC_IsEnabled>
 8005622:	4603      	mov	r3, r0
 8005624:	431c      	orrs	r4, r3
 8005626:	486c      	ldr	r0, [pc, #432]	@ (80057d8 <HAL_ADC_Init+0x2f8>)
 8005628:	f7ff fefa 	bl	8005420 <LL_ADC_IsEnabled>
 800562c:	4603      	mov	r3, r0
 800562e:	4323      	orrs	r3, r4
 8005630:	2b00      	cmp	r3, #0
 8005632:	bf0c      	ite	eq
 8005634:	2301      	moveq	r3, #1
 8005636:	2300      	movne	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d012      	beq.n	8005664 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005646:	d004      	beq.n	8005652 <HAL_ADC_Init+0x172>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a5f      	ldr	r2, [pc, #380]	@ (80057cc <HAL_ADC_Init+0x2ec>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d101      	bne.n	8005656 <HAL_ADC_Init+0x176>
 8005652:	4a62      	ldr	r2, [pc, #392]	@ (80057dc <HAL_ADC_Init+0x2fc>)
 8005654:	e000      	b.n	8005658 <HAL_ADC_Init+0x178>
 8005656:	4a62      	ldr	r2, [pc, #392]	@ (80057e0 <HAL_ADC_Init+0x300>)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	4619      	mov	r1, r3
 800565e:	4610      	mov	r0, r2
 8005660:	f7ff fcfa 	bl	8005058 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	7f5b      	ldrb	r3, [r3, #29]
 8005668:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800566e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005674:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800567a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005682:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800568e:	2b01      	cmp	r3, #1
 8005690:	d106      	bne.n	80056a0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005696:	3b01      	subs	r3, #1
 8005698:	045b      	lsls	r3, r3, #17
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	4313      	orrs	r3, r2
 800569e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d009      	beq.n	80056bc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	4b48      	ldr	r3, [pc, #288]	@ (80057e4 <HAL_ADC_Init+0x304>)
 80056c4:	4013      	ands	r3, r2
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	69b9      	ldr	r1, [r7, #24]
 80056cc:	430b      	orrs	r3, r1
 80056ce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fee5 	bl	80054ba <LL_ADC_INJ_IsConversionOngoing>
 80056f0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d17f      	bne.n	80057f8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d17c      	bne.n	80057f8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005702:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800570a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800570c:	4313      	orrs	r3, r2
 800570e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800571a:	f023 0302 	bic.w	r3, r3, #2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	69b9      	ldr	r1, [r7, #24]
 8005724:	430b      	orrs	r3, r1
 8005726:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d017      	beq.n	8005760 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691a      	ldr	r2, [r3, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800573e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005748:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800574c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6911      	ldr	r1, [r2, #16]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	430b      	orrs	r3, r1
 800575a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800575e:	e013      	b.n	8005788 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800576e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005780:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005784:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800578e:	2b01      	cmp	r3, #1
 8005790:	d12a      	bne.n	80057e8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800579c:	f023 0304 	bic.w	r3, r3, #4
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80057a8:	4311      	orrs	r1, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80057ae:	4311      	orrs	r1, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80057b4:	430a      	orrs	r2, r1
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0201 	orr.w	r2, r2, #1
 80057c0:	611a      	str	r2, [r3, #16]
 80057c2:	e019      	b.n	80057f8 <HAL_ADC_Init+0x318>
 80057c4:	2000018c 	.word	0x2000018c
 80057c8:	053e2d63 	.word	0x053e2d63
 80057cc:	50000100 	.word	0x50000100
 80057d0:	50000400 	.word	0x50000400
 80057d4:	50000500 	.word	0x50000500
 80057d8:	50000600 	.word	0x50000600
 80057dc:	50000300 	.word	0x50000300
 80057e0:	50000700 	.word	0x50000700
 80057e4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	691a      	ldr	r2, [r3, #16]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0201 	bic.w	r2, r2, #1
 80057f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695b      	ldr	r3, [r3, #20]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d10c      	bne.n	800581a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005806:	f023 010f 	bic.w	r1, r3, #15
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	1e5a      	subs	r2, r3, #1
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30
 8005818:	e007      	b.n	800582a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 020f 	bic.w	r2, r2, #15
 8005828:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	f043 0201 	orr.w	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	65da      	str	r2, [r3, #92]	@ 0x5c
 800583a:	e007      	b.n	800584c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005840:	f043 0210 	orr.w	r2, r3, #16
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800584c:	7ffb      	ldrb	r3, [r7, #31]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3724      	adds	r7, #36	@ 0x24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd90      	pop	{r4, r7, pc}
 8005856:	bf00      	nop

08005858 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800586c:	d004      	beq.n	8005878 <HAL_ADC_Start_DMA+0x20>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a5a      	ldr	r2, [pc, #360]	@ (80059dc <HAL_ADC_Start_DMA+0x184>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d101      	bne.n	800587c <HAL_ADC_Start_DMA+0x24>
 8005878:	4b59      	ldr	r3, [pc, #356]	@ (80059e0 <HAL_ADC_Start_DMA+0x188>)
 800587a:	e000      	b.n	800587e <HAL_ADC_Start_DMA+0x26>
 800587c:	4b59      	ldr	r3, [pc, #356]	@ (80059e4 <HAL_ADC_Start_DMA+0x18c>)
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff fd4a 	bl	8005318 <LL_ADC_GetMultimode>
 8005884:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fe02 	bl	8005494 <LL_ADC_REG_IsConversionOngoing>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	f040 809b 	bne.w	80059ce <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d101      	bne.n	80058a6 <HAL_ADC_Start_DMA+0x4e>
 80058a2:	2302      	movs	r3, #2
 80058a4:	e096      	b.n	80059d4 <HAL_ADC_Start_DMA+0x17c>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a4d      	ldr	r2, [pc, #308]	@ (80059e8 <HAL_ADC_Start_DMA+0x190>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d008      	beq.n	80058ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	2b05      	cmp	r3, #5
 80058c2:	d002      	beq.n	80058ca <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b09      	cmp	r3, #9
 80058c8:	d17a      	bne.n	80059c0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 fcf6 	bl	80062bc <ADC_Enable>
 80058d0:	4603      	mov	r3, r0
 80058d2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80058d4:	7dfb      	ldrb	r3, [r7, #23]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d16d      	bne.n	80059b6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80058e2:	f023 0301 	bic.w	r3, r3, #1
 80058e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a3a      	ldr	r2, [pc, #232]	@ (80059dc <HAL_ADC_Start_DMA+0x184>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d009      	beq.n	800590c <HAL_ADC_Start_DMA+0xb4>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a3b      	ldr	r2, [pc, #236]	@ (80059ec <HAL_ADC_Start_DMA+0x194>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d002      	beq.n	8005908 <HAL_ADC_Start_DMA+0xb0>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	e003      	b.n	8005910 <HAL_ADC_Start_DMA+0xb8>
 8005908:	4b39      	ldr	r3, [pc, #228]	@ (80059f0 <HAL_ADC_Start_DMA+0x198>)
 800590a:	e001      	b.n	8005910 <HAL_ADC_Start_DMA+0xb8>
 800590c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	6812      	ldr	r2, [r2, #0]
 8005914:	4293      	cmp	r3, r2
 8005916:	d002      	beq.n	800591e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d105      	bne.n	800592a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005922:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d006      	beq.n	8005944 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800593a:	f023 0206 	bic.w	r2, r3, #6
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	661a      	str	r2, [r3, #96]	@ 0x60
 8005942:	e002      	b.n	800594a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800594e:	4a29      	ldr	r2, [pc, #164]	@ (80059f4 <HAL_ADC_Start_DMA+0x19c>)
 8005950:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005956:	4a28      	ldr	r2, [pc, #160]	@ (80059f8 <HAL_ADC_Start_DMA+0x1a0>)
 8005958:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595e:	4a27      	ldr	r2, [pc, #156]	@ (80059fc <HAL_ADC_Start_DMA+0x1a4>)
 8005960:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	221c      	movs	r2, #28
 8005968:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0210 	orr.w	r2, r2, #16
 8005980:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0201 	orr.w	r2, r2, #1
 8005990:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3340      	adds	r3, #64	@ 0x40
 800599c:	4619      	mov	r1, r3
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f001 f989 	bl	8006cb8 <HAL_DMA_Start_IT>
 80059a6:	4603      	mov	r3, r0
 80059a8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7ff fd5c 	bl	800546c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80059b4:	e00d      	b.n	80059d2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80059be:	e008      	b.n	80059d2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80059cc:	e001      	b.n	80059d2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80059ce:	2302      	movs	r3, #2
 80059d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	50000100 	.word	0x50000100
 80059e0:	50000300 	.word	0x50000300
 80059e4:	50000700 	.word	0x50000700
 80059e8:	50000600 	.word	0x50000600
 80059ec:	50000500 	.word	0x50000500
 80059f0:	50000400 	.word	0x50000400
 80059f4:	080064a7 	.word	0x080064a7
 80059f8:	0800657f 	.word	0x0800657f
 80059fc:	0800659b 	.word	0x0800659b

08005a00 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b0b6      	sub	sp, #216	@ 0xd8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d102      	bne.n	8005a60 <HAL_ADC_ConfigChannel+0x24>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	f000 bc13 	b.w	8006286 <HAL_ADC_ConfigChannel+0x84a>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fd11 	bl	8005494 <LL_ADC_REG_IsConversionOngoing>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f040 83f3 	bne.w	8006260 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6859      	ldr	r1, [r3, #4]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	f7ff fbcb 	bl	8005222 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7ff fcff 	bl	8005494 <LL_ADC_REG_IsConversionOngoing>
 8005a96:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff fd0b 	bl	80054ba <LL_ADC_INJ_IsConversionOngoing>
 8005aa4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005aa8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f040 81d9 	bne.w	8005e64 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005ab2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 81d4 	bne.w	8005e64 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6818      	ldr	r0, [r3, #0]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	f7ff fbd2 	bl	800527a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7ff fb79 	bl	80051d6 <LL_ADC_SetSamplingTimeCommonConfig>
 8005ae4:	e00e      	b.n	8005b04 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6818      	ldr	r0, [r3, #0]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6819      	ldr	r1, [r3, #0]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f7ff fbc1 	bl	800527a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2100      	movs	r1, #0
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff fb69 	bl	80051d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	695a      	ldr	r2, [r3, #20]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	08db      	lsrs	r3, r3, #3
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	005b      	lsls	r3, r3, #1
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d022      	beq.n	8005b6c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6919      	ldr	r1, [r3, #16]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b36:	f7ff fac3 	bl	80050c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	6919      	ldr	r1, [r3, #16]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	699b      	ldr	r3, [r3, #24]
 8005b46:	461a      	mov	r2, r3
 8005b48:	f7ff fb0f 	bl	800516a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6818      	ldr	r0, [r3, #0]
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d102      	bne.n	8005b62 <HAL_ADC_ConfigChannel+0x126>
 8005b5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b60:	e000      	b.n	8005b64 <HAL_ADC_ConfigChannel+0x128>
 8005b62:	2300      	movs	r3, #0
 8005b64:	461a      	mov	r2, r3
 8005b66:	f7ff fb1b 	bl	80051a0 <LL_ADC_SetOffsetSaturation>
 8005b6a:	e17b      	b.n	8005e64 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2100      	movs	r1, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fac8 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10a      	bne.n	8005b98 <HAL_ADC_ConfigChannel+0x15c>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2100      	movs	r1, #0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff fabd 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	0e9b      	lsrs	r3, r3, #26
 8005b92:	f003 021f 	and.w	r2, r3, #31
 8005b96:	e01e      	b.n	8005bd6 <HAL_ADC_ConfigChannel+0x19a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff fab2 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005bae:	fa93 f3a3 	rbit	r3, r3
 8005bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005bb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005bba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005bbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005bc6:	2320      	movs	r3, #32
 8005bc8:	e004      	b.n	8005bd4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005bca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bce:	fab3 f383 	clz	r3, r3
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d105      	bne.n	8005bee <HAL_ADC_ConfigChannel+0x1b2>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	0e9b      	lsrs	r3, r3, #26
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	e018      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x1e4>
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005bfa:	fa93 f3a3 	rbit	r3, r3
 8005bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005c02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005c0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d101      	bne.n	8005c16 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005c12:	2320      	movs	r3, #32
 8005c14:	e004      	b.n	8005c20 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005c16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005c1a:	fab3 f383 	clz	r3, r3
 8005c1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d106      	bne.n	8005c32 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff fa81 	bl	8005134 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2101      	movs	r1, #1
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff fa65 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d10a      	bne.n	8005c5e <HAL_ADC_ConfigChannel+0x222>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff fa5a 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005c54:	4603      	mov	r3, r0
 8005c56:	0e9b      	lsrs	r3, r3, #26
 8005c58:	f003 021f 	and.w	r2, r3, #31
 8005c5c:	e01e      	b.n	8005c9c <HAL_ADC_ConfigChannel+0x260>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2101      	movs	r1, #1
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff fa4f 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c70:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c74:	fa93 f3a3 	rbit	r3, r3
 8005c78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005c7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005c84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	e004      	b.n	8005c9a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005c90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005c94:	fab3 f383 	clz	r3, r3
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d105      	bne.n	8005cb4 <HAL_ADC_ConfigChannel+0x278>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	0e9b      	lsrs	r3, r3, #26
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	e018      	b.n	8005ce6 <HAL_ADC_ConfigChannel+0x2aa>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005cc0:	fa93 f3a3 	rbit	r3, r3
 8005cc4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005cc8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005ccc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005cd8:	2320      	movs	r3, #32
 8005cda:	e004      	b.n	8005ce6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ce0:	fab3 f383 	clz	r3, r3
 8005ce4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d106      	bne.n	8005cf8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fa1e 	bl	8005134 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2102      	movs	r1, #2
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fa02 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <HAL_ADC_ConfigChannel+0x2e8>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2102      	movs	r1, #2
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff f9f7 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	0e9b      	lsrs	r3, r3, #26
 8005d1e:	f003 021f 	and.w	r2, r3, #31
 8005d22:	e01e      	b.n	8005d62 <HAL_ADC_ConfigChannel+0x326>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2102      	movs	r1, #2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7ff f9ec 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d3a:	fa93 f3a3 	rbit	r3, r3
 8005d3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005d42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005d52:	2320      	movs	r3, #32
 8005d54:	e004      	b.n	8005d60 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005d56:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d5a:	fab3 f383 	clz	r3, r3
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d105      	bne.n	8005d7a <HAL_ADC_ConfigChannel+0x33e>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	0e9b      	lsrs	r3, r3, #26
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	e016      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x36c>
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005d86:	fa93 f3a3 	rbit	r3, r3
 8005d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005d8c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005d92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005d9a:	2320      	movs	r3, #32
 8005d9c:	e004      	b.n	8005da8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005d9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005da2:	fab3 f383 	clz	r3, r3
 8005da6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d106      	bne.n	8005dba <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2200      	movs	r2, #0
 8005db2:	2102      	movs	r1, #2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff f9bd 	bl	8005134 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2103      	movs	r1, #3
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff f9a1 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10a      	bne.n	8005de6 <HAL_ADC_ConfigChannel+0x3aa>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2103      	movs	r1, #3
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff f996 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	0e9b      	lsrs	r3, r3, #26
 8005de0:	f003 021f 	and.w	r2, r3, #31
 8005de4:	e017      	b.n	8005e16 <HAL_ADC_ConfigChannel+0x3da>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2103      	movs	r1, #3
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff f98b 	bl	8005108 <LL_ADC_GetOffsetChannel>
 8005df2:	4603      	mov	r3, r0
 8005df4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005df8:	fa93 f3a3 	rbit	r3, r3
 8005dfc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e00:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005e02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005e08:	2320      	movs	r3, #32
 8005e0a:	e003      	b.n	8005e14 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005e0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e0e:	fab3 f383 	clz	r3, r3
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d105      	bne.n	8005e2e <HAL_ADC_ConfigChannel+0x3f2>
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	0e9b      	lsrs	r3, r3, #26
 8005e28:	f003 031f 	and.w	r3, r3, #31
 8005e2c:	e011      	b.n	8005e52 <HAL_ADC_ConfigChannel+0x416>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005e36:	fa93 f3a3 	rbit	r3, r3
 8005e3a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005e3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005e40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005e46:	2320      	movs	r3, #32
 8005e48:	e003      	b.n	8005e52 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e4c:	fab3 f383 	clz	r3, r3
 8005e50:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d106      	bne.n	8005e64 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	2103      	movs	r1, #3
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff f968 	bl	8005134 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fad9 	bl	8005420 <LL_ADC_IsEnabled>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 813d 	bne.w	80060f0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6818      	ldr	r0, [r3, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	6819      	ldr	r1, [r3, #0]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	461a      	mov	r2, r3
 8005e84:	f7ff fa24 	bl	80052d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	4aa2      	ldr	r2, [pc, #648]	@ (8006118 <HAL_ADC_ConfigChannel+0x6dc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	f040 812e 	bne.w	80060f0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10b      	bne.n	8005ebc <HAL_ADC_ConfigChannel+0x480>
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	0e9b      	lsrs	r3, r3, #26
 8005eaa:	3301      	adds	r3, #1
 8005eac:	f003 031f 	and.w	r3, r3, #31
 8005eb0:	2b09      	cmp	r3, #9
 8005eb2:	bf94      	ite	ls
 8005eb4:	2301      	movls	r3, #1
 8005eb6:	2300      	movhi	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	e019      	b.n	8005ef0 <HAL_ADC_ConfigChannel+0x4b4>
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ec4:	fa93 f3a3 	rbit	r3, r3
 8005ec8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005eca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005ecc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005ece:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d101      	bne.n	8005ed8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005ed4:	2320      	movs	r3, #32
 8005ed6:	e003      	b.n	8005ee0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005ed8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005eda:	fab3 f383 	clz	r3, r3
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	3301      	adds	r3, #1
 8005ee2:	f003 031f 	and.w	r3, r3, #31
 8005ee6:	2b09      	cmp	r3, #9
 8005ee8:	bf94      	ite	ls
 8005eea:	2301      	movls	r3, #1
 8005eec:	2300      	movhi	r3, #0
 8005eee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d079      	beq.n	8005fe8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d107      	bne.n	8005f10 <HAL_ADC_ConfigChannel+0x4d4>
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	0e9b      	lsrs	r3, r3, #26
 8005f06:	3301      	adds	r3, #1
 8005f08:	069b      	lsls	r3, r3, #26
 8005f0a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f0e:	e015      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x500>
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f18:	fa93 f3a3 	rbit	r3, r3
 8005f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f20:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d101      	bne.n	8005f2c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005f28:	2320      	movs	r3, #32
 8005f2a:	e003      	b.n	8005f34 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f2e:	fab3 f383 	clz	r3, r3
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	3301      	adds	r3, #1
 8005f36:	069b      	lsls	r3, r3, #26
 8005f38:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d109      	bne.n	8005f5c <HAL_ADC_ConfigChannel+0x520>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	0e9b      	lsrs	r3, r3, #26
 8005f4e:	3301      	adds	r3, #1
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	2101      	movs	r1, #1
 8005f56:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5a:	e017      	b.n	8005f8c <HAL_ADC_ConfigChannel+0x550>
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f64:	fa93 f3a3 	rbit	r3, r3
 8005f68:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005f6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005f74:	2320      	movs	r3, #32
 8005f76:	e003      	b.n	8005f80 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005f78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f7a:	fab3 f383 	clz	r3, r3
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	3301      	adds	r3, #1
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	2101      	movs	r1, #1
 8005f88:	fa01 f303 	lsl.w	r3, r1, r3
 8005f8c:	ea42 0103 	orr.w	r1, r2, r3
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10a      	bne.n	8005fb2 <HAL_ADC_ConfigChannel+0x576>
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	0e9b      	lsrs	r3, r3, #26
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	f003 021f 	and.w	r2, r3, #31
 8005fa8:	4613      	mov	r3, r2
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	4413      	add	r3, r2
 8005fae:	051b      	lsls	r3, r3, #20
 8005fb0:	e018      	b.n	8005fe4 <HAL_ADC_ConfigChannel+0x5a8>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fba:	fa93 f3a3 	rbit	r3, r3
 8005fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005fca:	2320      	movs	r3, #32
 8005fcc:	e003      	b.n	8005fd6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fd0:	fab3 f383 	clz	r3, r3
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	f003 021f 	and.w	r2, r3, #31
 8005fdc:	4613      	mov	r3, r2
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	4413      	add	r3, r2
 8005fe2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	e07e      	b.n	80060e6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d107      	bne.n	8006004 <HAL_ADC_ConfigChannel+0x5c8>
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	0e9b      	lsrs	r3, r3, #26
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	069b      	lsls	r3, r3, #26
 8005ffe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006002:	e015      	b.n	8006030 <HAL_ADC_ConfigChannel+0x5f4>
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600c:	fa93 f3a3 	rbit	r3, r3
 8006010:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006014:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800601c:	2320      	movs	r3, #32
 800601e:	e003      	b.n	8006028 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006022:	fab3 f383 	clz	r3, r3
 8006026:	b2db      	uxtb	r3, r3
 8006028:	3301      	adds	r3, #1
 800602a:	069b      	lsls	r3, r3, #26
 800602c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006038:	2b00      	cmp	r3, #0
 800603a:	d109      	bne.n	8006050 <HAL_ADC_ConfigChannel+0x614>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	0e9b      	lsrs	r3, r3, #26
 8006042:	3301      	adds	r3, #1
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	2101      	movs	r1, #1
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	e017      	b.n	8006080 <HAL_ADC_ConfigChannel+0x644>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	fa93 f3a3 	rbit	r3, r3
 800605c:	61fb      	str	r3, [r7, #28]
  return result;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006068:	2320      	movs	r3, #32
 800606a:	e003      	b.n	8006074 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	fab3 f383 	clz	r3, r3
 8006072:	b2db      	uxtb	r3, r3
 8006074:	3301      	adds	r3, #1
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2101      	movs	r1, #1
 800607c:	fa01 f303 	lsl.w	r3, r1, r3
 8006080:	ea42 0103 	orr.w	r1, r2, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10d      	bne.n	80060ac <HAL_ADC_ConfigChannel+0x670>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	0e9b      	lsrs	r3, r3, #26
 8006096:	3301      	adds	r3, #1
 8006098:	f003 021f 	and.w	r2, r3, #31
 800609c:	4613      	mov	r3, r2
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	4413      	add	r3, r2
 80060a2:	3b1e      	subs	r3, #30
 80060a4:	051b      	lsls	r3, r3, #20
 80060a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80060aa:	e01b      	b.n	80060e4 <HAL_ADC_ConfigChannel+0x6a8>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	fa93 f3a3 	rbit	r3, r3
 80060b8:	613b      	str	r3, [r7, #16]
  return result;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80060c4:	2320      	movs	r3, #32
 80060c6:	e003      	b.n	80060d0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	fab3 f383 	clz	r3, r3
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	3301      	adds	r3, #1
 80060d2:	f003 021f 	and.w	r2, r3, #31
 80060d6:	4613      	mov	r3, r2
 80060d8:	005b      	lsls	r3, r3, #1
 80060da:	4413      	add	r3, r2
 80060dc:	3b1e      	subs	r3, #30
 80060de:	051b      	lsls	r3, r3, #20
 80060e0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060e4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060ea:	4619      	mov	r1, r3
 80060ec:	f7ff f8c5 	bl	800527a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	4b09      	ldr	r3, [pc, #36]	@ (800611c <HAL_ADC_ConfigChannel+0x6e0>)
 80060f6:	4013      	ands	r3, r2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f000 80be 	beq.w	800627a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006106:	d004      	beq.n	8006112 <HAL_ADC_ConfigChannel+0x6d6>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a04      	ldr	r2, [pc, #16]	@ (8006120 <HAL_ADC_ConfigChannel+0x6e4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d10a      	bne.n	8006128 <HAL_ADC_ConfigChannel+0x6ec>
 8006112:	4b04      	ldr	r3, [pc, #16]	@ (8006124 <HAL_ADC_ConfigChannel+0x6e8>)
 8006114:	e009      	b.n	800612a <HAL_ADC_ConfigChannel+0x6ee>
 8006116:	bf00      	nop
 8006118:	407f0000 	.word	0x407f0000
 800611c:	80080000 	.word	0x80080000
 8006120:	50000100 	.word	0x50000100
 8006124:	50000300 	.word	0x50000300
 8006128:	4b59      	ldr	r3, [pc, #356]	@ (8006290 <HAL_ADC_ConfigChannel+0x854>)
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe ffba 	bl	80050a4 <LL_ADC_GetCommonPathInternalCh>
 8006130:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a56      	ldr	r2, [pc, #344]	@ (8006294 <HAL_ADC_ConfigChannel+0x858>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d004      	beq.n	8006148 <HAL_ADC_ConfigChannel+0x70c>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a55      	ldr	r2, [pc, #340]	@ (8006298 <HAL_ADC_ConfigChannel+0x85c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d13a      	bne.n	80061be <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800614c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d134      	bne.n	80061be <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800615c:	d005      	beq.n	800616a <HAL_ADC_ConfigChannel+0x72e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a4e      	ldr	r2, [pc, #312]	@ (800629c <HAL_ADC_ConfigChannel+0x860>)
 8006164:	4293      	cmp	r3, r2
 8006166:	f040 8085 	bne.w	8006274 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006172:	d004      	beq.n	800617e <HAL_ADC_ConfigChannel+0x742>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a49      	ldr	r2, [pc, #292]	@ (80062a0 <HAL_ADC_ConfigChannel+0x864>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d101      	bne.n	8006182 <HAL_ADC_ConfigChannel+0x746>
 800617e:	4a49      	ldr	r2, [pc, #292]	@ (80062a4 <HAL_ADC_ConfigChannel+0x868>)
 8006180:	e000      	b.n	8006184 <HAL_ADC_ConfigChannel+0x748>
 8006182:	4a43      	ldr	r2, [pc, #268]	@ (8006290 <HAL_ADC_ConfigChannel+0x854>)
 8006184:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006188:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800618c:	4619      	mov	r1, r3
 800618e:	4610      	mov	r0, r2
 8006190:	f7fe ff75 	bl	800507e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006194:	4b44      	ldr	r3, [pc, #272]	@ (80062a8 <HAL_ADC_ConfigChannel+0x86c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	099b      	lsrs	r3, r3, #6
 800619a:	4a44      	ldr	r2, [pc, #272]	@ (80062ac <HAL_ADC_ConfigChannel+0x870>)
 800619c:	fba2 2303 	umull	r2, r3, r2, r3
 80061a0:	099b      	lsrs	r3, r3, #6
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	4613      	mov	r3, r2
 80061a6:	005b      	lsls	r3, r3, #1
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80061ae:	e002      	b.n	80061b6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1f9      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061bc:	e05a      	b.n	8006274 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a3b      	ldr	r2, [pc, #236]	@ (80062b0 <HAL_ADC_ConfigChannel+0x874>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d125      	bne.n	8006214 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80061c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80061cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d11f      	bne.n	8006214 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a31      	ldr	r2, [pc, #196]	@ (80062a0 <HAL_ADC_ConfigChannel+0x864>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d104      	bne.n	80061e8 <HAL_ADC_ConfigChannel+0x7ac>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a34      	ldr	r2, [pc, #208]	@ (80062b4 <HAL_ADC_ConfigChannel+0x878>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d047      	beq.n	8006278 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061f0:	d004      	beq.n	80061fc <HAL_ADC_ConfigChannel+0x7c0>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a2a      	ldr	r2, [pc, #168]	@ (80062a0 <HAL_ADC_ConfigChannel+0x864>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d101      	bne.n	8006200 <HAL_ADC_ConfigChannel+0x7c4>
 80061fc:	4a29      	ldr	r2, [pc, #164]	@ (80062a4 <HAL_ADC_ConfigChannel+0x868>)
 80061fe:	e000      	b.n	8006202 <HAL_ADC_ConfigChannel+0x7c6>
 8006200:	4a23      	ldr	r2, [pc, #140]	@ (8006290 <HAL_ADC_ConfigChannel+0x854>)
 8006202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006206:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800620a:	4619      	mov	r1, r3
 800620c:	4610      	mov	r0, r2
 800620e:	f7fe ff36 	bl	800507e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006212:	e031      	b.n	8006278 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a27      	ldr	r2, [pc, #156]	@ (80062b8 <HAL_ADC_ConfigChannel+0x87c>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d12d      	bne.n	800627a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800621e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d127      	bne.n	800627a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a1c      	ldr	r2, [pc, #112]	@ (80062a0 <HAL_ADC_ConfigChannel+0x864>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d022      	beq.n	800627a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800623c:	d004      	beq.n	8006248 <HAL_ADC_ConfigChannel+0x80c>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a17      	ldr	r2, [pc, #92]	@ (80062a0 <HAL_ADC_ConfigChannel+0x864>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d101      	bne.n	800624c <HAL_ADC_ConfigChannel+0x810>
 8006248:	4a16      	ldr	r2, [pc, #88]	@ (80062a4 <HAL_ADC_ConfigChannel+0x868>)
 800624a:	e000      	b.n	800624e <HAL_ADC_ConfigChannel+0x812>
 800624c:	4a10      	ldr	r2, [pc, #64]	@ (8006290 <HAL_ADC_ConfigChannel+0x854>)
 800624e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006252:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f7fe ff10 	bl	800507e <LL_ADC_SetCommonPathInternalCh>
 800625e:	e00c      	b.n	800627a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006264:	f043 0220 	orr.w	r2, r3, #32
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006272:	e002      	b.n	800627a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006274:	bf00      	nop
 8006276:	e000      	b.n	800627a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006278:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006282:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006286:	4618      	mov	r0, r3
 8006288:	37d8      	adds	r7, #216	@ 0xd8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	50000700 	.word	0x50000700
 8006294:	c3210000 	.word	0xc3210000
 8006298:	90c00010 	.word	0x90c00010
 800629c:	50000600 	.word	0x50000600
 80062a0:	50000100 	.word	0x50000100
 80062a4:	50000300 	.word	0x50000300
 80062a8:	2000018c 	.word	0x2000018c
 80062ac:	053e2d63 	.word	0x053e2d63
 80062b0:	c7520000 	.word	0xc7520000
 80062b4:	50000500 	.word	0x50000500
 80062b8:	cb840000 	.word	0xcb840000

080062bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7ff f8a7 	bl	8005420 <LL_ADC_IsEnabled>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d176      	bne.n	80063c6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689a      	ldr	r2, [r3, #8]
 80062de:	4b3c      	ldr	r3, [pc, #240]	@ (80063d0 <ADC_Enable+0x114>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00d      	beq.n	8006302 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ea:	f043 0210 	orr.w	r2, r3, #16
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f6:	f043 0201 	orr.w	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e062      	b.n	80063c8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4618      	mov	r0, r3
 8006308:	f7ff f862 	bl	80053d0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006314:	d004      	beq.n	8006320 <ADC_Enable+0x64>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a2e      	ldr	r2, [pc, #184]	@ (80063d4 <ADC_Enable+0x118>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d101      	bne.n	8006324 <ADC_Enable+0x68>
 8006320:	4b2d      	ldr	r3, [pc, #180]	@ (80063d8 <ADC_Enable+0x11c>)
 8006322:	e000      	b.n	8006326 <ADC_Enable+0x6a>
 8006324:	4b2d      	ldr	r3, [pc, #180]	@ (80063dc <ADC_Enable+0x120>)
 8006326:	4618      	mov	r0, r3
 8006328:	f7fe febc 	bl	80050a4 <LL_ADC_GetCommonPathInternalCh>
 800632c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800632e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006332:	2b00      	cmp	r3, #0
 8006334:	d013      	beq.n	800635e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006336:	4b2a      	ldr	r3, [pc, #168]	@ (80063e0 <ADC_Enable+0x124>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	099b      	lsrs	r3, r3, #6
 800633c:	4a29      	ldr	r2, [pc, #164]	@ (80063e4 <ADC_Enable+0x128>)
 800633e:	fba2 2303 	umull	r2, r3, r2, r3
 8006342:	099b      	lsrs	r3, r3, #6
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	4613      	mov	r3, r2
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006350:	e002      	b.n	8006358 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	3b01      	subs	r3, #1
 8006356:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1f9      	bne.n	8006352 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800635e:	f7fe fe6f 	bl	8005040 <HAL_GetTick>
 8006362:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006364:	e028      	b.n	80063b8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff f858 	bl	8005420 <LL_ADC_IsEnabled>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d104      	bne.n	8006380 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff f828 	bl	80053d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006380:	f7fe fe5e 	bl	8005040 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	2b02      	cmp	r3, #2
 800638c:	d914      	bls.n	80063b8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d00d      	beq.n	80063b8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063a0:	f043 0210 	orr.w	r2, r3, #16
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ac:	f043 0201 	orr.w	r2, r3, #1
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e007      	b.n	80063c8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0301 	and.w	r3, r3, #1
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d1cf      	bne.n	8006366 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	8000003f 	.word	0x8000003f
 80063d4:	50000100 	.word	0x50000100
 80063d8:	50000300 	.word	0x50000300
 80063dc:	50000700 	.word	0x50000700
 80063e0:	2000018c 	.word	0x2000018c
 80063e4:	053e2d63 	.word	0x053e2d63

080063e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f7ff f826 	bl	8005446 <LL_ADC_IsDisableOngoing>
 80063fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4618      	mov	r0, r3
 8006402:	f7ff f80d 	bl	8005420 <LL_ADC_IsEnabled>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d047      	beq.n	800649c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d144      	bne.n	800649c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 030d 	and.w	r3, r3, #13
 800641c:	2b01      	cmp	r3, #1
 800641e:	d10c      	bne.n	800643a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe ffe7 	bl	80053f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2203      	movs	r2, #3
 8006430:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006432:	f7fe fe05 	bl	8005040 <HAL_GetTick>
 8006436:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006438:	e029      	b.n	800648e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800643e:	f043 0210 	orr.w	r2, r3, #16
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800644a:	f043 0201 	orr.w	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e023      	b.n	800649e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006456:	f7fe fdf3 	bl	8005040 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d914      	bls.n	800648e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00d      	beq.n	800648e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006476:	f043 0210 	orr.w	r2, r3, #16
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006482:	f043 0201 	orr.w	r2, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e007      	b.n	800649e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1dc      	bne.n	8006456 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d14b      	bne.n	8006558 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d021      	beq.n	800651e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fe fe8c 	bl	80051fc <LL_ADC_REG_IsTriggerSourceSWStart>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d032      	beq.n	8006550 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d12b      	bne.n	8006550 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006508:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d11f      	bne.n	8006550 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006514:	f043 0201 	orr.w	r2, r3, #1
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800651c:	e018      	b.n	8006550 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d111      	bne.n	8006550 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006530:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800653c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d105      	bne.n	8006550 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006548:	f043 0201 	orr.w	r2, r3, #1
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f7ff fa55 	bl	8005a00 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006556:	e00e      	b.n	8006576 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2b00      	cmp	r3, #0
 8006562:	d003      	beq.n	800656c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f7ff fa5f 	bl	8005a28 <HAL_ADC_ErrorCallback>
}
 800656a:	e004      	b.n	8006576 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	4798      	blx	r3
}
 8006576:	bf00      	nop
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f7ff fa41 	bl	8005a14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b084      	sub	sp, #16
 800659e:	af00      	add	r7, sp, #0
 80065a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065b8:	f043 0204 	orr.w	r2, r3, #4
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f7ff fa31 	bl	8005a28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80065c6:	bf00      	nop
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <LL_ADC_IsEnabled>:
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0301 	and.w	r3, r3, #1
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d101      	bne.n	80065e6 <LL_ADC_IsEnabled+0x18>
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <LL_ADC_IsEnabled+0x1a>
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <LL_ADC_StartCalibration>:
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8006606:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006610:	4313      	orrs	r3, r2
 8006612:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	609a      	str	r2, [r3, #8]
}
 800661a:	bf00      	nop
 800661c:	370c      	adds	r7, #12
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <LL_ADC_IsCalibrationOnGoing>:
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006636:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800663a:	d101      	bne.n	8006640 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800663c:	2301      	movs	r3, #1
 800663e:	e000      	b.n	8006642 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <LL_ADC_REG_IsConversionOngoing>:
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b04      	cmp	r3, #4
 8006660:	d101      	bne.n	8006666 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006662:	2301      	movs	r3, #1
 8006664:	e000      	b.n	8006668 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800667e:	2300      	movs	r3, #0
 8006680:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006688:	2b01      	cmp	r3, #1
 800668a:	d101      	bne.n	8006690 <HAL_ADCEx_Calibration_Start+0x1c>
 800668c:	2302      	movs	r3, #2
 800668e:	e04d      	b.n	800672c <HAL_ADCEx_Calibration_Start+0xb8>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fea5 	bl	80063e8 <ADC_Disable>
 800669e:	4603      	mov	r3, r0
 80066a0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80066a2:	7bfb      	ldrb	r3, [r7, #15]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d136      	bne.n	8006716 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ac:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80066b0:	f023 0302 	bic.w	r3, r3, #2
 80066b4:	f043 0202 	orr.w	r2, r3, #2
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff ff96 	bl	80065f4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80066c8:	e014      	b.n	80066f4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	3301      	adds	r3, #1
 80066ce:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	4a18      	ldr	r2, [pc, #96]	@ (8006734 <HAL_ADCEx_Calibration_Start+0xc0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d90d      	bls.n	80066f4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066dc:	f023 0312 	bic.w	r3, r3, #18
 80066e0:	f043 0210 	orr.w	r2, r3, #16
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	e01b      	b.n	800672c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff ff94 	bl	8006626 <LL_ADC_IsCalibrationOnGoing>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e2      	bne.n	80066ca <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006708:	f023 0303 	bic.w	r3, r3, #3
 800670c:	f043 0201 	orr.w	r2, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006714:	e005      	b.n	8006722 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800671a:	f043 0210 	orr.w	r2, r3, #16
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800672a:	7bfb      	ldrb	r3, [r7, #15]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	0004de01 	.word	0x0004de01

08006738 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006738:	b590      	push	{r4, r7, lr}
 800673a:	b0a1      	sub	sp, #132	@ 0x84
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800674e:	2b01      	cmp	r3, #1
 8006750:	d101      	bne.n	8006756 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006752:	2302      	movs	r3, #2
 8006754:	e0e7      	b.n	8006926 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2201      	movs	r2, #1
 800675a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800675e:	2300      	movs	r3, #0
 8006760:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006762:	2300      	movs	r3, #0
 8006764:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800676e:	d102      	bne.n	8006776 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006770:	4b6f      	ldr	r3, [pc, #444]	@ (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006772:	60bb      	str	r3, [r7, #8]
 8006774:	e009      	b.n	800678a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a6e      	ldr	r2, [pc, #440]	@ (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d102      	bne.n	8006786 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8006780:	4b6d      	ldr	r3, [pc, #436]	@ (8006938 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8006782:	60bb      	str	r3, [r7, #8]
 8006784:	e001      	b.n	800678a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006786:	2300      	movs	r3, #0
 8006788:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10b      	bne.n	80067a8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006794:	f043 0220 	orr.w	r2, r3, #32
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e0be      	b.n	8006926 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff ff4f 	bl	800664e <LL_ADC_REG_IsConversionOngoing>
 80067b0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff ff49 	bl	800664e <LL_ADC_REG_IsConversionOngoing>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f040 80a0 	bne.w	8006904 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80067c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 809c 	bne.w	8006904 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067d4:	d004      	beq.n	80067e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a55      	ldr	r2, [pc, #340]	@ (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d101      	bne.n	80067e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80067e0:	4b56      	ldr	r3, [pc, #344]	@ (800693c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80067e2:	e000      	b.n	80067e6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80067e4:	4b56      	ldr	r3, [pc, #344]	@ (8006940 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80067e6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d04b      	beq.n	8006888 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80067f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	6859      	ldr	r1, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006802:	035b      	lsls	r3, r3, #13
 8006804:	430b      	orrs	r3, r1
 8006806:	431a      	orrs	r2, r3
 8006808:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800680a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006814:	d004      	beq.n	8006820 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a45      	ldr	r2, [pc, #276]	@ (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d10f      	bne.n	8006840 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006820:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006824:	f7ff fed3 	bl	80065ce <LL_ADC_IsEnabled>
 8006828:	4604      	mov	r4, r0
 800682a:	4841      	ldr	r0, [pc, #260]	@ (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800682c:	f7ff fecf 	bl	80065ce <LL_ADC_IsEnabled>
 8006830:	4603      	mov	r3, r0
 8006832:	4323      	orrs	r3, r4
 8006834:	2b00      	cmp	r3, #0
 8006836:	bf0c      	ite	eq
 8006838:	2301      	moveq	r3, #1
 800683a:	2300      	movne	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	e012      	b.n	8006866 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006840:	483c      	ldr	r0, [pc, #240]	@ (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006842:	f7ff fec4 	bl	80065ce <LL_ADC_IsEnabled>
 8006846:	4604      	mov	r4, r0
 8006848:	483b      	ldr	r0, [pc, #236]	@ (8006938 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800684a:	f7ff fec0 	bl	80065ce <LL_ADC_IsEnabled>
 800684e:	4603      	mov	r3, r0
 8006850:	431c      	orrs	r4, r3
 8006852:	483c      	ldr	r0, [pc, #240]	@ (8006944 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006854:	f7ff febb 	bl	80065ce <LL_ADC_IsEnabled>
 8006858:	4603      	mov	r3, r0
 800685a:	4323      	orrs	r3, r4
 800685c:	2b00      	cmp	r3, #0
 800685e:	bf0c      	ite	eq
 8006860:	2301      	moveq	r3, #1
 8006862:	2300      	movne	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d056      	beq.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800686a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006872:	f023 030f 	bic.w	r3, r3, #15
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	6811      	ldr	r1, [r2, #0]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	6892      	ldr	r2, [r2, #8]
 800687e:	430a      	orrs	r2, r1
 8006880:	431a      	orrs	r2, r3
 8006882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006884:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006886:	e047      	b.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006888:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006890:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006892:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800689c:	d004      	beq.n	80068a8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a23      	ldr	r2, [pc, #140]	@ (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d10f      	bne.n	80068c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80068a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80068ac:	f7ff fe8f 	bl	80065ce <LL_ADC_IsEnabled>
 80068b0:	4604      	mov	r4, r0
 80068b2:	481f      	ldr	r0, [pc, #124]	@ (8006930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068b4:	f7ff fe8b 	bl	80065ce <LL_ADC_IsEnabled>
 80068b8:	4603      	mov	r3, r0
 80068ba:	4323      	orrs	r3, r4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	bf0c      	ite	eq
 80068c0:	2301      	moveq	r3, #1
 80068c2:	2300      	movne	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	e012      	b.n	80068ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80068c8:	481a      	ldr	r0, [pc, #104]	@ (8006934 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80068ca:	f7ff fe80 	bl	80065ce <LL_ADC_IsEnabled>
 80068ce:	4604      	mov	r4, r0
 80068d0:	4819      	ldr	r0, [pc, #100]	@ (8006938 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80068d2:	f7ff fe7c 	bl	80065ce <LL_ADC_IsEnabled>
 80068d6:	4603      	mov	r3, r0
 80068d8:	431c      	orrs	r4, r3
 80068da:	481a      	ldr	r0, [pc, #104]	@ (8006944 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80068dc:	f7ff fe77 	bl	80065ce <LL_ADC_IsEnabled>
 80068e0:	4603      	mov	r3, r0
 80068e2:	4323      	orrs	r3, r4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d012      	beq.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80068f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80068fa:	f023 030f 	bic.w	r3, r3, #15
 80068fe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006900:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006902:	e009      	b.n	8006918 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006908:	f043 0220 	orr.w	r2, r3, #32
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006916:	e000      	b.n	800691a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006918:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006922:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006926:	4618      	mov	r0, r3
 8006928:	3784      	adds	r7, #132	@ 0x84
 800692a:	46bd      	mov	sp, r7
 800692c:	bd90      	pop	{r4, r7, pc}
 800692e:	bf00      	nop
 8006930:	50000100 	.word	0x50000100
 8006934:	50000400 	.word	0x50000400
 8006938:	50000500 	.word	0x50000500
 800693c:	50000300 	.word	0x50000300
 8006940:	50000700 	.word	0x50000700
 8006944:	50000600 	.word	0x50000600

08006948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006958:	4b0c      	ldr	r3, [pc, #48]	@ (800698c <__NVIC_SetPriorityGrouping+0x44>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800695e:	68ba      	ldr	r2, [r7, #8]
 8006960:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006964:	4013      	ands	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006970:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006974:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800697a:	4a04      	ldr	r2, [pc, #16]	@ (800698c <__NVIC_SetPriorityGrouping+0x44>)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	60d3      	str	r3, [r2, #12]
}
 8006980:	bf00      	nop
 8006982:	3714      	adds	r7, #20
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	e000ed00 	.word	0xe000ed00

08006990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006990:	b480      	push	{r7}
 8006992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006994:	4b04      	ldr	r3, [pc, #16]	@ (80069a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	0a1b      	lsrs	r3, r3, #8
 800699a:	f003 0307 	and.w	r3, r3, #7
}
 800699e:	4618      	mov	r0, r3
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	e000ed00 	.word	0xe000ed00

080069ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	4603      	mov	r3, r0
 80069b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	db0b      	blt.n	80069d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069be:	79fb      	ldrb	r3, [r7, #7]
 80069c0:	f003 021f 	and.w	r2, r3, #31
 80069c4:	4907      	ldr	r1, [pc, #28]	@ (80069e4 <__NVIC_EnableIRQ+0x38>)
 80069c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	2001      	movs	r0, #1
 80069ce:	fa00 f202 	lsl.w	r2, r0, r2
 80069d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	e000e100 	.word	0xe000e100

080069e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	4603      	mov	r3, r0
 80069f0:	6039      	str	r1, [r7, #0]
 80069f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	db0a      	blt.n	8006a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	490c      	ldr	r1, [pc, #48]	@ (8006a34 <__NVIC_SetPriority+0x4c>)
 8006a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a06:	0112      	lsls	r2, r2, #4
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	440b      	add	r3, r1
 8006a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a10:	e00a      	b.n	8006a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	4908      	ldr	r1, [pc, #32]	@ (8006a38 <__NVIC_SetPriority+0x50>)
 8006a18:	79fb      	ldrb	r3, [r7, #7]
 8006a1a:	f003 030f 	and.w	r3, r3, #15
 8006a1e:	3b04      	subs	r3, #4
 8006a20:	0112      	lsls	r2, r2, #4
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	440b      	add	r3, r1
 8006a26:	761a      	strb	r2, [r3, #24]
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	e000e100 	.word	0xe000e100
 8006a38:	e000ed00 	.word	0xe000ed00

08006a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b089      	sub	sp, #36	@ 0x24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	f1c3 0307 	rsb	r3, r3, #7
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	bf28      	it	cs
 8006a5a:	2304      	movcs	r3, #4
 8006a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	3304      	adds	r3, #4
 8006a62:	2b06      	cmp	r3, #6
 8006a64:	d902      	bls.n	8006a6c <NVIC_EncodePriority+0x30>
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	3b03      	subs	r3, #3
 8006a6a:	e000      	b.n	8006a6e <NVIC_EncodePriority+0x32>
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a70:	f04f 32ff 	mov.w	r2, #4294967295
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	43da      	mvns	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	401a      	ands	r2, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a84:	f04f 31ff 	mov.w	r1, #4294967295
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8e:	43d9      	mvns	r1, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a94:	4313      	orrs	r3, r2
         );
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3724      	adds	r7, #36	@ 0x24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
	...

08006aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3b01      	subs	r3, #1
 8006ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ab4:	d301      	bcc.n	8006aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e00f      	b.n	8006ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aba:	4a0a      	ldr	r2, [pc, #40]	@ (8006ae4 <SysTick_Config+0x40>)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ac2:	210f      	movs	r1, #15
 8006ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac8:	f7ff ff8e 	bl	80069e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006acc:	4b05      	ldr	r3, [pc, #20]	@ (8006ae4 <SysTick_Config+0x40>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ad2:	4b04      	ldr	r3, [pc, #16]	@ (8006ae4 <SysTick_Config+0x40>)
 8006ad4:	2207      	movs	r2, #7
 8006ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	e000e010 	.word	0xe000e010

08006ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff ff29 	bl	8006948 <__NVIC_SetPriorityGrouping>
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	4603      	mov	r3, r0
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
 8006b0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b0c:	f7ff ff40 	bl	8006990 <__NVIC_GetPriorityGrouping>
 8006b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b12:	687a      	ldr	r2, [r7, #4]
 8006b14:	68b9      	ldr	r1, [r7, #8]
 8006b16:	6978      	ldr	r0, [r7, #20]
 8006b18:	f7ff ff90 	bl	8006a3c <NVIC_EncodePriority>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b22:	4611      	mov	r1, r2
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff ff5f 	bl	80069e8 <__NVIC_SetPriority>
}
 8006b2a:	bf00      	nop
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	4603      	mov	r3, r0
 8006b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7ff ff33 	bl	80069ac <__NVIC_EnableIRQ>
}
 8006b46:	bf00      	nop
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b082      	sub	sp, #8
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff ffa4 	bl	8006aa4 <SysTick_Config>
 8006b5c:	4603      	mov	r3, r0
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3708      	adds	r7, #8
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
	...

08006b68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e08d      	b.n	8006c96 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	4b47      	ldr	r3, [pc, #284]	@ (8006ca0 <HAL_DMA_Init+0x138>)
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d80f      	bhi.n	8006ba6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	4b45      	ldr	r3, [pc, #276]	@ (8006ca4 <HAL_DMA_Init+0x13c>)
 8006b8e:	4413      	add	r3, r2
 8006b90:	4a45      	ldr	r2, [pc, #276]	@ (8006ca8 <HAL_DMA_Init+0x140>)
 8006b92:	fba2 2303 	umull	r2, r3, r2, r3
 8006b96:	091b      	lsrs	r3, r3, #4
 8006b98:	009a      	lsls	r2, r3, #2
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	4a42      	ldr	r2, [pc, #264]	@ (8006cac <HAL_DMA_Init+0x144>)
 8006ba2:	641a      	str	r2, [r3, #64]	@ 0x40
 8006ba4:	e00e      	b.n	8006bc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	4b40      	ldr	r3, [pc, #256]	@ (8006cb0 <HAL_DMA_Init+0x148>)
 8006bae:	4413      	add	r3, r2
 8006bb0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ca8 <HAL_DMA_Init+0x140>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	091b      	lsrs	r3, r3, #4
 8006bb8:	009a      	lsls	r2, r3, #2
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8006cb4 <HAL_DMA_Init+0x14c>)
 8006bc2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa76 	bl	8007108 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c24:	d102      	bne.n	8006c2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c34:	b2d2      	uxtb	r2, r2
 8006c36:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c40:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d010      	beq.n	8006c6c <HAL_DMA_Init+0x104>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b04      	cmp	r3, #4
 8006c50:	d80c      	bhi.n	8006c6c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fa96 	bl	8007184 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006c68:	605a      	str	r2, [r3, #4]
 8006c6a:	e008      	b.n	8006c7e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	40020407 	.word	0x40020407
 8006ca4:	bffdfff8 	.word	0xbffdfff8
 8006ca8:	cccccccd 	.word	0xcccccccd
 8006cac:	40020000 	.word	0x40020000
 8006cb0:	bffdfbf8 	.word	0xbffdfbf8
 8006cb4:	40020400 	.word	0x40020400

08006cb8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d101      	bne.n	8006cd8 <HAL_DMA_Start_IT+0x20>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e066      	b.n	8006da6 <HAL_DMA_Start_IT+0xee>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d155      	bne.n	8006d98 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0201 	bic.w	r2, r2, #1
 8006d08:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	68b9      	ldr	r1, [r7, #8]
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f000 f9bb 	bl	800708c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d008      	beq.n	8006d30 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f042 020e 	orr.w	r2, r2, #14
 8006d2c:	601a      	str	r2, [r3, #0]
 8006d2e:	e00f      	b.n	8006d50 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0204 	bic.w	r2, r2, #4
 8006d3e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 020a 	orr.w	r2, r2, #10
 8006d4e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d007      	beq.n	8006d6e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d6c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d84:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0201 	orr.w	r2, r2, #1
 8006d94:	601a      	str	r2, [r3, #0]
 8006d96:	e005      	b.n	8006da4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006da0:	2302      	movs	r3, #2
 8006da2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006dae:	b480      	push	{r7}
 8006db0:	b085      	sub	sp, #20
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d005      	beq.n	8006dd2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	e037      	b.n	8006e42 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f022 020e 	bic.w	r2, r2, #14
 8006de0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006df0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0201 	bic.w	r2, r2, #1
 8006e00:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e06:	f003 021f 	and.w	r2, r3, #31
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0e:	2101      	movs	r1, #1
 8006e10:	fa01 f202 	lsl.w	r2, r1, r2
 8006e14:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006e1e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00c      	beq.n	8006e42 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e36:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006e40:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d00d      	beq.n	8006e94 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	73fb      	strb	r3, [r7, #15]
 8006e92:	e047      	b.n	8006f24 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f022 020e 	bic.w	r2, r2, #14
 8006ea2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0201 	bic.w	r2, r2, #1
 8006eb2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ebe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ec2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec8:	f003 021f 	and.w	r2, r3, #31
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ed6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006ee0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00c      	beq.n	8006f04 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ef4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ef8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006f02:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	4798      	blx	r3
    }
  }
  return status;
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b084      	sub	sp, #16
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2204      	movs	r2, #4
 8006f50:	409a      	lsls	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4013      	ands	r3, r2
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d026      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x7a>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d021      	beq.n	8006fa8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0320 	and.w	r3, r3, #32
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d107      	bne.n	8006f82 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f022 0204 	bic.w	r2, r2, #4
 8006f80:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f86:	f003 021f 	and.w	r2, r3, #31
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8e:	2104      	movs	r1, #4
 8006f90:	fa01 f202 	lsl.w	r2, r1, r2
 8006f94:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d071      	beq.n	8007082 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006fa6:	e06c      	b.n	8007082 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fac:	f003 031f 	and.w	r3, r3, #31
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	409a      	lsls	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d02e      	beq.n	800701a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	f003 0302 	and.w	r3, r3, #2
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d029      	beq.n	800701a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 0320 	and.w	r3, r3, #32
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10b      	bne.n	8006fec <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f022 020a 	bic.w	r2, r2, #10
 8006fe2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ff0:	f003 021f 	and.w	r2, r3, #31
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ff8:	2102      	movs	r1, #2
 8006ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8006ffe:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d038      	beq.n	8007082 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007018:	e033      	b.n	8007082 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800701e:	f003 031f 	and.w	r3, r3, #31
 8007022:	2208      	movs	r2, #8
 8007024:	409a      	lsls	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4013      	ands	r3, r2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d02a      	beq.n	8007084 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d025      	beq.n	8007084 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f022 020e 	bic.w	r2, r2, #14
 8007046:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704c:	f003 021f 	and.w	r2, r3, #31
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007054:	2101      	movs	r1, #1
 8007056:	fa01 f202 	lsl.w	r2, r1, r2
 800705a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2201      	movs	r2, #1
 8007066:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007076:	2b00      	cmp	r3, #0
 8007078:	d004      	beq.n	8007084 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007082:	bf00      	nop
 8007084:	bf00      	nop
}
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800709e:	68fa      	ldr	r2, [r7, #12]
 80070a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80070a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d004      	beq.n	80070b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80070b4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ba:	f003 021f 	and.w	r2, r3, #31
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070c2:	2101      	movs	r1, #1
 80070c4:	fa01 f202 	lsl.w	r2, r1, r2
 80070c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	683a      	ldr	r2, [r7, #0]
 80070d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	2b10      	cmp	r3, #16
 80070d8:	d108      	bne.n	80070ec <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80070ea:	e007      	b.n	80070fc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	60da      	str	r2, [r3, #12]
}
 80070fc:	bf00      	nop
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	4b16      	ldr	r3, [pc, #88]	@ (8007170 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007118:	429a      	cmp	r2, r3
 800711a:	d802      	bhi.n	8007122 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800711c:	4b15      	ldr	r3, [pc, #84]	@ (8007174 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	e001      	b.n	8007126 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007122:	4b15      	ldr	r3, [pc, #84]	@ (8007178 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007124:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	b2db      	uxtb	r3, r3
 8007130:	3b08      	subs	r3, #8
 8007132:	4a12      	ldr	r2, [pc, #72]	@ (800717c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007134:	fba2 2303 	umull	r2, r3, r2, r3
 8007138:	091b      	lsrs	r3, r3, #4
 800713a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007140:	089b      	lsrs	r3, r3, #2
 8007142:	009a      	lsls	r2, r3, #2
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	4413      	add	r3, r2
 8007148:	461a      	mov	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a0b      	ldr	r2, [pc, #44]	@ (8007180 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007152:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	2201      	movs	r2, #1
 800715c:	409a      	lsls	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	40020407 	.word	0x40020407
 8007174:	40020800 	.word	0x40020800
 8007178:	40020820 	.word	0x40020820
 800717c:	cccccccd 	.word	0xcccccccd
 8007180:	40020880 	.word	0x40020880

08007184 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	b2db      	uxtb	r3, r3
 8007192:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4b0b      	ldr	r3, [pc, #44]	@ (80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	461a      	mov	r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a08      	ldr	r2, [pc, #32]	@ (80071c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80071a6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	f003 031f 	and.w	r3, r3, #31
 80071b0:	2201      	movs	r2, #1
 80071b2:	409a      	lsls	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80071b8:	bf00      	nop
 80071ba:	3714      	adds	r7, #20
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	1000823f 	.word	0x1000823f
 80071c8:	40020940 	.word	0x40020940

080071cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80071da:	e15a      	b.n	8007492 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	2101      	movs	r1, #1
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	fa01 f303 	lsl.w	r3, r1, r3
 80071e8:	4013      	ands	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 814c 	beq.w	800748c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	f003 0303 	and.w	r3, r3, #3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d005      	beq.n	800720c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007208:	2b02      	cmp	r3, #2
 800720a:	d130      	bne.n	800726e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	005b      	lsls	r3, r3, #1
 8007216:	2203      	movs	r2, #3
 8007218:	fa02 f303 	lsl.w	r3, r2, r3
 800721c:	43db      	mvns	r3, r3
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4013      	ands	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	68da      	ldr	r2, [r3, #12]
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	005b      	lsls	r3, r3, #1
 800722c:	fa02 f303 	lsl.w	r3, r2, r3
 8007230:	693a      	ldr	r2, [r7, #16]
 8007232:	4313      	orrs	r3, r2
 8007234:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007242:	2201      	movs	r2, #1
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	43db      	mvns	r3, r3
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4013      	ands	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	091b      	lsrs	r3, r3, #4
 8007258:	f003 0201 	and.w	r2, r3, #1
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4313      	orrs	r3, r2
 8007266:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	2b03      	cmp	r3, #3
 8007278:	d017      	beq.n	80072aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	2203      	movs	r2, #3
 8007286:	fa02 f303 	lsl.w	r3, r2, r3
 800728a:	43db      	mvns	r3, r3
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4013      	ands	r3, r2
 8007290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	689a      	ldr	r2, [r3, #8]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f003 0303 	and.w	r3, r3, #3
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d123      	bne.n	80072fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	08da      	lsrs	r2, r3, #3
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3208      	adds	r2, #8
 80072be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	220f      	movs	r2, #15
 80072ce:	fa02 f303 	lsl.w	r3, r2, r3
 80072d2:	43db      	mvns	r3, r3
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	4013      	ands	r3, r2
 80072d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	691a      	ldr	r2, [r3, #16]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	08da      	lsrs	r2, r3, #3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	3208      	adds	r2, #8
 80072f8:	6939      	ldr	r1, [r7, #16]
 80072fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	005b      	lsls	r3, r3, #1
 8007308:	2203      	movs	r2, #3
 800730a:	fa02 f303 	lsl.w	r3, r2, r3
 800730e:	43db      	mvns	r3, r3
 8007310:	693a      	ldr	r2, [r7, #16]
 8007312:	4013      	ands	r3, r2
 8007314:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f003 0203 	and.w	r2, r3, #3
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	005b      	lsls	r3, r3, #1
 8007322:	fa02 f303 	lsl.w	r3, r2, r3
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800733a:	2b00      	cmp	r3, #0
 800733c:	f000 80a6 	beq.w	800748c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007340:	4b5b      	ldr	r3, [pc, #364]	@ (80074b0 <HAL_GPIO_Init+0x2e4>)
 8007342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007344:	4a5a      	ldr	r2, [pc, #360]	@ (80074b0 <HAL_GPIO_Init+0x2e4>)
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	6613      	str	r3, [r2, #96]	@ 0x60
 800734c:	4b58      	ldr	r3, [pc, #352]	@ (80074b0 <HAL_GPIO_Init+0x2e4>)
 800734e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	60bb      	str	r3, [r7, #8]
 8007356:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007358:	4a56      	ldr	r2, [pc, #344]	@ (80074b4 <HAL_GPIO_Init+0x2e8>)
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	089b      	lsrs	r3, r3, #2
 800735e:	3302      	adds	r3, #2
 8007360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007364:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	220f      	movs	r2, #15
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	43db      	mvns	r3, r3
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	4013      	ands	r3, r2
 800737a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007382:	d01f      	beq.n	80073c4 <HAL_GPIO_Init+0x1f8>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a4c      	ldr	r2, [pc, #304]	@ (80074b8 <HAL_GPIO_Init+0x2ec>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d019      	beq.n	80073c0 <HAL_GPIO_Init+0x1f4>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a4b      	ldr	r2, [pc, #300]	@ (80074bc <HAL_GPIO_Init+0x2f0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d013      	beq.n	80073bc <HAL_GPIO_Init+0x1f0>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	4a4a      	ldr	r2, [pc, #296]	@ (80074c0 <HAL_GPIO_Init+0x2f4>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d00d      	beq.n	80073b8 <HAL_GPIO_Init+0x1ec>
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	4a49      	ldr	r2, [pc, #292]	@ (80074c4 <HAL_GPIO_Init+0x2f8>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d007      	beq.n	80073b4 <HAL_GPIO_Init+0x1e8>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a48      	ldr	r2, [pc, #288]	@ (80074c8 <HAL_GPIO_Init+0x2fc>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d101      	bne.n	80073b0 <HAL_GPIO_Init+0x1e4>
 80073ac:	2305      	movs	r3, #5
 80073ae:	e00a      	b.n	80073c6 <HAL_GPIO_Init+0x1fa>
 80073b0:	2306      	movs	r3, #6
 80073b2:	e008      	b.n	80073c6 <HAL_GPIO_Init+0x1fa>
 80073b4:	2304      	movs	r3, #4
 80073b6:	e006      	b.n	80073c6 <HAL_GPIO_Init+0x1fa>
 80073b8:	2303      	movs	r3, #3
 80073ba:	e004      	b.n	80073c6 <HAL_GPIO_Init+0x1fa>
 80073bc:	2302      	movs	r3, #2
 80073be:	e002      	b.n	80073c6 <HAL_GPIO_Init+0x1fa>
 80073c0:	2301      	movs	r3, #1
 80073c2:	e000      	b.n	80073c6 <HAL_GPIO_Init+0x1fa>
 80073c4:	2300      	movs	r3, #0
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	f002 0203 	and.w	r2, r2, #3
 80073cc:	0092      	lsls	r2, r2, #2
 80073ce:	4093      	lsls	r3, r2
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80073d6:	4937      	ldr	r1, [pc, #220]	@ (80074b4 <HAL_GPIO_Init+0x2e8>)
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	089b      	lsrs	r3, r3, #2
 80073dc:	3302      	adds	r3, #2
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80073e4:	4b39      	ldr	r3, [pc, #228]	@ (80074cc <HAL_GPIO_Init+0x300>)
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	43db      	mvns	r3, r3
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4013      	ands	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007408:	4a30      	ldr	r2, [pc, #192]	@ (80074cc <HAL_GPIO_Init+0x300>)
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800740e:	4b2f      	ldr	r3, [pc, #188]	@ (80074cc <HAL_GPIO_Init+0x300>)
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	43db      	mvns	r3, r3
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	4013      	ands	r3, r2
 800741c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d003      	beq.n	8007432 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800742a:	693a      	ldr	r2, [r7, #16]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007432:	4a26      	ldr	r2, [pc, #152]	@ (80074cc <HAL_GPIO_Init+0x300>)
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007438:	4b24      	ldr	r3, [pc, #144]	@ (80074cc <HAL_GPIO_Init+0x300>)
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	43db      	mvns	r3, r3
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4013      	ands	r3, r2
 8007446:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	4313      	orrs	r3, r2
 800745a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800745c:	4a1b      	ldr	r2, [pc, #108]	@ (80074cc <HAL_GPIO_Init+0x300>)
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007462:	4b1a      	ldr	r3, [pc, #104]	@ (80074cc <HAL_GPIO_Init+0x300>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	43db      	mvns	r3, r3
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	4013      	ands	r3, r2
 8007470:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007486:	4a11      	ldr	r2, [pc, #68]	@ (80074cc <HAL_GPIO_Init+0x300>)
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	3301      	adds	r3, #1
 8007490:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	fa22 f303 	lsr.w	r3, r2, r3
 800749c:	2b00      	cmp	r3, #0
 800749e:	f47f ae9d 	bne.w	80071dc <HAL_GPIO_Init+0x10>
  }
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	371c      	adds	r7, #28
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	40021000 	.word	0x40021000
 80074b4:	40010000 	.word	0x40010000
 80074b8:	48000400 	.word	0x48000400
 80074bc:	48000800 	.word	0x48000800
 80074c0:	48000c00 	.word	0x48000c00
 80074c4:	48001000 	.word	0x48001000
 80074c8:	48001400 	.word	0x48001400
 80074cc:	40010400 	.word	0x40010400

080074d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	460b      	mov	r3, r1
 80074da:	807b      	strh	r3, [r7, #2]
 80074dc:	4613      	mov	r3, r2
 80074de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80074e0:	787b      	ldrb	r3, [r7, #1]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d003      	beq.n	80074ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80074e6:	887a      	ldrh	r2, [r7, #2]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80074ec:	e002      	b.n	80074f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80074ee:	887a      	ldrh	r2, [r7, #2]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	4603      	mov	r3, r0
 8007508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800750a:	4b08      	ldr	r3, [pc, #32]	@ (800752c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800750c:	695a      	ldr	r2, [r3, #20]
 800750e:	88fb      	ldrh	r3, [r7, #6]
 8007510:	4013      	ands	r3, r2
 8007512:	2b00      	cmp	r3, #0
 8007514:	d006      	beq.n	8007524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007516:	4a05      	ldr	r2, [pc, #20]	@ (800752c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007518:	88fb      	ldrh	r3, [r7, #6]
 800751a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800751c:	88fb      	ldrh	r3, [r7, #6]
 800751e:	4618      	mov	r0, r3
 8007520:	f7fc f97e 	bl	8003820 <HAL_GPIO_EXTI_Callback>
  }
}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	40010400 	.word	0x40010400

08007530 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d141      	bne.n	80075c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800753e:	4b4b      	ldr	r3, [pc, #300]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800754a:	d131      	bne.n	80075b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800754c:	4b47      	ldr	r3, [pc, #284]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800754e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007552:	4a46      	ldr	r2, [pc, #280]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007554:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007558:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800755c:	4b43      	ldr	r3, [pc, #268]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007564:	4a41      	ldr	r2, [pc, #260]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007566:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800756a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800756c:	4b40      	ldr	r3, [pc, #256]	@ (8007670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2232      	movs	r2, #50	@ 0x32
 8007572:	fb02 f303 	mul.w	r3, r2, r3
 8007576:	4a3f      	ldr	r2, [pc, #252]	@ (8007674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007578:	fba2 2303 	umull	r2, r3, r2, r3
 800757c:	0c9b      	lsrs	r3, r3, #18
 800757e:	3301      	adds	r3, #1
 8007580:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007582:	e002      	b.n	800758a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3b01      	subs	r3, #1
 8007588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800758a:	4b38      	ldr	r3, [pc, #224]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007596:	d102      	bne.n	800759e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1f2      	bne.n	8007584 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800759e:	4b33      	ldr	r3, [pc, #204]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075aa:	d158      	bne.n	800765e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e057      	b.n	8007660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075b0:	4b2e      	ldr	r3, [pc, #184]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b6:	4a2d      	ldr	r2, [pc, #180]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80075c0:	e04d      	b.n	800765e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075c8:	d141      	bne.n	800764e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80075ca:	4b28      	ldr	r3, [pc, #160]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80075d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d6:	d131      	bne.n	800763c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075d8:	4b24      	ldr	r3, [pc, #144]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075de:	4a23      	ldr	r2, [pc, #140]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075e8:	4b20      	ldr	r3, [pc, #128]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80075f0:	4a1e      	ldr	r2, [pc, #120]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80075f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075f8:	4b1d      	ldr	r3, [pc, #116]	@ (8007670 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2232      	movs	r2, #50	@ 0x32
 80075fe:	fb02 f303 	mul.w	r3, r2, r3
 8007602:	4a1c      	ldr	r2, [pc, #112]	@ (8007674 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007604:	fba2 2303 	umull	r2, r3, r2, r3
 8007608:	0c9b      	lsrs	r3, r3, #18
 800760a:	3301      	adds	r3, #1
 800760c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800760e:	e002      	b.n	8007616 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3b01      	subs	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007616:	4b15      	ldr	r3, [pc, #84]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800761e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007622:	d102      	bne.n	800762a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d1f2      	bne.n	8007610 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800762a:	4b10      	ldr	r3, [pc, #64]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007632:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007636:	d112      	bne.n	800765e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e011      	b.n	8007660 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800763c:	4b0b      	ldr	r3, [pc, #44]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800763e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007642:	4a0a      	ldr	r2, [pc, #40]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007648:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800764c:	e007      	b.n	800765e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800764e:	4b07      	ldr	r3, [pc, #28]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007656:	4a05      	ldr	r2, [pc, #20]	@ (800766c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007658:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800765c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	40007000 	.word	0x40007000
 8007670:	2000018c 	.word	0x2000018c
 8007674:	431bde83 	.word	0x431bde83

08007678 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007678:	b480      	push	{r7}
 800767a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800767c:	4b05      	ldr	r3, [pc, #20]	@ (8007694 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	4a04      	ldr	r2, [pc, #16]	@ (8007694 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007686:	6093      	str	r3, [r2, #8]
}
 8007688:	bf00      	nop
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	40007000 	.word	0x40007000

08007698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e2fe      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d075      	beq.n	80077a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076b6:	4b97      	ldr	r3, [pc, #604]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 030c 	and.w	r3, r3, #12
 80076be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076c0:	4b94      	ldr	r3, [pc, #592]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	f003 0303 	and.w	r3, r3, #3
 80076c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	2b0c      	cmp	r3, #12
 80076ce:	d102      	bne.n	80076d6 <HAL_RCC_OscConfig+0x3e>
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d002      	beq.n	80076dc <HAL_RCC_OscConfig+0x44>
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	2b08      	cmp	r3, #8
 80076da:	d10b      	bne.n	80076f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076dc:	4b8d      	ldr	r3, [pc, #564]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d05b      	beq.n	80077a0 <HAL_RCC_OscConfig+0x108>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d157      	bne.n	80077a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e2d9      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076fc:	d106      	bne.n	800770c <HAL_RCC_OscConfig+0x74>
 80076fe:	4b85      	ldr	r3, [pc, #532]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a84      	ldr	r2, [pc, #528]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007704:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	e01d      	b.n	8007748 <HAL_RCC_OscConfig+0xb0>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007714:	d10c      	bne.n	8007730 <HAL_RCC_OscConfig+0x98>
 8007716:	4b7f      	ldr	r3, [pc, #508]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a7e      	ldr	r2, [pc, #504]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 800771c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	4b7c      	ldr	r3, [pc, #496]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a7b      	ldr	r2, [pc, #492]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007728:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	e00b      	b.n	8007748 <HAL_RCC_OscConfig+0xb0>
 8007730:	4b78      	ldr	r3, [pc, #480]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a77      	ldr	r2, [pc, #476]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007736:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	4b75      	ldr	r3, [pc, #468]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a74      	ldr	r2, [pc, #464]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007742:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d013      	beq.n	8007778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007750:	f7fd fc76 	bl	8005040 <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007758:	f7fd fc72 	bl	8005040 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b64      	cmp	r3, #100	@ 0x64
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e29e      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800776a:	4b6a      	ldr	r3, [pc, #424]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0f0      	beq.n	8007758 <HAL_RCC_OscConfig+0xc0>
 8007776:	e014      	b.n	80077a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007778:	f7fd fc62 	bl	8005040 <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800777e:	e008      	b.n	8007792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007780:	f7fd fc5e 	bl	8005040 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b64      	cmp	r3, #100	@ 0x64
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e28a      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007792:	4b60      	ldr	r3, [pc, #384]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1f0      	bne.n	8007780 <HAL_RCC_OscConfig+0xe8>
 800779e:	e000      	b.n	80077a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d075      	beq.n	800789a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ae:	4b59      	ldr	r3, [pc, #356]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 030c 	and.w	r3, r3, #12
 80077b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077b8:	4b56      	ldr	r3, [pc, #344]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f003 0303 	and.w	r3, r3, #3
 80077c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80077c2:	69bb      	ldr	r3, [r7, #24]
 80077c4:	2b0c      	cmp	r3, #12
 80077c6:	d102      	bne.n	80077ce <HAL_RCC_OscConfig+0x136>
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d002      	beq.n	80077d4 <HAL_RCC_OscConfig+0x13c>
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d11f      	bne.n	8007814 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077d4:	4b4f      	ldr	r3, [pc, #316]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d005      	beq.n	80077ec <HAL_RCC_OscConfig+0x154>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	e25d      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ec:	4b49      	ldr	r3, [pc, #292]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	691b      	ldr	r3, [r3, #16]
 80077f8:	061b      	lsls	r3, r3, #24
 80077fa:	4946      	ldr	r1, [pc, #280]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007800:	4b45      	ldr	r3, [pc, #276]	@ (8007918 <HAL_RCC_OscConfig+0x280>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4618      	mov	r0, r3
 8007806:	f7fd fbcf 	bl	8004fa8 <HAL_InitTick>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d043      	beq.n	8007898 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e249      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d023      	beq.n	8007864 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800781c:	4b3d      	ldr	r3, [pc, #244]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a3c      	ldr	r2, [pc, #240]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007822:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007828:	f7fd fc0a 	bl	8005040 <HAL_GetTick>
 800782c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800782e:	e008      	b.n	8007842 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007830:	f7fd fc06 	bl	8005040 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b02      	cmp	r3, #2
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e232      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007842:	4b34      	ldr	r3, [pc, #208]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0f0      	beq.n	8007830 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800784e:	4b31      	ldr	r3, [pc, #196]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	061b      	lsls	r3, r3, #24
 800785c:	492d      	ldr	r1, [pc, #180]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 800785e:	4313      	orrs	r3, r2
 8007860:	604b      	str	r3, [r1, #4]
 8007862:	e01a      	b.n	800789a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007864:	4b2b      	ldr	r3, [pc, #172]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a2a      	ldr	r2, [pc, #168]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 800786a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800786e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007870:	f7fd fbe6 	bl	8005040 <HAL_GetTick>
 8007874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007876:	e008      	b.n	800788a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007878:	f7fd fbe2 	bl	8005040 <HAL_GetTick>
 800787c:	4602      	mov	r2, r0
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	1ad3      	subs	r3, r2, r3
 8007882:	2b02      	cmp	r3, #2
 8007884:	d901      	bls.n	800788a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007886:	2303      	movs	r3, #3
 8007888:	e20e      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800788a:	4b22      	ldr	r3, [pc, #136]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1f0      	bne.n	8007878 <HAL_RCC_OscConfig+0x1e0>
 8007896:	e000      	b.n	800789a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007898:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 0308 	and.w	r3, r3, #8
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d041      	beq.n	800792a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d01c      	beq.n	80078e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ae:	4b19      	ldr	r3, [pc, #100]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80078b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078b4:	4a17      	ldr	r2, [pc, #92]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80078b6:	f043 0301 	orr.w	r3, r3, #1
 80078ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078be:	f7fd fbbf 	bl	8005040 <HAL_GetTick>
 80078c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078c4:	e008      	b.n	80078d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078c6:	f7fd fbbb 	bl	8005040 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d901      	bls.n	80078d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e1e7      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80078d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80078da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0ef      	beq.n	80078c6 <HAL_RCC_OscConfig+0x22e>
 80078e6:	e020      	b.n	800792a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80078ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80078ee:	4a09      	ldr	r2, [pc, #36]	@ (8007914 <HAL_RCC_OscConfig+0x27c>)
 80078f0:	f023 0301 	bic.w	r3, r3, #1
 80078f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f8:	f7fd fba2 	bl	8005040 <HAL_GetTick>
 80078fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80078fe:	e00d      	b.n	800791c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007900:	f7fd fb9e 	bl	8005040 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d906      	bls.n	800791c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e1ca      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
 8007912:	bf00      	nop
 8007914:	40021000 	.word	0x40021000
 8007918:	20000190 	.word	0x20000190
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800791c:	4b8c      	ldr	r3, [pc, #560]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 800791e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007922:	f003 0302 	and.w	r3, r3, #2
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1ea      	bne.n	8007900 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f003 0304 	and.w	r3, r3, #4
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80a6 	beq.w	8007a84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007938:	2300      	movs	r3, #0
 800793a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800793c:	4b84      	ldr	r3, [pc, #528]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 800793e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_RCC_OscConfig+0x2b4>
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <HAL_RCC_OscConfig+0x2b6>
 800794c:	2300      	movs	r3, #0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00d      	beq.n	800796e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007952:	4b7f      	ldr	r3, [pc, #508]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007956:	4a7e      	ldr	r2, [pc, #504]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007958:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800795c:	6593      	str	r3, [r2, #88]	@ 0x58
 800795e:	4b7c      	ldr	r3, [pc, #496]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007962:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800796a:	2301      	movs	r3, #1
 800796c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800796e:	4b79      	ldr	r3, [pc, #484]	@ (8007b54 <HAL_RCC_OscConfig+0x4bc>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007976:	2b00      	cmp	r3, #0
 8007978:	d118      	bne.n	80079ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800797a:	4b76      	ldr	r3, [pc, #472]	@ (8007b54 <HAL_RCC_OscConfig+0x4bc>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a75      	ldr	r2, [pc, #468]	@ (8007b54 <HAL_RCC_OscConfig+0x4bc>)
 8007980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007984:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007986:	f7fd fb5b 	bl	8005040 <HAL_GetTick>
 800798a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800798c:	e008      	b.n	80079a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800798e:	f7fd fb57 	bl	8005040 <HAL_GetTick>
 8007992:	4602      	mov	r2, r0
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	2b02      	cmp	r3, #2
 800799a:	d901      	bls.n	80079a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800799c:	2303      	movs	r3, #3
 800799e:	e183      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079a0:	4b6c      	ldr	r3, [pc, #432]	@ (8007b54 <HAL_RCC_OscConfig+0x4bc>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d0f0      	beq.n	800798e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d108      	bne.n	80079c6 <HAL_RCC_OscConfig+0x32e>
 80079b4:	4b66      	ldr	r3, [pc, #408]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 80079b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079ba:	4a65      	ldr	r2, [pc, #404]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 80079bc:	f043 0301 	orr.w	r3, r3, #1
 80079c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079c4:	e024      	b.n	8007a10 <HAL_RCC_OscConfig+0x378>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	2b05      	cmp	r3, #5
 80079cc:	d110      	bne.n	80079f0 <HAL_RCC_OscConfig+0x358>
 80079ce:	4b60      	ldr	r3, [pc, #384]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 80079d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079d4:	4a5e      	ldr	r2, [pc, #376]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 80079d6:	f043 0304 	orr.w	r3, r3, #4
 80079da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079de:	4b5c      	ldr	r3, [pc, #368]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 80079e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079e4:	4a5a      	ldr	r2, [pc, #360]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 80079e6:	f043 0301 	orr.w	r3, r3, #1
 80079ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80079ee:	e00f      	b.n	8007a10 <HAL_RCC_OscConfig+0x378>
 80079f0:	4b57      	ldr	r3, [pc, #348]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 80079f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80079f6:	4a56      	ldr	r2, [pc, #344]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 80079f8:	f023 0301 	bic.w	r3, r3, #1
 80079fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007a00:	4b53      	ldr	r3, [pc, #332]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a06:	4a52      	ldr	r2, [pc, #328]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007a08:	f023 0304 	bic.w	r3, r3, #4
 8007a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d016      	beq.n	8007a46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a18:	f7fd fb12 	bl	8005040 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a1e:	e00a      	b.n	8007a36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a20:	f7fd fb0e 	bl	8005040 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d901      	bls.n	8007a36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e138      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007a36:	4b46      	ldr	r3, [pc, #280]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d0ed      	beq.n	8007a20 <HAL_RCC_OscConfig+0x388>
 8007a44:	e015      	b.n	8007a72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a46:	f7fd fafb 	bl	8005040 <HAL_GetTick>
 8007a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a4c:	e00a      	b.n	8007a64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a4e:	f7fd faf7 	bl	8005040 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d901      	bls.n	8007a64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e121      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007a64:	4b3a      	ldr	r3, [pc, #232]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1ed      	bne.n	8007a4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a72:	7ffb      	ldrb	r3, [r7, #31]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d105      	bne.n	8007a84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a78:	4b35      	ldr	r3, [pc, #212]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a7c:	4a34      	ldr	r2, [pc, #208]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a82:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d03c      	beq.n	8007b0a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d01c      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007a98:	4b2d      	ldr	r3, [pc, #180]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007a9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007aa0:	f043 0301 	orr.w	r3, r3, #1
 8007aa4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa8:	f7fd faca 	bl	8005040 <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ab0:	f7fd fac6 	bl	8005040 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e0f2      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ac2:	4b23      	ldr	r3, [pc, #140]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ac8:	f003 0302 	and.w	r3, r3, #2
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d0ef      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x418>
 8007ad0:	e01b      	b.n	8007b0a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007ada:	f023 0301 	bic.w	r3, r3, #1
 8007ade:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae2:	f7fd faad 	bl	8005040 <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ae8:	e008      	b.n	8007afc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007aea:	f7fd faa9 	bl	8005040 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e0d5      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007afc:	4b14      	ldr	r3, [pc, #80]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007afe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1ef      	bne.n	8007aea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 80c9 	beq.w	8007ca6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b14:	4b0e      	ldr	r3, [pc, #56]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f003 030c 	and.w	r3, r3, #12
 8007b1c:	2b0c      	cmp	r3, #12
 8007b1e:	f000 8083 	beq.w	8007c28 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d15e      	bne.n	8007be8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b2a:	4b09      	ldr	r3, [pc, #36]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a08      	ldr	r2, [pc, #32]	@ (8007b50 <HAL_RCC_OscConfig+0x4b8>)
 8007b30:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b36:	f7fd fa83 	bl	8005040 <HAL_GetTick>
 8007b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b3c:	e00c      	b.n	8007b58 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b3e:	f7fd fa7f 	bl	8005040 <HAL_GetTick>
 8007b42:	4602      	mov	r2, r0
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d905      	bls.n	8007b58 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007b4c:	2303      	movs	r3, #3
 8007b4e:	e0ab      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
 8007b50:	40021000 	.word	0x40021000
 8007b54:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007b58:	4b55      	ldr	r3, [pc, #340]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1ec      	bne.n	8007b3e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b64:	4b52      	ldr	r3, [pc, #328]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007b66:	68da      	ldr	r2, [r3, #12]
 8007b68:	4b52      	ldr	r3, [pc, #328]	@ (8007cb4 <HAL_RCC_OscConfig+0x61c>)
 8007b6a:	4013      	ands	r3, r2
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6a11      	ldr	r1, [r2, #32]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007b74:	3a01      	subs	r2, #1
 8007b76:	0112      	lsls	r2, r2, #4
 8007b78:	4311      	orrs	r1, r2
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8007b7e:	0212      	lsls	r2, r2, #8
 8007b80:	4311      	orrs	r1, r2
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007b86:	0852      	lsrs	r2, r2, #1
 8007b88:	3a01      	subs	r2, #1
 8007b8a:	0552      	lsls	r2, r2, #21
 8007b8c:	4311      	orrs	r1, r2
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007b92:	0852      	lsrs	r2, r2, #1
 8007b94:	3a01      	subs	r2, #1
 8007b96:	0652      	lsls	r2, r2, #25
 8007b98:	4311      	orrs	r1, r2
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007b9e:	06d2      	lsls	r2, r2, #27
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	4943      	ldr	r1, [pc, #268]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ba8:	4b41      	ldr	r3, [pc, #260]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a40      	ldr	r2, [pc, #256]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007bae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bb2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	4a3d      	ldr	r2, [pc, #244]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007bbe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc0:	f7fd fa3e 	bl	8005040 <HAL_GetTick>
 8007bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bc6:	e008      	b.n	8007bda <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bc8:	f7fd fa3a 	bl	8005040 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e066      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007bda:	4b35      	ldr	r3, [pc, #212]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0f0      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x530>
 8007be6:	e05e      	b.n	8007ca6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007be8:	4b31      	ldr	r3, [pc, #196]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a30      	ldr	r2, [pc, #192]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007bee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf4:	f7fd fa24 	bl	8005040 <HAL_GetTick>
 8007bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bfc:	f7fd fa20 	bl	8005040 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e04c      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007c0e:	4b28      	ldr	r3, [pc, #160]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d1f0      	bne.n	8007bfc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007c1a:	4b25      	ldr	r3, [pc, #148]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	4924      	ldr	r1, [pc, #144]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007c20:	4b25      	ldr	r3, [pc, #148]	@ (8007cb8 <HAL_RCC_OscConfig+0x620>)
 8007c22:	4013      	ands	r3, r2
 8007c24:	60cb      	str	r3, [r1, #12]
 8007c26:	e03e      	b.n	8007ca6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d101      	bne.n	8007c34 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	e039      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007c34:	4b1e      	ldr	r3, [pc, #120]	@ (8007cb0 <HAL_RCC_OscConfig+0x618>)
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f003 0203 	and.w	r2, r3, #3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d12c      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c52:	3b01      	subs	r3, #1
 8007c54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d123      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c64:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d11b      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d113      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c7a:	697b      	ldr	r3, [r7, #20]
 8007c7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c84:	085b      	lsrs	r3, r3, #1
 8007c86:	3b01      	subs	r3, #1
 8007c88:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d109      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c98:	085b      	lsrs	r3, r3, #1
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d001      	beq.n	8007ca6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e000      	b.n	8007ca8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3720      	adds	r7, #32
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}
 8007cb0:	40021000 	.word	0x40021000
 8007cb4:	019f800c 	.word	0x019f800c
 8007cb8:	feeefffc 	.word	0xfeeefffc

08007cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e11e      	b.n	8007f12 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007cd4:	4b91      	ldr	r3, [pc, #580]	@ (8007f1c <HAL_RCC_ClockConfig+0x260>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 030f 	and.w	r3, r3, #15
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d910      	bls.n	8007d04 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce2:	4b8e      	ldr	r3, [pc, #568]	@ (8007f1c <HAL_RCC_ClockConfig+0x260>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f023 020f 	bic.w	r2, r3, #15
 8007cea:	498c      	ldr	r1, [pc, #560]	@ (8007f1c <HAL_RCC_ClockConfig+0x260>)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cf2:	4b8a      	ldr	r3, [pc, #552]	@ (8007f1c <HAL_RCC_ClockConfig+0x260>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 030f 	and.w	r3, r3, #15
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d001      	beq.n	8007d04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e106      	b.n	8007f12 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d073      	beq.n	8007df8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	2b03      	cmp	r3, #3
 8007d16:	d129      	bne.n	8007d6c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d18:	4b81      	ldr	r3, [pc, #516]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d101      	bne.n	8007d28 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	e0f4      	b.n	8007f12 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007d28:	f000 f99e 	bl	8008068 <RCC_GetSysClockFreqFromPLLSource>
 8007d2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	4a7c      	ldr	r2, [pc, #496]	@ (8007f24 <HAL_RCC_ClockConfig+0x268>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d93f      	bls.n	8007db6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d36:	4b7a      	ldr	r3, [pc, #488]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007d38:	689b      	ldr	r3, [r3, #8]
 8007d3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d009      	beq.n	8007d56 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d033      	beq.n	8007db6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d12f      	bne.n	8007db6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007d56:	4b72      	ldr	r3, [pc, #456]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d5e:	4a70      	ldr	r2, [pc, #448]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007d66:	2380      	movs	r3, #128	@ 0x80
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	e024      	b.n	8007db6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d107      	bne.n	8007d84 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d74:	4b6a      	ldr	r3, [pc, #424]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d109      	bne.n	8007d94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e0c6      	b.n	8007f12 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d84:	4b66      	ldr	r3, [pc, #408]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007d90:	2301      	movs	r3, #1
 8007d92:	e0be      	b.n	8007f12 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007d94:	f000 f8ce 	bl	8007f34 <HAL_RCC_GetSysClockFreq>
 8007d98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	4a61      	ldr	r2, [pc, #388]	@ (8007f24 <HAL_RCC_ClockConfig+0x268>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d909      	bls.n	8007db6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007da2:	4b5f      	ldr	r3, [pc, #380]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007daa:	4a5d      	ldr	r2, [pc, #372]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007dac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007db0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007db2:	2380      	movs	r3, #128	@ 0x80
 8007db4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007db6:	4b5a      	ldr	r3, [pc, #360]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f023 0203 	bic.w	r2, r3, #3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	4957      	ldr	r1, [pc, #348]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dc8:	f7fd f93a 	bl	8005040 <HAL_GetTick>
 8007dcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dce:	e00a      	b.n	8007de6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007dd0:	f7fd f936 	bl	8005040 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e095      	b.n	8007f12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007de6:	4b4e      	ldr	r3, [pc, #312]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	f003 020c 	and.w	r2, r3, #12
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d1eb      	bne.n	8007dd0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d023      	beq.n	8007e4c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 0304 	and.w	r3, r3, #4
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d005      	beq.n	8007e1c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e10:	4b43      	ldr	r3, [pc, #268]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	4a42      	ldr	r2, [pc, #264]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007e16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007e1a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f003 0308 	and.w	r3, r3, #8
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007e28:	4b3d      	ldr	r3, [pc, #244]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007e30:	4a3b      	ldr	r2, [pc, #236]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007e32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007e36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e38:	4b39      	ldr	r3, [pc, #228]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007e3a:	689b      	ldr	r3, [r3, #8]
 8007e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	689b      	ldr	r3, [r3, #8]
 8007e44:	4936      	ldr	r1, [pc, #216]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	608b      	str	r3, [r1, #8]
 8007e4a:	e008      	b.n	8007e5e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	2b80      	cmp	r3, #128	@ 0x80
 8007e50:	d105      	bne.n	8007e5e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007e52:	4b33      	ldr	r3, [pc, #204]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	4a32      	ldr	r2, [pc, #200]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007e58:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e5c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007e5e:	4b2f      	ldr	r3, [pc, #188]	@ (8007f1c <HAL_RCC_ClockConfig+0x260>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 030f 	and.w	r3, r3, #15
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d21d      	bcs.n	8007ea8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e6c:	4b2b      	ldr	r3, [pc, #172]	@ (8007f1c <HAL_RCC_ClockConfig+0x260>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f023 020f 	bic.w	r2, r3, #15
 8007e74:	4929      	ldr	r1, [pc, #164]	@ (8007f1c <HAL_RCC_ClockConfig+0x260>)
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007e7c:	f7fd f8e0 	bl	8005040 <HAL_GetTick>
 8007e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e82:	e00a      	b.n	8007e9a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e84:	f7fd f8dc 	bl	8005040 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e03b      	b.n	8007f12 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e9a:	4b20      	ldr	r3, [pc, #128]	@ (8007f1c <HAL_RCC_ClockConfig+0x260>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 030f 	and.w	r3, r3, #15
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d1ed      	bne.n	8007e84 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0304 	and.w	r3, r3, #4
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	4917      	ldr	r1, [pc, #92]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0308 	and.w	r3, r3, #8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d009      	beq.n	8007ee6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ed2:	4b13      	ldr	r3, [pc, #76]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	00db      	lsls	r3, r3, #3
 8007ee0:	490f      	ldr	r1, [pc, #60]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ee6:	f000 f825 	bl	8007f34 <HAL_RCC_GetSysClockFreq>
 8007eea:	4602      	mov	r2, r0
 8007eec:	4b0c      	ldr	r3, [pc, #48]	@ (8007f20 <HAL_RCC_ClockConfig+0x264>)
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	091b      	lsrs	r3, r3, #4
 8007ef2:	f003 030f 	and.w	r3, r3, #15
 8007ef6:	490c      	ldr	r1, [pc, #48]	@ (8007f28 <HAL_RCC_ClockConfig+0x26c>)
 8007ef8:	5ccb      	ldrb	r3, [r1, r3]
 8007efa:	f003 031f 	and.w	r3, r3, #31
 8007efe:	fa22 f303 	lsr.w	r3, r2, r3
 8007f02:	4a0a      	ldr	r2, [pc, #40]	@ (8007f2c <HAL_RCC_ClockConfig+0x270>)
 8007f04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007f06:	4b0a      	ldr	r3, [pc, #40]	@ (8007f30 <HAL_RCC_ClockConfig+0x274>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fd f84c 	bl	8004fa8 <HAL_InitTick>
 8007f10:	4603      	mov	r3, r0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3718      	adds	r7, #24
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	40022000 	.word	0x40022000
 8007f20:	40021000 	.word	0x40021000
 8007f24:	04c4b400 	.word	0x04c4b400
 8007f28:	0800db10 	.word	0x0800db10
 8007f2c:	2000018c 	.word	0x2000018c
 8007f30:	20000190 	.word	0x20000190

08007f34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8007fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 030c 	and.w	r3, r3, #12
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d102      	bne.n	8007f4c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007f46:	4b2a      	ldr	r3, [pc, #168]	@ (8007ff0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007f48:	613b      	str	r3, [r7, #16]
 8007f4a:	e047      	b.n	8007fdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007f4c:	4b27      	ldr	r3, [pc, #156]	@ (8007fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f003 030c 	and.w	r3, r3, #12
 8007f54:	2b08      	cmp	r3, #8
 8007f56:	d102      	bne.n	8007f5e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007f58:	4b26      	ldr	r3, [pc, #152]	@ (8007ff4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007f5a:	613b      	str	r3, [r7, #16]
 8007f5c:	e03e      	b.n	8007fdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007f5e:	4b23      	ldr	r3, [pc, #140]	@ (8007fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	f003 030c 	and.w	r3, r3, #12
 8007f66:	2b0c      	cmp	r3, #12
 8007f68:	d136      	bne.n	8007fd8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007f6a:	4b20      	ldr	r3, [pc, #128]	@ (8007fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	f003 0303 	and.w	r3, r3, #3
 8007f72:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007f74:	4b1d      	ldr	r3, [pc, #116]	@ (8007fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	091b      	lsrs	r3, r3, #4
 8007f7a:	f003 030f 	and.w	r3, r3, #15
 8007f7e:	3301      	adds	r3, #1
 8007f80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2b03      	cmp	r3, #3
 8007f86:	d10c      	bne.n	8007fa2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007f88:	4a1a      	ldr	r2, [pc, #104]	@ (8007ff4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f90:	4a16      	ldr	r2, [pc, #88]	@ (8007fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007f92:	68d2      	ldr	r2, [r2, #12]
 8007f94:	0a12      	lsrs	r2, r2, #8
 8007f96:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007f9a:	fb02 f303 	mul.w	r3, r2, r3
 8007f9e:	617b      	str	r3, [r7, #20]
      break;
 8007fa0:	e00c      	b.n	8007fbc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007fa2:	4a13      	ldr	r2, [pc, #76]	@ (8007ff0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007faa:	4a10      	ldr	r2, [pc, #64]	@ (8007fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fac:	68d2      	ldr	r2, [r2, #12]
 8007fae:	0a12      	lsrs	r2, r2, #8
 8007fb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007fb4:	fb02 f303 	mul.w	r3, r2, r3
 8007fb8:	617b      	str	r3, [r7, #20]
      break;
 8007fba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8007fec <HAL_RCC_GetSysClockFreq+0xb8>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	0e5b      	lsrs	r3, r3, #25
 8007fc2:	f003 0303 	and.w	r3, r3, #3
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	005b      	lsls	r3, r3, #1
 8007fca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	e001      	b.n	8007fdc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007fdc:	693b      	ldr	r3, [r7, #16]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr
 8007fea:	bf00      	nop
 8007fec:	40021000 	.word	0x40021000
 8007ff0:	00f42400 	.word	0x00f42400
 8007ff4:	016e3600 	.word	0x016e3600

08007ff8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ffc:	4b03      	ldr	r3, [pc, #12]	@ (800800c <HAL_RCC_GetHCLKFreq+0x14>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
}
 8008000:	4618      	mov	r0, r3
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	2000018c 	.word	0x2000018c

08008010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008014:	f7ff fff0 	bl	8007ff8 <HAL_RCC_GetHCLKFreq>
 8008018:	4602      	mov	r2, r0
 800801a:	4b06      	ldr	r3, [pc, #24]	@ (8008034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800801c:	689b      	ldr	r3, [r3, #8]
 800801e:	0a1b      	lsrs	r3, r3, #8
 8008020:	f003 0307 	and.w	r3, r3, #7
 8008024:	4904      	ldr	r1, [pc, #16]	@ (8008038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008026:	5ccb      	ldrb	r3, [r1, r3]
 8008028:	f003 031f 	and.w	r3, r3, #31
 800802c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008030:	4618      	mov	r0, r3
 8008032:	bd80      	pop	{r7, pc}
 8008034:	40021000 	.word	0x40021000
 8008038:	0800db20 	.word	0x0800db20

0800803c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008040:	f7ff ffda 	bl	8007ff8 <HAL_RCC_GetHCLKFreq>
 8008044:	4602      	mov	r2, r0
 8008046:	4b06      	ldr	r3, [pc, #24]	@ (8008060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	0adb      	lsrs	r3, r3, #11
 800804c:	f003 0307 	and.w	r3, r3, #7
 8008050:	4904      	ldr	r1, [pc, #16]	@ (8008064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008052:	5ccb      	ldrb	r3, [r1, r3]
 8008054:	f003 031f 	and.w	r3, r3, #31
 8008058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800805c:	4618      	mov	r0, r3
 800805e:	bd80      	pop	{r7, pc}
 8008060:	40021000 	.word	0x40021000
 8008064:	0800db20 	.word	0x0800db20

08008068 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800806e:	4b1e      	ldr	r3, [pc, #120]	@ (80080e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008078:	4b1b      	ldr	r3, [pc, #108]	@ (80080e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	091b      	lsrs	r3, r3, #4
 800807e:	f003 030f 	and.w	r3, r3, #15
 8008082:	3301      	adds	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b03      	cmp	r3, #3
 800808a:	d10c      	bne.n	80080a6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800808c:	4a17      	ldr	r2, [pc, #92]	@ (80080ec <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	fbb2 f3f3 	udiv	r3, r2, r3
 8008094:	4a14      	ldr	r2, [pc, #80]	@ (80080e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008096:	68d2      	ldr	r2, [r2, #12]
 8008098:	0a12      	lsrs	r2, r2, #8
 800809a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800809e:	fb02 f303 	mul.w	r3, r2, r3
 80080a2:	617b      	str	r3, [r7, #20]
    break;
 80080a4:	e00c      	b.n	80080c0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80080a6:	4a12      	ldr	r2, [pc, #72]	@ (80080f0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ae:	4a0e      	ldr	r2, [pc, #56]	@ (80080e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080b0:	68d2      	ldr	r2, [r2, #12]
 80080b2:	0a12      	lsrs	r2, r2, #8
 80080b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80080b8:	fb02 f303 	mul.w	r3, r2, r3
 80080bc:	617b      	str	r3, [r7, #20]
    break;
 80080be:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80080c0:	4b09      	ldr	r3, [pc, #36]	@ (80080e8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	0e5b      	lsrs	r3, r3, #25
 80080c6:	f003 0303 	and.w	r3, r3, #3
 80080ca:	3301      	adds	r3, #1
 80080cc:	005b      	lsls	r3, r3, #1
 80080ce:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080d8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80080da:	687b      	ldr	r3, [r7, #4]
}
 80080dc:	4618      	mov	r0, r3
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	40021000 	.word	0x40021000
 80080ec:	016e3600 	.word	0x016e3600
 80080f0:	00f42400 	.word	0x00f42400

080080f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80080fc:	2300      	movs	r3, #0
 80080fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008100:	2300      	movs	r3, #0
 8008102:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 8098 	beq.w	8008242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008112:	2300      	movs	r3, #0
 8008114:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008116:	4b43      	ldr	r3, [pc, #268]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008118:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800811a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10d      	bne.n	800813e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008122:	4b40      	ldr	r3, [pc, #256]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008126:	4a3f      	ldr	r2, [pc, #252]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008128:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800812c:	6593      	str	r3, [r2, #88]	@ 0x58
 800812e:	4b3d      	ldr	r3, [pc, #244]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008136:	60bb      	str	r3, [r7, #8]
 8008138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800813a:	2301      	movs	r3, #1
 800813c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800813e:	4b3a      	ldr	r3, [pc, #232]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a39      	ldr	r2, [pc, #228]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008144:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008148:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800814a:	f7fc ff79 	bl	8005040 <HAL_GetTick>
 800814e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008150:	e009      	b.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008152:	f7fc ff75 	bl	8005040 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d902      	bls.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	74fb      	strb	r3, [r7, #19]
        break;
 8008164:	e005      	b.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008166:	4b30      	ldr	r3, [pc, #192]	@ (8008228 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800816e:	2b00      	cmp	r3, #0
 8008170:	d0ef      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008172:	7cfb      	ldrb	r3, [r7, #19]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d159      	bne.n	800822c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008178:	4b2a      	ldr	r3, [pc, #168]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800817e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008182:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d01e      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	429a      	cmp	r2, r3
 8008192:	d019      	beq.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008194:	4b23      	ldr	r3, [pc, #140]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800819e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80081a0:	4b20      	ldr	r3, [pc, #128]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a6:	4a1f      	ldr	r2, [pc, #124]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80081ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80081b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b6:	4a1b      	ldr	r2, [pc, #108]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80081c0:	4a18      	ldr	r2, [pc, #96]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d016      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d2:	f7fc ff35 	bl	8005040 <HAL_GetTick>
 80081d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081d8:	e00b      	b.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081da:	f7fc ff31 	bl	8005040 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d902      	bls.n	80081f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	74fb      	strb	r3, [r7, #19]
            break;
 80081f0:	e006      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80081f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081f8:	f003 0302 	and.w	r3, r3, #2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d0ec      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008200:	7cfb      	ldrb	r3, [r7, #19]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d10b      	bne.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008206:	4b07      	ldr	r3, [pc, #28]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800820c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008214:	4903      	ldr	r1, [pc, #12]	@ (8008224 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008216:	4313      	orrs	r3, r2
 8008218:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800821c:	e008      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800821e:	7cfb      	ldrb	r3, [r7, #19]
 8008220:	74bb      	strb	r3, [r7, #18]
 8008222:	e005      	b.n	8008230 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008224:	40021000 	.word	0x40021000
 8008228:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800822c:	7cfb      	ldrb	r3, [r7, #19]
 800822e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008230:	7c7b      	ldrb	r3, [r7, #17]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d105      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008236:	4ba7      	ldr	r3, [pc, #668]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823a:	4aa6      	ldr	r2, [pc, #664]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800823c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008240:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800824e:	4ba1      	ldr	r3, [pc, #644]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008250:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008254:	f023 0203 	bic.w	r2, r3, #3
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	499d      	ldr	r1, [pc, #628]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800825e:	4313      	orrs	r3, r2
 8008260:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008270:	4b98      	ldr	r3, [pc, #608]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008276:	f023 020c 	bic.w	r2, r3, #12
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	689b      	ldr	r3, [r3, #8]
 800827e:	4995      	ldr	r1, [pc, #596]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008292:	4b90      	ldr	r3, [pc, #576]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008298:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	498c      	ldr	r1, [pc, #560]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0308 	and.w	r3, r3, #8
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80082b4:	4b87      	ldr	r3, [pc, #540]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082ba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	4984      	ldr	r1, [pc, #528]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0310 	and.w	r3, r3, #16
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80082d6:	4b7f      	ldr	r3, [pc, #508]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	497b      	ldr	r1, [pc, #492]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0320 	and.w	r3, r3, #32
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082f8:	4b76      	ldr	r3, [pc, #472]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	4973      	ldr	r1, [pc, #460]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008308:	4313      	orrs	r3, r2
 800830a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800831a:	4b6e      	ldr	r3, [pc, #440]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800831c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008320:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	496a      	ldr	r1, [pc, #424]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800832a:	4313      	orrs	r3, r2
 800832c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00a      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800833c:	4b65      	ldr	r3, [pc, #404]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800833e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008342:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	4962      	ldr	r1, [pc, #392]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800834c:	4313      	orrs	r3, r2
 800834e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800835e:	4b5d      	ldr	r3, [pc, #372]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008360:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008364:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800836c:	4959      	ldr	r1, [pc, #356]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800836e:	4313      	orrs	r3, r2
 8008370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008380:	4b54      	ldr	r3, [pc, #336]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008382:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008386:	f023 0203 	bic.w	r2, r3, #3
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800838e:	4951      	ldr	r1, [pc, #324]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008390:	4313      	orrs	r3, r2
 8008392:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083a2:	4b4c      	ldr	r3, [pc, #304]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083a8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b0:	4948      	ldr	r1, [pc, #288]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d015      	beq.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083c4:	4b43      	ldr	r3, [pc, #268]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d2:	4940      	ldr	r1, [pc, #256]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083e2:	d105      	bne.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083e4:	4b3b      	ldr	r3, [pc, #236]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	4a3a      	ldr	r2, [pc, #232]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083ee:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d015      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80083fc:	4b35      	ldr	r3, [pc, #212]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80083fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008402:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800840a:	4932      	ldr	r1, [pc, #200]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800840c:	4313      	orrs	r3, r2
 800840e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008416:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800841a:	d105      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800841c:	4b2d      	ldr	r3, [pc, #180]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	4a2c      	ldr	r2, [pc, #176]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008422:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008426:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d015      	beq.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008434:	4b27      	ldr	r3, [pc, #156]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800843a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008442:	4924      	ldr	r1, [pc, #144]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008444:	4313      	orrs	r3, r2
 8008446:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008452:	d105      	bne.n	8008460 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008454:	4b1f      	ldr	r3, [pc, #124]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	4a1e      	ldr	r2, [pc, #120]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800845a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800845e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008468:	2b00      	cmp	r3, #0
 800846a:	d015      	beq.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800846c:	4b19      	ldr	r3, [pc, #100]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800846e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008472:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800847a:	4916      	ldr	r1, [pc, #88]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800847c:	4313      	orrs	r3, r2
 800847e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008486:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800848a:	d105      	bne.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800848c:	4b11      	ldr	r3, [pc, #68]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	4a10      	ldr	r2, [pc, #64]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008492:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008496:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d019      	beq.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084a4:	4b0b      	ldr	r3, [pc, #44]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084b2:	4908      	ldr	r1, [pc, #32]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084b4:	4313      	orrs	r3, r2
 80084b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084c2:	d109      	bne.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80084c4:	4b03      	ldr	r3, [pc, #12]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084c6:	68db      	ldr	r3, [r3, #12]
 80084c8:	4a02      	ldr	r2, [pc, #8]	@ (80084d4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80084ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084ce:	60d3      	str	r3, [r2, #12]
 80084d0:	e002      	b.n	80084d8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80084d2:	bf00      	nop
 80084d4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d015      	beq.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80084e4:	4b29      	ldr	r3, [pc, #164]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80084e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084f2:	4926      	ldr	r1, [pc, #152]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008502:	d105      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008504:	4b21      	ldr	r3, [pc, #132]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	4a20      	ldr	r2, [pc, #128]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800850a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800850e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008518:	2b00      	cmp	r3, #0
 800851a:	d015      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800851c:	4b1b      	ldr	r3, [pc, #108]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800851e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008522:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800852a:	4918      	ldr	r1, [pc, #96]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800852c:	4313      	orrs	r3, r2
 800852e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853a:	d105      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800853c:	4b13      	ldr	r3, [pc, #76]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	4a12      	ldr	r2, [pc, #72]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008546:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d015      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008554:	4b0d      	ldr	r3, [pc, #52]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008556:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800855a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008562:	490a      	ldr	r1, [pc, #40]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008564:	4313      	orrs	r3, r2
 8008566:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800856e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008572:	d105      	bne.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008574:	4b05      	ldr	r3, [pc, #20]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	4a04      	ldr	r2, [pc, #16]	@ (800858c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800857a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800857e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008580:	7cbb      	ldrb	r3, [r7, #18]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	40021000 	.word	0x40021000

08008590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e054      	b.n	800864c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085a8:	b2db      	uxtb	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d111      	bne.n	80085d2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f001 fee2 	bl	800a380 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d102      	bne.n	80085ca <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	4a23      	ldr	r2, [pc, #140]	@ (8008654 <HAL_TIM_Base_Init+0xc4>)
 80085c8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2202      	movs	r2, #2
 80085d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	3304      	adds	r3, #4
 80085e2:	4619      	mov	r1, r3
 80085e4:	4610      	mov	r0, r2
 80085e6:	f001 fa2b 	bl	8009a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	08004869 	.word	0x08004869

08008658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008666:	b2db      	uxtb	r3, r3
 8008668:	2b01      	cmp	r3, #1
 800866a:	d001      	beq.n	8008670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e04c      	b.n	800870a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2202      	movs	r2, #2
 8008674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a26      	ldr	r2, [pc, #152]	@ (8008718 <HAL_TIM_Base_Start+0xc0>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d022      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800868a:	d01d      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a22      	ldr	r2, [pc, #136]	@ (800871c <HAL_TIM_Base_Start+0xc4>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d018      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a21      	ldr	r2, [pc, #132]	@ (8008720 <HAL_TIM_Base_Start+0xc8>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d013      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008724 <HAL_TIM_Base_Start+0xcc>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00e      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1e      	ldr	r2, [pc, #120]	@ (8008728 <HAL_TIM_Base_Start+0xd0>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d009      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1c      	ldr	r2, [pc, #112]	@ (800872c <HAL_TIM_Base_Start+0xd4>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d004      	beq.n	80086c8 <HAL_TIM_Base_Start+0x70>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008730 <HAL_TIM_Base_Start+0xd8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d115      	bne.n	80086f4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689a      	ldr	r2, [r3, #8]
 80086ce:	4b19      	ldr	r3, [pc, #100]	@ (8008734 <HAL_TIM_Base_Start+0xdc>)
 80086d0:	4013      	ands	r3, r2
 80086d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2b06      	cmp	r3, #6
 80086d8:	d015      	beq.n	8008706 <HAL_TIM_Base_Start+0xae>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086e0:	d011      	beq.n	8008706 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f042 0201 	orr.w	r2, r2, #1
 80086f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f2:	e008      	b.n	8008706 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f042 0201 	orr.w	r2, r2, #1
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	e000      	b.n	8008708 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008706:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	40012c00 	.word	0x40012c00
 800871c:	40000400 	.word	0x40000400
 8008720:	40000800 	.word	0x40000800
 8008724:	40000c00 	.word	0x40000c00
 8008728:	40013400 	.word	0x40013400
 800872c:	40014000 	.word	0x40014000
 8008730:	40015000 	.word	0x40015000
 8008734:	00010007 	.word	0x00010007

08008738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b01      	cmp	r3, #1
 800874a:	d001      	beq.n	8008750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e054      	b.n	80087fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0201 	orr.w	r2, r2, #1
 8008766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a26      	ldr	r2, [pc, #152]	@ (8008808 <HAL_TIM_Base_Start_IT+0xd0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d022      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800877a:	d01d      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a22      	ldr	r2, [pc, #136]	@ (800880c <HAL_TIM_Base_Start_IT+0xd4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d018      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a21      	ldr	r2, [pc, #132]	@ (8008810 <HAL_TIM_Base_Start_IT+0xd8>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d013      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a1f      	ldr	r2, [pc, #124]	@ (8008814 <HAL_TIM_Base_Start_IT+0xdc>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00e      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a1e      	ldr	r2, [pc, #120]	@ (8008818 <HAL_TIM_Base_Start_IT+0xe0>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d009      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a1c      	ldr	r2, [pc, #112]	@ (800881c <HAL_TIM_Base_Start_IT+0xe4>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d004      	beq.n	80087b8 <HAL_TIM_Base_Start_IT+0x80>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008820 <HAL_TIM_Base_Start_IT+0xe8>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d115      	bne.n	80087e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	689a      	ldr	r2, [r3, #8]
 80087be:	4b19      	ldr	r3, [pc, #100]	@ (8008824 <HAL_TIM_Base_Start_IT+0xec>)
 80087c0:	4013      	ands	r3, r2
 80087c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b06      	cmp	r3, #6
 80087c8:	d015      	beq.n	80087f6 <HAL_TIM_Base_Start_IT+0xbe>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087d0:	d011      	beq.n	80087f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f042 0201 	orr.w	r2, r2, #1
 80087e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e2:	e008      	b.n	80087f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f042 0201 	orr.w	r2, r2, #1
 80087f2:	601a      	str	r2, [r3, #0]
 80087f4:	e000      	b.n	80087f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	40012c00 	.word	0x40012c00
 800880c:	40000400 	.word	0x40000400
 8008810:	40000800 	.word	0x40000800
 8008814:	40000c00 	.word	0x40000c00
 8008818:	40013400 	.word	0x40013400
 800881c:	40014000 	.word	0x40014000
 8008820:	40015000 	.word	0x40015000
 8008824:	00010007 	.word	0x00010007

08008828 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d101      	bne.n	800883a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	e054      	b.n	80088e4 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008840:	b2db      	uxtb	r3, r3
 8008842:	2b00      	cmp	r3, #0
 8008844:	d111      	bne.n	800886a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2200      	movs	r2, #0
 800884a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 fd96 	bl	800a380 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a23      	ldr	r2, [pc, #140]	@ (80088ec <HAL_TIM_PWM_Init+0xc4>)
 8008860:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2202      	movs	r2, #2
 800886e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3304      	adds	r3, #4
 800887a:	4619      	mov	r1, r3
 800887c:	4610      	mov	r0, r2
 800887e:	f001 f8df 	bl	8009a40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2201      	movs	r2, #1
 8008886:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2201      	movs	r2, #1
 8008896:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2201      	movs	r2, #1
 80088a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2201      	movs	r2, #1
 80088ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2201      	movs	r2, #1
 80088c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2201      	movs	r2, #1
 80088de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80088e2:	2300      	movs	r3, #0
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3708      	adds	r7, #8
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	0800481d 	.word	0x0800481d

080088f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b084      	sub	sp, #16
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
 80088f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d109      	bne.n	8008914 <HAL_TIM_PWM_Start+0x24>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b01      	cmp	r3, #1
 800890a:	bf14      	ite	ne
 800890c:	2301      	movne	r3, #1
 800890e:	2300      	moveq	r3, #0
 8008910:	b2db      	uxtb	r3, r3
 8008912:	e03c      	b.n	800898e <HAL_TIM_PWM_Start+0x9e>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b04      	cmp	r3, #4
 8008918:	d109      	bne.n	800892e <HAL_TIM_PWM_Start+0x3e>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b01      	cmp	r3, #1
 8008924:	bf14      	ite	ne
 8008926:	2301      	movne	r3, #1
 8008928:	2300      	moveq	r3, #0
 800892a:	b2db      	uxtb	r3, r3
 800892c:	e02f      	b.n	800898e <HAL_TIM_PWM_Start+0x9e>
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b08      	cmp	r3, #8
 8008932:	d109      	bne.n	8008948 <HAL_TIM_PWM_Start+0x58>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b01      	cmp	r3, #1
 800893e:	bf14      	ite	ne
 8008940:	2301      	movne	r3, #1
 8008942:	2300      	moveq	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	e022      	b.n	800898e <HAL_TIM_PWM_Start+0x9e>
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b0c      	cmp	r3, #12
 800894c:	d109      	bne.n	8008962 <HAL_TIM_PWM_Start+0x72>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008954:	b2db      	uxtb	r3, r3
 8008956:	2b01      	cmp	r3, #1
 8008958:	bf14      	ite	ne
 800895a:	2301      	movne	r3, #1
 800895c:	2300      	moveq	r3, #0
 800895e:	b2db      	uxtb	r3, r3
 8008960:	e015      	b.n	800898e <HAL_TIM_PWM_Start+0x9e>
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b10      	cmp	r3, #16
 8008966:	d109      	bne.n	800897c <HAL_TIM_PWM_Start+0x8c>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b01      	cmp	r3, #1
 8008972:	bf14      	ite	ne
 8008974:	2301      	movne	r3, #1
 8008976:	2300      	moveq	r3, #0
 8008978:	b2db      	uxtb	r3, r3
 800897a:	e008      	b.n	800898e <HAL_TIM_PWM_Start+0x9e>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	bf14      	ite	ne
 8008988:	2301      	movne	r3, #1
 800898a:	2300      	moveq	r3, #0
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e0a6      	b.n	8008ae4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d104      	bne.n	80089a6 <HAL_TIM_PWM_Start+0xb6>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2202      	movs	r2, #2
 80089a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089a4:	e023      	b.n	80089ee <HAL_TIM_PWM_Start+0xfe>
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	2b04      	cmp	r3, #4
 80089aa:	d104      	bne.n	80089b6 <HAL_TIM_PWM_Start+0xc6>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089b4:	e01b      	b.n	80089ee <HAL_TIM_PWM_Start+0xfe>
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b08      	cmp	r3, #8
 80089ba:	d104      	bne.n	80089c6 <HAL_TIM_PWM_Start+0xd6>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2202      	movs	r2, #2
 80089c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089c4:	e013      	b.n	80089ee <HAL_TIM_PWM_Start+0xfe>
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b0c      	cmp	r3, #12
 80089ca:	d104      	bne.n	80089d6 <HAL_TIM_PWM_Start+0xe6>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2202      	movs	r2, #2
 80089d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80089d4:	e00b      	b.n	80089ee <HAL_TIM_PWM_Start+0xfe>
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	2b10      	cmp	r3, #16
 80089da:	d104      	bne.n	80089e6 <HAL_TIM_PWM_Start+0xf6>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2202      	movs	r2, #2
 80089e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089e4:	e003      	b.n	80089ee <HAL_TIM_PWM_Start+0xfe>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2202      	movs	r2, #2
 80089ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2201      	movs	r2, #1
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f001 fc9c 	bl	800a334 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a3a      	ldr	r2, [pc, #232]	@ (8008aec <HAL_TIM_PWM_Start+0x1fc>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d018      	beq.n	8008a38 <HAL_TIM_PWM_Start+0x148>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a39      	ldr	r2, [pc, #228]	@ (8008af0 <HAL_TIM_PWM_Start+0x200>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d013      	beq.n	8008a38 <HAL_TIM_PWM_Start+0x148>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a37      	ldr	r2, [pc, #220]	@ (8008af4 <HAL_TIM_PWM_Start+0x204>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d00e      	beq.n	8008a38 <HAL_TIM_PWM_Start+0x148>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a36      	ldr	r2, [pc, #216]	@ (8008af8 <HAL_TIM_PWM_Start+0x208>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d009      	beq.n	8008a38 <HAL_TIM_PWM_Start+0x148>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a34      	ldr	r2, [pc, #208]	@ (8008afc <HAL_TIM_PWM_Start+0x20c>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d004      	beq.n	8008a38 <HAL_TIM_PWM_Start+0x148>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a33      	ldr	r2, [pc, #204]	@ (8008b00 <HAL_TIM_PWM_Start+0x210>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d101      	bne.n	8008a3c <HAL_TIM_PWM_Start+0x14c>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e000      	b.n	8008a3e <HAL_TIM_PWM_Start+0x14e>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d007      	beq.n	8008a52 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008a50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a25      	ldr	r2, [pc, #148]	@ (8008aec <HAL_TIM_PWM_Start+0x1fc>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d022      	beq.n	8008aa2 <HAL_TIM_PWM_Start+0x1b2>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a64:	d01d      	beq.n	8008aa2 <HAL_TIM_PWM_Start+0x1b2>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a26      	ldr	r2, [pc, #152]	@ (8008b04 <HAL_TIM_PWM_Start+0x214>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d018      	beq.n	8008aa2 <HAL_TIM_PWM_Start+0x1b2>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a24      	ldr	r2, [pc, #144]	@ (8008b08 <HAL_TIM_PWM_Start+0x218>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d013      	beq.n	8008aa2 <HAL_TIM_PWM_Start+0x1b2>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a23      	ldr	r2, [pc, #140]	@ (8008b0c <HAL_TIM_PWM_Start+0x21c>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d00e      	beq.n	8008aa2 <HAL_TIM_PWM_Start+0x1b2>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a19      	ldr	r2, [pc, #100]	@ (8008af0 <HAL_TIM_PWM_Start+0x200>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d009      	beq.n	8008aa2 <HAL_TIM_PWM_Start+0x1b2>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a18      	ldr	r2, [pc, #96]	@ (8008af4 <HAL_TIM_PWM_Start+0x204>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d004      	beq.n	8008aa2 <HAL_TIM_PWM_Start+0x1b2>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a18      	ldr	r2, [pc, #96]	@ (8008b00 <HAL_TIM_PWM_Start+0x210>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d115      	bne.n	8008ace <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	689a      	ldr	r2, [r3, #8]
 8008aa8:	4b19      	ldr	r3, [pc, #100]	@ (8008b10 <HAL_TIM_PWM_Start+0x220>)
 8008aaa:	4013      	ands	r3, r2
 8008aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2b06      	cmp	r3, #6
 8008ab2:	d015      	beq.n	8008ae0 <HAL_TIM_PWM_Start+0x1f0>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aba:	d011      	beq.n	8008ae0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0201 	orr.w	r2, r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008acc:	e008      	b.n	8008ae0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f042 0201 	orr.w	r2, r2, #1
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	e000      	b.n	8008ae2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ae0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ae2:	2300      	movs	r3, #0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}
 8008aec:	40012c00 	.word	0x40012c00
 8008af0:	40013400 	.word	0x40013400
 8008af4:	40014000 	.word	0x40014000
 8008af8:	40014400 	.word	0x40014400
 8008afc:	40014800 	.word	0x40014800
 8008b00:	40015000 	.word	0x40015000
 8008b04:	40000400 	.word	0x40000400
 8008b08:	40000800 	.word	0x40000800
 8008b0c:	40000c00 	.word	0x40000c00
 8008b10:	00010007 	.word	0x00010007

08008b14 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
 8008b1c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e04c      	b.n	8008bc2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d111      	bne.n	8008b58 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 fc1f 	bl	800a380 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a1f      	ldr	r2, [pc, #124]	@ (8008bcc <HAL_TIM_OnePulse_Init+0xb8>)
 8008b4e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2202      	movs	r2, #2
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3304      	adds	r3, #4
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	f000 ff68 	bl	8009a40 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f022 0208 	bic.w	r2, r2, #8
 8008b7e:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6819      	ldr	r1, [r3, #0]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	08008bd1 	.word	0x08008bd1

08008bd0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008bf4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008bfc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c0c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d108      	bne.n	8008c26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d105      	bne.n	8008c26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008c1a:	7b7b      	ldrb	r3, [r7, #13]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d102      	bne.n	8008c26 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008c20:	7b3b      	ldrb	r3, [r7, #12]
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d001      	beq.n	8008c2a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e059      	b.n	8008cde <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2202      	movs	r2, #2
 8008c36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2202      	movs	r2, #2
 8008c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68da      	ldr	r2, [r3, #12]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f042 0202 	orr.w	r2, r2, #2
 8008c58:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f042 0204 	orr.w	r2, r2, #4
 8008c68:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	2100      	movs	r1, #0
 8008c72:	4618      	mov	r0, r3
 8008c74:	f001 fb5e 	bl	800a334 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	2104      	movs	r1, #4
 8008c80:	4618      	mov	r0, r3
 8008c82:	f001 fb57 	bl	800a334 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a17      	ldr	r2, [pc, #92]	@ (8008ce8 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d018      	beq.n	8008cc2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a15      	ldr	r2, [pc, #84]	@ (8008cec <HAL_TIM_OnePulse_Start_IT+0x108>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d013      	beq.n	8008cc2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a14      	ldr	r2, [pc, #80]	@ (8008cf0 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d00e      	beq.n	8008cc2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a12      	ldr	r2, [pc, #72]	@ (8008cf4 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d009      	beq.n	8008cc2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a11      	ldr	r2, [pc, #68]	@ (8008cf8 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d004      	beq.n	8008cc2 <HAL_TIM_OnePulse_Start_IT+0xde>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4a0f      	ldr	r2, [pc, #60]	@ (8008cfc <HAL_TIM_OnePulse_Start_IT+0x118>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d101      	bne.n	8008cc6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e000      	b.n	8008cc8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d007      	beq.n	8008cdc <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cda:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	40012c00 	.word	0x40012c00
 8008cec:	40013400 	.word	0x40013400
 8008cf0:	40014000 	.word	0x40014000
 8008cf4:	40014400 	.word	0x40014400
 8008cf8:	40014800 	.word	0x40014800
 8008cfc:	40015000 	.word	0x40015000

08008d00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d101      	bne.n	8008d14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008d10:	2301      	movs	r3, #1
 8008d12:	e0a2      	b.n	8008e5a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d1a:	b2db      	uxtb	r3, r3
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d111      	bne.n	8008d44 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f001 fb29 	bl	800a380 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d102      	bne.n	8008d3c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4a4a      	ldr	r2, [pc, #296]	@ (8008e64 <HAL_TIM_Encoder_Init+0x164>)
 8008d3a:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2202      	movs	r2, #2
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	689b      	ldr	r3, [r3, #8]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	6812      	ldr	r2, [r2, #0]
 8008d56:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8008d5a:	f023 0307 	bic.w	r3, r3, #7
 8008d5e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	3304      	adds	r3, #4
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4610      	mov	r0, r2
 8008d6c:	f000 fe68 	bl	8009a40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	699b      	ldr	r3, [r3, #24]
 8008d7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d98:	f023 0303 	bic.w	r3, r3, #3
 8008d9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	021b      	lsls	r3, r3, #8
 8008da8:	4313      	orrs	r3, r2
 8008daa:	693a      	ldr	r2, [r7, #16]
 8008dac:	4313      	orrs	r3, r2
 8008dae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8008db6:	f023 030c 	bic.w	r3, r3, #12
 8008dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	68da      	ldr	r2, [r3, #12]
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	011a      	lsls	r2, r3, #4
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	031b      	lsls	r3, r3, #12
 8008de6:	4313      	orrs	r3, r2
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008df4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008dfc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685a      	ldr	r2, [r3, #4]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	011b      	lsls	r3, r3, #4
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2201      	movs	r2, #1
 8008e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2201      	movs	r2, #1
 8008e44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3718      	adds	r7, #24
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	08004939 	.word	0x08004939

08008e68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008e88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d110      	bne.n	8008eba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e98:	7bfb      	ldrb	r3, [r7, #15]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d102      	bne.n	8008ea4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e9e:	7b7b      	ldrb	r3, [r7, #13]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d001      	beq.n	8008ea8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e069      	b.n	8008f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008eb8:	e031      	b.n	8008f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d110      	bne.n	8008ee2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ec0:	7bbb      	ldrb	r3, [r7, #14]
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d102      	bne.n	8008ecc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ec6:	7b3b      	ldrb	r3, [r7, #12]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d001      	beq.n	8008ed0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e055      	b.n	8008f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ee0:	e01d      	b.n	8008f1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d108      	bne.n	8008efa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ee8:	7bbb      	ldrb	r3, [r7, #14]
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d105      	bne.n	8008efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008eee:	7b7b      	ldrb	r3, [r7, #13]
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d102      	bne.n	8008efa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ef4:	7b3b      	ldrb	r3, [r7, #12]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d001      	beq.n	8008efe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008efa:	2301      	movs	r3, #1
 8008efc:	e03e      	b.n	8008f7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2202      	movs	r2, #2
 8008f02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2202      	movs	r2, #2
 8008f0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2202      	movs	r2, #2
 8008f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2202      	movs	r2, #2
 8008f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <HAL_TIM_Encoder_Start+0xc4>
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	d008      	beq.n	8008f3c <HAL_TIM_Encoder_Start+0xd4>
 8008f2a:	e00f      	b.n	8008f4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2201      	movs	r2, #1
 8008f32:	2100      	movs	r1, #0
 8008f34:	4618      	mov	r0, r3
 8008f36:	f001 f9fd 	bl	800a334 <TIM_CCxChannelCmd>
      break;
 8008f3a:	e016      	b.n	8008f6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2201      	movs	r2, #1
 8008f42:	2104      	movs	r1, #4
 8008f44:	4618      	mov	r0, r3
 8008f46:	f001 f9f5 	bl	800a334 <TIM_CCxChannelCmd>
      break;
 8008f4a:	e00e      	b.n	8008f6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2201      	movs	r2, #1
 8008f52:	2100      	movs	r1, #0
 8008f54:	4618      	mov	r0, r3
 8008f56:	f001 f9ed 	bl	800a334 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	2104      	movs	r1, #4
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 f9e6 	bl	800a334 <TIM_CCxChannelCmd>
      break;
 8008f68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f042 0201 	orr.w	r2, r2, #1
 8008f78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	68db      	ldr	r3, [r3, #12]
 8008f92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	f003 0302 	and.w	r3, r3, #2
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d026      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d021      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f06f 0202 	mvn.w	r2, #2
 8008fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	f003 0303 	and.w	r3, r3, #3
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d005      	beq.n	8008fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	4798      	blx	r3
 8008fd8:	e009      	b.n	8008fee <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f003 0304 	and.w	r3, r3, #4
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d026      	beq.n	800904c <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f003 0304 	and.w	r3, r3, #4
 8009004:	2b00      	cmp	r3, #0
 8009006:	d021      	beq.n	800904c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f06f 0204 	mvn.w	r2, #4
 8009010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2202      	movs	r2, #2
 8009016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009022:	2b00      	cmp	r3, #0
 8009024:	d005      	beq.n	8009032 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	4798      	blx	r3
 8009030:	e009      	b.n	8009046 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f003 0308 	and.w	r3, r3, #8
 8009052:	2b00      	cmp	r3, #0
 8009054:	d026      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f003 0308 	and.w	r3, r3, #8
 800905c:	2b00      	cmp	r3, #0
 800905e:	d021      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f06f 0208 	mvn.w	r2, #8
 8009068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2204      	movs	r2, #4
 800906e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	f003 0303 	and.w	r3, r3, #3
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	4798      	blx	r3
 8009088:	e009      	b.n	800909e <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 0310 	and.w	r3, r3, #16
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d026      	beq.n	80090fc <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d021      	beq.n	80090fc <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0210 	mvn.w	r2, #16
 80090c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2208      	movs	r2, #8
 80090c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	4798      	blx	r3
 80090e0:	e009      	b.n	80090f6 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2200      	movs	r2, #0
 80090fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00e      	beq.n	8009124 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f003 0301 	and.w	r3, r3, #1
 800910c:	2b00      	cmp	r3, #0
 800910e:	d009      	beq.n	8009124 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f06f 0201 	mvn.w	r2, #1
 8009118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800912a:	2b00      	cmp	r3, #0
 800912c:	d104      	bne.n	8009138 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00e      	beq.n	8009156 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800913e:	2b00      	cmp	r3, #0
 8009140:	d009      	beq.n	8009156 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800914a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800915c:	2b00      	cmp	r3, #0
 800915e:	d00e      	beq.n	800917e <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009166:	2b00      	cmp	r3, #0
 8009168:	d009      	beq.n	800917e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00e      	beq.n	80091a6 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800918e:	2b00      	cmp	r3, #0
 8009190:	d009      	beq.n	80091a6 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800919a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00e      	beq.n	80091ce <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f003 0320 	and.w	r3, r3, #32
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d009      	beq.n	80091ce <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f06f 0220 	mvn.w	r2, #32
 80091c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d00e      	beq.n	80091f6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d009      	beq.n	80091f6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80091ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00e      	beq.n	800921e <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d009      	beq.n	800921e <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00e      	beq.n	8009246 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d009      	beq.n	8009246 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800923a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d00e      	beq.n	800926e <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d009      	beq.n	800926e <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	60b9      	str	r1, [r7, #8]
 8009282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800928e:	2b01      	cmp	r3, #1
 8009290:	d101      	bne.n	8009296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009292:	2302      	movs	r3, #2
 8009294:	e0ff      	b.n	8009496 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2b14      	cmp	r3, #20
 80092a2:	f200 80f0 	bhi.w	8009486 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80092a6:	a201      	add	r2, pc, #4	@ (adr r2, 80092ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	08009301 	.word	0x08009301
 80092b0:	08009487 	.word	0x08009487
 80092b4:	08009487 	.word	0x08009487
 80092b8:	08009487 	.word	0x08009487
 80092bc:	08009341 	.word	0x08009341
 80092c0:	08009487 	.word	0x08009487
 80092c4:	08009487 	.word	0x08009487
 80092c8:	08009487 	.word	0x08009487
 80092cc:	08009383 	.word	0x08009383
 80092d0:	08009487 	.word	0x08009487
 80092d4:	08009487 	.word	0x08009487
 80092d8:	08009487 	.word	0x08009487
 80092dc:	080093c3 	.word	0x080093c3
 80092e0:	08009487 	.word	0x08009487
 80092e4:	08009487 	.word	0x08009487
 80092e8:	08009487 	.word	0x08009487
 80092ec:	08009405 	.word	0x08009405
 80092f0:	08009487 	.word	0x08009487
 80092f4:	08009487 	.word	0x08009487
 80092f8:	08009487 	.word	0x08009487
 80092fc:	08009445 	.word	0x08009445
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68b9      	ldr	r1, [r7, #8]
 8009306:	4618      	mov	r0, r3
 8009308:	f000 fc4e 	bl	8009ba8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	699a      	ldr	r2, [r3, #24]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f042 0208 	orr.w	r2, r2, #8
 800931a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	699a      	ldr	r2, [r3, #24]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f022 0204 	bic.w	r2, r2, #4
 800932a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	6999      	ldr	r1, [r3, #24]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	691a      	ldr	r2, [r3, #16]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	430a      	orrs	r2, r1
 800933c:	619a      	str	r2, [r3, #24]
      break;
 800933e:	e0a5      	b.n	800948c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	68b9      	ldr	r1, [r7, #8]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 fcc8 	bl	8009cdc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	699a      	ldr	r2, [r3, #24]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800935a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	699a      	ldr	r2, [r3, #24]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800936a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6999      	ldr	r1, [r3, #24]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	021a      	lsls	r2, r3, #8
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	430a      	orrs	r2, r1
 800937e:	619a      	str	r2, [r3, #24]
      break;
 8009380:	e084      	b.n	800948c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	68b9      	ldr	r1, [r7, #8]
 8009388:	4618      	mov	r0, r3
 800938a:	f000 fd3b 	bl	8009e04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	69da      	ldr	r2, [r3, #28]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f042 0208 	orr.w	r2, r2, #8
 800939c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	69da      	ldr	r2, [r3, #28]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f022 0204 	bic.w	r2, r2, #4
 80093ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	69d9      	ldr	r1, [r3, #28]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	691a      	ldr	r2, [r3, #16]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	430a      	orrs	r2, r1
 80093be:	61da      	str	r2, [r3, #28]
      break;
 80093c0:	e064      	b.n	800948c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	68b9      	ldr	r1, [r7, #8]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fdad 	bl	8009f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	69da      	ldr	r2, [r3, #28]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80093dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	69da      	ldr	r2, [r3, #28]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	69d9      	ldr	r1, [r3, #28]
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	021a      	lsls	r2, r3, #8
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	430a      	orrs	r2, r1
 8009400:	61da      	str	r2, [r3, #28]
      break;
 8009402:	e043      	b.n	800948c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	68b9      	ldr	r1, [r7, #8]
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fe20 	bl	800a050 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0208 	orr.w	r2, r2, #8
 800941e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0204 	bic.w	r2, r2, #4
 800942e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	430a      	orrs	r2, r1
 8009440:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009442:	e023      	b.n	800948c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68b9      	ldr	r1, [r7, #8]
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fe6a 	bl	800a124 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800945e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800946e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	021a      	lsls	r2, r3, #8
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	430a      	orrs	r2, r1
 8009482:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009484:	e002      	b.n	800948c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	75fb      	strb	r3, [r7, #23]
      break;
 800948a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009494:	7dfb      	ldrb	r3, [r7, #23]
}
 8009496:	4618      	mov	r0, r3
 8009498:	3718      	adds	r7, #24
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop

080094a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80094aa:	2300      	movs	r3, #0
 80094ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d101      	bne.n	80094bc <HAL_TIM_ConfigClockSource+0x1c>
 80094b8:	2302      	movs	r3, #2
 80094ba:	e0f6      	b.n	80096aa <HAL_TIM_ConfigClockSource+0x20a>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2201      	movs	r2, #1
 80094c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2202      	movs	r2, #2
 80094c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	689b      	ldr	r3, [r3, #8]
 80094d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80094da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80094de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80094e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68ba      	ldr	r2, [r7, #8]
 80094ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	4a6f      	ldr	r2, [pc, #444]	@ (80096b4 <HAL_TIM_ConfigClockSource+0x214>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	f000 80c1 	beq.w	800967e <HAL_TIM_ConfigClockSource+0x1de>
 80094fc:	4a6d      	ldr	r2, [pc, #436]	@ (80096b4 <HAL_TIM_ConfigClockSource+0x214>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	f200 80c6 	bhi.w	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 8009504:	4a6c      	ldr	r2, [pc, #432]	@ (80096b8 <HAL_TIM_ConfigClockSource+0x218>)
 8009506:	4293      	cmp	r3, r2
 8009508:	f000 80b9 	beq.w	800967e <HAL_TIM_ConfigClockSource+0x1de>
 800950c:	4a6a      	ldr	r2, [pc, #424]	@ (80096b8 <HAL_TIM_ConfigClockSource+0x218>)
 800950e:	4293      	cmp	r3, r2
 8009510:	f200 80be 	bhi.w	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 8009514:	4a69      	ldr	r2, [pc, #420]	@ (80096bc <HAL_TIM_ConfigClockSource+0x21c>)
 8009516:	4293      	cmp	r3, r2
 8009518:	f000 80b1 	beq.w	800967e <HAL_TIM_ConfigClockSource+0x1de>
 800951c:	4a67      	ldr	r2, [pc, #412]	@ (80096bc <HAL_TIM_ConfigClockSource+0x21c>)
 800951e:	4293      	cmp	r3, r2
 8009520:	f200 80b6 	bhi.w	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 8009524:	4a66      	ldr	r2, [pc, #408]	@ (80096c0 <HAL_TIM_ConfigClockSource+0x220>)
 8009526:	4293      	cmp	r3, r2
 8009528:	f000 80a9 	beq.w	800967e <HAL_TIM_ConfigClockSource+0x1de>
 800952c:	4a64      	ldr	r2, [pc, #400]	@ (80096c0 <HAL_TIM_ConfigClockSource+0x220>)
 800952e:	4293      	cmp	r3, r2
 8009530:	f200 80ae 	bhi.w	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 8009534:	4a63      	ldr	r2, [pc, #396]	@ (80096c4 <HAL_TIM_ConfigClockSource+0x224>)
 8009536:	4293      	cmp	r3, r2
 8009538:	f000 80a1 	beq.w	800967e <HAL_TIM_ConfigClockSource+0x1de>
 800953c:	4a61      	ldr	r2, [pc, #388]	@ (80096c4 <HAL_TIM_ConfigClockSource+0x224>)
 800953e:	4293      	cmp	r3, r2
 8009540:	f200 80a6 	bhi.w	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 8009544:	4a60      	ldr	r2, [pc, #384]	@ (80096c8 <HAL_TIM_ConfigClockSource+0x228>)
 8009546:	4293      	cmp	r3, r2
 8009548:	f000 8099 	beq.w	800967e <HAL_TIM_ConfigClockSource+0x1de>
 800954c:	4a5e      	ldr	r2, [pc, #376]	@ (80096c8 <HAL_TIM_ConfigClockSource+0x228>)
 800954e:	4293      	cmp	r3, r2
 8009550:	f200 809e 	bhi.w	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 8009554:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009558:	f000 8091 	beq.w	800967e <HAL_TIM_ConfigClockSource+0x1de>
 800955c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009560:	f200 8096 	bhi.w	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 8009564:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009568:	f000 8089 	beq.w	800967e <HAL_TIM_ConfigClockSource+0x1de>
 800956c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009570:	f200 808e 	bhi.w	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 8009574:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009578:	d03e      	beq.n	80095f8 <HAL_TIM_ConfigClockSource+0x158>
 800957a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800957e:	f200 8087 	bhi.w	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 8009582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009586:	f000 8086 	beq.w	8009696 <HAL_TIM_ConfigClockSource+0x1f6>
 800958a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800958e:	d87f      	bhi.n	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 8009590:	2b70      	cmp	r3, #112	@ 0x70
 8009592:	d01a      	beq.n	80095ca <HAL_TIM_ConfigClockSource+0x12a>
 8009594:	2b70      	cmp	r3, #112	@ 0x70
 8009596:	d87b      	bhi.n	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 8009598:	2b60      	cmp	r3, #96	@ 0x60
 800959a:	d050      	beq.n	800963e <HAL_TIM_ConfigClockSource+0x19e>
 800959c:	2b60      	cmp	r3, #96	@ 0x60
 800959e:	d877      	bhi.n	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 80095a0:	2b50      	cmp	r3, #80	@ 0x50
 80095a2:	d03c      	beq.n	800961e <HAL_TIM_ConfigClockSource+0x17e>
 80095a4:	2b50      	cmp	r3, #80	@ 0x50
 80095a6:	d873      	bhi.n	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 80095a8:	2b40      	cmp	r3, #64	@ 0x40
 80095aa:	d058      	beq.n	800965e <HAL_TIM_ConfigClockSource+0x1be>
 80095ac:	2b40      	cmp	r3, #64	@ 0x40
 80095ae:	d86f      	bhi.n	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 80095b0:	2b30      	cmp	r3, #48	@ 0x30
 80095b2:	d064      	beq.n	800967e <HAL_TIM_ConfigClockSource+0x1de>
 80095b4:	2b30      	cmp	r3, #48	@ 0x30
 80095b6:	d86b      	bhi.n	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 80095b8:	2b20      	cmp	r3, #32
 80095ba:	d060      	beq.n	800967e <HAL_TIM_ConfigClockSource+0x1de>
 80095bc:	2b20      	cmp	r3, #32
 80095be:	d867      	bhi.n	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d05c      	beq.n	800967e <HAL_TIM_ConfigClockSource+0x1de>
 80095c4:	2b10      	cmp	r3, #16
 80095c6:	d05a      	beq.n	800967e <HAL_TIM_ConfigClockSource+0x1de>
 80095c8:	e062      	b.n	8009690 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80095da:	f000 fe8b 	bl	800a2f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	689b      	ldr	r3, [r3, #8]
 80095e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80095ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	609a      	str	r2, [r3, #8]
      break;
 80095f6:	e04f      	b.n	8009698 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009608:	f000 fe74 	bl	800a2f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	689a      	ldr	r2, [r3, #8]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800961a:	609a      	str	r2, [r3, #8]
      break;
 800961c:	e03c      	b.n	8009698 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800962a:	461a      	mov	r2, r3
 800962c:	f000 fde6 	bl	800a1fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2150      	movs	r1, #80	@ 0x50
 8009636:	4618      	mov	r0, r3
 8009638:	f000 fe3f 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 800963c:	e02c      	b.n	8009698 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800964a:	461a      	mov	r2, r3
 800964c:	f000 fe05 	bl	800a25a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2160      	movs	r1, #96	@ 0x60
 8009656:	4618      	mov	r0, r3
 8009658:	f000 fe2f 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 800965c:	e01c      	b.n	8009698 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800966a:	461a      	mov	r2, r3
 800966c:	f000 fdc6 	bl	800a1fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	2140      	movs	r1, #64	@ 0x40
 8009676:	4618      	mov	r0, r3
 8009678:	f000 fe1f 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 800967c:	e00c      	b.n	8009698 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4619      	mov	r1, r3
 8009688:	4610      	mov	r0, r2
 800968a:	f000 fe16 	bl	800a2ba <TIM_ITRx_SetConfig>
      break;
 800968e:	e003      	b.n	8009698 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	73fb      	strb	r3, [r7, #15]
      break;
 8009694:	e000      	b.n	8009698 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009696:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80096a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	00100070 	.word	0x00100070
 80096b8:	00100060 	.word	0x00100060
 80096bc:	00100050 	.word	0x00100050
 80096c0:	00100040 	.word	0x00100040
 80096c4:	00100030 	.word	0x00100030
 80096c8:	00100020 	.word	0x00100020

080096cc <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	460b      	mov	r3, r1
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e14a      	b.n	8009a32 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	f040 80dd 	bne.w	8009964 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80097aa:	7afb      	ldrb	r3, [r7, #11]
 80097ac:	2b1f      	cmp	r3, #31
 80097ae:	f200 80d6 	bhi.w	800995e <HAL_TIM_RegisterCallback+0x1de>
 80097b2:	a201      	add	r2, pc, #4	@ (adr r2, 80097b8 <HAL_TIM_RegisterCallback+0x38>)
 80097b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b8:	08009839 	.word	0x08009839
 80097bc:	08009841 	.word	0x08009841
 80097c0:	08009849 	.word	0x08009849
 80097c4:	08009851 	.word	0x08009851
 80097c8:	08009859 	.word	0x08009859
 80097cc:	08009861 	.word	0x08009861
 80097d0:	08009869 	.word	0x08009869
 80097d4:	08009871 	.word	0x08009871
 80097d8:	08009879 	.word	0x08009879
 80097dc:	08009881 	.word	0x08009881
 80097e0:	08009889 	.word	0x08009889
 80097e4:	08009891 	.word	0x08009891
 80097e8:	08009899 	.word	0x08009899
 80097ec:	080098a1 	.word	0x080098a1
 80097f0:	080098ab 	.word	0x080098ab
 80097f4:	080098b5 	.word	0x080098b5
 80097f8:	080098bf 	.word	0x080098bf
 80097fc:	080098c9 	.word	0x080098c9
 8009800:	080098d3 	.word	0x080098d3
 8009804:	080098dd 	.word	0x080098dd
 8009808:	080098e7 	.word	0x080098e7
 800980c:	080098f1 	.word	0x080098f1
 8009810:	080098fb 	.word	0x080098fb
 8009814:	08009905 	.word	0x08009905
 8009818:	0800990f 	.word	0x0800990f
 800981c:	08009919 	.word	0x08009919
 8009820:	08009923 	.word	0x08009923
 8009824:	0800992d 	.word	0x0800992d
 8009828:	08009937 	.word	0x08009937
 800982c:	08009941 	.word	0x08009941
 8009830:	0800994b 	.word	0x0800994b
 8009834:	08009955 	.word	0x08009955
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800983e:	e0f7      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8009846:	e0f3      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800984e:	e0ef      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8009856:	e0eb      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800985e:	e0e7      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009866:	e0e3      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800986e:	e0df      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8009876:	e0db      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800987e:	e0d7      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009886:	e0d3      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800988e:	e0cf      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009896:	e0cb      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800989e:	e0c7      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80098a8:	e0c2      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80098b2:	e0bd      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80098bc:	e0b8      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80098c6:	e0b3      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80098d0:	e0ae      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80098da:	e0a9      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	687a      	ldr	r2, [r7, #4]
 80098e0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80098e4:	e0a4      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80098ee:	e09f      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80098f8:	e09a      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8009902:	e095      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800990c:	e090      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8009916:	e08b      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8009920:	e086      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800992a:	e081      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	687a      	ldr	r2, [r7, #4]
 8009930:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009934:	e07c      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800993e:	e077      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8009948:	e072      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009952:	e06d      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800995c:	e068      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800995e:	2301      	movs	r3, #1
 8009960:	75fb      	strb	r3, [r7, #23]
        break;
 8009962:	e065      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800996a:	b2db      	uxtb	r3, r3
 800996c:	2b00      	cmp	r3, #0
 800996e:	d15d      	bne.n	8009a2c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8009970:	7afb      	ldrb	r3, [r7, #11]
 8009972:	2b0d      	cmp	r3, #13
 8009974:	d857      	bhi.n	8009a26 <HAL_TIM_RegisterCallback+0x2a6>
 8009976:	a201      	add	r2, pc, #4	@ (adr r2, 800997c <HAL_TIM_RegisterCallback+0x1fc>)
 8009978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800997c:	080099b5 	.word	0x080099b5
 8009980:	080099bd 	.word	0x080099bd
 8009984:	080099c5 	.word	0x080099c5
 8009988:	080099cd 	.word	0x080099cd
 800998c:	080099d5 	.word	0x080099d5
 8009990:	080099dd 	.word	0x080099dd
 8009994:	080099e5 	.word	0x080099e5
 8009998:	080099ed 	.word	0x080099ed
 800999c:	080099f5 	.word	0x080099f5
 80099a0:	080099fd 	.word	0x080099fd
 80099a4:	08009a05 	.word	0x08009a05
 80099a8:	08009a0d 	.word	0x08009a0d
 80099ac:	08009a15 	.word	0x08009a15
 80099b0:	08009a1d 	.word	0x08009a1d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80099ba:	e039      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80099c2:	e035      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80099ca:	e031      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80099d2:	e02d      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80099da:	e029      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80099e2:	e025      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80099ea:	e021      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80099f2:	e01d      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80099fa:	e019      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8009a02:	e015      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8009a0a:	e011      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8009a12:	e00d      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8009a1a:	e009      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8009a24:	e004      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	75fb      	strb	r3, [r7, #23]
        break;
 8009a2a:	e001      	b.n	8009a30 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	371c      	adds	r7, #28
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr
 8009a3e:	bf00      	nop

08009a40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a4c      	ldr	r2, [pc, #304]	@ (8009b84 <TIM_Base_SetConfig+0x144>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d017      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a5e:	d013      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a49      	ldr	r2, [pc, #292]	@ (8009b88 <TIM_Base_SetConfig+0x148>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d00f      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4a48      	ldr	r2, [pc, #288]	@ (8009b8c <TIM_Base_SetConfig+0x14c>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d00b      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	4a47      	ldr	r2, [pc, #284]	@ (8009b90 <TIM_Base_SetConfig+0x150>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d007      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	4a46      	ldr	r2, [pc, #280]	@ (8009b94 <TIM_Base_SetConfig+0x154>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d003      	beq.n	8009a88 <TIM_Base_SetConfig+0x48>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4a45      	ldr	r2, [pc, #276]	@ (8009b98 <TIM_Base_SetConfig+0x158>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d108      	bne.n	8009a9a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a39      	ldr	r2, [pc, #228]	@ (8009b84 <TIM_Base_SetConfig+0x144>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d023      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aa8:	d01f      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	4a36      	ldr	r2, [pc, #216]	@ (8009b88 <TIM_Base_SetConfig+0x148>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d01b      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a35      	ldr	r2, [pc, #212]	@ (8009b8c <TIM_Base_SetConfig+0x14c>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d017      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a34      	ldr	r2, [pc, #208]	@ (8009b90 <TIM_Base_SetConfig+0x150>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d013      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a33      	ldr	r2, [pc, #204]	@ (8009b94 <TIM_Base_SetConfig+0x154>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00f      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a33      	ldr	r2, [pc, #204]	@ (8009b9c <TIM_Base_SetConfig+0x15c>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d00b      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a32      	ldr	r2, [pc, #200]	@ (8009ba0 <TIM_Base_SetConfig+0x160>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d007      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a31      	ldr	r2, [pc, #196]	@ (8009ba4 <TIM_Base_SetConfig+0x164>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d003      	beq.n	8009aea <TIM_Base_SetConfig+0xaa>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8009b98 <TIM_Base_SetConfig+0x158>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d108      	bne.n	8009afc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009af0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a18      	ldr	r2, [pc, #96]	@ (8009b84 <TIM_Base_SetConfig+0x144>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d013      	beq.n	8009b50 <TIM_Base_SetConfig+0x110>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a1a      	ldr	r2, [pc, #104]	@ (8009b94 <TIM_Base_SetConfig+0x154>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d00f      	beq.n	8009b50 <TIM_Base_SetConfig+0x110>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a1a      	ldr	r2, [pc, #104]	@ (8009b9c <TIM_Base_SetConfig+0x15c>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d00b      	beq.n	8009b50 <TIM_Base_SetConfig+0x110>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a19      	ldr	r2, [pc, #100]	@ (8009ba0 <TIM_Base_SetConfig+0x160>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d007      	beq.n	8009b50 <TIM_Base_SetConfig+0x110>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a18      	ldr	r2, [pc, #96]	@ (8009ba4 <TIM_Base_SetConfig+0x164>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d003      	beq.n	8009b50 <TIM_Base_SetConfig+0x110>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a13      	ldr	r2, [pc, #76]	@ (8009b98 <TIM_Base_SetConfig+0x158>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d103      	bne.n	8009b58 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	691a      	ldr	r2, [r3, #16]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	f003 0301 	and.w	r3, r3, #1
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d105      	bne.n	8009b76 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	f023 0201 	bic.w	r2, r3, #1
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	611a      	str	r2, [r3, #16]
  }
}
 8009b76:	bf00      	nop
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	40012c00 	.word	0x40012c00
 8009b88:	40000400 	.word	0x40000400
 8009b8c:	40000800 	.word	0x40000800
 8009b90:	40000c00 	.word	0x40000c00
 8009b94:	40013400 	.word	0x40013400
 8009b98:	40015000 	.word	0x40015000
 8009b9c:	40014000 	.word	0x40014000
 8009ba0:	40014400 	.word	0x40014400
 8009ba4:	40014800 	.word	0x40014800

08009ba8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6a1b      	ldr	r3, [r3, #32]
 8009bb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	f023 0201 	bic.w	r2, r3, #1
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f023 0303 	bic.w	r3, r3, #3
 8009be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009bee:	697b      	ldr	r3, [r7, #20]
 8009bf0:	f023 0302 	bic.w	r3, r3, #2
 8009bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a30      	ldr	r2, [pc, #192]	@ (8009cc4 <TIM_OC1_SetConfig+0x11c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d013      	beq.n	8009c30 <TIM_OC1_SetConfig+0x88>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a2f      	ldr	r2, [pc, #188]	@ (8009cc8 <TIM_OC1_SetConfig+0x120>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d00f      	beq.n	8009c30 <TIM_OC1_SetConfig+0x88>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a2e      	ldr	r2, [pc, #184]	@ (8009ccc <TIM_OC1_SetConfig+0x124>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d00b      	beq.n	8009c30 <TIM_OC1_SetConfig+0x88>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a2d      	ldr	r2, [pc, #180]	@ (8009cd0 <TIM_OC1_SetConfig+0x128>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d007      	beq.n	8009c30 <TIM_OC1_SetConfig+0x88>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a2c      	ldr	r2, [pc, #176]	@ (8009cd4 <TIM_OC1_SetConfig+0x12c>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d003      	beq.n	8009c30 <TIM_OC1_SetConfig+0x88>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a2b      	ldr	r2, [pc, #172]	@ (8009cd8 <TIM_OC1_SetConfig+0x130>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d10c      	bne.n	8009c4a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	f023 0308 	bic.w	r3, r3, #8
 8009c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f023 0304 	bic.w	r3, r3, #4
 8009c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cc4 <TIM_OC1_SetConfig+0x11c>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d013      	beq.n	8009c7a <TIM_OC1_SetConfig+0xd2>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a1c      	ldr	r2, [pc, #112]	@ (8009cc8 <TIM_OC1_SetConfig+0x120>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d00f      	beq.n	8009c7a <TIM_OC1_SetConfig+0xd2>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8009ccc <TIM_OC1_SetConfig+0x124>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d00b      	beq.n	8009c7a <TIM_OC1_SetConfig+0xd2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a1a      	ldr	r2, [pc, #104]	@ (8009cd0 <TIM_OC1_SetConfig+0x128>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d007      	beq.n	8009c7a <TIM_OC1_SetConfig+0xd2>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a19      	ldr	r2, [pc, #100]	@ (8009cd4 <TIM_OC1_SetConfig+0x12c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d003      	beq.n	8009c7a <TIM_OC1_SetConfig+0xd2>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a18      	ldr	r2, [pc, #96]	@ (8009cd8 <TIM_OC1_SetConfig+0x130>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d111      	bne.n	8009c9e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	695b      	ldr	r3, [r3, #20]
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	4313      	orrs	r3, r2
 8009c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	699b      	ldr	r3, [r3, #24]
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	693a      	ldr	r2, [r7, #16]
 8009ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	68fa      	ldr	r2, [r7, #12]
 8009ca8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	697a      	ldr	r2, [r7, #20]
 8009cb6:	621a      	str	r2, [r3, #32]
}
 8009cb8:	bf00      	nop
 8009cba:	371c      	adds	r7, #28
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc2:	4770      	bx	lr
 8009cc4:	40012c00 	.word	0x40012c00
 8009cc8:	40013400 	.word	0x40013400
 8009ccc:	40014000 	.word	0x40014000
 8009cd0:	40014400 	.word	0x40014400
 8009cd4:	40014800 	.word	0x40014800
 8009cd8:	40015000 	.word	0x40015000

08009cdc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b087      	sub	sp, #28
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a1b      	ldr	r3, [r3, #32]
 8009cea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	f023 0210 	bic.w	r2, r3, #16
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	68fa      	ldr	r2, [r7, #12]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	f023 0320 	bic.w	r3, r3, #32
 8009d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	011b      	lsls	r3, r3, #4
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	4313      	orrs	r3, r2
 8009d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8009dec <TIM_OC2_SetConfig+0x110>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d007      	beq.n	8009d50 <TIM_OC2_SetConfig+0x74>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a2b      	ldr	r2, [pc, #172]	@ (8009df0 <TIM_OC2_SetConfig+0x114>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d003      	beq.n	8009d50 <TIM_OC2_SetConfig+0x74>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a2a      	ldr	r2, [pc, #168]	@ (8009df4 <TIM_OC2_SetConfig+0x118>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d10d      	bne.n	8009d6c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	011b      	lsls	r3, r3, #4
 8009d5e:	697a      	ldr	r2, [r7, #20]
 8009d60:	4313      	orrs	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d6a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8009dec <TIM_OC2_SetConfig+0x110>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d013      	beq.n	8009d9c <TIM_OC2_SetConfig+0xc0>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a1e      	ldr	r2, [pc, #120]	@ (8009df0 <TIM_OC2_SetConfig+0x114>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d00f      	beq.n	8009d9c <TIM_OC2_SetConfig+0xc0>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8009df8 <TIM_OC2_SetConfig+0x11c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00b      	beq.n	8009d9c <TIM_OC2_SetConfig+0xc0>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a1d      	ldr	r2, [pc, #116]	@ (8009dfc <TIM_OC2_SetConfig+0x120>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d007      	beq.n	8009d9c <TIM_OC2_SetConfig+0xc0>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8009e00 <TIM_OC2_SetConfig+0x124>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d003      	beq.n	8009d9c <TIM_OC2_SetConfig+0xc0>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a17      	ldr	r2, [pc, #92]	@ (8009df4 <TIM_OC2_SetConfig+0x118>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d113      	bne.n	8009dc4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009da2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009daa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	699b      	ldr	r3, [r3, #24]
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	685a      	ldr	r2, [r3, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	697a      	ldr	r2, [r7, #20]
 8009ddc:	621a      	str	r2, [r3, #32]
}
 8009dde:	bf00      	nop
 8009de0:	371c      	adds	r7, #28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr
 8009dea:	bf00      	nop
 8009dec:	40012c00 	.word	0x40012c00
 8009df0:	40013400 	.word	0x40013400
 8009df4:	40015000 	.word	0x40015000
 8009df8:	40014000 	.word	0x40014000
 8009dfc:	40014400 	.word	0x40014400
 8009e00:	40014800 	.word	0x40014800

08009e04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b087      	sub	sp, #28
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a1b      	ldr	r3, [r3, #32]
 8009e18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	69db      	ldr	r3, [r3, #28]
 8009e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f023 0303 	bic.w	r3, r3, #3
 8009e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	021b      	lsls	r3, r3, #8
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	4a2b      	ldr	r2, [pc, #172]	@ (8009f10 <TIM_OC3_SetConfig+0x10c>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d007      	beq.n	8009e76 <TIM_OC3_SetConfig+0x72>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	4a2a      	ldr	r2, [pc, #168]	@ (8009f14 <TIM_OC3_SetConfig+0x110>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d003      	beq.n	8009e76 <TIM_OC3_SetConfig+0x72>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a29      	ldr	r2, [pc, #164]	@ (8009f18 <TIM_OC3_SetConfig+0x114>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d10d      	bne.n	8009e92 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	021b      	lsls	r3, r3, #8
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	4313      	orrs	r3, r2
 8009e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	4a1e      	ldr	r2, [pc, #120]	@ (8009f10 <TIM_OC3_SetConfig+0x10c>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d013      	beq.n	8009ec2 <TIM_OC3_SetConfig+0xbe>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8009f14 <TIM_OC3_SetConfig+0x110>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d00f      	beq.n	8009ec2 <TIM_OC3_SetConfig+0xbe>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a1d      	ldr	r2, [pc, #116]	@ (8009f1c <TIM_OC3_SetConfig+0x118>)
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d00b      	beq.n	8009ec2 <TIM_OC3_SetConfig+0xbe>
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4a1c      	ldr	r2, [pc, #112]	@ (8009f20 <TIM_OC3_SetConfig+0x11c>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d007      	beq.n	8009ec2 <TIM_OC3_SetConfig+0xbe>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8009f24 <TIM_OC3_SetConfig+0x120>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d003      	beq.n	8009ec2 <TIM_OC3_SetConfig+0xbe>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	4a16      	ldr	r2, [pc, #88]	@ (8009f18 <TIM_OC3_SetConfig+0x114>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d113      	bne.n	8009eea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	011b      	lsls	r3, r3, #4
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	011b      	lsls	r3, r3, #4
 8009ee4:	693a      	ldr	r2, [r7, #16]
 8009ee6:	4313      	orrs	r3, r2
 8009ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	693a      	ldr	r2, [r7, #16]
 8009eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	685a      	ldr	r2, [r3, #4]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	697a      	ldr	r2, [r7, #20]
 8009f02:	621a      	str	r2, [r3, #32]
}
 8009f04:	bf00      	nop
 8009f06:	371c      	adds	r7, #28
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	40012c00 	.word	0x40012c00
 8009f14:	40013400 	.word	0x40013400
 8009f18:	40015000 	.word	0x40015000
 8009f1c:	40014000 	.word	0x40014000
 8009f20:	40014400 	.word	0x40014400
 8009f24:	40014800 	.word	0x40014800

08009f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6a1b      	ldr	r3, [r3, #32]
 8009f3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009f56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	021b      	lsls	r3, r3, #8
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	4313      	orrs	r3, r2
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	031b      	lsls	r3, r3, #12
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	4a2c      	ldr	r2, [pc, #176]	@ (800a038 <TIM_OC4_SetConfig+0x110>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d007      	beq.n	8009f9c <TIM_OC4_SetConfig+0x74>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a2b      	ldr	r2, [pc, #172]	@ (800a03c <TIM_OC4_SetConfig+0x114>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d003      	beq.n	8009f9c <TIM_OC4_SetConfig+0x74>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a2a      	ldr	r2, [pc, #168]	@ (800a040 <TIM_OC4_SetConfig+0x118>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d10d      	bne.n	8009fb8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	031b      	lsls	r3, r3, #12
 8009faa:	697a      	ldr	r2, [r7, #20]
 8009fac:	4313      	orrs	r3, r2
 8009fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a1f      	ldr	r2, [pc, #124]	@ (800a038 <TIM_OC4_SetConfig+0x110>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d013      	beq.n	8009fe8 <TIM_OC4_SetConfig+0xc0>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800a03c <TIM_OC4_SetConfig+0x114>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d00f      	beq.n	8009fe8 <TIM_OC4_SetConfig+0xc0>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	4a1e      	ldr	r2, [pc, #120]	@ (800a044 <TIM_OC4_SetConfig+0x11c>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d00b      	beq.n	8009fe8 <TIM_OC4_SetConfig+0xc0>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	4a1d      	ldr	r2, [pc, #116]	@ (800a048 <TIM_OC4_SetConfig+0x120>)
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d007      	beq.n	8009fe8 <TIM_OC4_SetConfig+0xc0>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a1c      	ldr	r2, [pc, #112]	@ (800a04c <TIM_OC4_SetConfig+0x124>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d003      	beq.n	8009fe8 <TIM_OC4_SetConfig+0xc0>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	4a17      	ldr	r2, [pc, #92]	@ (800a040 <TIM_OC4_SetConfig+0x118>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d113      	bne.n	800a010 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ff6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	695b      	ldr	r3, [r3, #20]
 8009ffc:	019b      	lsls	r3, r3, #6
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	4313      	orrs	r3, r2
 800a002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	699b      	ldr	r3, [r3, #24]
 800a008:	019b      	lsls	r3, r3, #6
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	685a      	ldr	r2, [r3, #4]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	621a      	str	r2, [r3, #32]
}
 800a02a:	bf00      	nop
 800a02c:	371c      	adds	r7, #28
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	40012c00 	.word	0x40012c00
 800a03c:	40013400 	.word	0x40013400
 800a040:	40015000 	.word	0x40015000
 800a044:	40014000 	.word	0x40014000
 800a048:	40014400 	.word	0x40014400
 800a04c:	40014800 	.word	0x40014800

0800a050 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a050:	b480      	push	{r7}
 800a052:	b087      	sub	sp, #28
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a1b      	ldr	r3, [r3, #32]
 800a05e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6a1b      	ldr	r3, [r3, #32]
 800a064:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a07e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a094:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	041b      	lsls	r3, r3, #16
 800a09c:	693a      	ldr	r2, [r7, #16]
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a19      	ldr	r2, [pc, #100]	@ (800a10c <TIM_OC5_SetConfig+0xbc>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d013      	beq.n	800a0d2 <TIM_OC5_SetConfig+0x82>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a18      	ldr	r2, [pc, #96]	@ (800a110 <TIM_OC5_SetConfig+0xc0>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d00f      	beq.n	800a0d2 <TIM_OC5_SetConfig+0x82>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a17      	ldr	r2, [pc, #92]	@ (800a114 <TIM_OC5_SetConfig+0xc4>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d00b      	beq.n	800a0d2 <TIM_OC5_SetConfig+0x82>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a16      	ldr	r2, [pc, #88]	@ (800a118 <TIM_OC5_SetConfig+0xc8>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d007      	beq.n	800a0d2 <TIM_OC5_SetConfig+0x82>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a15      	ldr	r2, [pc, #84]	@ (800a11c <TIM_OC5_SetConfig+0xcc>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d003      	beq.n	800a0d2 <TIM_OC5_SetConfig+0x82>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4a14      	ldr	r2, [pc, #80]	@ (800a120 <TIM_OC5_SetConfig+0xd0>)
 800a0ce:	4293      	cmp	r3, r2
 800a0d0:	d109      	bne.n	800a0e6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	695b      	ldr	r3, [r3, #20]
 800a0de:	021b      	lsls	r3, r3, #8
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	621a      	str	r2, [r3, #32]
}
 800a100:	bf00      	nop
 800a102:	371c      	adds	r7, #28
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	40012c00 	.word	0x40012c00
 800a110:	40013400 	.word	0x40013400
 800a114:	40014000 	.word	0x40014000
 800a118:	40014400 	.word	0x40014400
 800a11c:	40014800 	.word	0x40014800
 800a120:	40015000 	.word	0x40015000

0800a124 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a124:	b480      	push	{r7}
 800a126:	b087      	sub	sp, #28
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a156:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	021b      	lsls	r3, r3, #8
 800a15e:	68fa      	ldr	r2, [r7, #12]
 800a160:	4313      	orrs	r3, r2
 800a162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a16a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	051b      	lsls	r3, r3, #20
 800a172:	693a      	ldr	r2, [r7, #16]
 800a174:	4313      	orrs	r3, r2
 800a176:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a1a      	ldr	r2, [pc, #104]	@ (800a1e4 <TIM_OC6_SetConfig+0xc0>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d013      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x84>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a19      	ldr	r2, [pc, #100]	@ (800a1e8 <TIM_OC6_SetConfig+0xc4>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d00f      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x84>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a18      	ldr	r2, [pc, #96]	@ (800a1ec <TIM_OC6_SetConfig+0xc8>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d00b      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x84>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a17      	ldr	r2, [pc, #92]	@ (800a1f0 <TIM_OC6_SetConfig+0xcc>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d007      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x84>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a16      	ldr	r2, [pc, #88]	@ (800a1f4 <TIM_OC6_SetConfig+0xd0>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d003      	beq.n	800a1a8 <TIM_OC6_SetConfig+0x84>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a15      	ldr	r2, [pc, #84]	@ (800a1f8 <TIM_OC6_SetConfig+0xd4>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d109      	bne.n	800a1bc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a1a8:	697b      	ldr	r3, [r7, #20]
 800a1aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a1ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	029b      	lsls	r3, r3, #10
 800a1b6:	697a      	ldr	r2, [r7, #20]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	621a      	str	r2, [r3, #32]
}
 800a1d6:	bf00      	nop
 800a1d8:	371c      	adds	r7, #28
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	40012c00 	.word	0x40012c00
 800a1e8:	40013400 	.word	0x40013400
 800a1ec:	40014000 	.word	0x40014000
 800a1f0:	40014400 	.word	0x40014400
 800a1f4:	40014800 	.word	0x40014800
 800a1f8:	40015000 	.word	0x40015000

0800a1fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b087      	sub	sp, #28
 800a200:	af00      	add	r7, sp, #0
 800a202:	60f8      	str	r0, [r7, #12]
 800a204:	60b9      	str	r1, [r7, #8]
 800a206:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6a1b      	ldr	r3, [r3, #32]
 800a212:	f023 0201 	bic.w	r2, r3, #1
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a226:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	011b      	lsls	r3, r3, #4
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4313      	orrs	r3, r2
 800a230:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f023 030a 	bic.w	r3, r3, #10
 800a238:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a23a:	697a      	ldr	r2, [r7, #20]
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	4313      	orrs	r3, r2
 800a240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	693a      	ldr	r2, [r7, #16]
 800a246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	697a      	ldr	r2, [r7, #20]
 800a24c:	621a      	str	r2, [r3, #32]
}
 800a24e:	bf00      	nop
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr

0800a25a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b087      	sub	sp, #28
 800a25e:	af00      	add	r7, sp, #0
 800a260:	60f8      	str	r0, [r7, #12]
 800a262:	60b9      	str	r1, [r7, #8]
 800a264:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6a1b      	ldr	r3, [r3, #32]
 800a270:	f023 0210 	bic.w	r2, r3, #16
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a284:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	031b      	lsls	r3, r3, #12
 800a28a:	693a      	ldr	r2, [r7, #16]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a296:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	011b      	lsls	r3, r3, #4
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	621a      	str	r2, [r3, #32]
}
 800a2ae:	bf00      	nop
 800a2b0:	371c      	adds	r7, #28
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b085      	sub	sp, #20
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
 800a2c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a2d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	f043 0307 	orr.w	r3, r3, #7
 800a2e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	609a      	str	r2, [r3, #8]
}
 800a2e8:	bf00      	nop
 800a2ea:	3714      	adds	r7, #20
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b087      	sub	sp, #28
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	60f8      	str	r0, [r7, #12]
 800a2fc:	60b9      	str	r1, [r7, #8]
 800a2fe:	607a      	str	r2, [r7, #4]
 800a300:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a30e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	021a      	lsls	r2, r3, #8
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	431a      	orrs	r2, r3
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	4313      	orrs	r3, r2
 800a320:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	697a      	ldr	r2, [r7, #20]
 800a326:	609a      	str	r2, [r3, #8]
}
 800a328:	bf00      	nop
 800a32a:	371c      	adds	r7, #28
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a334:	b480      	push	{r7}
 800a336:	b087      	sub	sp, #28
 800a338:	af00      	add	r7, sp, #0
 800a33a:	60f8      	str	r0, [r7, #12]
 800a33c:	60b9      	str	r1, [r7, #8]
 800a33e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	f003 031f 	and.w	r3, r3, #31
 800a346:	2201      	movs	r2, #1
 800a348:	fa02 f303 	lsl.w	r3, r2, r3
 800a34c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6a1a      	ldr	r2, [r3, #32]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	43db      	mvns	r3, r3
 800a356:	401a      	ands	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	6a1a      	ldr	r2, [r3, #32]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	f003 031f 	and.w	r3, r3, #31
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	fa01 f303 	lsl.w	r3, r1, r3
 800a36c:	431a      	orrs	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	621a      	str	r2, [r3, #32]
}
 800a372:	bf00      	nop
 800a374:	371c      	adds	r7, #28
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr
	...

0800a380 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a26      	ldr	r2, [pc, #152]	@ (800a424 <TIM_ResetCallback+0xa4>)
 800a38c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a25      	ldr	r2, [pc, #148]	@ (800a428 <TIM_ResetCallback+0xa8>)
 800a394:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a24      	ldr	r2, [pc, #144]	@ (800a42c <TIM_ResetCallback+0xac>)
 800a39c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a23      	ldr	r2, [pc, #140]	@ (800a430 <TIM_ResetCallback+0xb0>)
 800a3a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a22      	ldr	r2, [pc, #136]	@ (800a434 <TIM_ResetCallback+0xb4>)
 800a3ac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	4a21      	ldr	r2, [pc, #132]	@ (800a438 <TIM_ResetCallback+0xb8>)
 800a3b4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a20      	ldr	r2, [pc, #128]	@ (800a43c <TIM_ResetCallback+0xbc>)
 800a3bc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	4a1f      	ldr	r2, [pc, #124]	@ (800a440 <TIM_ResetCallback+0xc0>)
 800a3c4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a444 <TIM_ResetCallback+0xc4>)
 800a3cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a1d      	ldr	r2, [pc, #116]	@ (800a448 <TIM_ResetCallback+0xc8>)
 800a3d4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a1c      	ldr	r2, [pc, #112]	@ (800a44c <TIM_ResetCallback+0xcc>)
 800a3dc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a1b      	ldr	r2, [pc, #108]	@ (800a450 <TIM_ResetCallback+0xd0>)
 800a3e4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a1a      	ldr	r2, [pc, #104]	@ (800a454 <TIM_ResetCallback+0xd4>)
 800a3ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a19      	ldr	r2, [pc, #100]	@ (800a458 <TIM_ResetCallback+0xd8>)
 800a3f4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a18      	ldr	r2, [pc, #96]	@ (800a45c <TIM_ResetCallback+0xdc>)
 800a3fc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a17      	ldr	r2, [pc, #92]	@ (800a460 <TIM_ResetCallback+0xe0>)
 800a404:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a16      	ldr	r2, [pc, #88]	@ (800a464 <TIM_ResetCallback+0xe4>)
 800a40c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a15      	ldr	r2, [pc, #84]	@ (800a468 <TIM_ResetCallback+0xe8>)
 800a414:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800a418:	bf00      	nop
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr
 800a424:	08003865 	.word	0x08003865
 800a428:	080096cd 	.word	0x080096cd
 800a42c:	08009745 	.word	0x08009745
 800a430:	08009759 	.word	0x08009759
 800a434:	080096f5 	.word	0x080096f5
 800a438:	08009709 	.word	0x08009709
 800a43c:	080096e1 	.word	0x080096e1
 800a440:	0800971d 	.word	0x0800971d
 800a444:	08009731 	.word	0x08009731
 800a448:	0800976d 	.word	0x0800976d
 800a44c:	0800a6c1 	.word	0x0800a6c1
 800a450:	0800a6d5 	.word	0x0800a6d5
 800a454:	0800a6e9 	.word	0x0800a6e9
 800a458:	0800a6fd 	.word	0x0800a6fd
 800a45c:	0800a711 	.word	0x0800a711
 800a460:	0800a725 	.word	0x0800a725
 800a464:	0800a739 	.word	0x0800a739
 800a468:	0800a74d 	.word	0x0800a74d

0800a46c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b085      	sub	sp, #20
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d101      	bne.n	800a484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a480:	2302      	movs	r3, #2
 800a482:	e074      	b.n	800a56e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2202      	movs	r2, #2
 800a490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	689b      	ldr	r3, [r3, #8]
 800a4a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a34      	ldr	r2, [pc, #208]	@ (800a57c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4aa:	4293      	cmp	r3, r2
 800a4ac:	d009      	beq.n	800a4c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a33      	ldr	r2, [pc, #204]	@ (800a580 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d004      	beq.n	800a4c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a31      	ldr	r2, [pc, #196]	@ (800a584 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	d108      	bne.n	800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a4c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a4da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4a21      	ldr	r2, [pc, #132]	@ (800a57c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d022      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a504:	d01d      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	4a1f      	ldr	r2, [pc, #124]	@ (800a588 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a50c:	4293      	cmp	r3, r2
 800a50e:	d018      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	4a1d      	ldr	r2, [pc, #116]	@ (800a58c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d013      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a1c      	ldr	r2, [pc, #112]	@ (800a590 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d00e      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a15      	ldr	r2, [pc, #84]	@ (800a580 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d009      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	4a18      	ldr	r2, [pc, #96]	@ (800a594 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a534:	4293      	cmp	r3, r2
 800a536:	d004      	beq.n	800a542 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a11      	ldr	r2, [pc, #68]	@ (800a584 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d10c      	bne.n	800a55c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	68ba      	ldr	r2, [r7, #8]
 800a550:	4313      	orrs	r3, r2
 800a552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3714      	adds	r7, #20
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
 800a57a:	bf00      	nop
 800a57c:	40012c00 	.word	0x40012c00
 800a580:	40013400 	.word	0x40013400
 800a584:	40015000 	.word	0x40015000
 800a588:	40000400 	.word	0x40000400
 800a58c:	40000800 	.word	0x40000800
 800a590:	40000c00 	.word	0x40000c00
 800a594:	40014000 	.word	0x40014000

0800a598 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d101      	bne.n	800a5b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	e078      	b.n	800a6a6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	689b      	ldr	r3, [r3, #8]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a61a:	4313      	orrs	r3, r2
 800a61c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	041b      	lsls	r3, r3, #16
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4a1c      	ldr	r2, [pc, #112]	@ (800a6b4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d009      	beq.n	800a65a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	4a1b      	ldr	r2, [pc, #108]	@ (800a6b8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800a64c:	4293      	cmp	r3, r2
 800a64e:	d004      	beq.n	800a65a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a19      	ldr	r2, [pc, #100]	@ (800a6bc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d11c      	bne.n	800a694 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a664:	051b      	lsls	r3, r3, #20
 800a666:	4313      	orrs	r3, r2
 800a668:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	6a1b      	ldr	r3, [r3, #32]
 800a674:	4313      	orrs	r3, r2
 800a676:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a682:	4313      	orrs	r3, r2
 800a684:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a690:	4313      	orrs	r3, r2
 800a692:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68fa      	ldr	r2, [r7, #12]
 800a69a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	40012c00 	.word	0x40012c00
 800a6b8:	40013400 	.word	0x40013400
 800a6bc:	40015000 	.word	0x40015000

0800a6c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b083      	sub	sp, #12
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6c8:	bf00      	nop
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a6dc:	bf00      	nop
 800a6de:	370c      	adds	r7, #12
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d101      	bne.n	800a772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	e050      	b.n	800a814 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d114      	bne.n	800a7a6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fd5b 	bl	800b240 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a790:	2b00      	cmp	r3, #0
 800a792:	d103      	bne.n	800a79c <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	4a21      	ldr	r2, [pc, #132]	@ (800a81c <HAL_UART_Init+0xbc>)
 800a798:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2224      	movs	r2, #36	@ 0x24
 800a7aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f022 0201 	bic.w	r2, r2, #1
 800a7bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d002      	beq.n	800a7cc <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f001 f888 	bl	800b8dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f000 fd89 	bl	800b2e4 <UART_SetConfig>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d101      	bne.n	800a7dc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e01b      	b.n	800a814 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	685a      	ldr	r2, [r3, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a7ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a7fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f042 0201 	orr.w	r2, r2, #1
 800a80a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f001 f907 	bl	800ba20 <UART_CheckIdleState>
 800a812:	4603      	mov	r3, r0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3708      	adds	r7, #8
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	08004c65 	.word	0x08004c65

0800a820 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a820:	b480      	push	{r7}
 800a822:	b087      	sub	sp, #28
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	460b      	mov	r3, r1
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d109      	bne.n	800a84c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a83e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	e09c      	b.n	800a986 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a852:	2b20      	cmp	r3, #32
 800a854:	d16c      	bne.n	800a930 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800a856:	7afb      	ldrb	r3, [r7, #11]
 800a858:	2b0c      	cmp	r3, #12
 800a85a:	d85e      	bhi.n	800a91a <HAL_UART_RegisterCallback+0xfa>
 800a85c:	a201      	add	r2, pc, #4	@ (adr r2, 800a864 <HAL_UART_RegisterCallback+0x44>)
 800a85e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a862:	bf00      	nop
 800a864:	0800a899 	.word	0x0800a899
 800a868:	0800a8a3 	.word	0x0800a8a3
 800a86c:	0800a8ad 	.word	0x0800a8ad
 800a870:	0800a8b7 	.word	0x0800a8b7
 800a874:	0800a8c1 	.word	0x0800a8c1
 800a878:	0800a8cb 	.word	0x0800a8cb
 800a87c:	0800a8d5 	.word	0x0800a8d5
 800a880:	0800a8df 	.word	0x0800a8df
 800a884:	0800a8e9 	.word	0x0800a8e9
 800a888:	0800a8f3 	.word	0x0800a8f3
 800a88c:	0800a8fd 	.word	0x0800a8fd
 800a890:	0800a907 	.word	0x0800a907
 800a894:	0800a911 	.word	0x0800a911
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800a8a0:	e070      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800a8aa:	e06b      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800a8b4:	e066      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800a8be:	e061      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800a8c8:	e05c      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	687a      	ldr	r2, [r7, #4]
 800a8ce:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800a8d2:	e057      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800a8dc:	e052      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800a8e6:	e04d      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800a8f0:	e048      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800a8fa:	e043      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	687a      	ldr	r2, [r7, #4]
 800a900:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800a904:	e03e      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a90e:	e039      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a918:	e034      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a920:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	75fb      	strb	r3, [r7, #23]
        break;
 800a92e:	e029      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a936:	2b00      	cmp	r3, #0
 800a938:	d11a      	bne.n	800a970 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800a93a:	7afb      	ldrb	r3, [r7, #11]
 800a93c:	2b0b      	cmp	r3, #11
 800a93e:	d002      	beq.n	800a946 <HAL_UART_RegisterCallback+0x126>
 800a940:	2b0c      	cmp	r3, #12
 800a942:	d005      	beq.n	800a950 <HAL_UART_RegisterCallback+0x130>
 800a944:	e009      	b.n	800a95a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800a94e:	e019      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	687a      	ldr	r2, [r7, #4]
 800a954:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800a958:	e014      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a960:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	75fb      	strb	r3, [r7, #23]
        break;
 800a96e:	e009      	b.n	800a984 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a976:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a984:	7dfb      	ldrb	r3, [r7, #23]
}
 800a986:	4618      	mov	r0, r3
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop

0800a994 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b08a      	sub	sp, #40	@ 0x28
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a9a8:	2b20      	cmp	r3, #32
 800a9aa:	d137      	bne.n	800aa1c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d002      	beq.n	800a9b8 <HAL_UART_Receive_DMA+0x24>
 800a9b2:	88fb      	ldrh	r3, [r7, #6]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e030      	b.n	800aa1e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a18      	ldr	r2, [pc, #96]	@ (800aa28 <HAL_UART_Receive_DMA+0x94>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d01f      	beq.n	800aa0c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d018      	beq.n	800aa0c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	e853 3f00 	ldrex	r3, [r3]
 800a9e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a9ee:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f8:	623b      	str	r3, [r7, #32]
 800a9fa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fc:	69f9      	ldr	r1, [r7, #28]
 800a9fe:	6a3a      	ldr	r2, [r7, #32]
 800aa00:	e841 2300 	strex	r3, r2, [r1]
 800aa04:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa06:	69bb      	ldr	r3, [r7, #24]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1e6      	bne.n	800a9da <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800aa0c:	88fb      	ldrh	r3, [r7, #6]
 800aa0e:	461a      	mov	r2, r3
 800aa10:	68b9      	ldr	r1, [r7, #8]
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f001 f91c 	bl	800bc50 <UART_Start_Receive_DMA>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	e000      	b.n	800aa1e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800aa1c:	2302      	movs	r3, #2
  }
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3728      	adds	r7, #40	@ 0x28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	40008000 	.word	0x40008000

0800aa2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b0ba      	sub	sp, #232	@ 0xe8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa56:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aa5a:	4013      	ands	r3, r2
 800aa5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aa60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d11b      	bne.n	800aaa0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa6c:	f003 0320 	and.w	r3, r3, #32
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d015      	beq.n	800aaa0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa78:	f003 0320 	and.w	r3, r3, #32
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d105      	bne.n	800aa8c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d009      	beq.n	800aaa0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	f000 8312 	beq.w	800b0ba <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	4798      	blx	r3
      }
      return;
 800aa9e:	e30c      	b.n	800b0ba <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aaa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 8129 	beq.w	800acfc <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aaaa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aaae:	4b90      	ldr	r3, [pc, #576]	@ (800acf0 <HAL_UART_IRQHandler+0x2c4>)
 800aab0:	4013      	ands	r3, r2
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aab6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aaba:	4b8e      	ldr	r3, [pc, #568]	@ (800acf4 <HAL_UART_IRQHandler+0x2c8>)
 800aabc:	4013      	ands	r3, r2
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f000 811c 	beq.w	800acfc <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d011      	beq.n	800aaf4 <HAL_UART_IRQHandler+0xc8>
 800aad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d00b      	beq.n	800aaf4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2201      	movs	r2, #1
 800aae2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaea:	f043 0201 	orr.w	r2, r3, #1
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaf8:	f003 0302 	and.w	r3, r3, #2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d011      	beq.n	800ab24 <HAL_UART_IRQHandler+0xf8>
 800ab00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab04:	f003 0301 	and.w	r3, r3, #1
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00b      	beq.n	800ab24 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2202      	movs	r2, #2
 800ab12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab1a:	f043 0204 	orr.w	r2, r3, #4
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab28:	f003 0304 	and.w	r3, r3, #4
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d011      	beq.n	800ab54 <HAL_UART_IRQHandler+0x128>
 800ab30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab34:	f003 0301 	and.w	r3, r3, #1
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d00b      	beq.n	800ab54 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2204      	movs	r2, #4
 800ab42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab4a:	f043 0202 	orr.w	r2, r3, #2
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab58:	f003 0308 	and.w	r3, r3, #8
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d017      	beq.n	800ab90 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab64:	f003 0320 	and.w	r3, r3, #32
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d105      	bne.n	800ab78 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab6c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab70:	4b5f      	ldr	r3, [pc, #380]	@ (800acf0 <HAL_UART_IRQHandler+0x2c4>)
 800ab72:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00b      	beq.n	800ab90 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	2208      	movs	r2, #8
 800ab7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab86:	f043 0208 	orr.w	r2, r3, #8
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d012      	beq.n	800abc2 <HAL_UART_IRQHandler+0x196>
 800ab9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aba0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00c      	beq.n	800abc2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800abb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb8:	f043 0220 	orr.w	r2, r3, #32
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abc8:	2b00      	cmp	r3, #0
 800abca:	f000 8278 	beq.w	800b0be <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800abce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abd2:	f003 0320 	and.w	r3, r3, #32
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d013      	beq.n	800ac02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800abda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abde:	f003 0320 	and.w	r3, r3, #32
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d105      	bne.n	800abf2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800abe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800abea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d007      	beq.n	800ac02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac16:	2b40      	cmp	r3, #64	@ 0x40
 800ac18:	d005      	beq.n	800ac26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ac1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d058      	beq.n	800acd8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f001 f8f9 	bl	800be1e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac36:	2b40      	cmp	r3, #64	@ 0x40
 800ac38:	d148      	bne.n	800accc <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3308      	adds	r3, #8
 800ac40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac48:	e853 3f00 	ldrex	r3, [r3]
 800ac4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ac50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	3308      	adds	r3, #8
 800ac62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ac66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ac6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ac72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ac76:	e841 2300 	strex	r3, r2, [r1]
 800ac7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ac7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d1d9      	bne.n	800ac3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d017      	beq.n	800acc0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac96:	4a18      	ldr	r2, [pc, #96]	@ (800acf8 <HAL_UART_IRQHandler+0x2cc>)
 800ac98:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7fc f8dd 	bl	8006e60 <HAL_DMA_Abort_IT>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d01f      	beq.n	800acec <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800acb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800acba:	4610      	mov	r0, r2
 800acbc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acbe:	e015      	b.n	800acec <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acca:	e00f      	b.n	800acec <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd6:	e009      	b.n	800acec <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800acea:	e1e8      	b.n	800b0be <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acec:	bf00      	nop
    return;
 800acee:	e1e6      	b.n	800b0be <HAL_UART_IRQHandler+0x692>
 800acf0:	10000001 	.word	0x10000001
 800acf4:	04000120 	.word	0x04000120
 800acf8:	0800c0e9 	.word	0x0800c0e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	f040 8176 	bne.w	800aff2 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ad06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad0a:	f003 0310 	and.w	r3, r3, #16
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	f000 816f 	beq.w	800aff2 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ad14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad18:	f003 0310 	and.w	r3, r3, #16
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 8168 	beq.w	800aff2 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	2210      	movs	r2, #16
 800ad28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad34:	2b40      	cmp	r3, #64	@ 0x40
 800ad36:	f040 80dc 	bne.w	800aef2 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	685b      	ldr	r3, [r3, #4]
 800ad44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	f000 80b1 	beq.w	800aeb4 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ad58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	f080 80a9 	bcs.w	800aeb4 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad68:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 0320 	and.w	r3, r3, #32
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f040 8087 	bne.w	800ae8e <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad8c:	e853 3f00 	ldrex	r3, [r3]
 800ad90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ad94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	461a      	mov	r2, r3
 800ada6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800adaa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800adae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800adb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800adba:	e841 2300 	strex	r3, r2, [r1]
 800adbe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800adc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1da      	bne.n	800ad80 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	3308      	adds	r3, #8
 800add0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800add4:	e853 3f00 	ldrex	r3, [r3]
 800add8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800adda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800addc:	f023 0301 	bic.w	r3, r3, #1
 800ade0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	3308      	adds	r3, #8
 800adea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800adee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800adf2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800adf6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800adfa:	e841 2300 	strex	r3, r2, [r1]
 800adfe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ae00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1e1      	bne.n	800adca <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ae16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ae18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	3308      	adds	r3, #8
 800ae26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ae2a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ae2c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ae30:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ae32:	e841 2300 	strex	r3, r2, [r1]
 800ae36:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ae38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d1e3      	bne.n	800ae06 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2220      	movs	r2, #32
 800ae42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae54:	e853 3f00 	ldrex	r3, [r3]
 800ae58:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae5c:	f023 0310 	bic.w	r3, r3, #16
 800ae60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae6e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae70:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae72:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae74:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae76:	e841 2300 	strex	r3, r2, [r1]
 800ae7a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d1e4      	bne.n	800ae4c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f7fb ff90 	bl	8006dae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2202      	movs	r2, #2
 800ae92:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800aea6:	b292      	uxth	r2, r2
 800aea8:	1a8a      	subs	r2, r1, r2
 800aeaa:	b292      	uxth	r2, r2
 800aeac:	4611      	mov	r1, r2
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800aeb2:	e106      	b.n	800b0c2 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800aeba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aebe:	429a      	cmp	r2, r3
 800aec0:	f040 80ff 	bne.w	800b0c2 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0320 	and.w	r3, r3, #32
 800aed2:	2b20      	cmp	r3, #32
 800aed4:	f040 80f5 	bne.w	800b0c2 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2202      	movs	r2, #2
 800aedc:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800aeea:	4611      	mov	r1, r2
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	4798      	blx	r3
      return;
 800aef0:	e0e7      	b.n	800b0c2 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800aefe:	b29b      	uxth	r3, r3
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800af0c:	b29b      	uxth	r3, r3
 800af0e:	2b00      	cmp	r3, #0
 800af10:	f000 80d9 	beq.w	800b0c6 <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800af14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 80d4 	beq.w	800b0c6 <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800af2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	461a      	mov	r2, r3
 800af3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800af40:	647b      	str	r3, [r7, #68]	@ 0x44
 800af42:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800af46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800af48:	e841 2300 	strex	r3, r2, [r1]
 800af4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800af4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af50:	2b00      	cmp	r3, #0
 800af52:	d1e4      	bne.n	800af1e <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	3308      	adds	r3, #8
 800af5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5e:	e853 3f00 	ldrex	r3, [r3]
 800af62:	623b      	str	r3, [r7, #32]
   return(result);
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af6a:	f023 0301 	bic.w	r3, r3, #1
 800af6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3308      	adds	r3, #8
 800af78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800af7c:	633a      	str	r2, [r7, #48]	@ 0x30
 800af7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af80:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af84:	e841 2300 	strex	r3, r2, [r1]
 800af88:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d1e1      	bne.n	800af54 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2220      	movs	r2, #32
 800af94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2200      	movs	r2, #0
 800afa2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	e853 3f00 	ldrex	r3, [r3]
 800afb0:	60fb      	str	r3, [r7, #12]
   return(result);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f023 0310 	bic.w	r3, r3, #16
 800afb8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	461a      	mov	r2, r3
 800afc2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800afc6:	61fb      	str	r3, [r7, #28]
 800afc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afca:	69b9      	ldr	r1, [r7, #24]
 800afcc:	69fa      	ldr	r2, [r7, #28]
 800afce:	e841 2300 	strex	r3, r2, [r1]
 800afd2:	617b      	str	r3, [r7, #20]
   return(result);
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d1e4      	bne.n	800afa4 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2202      	movs	r2, #2
 800afde:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800afe6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800afea:	4611      	mov	r1, r2
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aff0:	e069      	b.n	800b0c6 <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aff6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800affa:	2b00      	cmp	r3, #0
 800affc:	d010      	beq.n	800b020 <HAL_UART_IRQHandler+0x5f4>
 800affe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b006:	2b00      	cmp	r3, #0
 800b008:	d00a      	beq.n	800b020 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b012:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b01e:	e055      	b.n	800b0cc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b020:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b024:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d014      	beq.n	800b056 <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b02c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b030:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b034:	2b00      	cmp	r3, #0
 800b036:	d105      	bne.n	800b044 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b03c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d008      	beq.n	800b056 <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d03e      	beq.n	800b0ca <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	4798      	blx	r3
    }
    return;
 800b054:	e039      	b.n	800b0ca <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b05a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d009      	beq.n	800b076 <HAL_UART_IRQHandler+0x64a>
 800b062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d003      	beq.n	800b076 <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f001 f84e 	bl	800c110 <UART_EndTransmit_IT>
    return;
 800b074:	e02a      	b.n	800b0cc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b07a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00b      	beq.n	800b09a <HAL_UART_IRQHandler+0x66e>
 800b082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b086:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d005      	beq.n	800b09a <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b098:	e018      	b.n	800b0cc <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b09a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b09e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d012      	beq.n	800b0cc <HAL_UART_IRQHandler+0x6a0>
 800b0a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	da0e      	bge.n	800b0cc <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b0b8:	e008      	b.n	800b0cc <HAL_UART_IRQHandler+0x6a0>
      return;
 800b0ba:	bf00      	nop
 800b0bc:	e006      	b.n	800b0cc <HAL_UART_IRQHandler+0x6a0>
    return;
 800b0be:	bf00      	nop
 800b0c0:	e004      	b.n	800b0cc <HAL_UART_IRQHandler+0x6a0>
      return;
 800b0c2:	bf00      	nop
 800b0c4:	e002      	b.n	800b0cc <HAL_UART_IRQHandler+0x6a0>
      return;
 800b0c6:	bf00      	nop
 800b0c8:	e000      	b.n	800b0cc <HAL_UART_IRQHandler+0x6a0>
    return;
 800b0ca:	bf00      	nop
  }
}
 800b0cc:	37e8      	adds	r7, #232	@ 0xe8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop

0800b0d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b083      	sub	sp, #12
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b0dc:	bf00      	nop
 800b0de:	370c      	adds	r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e6:	4770      	bx	lr

0800b0e8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b0f0:	bf00      	nop
 800b0f2:	370c      	adds	r7, #12
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b083      	sub	sp, #12
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b104:	bf00      	nop
 800b106:	370c      	adds	r7, #12
 800b108:	46bd      	mov	sp, r7
 800b10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10e:	4770      	bx	lr

0800b110 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b160:	b480      	push	{r7}
 800b162:	b083      	sub	sp, #12
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	460b      	mov	r3, r1
 800b16a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a09      	ldr	r2, [pc, #36]	@ (800b1ac <HAL_UART_ReceiverTimeout_Config+0x34>)
 800b188:	4293      	cmp	r3, r2
 800b18a:	d009      	beq.n	800b1a0 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	683a      	ldr	r2, [r7, #0]
 800b19c:	430a      	orrs	r2, r1
 800b19e:	615a      	str	r2, [r3, #20]
  }
}
 800b1a0:	bf00      	nop
 800b1a2:	370c      	adds	r7, #12
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr
 800b1ac:	40008000 	.word	0x40008000

0800b1b0 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a18      	ldr	r2, [pc, #96]	@ (800b220 <HAL_UART_EnableReceiverTimeout+0x70>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d027      	beq.n	800b212 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1c8:	2b20      	cmp	r3, #32
 800b1ca:	d120      	bne.n	800b20e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d101      	bne.n	800b1da <HAL_UART_EnableReceiverTimeout+0x2a>
 800b1d6:	2302      	movs	r3, #2
 800b1d8:	e01c      	b.n	800b214 <HAL_UART_EnableReceiverTimeout+0x64>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2201      	movs	r2, #1
 800b1de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2224      	movs	r2, #36	@ 0x24
 800b1e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	685a      	ldr	r2, [r3, #4]
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800b1f8:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	2220      	movs	r2, #32
 800b1fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2200      	movs	r2, #0
 800b206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	e002      	b.n	800b214 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800b20e:	2302      	movs	r3, #2
 800b210:	e000      	b.n	800b214 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
  }
}
 800b214:	4618      	mov	r0, r3
 800b216:	370c      	adds	r7, #12
 800b218:	46bd      	mov	sp, r7
 800b21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21e:	4770      	bx	lr
 800b220:	40008000 	.word	0x40008000

0800b224 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800b232:	4618      	mov	r0, r3
 800b234:	370c      	adds	r7, #12
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
	...

0800b240 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a1a      	ldr	r2, [pc, #104]	@ (800b2b4 <UART_InitCallbacksToDefault+0x74>)
 800b24c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a19      	ldr	r2, [pc, #100]	@ (800b2b8 <UART_InitCallbacksToDefault+0x78>)
 800b254:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	4a18      	ldr	r2, [pc, #96]	@ (800b2bc <UART_InitCallbacksToDefault+0x7c>)
 800b25c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a17      	ldr	r2, [pc, #92]	@ (800b2c0 <UART_InitCallbacksToDefault+0x80>)
 800b264:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	4a16      	ldr	r2, [pc, #88]	@ (800b2c4 <UART_InitCallbacksToDefault+0x84>)
 800b26c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	4a15      	ldr	r2, [pc, #84]	@ (800b2c8 <UART_InitCallbacksToDefault+0x88>)
 800b274:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a14      	ldr	r2, [pc, #80]	@ (800b2cc <UART_InitCallbacksToDefault+0x8c>)
 800b27c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a13      	ldr	r2, [pc, #76]	@ (800b2d0 <UART_InitCallbacksToDefault+0x90>)
 800b284:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a12      	ldr	r2, [pc, #72]	@ (800b2d4 <UART_InitCallbacksToDefault+0x94>)
 800b28c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a11      	ldr	r2, [pc, #68]	@ (800b2d8 <UART_InitCallbacksToDefault+0x98>)
 800b294:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a10      	ldr	r2, [pc, #64]	@ (800b2dc <UART_InitCallbacksToDefault+0x9c>)
 800b29c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	4a0f      	ldr	r2, [pc, #60]	@ (800b2e0 <UART_InitCallbacksToDefault+0xa0>)
 800b2a4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr
 800b2b4:	0800b0e9 	.word	0x0800b0e9
 800b2b8:	0800b0d5 	.word	0x0800b0d5
 800b2bc:	0800b0fd 	.word	0x0800b0fd
 800b2c0:	08003851 	.word	0x08003851
 800b2c4:	0800b111 	.word	0x0800b111
 800b2c8:	0800b125 	.word	0x0800b125
 800b2cc:	0800b139 	.word	0x0800b139
 800b2d0:	0800b14d 	.word	0x0800b14d
 800b2d4:	0800c16b 	.word	0x0800c16b
 800b2d8:	0800c17f 	.word	0x0800c17f
 800b2dc:	0800c193 	.word	0x0800c193
 800b2e0:	0800b161 	.word	0x0800b161

0800b2e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b2e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2e8:	b08c      	sub	sp, #48	@ 0x30
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b2f4:	697b      	ldr	r3, [r7, #20]
 800b2f6:	689a      	ldr	r2, [r3, #8]
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	691b      	ldr	r3, [r3, #16]
 800b2fc:	431a      	orrs	r2, r3
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	431a      	orrs	r2, r3
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	69db      	ldr	r3, [r3, #28]
 800b308:	4313      	orrs	r3, r2
 800b30a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	4baa      	ldr	r3, [pc, #680]	@ (800b5bc <UART_SetConfig+0x2d8>)
 800b314:	4013      	ands	r3, r2
 800b316:	697a      	ldr	r2, [r7, #20]
 800b318:	6812      	ldr	r2, [r2, #0]
 800b31a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b31c:	430b      	orrs	r3, r1
 800b31e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	68da      	ldr	r2, [r3, #12]
 800b32e:	697b      	ldr	r3, [r7, #20]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	430a      	orrs	r2, r1
 800b334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a9f      	ldr	r2, [pc, #636]	@ (800b5c0 <UART_SetConfig+0x2dc>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d004      	beq.n	800b350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	6a1b      	ldr	r3, [r3, #32]
 800b34a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b34c:	4313      	orrs	r3, r2
 800b34e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b35a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b35e:	697a      	ldr	r2, [r7, #20]
 800b360:	6812      	ldr	r2, [r2, #0]
 800b362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b364:	430b      	orrs	r3, r1
 800b366:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b36e:	f023 010f 	bic.w	r1, r3, #15
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	430a      	orrs	r2, r1
 800b37c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a90      	ldr	r2, [pc, #576]	@ (800b5c4 <UART_SetConfig+0x2e0>)
 800b384:	4293      	cmp	r3, r2
 800b386:	d125      	bne.n	800b3d4 <UART_SetConfig+0xf0>
 800b388:	4b8f      	ldr	r3, [pc, #572]	@ (800b5c8 <UART_SetConfig+0x2e4>)
 800b38a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b38e:	f003 0303 	and.w	r3, r3, #3
 800b392:	2b03      	cmp	r3, #3
 800b394:	d81a      	bhi.n	800b3cc <UART_SetConfig+0xe8>
 800b396:	a201      	add	r2, pc, #4	@ (adr r2, 800b39c <UART_SetConfig+0xb8>)
 800b398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39c:	0800b3ad 	.word	0x0800b3ad
 800b3a0:	0800b3bd 	.word	0x0800b3bd
 800b3a4:	0800b3b5 	.word	0x0800b3b5
 800b3a8:	0800b3c5 	.word	0x0800b3c5
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3b2:	e116      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b3b4:	2302      	movs	r3, #2
 800b3b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3ba:	e112      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b3bc:	2304      	movs	r3, #4
 800b3be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3c2:	e10e      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b3c4:	2308      	movs	r3, #8
 800b3c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3ca:	e10a      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b3cc:	2310      	movs	r3, #16
 800b3ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3d2:	e106      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4a7c      	ldr	r2, [pc, #496]	@ (800b5cc <UART_SetConfig+0x2e8>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d138      	bne.n	800b450 <UART_SetConfig+0x16c>
 800b3de:	4b7a      	ldr	r3, [pc, #488]	@ (800b5c8 <UART_SetConfig+0x2e4>)
 800b3e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3e4:	f003 030c 	and.w	r3, r3, #12
 800b3e8:	2b0c      	cmp	r3, #12
 800b3ea:	d82d      	bhi.n	800b448 <UART_SetConfig+0x164>
 800b3ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b3f4 <UART_SetConfig+0x110>)
 800b3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3f2:	bf00      	nop
 800b3f4:	0800b429 	.word	0x0800b429
 800b3f8:	0800b449 	.word	0x0800b449
 800b3fc:	0800b449 	.word	0x0800b449
 800b400:	0800b449 	.word	0x0800b449
 800b404:	0800b439 	.word	0x0800b439
 800b408:	0800b449 	.word	0x0800b449
 800b40c:	0800b449 	.word	0x0800b449
 800b410:	0800b449 	.word	0x0800b449
 800b414:	0800b431 	.word	0x0800b431
 800b418:	0800b449 	.word	0x0800b449
 800b41c:	0800b449 	.word	0x0800b449
 800b420:	0800b449 	.word	0x0800b449
 800b424:	0800b441 	.word	0x0800b441
 800b428:	2300      	movs	r3, #0
 800b42a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b42e:	e0d8      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b430:	2302      	movs	r3, #2
 800b432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b436:	e0d4      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b438:	2304      	movs	r3, #4
 800b43a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b43e:	e0d0      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b440:	2308      	movs	r3, #8
 800b442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b446:	e0cc      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b448:	2310      	movs	r3, #16
 800b44a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b44e:	e0c8      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a5e      	ldr	r2, [pc, #376]	@ (800b5d0 <UART_SetConfig+0x2ec>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d125      	bne.n	800b4a6 <UART_SetConfig+0x1c2>
 800b45a:	4b5b      	ldr	r3, [pc, #364]	@ (800b5c8 <UART_SetConfig+0x2e4>)
 800b45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b460:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b464:	2b30      	cmp	r3, #48	@ 0x30
 800b466:	d016      	beq.n	800b496 <UART_SetConfig+0x1b2>
 800b468:	2b30      	cmp	r3, #48	@ 0x30
 800b46a:	d818      	bhi.n	800b49e <UART_SetConfig+0x1ba>
 800b46c:	2b20      	cmp	r3, #32
 800b46e:	d00a      	beq.n	800b486 <UART_SetConfig+0x1a2>
 800b470:	2b20      	cmp	r3, #32
 800b472:	d814      	bhi.n	800b49e <UART_SetConfig+0x1ba>
 800b474:	2b00      	cmp	r3, #0
 800b476:	d002      	beq.n	800b47e <UART_SetConfig+0x19a>
 800b478:	2b10      	cmp	r3, #16
 800b47a:	d008      	beq.n	800b48e <UART_SetConfig+0x1aa>
 800b47c:	e00f      	b.n	800b49e <UART_SetConfig+0x1ba>
 800b47e:	2300      	movs	r3, #0
 800b480:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b484:	e0ad      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b486:	2302      	movs	r3, #2
 800b488:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b48c:	e0a9      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b48e:	2304      	movs	r3, #4
 800b490:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b494:	e0a5      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b496:	2308      	movs	r3, #8
 800b498:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b49c:	e0a1      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b49e:	2310      	movs	r3, #16
 800b4a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4a4:	e09d      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a4a      	ldr	r2, [pc, #296]	@ (800b5d4 <UART_SetConfig+0x2f0>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d125      	bne.n	800b4fc <UART_SetConfig+0x218>
 800b4b0:	4b45      	ldr	r3, [pc, #276]	@ (800b5c8 <UART_SetConfig+0x2e4>)
 800b4b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b4ba:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4bc:	d016      	beq.n	800b4ec <UART_SetConfig+0x208>
 800b4be:	2bc0      	cmp	r3, #192	@ 0xc0
 800b4c0:	d818      	bhi.n	800b4f4 <UART_SetConfig+0x210>
 800b4c2:	2b80      	cmp	r3, #128	@ 0x80
 800b4c4:	d00a      	beq.n	800b4dc <UART_SetConfig+0x1f8>
 800b4c6:	2b80      	cmp	r3, #128	@ 0x80
 800b4c8:	d814      	bhi.n	800b4f4 <UART_SetConfig+0x210>
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <UART_SetConfig+0x1f0>
 800b4ce:	2b40      	cmp	r3, #64	@ 0x40
 800b4d0:	d008      	beq.n	800b4e4 <UART_SetConfig+0x200>
 800b4d2:	e00f      	b.n	800b4f4 <UART_SetConfig+0x210>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4da:	e082      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b4dc:	2302      	movs	r3, #2
 800b4de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4e2:	e07e      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b4e4:	2304      	movs	r3, #4
 800b4e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4ea:	e07a      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b4ec:	2308      	movs	r3, #8
 800b4ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4f2:	e076      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b4f4:	2310      	movs	r3, #16
 800b4f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b4fa:	e072      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	4a35      	ldr	r2, [pc, #212]	@ (800b5d8 <UART_SetConfig+0x2f4>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d12a      	bne.n	800b55c <UART_SetConfig+0x278>
 800b506:	4b30      	ldr	r3, [pc, #192]	@ (800b5c8 <UART_SetConfig+0x2e4>)
 800b508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b50c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b514:	d01a      	beq.n	800b54c <UART_SetConfig+0x268>
 800b516:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b51a:	d81b      	bhi.n	800b554 <UART_SetConfig+0x270>
 800b51c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b520:	d00c      	beq.n	800b53c <UART_SetConfig+0x258>
 800b522:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b526:	d815      	bhi.n	800b554 <UART_SetConfig+0x270>
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d003      	beq.n	800b534 <UART_SetConfig+0x250>
 800b52c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b530:	d008      	beq.n	800b544 <UART_SetConfig+0x260>
 800b532:	e00f      	b.n	800b554 <UART_SetConfig+0x270>
 800b534:	2300      	movs	r3, #0
 800b536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b53a:	e052      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b53c:	2302      	movs	r3, #2
 800b53e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b542:	e04e      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b544:	2304      	movs	r3, #4
 800b546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b54a:	e04a      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b54c:	2308      	movs	r3, #8
 800b54e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b552:	e046      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b554:	2310      	movs	r3, #16
 800b556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b55a:	e042      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a17      	ldr	r2, [pc, #92]	@ (800b5c0 <UART_SetConfig+0x2dc>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d13a      	bne.n	800b5dc <UART_SetConfig+0x2f8>
 800b566:	4b18      	ldr	r3, [pc, #96]	@ (800b5c8 <UART_SetConfig+0x2e4>)
 800b568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b56c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b570:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b574:	d01a      	beq.n	800b5ac <UART_SetConfig+0x2c8>
 800b576:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b57a:	d81b      	bhi.n	800b5b4 <UART_SetConfig+0x2d0>
 800b57c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b580:	d00c      	beq.n	800b59c <UART_SetConfig+0x2b8>
 800b582:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b586:	d815      	bhi.n	800b5b4 <UART_SetConfig+0x2d0>
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d003      	beq.n	800b594 <UART_SetConfig+0x2b0>
 800b58c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b590:	d008      	beq.n	800b5a4 <UART_SetConfig+0x2c0>
 800b592:	e00f      	b.n	800b5b4 <UART_SetConfig+0x2d0>
 800b594:	2300      	movs	r3, #0
 800b596:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b59a:	e022      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b59c:	2302      	movs	r3, #2
 800b59e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5a2:	e01e      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b5a4:	2304      	movs	r3, #4
 800b5a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5aa:	e01a      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b5ac:	2308      	movs	r3, #8
 800b5ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5b2:	e016      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b5b4:	2310      	movs	r3, #16
 800b5b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b5ba:	e012      	b.n	800b5e2 <UART_SetConfig+0x2fe>
 800b5bc:	cfff69f3 	.word	0xcfff69f3
 800b5c0:	40008000 	.word	0x40008000
 800b5c4:	40013800 	.word	0x40013800
 800b5c8:	40021000 	.word	0x40021000
 800b5cc:	40004400 	.word	0x40004400
 800b5d0:	40004800 	.word	0x40004800
 800b5d4:	40004c00 	.word	0x40004c00
 800b5d8:	40005000 	.word	0x40005000
 800b5dc:	2310      	movs	r3, #16
 800b5de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4aae      	ldr	r2, [pc, #696]	@ (800b8a0 <UART_SetConfig+0x5bc>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	f040 8097 	bne.w	800b71c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b5f2:	2b08      	cmp	r3, #8
 800b5f4:	d823      	bhi.n	800b63e <UART_SetConfig+0x35a>
 800b5f6:	a201      	add	r2, pc, #4	@ (adr r2, 800b5fc <UART_SetConfig+0x318>)
 800b5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fc:	0800b621 	.word	0x0800b621
 800b600:	0800b63f 	.word	0x0800b63f
 800b604:	0800b629 	.word	0x0800b629
 800b608:	0800b63f 	.word	0x0800b63f
 800b60c:	0800b62f 	.word	0x0800b62f
 800b610:	0800b63f 	.word	0x0800b63f
 800b614:	0800b63f 	.word	0x0800b63f
 800b618:	0800b63f 	.word	0x0800b63f
 800b61c:	0800b637 	.word	0x0800b637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b620:	f7fc fcf6 	bl	8008010 <HAL_RCC_GetPCLK1Freq>
 800b624:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b626:	e010      	b.n	800b64a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b628:	4b9e      	ldr	r3, [pc, #632]	@ (800b8a4 <UART_SetConfig+0x5c0>)
 800b62a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b62c:	e00d      	b.n	800b64a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b62e:	f7fc fc81 	bl	8007f34 <HAL_RCC_GetSysClockFreq>
 800b632:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b634:	e009      	b.n	800b64a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b63a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b63c:	e005      	b.n	800b64a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b63e:	2300      	movs	r3, #0
 800b640:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b648:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f000 8130 	beq.w	800b8b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b656:	4a94      	ldr	r2, [pc, #592]	@ (800b8a8 <UART_SetConfig+0x5c4>)
 800b658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b65c:	461a      	mov	r2, r3
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	fbb3 f3f2 	udiv	r3, r3, r2
 800b664:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	685a      	ldr	r2, [r3, #4]
 800b66a:	4613      	mov	r3, r2
 800b66c:	005b      	lsls	r3, r3, #1
 800b66e:	4413      	add	r3, r2
 800b670:	69ba      	ldr	r2, [r7, #24]
 800b672:	429a      	cmp	r2, r3
 800b674:	d305      	bcc.n	800b682 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	429a      	cmp	r2, r3
 800b680:	d903      	bls.n	800b68a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b688:	e113      	b.n	800b8b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68c:	2200      	movs	r2, #0
 800b68e:	60bb      	str	r3, [r7, #8]
 800b690:	60fa      	str	r2, [r7, #12]
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b696:	4a84      	ldr	r2, [pc, #528]	@ (800b8a8 <UART_SetConfig+0x5c4>)
 800b698:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	2200      	movs	r2, #0
 800b6a0:	603b      	str	r3, [r7, #0]
 800b6a2:	607a      	str	r2, [r7, #4]
 800b6a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b6ac:	f7f5 f9f2 	bl	8000a94 <__aeabi_uldivmod>
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	4619      	mov	r1, r3
 800b6b8:	f04f 0200 	mov.w	r2, #0
 800b6bc:	f04f 0300 	mov.w	r3, #0
 800b6c0:	020b      	lsls	r3, r1, #8
 800b6c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b6c6:	0202      	lsls	r2, r0, #8
 800b6c8:	6979      	ldr	r1, [r7, #20]
 800b6ca:	6849      	ldr	r1, [r1, #4]
 800b6cc:	0849      	lsrs	r1, r1, #1
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	460c      	mov	r4, r1
 800b6d2:	4605      	mov	r5, r0
 800b6d4:	eb12 0804 	adds.w	r8, r2, r4
 800b6d8:	eb43 0905 	adc.w	r9, r3, r5
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	469a      	mov	sl, r3
 800b6e4:	4693      	mov	fp, r2
 800b6e6:	4652      	mov	r2, sl
 800b6e8:	465b      	mov	r3, fp
 800b6ea:	4640      	mov	r0, r8
 800b6ec:	4649      	mov	r1, r9
 800b6ee:	f7f5 f9d1 	bl	8000a94 <__aeabi_uldivmod>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	460b      	mov	r3, r1
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b700:	d308      	bcc.n	800b714 <UART_SetConfig+0x430>
 800b702:	6a3b      	ldr	r3, [r7, #32]
 800b704:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b708:	d204      	bcs.n	800b714 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	6a3a      	ldr	r2, [r7, #32]
 800b710:	60da      	str	r2, [r3, #12]
 800b712:	e0ce      	b.n	800b8b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b71a:	e0ca      	b.n	800b8b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b724:	d166      	bne.n	800b7f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b726:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b72a:	2b08      	cmp	r3, #8
 800b72c:	d827      	bhi.n	800b77e <UART_SetConfig+0x49a>
 800b72e:	a201      	add	r2, pc, #4	@ (adr r2, 800b734 <UART_SetConfig+0x450>)
 800b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b734:	0800b759 	.word	0x0800b759
 800b738:	0800b761 	.word	0x0800b761
 800b73c:	0800b769 	.word	0x0800b769
 800b740:	0800b77f 	.word	0x0800b77f
 800b744:	0800b76f 	.word	0x0800b76f
 800b748:	0800b77f 	.word	0x0800b77f
 800b74c:	0800b77f 	.word	0x0800b77f
 800b750:	0800b77f 	.word	0x0800b77f
 800b754:	0800b777 	.word	0x0800b777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b758:	f7fc fc5a 	bl	8008010 <HAL_RCC_GetPCLK1Freq>
 800b75c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b75e:	e014      	b.n	800b78a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b760:	f7fc fc6c 	bl	800803c <HAL_RCC_GetPCLK2Freq>
 800b764:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b766:	e010      	b.n	800b78a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b768:	4b4e      	ldr	r3, [pc, #312]	@ (800b8a4 <UART_SetConfig+0x5c0>)
 800b76a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b76c:	e00d      	b.n	800b78a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b76e:	f7fc fbe1 	bl	8007f34 <HAL_RCC_GetSysClockFreq>
 800b772:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b774:	e009      	b.n	800b78a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b77a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b77c:	e005      	b.n	800b78a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b77e:	2300      	movs	r3, #0
 800b780:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f000 8090 	beq.w	800b8b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b796:	4a44      	ldr	r2, [pc, #272]	@ (800b8a8 <UART_SetConfig+0x5c4>)
 800b798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b79c:	461a      	mov	r2, r3
 800b79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7a4:	005a      	lsls	r2, r3, #1
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	085b      	lsrs	r3, r3, #1
 800b7ac:	441a      	add	r2, r3
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7b8:	6a3b      	ldr	r3, [r7, #32]
 800b7ba:	2b0f      	cmp	r3, #15
 800b7bc:	d916      	bls.n	800b7ec <UART_SetConfig+0x508>
 800b7be:	6a3b      	ldr	r3, [r7, #32]
 800b7c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7c4:	d212      	bcs.n	800b7ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7c6:	6a3b      	ldr	r3, [r7, #32]
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	f023 030f 	bic.w	r3, r3, #15
 800b7ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	085b      	lsrs	r3, r3, #1
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	f003 0307 	and.w	r3, r3, #7
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	8bfb      	ldrh	r3, [r7, #30]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	8bfa      	ldrh	r2, [r7, #30]
 800b7e8:	60da      	str	r2, [r3, #12]
 800b7ea:	e062      	b.n	800b8b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b7f2:	e05e      	b.n	800b8b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b7f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b7f8:	2b08      	cmp	r3, #8
 800b7fa:	d828      	bhi.n	800b84e <UART_SetConfig+0x56a>
 800b7fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b804 <UART_SetConfig+0x520>)
 800b7fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b802:	bf00      	nop
 800b804:	0800b829 	.word	0x0800b829
 800b808:	0800b831 	.word	0x0800b831
 800b80c:	0800b839 	.word	0x0800b839
 800b810:	0800b84f 	.word	0x0800b84f
 800b814:	0800b83f 	.word	0x0800b83f
 800b818:	0800b84f 	.word	0x0800b84f
 800b81c:	0800b84f 	.word	0x0800b84f
 800b820:	0800b84f 	.word	0x0800b84f
 800b824:	0800b847 	.word	0x0800b847
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b828:	f7fc fbf2 	bl	8008010 <HAL_RCC_GetPCLK1Freq>
 800b82c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b82e:	e014      	b.n	800b85a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b830:	f7fc fc04 	bl	800803c <HAL_RCC_GetPCLK2Freq>
 800b834:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b836:	e010      	b.n	800b85a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b838:	4b1a      	ldr	r3, [pc, #104]	@ (800b8a4 <UART_SetConfig+0x5c0>)
 800b83a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b83c:	e00d      	b.n	800b85a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b83e:	f7fc fb79 	bl	8007f34 <HAL_RCC_GetSysClockFreq>
 800b842:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b844:	e009      	b.n	800b85a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b84a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b84c:	e005      	b.n	800b85a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b84e:	2300      	movs	r3, #0
 800b850:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b852:	2301      	movs	r3, #1
 800b854:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b858:	bf00      	nop
    }

    if (pclk != 0U)
 800b85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d028      	beq.n	800b8b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b864:	4a10      	ldr	r2, [pc, #64]	@ (800b8a8 <UART_SetConfig+0x5c4>)
 800b866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b86a:	461a      	mov	r2, r3
 800b86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b86e:	fbb3 f2f2 	udiv	r2, r3, r2
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	085b      	lsrs	r3, r3, #1
 800b878:	441a      	add	r2, r3
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b882:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b884:	6a3b      	ldr	r3, [r7, #32]
 800b886:	2b0f      	cmp	r3, #15
 800b888:	d910      	bls.n	800b8ac <UART_SetConfig+0x5c8>
 800b88a:	6a3b      	ldr	r3, [r7, #32]
 800b88c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b890:	d20c      	bcs.n	800b8ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	b29a      	uxth	r2, r3
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	60da      	str	r2, [r3, #12]
 800b89c:	e009      	b.n	800b8b2 <UART_SetConfig+0x5ce>
 800b89e:	bf00      	nop
 800b8a0:	40008000 	.word	0x40008000
 800b8a4:	00f42400 	.word	0x00f42400
 800b8a8:	0800db28 	.word	0x0800db28
      }
      else
      {
        ret = HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b8ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3730      	adds	r7, #48	@ 0x30
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b8dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8e8:	f003 0308 	and.w	r3, r3, #8
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00a      	beq.n	800b906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	430a      	orrs	r2, r1
 800b904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b90a:	f003 0301 	and.w	r3, r3, #1
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d00a      	beq.n	800b928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	430a      	orrs	r2, r1
 800b926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b92c:	f003 0302 	and.w	r3, r3, #2
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00a      	beq.n	800b94a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	685b      	ldr	r3, [r3, #4]
 800b93a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	430a      	orrs	r2, r1
 800b948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b94e:	f003 0304 	and.w	r3, r3, #4
 800b952:	2b00      	cmp	r3, #0
 800b954:	d00a      	beq.n	800b96c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	430a      	orrs	r2, r1
 800b96a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b970:	f003 0310 	and.w	r3, r3, #16
 800b974:	2b00      	cmp	r3, #0
 800b976:	d00a      	beq.n	800b98e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	430a      	orrs	r2, r1
 800b98c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b992:	f003 0320 	and.w	r3, r3, #32
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00a      	beq.n	800b9b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d01a      	beq.n	800b9f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	430a      	orrs	r2, r1
 800b9d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b9da:	d10a      	bne.n	800b9f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	430a      	orrs	r2, r1
 800b9f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00a      	beq.n	800ba14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	430a      	orrs	r2, r1
 800ba12:	605a      	str	r2, [r3, #4]
  }
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b098      	sub	sp, #96	@ 0x60
 800ba24:	af02      	add	r7, sp, #8
 800ba26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba30:	f7f9 fb06 	bl	8005040 <HAL_GetTick>
 800ba34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f003 0308 	and.w	r3, r3, #8
 800ba40:	2b08      	cmp	r3, #8
 800ba42:	d12f      	bne.n	800baa4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba48:	9300      	str	r3, [sp, #0]
 800ba4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba4c:	2200      	movs	r2, #0
 800ba4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f88e 	bl	800bb74 <UART_WaitOnFlagUntilTimeout>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d022      	beq.n	800baa4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba66:	e853 3f00 	ldrex	r3, [r3]
 800ba6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba72:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba84:	e841 2300 	strex	r3, r2, [r1]
 800ba88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d1e6      	bne.n	800ba5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2220      	movs	r2, #32
 800ba94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800baa0:	2303      	movs	r3, #3
 800baa2:	e063      	b.n	800bb6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0304 	and.w	r3, r3, #4
 800baae:	2b04      	cmp	r3, #4
 800bab0:	d149      	bne.n	800bb46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bab2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800baba:	2200      	movs	r2, #0
 800babc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bac0:	6878      	ldr	r0, [r7, #4]
 800bac2:	f000 f857 	bl	800bb74 <UART_WaitOnFlagUntilTimeout>
 800bac6:	4603      	mov	r3, r0
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d03c      	beq.n	800bb46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad4:	e853 3f00 	ldrex	r3, [r3]
 800bad8:	623b      	str	r3, [r7, #32]
   return(result);
 800bada:	6a3b      	ldr	r3, [r7, #32]
 800badc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	461a      	mov	r2, r3
 800bae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baea:	633b      	str	r3, [r7, #48]	@ 0x30
 800baec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800baf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800baf2:	e841 2300 	strex	r3, r2, [r1]
 800baf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800baf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d1e6      	bne.n	800bacc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	3308      	adds	r3, #8
 800bb04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	e853 3f00 	ldrex	r3, [r3]
 800bb0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f023 0301 	bic.w	r3, r3, #1
 800bb14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	3308      	adds	r3, #8
 800bb1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb1e:	61fa      	str	r2, [r7, #28]
 800bb20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb22:	69b9      	ldr	r1, [r7, #24]
 800bb24:	69fa      	ldr	r2, [r7, #28]
 800bb26:	e841 2300 	strex	r3, r2, [r1]
 800bb2a:	617b      	str	r3, [r7, #20]
   return(result);
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1e5      	bne.n	800bafe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2220      	movs	r2, #32
 800bb36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb42:	2303      	movs	r3, #3
 800bb44:	e012      	b.n	800bb6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2220      	movs	r2, #32
 800bb4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2220      	movs	r2, #32
 800bb52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3758      	adds	r7, #88	@ 0x58
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	603b      	str	r3, [r7, #0]
 800bb80:	4613      	mov	r3, r2
 800bb82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb84:	e04f      	b.n	800bc26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb8c:	d04b      	beq.n	800bc26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb8e:	f7f9 fa57 	bl	8005040 <HAL_GetTick>
 800bb92:	4602      	mov	r2, r0
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	69ba      	ldr	r2, [r7, #24]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d302      	bcc.n	800bba4 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb9e:	69bb      	ldr	r3, [r7, #24]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d101      	bne.n	800bba8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e04e      	b.n	800bc46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f003 0304 	and.w	r3, r3, #4
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d037      	beq.n	800bc26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b80      	cmp	r3, #128	@ 0x80
 800bbba:	d034      	beq.n	800bc26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	2b40      	cmp	r3, #64	@ 0x40
 800bbc0:	d031      	beq.n	800bc26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	69db      	ldr	r3, [r3, #28]
 800bbc8:	f003 0308 	and.w	r3, r3, #8
 800bbcc:	2b08      	cmp	r3, #8
 800bbce:	d110      	bne.n	800bbf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2208      	movs	r2, #8
 800bbd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f000 f920 	bl	800be1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	2208      	movs	r2, #8
 800bbe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e029      	b.n	800bc46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	69db      	ldr	r3, [r3, #28]
 800bbf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc00:	d111      	bne.n	800bc26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bc0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f000 f906 	bl	800be1e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	2220      	movs	r2, #32
 800bc16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bc22:	2303      	movs	r3, #3
 800bc24:	e00f      	b.n	800bc46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	69da      	ldr	r2, [r3, #28]
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	4013      	ands	r3, r2
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	bf0c      	ite	eq
 800bc36:	2301      	moveq	r3, #1
 800bc38:	2300      	movne	r3, #0
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	79fb      	ldrb	r3, [r7, #7]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d0a0      	beq.n	800bb86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
	...

0800bc50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b096      	sub	sp, #88	@ 0x58
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	60b9      	str	r1, [r7, #8]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	68ba      	ldr	r2, [r7, #8]
 800bc62:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	88fa      	ldrh	r2, [r7, #6]
 800bc68:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2222      	movs	r2, #34	@ 0x22
 800bc78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d02d      	beq.n	800bce2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc8c:	4a40      	ldr	r2, [pc, #256]	@ (800bd90 <UART_Start_Receive_DMA+0x140>)
 800bc8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc96:	4a3f      	ldr	r2, [pc, #252]	@ (800bd94 <UART_Start_Receive_DMA+0x144>)
 800bc98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bca0:	4a3d      	ldr	r2, [pc, #244]	@ (800bd98 <UART_Start_Receive_DMA+0x148>)
 800bca2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bcaa:	2200      	movs	r2, #0
 800bcac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3324      	adds	r3, #36	@ 0x24
 800bcba:	4619      	mov	r1, r3
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	88fb      	ldrh	r3, [r7, #6]
 800bcc4:	f7fa fff8 	bl	8006cb8 <HAL_DMA_Start_IT>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d009      	beq.n	800bce2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2210      	movs	r2, #16
 800bcd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2220      	movs	r2, #32
 800bcda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	e051      	b.n	800bd86 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d018      	beq.n	800bd1c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcf2:	e853 3f00 	ldrex	r3, [r3]
 800bcf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bcf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bcfa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcfe:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	461a      	mov	r2, r3
 800bd06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bd0a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bd0e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd10:	e841 2300 	strex	r3, r2, [r1]
 800bd14:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bd16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1e6      	bne.n	800bcea <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	3308      	adds	r3, #8
 800bd22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd26:	e853 3f00 	ldrex	r3, [r3]
 800bd2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bd2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd2e:	f043 0301 	orr.w	r3, r3, #1
 800bd32:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	3308      	adds	r3, #8
 800bd3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bd3c:	637a      	str	r2, [r7, #52]	@ 0x34
 800bd3e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bd42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bd44:	e841 2300 	strex	r3, r2, [r1]
 800bd48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d1e5      	bne.n	800bd1c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	3308      	adds	r3, #8
 800bd56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	e853 3f00 	ldrex	r3, [r3]
 800bd5e:	613b      	str	r3, [r7, #16]
   return(result);
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	3308      	adds	r3, #8
 800bd6e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bd70:	623a      	str	r2, [r7, #32]
 800bd72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd74:	69f9      	ldr	r1, [r7, #28]
 800bd76:	6a3a      	ldr	r2, [r7, #32]
 800bd78:	e841 2300 	strex	r3, r2, [r1]
 800bd7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1e5      	bne.n	800bd50 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3758      	adds	r7, #88	@ 0x58
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	0800beeb 	.word	0x0800beeb
 800bd94:	0800c01f 	.word	0x0800c01f
 800bd98:	0800c065 	.word	0x0800c065

0800bd9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b08f      	sub	sp, #60	@ 0x3c
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdaa:	6a3b      	ldr	r3, [r7, #32]
 800bdac:	e853 3f00 	ldrex	r3, [r3]
 800bdb0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bdb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bdc4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bdc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdca:	e841 2300 	strex	r3, r2, [r1]
 800bdce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1e6      	bne.n	800bda4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3308      	adds	r3, #8
 800bddc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	e853 3f00 	ldrex	r3, [r3]
 800bde4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bdec:	633b      	str	r3, [r7, #48]	@ 0x30
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	3308      	adds	r3, #8
 800bdf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdf6:	61ba      	str	r2, [r7, #24]
 800bdf8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	6979      	ldr	r1, [r7, #20]
 800bdfc:	69ba      	ldr	r2, [r7, #24]
 800bdfe:	e841 2300 	strex	r3, r2, [r1]
 800be02:	613b      	str	r3, [r7, #16]
   return(result);
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d1e5      	bne.n	800bdd6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2220      	movs	r2, #32
 800be0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800be12:	bf00      	nop
 800be14:	373c      	adds	r7, #60	@ 0x3c
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be1e:	b480      	push	{r7}
 800be20:	b095      	sub	sp, #84	@ 0x54
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be2e:	e853 3f00 	ldrex	r3, [r3]
 800be32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	461a      	mov	r2, r3
 800be42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be44:	643b      	str	r3, [r7, #64]	@ 0x40
 800be46:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be4c:	e841 2300 	strex	r3, r2, [r1]
 800be50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1e6      	bne.n	800be26 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3308      	adds	r3, #8
 800be5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be60:	6a3b      	ldr	r3, [r7, #32]
 800be62:	e853 3f00 	ldrex	r3, [r3]
 800be66:	61fb      	str	r3, [r7, #28]
   return(result);
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be6e:	f023 0301 	bic.w	r3, r3, #1
 800be72:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3308      	adds	r3, #8
 800be7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be84:	e841 2300 	strex	r3, r2, [r1]
 800be88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d1e3      	bne.n	800be58 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800be94:	2b01      	cmp	r3, #1
 800be96:	d118      	bne.n	800beca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	e853 3f00 	ldrex	r3, [r3]
 800bea4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	f023 0310 	bic.w	r3, r3, #16
 800beac:	647b      	str	r3, [r7, #68]	@ 0x44
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	461a      	mov	r2, r3
 800beb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800beb6:	61bb      	str	r3, [r7, #24]
 800beb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beba:	6979      	ldr	r1, [r7, #20]
 800bebc:	69ba      	ldr	r2, [r7, #24]
 800bebe:	e841 2300 	strex	r3, r2, [r1]
 800bec2:	613b      	str	r3, [r7, #16]
   return(result);
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1e6      	bne.n	800be98 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2220      	movs	r2, #32
 800bece:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2200      	movs	r2, #0
 800bed6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bede:	bf00      	nop
 800bee0:	3754      	adds	r7, #84	@ 0x54
 800bee2:	46bd      	mov	sp, r7
 800bee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee8:	4770      	bx	lr

0800beea <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800beea:	b580      	push	{r7, lr}
 800beec:	b09c      	sub	sp, #112	@ 0x70
 800beee:	af00      	add	r7, sp, #0
 800bef0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bef6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f003 0320 	and.w	r3, r3, #32
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d171      	bne.n	800bfea <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800bf06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf08:	2200      	movs	r2, #0
 800bf0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bf0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf16:	e853 3f00 	ldrex	r3, [r3]
 800bf1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bf1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bf22:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bf24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	461a      	mov	r2, r3
 800bf2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bf2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bf2e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bf32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bf34:	e841 2300 	strex	r3, r2, [r1]
 800bf38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bf3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d1e6      	bne.n	800bf0e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	3308      	adds	r3, #8
 800bf46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf4a:	e853 3f00 	ldrex	r3, [r3]
 800bf4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bf50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf52:	f023 0301 	bic.w	r3, r3, #1
 800bf56:	667b      	str	r3, [r7, #100]	@ 0x64
 800bf58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	3308      	adds	r3, #8
 800bf5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bf60:	647a      	str	r2, [r7, #68]	@ 0x44
 800bf62:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bf66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf68:	e841 2300 	strex	r3, r2, [r1]
 800bf6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d1e5      	bne.n	800bf40 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	3308      	adds	r3, #8
 800bf7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf7e:	e853 3f00 	ldrex	r3, [r3]
 800bf82:	623b      	str	r3, [r7, #32]
   return(result);
 800bf84:	6a3b      	ldr	r3, [r7, #32]
 800bf86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf8a:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	3308      	adds	r3, #8
 800bf92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bf94:	633a      	str	r2, [r7, #48]	@ 0x30
 800bf96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf9c:	e841 2300 	strex	r3, r2, [r1]
 800bfa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d1e5      	bne.n	800bf74 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bfa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfaa:	2220      	movs	r2, #32
 800bfac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d118      	bne.n	800bfea <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	e853 3f00 	ldrex	r3, [r3]
 800bfc4:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f023 0310 	bic.w	r3, r3, #16
 800bfcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	461a      	mov	r2, r3
 800bfd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfd6:	61fb      	str	r3, [r7, #28]
 800bfd8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfda:	69b9      	ldr	r1, [r7, #24]
 800bfdc:	69fa      	ldr	r2, [r7, #28]
 800bfde:	e841 2300 	strex	r3, r2, [r1]
 800bfe2:	617b      	str	r3, [r7, #20]
   return(result);
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d1e6      	bne.n	800bfb8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfec:	2200      	movs	r2, #0
 800bfee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bff2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d109      	bne.n	800c00c <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800bff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bffa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800bffe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c000:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c004:	4611      	mov	r1, r2
 800c006:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c008:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c00a:	e004      	b.n	800c016 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800c00c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c00e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c012:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c014:	4798      	blx	r3
}
 800c016:	bf00      	nop
 800c018:	3770      	adds	r7, #112	@ 0x70
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c01e:	b580      	push	{r7, lr}
 800c020:	b084      	sub	sp, #16
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c02a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	2201      	movs	r2, #1
 800c030:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c036:	2b01      	cmp	r3, #1
 800c038:	d10b      	bne.n	800c052 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c046:	0852      	lsrs	r2, r2, #1
 800c048:	b292      	uxth	r2, r2
 800c04a:	4611      	mov	r1, r2
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c050:	e004      	b.n	800c05c <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	4798      	blx	r3
}
 800c05c:	bf00      	nop
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b086      	sub	sp, #24
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c070:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c078:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c080:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c082:	697b      	ldr	r3, [r7, #20]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c08c:	2b80      	cmp	r3, #128	@ 0x80
 800c08e:	d109      	bne.n	800c0a4 <UART_DMAError+0x40>
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	2b21      	cmp	r3, #33	@ 0x21
 800c094:	d106      	bne.n	800c0a4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	2200      	movs	r2, #0
 800c09a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800c09e:	6978      	ldr	r0, [r7, #20]
 800c0a0:	f7ff fe7c 	bl	800bd9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	689b      	ldr	r3, [r3, #8]
 800c0aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c0ae:	2b40      	cmp	r3, #64	@ 0x40
 800c0b0:	d109      	bne.n	800c0c6 <UART_DMAError+0x62>
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2b22      	cmp	r3, #34	@ 0x22
 800c0b6:	d106      	bne.n	800c0c6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800c0c0:	6978      	ldr	r0, [r7, #20]
 800c0c2:	f7ff feac 	bl	800be1e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0cc:	f043 0210 	orr.w	r2, r3, #16
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c0dc:	6978      	ldr	r0, [r7, #20]
 800c0de:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0e0:	bf00      	nop
 800c0e2:	3718      	adds	r7, #24
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}

0800c0e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c104:	68f8      	ldr	r0, [r7, #12]
 800c106:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c108:	bf00      	nop
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b088      	sub	sp, #32
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	e853 3f00 	ldrex	r3, [r3]
 800c124:	60bb      	str	r3, [r7, #8]
   return(result);
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c12c:	61fb      	str	r3, [r7, #28]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	461a      	mov	r2, r3
 800c134:	69fb      	ldr	r3, [r7, #28]
 800c136:	61bb      	str	r3, [r7, #24]
 800c138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c13a:	6979      	ldr	r1, [r7, #20]
 800c13c:	69ba      	ldr	r2, [r7, #24]
 800c13e:	e841 2300 	strex	r3, r2, [r1]
 800c142:	613b      	str	r3, [r7, #16]
   return(result);
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d1e6      	bne.n	800c118 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2220      	movs	r2, #32
 800c14e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c162:	bf00      	nop
 800c164:	3720      	adds	r7, #32
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c16a:	b480      	push	{r7}
 800c16c:	b083      	sub	sp, #12
 800c16e:	af00      	add	r7, sp, #0
 800c170:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c172:	bf00      	nop
 800c174:	370c      	adds	r7, #12
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c17e:	b480      	push	{r7}
 800c180:	b083      	sub	sp, #12
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c186:	bf00      	nop
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c192:	b480      	push	{r7}
 800c194:	b083      	sub	sp, #12
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c19a:	bf00      	nop
 800c19c:	370c      	adds	r7, #12
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr

0800c1a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c1a6:	b480      	push	{r7}
 800c1a8:	b085      	sub	sp, #20
 800c1aa:	af00      	add	r7, sp, #0
 800c1ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d101      	bne.n	800c1bc <HAL_UARTEx_DisableFifoMode+0x16>
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	e027      	b.n	800c20c <HAL_UARTEx_DisableFifoMode+0x66>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2224      	movs	r2, #36	@ 0x24
 800c1c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f022 0201 	bic.w	r2, r2, #1
 800c1e2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c1ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	68fa      	ldr	r2, [r7, #12]
 800c1f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2220      	movs	r2, #32
 800c1fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2200      	movs	r2, #0
 800c206:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c20a:	2300      	movs	r3, #0
}
 800c20c:	4618      	mov	r0, r3
 800c20e:	3714      	adds	r7, #20
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b084      	sub	sp, #16
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d101      	bne.n	800c230 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c22c:	2302      	movs	r3, #2
 800c22e:	e02d      	b.n	800c28c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2224      	movs	r2, #36	@ 0x24
 800c23c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f022 0201 	bic.w	r2, r2, #1
 800c256:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	689b      	ldr	r3, [r3, #8]
 800c25e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	430a      	orrs	r2, r1
 800c26a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f000 f84f 	bl	800c310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2220      	movs	r2, #32
 800c27e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2200      	movs	r2, #0
 800c286:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3710      	adds	r7, #16
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b084      	sub	sp, #16
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d101      	bne.n	800c2ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c2a8:	2302      	movs	r3, #2
 800c2aa:	e02d      	b.n	800c308 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2224      	movs	r2, #36	@ 0x24
 800c2b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f022 0201 	bic.w	r2, r2, #1
 800c2d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	683a      	ldr	r2, [r7, #0]
 800c2e4:	430a      	orrs	r2, r1
 800c2e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 f811 	bl	800c310 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2220      	movs	r2, #32
 800c2fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2200      	movs	r2, #0
 800c302:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c306:	2300      	movs	r3, #0
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}

0800c310 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c310:	b480      	push	{r7}
 800c312:	b085      	sub	sp, #20
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d108      	bne.n	800c332 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2201      	movs	r2, #1
 800c32c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c330:	e031      	b.n	800c396 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c332:	2308      	movs	r3, #8
 800c334:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c336:	2308      	movs	r3, #8
 800c338:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	0e5b      	lsrs	r3, r3, #25
 800c342:	b2db      	uxtb	r3, r3
 800c344:	f003 0307 	and.w	r3, r3, #7
 800c348:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	0f5b      	lsrs	r3, r3, #29
 800c352:	b2db      	uxtb	r3, r3
 800c354:	f003 0307 	and.w	r3, r3, #7
 800c358:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c35a:	7bbb      	ldrb	r3, [r7, #14]
 800c35c:	7b3a      	ldrb	r2, [r7, #12]
 800c35e:	4911      	ldr	r1, [pc, #68]	@ (800c3a4 <UARTEx_SetNbDataToProcess+0x94>)
 800c360:	5c8a      	ldrb	r2, [r1, r2]
 800c362:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c366:	7b3a      	ldrb	r2, [r7, #12]
 800c368:	490f      	ldr	r1, [pc, #60]	@ (800c3a8 <UARTEx_SetNbDataToProcess+0x98>)
 800c36a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c36c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c370:	b29a      	uxth	r2, r3
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c378:	7bfb      	ldrb	r3, [r7, #15]
 800c37a:	7b7a      	ldrb	r2, [r7, #13]
 800c37c:	4909      	ldr	r1, [pc, #36]	@ (800c3a4 <UARTEx_SetNbDataToProcess+0x94>)
 800c37e:	5c8a      	ldrb	r2, [r1, r2]
 800c380:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c384:	7b7a      	ldrb	r2, [r7, #13]
 800c386:	4908      	ldr	r1, [pc, #32]	@ (800c3a8 <UARTEx_SetNbDataToProcess+0x98>)
 800c388:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c38a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c38e:	b29a      	uxth	r2, r3
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c396:	bf00      	nop
 800c398:	3714      	adds	r7, #20
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	0800db40 	.word	0x0800db40
 800c3a8:	0800db48 	.word	0x0800db48

0800c3ac <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b08b      	sub	sp, #44	@ 0x2c
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	685b      	ldr	r3, [r3, #4]
 800c3c2:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	885b      	ldrh	r3, [r3, #2]
 800c3d4:	fb02 f303 	mul.w	r3, r2, r3
 800c3d8:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800c3de:	e013      	b.n	800c408 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e2:	1d1a      	adds	r2, r3, #4
 800c3e4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c3e6:	ed93 7a00 	vldr	s14, [r3]
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	1d1a      	adds	r2, r3, #4
 800c3ee:	623a      	str	r2, [r7, #32]
 800c3f0:	edd3 7a00 	vldr	s15, [r3]
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	1d1a      	adds	r2, r3, #4
 800c3f8:	61fa      	str	r2, [r7, #28]
 800c3fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3fe:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	3b01      	subs	r3, #1
 800c406:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1e8      	bne.n	800c3e0 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800c40e:	2300      	movs	r3, #0
 800c410:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800c412:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800c416:	4618      	mov	r0, r3
 800c418:	372c      	adds	r7, #44	@ 0x2c
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr

0800c422 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800c422:	b480      	push	{r7}
 800c424:	b085      	sub	sp, #20
 800c426:	af00      	add	r7, sp, #0
 800c428:	60f8      	str	r0, [r7, #12]
 800c42a:	607b      	str	r3, [r7, #4]
 800c42c:	460b      	mov	r3, r1
 800c42e:	817b      	strh	r3, [r7, #10]
 800c430:	4613      	mov	r3, r2
 800c432:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	897a      	ldrh	r2, [r7, #10]
 800c438:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	893a      	ldrh	r2, [r7, #8]
 800c43e:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	605a      	str	r2, [r3, #4]
}
 800c446:	bf00      	nop
 800c448:	3714      	adds	r7, #20
 800c44a:	46bd      	mov	sp, r7
 800c44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c450:	4770      	bx	lr

0800c452 <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800c452:	b480      	push	{r7}
 800c454:	b0bb      	sub	sp, #236	@ 0xec
 800c456:	af00      	add	r7, sp, #0
 800c458:	6078      	str	r0, [r7, #4]
 800c45a:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	881b      	ldrh	r3, [r3, #0]
 800c46c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	885b      	ldrh	r3, [r3, #2]
 800c472:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800c474:	f04f 0300 	mov.w	r3, #0
 800c478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c47c:	f04f 0300 	mov.w	r3, #0
 800c480:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800c482:	2300      	movs	r3, #0
 800c484:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800c488:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c48a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800c48e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c490:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800c494:	e03b      	b.n	800c50e <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800c496:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c498:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c49c:	1ad3      	subs	r3, r2, r3
 800c49e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c4a2:	e00c      	b.n	800c4be <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800c4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4a8:	1d1a      	adds	r2, r3, #4
 800c4aa:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c4ae:	f04f 0200 	mov.w	r2, #0
 800c4b2:	601a      	str	r2, [r3, #0]
        j--;
 800c4b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c4be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1ee      	bne.n	800c4a4 <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800c4c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4ca:	1d1a      	adds	r2, r3, #4
 800c4cc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c4d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c4d4:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800c4d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c4e0:	e00c      	b.n	800c4fc <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800c4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4e6:	1d1a      	adds	r2, r3, #4
 800c4e8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800c4ec:	f04f 0200 	mov.w	r2, #0
 800c4f0:	601a      	str	r2, [r3, #0]
        j--;
 800c4f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4f6:	3b01      	subs	r3, #1
 800c4f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800c4fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1ee      	bne.n	800c4e2 <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800c504:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c508:	3b01      	subs	r3, #1
 800c50a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800c50e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c512:	2b00      	cmp	r3, #0
 800c514:	d1bf      	bne.n	800c496 <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800c516:	2300      	movs	r3, #0
 800c518:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c51c:	e2c7      	b.n	800caae <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800c51e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c522:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	685a      	ldr	r2, [r3, #4]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	885b      	ldrh	r3, [r3, #2]
 800c52c:	3301      	adds	r3, #1
 800c52e:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800c532:	fb01 f303 	mul.w	r3, r1, r3
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	4413      	add	r3, r2
 800c53a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800c53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800c548:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c54c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800c550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c554:	3301      	adds	r3, #1
 800c556:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c55a:	e02c      	b.n	800c5b6 <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	685a      	ldr	r2, [r3, #4]
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	885b      	ldrh	r3, [r3, #2]
 800c564:	4619      	mov	r1, r3
 800c566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c56a:	fb03 f101 	mul.w	r1, r3, r1
 800c56e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c572:	440b      	add	r3, r1
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4413      	add	r3, r2
 800c578:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800c57c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800c584:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800c588:	eeb0 7ae7 	vabs.f32	s14, s15
 800c58c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c590:	eef0 7ae7 	vabs.f32	s15, s15
 800c594:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c59c:	dd06      	ble.n	800c5ac <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800c59e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800c5a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800c5ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c5b6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c5ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	d3cd      	bcc.n	800c55c <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800c5c0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c5c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5cc:	f000 809b 	beq.w	800c706 <arm_mat_inverse_f32+0x2b4>
 800c5d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c5d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	f000 8094 	beq.w	800c706 <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	885b      	ldrh	r3, [r3, #2]
 800c5f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c5f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c5f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c600:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c602:	fb03 f202 	mul.w	r2, r3, r2
 800c606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c60a:	4413      	add	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c612:	4413      	add	r3, r2
 800c614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c61a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c61e:	fb03 f202 	mul.w	r2, r3, r2
 800c622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c626:	4413      	add	r3, r2
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c62e:	4413      	add	r3, r2
 800c630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c634:	2300      	movs	r3, #0
 800c636:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c63a:	e018      	b.n	800c66e <arm_mat_inverse_f32+0x21c>
 800c63c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c644:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c648:	1d1a      	adds	r2, r3, #4
 800c64a:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800c64e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c652:	6812      	ldr	r2, [r2, #0]
 800c654:	601a      	str	r2, [r3, #0]
 800c656:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c65a:	1d1a      	adds	r2, r3, #4
 800c65c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800c660:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c662:	601a      	str	r2, [r3, #0]
 800c664:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c668:	3301      	adds	r3, #1
 800c66a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c66e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800c672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c674:	429a      	cmp	r2, r3
 800c676:	dbe1      	blt.n	800c63c <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	885b      	ldrh	r3, [r3, #2]
 800c68c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c68e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c690:	643b      	str	r3, [r7, #64]	@ 0x40
 800c692:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c694:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c696:	fb02 f303 	mul.w	r3, r2, r3
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c6a0:	4413      	add	r3, r2
 800c6a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c6a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800c6ac:	fb02 f303 	mul.w	r3, r2, r3
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c6b6:	4413      	add	r3, r2
 800c6b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c6bc:	2300      	movs	r3, #0
 800c6be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c6c2:	e018      	b.n	800c6f6 <arm_mat_inverse_f32+0x2a4>
 800c6c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c6cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c6d0:	1d1a      	adds	r2, r3, #4
 800c6d2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800c6d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c6da:	6812      	ldr	r2, [r2, #0]
 800c6dc:	601a      	str	r2, [r3, #0]
 800c6de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c6e2:	1d1a      	adds	r2, r3, #4
 800c6e4:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c6e8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c6ea:	601a      	str	r2, [r3, #0]
 800c6ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c6f0:	3301      	adds	r3, #1
 800c6f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c6f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c6fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6fc:	429a      	cmp	r2, r3
 800c6fe:	dbe1      	blt.n	800c6c4 <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800c700:	2301      	movs	r3, #1
 800c702:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800c706:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c70a:	2b01      	cmp	r3, #1
 800c70c:	d009      	beq.n	800c722 <arm_mat_inverse_f32+0x2d0>
 800c70e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c712:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c71a:	d102      	bne.n	800c722 <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800c71c:	f06f 0304 	mvn.w	r3, #4
 800c720:	e208      	b.n	800cb34 <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800c722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c726:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800c72a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c72e:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	885b      	ldrh	r3, [r3, #2]
 800c73e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c740:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c742:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	633b      	str	r3, [r7, #48]	@ 0x30
 800c74a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c74c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c74e:	fb03 f202 	mul.w	r2, r3, r2
 800c752:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c756:	4413      	add	r3, r2
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800c75e:	4413      	add	r3, r2
 800c760:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c764:	2300      	movs	r3, #0
 800c766:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c76a:	e011      	b.n	800c790 <arm_mat_inverse_f32+0x33e>
 800c76c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c770:	1d1a      	adds	r2, r3, #4
 800c772:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800c776:	ed93 7a00 	vldr	s14, [r3]
 800c77a:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c782:	edc3 7a00 	vstr	s15, [r3]
 800c786:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c78a:	3301      	adds	r3, #1
 800c78c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c790:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800c794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c796:	429a      	cmp	r2, r3
 800c798:	dbe8      	blt.n	800c76c <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	885b      	ldrh	r3, [r3, #2]
 800c7a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c7b0:	fb02 f303 	mul.w	r3, r2, r3
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c7c6:	e011      	b.n	800c7ec <arm_mat_inverse_f32+0x39a>
 800c7c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c7cc:	1d1a      	adds	r2, r3, #4
 800c7ce:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800c7d2:	ed93 7a00 	vldr	s14, [r3]
 800c7d6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c7da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7de:	edc3 7a00 	vstr	s15, [r3]
 800c7e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c7ec:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800c7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	dbe8      	blt.n	800c7c8 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800c7fc:	e0ae      	b.n	800c95c <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	885b      	ldrh	r3, [r3, #2]
 800c806:	4619      	mov	r1, r3
 800c808:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c80c:	fb03 f101 	mul.w	r1, r3, r1
 800c810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c814:	440b      	add	r3, r1
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	4413      	add	r3, r2
 800c81a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	685b      	ldr	r3, [r3, #4]
 800c82c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	885b      	ldrh	r3, [r3, #2]
 800c83c:	617b      	str	r3, [r7, #20]
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c844:	1ad3      	subs	r3, r2, r3
 800c846:	613b      	str	r3, [r7, #16]
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c84e:	fb03 f202 	mul.w	r2, r3, r2
 800c852:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800c85e:	4413      	add	r3, r2
 800c860:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c868:	fb03 f202 	mul.w	r2, r3, r2
 800c86c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c870:	4413      	add	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800c878:	4413      	add	r3, r2
 800c87a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c87e:	2300      	movs	r3, #0
 800c880:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c884:	e01a      	b.n	800c8bc <arm_mat_inverse_f32+0x46a>
 800c886:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c88a:	1d1a      	adds	r2, r3, #4
 800c88c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800c890:	ed93 7a00 	vldr	s14, [r3]
 800c894:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c89c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c8a0:	1d1a      	adds	r2, r3, #4
 800c8a2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800c8a6:	ed93 7a00 	vldr	s14, [r3]
 800c8aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c8ae:	edc3 7a00 	vstr	s15, [r3]
 800c8b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c8bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	429a      	cmp	r2, r3
 800c8c4:	dbdf      	blt.n	800c886 <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	885b      	ldrh	r3, [r3, #2]
 800c8da:	60fb      	str	r3, [r7, #12]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	60bb      	str	r3, [r7, #8]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c8e6:	fb02 f303 	mul.w	r3, r2, r3
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c8fa:	fb02 f303 	mul.w	r3, r2, r3
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c904:	4413      	add	r3, r2
 800c906:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c90a:	2300      	movs	r3, #0
 800c90c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c910:	e01a      	b.n	800c948 <arm_mat_inverse_f32+0x4f6>
 800c912:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c916:	1d1a      	adds	r2, r3, #4
 800c918:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c91c:	ed93 7a00 	vldr	s14, [r3]
 800c920:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c924:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c92c:	1d1a      	adds	r2, r3, #4
 800c92e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800c932:	ed93 7a00 	vldr	s14, [r3]
 800c936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c93a:	edc3 7a00 	vstr	s15, [r3]
 800c93e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c942:	3301      	adds	r3, #1
 800c944:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c948:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	429a      	cmp	r2, r3
 800c950:	dbdf      	blt.n	800c912 <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800c952:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c956:	3301      	adds	r3, #1
 800c958:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c95c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c960:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c962:	429a      	cmp	r2, r3
 800c964:	f4ff af4b 	bcc.w	800c7fe <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800c968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c96a:	3301      	adds	r3, #1
 800c96c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c970:	e092      	b.n	800ca98 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	885b      	ldrh	r3, [r3, #2]
 800c97a:	4619      	mov	r1, r3
 800c97c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c980:	fb03 f101 	mul.w	r1, r3, r1
 800c984:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c988:	440b      	add	r3, r1
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800c992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	685b      	ldr	r3, [r3, #4]
 800c9a6:	677b      	str	r3, [r7, #116]	@ 0x74
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	885b      	ldrh	r3, [r3, #2]
 800c9ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800c9ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	623b      	str	r3, [r7, #32]
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ba:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800c9be:	fb03 f202 	mul.w	r2, r3, r2
 800c9c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9c6:	4413      	add	r3, r2
 800c9c8:	009b      	lsls	r3, r3, #2
 800c9ca:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c9cc:	4413      	add	r3, r2
 800c9ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c9d4:	fb03 f202 	mul.w	r2, r3, r2
 800c9d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c9dc:	4413      	add	r3, r2
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c9e2:	4413      	add	r3, r2
 800c9e4:	677b      	str	r3, [r7, #116]	@ 0x74
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c9ea:	e014      	b.n	800ca16 <arm_mat_inverse_f32+0x5c4>
 800c9ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9ee:	1d1a      	adds	r2, r3, #4
 800c9f0:	677a      	str	r2, [r7, #116]	@ 0x74
 800c9f2:	ed93 7a00 	vldr	s14, [r3]
 800c9f6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800c9fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ca00:	1d1a      	adds	r2, r3, #4
 800ca02:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ca04:	ed93 7a00 	vldr	s14, [r3]
 800ca08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca0c:	edc3 7a00 	vstr	s15, [r3]
 800ca10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ca12:	3301      	adds	r3, #1
 800ca14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ca16:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800ca18:	6a3b      	ldr	r3, [r7, #32]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	dbe6      	blt.n	800c9ec <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	685b      	ldr	r3, [r3, #4]
 800ca28:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	885b      	ldrh	r3, [r3, #2]
 800ca2e:	61fb      	str	r3, [r7, #28]
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	61bb      	str	r3, [r7, #24]
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ca3a:	fb02 f303 	mul.w	r3, r2, r3
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ca42:	4413      	add	r3, r2
 800ca44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ca4a:	fb02 f303 	mul.w	r3, r2, r3
 800ca4e:	009b      	lsls	r3, r3, #2
 800ca50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ca52:	4413      	add	r3, r2
 800ca54:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca56:	2300      	movs	r3, #0
 800ca58:	673b      	str	r3, [r7, #112]	@ 0x70
 800ca5a:	e014      	b.n	800ca86 <arm_mat_inverse_f32+0x634>
 800ca5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca5e:	1d1a      	adds	r2, r3, #4
 800ca60:	66ba      	str	r2, [r7, #104]	@ 0x68
 800ca62:	ed93 7a00 	vldr	s14, [r3]
 800ca66:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800ca6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca70:	1d1a      	adds	r2, r3, #4
 800ca72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ca74:	ed93 7a00 	vldr	s14, [r3]
 800ca78:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ca7c:	edc3 7a00 	vstr	s15, [r3]
 800ca80:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca82:	3301      	adds	r3, #1
 800ca84:	673b      	str	r3, [r7, #112]	@ 0x70
 800ca86:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	dbe6      	blt.n	800ca5c <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800ca8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ca92:	3301      	adds	r3, #1
 800ca94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ca98:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800ca9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	f4ff af67 	bcc.w	800c972 <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800caa4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800caa8:	3301      	adds	r3, #1
 800caaa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800caae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800cab2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cab4:	429a      	cmp	r2, r3
 800cab6:	f4ff ad32 	bcc.w	800c51e <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800caba:	2300      	movs	r3, #0
 800cabc:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800cac0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d033      	beq.n	800cb30 <arm_mat_inverse_f32+0x6de>
 800cac8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800cacc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad4:	d12c      	bne.n	800cb30 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800cadc:	2300      	movs	r3, #0
 800cade:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cae2:	e010      	b.n	800cb06 <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800cae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800caec:	4413      	add	r3, r2
 800caee:	edd3 7a00 	vldr	s15, [r3]
 800caf2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800caf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cafa:	d10d      	bne.n	800cb18 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800cafc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cb00:	3301      	adds	r3, #1
 800cb02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cb06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb0a:	fb02 f303 	mul.w	r3, r2, r3
 800cb0e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d3e6      	bcc.n	800cae4 <arm_mat_inverse_f32+0x692>
 800cb16:	e000      	b.n	800cb1a <arm_mat_inverse_f32+0x6c8>
            break;
 800cb18:	bf00      	nop
      }

      if (i == numRows * numCols)
 800cb1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cb1e:	fb02 f303 	mul.w	r3, r2, r3
 800cb22:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d102      	bne.n	800cb30 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800cb2a:	23fb      	movs	r3, #251	@ 0xfb
 800cb2c:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800cb30:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	37ec      	adds	r7, #236	@ 0xec
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3e:	4770      	bx	lr

0800cb40 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b093      	sub	sp, #76	@ 0x4c
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	881b      	ldrh	r3, [r3, #0]
 800cb6e:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800cb70:	68bb      	ldr	r3, [r7, #8]
 800cb72:	885b      	ldrh	r3, [r3, #2]
 800cb74:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	885b      	ldrh	r3, [r3, #2]
 800cb7a:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb80:	8b7b      	ldrh	r3, [r7, #26]
 800cb82:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800cb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb86:	009b      	lsls	r3, r3, #2
 800cb88:	69fa      	ldr	r2, [r7, #28]
 800cb8a:	4413      	add	r3, r2
 800cb8c:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800cb8e:	8b3b      	ldrh	r3, [r7, #24]
 800cb90:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800cb98:	f04f 0300 	mov.w	r3, #0
 800cb9c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800cb9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cba0:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800cba2:	8afb      	ldrh	r3, [r7, #22]
 800cba4:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800cba6:	e017      	b.n	800cbd8 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800cba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbaa:	1d1a      	adds	r2, r3, #4
 800cbac:	647a      	str	r2, [r7, #68]	@ 0x44
 800cbae:	ed93 7a00 	vldr	s14, [r3]
 800cbb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbb4:	edd3 7a00 	vldr	s15, [r3]
 800cbb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbbc:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800cbc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cbc4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800cbc8:	8b3b      	ldrh	r3, [r7, #24]
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbce:	4413      	add	r3, r2
 800cbd0:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800cbd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d1e4      	bne.n	800cba8 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800cbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe0:	1d1a      	adds	r2, r3, #4
 800cbe2:	63ba      	str	r2, [r7, #56]	@ 0x38
 800cbe4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cbe6:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbea:	3b01      	subs	r3, #1
 800cbec:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800cbee:	8b3a      	ldrh	r2, [r7, #24]
 800cbf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbf2:	1ad3      	subs	r3, r2, r3
 800cbf4:	009b      	lsls	r3, r3, #2
 800cbf6:	6a3a      	ldr	r2, [r7, #32]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d1ca      	bne.n	800cb98 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800cc02:	8b3b      	ldrh	r3, [r7, #24]
 800cc04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc06:	4413      	add	r3, r2
 800cc08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800cc0a:	8afb      	ldrh	r3, [r7, #22]
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cc10:	4413      	add	r3, r2
 800cc12:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800cc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc16:	3b01      	subs	r3, #1
 800cc18:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800cc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1b1      	bne.n	800cb84 <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800cc20:	2300      	movs	r3, #0
 800cc22:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800cc24:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	374c      	adds	r7, #76	@ 0x4c
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr

0800cc34 <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b08b      	sub	sp, #44	@ 0x2c
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	ed87 0a02 	vstr	s0, [r7, #8]
 800cc40:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	881b      	ldrh	r3, [r3, #0]
 800cc52:	461a      	mov	r2, r3
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	885b      	ldrh	r3, [r3, #2]
 800cc58:	fb02 f303 	mul.w	r3, r2, r3
 800cc5c:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800cc5e:	69bb      	ldr	r3, [r7, #24]
 800cc60:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800cc62:	e010      	b.n	800cc86 <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800cc64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc66:	1d1a      	adds	r2, r3, #4
 800cc68:	627a      	str	r2, [r7, #36]	@ 0x24
 800cc6a:	ed93 7a00 	vldr	s14, [r3]
 800cc6e:	6a3b      	ldr	r3, [r7, #32]
 800cc70:	1d1a      	adds	r2, r3, #4
 800cc72:	623a      	str	r2, [r7, #32]
 800cc74:	edd7 7a02 	vldr	s15, [r7, #8]
 800cc78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc7c:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800cc80:	69fb      	ldr	r3, [r7, #28]
 800cc82:	3b01      	subs	r3, #1
 800cc84:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d1eb      	bne.n	800cc64 <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800cc90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	372c      	adds	r7, #44	@ 0x2c
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800cca0:	b480      	push	{r7}
 800cca2:	b08b      	sub	sp, #44	@ 0x2c
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	881b      	ldrh	r3, [r3, #0]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	885b      	ldrh	r3, [r3, #2]
 800ccc8:	fb02 f303 	mul.w	r3, r2, r3
 800cccc:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800ccd2:	e013      	b.n	800ccfc <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd6:	1d1a      	adds	r2, r3, #4
 800ccd8:	627a      	str	r2, [r7, #36]	@ 0x24
 800ccda:	ed93 7a00 	vldr	s14, [r3]
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	1d1a      	adds	r2, r3, #4
 800cce2:	623a      	str	r2, [r7, #32]
 800cce4:	edd3 7a00 	vldr	s15, [r3]
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	1d1a      	adds	r2, r3, #4
 800ccec:	61fa      	str	r2, [r7, #28]
 800ccee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ccf2:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	3b01      	subs	r3, #1
 800ccfa:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d1e8      	bne.n	800ccd4 <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800cd02:	2300      	movs	r3, #0
 800cd04:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800cd06:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	372c      	adds	r7, #44	@ 0x2c
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800cd16:	b480      	push	{r7}
 800cd18:	b08b      	sub	sp, #44	@ 0x2c
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	881b      	ldrh	r3, [r3, #0]
 800cd30:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	885b      	ldrh	r3, [r3, #2]
 800cd36:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800cd38:	89fb      	ldrh	r3, [r7, #14]
 800cd3a:	61bb      	str	r3, [r7, #24]
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	009b      	lsls	r3, r3, #2
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	4413      	add	r3, r2
 800cd48:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800cd4a:	89bb      	ldrh	r3, [r7, #12]
 800cd4c:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800cd4e:	e00d      	b.n	800cd6c <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800cd50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd52:	1d1a      	adds	r2, r3, #4
 800cd54:	627a      	str	r2, [r7, #36]	@ 0x24
 800cd56:	681a      	ldr	r2, [r3, #0]
 800cd58:	6a3b      	ldr	r3, [r7, #32]
 800cd5a:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800cd5c:	89fb      	ldrh	r3, [r7, #14]
 800cd5e:	009b      	lsls	r3, r3, #2
 800cd60:	6a3a      	ldr	r2, [r7, #32]
 800cd62:	4413      	add	r3, r2
 800cd64:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800cd66:	69fb      	ldr	r3, [r7, #28]
 800cd68:	3b01      	subs	r3, #1
 800cd6a:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1ee      	bne.n	800cd50 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	3301      	adds	r3, #1
 800cd76:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800cd78:	69bb      	ldr	r3, [r7, #24]
 800cd7a:	3b01      	subs	r3, #1
 800cd7c:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d1dd      	bne.n	800cd40 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800cd84:	2300      	movs	r3, #0
 800cd86:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800cd88:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	372c      	adds	r7, #44	@ 0x2c
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <malloc>:
 800cd98:	4b02      	ldr	r3, [pc, #8]	@ (800cda4 <malloc+0xc>)
 800cd9a:	4601      	mov	r1, r0
 800cd9c:	6818      	ldr	r0, [r3, #0]
 800cd9e:	f000 b825 	b.w	800cdec <_malloc_r>
 800cda2:	bf00      	nop
 800cda4:	20000198 	.word	0x20000198

0800cda8 <sbrk_aligned>:
 800cda8:	b570      	push	{r4, r5, r6, lr}
 800cdaa:	4e0f      	ldr	r6, [pc, #60]	@ (800cde8 <sbrk_aligned+0x40>)
 800cdac:	460c      	mov	r4, r1
 800cdae:	6831      	ldr	r1, [r6, #0]
 800cdb0:	4605      	mov	r5, r0
 800cdb2:	b911      	cbnz	r1, 800cdba <sbrk_aligned+0x12>
 800cdb4:	f000 f8ae 	bl	800cf14 <_sbrk_r>
 800cdb8:	6030      	str	r0, [r6, #0]
 800cdba:	4621      	mov	r1, r4
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	f000 f8a9 	bl	800cf14 <_sbrk_r>
 800cdc2:	1c43      	adds	r3, r0, #1
 800cdc4:	d103      	bne.n	800cdce <sbrk_aligned+0x26>
 800cdc6:	f04f 34ff 	mov.w	r4, #4294967295
 800cdca:	4620      	mov	r0, r4
 800cdcc:	bd70      	pop	{r4, r5, r6, pc}
 800cdce:	1cc4      	adds	r4, r0, #3
 800cdd0:	f024 0403 	bic.w	r4, r4, #3
 800cdd4:	42a0      	cmp	r0, r4
 800cdd6:	d0f8      	beq.n	800cdca <sbrk_aligned+0x22>
 800cdd8:	1a21      	subs	r1, r4, r0
 800cdda:	4628      	mov	r0, r5
 800cddc:	f000 f89a 	bl	800cf14 <_sbrk_r>
 800cde0:	3001      	adds	r0, #1
 800cde2:	d1f2      	bne.n	800cdca <sbrk_aligned+0x22>
 800cde4:	e7ef      	b.n	800cdc6 <sbrk_aligned+0x1e>
 800cde6:	bf00      	nop
 800cde8:	20002134 	.word	0x20002134

0800cdec <_malloc_r>:
 800cdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdf0:	1ccd      	adds	r5, r1, #3
 800cdf2:	f025 0503 	bic.w	r5, r5, #3
 800cdf6:	3508      	adds	r5, #8
 800cdf8:	2d0c      	cmp	r5, #12
 800cdfa:	bf38      	it	cc
 800cdfc:	250c      	movcc	r5, #12
 800cdfe:	2d00      	cmp	r5, #0
 800ce00:	4606      	mov	r6, r0
 800ce02:	db01      	blt.n	800ce08 <_malloc_r+0x1c>
 800ce04:	42a9      	cmp	r1, r5
 800ce06:	d904      	bls.n	800ce12 <_malloc_r+0x26>
 800ce08:	230c      	movs	r3, #12
 800ce0a:	6033      	str	r3, [r6, #0]
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cee8 <_malloc_r+0xfc>
 800ce16:	f000 f869 	bl	800ceec <__malloc_lock>
 800ce1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ce1e:	461c      	mov	r4, r3
 800ce20:	bb44      	cbnz	r4, 800ce74 <_malloc_r+0x88>
 800ce22:	4629      	mov	r1, r5
 800ce24:	4630      	mov	r0, r6
 800ce26:	f7ff ffbf 	bl	800cda8 <sbrk_aligned>
 800ce2a:	1c43      	adds	r3, r0, #1
 800ce2c:	4604      	mov	r4, r0
 800ce2e:	d158      	bne.n	800cee2 <_malloc_r+0xf6>
 800ce30:	f8d8 4000 	ldr.w	r4, [r8]
 800ce34:	4627      	mov	r7, r4
 800ce36:	2f00      	cmp	r7, #0
 800ce38:	d143      	bne.n	800cec2 <_malloc_r+0xd6>
 800ce3a:	2c00      	cmp	r4, #0
 800ce3c:	d04b      	beq.n	800ced6 <_malloc_r+0xea>
 800ce3e:	6823      	ldr	r3, [r4, #0]
 800ce40:	4639      	mov	r1, r7
 800ce42:	4630      	mov	r0, r6
 800ce44:	eb04 0903 	add.w	r9, r4, r3
 800ce48:	f000 f864 	bl	800cf14 <_sbrk_r>
 800ce4c:	4581      	cmp	r9, r0
 800ce4e:	d142      	bne.n	800ced6 <_malloc_r+0xea>
 800ce50:	6821      	ldr	r1, [r4, #0]
 800ce52:	1a6d      	subs	r5, r5, r1
 800ce54:	4629      	mov	r1, r5
 800ce56:	4630      	mov	r0, r6
 800ce58:	f7ff ffa6 	bl	800cda8 <sbrk_aligned>
 800ce5c:	3001      	adds	r0, #1
 800ce5e:	d03a      	beq.n	800ced6 <_malloc_r+0xea>
 800ce60:	6823      	ldr	r3, [r4, #0]
 800ce62:	442b      	add	r3, r5
 800ce64:	6023      	str	r3, [r4, #0]
 800ce66:	f8d8 3000 	ldr.w	r3, [r8]
 800ce6a:	685a      	ldr	r2, [r3, #4]
 800ce6c:	bb62      	cbnz	r2, 800cec8 <_malloc_r+0xdc>
 800ce6e:	f8c8 7000 	str.w	r7, [r8]
 800ce72:	e00f      	b.n	800ce94 <_malloc_r+0xa8>
 800ce74:	6822      	ldr	r2, [r4, #0]
 800ce76:	1b52      	subs	r2, r2, r5
 800ce78:	d420      	bmi.n	800cebc <_malloc_r+0xd0>
 800ce7a:	2a0b      	cmp	r2, #11
 800ce7c:	d917      	bls.n	800ceae <_malloc_r+0xc2>
 800ce7e:	1961      	adds	r1, r4, r5
 800ce80:	42a3      	cmp	r3, r4
 800ce82:	6025      	str	r5, [r4, #0]
 800ce84:	bf18      	it	ne
 800ce86:	6059      	strne	r1, [r3, #4]
 800ce88:	6863      	ldr	r3, [r4, #4]
 800ce8a:	bf08      	it	eq
 800ce8c:	f8c8 1000 	streq.w	r1, [r8]
 800ce90:	5162      	str	r2, [r4, r5]
 800ce92:	604b      	str	r3, [r1, #4]
 800ce94:	4630      	mov	r0, r6
 800ce96:	f000 f82f 	bl	800cef8 <__malloc_unlock>
 800ce9a:	f104 000b 	add.w	r0, r4, #11
 800ce9e:	1d23      	adds	r3, r4, #4
 800cea0:	f020 0007 	bic.w	r0, r0, #7
 800cea4:	1ac2      	subs	r2, r0, r3
 800cea6:	bf1c      	itt	ne
 800cea8:	1a1b      	subne	r3, r3, r0
 800ceaa:	50a3      	strne	r3, [r4, r2]
 800ceac:	e7af      	b.n	800ce0e <_malloc_r+0x22>
 800ceae:	6862      	ldr	r2, [r4, #4]
 800ceb0:	42a3      	cmp	r3, r4
 800ceb2:	bf0c      	ite	eq
 800ceb4:	f8c8 2000 	streq.w	r2, [r8]
 800ceb8:	605a      	strne	r2, [r3, #4]
 800ceba:	e7eb      	b.n	800ce94 <_malloc_r+0xa8>
 800cebc:	4623      	mov	r3, r4
 800cebe:	6864      	ldr	r4, [r4, #4]
 800cec0:	e7ae      	b.n	800ce20 <_malloc_r+0x34>
 800cec2:	463c      	mov	r4, r7
 800cec4:	687f      	ldr	r7, [r7, #4]
 800cec6:	e7b6      	b.n	800ce36 <_malloc_r+0x4a>
 800cec8:	461a      	mov	r2, r3
 800ceca:	685b      	ldr	r3, [r3, #4]
 800cecc:	42a3      	cmp	r3, r4
 800cece:	d1fb      	bne.n	800cec8 <_malloc_r+0xdc>
 800ced0:	2300      	movs	r3, #0
 800ced2:	6053      	str	r3, [r2, #4]
 800ced4:	e7de      	b.n	800ce94 <_malloc_r+0xa8>
 800ced6:	230c      	movs	r3, #12
 800ced8:	6033      	str	r3, [r6, #0]
 800ceda:	4630      	mov	r0, r6
 800cedc:	f000 f80c 	bl	800cef8 <__malloc_unlock>
 800cee0:	e794      	b.n	800ce0c <_malloc_r+0x20>
 800cee2:	6005      	str	r5, [r0, #0]
 800cee4:	e7d6      	b.n	800ce94 <_malloc_r+0xa8>
 800cee6:	bf00      	nop
 800cee8:	20002138 	.word	0x20002138

0800ceec <__malloc_lock>:
 800ceec:	4801      	ldr	r0, [pc, #4]	@ (800cef4 <__malloc_lock+0x8>)
 800ceee:	f000 b84b 	b.w	800cf88 <__retarget_lock_acquire_recursive>
 800cef2:	bf00      	nop
 800cef4:	20002278 	.word	0x20002278

0800cef8 <__malloc_unlock>:
 800cef8:	4801      	ldr	r0, [pc, #4]	@ (800cf00 <__malloc_unlock+0x8>)
 800cefa:	f000 b846 	b.w	800cf8a <__retarget_lock_release_recursive>
 800cefe:	bf00      	nop
 800cf00:	20002278 	.word	0x20002278

0800cf04 <memset>:
 800cf04:	4402      	add	r2, r0
 800cf06:	4603      	mov	r3, r0
 800cf08:	4293      	cmp	r3, r2
 800cf0a:	d100      	bne.n	800cf0e <memset+0xa>
 800cf0c:	4770      	bx	lr
 800cf0e:	f803 1b01 	strb.w	r1, [r3], #1
 800cf12:	e7f9      	b.n	800cf08 <memset+0x4>

0800cf14 <_sbrk_r>:
 800cf14:	b538      	push	{r3, r4, r5, lr}
 800cf16:	4d06      	ldr	r5, [pc, #24]	@ (800cf30 <_sbrk_r+0x1c>)
 800cf18:	2300      	movs	r3, #0
 800cf1a:	4604      	mov	r4, r0
 800cf1c:	4608      	mov	r0, r1
 800cf1e:	602b      	str	r3, [r5, #0]
 800cf20:	f7f7 f960 	bl	80041e4 <_sbrk>
 800cf24:	1c43      	adds	r3, r0, #1
 800cf26:	d102      	bne.n	800cf2e <_sbrk_r+0x1a>
 800cf28:	682b      	ldr	r3, [r5, #0]
 800cf2a:	b103      	cbz	r3, 800cf2e <_sbrk_r+0x1a>
 800cf2c:	6023      	str	r3, [r4, #0]
 800cf2e:	bd38      	pop	{r3, r4, r5, pc}
 800cf30:	20002274 	.word	0x20002274

0800cf34 <__errno>:
 800cf34:	4b01      	ldr	r3, [pc, #4]	@ (800cf3c <__errno+0x8>)
 800cf36:	6818      	ldr	r0, [r3, #0]
 800cf38:	4770      	bx	lr
 800cf3a:	bf00      	nop
 800cf3c:	20000198 	.word	0x20000198

0800cf40 <__libc_init_array>:
 800cf40:	b570      	push	{r4, r5, r6, lr}
 800cf42:	4d0d      	ldr	r5, [pc, #52]	@ (800cf78 <__libc_init_array+0x38>)
 800cf44:	4c0d      	ldr	r4, [pc, #52]	@ (800cf7c <__libc_init_array+0x3c>)
 800cf46:	1b64      	subs	r4, r4, r5
 800cf48:	10a4      	asrs	r4, r4, #2
 800cf4a:	2600      	movs	r6, #0
 800cf4c:	42a6      	cmp	r6, r4
 800cf4e:	d109      	bne.n	800cf64 <__libc_init_array+0x24>
 800cf50:	4d0b      	ldr	r5, [pc, #44]	@ (800cf80 <__libc_init_array+0x40>)
 800cf52:	4c0c      	ldr	r4, [pc, #48]	@ (800cf84 <__libc_init_array+0x44>)
 800cf54:	f000 fdb0 	bl	800dab8 <_init>
 800cf58:	1b64      	subs	r4, r4, r5
 800cf5a:	10a4      	asrs	r4, r4, #2
 800cf5c:	2600      	movs	r6, #0
 800cf5e:	42a6      	cmp	r6, r4
 800cf60:	d105      	bne.n	800cf6e <__libc_init_array+0x2e>
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
 800cf64:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf68:	4798      	blx	r3
 800cf6a:	3601      	adds	r6, #1
 800cf6c:	e7ee      	b.n	800cf4c <__libc_init_array+0xc>
 800cf6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf72:	4798      	blx	r3
 800cf74:	3601      	adds	r6, #1
 800cf76:	e7f2      	b.n	800cf5e <__libc_init_array+0x1e>
 800cf78:	0800df28 	.word	0x0800df28
 800cf7c:	0800df28 	.word	0x0800df28
 800cf80:	0800df28 	.word	0x0800df28
 800cf84:	0800df2c 	.word	0x0800df2c

0800cf88 <__retarget_lock_acquire_recursive>:
 800cf88:	4770      	bx	lr

0800cf8a <__retarget_lock_release_recursive>:
 800cf8a:	4770      	bx	lr

0800cf8c <sqrtf>:
 800cf8c:	b508      	push	{r3, lr}
 800cf8e:	ed2d 8b02 	vpush	{d8}
 800cf92:	eeb0 8a40 	vmov.f32	s16, s0
 800cf96:	f000 f8a1 	bl	800d0dc <__ieee754_sqrtf>
 800cf9a:	eeb4 8a48 	vcmp.f32	s16, s16
 800cf9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa2:	d60c      	bvs.n	800cfbe <sqrtf+0x32>
 800cfa4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cfc4 <sqrtf+0x38>
 800cfa8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cfac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb0:	d505      	bpl.n	800cfbe <sqrtf+0x32>
 800cfb2:	f7ff ffbf 	bl	800cf34 <__errno>
 800cfb6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cfba:	2321      	movs	r3, #33	@ 0x21
 800cfbc:	6003      	str	r3, [r0, #0]
 800cfbe:	ecbd 8b02 	vpop	{d8}
 800cfc2:	bd08      	pop	{r3, pc}
 800cfc4:	00000000 	.word	0x00000000

0800cfc8 <cosf>:
 800cfc8:	ee10 3a10 	vmov	r3, s0
 800cfcc:	b507      	push	{r0, r1, r2, lr}
 800cfce:	4a1e      	ldr	r2, [pc, #120]	@ (800d048 <cosf+0x80>)
 800cfd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	d806      	bhi.n	800cfe6 <cosf+0x1e>
 800cfd8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800d04c <cosf+0x84>
 800cfdc:	b003      	add	sp, #12
 800cfde:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfe2:	f000 b87f 	b.w	800d0e4 <__kernel_cosf>
 800cfe6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cfea:	d304      	bcc.n	800cff6 <cosf+0x2e>
 800cfec:	ee30 0a40 	vsub.f32	s0, s0, s0
 800cff0:	b003      	add	sp, #12
 800cff2:	f85d fb04 	ldr.w	pc, [sp], #4
 800cff6:	4668      	mov	r0, sp
 800cff8:	f000 f914 	bl	800d224 <__ieee754_rem_pio2f>
 800cffc:	f000 0003 	and.w	r0, r0, #3
 800d000:	2801      	cmp	r0, #1
 800d002:	d009      	beq.n	800d018 <cosf+0x50>
 800d004:	2802      	cmp	r0, #2
 800d006:	d010      	beq.n	800d02a <cosf+0x62>
 800d008:	b9b0      	cbnz	r0, 800d038 <cosf+0x70>
 800d00a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d00e:	ed9d 0a00 	vldr	s0, [sp]
 800d012:	f000 f867 	bl	800d0e4 <__kernel_cosf>
 800d016:	e7eb      	b.n	800cff0 <cosf+0x28>
 800d018:	eddd 0a01 	vldr	s1, [sp, #4]
 800d01c:	ed9d 0a00 	vldr	s0, [sp]
 800d020:	f000 f8b8 	bl	800d194 <__kernel_sinf>
 800d024:	eeb1 0a40 	vneg.f32	s0, s0
 800d028:	e7e2      	b.n	800cff0 <cosf+0x28>
 800d02a:	eddd 0a01 	vldr	s1, [sp, #4]
 800d02e:	ed9d 0a00 	vldr	s0, [sp]
 800d032:	f000 f857 	bl	800d0e4 <__kernel_cosf>
 800d036:	e7f5      	b.n	800d024 <cosf+0x5c>
 800d038:	eddd 0a01 	vldr	s1, [sp, #4]
 800d03c:	ed9d 0a00 	vldr	s0, [sp]
 800d040:	2001      	movs	r0, #1
 800d042:	f000 f8a7 	bl	800d194 <__kernel_sinf>
 800d046:	e7d3      	b.n	800cff0 <cosf+0x28>
 800d048:	3f490fd8 	.word	0x3f490fd8
 800d04c:	00000000 	.word	0x00000000

0800d050 <sinf>:
 800d050:	ee10 3a10 	vmov	r3, s0
 800d054:	b507      	push	{r0, r1, r2, lr}
 800d056:	4a1f      	ldr	r2, [pc, #124]	@ (800d0d4 <sinf+0x84>)
 800d058:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d807      	bhi.n	800d070 <sinf+0x20>
 800d060:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800d0d8 <sinf+0x88>
 800d064:	2000      	movs	r0, #0
 800d066:	b003      	add	sp, #12
 800d068:	f85d eb04 	ldr.w	lr, [sp], #4
 800d06c:	f000 b892 	b.w	800d194 <__kernel_sinf>
 800d070:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d074:	d304      	bcc.n	800d080 <sinf+0x30>
 800d076:	ee30 0a40 	vsub.f32	s0, s0, s0
 800d07a:	b003      	add	sp, #12
 800d07c:	f85d fb04 	ldr.w	pc, [sp], #4
 800d080:	4668      	mov	r0, sp
 800d082:	f000 f8cf 	bl	800d224 <__ieee754_rem_pio2f>
 800d086:	f000 0003 	and.w	r0, r0, #3
 800d08a:	2801      	cmp	r0, #1
 800d08c:	d00a      	beq.n	800d0a4 <sinf+0x54>
 800d08e:	2802      	cmp	r0, #2
 800d090:	d00f      	beq.n	800d0b2 <sinf+0x62>
 800d092:	b9c0      	cbnz	r0, 800d0c6 <sinf+0x76>
 800d094:	eddd 0a01 	vldr	s1, [sp, #4]
 800d098:	ed9d 0a00 	vldr	s0, [sp]
 800d09c:	2001      	movs	r0, #1
 800d09e:	f000 f879 	bl	800d194 <__kernel_sinf>
 800d0a2:	e7ea      	b.n	800d07a <sinf+0x2a>
 800d0a4:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0a8:	ed9d 0a00 	vldr	s0, [sp]
 800d0ac:	f000 f81a 	bl	800d0e4 <__kernel_cosf>
 800d0b0:	e7e3      	b.n	800d07a <sinf+0x2a>
 800d0b2:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0b6:	ed9d 0a00 	vldr	s0, [sp]
 800d0ba:	2001      	movs	r0, #1
 800d0bc:	f000 f86a 	bl	800d194 <__kernel_sinf>
 800d0c0:	eeb1 0a40 	vneg.f32	s0, s0
 800d0c4:	e7d9      	b.n	800d07a <sinf+0x2a>
 800d0c6:	eddd 0a01 	vldr	s1, [sp, #4]
 800d0ca:	ed9d 0a00 	vldr	s0, [sp]
 800d0ce:	f000 f809 	bl	800d0e4 <__kernel_cosf>
 800d0d2:	e7f5      	b.n	800d0c0 <sinf+0x70>
 800d0d4:	3f490fd8 	.word	0x3f490fd8
 800d0d8:	00000000 	.word	0x00000000

0800d0dc <__ieee754_sqrtf>:
 800d0dc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d0e0:	4770      	bx	lr
	...

0800d0e4 <__kernel_cosf>:
 800d0e4:	ee10 3a10 	vmov	r3, s0
 800d0e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d0ec:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d0f0:	eef0 6a40 	vmov.f32	s13, s0
 800d0f4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d0f8:	d204      	bcs.n	800d104 <__kernel_cosf+0x20>
 800d0fa:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800d0fe:	ee17 2a90 	vmov	r2, s15
 800d102:	b342      	cbz	r2, 800d156 <__kernel_cosf+0x72>
 800d104:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d108:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800d174 <__kernel_cosf+0x90>
 800d10c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800d178 <__kernel_cosf+0x94>
 800d110:	4a1a      	ldr	r2, [pc, #104]	@ (800d17c <__kernel_cosf+0x98>)
 800d112:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d116:	4293      	cmp	r3, r2
 800d118:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d180 <__kernel_cosf+0x9c>
 800d11c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d120:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800d184 <__kernel_cosf+0xa0>
 800d124:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d128:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800d188 <__kernel_cosf+0xa4>
 800d12c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d130:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800d18c <__kernel_cosf+0xa8>
 800d134:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d138:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800d13c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800d140:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d144:	eee7 0a06 	vfma.f32	s1, s14, s12
 800d148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d14c:	d804      	bhi.n	800d158 <__kernel_cosf+0x74>
 800d14e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d152:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d156:	4770      	bx	lr
 800d158:	4a0d      	ldr	r2, [pc, #52]	@ (800d190 <__kernel_cosf+0xac>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	bf9a      	itte	ls
 800d15e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800d162:	ee07 3a10 	vmovls	s14, r3
 800d166:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800d16a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d16e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d172:	e7ec      	b.n	800d14e <__kernel_cosf+0x6a>
 800d174:	ad47d74e 	.word	0xad47d74e
 800d178:	310f74f6 	.word	0x310f74f6
 800d17c:	3e999999 	.word	0x3e999999
 800d180:	b493f27c 	.word	0xb493f27c
 800d184:	37d00d01 	.word	0x37d00d01
 800d188:	bab60b61 	.word	0xbab60b61
 800d18c:	3d2aaaab 	.word	0x3d2aaaab
 800d190:	3f480000 	.word	0x3f480000

0800d194 <__kernel_sinf>:
 800d194:	ee10 3a10 	vmov	r3, s0
 800d198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d19c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800d1a0:	d204      	bcs.n	800d1ac <__kernel_sinf+0x18>
 800d1a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d1a6:	ee17 3a90 	vmov	r3, s15
 800d1aa:	b35b      	cbz	r3, 800d204 <__kernel_sinf+0x70>
 800d1ac:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d1b0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800d208 <__kernel_sinf+0x74>
 800d1b4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800d20c <__kernel_sinf+0x78>
 800d1b8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d1bc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800d210 <__kernel_sinf+0x7c>
 800d1c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d1c4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800d214 <__kernel_sinf+0x80>
 800d1c8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800d1cc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800d218 <__kernel_sinf+0x84>
 800d1d0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800d1d4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800d1d8:	b930      	cbnz	r0, 800d1e8 <__kernel_sinf+0x54>
 800d1da:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800d21c <__kernel_sinf+0x88>
 800d1de:	eea7 6a27 	vfma.f32	s12, s14, s15
 800d1e2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800d1e6:	4770      	bx	lr
 800d1e8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800d1ec:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800d1f0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800d1f4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800d1f8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800d220 <__kernel_sinf+0x8c>
 800d1fc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800d200:	ee30 0a60 	vsub.f32	s0, s0, s1
 800d204:	4770      	bx	lr
 800d206:	bf00      	nop
 800d208:	2f2ec9d3 	.word	0x2f2ec9d3
 800d20c:	b2d72f34 	.word	0xb2d72f34
 800d210:	3638ef1b 	.word	0x3638ef1b
 800d214:	b9500d01 	.word	0xb9500d01
 800d218:	3c088889 	.word	0x3c088889
 800d21c:	be2aaaab 	.word	0xbe2aaaab
 800d220:	3e2aaaab 	.word	0x3e2aaaab

0800d224 <__ieee754_rem_pio2f>:
 800d224:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d226:	ee10 6a10 	vmov	r6, s0
 800d22a:	4b88      	ldr	r3, [pc, #544]	@ (800d44c <__ieee754_rem_pio2f+0x228>)
 800d22c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800d230:	429d      	cmp	r5, r3
 800d232:	b087      	sub	sp, #28
 800d234:	4604      	mov	r4, r0
 800d236:	d805      	bhi.n	800d244 <__ieee754_rem_pio2f+0x20>
 800d238:	2300      	movs	r3, #0
 800d23a:	ed80 0a00 	vstr	s0, [r0]
 800d23e:	6043      	str	r3, [r0, #4]
 800d240:	2000      	movs	r0, #0
 800d242:	e022      	b.n	800d28a <__ieee754_rem_pio2f+0x66>
 800d244:	4b82      	ldr	r3, [pc, #520]	@ (800d450 <__ieee754_rem_pio2f+0x22c>)
 800d246:	429d      	cmp	r5, r3
 800d248:	d83a      	bhi.n	800d2c0 <__ieee754_rem_pio2f+0x9c>
 800d24a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d24e:	2e00      	cmp	r6, #0
 800d250:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800d454 <__ieee754_rem_pio2f+0x230>
 800d254:	4a80      	ldr	r2, [pc, #512]	@ (800d458 <__ieee754_rem_pio2f+0x234>)
 800d256:	f023 030f 	bic.w	r3, r3, #15
 800d25a:	dd18      	ble.n	800d28e <__ieee754_rem_pio2f+0x6a>
 800d25c:	4293      	cmp	r3, r2
 800d25e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d262:	bf09      	itett	eq
 800d264:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800d45c <__ieee754_rem_pio2f+0x238>
 800d268:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800d460 <__ieee754_rem_pio2f+0x23c>
 800d26c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800d464 <__ieee754_rem_pio2f+0x240>
 800d270:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d274:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800d278:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d27c:	ed80 7a00 	vstr	s14, [r0]
 800d280:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d284:	edc0 7a01 	vstr	s15, [r0, #4]
 800d288:	2001      	movs	r0, #1
 800d28a:	b007      	add	sp, #28
 800d28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d28e:	4293      	cmp	r3, r2
 800d290:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d294:	bf09      	itett	eq
 800d296:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800d45c <__ieee754_rem_pio2f+0x238>
 800d29a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800d460 <__ieee754_rem_pio2f+0x23c>
 800d29e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800d464 <__ieee754_rem_pio2f+0x240>
 800d2a2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d2a6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d2aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2ae:	ed80 7a00 	vstr	s14, [r0]
 800d2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2b6:	edc0 7a01 	vstr	s15, [r0, #4]
 800d2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d2be:	e7e4      	b.n	800d28a <__ieee754_rem_pio2f+0x66>
 800d2c0:	4b69      	ldr	r3, [pc, #420]	@ (800d468 <__ieee754_rem_pio2f+0x244>)
 800d2c2:	429d      	cmp	r5, r3
 800d2c4:	d873      	bhi.n	800d3ae <__ieee754_rem_pio2f+0x18a>
 800d2c6:	f000 f8dd 	bl	800d484 <fabsf>
 800d2ca:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800d46c <__ieee754_rem_pio2f+0x248>
 800d2ce:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d2d2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d2d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d2da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d2de:	ee17 0a90 	vmov	r0, s15
 800d2e2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d454 <__ieee754_rem_pio2f+0x230>
 800d2e6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800d2ea:	281f      	cmp	r0, #31
 800d2ec:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800d460 <__ieee754_rem_pio2f+0x23c>
 800d2f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2f4:	eeb1 6a47 	vneg.f32	s12, s14
 800d2f8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d2fc:	ee16 1a90 	vmov	r1, s13
 800d300:	dc09      	bgt.n	800d316 <__ieee754_rem_pio2f+0xf2>
 800d302:	4a5b      	ldr	r2, [pc, #364]	@ (800d470 <__ieee754_rem_pio2f+0x24c>)
 800d304:	1e47      	subs	r7, r0, #1
 800d306:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800d30a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800d30e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800d312:	4293      	cmp	r3, r2
 800d314:	d107      	bne.n	800d326 <__ieee754_rem_pio2f+0x102>
 800d316:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800d31a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800d31e:	2a08      	cmp	r2, #8
 800d320:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800d324:	dc14      	bgt.n	800d350 <__ieee754_rem_pio2f+0x12c>
 800d326:	6021      	str	r1, [r4, #0]
 800d328:	ed94 7a00 	vldr	s14, [r4]
 800d32c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d330:	2e00      	cmp	r6, #0
 800d332:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d336:	ed84 0a01 	vstr	s0, [r4, #4]
 800d33a:	daa6      	bge.n	800d28a <__ieee754_rem_pio2f+0x66>
 800d33c:	eeb1 7a47 	vneg.f32	s14, s14
 800d340:	eeb1 0a40 	vneg.f32	s0, s0
 800d344:	ed84 7a00 	vstr	s14, [r4]
 800d348:	ed84 0a01 	vstr	s0, [r4, #4]
 800d34c:	4240      	negs	r0, r0
 800d34e:	e79c      	b.n	800d28a <__ieee754_rem_pio2f+0x66>
 800d350:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800d45c <__ieee754_rem_pio2f+0x238>
 800d354:	eef0 6a40 	vmov.f32	s13, s0
 800d358:	eee6 6a25 	vfma.f32	s13, s12, s11
 800d35c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800d360:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d364:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800d464 <__ieee754_rem_pio2f+0x240>
 800d368:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800d36c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800d370:	ee15 2a90 	vmov	r2, s11
 800d374:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800d378:	1a5b      	subs	r3, r3, r1
 800d37a:	2b19      	cmp	r3, #25
 800d37c:	dc04      	bgt.n	800d388 <__ieee754_rem_pio2f+0x164>
 800d37e:	edc4 5a00 	vstr	s11, [r4]
 800d382:	eeb0 0a66 	vmov.f32	s0, s13
 800d386:	e7cf      	b.n	800d328 <__ieee754_rem_pio2f+0x104>
 800d388:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800d474 <__ieee754_rem_pio2f+0x250>
 800d38c:	eeb0 0a66 	vmov.f32	s0, s13
 800d390:	eea6 0a25 	vfma.f32	s0, s12, s11
 800d394:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d398:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800d478 <__ieee754_rem_pio2f+0x254>
 800d39c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800d3a0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800d3a4:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d3a8:	ed84 7a00 	vstr	s14, [r4]
 800d3ac:	e7bc      	b.n	800d328 <__ieee754_rem_pio2f+0x104>
 800d3ae:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d3b2:	d306      	bcc.n	800d3c2 <__ieee754_rem_pio2f+0x19e>
 800d3b4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d3b8:	edc0 7a01 	vstr	s15, [r0, #4]
 800d3bc:	edc0 7a00 	vstr	s15, [r0]
 800d3c0:	e73e      	b.n	800d240 <__ieee754_rem_pio2f+0x1c>
 800d3c2:	15ea      	asrs	r2, r5, #23
 800d3c4:	3a86      	subs	r2, #134	@ 0x86
 800d3c6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800d3ca:	ee07 3a90 	vmov	s15, r3
 800d3ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d3d2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800d47c <__ieee754_rem_pio2f+0x258>
 800d3d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d3da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3de:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d3e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d3e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d3ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d3ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3f2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d3f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d3fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d402:	edcd 7a05 	vstr	s15, [sp, #20]
 800d406:	d11e      	bne.n	800d446 <__ieee754_rem_pio2f+0x222>
 800d408:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d410:	bf0c      	ite	eq
 800d412:	2301      	moveq	r3, #1
 800d414:	2302      	movne	r3, #2
 800d416:	491a      	ldr	r1, [pc, #104]	@ (800d480 <__ieee754_rem_pio2f+0x25c>)
 800d418:	9101      	str	r1, [sp, #4]
 800d41a:	2102      	movs	r1, #2
 800d41c:	9100      	str	r1, [sp, #0]
 800d41e:	a803      	add	r0, sp, #12
 800d420:	4621      	mov	r1, r4
 800d422:	f000 f89d 	bl	800d560 <__kernel_rem_pio2f>
 800d426:	2e00      	cmp	r6, #0
 800d428:	f6bf af2f 	bge.w	800d28a <__ieee754_rem_pio2f+0x66>
 800d42c:	edd4 7a00 	vldr	s15, [r4]
 800d430:	eef1 7a67 	vneg.f32	s15, s15
 800d434:	edc4 7a00 	vstr	s15, [r4]
 800d438:	edd4 7a01 	vldr	s15, [r4, #4]
 800d43c:	eef1 7a67 	vneg.f32	s15, s15
 800d440:	edc4 7a01 	vstr	s15, [r4, #4]
 800d444:	e782      	b.n	800d34c <__ieee754_rem_pio2f+0x128>
 800d446:	2303      	movs	r3, #3
 800d448:	e7e5      	b.n	800d416 <__ieee754_rem_pio2f+0x1f2>
 800d44a:	bf00      	nop
 800d44c:	3f490fd8 	.word	0x3f490fd8
 800d450:	4016cbe3 	.word	0x4016cbe3
 800d454:	3fc90f80 	.word	0x3fc90f80
 800d458:	3fc90fd0 	.word	0x3fc90fd0
 800d45c:	37354400 	.word	0x37354400
 800d460:	37354443 	.word	0x37354443
 800d464:	2e85a308 	.word	0x2e85a308
 800d468:	43490f80 	.word	0x43490f80
 800d46c:	3f22f984 	.word	0x3f22f984
 800d470:	0800db50 	.word	0x0800db50
 800d474:	2e85a300 	.word	0x2e85a300
 800d478:	248d3132 	.word	0x248d3132
 800d47c:	43800000 	.word	0x43800000
 800d480:	0800dbd0 	.word	0x0800dbd0

0800d484 <fabsf>:
 800d484:	ee10 3a10 	vmov	r3, s0
 800d488:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d48c:	ee00 3a10 	vmov	s0, r3
 800d490:	4770      	bx	lr
	...

0800d494 <scalbnf>:
 800d494:	ee10 3a10 	vmov	r3, s0
 800d498:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800d49c:	d02b      	beq.n	800d4f6 <scalbnf+0x62>
 800d49e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d4a2:	d302      	bcc.n	800d4aa <scalbnf+0x16>
 800d4a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d4a8:	4770      	bx	lr
 800d4aa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d4ae:	d123      	bne.n	800d4f8 <scalbnf+0x64>
 800d4b0:	4b24      	ldr	r3, [pc, #144]	@ (800d544 <scalbnf+0xb0>)
 800d4b2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800d548 <scalbnf+0xb4>
 800d4b6:	4298      	cmp	r0, r3
 800d4b8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d4bc:	db17      	blt.n	800d4ee <scalbnf+0x5a>
 800d4be:	ee10 3a10 	vmov	r3, s0
 800d4c2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d4c6:	3a19      	subs	r2, #25
 800d4c8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800d4cc:	4288      	cmp	r0, r1
 800d4ce:	dd15      	ble.n	800d4fc <scalbnf+0x68>
 800d4d0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800d54c <scalbnf+0xb8>
 800d4d4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800d550 <scalbnf+0xbc>
 800d4d8:	ee10 3a10 	vmov	r3, s0
 800d4dc:	eeb0 7a67 	vmov.f32	s14, s15
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	bfb8      	it	lt
 800d4e4:	eef0 7a66 	vmovlt.f32	s15, s13
 800d4e8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800d4ec:	4770      	bx	lr
 800d4ee:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800d554 <scalbnf+0xc0>
 800d4f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800d4f6:	4770      	bx	lr
 800d4f8:	0dd2      	lsrs	r2, r2, #23
 800d4fa:	e7e5      	b.n	800d4c8 <scalbnf+0x34>
 800d4fc:	4410      	add	r0, r2
 800d4fe:	28fe      	cmp	r0, #254	@ 0xfe
 800d500:	dce6      	bgt.n	800d4d0 <scalbnf+0x3c>
 800d502:	2800      	cmp	r0, #0
 800d504:	dd06      	ble.n	800d514 <scalbnf+0x80>
 800d506:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d50a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d50e:	ee00 3a10 	vmov	s0, r3
 800d512:	4770      	bx	lr
 800d514:	f110 0f16 	cmn.w	r0, #22
 800d518:	da09      	bge.n	800d52e <scalbnf+0x9a>
 800d51a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800d554 <scalbnf+0xc0>
 800d51e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d558 <scalbnf+0xc4>
 800d522:	ee10 3a10 	vmov	r3, s0
 800d526:	eeb0 7a67 	vmov.f32	s14, s15
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	e7d9      	b.n	800d4e2 <scalbnf+0x4e>
 800d52e:	3019      	adds	r0, #25
 800d530:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d534:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800d538:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800d55c <scalbnf+0xc8>
 800d53c:	ee07 3a90 	vmov	s15, r3
 800d540:	e7d7      	b.n	800d4f2 <scalbnf+0x5e>
 800d542:	bf00      	nop
 800d544:	ffff3cb0 	.word	0xffff3cb0
 800d548:	4c000000 	.word	0x4c000000
 800d54c:	7149f2ca 	.word	0x7149f2ca
 800d550:	f149f2ca 	.word	0xf149f2ca
 800d554:	0da24260 	.word	0x0da24260
 800d558:	8da24260 	.word	0x8da24260
 800d55c:	33000000 	.word	0x33000000

0800d560 <__kernel_rem_pio2f>:
 800d560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d564:	ed2d 8b04 	vpush	{d8-d9}
 800d568:	b0d9      	sub	sp, #356	@ 0x164
 800d56a:	4690      	mov	r8, r2
 800d56c:	9001      	str	r0, [sp, #4]
 800d56e:	4ab6      	ldr	r2, [pc, #728]	@ (800d848 <__kernel_rem_pio2f+0x2e8>)
 800d570:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800d572:	f118 0f04 	cmn.w	r8, #4
 800d576:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800d57a:	460f      	mov	r7, r1
 800d57c:	f103 3bff 	add.w	fp, r3, #4294967295
 800d580:	db26      	blt.n	800d5d0 <__kernel_rem_pio2f+0x70>
 800d582:	f1b8 0203 	subs.w	r2, r8, #3
 800d586:	bf48      	it	mi
 800d588:	f108 0204 	addmi.w	r2, r8, #4
 800d58c:	10d2      	asrs	r2, r2, #3
 800d58e:	1c55      	adds	r5, r2, #1
 800d590:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d592:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800d858 <__kernel_rem_pio2f+0x2f8>
 800d596:	00e8      	lsls	r0, r5, #3
 800d598:	eba2 060b 	sub.w	r6, r2, fp
 800d59c:	9002      	str	r0, [sp, #8]
 800d59e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800d5a2:	eb0a 0c0b 	add.w	ip, sl, fp
 800d5a6:	ac1c      	add	r4, sp, #112	@ 0x70
 800d5a8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800d5ac:	2000      	movs	r0, #0
 800d5ae:	4560      	cmp	r0, ip
 800d5b0:	dd10      	ble.n	800d5d4 <__kernel_rem_pio2f+0x74>
 800d5b2:	a91c      	add	r1, sp, #112	@ 0x70
 800d5b4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800d5b8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800d5bc:	2600      	movs	r6, #0
 800d5be:	4556      	cmp	r6, sl
 800d5c0:	dc24      	bgt.n	800d60c <__kernel_rem_pio2f+0xac>
 800d5c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d5c6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800d858 <__kernel_rem_pio2f+0x2f8>
 800d5ca:	4684      	mov	ip, r0
 800d5cc:	2400      	movs	r4, #0
 800d5ce:	e016      	b.n	800d5fe <__kernel_rem_pio2f+0x9e>
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	e7dc      	b.n	800d58e <__kernel_rem_pio2f+0x2e>
 800d5d4:	42c6      	cmn	r6, r0
 800d5d6:	bf5d      	ittte	pl
 800d5d8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800d5dc:	ee07 1a90 	vmovpl	s15, r1
 800d5e0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d5e4:	eef0 7a47 	vmovmi.f32	s15, s14
 800d5e8:	ece4 7a01 	vstmia	r4!, {s15}
 800d5ec:	3001      	adds	r0, #1
 800d5ee:	e7de      	b.n	800d5ae <__kernel_rem_pio2f+0x4e>
 800d5f0:	ecfe 6a01 	vldmia	lr!, {s13}
 800d5f4:	ed3c 7a01 	vldmdb	ip!, {s14}
 800d5f8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d5fc:	3401      	adds	r4, #1
 800d5fe:	455c      	cmp	r4, fp
 800d600:	ddf6      	ble.n	800d5f0 <__kernel_rem_pio2f+0x90>
 800d602:	ece9 7a01 	vstmia	r9!, {s15}
 800d606:	3601      	adds	r6, #1
 800d608:	3004      	adds	r0, #4
 800d60a:	e7d8      	b.n	800d5be <__kernel_rem_pio2f+0x5e>
 800d60c:	a908      	add	r1, sp, #32
 800d60e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d612:	9104      	str	r1, [sp, #16]
 800d614:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800d616:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800d854 <__kernel_rem_pio2f+0x2f4>
 800d61a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800d850 <__kernel_rem_pio2f+0x2f0>
 800d61e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800d622:	9203      	str	r2, [sp, #12]
 800d624:	4654      	mov	r4, sl
 800d626:	00a2      	lsls	r2, r4, #2
 800d628:	9205      	str	r2, [sp, #20]
 800d62a:	aa58      	add	r2, sp, #352	@ 0x160
 800d62c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800d630:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800d634:	a944      	add	r1, sp, #272	@ 0x110
 800d636:	aa08      	add	r2, sp, #32
 800d638:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800d63c:	4694      	mov	ip, r2
 800d63e:	4626      	mov	r6, r4
 800d640:	2e00      	cmp	r6, #0
 800d642:	dc4c      	bgt.n	800d6de <__kernel_rem_pio2f+0x17e>
 800d644:	4628      	mov	r0, r5
 800d646:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d64a:	f7ff ff23 	bl	800d494 <scalbnf>
 800d64e:	eeb0 8a40 	vmov.f32	s16, s0
 800d652:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800d656:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d65a:	f000 f9e9 	bl	800da30 <floorf>
 800d65e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800d662:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d666:	2d00      	cmp	r5, #0
 800d668:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d66c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d670:	ee17 9a90 	vmov	r9, s15
 800d674:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d678:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d67c:	dd41      	ble.n	800d702 <__kernel_rem_pio2f+0x1a2>
 800d67e:	f104 3cff 	add.w	ip, r4, #4294967295
 800d682:	a908      	add	r1, sp, #32
 800d684:	f1c5 0e08 	rsb	lr, r5, #8
 800d688:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800d68c:	fa46 f00e 	asr.w	r0, r6, lr
 800d690:	4481      	add	r9, r0
 800d692:	fa00 f00e 	lsl.w	r0, r0, lr
 800d696:	1a36      	subs	r6, r6, r0
 800d698:	f1c5 0007 	rsb	r0, r5, #7
 800d69c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800d6a0:	4106      	asrs	r6, r0
 800d6a2:	2e00      	cmp	r6, #0
 800d6a4:	dd3c      	ble.n	800d720 <__kernel_rem_pio2f+0x1c0>
 800d6a6:	f04f 0e00 	mov.w	lr, #0
 800d6aa:	f109 0901 	add.w	r9, r9, #1
 800d6ae:	4670      	mov	r0, lr
 800d6b0:	4574      	cmp	r4, lr
 800d6b2:	dc68      	bgt.n	800d786 <__kernel_rem_pio2f+0x226>
 800d6b4:	2d00      	cmp	r5, #0
 800d6b6:	dd03      	ble.n	800d6c0 <__kernel_rem_pio2f+0x160>
 800d6b8:	2d01      	cmp	r5, #1
 800d6ba:	d074      	beq.n	800d7a6 <__kernel_rem_pio2f+0x246>
 800d6bc:	2d02      	cmp	r5, #2
 800d6be:	d07d      	beq.n	800d7bc <__kernel_rem_pio2f+0x25c>
 800d6c0:	2e02      	cmp	r6, #2
 800d6c2:	d12d      	bne.n	800d720 <__kernel_rem_pio2f+0x1c0>
 800d6c4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d6c8:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d6cc:	b340      	cbz	r0, 800d720 <__kernel_rem_pio2f+0x1c0>
 800d6ce:	4628      	mov	r0, r5
 800d6d0:	9306      	str	r3, [sp, #24]
 800d6d2:	f7ff fedf 	bl	800d494 <scalbnf>
 800d6d6:	9b06      	ldr	r3, [sp, #24]
 800d6d8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d6dc:	e020      	b.n	800d720 <__kernel_rem_pio2f+0x1c0>
 800d6de:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d6e2:	3e01      	subs	r6, #1
 800d6e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6ec:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d6f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d6f4:	ecac 0a01 	vstmia	ip!, {s0}
 800d6f8:	ed30 0a01 	vldmdb	r0!, {s0}
 800d6fc:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d700:	e79e      	b.n	800d640 <__kernel_rem_pio2f+0xe0>
 800d702:	d105      	bne.n	800d710 <__kernel_rem_pio2f+0x1b0>
 800d704:	1e60      	subs	r0, r4, #1
 800d706:	a908      	add	r1, sp, #32
 800d708:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800d70c:	11f6      	asrs	r6, r6, #7
 800d70e:	e7c8      	b.n	800d6a2 <__kernel_rem_pio2f+0x142>
 800d710:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800d714:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d71c:	da31      	bge.n	800d782 <__kernel_rem_pio2f+0x222>
 800d71e:	2600      	movs	r6, #0
 800d720:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d728:	f040 8098 	bne.w	800d85c <__kernel_rem_pio2f+0x2fc>
 800d72c:	1e60      	subs	r0, r4, #1
 800d72e:	2200      	movs	r2, #0
 800d730:	4550      	cmp	r0, sl
 800d732:	da4b      	bge.n	800d7cc <__kernel_rem_pio2f+0x26c>
 800d734:	2a00      	cmp	r2, #0
 800d736:	d065      	beq.n	800d804 <__kernel_rem_pio2f+0x2a4>
 800d738:	3c01      	subs	r4, #1
 800d73a:	ab08      	add	r3, sp, #32
 800d73c:	3d08      	subs	r5, #8
 800d73e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d0f8      	beq.n	800d738 <__kernel_rem_pio2f+0x1d8>
 800d746:	4628      	mov	r0, r5
 800d748:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800d74c:	f7ff fea2 	bl	800d494 <scalbnf>
 800d750:	1c63      	adds	r3, r4, #1
 800d752:	aa44      	add	r2, sp, #272	@ 0x110
 800d754:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800d854 <__kernel_rem_pio2f+0x2f4>
 800d758:	0099      	lsls	r1, r3, #2
 800d75a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800d75e:	4623      	mov	r3, r4
 800d760:	2b00      	cmp	r3, #0
 800d762:	f280 80a9 	bge.w	800d8b8 <__kernel_rem_pio2f+0x358>
 800d766:	4623      	mov	r3, r4
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f2c0 80c7 	blt.w	800d8fc <__kernel_rem_pio2f+0x39c>
 800d76e:	aa44      	add	r2, sp, #272	@ 0x110
 800d770:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d774:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800d84c <__kernel_rem_pio2f+0x2ec>
 800d778:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800d858 <__kernel_rem_pio2f+0x2f8>
 800d77c:	2000      	movs	r0, #0
 800d77e:	1ae2      	subs	r2, r4, r3
 800d780:	e0b1      	b.n	800d8e6 <__kernel_rem_pio2f+0x386>
 800d782:	2602      	movs	r6, #2
 800d784:	e78f      	b.n	800d6a6 <__kernel_rem_pio2f+0x146>
 800d786:	f852 1b04 	ldr.w	r1, [r2], #4
 800d78a:	b948      	cbnz	r0, 800d7a0 <__kernel_rem_pio2f+0x240>
 800d78c:	b121      	cbz	r1, 800d798 <__kernel_rem_pio2f+0x238>
 800d78e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800d792:	f842 1c04 	str.w	r1, [r2, #-4]
 800d796:	2101      	movs	r1, #1
 800d798:	f10e 0e01 	add.w	lr, lr, #1
 800d79c:	4608      	mov	r0, r1
 800d79e:	e787      	b.n	800d6b0 <__kernel_rem_pio2f+0x150>
 800d7a0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800d7a4:	e7f5      	b.n	800d792 <__kernel_rem_pio2f+0x232>
 800d7a6:	f104 3cff 	add.w	ip, r4, #4294967295
 800d7aa:	aa08      	add	r2, sp, #32
 800d7ac:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d7b0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800d7b4:	a908      	add	r1, sp, #32
 800d7b6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800d7ba:	e781      	b.n	800d6c0 <__kernel_rem_pio2f+0x160>
 800d7bc:	f104 3cff 	add.w	ip, r4, #4294967295
 800d7c0:	aa08      	add	r2, sp, #32
 800d7c2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800d7c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800d7ca:	e7f3      	b.n	800d7b4 <__kernel_rem_pio2f+0x254>
 800d7cc:	a908      	add	r1, sp, #32
 800d7ce:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d7d2:	3801      	subs	r0, #1
 800d7d4:	430a      	orrs	r2, r1
 800d7d6:	e7ab      	b.n	800d730 <__kernel_rem_pio2f+0x1d0>
 800d7d8:	3201      	adds	r2, #1
 800d7da:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800d7de:	2e00      	cmp	r6, #0
 800d7e0:	d0fa      	beq.n	800d7d8 <__kernel_rem_pio2f+0x278>
 800d7e2:	9905      	ldr	r1, [sp, #20]
 800d7e4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800d7e8:	eb0d 0001 	add.w	r0, sp, r1
 800d7ec:	18e6      	adds	r6, r4, r3
 800d7ee:	a91c      	add	r1, sp, #112	@ 0x70
 800d7f0:	f104 0c01 	add.w	ip, r4, #1
 800d7f4:	384c      	subs	r0, #76	@ 0x4c
 800d7f6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800d7fa:	4422      	add	r2, r4
 800d7fc:	4562      	cmp	r2, ip
 800d7fe:	da04      	bge.n	800d80a <__kernel_rem_pio2f+0x2aa>
 800d800:	4614      	mov	r4, r2
 800d802:	e710      	b.n	800d626 <__kernel_rem_pio2f+0xc6>
 800d804:	9804      	ldr	r0, [sp, #16]
 800d806:	2201      	movs	r2, #1
 800d808:	e7e7      	b.n	800d7da <__kernel_rem_pio2f+0x27a>
 800d80a:	9903      	ldr	r1, [sp, #12]
 800d80c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800d810:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800d814:	9105      	str	r1, [sp, #20]
 800d816:	ee07 1a90 	vmov	s15, r1
 800d81a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d81e:	2400      	movs	r4, #0
 800d820:	ece6 7a01 	vstmia	r6!, {s15}
 800d824:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800d858 <__kernel_rem_pio2f+0x2f8>
 800d828:	46b1      	mov	r9, r6
 800d82a:	455c      	cmp	r4, fp
 800d82c:	dd04      	ble.n	800d838 <__kernel_rem_pio2f+0x2d8>
 800d82e:	ece0 7a01 	vstmia	r0!, {s15}
 800d832:	f10c 0c01 	add.w	ip, ip, #1
 800d836:	e7e1      	b.n	800d7fc <__kernel_rem_pio2f+0x29c>
 800d838:	ecfe 6a01 	vldmia	lr!, {s13}
 800d83c:	ed39 7a01 	vldmdb	r9!, {s14}
 800d840:	3401      	adds	r4, #1
 800d842:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d846:	e7f0      	b.n	800d82a <__kernel_rem_pio2f+0x2ca>
 800d848:	0800df14 	.word	0x0800df14
 800d84c:	0800dee8 	.word	0x0800dee8
 800d850:	43800000 	.word	0x43800000
 800d854:	3b800000 	.word	0x3b800000
 800d858:	00000000 	.word	0x00000000
 800d85c:	9b02      	ldr	r3, [sp, #8]
 800d85e:	eeb0 0a48 	vmov.f32	s0, s16
 800d862:	eba3 0008 	sub.w	r0, r3, r8
 800d866:	f7ff fe15 	bl	800d494 <scalbnf>
 800d86a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800d850 <__kernel_rem_pio2f+0x2f0>
 800d86e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d876:	db19      	blt.n	800d8ac <__kernel_rem_pio2f+0x34c>
 800d878:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800d854 <__kernel_rem_pio2f+0x2f4>
 800d87c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d880:	aa08      	add	r2, sp, #32
 800d882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d886:	3508      	adds	r5, #8
 800d888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d88c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d890:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d894:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d898:	ee10 3a10 	vmov	r3, s0
 800d89c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d8a0:	ee17 3a90 	vmov	r3, s15
 800d8a4:	3401      	adds	r4, #1
 800d8a6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800d8aa:	e74c      	b.n	800d746 <__kernel_rem_pio2f+0x1e6>
 800d8ac:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d8b0:	aa08      	add	r2, sp, #32
 800d8b2:	ee10 3a10 	vmov	r3, s0
 800d8b6:	e7f6      	b.n	800d8a6 <__kernel_rem_pio2f+0x346>
 800d8b8:	a808      	add	r0, sp, #32
 800d8ba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800d8be:	9001      	str	r0, [sp, #4]
 800d8c0:	ee07 0a90 	vmov	s15, r0
 800d8c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8c8:	3b01      	subs	r3, #1
 800d8ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d8ce:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d8d2:	ed62 7a01 	vstmdb	r2!, {s15}
 800d8d6:	e743      	b.n	800d760 <__kernel_rem_pio2f+0x200>
 800d8d8:	ecfc 6a01 	vldmia	ip!, {s13}
 800d8dc:	ecb5 7a01 	vldmia	r5!, {s14}
 800d8e0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	4550      	cmp	r0, sl
 800d8e8:	dc01      	bgt.n	800d8ee <__kernel_rem_pio2f+0x38e>
 800d8ea:	4290      	cmp	r0, r2
 800d8ec:	ddf4      	ble.n	800d8d8 <__kernel_rem_pio2f+0x378>
 800d8ee:	a858      	add	r0, sp, #352	@ 0x160
 800d8f0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800d8f4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	e735      	b.n	800d768 <__kernel_rem_pio2f+0x208>
 800d8fc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d8fe:	2b02      	cmp	r3, #2
 800d900:	dc09      	bgt.n	800d916 <__kernel_rem_pio2f+0x3b6>
 800d902:	2b00      	cmp	r3, #0
 800d904:	dc27      	bgt.n	800d956 <__kernel_rem_pio2f+0x3f6>
 800d906:	d040      	beq.n	800d98a <__kernel_rem_pio2f+0x42a>
 800d908:	f009 0007 	and.w	r0, r9, #7
 800d90c:	b059      	add	sp, #356	@ 0x164
 800d90e:	ecbd 8b04 	vpop	{d8-d9}
 800d912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d916:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800d918:	2b03      	cmp	r3, #3
 800d91a:	d1f5      	bne.n	800d908 <__kernel_rem_pio2f+0x3a8>
 800d91c:	aa30      	add	r2, sp, #192	@ 0xc0
 800d91e:	1f0b      	subs	r3, r1, #4
 800d920:	4413      	add	r3, r2
 800d922:	461a      	mov	r2, r3
 800d924:	4620      	mov	r0, r4
 800d926:	2800      	cmp	r0, #0
 800d928:	dc50      	bgt.n	800d9cc <__kernel_rem_pio2f+0x46c>
 800d92a:	4622      	mov	r2, r4
 800d92c:	2a01      	cmp	r2, #1
 800d92e:	dc5d      	bgt.n	800d9ec <__kernel_rem_pio2f+0x48c>
 800d930:	ab30      	add	r3, sp, #192	@ 0xc0
 800d932:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800d858 <__kernel_rem_pio2f+0x2f8>
 800d936:	440b      	add	r3, r1
 800d938:	2c01      	cmp	r4, #1
 800d93a:	dc67      	bgt.n	800da0c <__kernel_rem_pio2f+0x4ac>
 800d93c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800d940:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800d944:	2e00      	cmp	r6, #0
 800d946:	d167      	bne.n	800da18 <__kernel_rem_pio2f+0x4b8>
 800d948:	edc7 6a00 	vstr	s13, [r7]
 800d94c:	ed87 7a01 	vstr	s14, [r7, #4]
 800d950:	edc7 7a02 	vstr	s15, [r7, #8]
 800d954:	e7d8      	b.n	800d908 <__kernel_rem_pio2f+0x3a8>
 800d956:	ab30      	add	r3, sp, #192	@ 0xc0
 800d958:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800d858 <__kernel_rem_pio2f+0x2f8>
 800d95c:	440b      	add	r3, r1
 800d95e:	4622      	mov	r2, r4
 800d960:	2a00      	cmp	r2, #0
 800d962:	da24      	bge.n	800d9ae <__kernel_rem_pio2f+0x44e>
 800d964:	b34e      	cbz	r6, 800d9ba <__kernel_rem_pio2f+0x45a>
 800d966:	eef1 7a47 	vneg.f32	s15, s14
 800d96a:	edc7 7a00 	vstr	s15, [r7]
 800d96e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800d972:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d976:	aa31      	add	r2, sp, #196	@ 0xc4
 800d978:	2301      	movs	r3, #1
 800d97a:	429c      	cmp	r4, r3
 800d97c:	da20      	bge.n	800d9c0 <__kernel_rem_pio2f+0x460>
 800d97e:	b10e      	cbz	r6, 800d984 <__kernel_rem_pio2f+0x424>
 800d980:	eef1 7a67 	vneg.f32	s15, s15
 800d984:	edc7 7a01 	vstr	s15, [r7, #4]
 800d988:	e7be      	b.n	800d908 <__kernel_rem_pio2f+0x3a8>
 800d98a:	ab30      	add	r3, sp, #192	@ 0xc0
 800d98c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800d858 <__kernel_rem_pio2f+0x2f8>
 800d990:	440b      	add	r3, r1
 800d992:	2c00      	cmp	r4, #0
 800d994:	da05      	bge.n	800d9a2 <__kernel_rem_pio2f+0x442>
 800d996:	b10e      	cbz	r6, 800d99c <__kernel_rem_pio2f+0x43c>
 800d998:	eef1 7a67 	vneg.f32	s15, s15
 800d99c:	edc7 7a00 	vstr	s15, [r7]
 800d9a0:	e7b2      	b.n	800d908 <__kernel_rem_pio2f+0x3a8>
 800d9a2:	ed33 7a01 	vldmdb	r3!, {s14}
 800d9a6:	3c01      	subs	r4, #1
 800d9a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9ac:	e7f1      	b.n	800d992 <__kernel_rem_pio2f+0x432>
 800d9ae:	ed73 7a01 	vldmdb	r3!, {s15}
 800d9b2:	3a01      	subs	r2, #1
 800d9b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d9b8:	e7d2      	b.n	800d960 <__kernel_rem_pio2f+0x400>
 800d9ba:	eef0 7a47 	vmov.f32	s15, s14
 800d9be:	e7d4      	b.n	800d96a <__kernel_rem_pio2f+0x40a>
 800d9c0:	ecb2 7a01 	vldmia	r2!, {s14}
 800d9c4:	3301      	adds	r3, #1
 800d9c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9ca:	e7d6      	b.n	800d97a <__kernel_rem_pio2f+0x41a>
 800d9cc:	ed72 7a01 	vldmdb	r2!, {s15}
 800d9d0:	edd2 6a01 	vldr	s13, [r2, #4]
 800d9d4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d9d8:	3801      	subs	r0, #1
 800d9da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9de:	ed82 7a00 	vstr	s14, [r2]
 800d9e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9e6:	edc2 7a01 	vstr	s15, [r2, #4]
 800d9ea:	e79c      	b.n	800d926 <__kernel_rem_pio2f+0x3c6>
 800d9ec:	ed73 7a01 	vldmdb	r3!, {s15}
 800d9f0:	edd3 6a01 	vldr	s13, [r3, #4]
 800d9f4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800d9f8:	3a01      	subs	r2, #1
 800d9fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9fe:	ed83 7a00 	vstr	s14, [r3]
 800da02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da06:	edc3 7a01 	vstr	s15, [r3, #4]
 800da0a:	e78f      	b.n	800d92c <__kernel_rem_pio2f+0x3cc>
 800da0c:	ed33 7a01 	vldmdb	r3!, {s14}
 800da10:	3c01      	subs	r4, #1
 800da12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da16:	e78f      	b.n	800d938 <__kernel_rem_pio2f+0x3d8>
 800da18:	eef1 6a66 	vneg.f32	s13, s13
 800da1c:	eeb1 7a47 	vneg.f32	s14, s14
 800da20:	edc7 6a00 	vstr	s13, [r7]
 800da24:	ed87 7a01 	vstr	s14, [r7, #4]
 800da28:	eef1 7a67 	vneg.f32	s15, s15
 800da2c:	e790      	b.n	800d950 <__kernel_rem_pio2f+0x3f0>
 800da2e:	bf00      	nop

0800da30 <floorf>:
 800da30:	ee10 3a10 	vmov	r3, s0
 800da34:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800da38:	3a7f      	subs	r2, #127	@ 0x7f
 800da3a:	2a16      	cmp	r2, #22
 800da3c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800da40:	dc2b      	bgt.n	800da9a <floorf+0x6a>
 800da42:	2a00      	cmp	r2, #0
 800da44:	da12      	bge.n	800da6c <floorf+0x3c>
 800da46:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800daac <floorf+0x7c>
 800da4a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800da4e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800da52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da56:	dd06      	ble.n	800da66 <floorf+0x36>
 800da58:	2b00      	cmp	r3, #0
 800da5a:	da24      	bge.n	800daa6 <floorf+0x76>
 800da5c:	2900      	cmp	r1, #0
 800da5e:	4b14      	ldr	r3, [pc, #80]	@ (800dab0 <floorf+0x80>)
 800da60:	bf08      	it	eq
 800da62:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800da66:	ee00 3a10 	vmov	s0, r3
 800da6a:	4770      	bx	lr
 800da6c:	4911      	ldr	r1, [pc, #68]	@ (800dab4 <floorf+0x84>)
 800da6e:	4111      	asrs	r1, r2
 800da70:	420b      	tst	r3, r1
 800da72:	d0fa      	beq.n	800da6a <floorf+0x3a>
 800da74:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800daac <floorf+0x7c>
 800da78:	ee30 0a27 	vadd.f32	s0, s0, s15
 800da7c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800da80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da84:	ddef      	ble.n	800da66 <floorf+0x36>
 800da86:	2b00      	cmp	r3, #0
 800da88:	bfbe      	ittt	lt
 800da8a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800da8e:	fa40 f202 	asrlt.w	r2, r0, r2
 800da92:	189b      	addlt	r3, r3, r2
 800da94:	ea23 0301 	bic.w	r3, r3, r1
 800da98:	e7e5      	b.n	800da66 <floorf+0x36>
 800da9a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800da9e:	d3e4      	bcc.n	800da6a <floorf+0x3a>
 800daa0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800daa4:	4770      	bx	lr
 800daa6:	2300      	movs	r3, #0
 800daa8:	e7dd      	b.n	800da66 <floorf+0x36>
 800daaa:	bf00      	nop
 800daac:	7149f2ca 	.word	0x7149f2ca
 800dab0:	bf800000 	.word	0xbf800000
 800dab4:	007fffff 	.word	0x007fffff

0800dab8 <_init>:
 800dab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daba:	bf00      	nop
 800dabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dabe:	bc08      	pop	{r3}
 800dac0:	469e      	mov	lr, r3
 800dac2:	4770      	bx	lr

0800dac4 <_fini>:
 800dac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dac6:	bf00      	nop
 800dac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daca:	bc08      	pop	{r3}
 800dacc:	469e      	mov	lr, r3
 800dace:	4770      	bx	lr
