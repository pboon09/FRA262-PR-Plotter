
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013950  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  08013b28  08013b28  00014b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014188  08014188  00016194  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08014188  08014188  00015188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014190  08014190  00016194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014190  08014190  00015190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014194  08014194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  08014198  00016000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021ec  20000194  0801432c  00016194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002380  0801432c  00016380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c420  00000000  00000000  000161c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055bb  00000000  00000000  000425e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d08  00000000  00000000  00047ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016b0  00000000  00000000  000498a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db96  00000000  00000000  0004af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bc84  00000000  00000000  00078aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a0cf  00000000  00000000  000a4772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001be841  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008494  00000000  00000000  001be884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c6d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08013b10 	.word	0x08013b10

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	08013b10 	.word	0x08013b10

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00a f9b8 	bl	800b354 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f009 faa1 	bl	800a538 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe6b 	bl	8001e16 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685a      	ldr	r2, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	615a      	str	r2, [r3, #20]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	603b      	str	r3, [r7, #0]
 800138c:	4613      	mov	r3, r2
 800138e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	88fa      	ldrh	r2, [r7, #6]
 800139a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3328      	adds	r3, #40	@ 0x28
 80013a0:	88fa      	ldrh	r2, [r7, #6]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 f829 	bl	80033fc <PWM_init>
	mdxx->GPIOx = GPIOx;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8b3a      	ldrh	r2, [r7, #24]
 80013b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80013d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d15f      	bne.n	80014a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80013e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	d115      	bne.n	800141c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3310      	adds	r3, #16
 80013f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001574 <MDXX_set_range+0x1ac>
 80013f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f002 f923 	bl	8003648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3328      	adds	r3, #40	@ 0x28
 8001406:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001574 <MDXX_set_range+0x1ac>
 800140a:	ed97 0a02 	vldr	s0, [r7, #8]
 800140e:	4618      	mov	r0, r3
 8001410:	f002 f91a 	bl	8003648 <PWM_write_range>
			mdxx->cmd = 0;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800141a:	e0a6      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800141c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001420:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001428:	dd1a      	ble.n	8001460 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	3310      	adds	r3, #16
 800142e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001574 <MDXX_set_range+0x1ac>
 8001432:	ed97 0a02 	vldr	s0, [r7, #8]
 8001436:	4618      	mov	r0, r3
 8001438:	f002 f906 	bl	8003648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 0a01 	vldr	s1, [r7, #4]
 8001444:	ed97 0a02 	vldr	s0, [r7, #8]
 8001448:	4618      	mov	r0, r3
 800144a:	f002 f8fd 	bl	8003648 <PWM_write_range>
			mdxx->cmd = duty;
 800144e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001452:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001456:	ee17 2a90 	vmov	r2, s15
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145e:	e084      	b.n	800156a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3310      	adds	r3, #16
 8001464:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001578 <MDXX_set_range+0x1b0>
 8001468:	ed97 0a02 	vldr	s0, [r7, #8]
 800146c:	4618      	mov	r0, r3
 800146e:	f002 f8eb 	bl	8003648 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3328      	adds	r3, #40	@ 0x28
 8001476:	edd7 7a01 	vldr	s15, [r7, #4]
 800147a:	eef0 7ae7 	vabs.f32	s15, s15
 800147e:	eef0 0a67 	vmov.f32	s1, s15
 8001482:	ed97 0a02 	vldr	s0, [r7, #8]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 f8de 	bl	8003648 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800148c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001490:	eef0 7ae7 	vabs.f32	s15, s15
 8001494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001498:	ee17 2a90 	vmov	r2, s15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e063      	b.n	800156a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d15e      	bne.n	800156a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80014ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80014b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d115      	bne.n	80014e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	f00a fe8a 	bl	800c1e0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3328      	adds	r3, #40	@ 0x28
 80014d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001574 <MDXX_set_range+0x1ac>
 80014d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 f8b5 	bl	8003648 <PWM_write_range>
			mdxx->cmd = 0;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e041      	b.n	800156a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f2:	dd1a      	ble.n	800152a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014fe:	2200      	movs	r2, #0
 8001500:	4619      	mov	r1, r3
 8001502:	f00a fe6d 	bl	800c1e0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3328      	adds	r3, #40	@ 0x28
 800150a:	edd7 0a01 	vldr	s1, [r7, #4]
 800150e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f002 f898 	bl	8003648 <PWM_write_range>
			mdxx->cmd = duty;
 8001518:	edd7 7a01 	vldr	s15, [r7, #4]
 800151c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001520:	ee17 2a90 	vmov	r2, s15
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001528:	e01f      	b.n	800156a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001534:	2201      	movs	r2, #1
 8001536:	4619      	mov	r1, r3
 8001538:	f00a fe52 	bl	800c1e0 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	3328      	adds	r3, #40	@ 0x28
 8001540:	edd7 7a01 	vldr	s15, [r7, #4]
 8001544:	eef0 7ae7 	vabs.f32	s15, s15
 8001548:	eef0 0a67 	vmov.f32	s1, s15
 800154c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001550:	4618      	mov	r0, r3
 8001552:	f002 f879 	bl	8003648 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001556:	edd7 7a01 	vldr	s15, [r7, #4]
 800155a:	eef0 7ae7 	vabs.f32	s15, s15
 800155e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001562:	ee17 2a90 	vmov	r2, s15
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	00000000 	.word	0x00000000
 8001578:	42c80000 	.word	0x42c80000

0800157c <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	601a      	str	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	ed2d 8b02 	vpush	{d8}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80015b8:	f7fe ffea 	bl	8000590 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015d4:	f7fe ffdc 	bl	8000590 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe20 	bl	8000224 <__adddf3>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015f4:	f7ff f8f6 	bl	80007e4 <__aeabi_ddiv>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	4610      	mov	r0, r2
 80015fe:	4619      	mov	r1, r3
 8001600:	f7ff faa8 	bl	8000b54 <__aeabi_d2f>
 8001604:	4603      	mov	r3, r0
 8001606:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001608:	ed97 7a00 	vldr	s14, [r7]
 800160c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001614:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001620:	4610      	mov	r0, r2
 8001622:	4619      	mov	r1, r3
 8001624:	f7ff fa96 	bl	8000b54 <__aeabi_d2f>
 8001628:	4603      	mov	r3, r0
 800162a:	ee07 3a90 	vmov	s15, r3
 800162e:	eeb1 8a67 	vneg.f32	s16, s15
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800163a:	4610      	mov	r0, r2
 800163c:	4619      	mov	r1, r3
 800163e:	f7ff fa89 	bl	8000b54 <__aeabi_d2f>
 8001642:	4604      	mov	r4, r0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff fa80 	bl	8000b54 <__aeabi_d2f>
 8001654:	4603      	mov	r3, r0
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	eef1 8a67 	vneg.f32	s17, s15
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff fa73 	bl	8000b54 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	ee02 3a10 	vmov	s4, r3
 8001674:	eef0 1a68 	vmov.f32	s3, s17
 8001678:	ee01 4a10 	vmov	s2, r4
 800167c:	eef0 0a48 	vmov.f32	s1, s16
 8001680:	ed97 0a02 	vldr	s0, [r7, #8]
 8001684:	f000 fbc7 	bl	8001e16 <mapf>
 8001688:	eef0 7a40 	vmov.f32	s15, s0
}
 800168c:	eeb0 0a67 	vmov.f32	s0, s15
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	ecbd 8b02 	vpop	{d8}
 8001698:	bdb0      	pop	{r4, r5, r7, pc}

0800169a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800169a:	b480      	push	{r7}
 800169c:	b085      	sub	sp, #20
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	68ba      	ldr	r2, [r7, #8]
 80016aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	605a      	str	r2, [r3, #4]
}
 80016b2:	bf00      	nop
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80016be:	b5b0      	push	{r4, r5, r7, lr}
 80016c0:	ed2d 8b02 	vpush	{d8}
 80016c4:	b088      	sub	sp, #32
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	60f8      	str	r0, [r7, #12]
 80016ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80016ce:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe fef9 	bl	80004e0 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	68b8      	ldr	r0, [r7, #8]
 80016f4:	f7fe fef4 	bl	80004e0 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ec43 2b10 	vmov	d0, r2, r3
 8001700:	f010 fb52 	bl	8011da8 <sin>
 8001704:	ec53 2b10 	vmov	r2, r3, d0
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	f7fe ff40 	bl	8000590 <__aeabi_dmul>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4614      	mov	r4, r2
 8001716:	461d      	mov	r5, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001720:	edd7 7a01 	vldr	s15, [r7, #4]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	ee17 0a90 	vmov	r0, s15
 800172c:	f7fe fed8 	bl	80004e0 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe ff2a 	bl	8000590 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f7ff fa06 	bl	8000b54 <__aeabi_d2f>
 8001748:	4603      	mov	r3, r0
 800174a:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	ed93 7a02 	vldr	s14, [r3, #8]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	edd3 7a00 	vldr	s15, [r3]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee17 0a90 	vmov	r0, s15
 8001764:	f7fe febc 	bl	80004e0 <__aeabi_f2d>
 8001768:	4604      	mov	r4, r0
 800176a:	460d      	mov	r5, r1
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f7fe feb7 	bl	80004e0 <__aeabi_f2d>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ec43 2b10 	vmov	d0, r2, r3
 800177a:	f010 fb15 	bl	8011da8 <sin>
 800177e:	ec53 2b10 	vmov	r2, r3, d0
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe ff03 	bl	8000590 <__aeabi_dmul>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4614      	mov	r4, r2
 8001790:	461d      	mov	r5, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fea1 	bl	80004e0 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4620      	mov	r0, r4
 80017a4:	4629      	mov	r1, r5
 80017a6:	f7fe fef3 	bl	8000590 <__aeabi_dmul>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	f7ff f9cf 	bl	8000b54 <__aeabi_d2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80017ca:	f7ff f80b 	bl	80007e4 <__aeabi_ddiv>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f7ff f9bd 	bl	8000b54 <__aeabi_d2f>
 80017da:	4603      	mov	r3, r0
 80017dc:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 80017de:	ed97 7a07 	vldr	s14, [r7, #28]
 80017e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80017ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f2:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f7ff f9a7 	bl	8000b54 <__aeabi_d2f>
 8001806:	4603      	mov	r3, r0
 8001808:	ee07 3a90 	vmov	s15, r3
 800180c:	eeb1 8a67 	vneg.f32	s16, s15
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001818:	4610      	mov	r0, r2
 800181a:	4619      	mov	r1, r3
 800181c:	f7ff f99a 	bl	8000b54 <__aeabi_d2f>
 8001820:	4604      	mov	r4, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f991 	bl	8000b54 <__aeabi_d2f>
 8001832:	4603      	mov	r3, r0
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef1 8a67 	vneg.f32	s17, s15
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f7ff f984 	bl	8000b54 <__aeabi_d2f>
 800184c:	4603      	mov	r3, r0
 800184e:	ee02 3a10 	vmov	s4, r3
 8001852:	eef0 1a68 	vmov.f32	s3, s17
 8001856:	ee01 4a10 	vmov	s2, r4
 800185a:	eef0 0a48 	vmov.f32	s1, s16
 800185e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001862:	f000 fad8 	bl	8001e16 <mapf>
 8001866:	eef0 7a40 	vmov.f32	s15, s0
}
 800186a:	eeb0 0a67 	vmov.f32	s0, s15
 800186e:	3720      	adds	r7, #32
 8001870:	46bd      	mov	sp, r7
 8001872:	ecbd 8b02 	vpop	{d8}
 8001876:	bdb0      	pop	{r4, r5, r7, pc}

08001878 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	ed2d 8b02 	vpush	{d8}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018b4:	f7fe fe6c 	bl	8000590 <__aeabi_dmul>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	461d      	mov	r5, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018d0:	f7fe fe5e 	bl	8000590 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fca2 	bl	8000224 <__adddf3>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018f0:	f7fe ff78 	bl	80007e4 <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff f92a 	bl	8000b54 <__aeabi_d2f>
 8001900:	4603      	mov	r3, r0
 8001902:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 8001904:	ed97 7a00 	vldr	s14, [r7]
 8001908:	edd7 7a03 	vldr	s15, [r7, #12]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800191c:	4610      	mov	r0, r2
 800191e:	4619      	mov	r1, r3
 8001920:	f7ff f918 	bl	8000b54 <__aeabi_d2f>
 8001924:	4603      	mov	r3, r0
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eeb1 8a67 	vneg.f32	s16, s15
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001936:	4610      	mov	r0, r2
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff f90b 	bl	8000b54 <__aeabi_d2f>
 800193e:	4604      	mov	r4, r0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f902 	bl	8000b54 <__aeabi_d2f>
 8001950:	4603      	mov	r3, r0
 8001952:	ee07 3a90 	vmov	s15, r3
 8001956:	eef1 8a67 	vneg.f32	s17, s15
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001962:	4610      	mov	r0, r2
 8001964:	4619      	mov	r1, r3
 8001966:	f7ff f8f5 	bl	8000b54 <__aeabi_d2f>
 800196a:	4603      	mov	r3, r0
 800196c:	ee02 3a10 	vmov	s4, r3
 8001970:	eef0 1a68 	vmov.f32	s3, s17
 8001974:	ee01 4a10 	vmov	s2, r4
 8001978:	eef0 0a48 	vmov.f32	s1, s16
 800197c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001980:	f000 fa49 	bl	8001e16 <mapf>
 8001984:	eef0 7a40 	vmov.f32	s15, s0
}
 8001988:	eeb0 0a67 	vmov.f32	s0, s15
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	ecbd 8b02 	vpop	{d8}
 8001994:	bdb0      	pop	{r4, r5, r7, pc}

08001996 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001996:	b480      	push	{r7}
 8001998:	b085      	sub	sp, #20
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	605a      	str	r2, [r3, #4]
}
 80019ae:	bf00      	nop
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019ba:	b5b0      	push	{r4, r5, r7, lr}
 80019bc:	ed2d 8b02 	vpush	{d8}
 80019c0:	b088      	sub	sp, #32
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	ed87 0a02 	vstr	s0, [r7, #8]
 80019ca:	edc7 0a01 	vstr	s1, [r7, #4]
 80019ce:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	edd3 7a00 	vldr	s15, [r3]
 80019e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e6:	ee17 0a90 	vmov	r0, s15
 80019ea:	f7fe fd79 	bl	80004e0 <__aeabi_f2d>
 80019ee:	4604      	mov	r4, r0
 80019f0:	460d      	mov	r5, r1
 80019f2:	68b8      	ldr	r0, [r7, #8]
 80019f4:	f7fe fd74 	bl	80004e0 <__aeabi_f2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	ec43 2b10 	vmov	d0, r2, r3
 8001a00:	f010 f97e 	bl	8011d00 <cos>
 8001a04:	ec53 2b10 	vmov	r2, r3, d0
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fdc0 	bl	8000590 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f89c 	bl	8000b54 <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a28:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	ed97 7a00 	vldr	s14, [r7]
 8001a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a40:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd44 	bl	80004e0 <__aeabi_f2d>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4620      	mov	r0, r4
 8001a5e:	4629      	mov	r1, r5
 8001a60:	f7fe fd96 	bl	8000590 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a74:	f7fe feb6 	bl	80007e4 <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f868 	bl	8000b54 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a88:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f7ff f852 	bl	8000b54 <__aeabi_d2f>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	ee07 3a90 	vmov	s15, r3
 8001ab6:	eeb1 8a67 	vneg.f32	s16, s15
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff f845 	bl	8000b54 <__aeabi_d2f>
 8001aca:	4604      	mov	r4, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7ff f83c 	bl	8000b54 <__aeabi_d2f>
 8001adc:	4603      	mov	r3, r0
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef1 8a67 	vneg.f32	s17, s15
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7ff f82f 	bl	8000b54 <__aeabi_d2f>
 8001af6:	4603      	mov	r3, r0
 8001af8:	ee02 3a10 	vmov	s4, r3
 8001afc:	eef0 1a68 	vmov.f32	s3, s17
 8001b00:	ee01 4a10 	vmov	s2, r4
 8001b04:	eef0 0a48 	vmov.f32	s1, s16
 8001b08:	ed97 0a04 	vldr	s0, [r7, #16]
 8001b0c:	f000 f983 	bl	8001e16 <mapf>
 8001b10:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b14:	eeb0 0a67 	vmov.f32	s0, s15
 8001b18:	3720      	adds	r7, #32
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	ecbd 8b02 	vpop	{d8}
 8001b20:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001b24 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	ed2d 8b02 	vpush	{d8}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	460b      	mov	r3, r1
 8001b32:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b36:	edc7 0a00 	vstr	s1, [r7]
 8001b3a:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <FIR_init+0x2a>
        numTaps += 1;
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	897a      	ldrh	r2, [r7, #10]
 8001b52:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b5a:	897b      	ldrh	r3, [r7, #10]
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00f ffc6 	bl	8011af0 <malloc>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b6c:	897b      	ldrh	r3, [r7, #10]
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f00f ffbd 	bl	8011af0 <malloc>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80e0 	beq.w	8001d48 <FIR_init+0x224>
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80db 	beq.w	8001d48 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b96:	e00a      	b.n	8001bae <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685a      	ldr	r2, [r3, #4]
 8001b9c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001baa:	3301      	adds	r3, #1
 8001bac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bae:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bb0:	897b      	ldrh	r3, [r7, #10]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3f0      	bcc.n	8001b98 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bb6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bba:	ed97 7a00 	vldr	s14, [r7]
 8001bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bc2:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bc6:	897b      	ldrh	r3, [r7, #10]
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bd2:	e077      	b.n	8001cc4 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001bd4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001bd8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d10c      	bne.n	8001bfa <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	4413      	add	r3, r2
 8001bec:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bf0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bf4:	edc3 7a00 	vstr	s15, [r3]
 8001bf8:	e02c      	b.n	8001c54 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001bfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bfc:	8afb      	ldrh	r3, [r7, #22]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c04:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c08:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d54 <FIR_init+0x230>
 8001c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	eeb0 0a67 	vmov.f32	s0, s15
 8001c24:	f010 f996 	bl	8011f54 <sinf>
 8001c28:	eef0 6a40 	vmov.f32	s13, s0
 8001c2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c30:	ee07 3a90 	vmov	s15, r3
 8001c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c38:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d58 <FIR_init+0x234>
 8001c3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c50:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 8a00 	vldr	s16, [r3]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	ee07 3a90 	vmov	s15, r3
 8001c6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c70:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d54 <FIR_init+0x230>
 8001c74:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c78:	897b      	ldrh	r3, [r7, #10]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	ee07 3a90 	vmov	s15, r3
 8001c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c84:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c88:	eeb0 0a66 	vmov.f32	s0, s13
 8001c8c:	f010 f91e 	bl	8011ecc <cosf>
 8001c90:	eef0 7a40 	vmov.f32	s15, s0
 8001c94:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d5c <FIR_init+0x238>
 8001c98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c9c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d60 <FIR_init+0x23c>
 8001ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cb4:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001cb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cc4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cc8:	897b      	ldrh	r3, [r7, #10]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	db82      	blt.n	8001bd4 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	83fb      	strh	r3, [r7, #30]
 8001cd8:	e00f      	b.n	8001cfa <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	8bfb      	ldrh	r3, [r7, #30]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	edd3 7a00 	vldr	s15, [r3]
 8001ce8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf0:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bfa      	ldrh	r2, [r7, #30]
 8001cfc:	897b      	ldrh	r3, [r7, #10]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3eb      	bcc.n	8001cda <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d02:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0e:	d01b      	beq.n	8001d48 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d10:	2300      	movs	r3, #0
 8001d12:	83bb      	strh	r3, [r7, #28]
 8001d14:	e014      	b.n	8001d40 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	8bbb      	ldrh	r3, [r7, #28]
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	edd3 6a00 	vldr	s13, [r3]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	8bbb      	ldrh	r3, [r7, #28]
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d36:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d3a:	8bbb      	ldrh	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	83bb      	strh	r3, [r7, #28]
 8001d40:	8bba      	ldrh	r2, [r7, #28]
 8001d42:	897b      	ldrh	r3, [r7, #10]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3e6      	bcc.n	8001d16 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	@ 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	ecbd 8b02 	vpop	{d8}
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40c90fdb 	.word	0x40c90fdb
 8001d58:	40490fdb 	.word	0x40490fdb
 8001d5c:	3eeb851f 	.word	0x3eeb851f
 8001d60:	3f0a3d71 	.word	0x3f0a3d71

08001d64 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	895b      	ldrh	r3, [r3, #10]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001d80:	f04f 0300 	mov.w	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	895b      	ldrh	r3, [r3, #10]
 8001d8a:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	813b      	strh	r3, [r7, #8]
 8001d90:	e023      	b.n	8001dda <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	897b      	ldrh	r3, [r7, #10]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	ed93 7a00 	vldr	s14, [r3]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	893b      	ldrh	r3, [r7, #8]
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	4413      	add	r3, r2
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001dbe:	897b      	ldrh	r3, [r7, #10]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d104      	bne.n	8001dce <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	891b      	ldrh	r3, [r3, #8]
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	817b      	strh	r3, [r7, #10]
 8001dcc:	e002      	b.n	8001dd4 <FIR_process+0x70>
        } else {
            index--;
 8001dce:	897b      	ldrh	r3, [r7, #10]
 8001dd0:	3b01      	subs	r3, #1
 8001dd2:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001dd4:	893b      	ldrh	r3, [r7, #8]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	813b      	strh	r3, [r7, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	891b      	ldrh	r3, [r3, #8]
 8001dde:	893a      	ldrh	r2, [r7, #8]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d3d6      	bcc.n	8001d92 <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	895b      	ldrh	r3, [r3, #10]
 8001de8:	3301      	adds	r3, #1
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	895a      	ldrh	r2, [r3, #10]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	891b      	ldrh	r3, [r3, #8]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d302      	bcc.n	8001e02 <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	ee07 3a90 	vmov	s15, r3
}
 8001e08:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001e16:	b480      	push	{r7}
 8001e18:	b089      	sub	sp, #36	@ 0x24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e20:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e24:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e28:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e2c:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001e30:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e34:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e38:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e4c:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001e50:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e64:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	ee07 3a90 	vmov	s15, r3
}
 8001e76:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7a:	3724      	adds	r7, #36	@ 0x24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001e88:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <modbus_1t5_Timeout+0x3c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <modbus_1t5_Timeout+0x3c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001e9c:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <modbus_1t5_Timeout+0x3c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <modbus_1t5_Timeout+0x3c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200001b0 	.word	0x200001b0

08001ec4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001ecc:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <modbus_3t5_Timeout+0x1c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	755a      	strb	r2, [r3, #21]

}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	200001b0 	.word	0x200001b0

08001ee4 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f00e f845 	bl	800ff7c <HAL_UART_GetError>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b20      	cmp	r3, #32
 8001ef6:	d101      	bne.n	8001efc <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001ef8:	f7ff ffc4 	bl	8001e84 <modbus_1t5_Timeout>

	}
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001f12:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001f18:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68ba      	ldr	r2, [r7, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001f20:	4b29      	ldr	r3, [pc, #164]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001f28:	4b27      	ldr	r3, [pc, #156]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001f30:	4b25      	ldr	r3, [pc, #148]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	7e3a      	ldrb	r2, [r7, #24]
 8001f36:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001f38:	4b23      	ldr	r3, [pc, #140]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	69fa      	ldr	r2, [r7, #28]
 8001f3e:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	4a21      	ldr	r2, [pc, #132]	@ (8001fcc <Modbus_init+0xc8>)
 8001f46:	210e      	movs	r1, #14
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f00c fabb 	bl	800e4c4 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	2110      	movs	r1, #16
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00d ffbb 	bl	800fed0 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f00d ffd2 	bl	800ff08 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	4a19      	ldr	r2, [pc, #100]	@ (8001fd0 <Modbus_init+0xcc>)
 8001f6a:	2104      	movs	r1, #4
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f00d faf9 	bl	800f564 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f72:	4b15      	ldr	r3, [pc, #84]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f84:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001f88:	4413      	add	r3, r2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f90:	4619      	mov	r1, r3
 8001f92:	f00d fba1 	bl	800f6d8 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001f96:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc8 <Modbus_init+0xc4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10c      	bne.n	8001fc0 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001fa6:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <Modbus_init+0xc4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f00b fa65 	bl	800d47c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001fb2:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <Modbus_init+0xc4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f00b fcb4 	bl	800d928 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001fc0:	bf00      	nop
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200001b0 	.word	0x200001b0
 8001fcc:	08001ec5 	.word	0x08001ec5
 8001fd0:	08001ee5 	.word	0x08001ee5

08001fd4 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	@ 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6278      	str	r0, [r7, #36]	@ 0x24
 8001fdc:	ed87 0a08 	vstr	s0, [r7, #32]
 8001fe0:	edc7 0a07 	vstr	s1, [r7, #28]
 8001fe4:	ed87 1a06 	vstr	s2, [r7, #24]
 8001fe8:	edc7 1a05 	vstr	s3, [r7, #20]
 8001fec:	ed87 2a04 	vstr	s4, [r7, #16]
 8001ff0:	edc7 2a03 	vstr	s5, [r7, #12]
 8001ff4:	ed87 3a02 	vstr	s6, [r7, #8]
 8001ff8:	edc7 3a01 	vstr	s7, [r7, #4]
 8001ffc:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8002000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002002:	6a3a      	ldr	r2, [r7, #32]
 8002004:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8002038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800203a:	2210      	movs	r2, #16
 800203c:	2100      	movs	r1, #0
 800203e:	4618      	mov	r0, r3
 8002040:	f00f fe0c 	bl	8011c5c <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	3310      	adds	r3, #16
 8002048:	2240      	movs	r2, #64	@ 0x40
 800204a:	2100      	movs	r1, #0
 800204c:	4618      	mov	r0, r3
 800204e:	f00f fe05 	bl	8011c5c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002052:	2300      	movs	r3, #0
 8002054:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002056:	e00c      	b.n	8002072 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8002058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002062:	3304      	adds	r3, #4
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	4a79      	ldr	r2, [pc, #484]	@ (8002250 <MotorKalman_Init+0x27c>)
 800206a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800206c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206e:	3301      	adds	r3, #1
 8002070:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002074:	2b03      	cmp	r3, #3
 8002076:	ddef      	ble.n	8002058 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8002078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800207a:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 800207e:	2240      	movs	r2, #64	@ 0x40
 8002080:	2100      	movs	r1, #0
 8002082:	4618      	mov	r0, r3
 8002084:	f00f fdea 	bl	8011c5c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002088:	2300      	movs	r3, #0
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800208c:	e00d      	b.n	80020aa <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 800208e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002098:	33be      	adds	r3, #190	@ 0xbe
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020a2:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80020a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a6:	3301      	adds	r3, #1
 80020a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	ddee      	ble.n	800208e <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 80020b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b2:	33f0      	adds	r3, #240	@ 0xf0
 80020b4:	2210      	movs	r2, #16
 80020b6:	2100      	movs	r1, #0
 80020b8:	4618      	mov	r0, r3
 80020ba:	f00f fdcf 	bl	8011c5c <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 80020be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020c4:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 80020c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80020ce:	2210      	movs	r2, #16
 80020d0:	2100      	movs	r1, #0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f00f fdc2 	bl	8011c5c <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020de:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 80020e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80020e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020e8:	f000 f922 	bl	8002330 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 80020ec:	ed97 0a00 	vldr	s0, [r7]
 80020f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80020f2:	f000 f94d 	bl	8002390 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	2201      	movs	r2, #1
 8002100:	2104      	movs	r1, #4
 8002102:	f00f f83a 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	3310      	adds	r3, #16
 8002110:	2204      	movs	r2, #4
 8002112:	2104      	movs	r1, #4
 8002114:	f00f f831 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211a:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800211e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002120:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002124:	2204      	movs	r2, #4
 8002126:	2104      	movs	r1, #4
 8002128:	f00f f827 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 800212c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212e:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002138:	2201      	movs	r2, #1
 800213a:	2101      	movs	r1, #1
 800213c:	f00f f81d 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 800214c:	2201      	movs	r2, #1
 800214e:	2101      	movs	r1, #1
 8002150:	f00f f813 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 800215a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8002160:	2201      	movs	r2, #1
 8002162:	2101      	movs	r1, #1
 8002164:	f00f f809 	bl	801117a <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8002174:	2204      	movs	r2, #4
 8002176:	2104      	movs	r1, #4
 8002178:	f00e ffff 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8002182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002184:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8002188:	2201      	movs	r2, #1
 800218a:	2104      	movs	r1, #4
 800218c:	f00e fff5 	bl	801117a <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8002196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002198:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800219c:	2201      	movs	r2, #1
 800219e:	2104      	movs	r1, #4
 80021a0:	f00e ffeb 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a6:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80021b0:	2204      	movs	r2, #4
 80021b2:	2104      	movs	r1, #4
 80021b4:	f00e ffe1 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80021c4:	2204      	movs	r2, #4
 80021c6:	2101      	movs	r1, #1
 80021c8:	f00e ffd7 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ce:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 80021d8:	2201      	movs	r2, #1
 80021da:	2101      	movs	r1, #1
 80021dc:	f00e ffcd 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 80021e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e8:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 80021ec:	2201      	movs	r2, #1
 80021ee:	2104      	movs	r1, #4
 80021f0:	f00e ffc3 	bl	801117a <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 80021f4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80021f6:	f000 f82d 	bl	8002254 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	3390      	adds	r3, #144	@ 0x90
 8002204:	2204      	movs	r2, #4
 8002206:	2104      	movs	r1, #4
 8002208:	f00e ffb7 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 800220c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220e:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	33e0      	adds	r3, #224	@ 0xe0
 8002216:	2201      	movs	r2, #1
 8002218:	2104      	movs	r1, #4
 800221a:	f00e ffae 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800222a:	2204      	movs	r2, #4
 800222c:	2104      	movs	r1, #4
 800222e:	f00e ffa4 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800223e:	2201      	movs	r2, #1
 8002240:	2104      	movs	r1, #4
 8002242:	f00e ff9a 	bl	801117a <arm_mat_init_f32>
}
 8002246:	bf00      	nop
 8002248:	3730      	adds	r7, #48	@ 0x30
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	42c80000 	.word	0x42c80000

08002254 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8002290:	4619      	mov	r1, r3
 8002292:	4610      	mov	r0, r2
 8002294:	eeb0 3a64 	vmov.f32	s6, s9
 8002298:	eef0 2a45 	vmov.f32	s5, s10
 800229c:	eeb0 2a65 	vmov.f32	s4, s11
 80022a0:	eef0 1a46 	vmov.f32	s3, s12
 80022a4:	eeb0 1a66 	vmov.f32	s2, s13
 80022a8:	eef0 0a47 	vmov.f32	s1, s14
 80022ac:	eeb0 0a67 	vmov.f32	s0, s15
 80022b0:	f001 f83c 	bl	800332c <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80022ba:	2240      	movs	r2, #64	@ 0x40
 80022bc:	2100      	movs	r1, #0
 80022be:	4618      	mov	r0, r3
 80022c0:	f00f fccc 	bl	8011c5c <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80022ca:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002328 <MotorKalman_DiscretizeModel+0xd4>
 80022ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80022d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80022ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 80022fe:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800232c <MotorKalman_DiscretizeModel+0xd8>
 8002302:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002312:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002328 <MotorKalman_DiscretizeModel+0xd4>
 8002316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	3c23d70a 	.word	0x3c23d70a
 800232c:	3dcccccd 	.word	0x3dcccccd

08002330 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8002342:	2240      	movs	r2, #64	@ 0x40
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f00f fc88 	bl	8011c5c <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 800234c:	edd7 7a00 	vldr	s15, [r7]
 8002350:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8002368:	eef5 7a40 	vcmp.f32	s15, #0.0
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	d107      	bne.n	8002382 <MotorKalman_SetProcessNoise+0x52>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8002378:	eef5 7a40 	vcmp.f32	s15, #0.0
 800237c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002380:	d002      	beq.n	8002388 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff ff66 	bl	8002254 <MotorKalman_DiscretizeModel>
    }
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 800239c:	ed97 0a00 	vldr	s0, [r7]
 80023a0:	f00f fd76 	bl	8011e90 <sqrtf>
 80023a4:	eef0 7a40 	vmov.f32	s15, s0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 80023be:	b580      	push	{r7, lr}
 80023c0:	b0b2      	sub	sp, #200	@ 0xc8
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	6078      	str	r0, [r7, #4]
 80023c6:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 80023d2:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023e6:	e041      	b.n	800246c <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 80023e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	33c8      	adds	r3, #200	@ 0xc8
 80023f0:	443b      	add	r3, r7
 80023f2:	3b3c      	subs	r3, #60	@ 0x3c
 80023f4:	f04f 0200 	mov.w	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002400:	e02b      	b.n	800245a <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 8002402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	33c8      	adds	r3, #200	@ 0xc8
 800240a:	443b      	add	r3, r7
 800240c:	3b3c      	subs	r3, #60	@ 0x3c
 800240e:	ed93 7a00 	vldr	s14, [r3]
 8002412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002416:	009a      	lsls	r2, r3, #2
 8002418:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800241c:	4413      	add	r3, r2
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	3324      	adds	r3, #36	@ 0x24
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	edd3 6a00 	vldr	s13, [r3]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	edd3 7a00 	vldr	s15, [r3]
 8002438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	33c8      	adds	r3, #200	@ 0xc8
 8002448:	443b      	add	r3, r7
 800244a:	3b3c      	subs	r3, #60	@ 0x3c
 800244c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002454:	3301      	adds	r3, #1
 8002456:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800245a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800245e:	2b03      	cmp	r3, #3
 8002460:	ddcf      	ble.n	8002402 <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002462:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002466:	3301      	adds	r3, #1
 8002468:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800246c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002470:	2b03      	cmp	r3, #3
 8002472:	ddb9      	ble.n	80023e8 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002474:	2300      	movs	r3, #0
 8002476:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800247a:	e021      	b.n	80024c0 <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 800247c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	33c8      	adds	r3, #200	@ 0xc8
 8002484:	443b      	add	r3, r7
 8002486:	3b3c      	subs	r3, #60	@ 0x3c
 8002488:	ed93 7a00 	vldr	s14, [r3]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002492:	3338      	adds	r3, #56	@ 0x38
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	edd3 6a00 	vldr	s13, [r3]
 800249c:	edd7 7a00 	vldr	s15, [r7]
 80024a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024ba:	3301      	adds	r3, #1
 80024bc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80024c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	ddd9      	ble.n	800247c <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80024c8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80024cc:	2240      	movs	r2, #64	@ 0x40
 80024ce:	2100      	movs	r1, #0
 80024d0:	4618      	mov	r0, r3
 80024d2:	f00f fbc3 	bl	8011c5c <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	2240      	movs	r2, #64	@ 0x40
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f00f fbbc 	bl	8011c5c <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80024ea:	e05f      	b.n	80025ac <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024f2:	e052      	b.n	800259a <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80024f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80024f8:	009a      	lsls	r2, r3, #2
 80024fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	33c8      	adds	r3, #200	@ 0xc8
 8002504:	443b      	add	r3, r7
 8002506:	3b7c      	subs	r3, #124	@ 0x7c
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800250e:	2300      	movs	r3, #0
 8002510:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002514:	e038      	b.n	8002588 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002516:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800251a:	009a      	lsls	r2, r3, #2
 800251c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	33c8      	adds	r3, #200	@ 0xc8
 8002526:	443b      	add	r3, r7
 8002528:	3b7c      	subs	r3, #124	@ 0x7c
 800252a:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 800252e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002532:	009a      	lsls	r2, r3, #2
 8002534:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002538:	4413      	add	r3, r2
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	3324      	adds	r3, #36	@ 0x24
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	edd3 6a00 	vldr	s13, [r3]
 8002546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800254a:	009a      	lsls	r2, r3, #2
 800254c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002550:	4413      	add	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	3304      	adds	r3, #4
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4413      	add	r3, r2
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002566:	009a      	lsls	r2, r3, #2
 8002568:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800256c:	4413      	add	r3, r2
 800256e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	33c8      	adds	r3, #200	@ 0xc8
 8002576:	443b      	add	r3, r7
 8002578:	3b7c      	subs	r3, #124	@ 0x7c
 800257a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800257e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002582:	3301      	adds	r3, #1
 8002584:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800258c:	2b03      	cmp	r3, #3
 800258e:	ddc2      	ble.n	8002516 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002594:	3301      	adds	r3, #1
 8002596:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800259a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800259e:	2b03      	cmp	r3, #3
 80025a0:	dda8      	ble.n	80024f4 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025a6:	3301      	adds	r3, #1
 80025a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	dd9b      	ble.n	80024ec <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80025ba:	e05f      	b.n	800267c <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80025bc:	2300      	movs	r3, #0
 80025be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025c2:	e052      	b.n	800266a <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 80025c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025c8:	009a      	lsls	r2, r3, #2
 80025ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	33c8      	adds	r3, #200	@ 0xc8
 80025d4:	443b      	add	r3, r7
 80025d6:	3bbc      	subs	r3, #188	@ 0xbc
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80025e4:	e038      	b.n	8002658 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80025e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025ea:	009a      	lsls	r2, r3, #2
 80025ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	33c8      	adds	r3, #200	@ 0xc8
 80025f6:	443b      	add	r3, r7
 80025f8:	3bbc      	subs	r3, #188	@ 0xbc
 80025fa:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 80025fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002602:	009a      	lsls	r2, r3, #2
 8002604:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	33c8      	adds	r3, #200	@ 0xc8
 800260e:	443b      	add	r3, r7
 8002610:	3b7c      	subs	r3, #124	@ 0x7c
 8002612:	edd3 6a00 	vldr	s13, [r3]
 8002616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800261a:	009a      	lsls	r2, r3, #2
 800261c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002620:	4413      	add	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	3324      	adds	r3, #36	@ 0x24
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	edd3 7a00 	vldr	s15, [r3]
 800262e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002632:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002636:	009a      	lsls	r2, r3, #2
 8002638:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800263c:	4413      	add	r3, r2
 800263e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	33c8      	adds	r3, #200	@ 0xc8
 8002646:	443b      	add	r3, r7
 8002648:	3bbc      	subs	r3, #188	@ 0xbc
 800264a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800264e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002652:	3301      	adds	r3, #1
 8002654:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800265c:	2b03      	cmp	r3, #3
 800265e:	ddc2      	ble.n	80025e6 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002664:	3301      	adds	r3, #1
 8002666:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800266a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800266e:	2b03      	cmp	r3, #3
 8002670:	dda8      	ble.n	80025c4 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002676:	3301      	adds	r3, #1
 8002678:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800267c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002680:	2b03      	cmp	r3, #3
 8002682:	dd9b      	ble.n	80025bc <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002684:	2300      	movs	r3, #0
 8002686:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800268a:	e037      	b.n	80026fc <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002692:	e02a      	b.n	80026ea <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002694:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002698:	009a      	lsls	r2, r3, #2
 800269a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	33c8      	adds	r3, #200	@ 0xc8
 80026a4:	443b      	add	r3, r7
 80026a6:	3bbc      	subs	r3, #188	@ 0xbc
 80026a8:	ed93 7a00 	vldr	s14, [r3]
 80026ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026b0:	009a      	lsls	r2, r3, #2
 80026b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026b6:	4413      	add	r3, r2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	3354      	adds	r3, #84	@ 0x54
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80026c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026c8:	009a      	lsls	r2, r3, #2
 80026ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026ce:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 80026d0:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	3304      	adds	r3, #4
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80026e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026e4:	3301      	adds	r3, #1
 80026e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	ddd0      	ble.n	8002694 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80026f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026f6:	3301      	adds	r3, #1
 80026f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002700:	2b03      	cmp	r3, #3
 8002702:	ddc3      	ble.n	800268c <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	2104      	movs	r1, #4
 8002738:	f00e fd1f 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3310      	adds	r3, #16
 8002746:	2204      	movs	r2, #4
 8002748:	2104      	movs	r1, #4
 800274a:	f00e fd16 	bl	801117a <arm_mat_init_f32>
}
 800274e:	bf00      	nop
 8002750:	37c8      	adds	r7, #200	@ 0xc8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b0d0      	sub	sp, #320	@ 0x140
 800275c:	af00      	add	r7, sp, #0
 800275e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002762:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002766:	6018      	str	r0, [r3, #0]
 8002768:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800276c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002770:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002774:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002778:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002782:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002786:	6812      	ldr	r2, [r2, #0]
 8002788:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 800278c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002790:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 800279a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800279e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	edd3 7a00 	vldr	s15, [r3]
 80027a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 80027ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80027c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027cc:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80027d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 80027de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027e2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	edd3 7a02 	vldr	s15, [r3, #8]
 80027ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 80027f0:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 80027f4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80027f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002802:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002806:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002810:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002818:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 800281c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002820:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002824:	ed93 7a00 	vldr	s14, [r3]
 8002828:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 800282c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002830:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002834:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002842:	2300      	movs	r3, #0
 8002844:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002848:	e04d      	b.n	80028e6 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 800284a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002854:	443b      	add	r3, r7
 8002856:	3b58      	subs	r3, #88	@ 0x58
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800285e:	2300      	movs	r3, #0
 8002860:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002864:	e036      	b.n	80028d4 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002866:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002870:	443b      	add	r3, r7
 8002872:	3b58      	subs	r3, #88	@ 0x58
 8002874:	ed93 7a00 	vldr	s14, [r3]
 8002878:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800287c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002886:	333c      	adds	r3, #60	@ 0x3c
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	edd3 6a00 	vldr	s13, [r3]
 8002890:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800289a:	4413      	add	r3, r2
 800289c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80028a0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80028a4:	6812      	ldr	r2, [r2, #0]
 80028a6:	3304      	adds	r3, #4
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80028c2:	443b      	add	r3, r7
 80028c4:	3b58      	subs	r3, #88	@ 0x58
 80028c6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80028ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028ce:	3301      	adds	r3, #1
 80028d0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80028d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80028d8:	2b03      	cmp	r3, #3
 80028da:	ddc4      	ble.n	8002866 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028e0:	3301      	adds	r3, #1
 80028e2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80028e6:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	ddad      	ble.n	800284a <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80028f6:	2300      	movs	r3, #0
 80028f8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80028fc:	e021      	b.n	8002942 <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 80028fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002908:	443b      	add	r3, r7
 800290a:	3b58      	subs	r3, #88	@ 0x58
 800290c:	ed93 7a00 	vldr	s14, [r3]
 8002910:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002914:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800291e:	333c      	adds	r3, #60	@ 0x3c
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	4413      	add	r3, r2
 8002924:	edd3 7a00 	vldr	s15, [r3]
 8002928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292c:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002934:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002938:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800293c:	3301      	adds	r3, #1
 800293e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002942:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002946:	2b03      	cmp	r3, #3
 8002948:	ddd9      	ble.n	80028fe <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 800294a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800294e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002958:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 800295c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002960:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002964:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002972:	2300      	movs	r3, #0
 8002974:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002978:	e04d      	b.n	8002a16 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 800297a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002984:	443b      	add	r3, r7
 8002986:	3b68      	subs	r3, #104	@ 0x68
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002994:	e036      	b.n	8002a04 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002996:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029a0:	443b      	add	r3, r7
 80029a2:	3b68      	subs	r3, #104	@ 0x68
 80029a4:	ed93 7a00 	vldr	s14, [r3]
 80029a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029ac:	009a      	lsls	r2, r3, #2
 80029ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029b2:	4413      	add	r3, r2
 80029b4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80029b8:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	3304      	adds	r3, #4
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	edd3 6a00 	vldr	s13, [r3]
 80029c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80029cc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029d6:	333c      	adds	r3, #60	@ 0x3c
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80029f2:	443b      	add	r3, r7
 80029f4:	3b68      	subs	r3, #104	@ 0x68
 80029f6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80029fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80029fe:	3301      	adds	r3, #1
 8002a00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002a04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a08:	2b03      	cmp	r3, #3
 8002a0a:	ddc4      	ble.n	8002996 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a10:	3301      	adds	r3, #1
 8002a12:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	ddad      	ble.n	800297a <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002a1e:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a32:	e01a      	b.n	8002a6a <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002a34:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a3e:	443b      	add	r3, r7
 8002a40:	3b68      	subs	r3, #104	@ 0x68
 8002a42:	edd3 6a00 	vldr	s13, [r3]
 8002a46:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a4e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a58:	443b      	add	r3, r7
 8002a5a:	3b78      	subs	r3, #120	@ 0x78
 8002a5c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a60:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a64:	3301      	adds	r3, #1
 8002a66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002a6a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	dde0      	ble.n	8002a34 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002a78:	e029      	b.n	8002ace <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002a7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002a7e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	ed93 7a00 	vldr	s14, [r3]
 8002a90:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002a9a:	443b      	add	r3, r7
 8002a9c:	3b78      	subs	r3, #120	@ 0x78
 8002a9e:	edd3 6a00 	vldr	s13, [r3]
 8002aa2:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002aa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ab2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ac4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002ace:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	ddd1      	ble.n	8002a7a <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002ad6:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8002ada:	2240      	movs	r2, #64	@ 0x40
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f00f f8bc 	bl	8011c5c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002aea:	e035      	b.n	8002b58 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002af2:	e028      	b.n	8002b46 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8002af4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002afe:	443b      	add	r3, r7
 8002b00:	3b78      	subs	r3, #120	@ 0x78
 8002b02:	ed93 7a00 	vldr	s14, [r3]
 8002b06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002b0a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b14:	333c      	adds	r3, #60	@ 0x3c
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b22:	009a      	lsls	r2, r3, #2
 8002b24:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b28:	4413      	add	r3, r2
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002b34:	443b      	add	r3, r7
 8002b36:	3bb8      	subs	r3, #184	@ 0xb8
 8002b38:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b40:	3301      	adds	r3, #1
 8002b42:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002b46:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002b4a:	2b03      	cmp	r3, #3
 8002b4c:	ddd2      	ble.n	8002af4 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b52:	3301      	adds	r3, #1
 8002b54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002b58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	ddc5      	ble.n	8002aec <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002b60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002b64:	2240      	movs	r2, #64	@ 0x40
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f00f f877 	bl	8011c5c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002b74:	e038      	b.n	8002be8 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002b7c:	e02b      	b.n	8002bd6 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 8002b7e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b82:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d102      	bne.n	8002b90 <MotorKalman_Update+0x438>
 8002b8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b8e:	e001      	b.n	8002b94 <MotorKalman_Update+0x43c>
 8002b90:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 8002dac <MotorKalman_Update+0x654>
 8002b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b98:	009a      	lsls	r2, r3, #2
 8002b9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ba6:	443b      	add	r3, r7
 8002ba8:	3bb8      	subs	r3, #184	@ 0xb8
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bb8:	4413      	add	r3, r2
 8002bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002bc4:	443b      	add	r3, r7
 8002bc6:	3bf8      	subs	r3, #248	@ 0xf8
 8002bc8:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002bd6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	ddcf      	ble.n	8002b7e <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002be2:	3301      	adds	r3, #1
 8002be4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	ddc2      	ble.n	8002b76 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 8002bf0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002bf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f103 0110 	add.w	r1, r3, #16
 8002bfe:	f107 0308 	add.w	r3, r7, #8
 8002c02:	2240      	movs	r2, #64	@ 0x40
 8002c04:	4618      	mov	r0, r3
 8002c06:	f00f f86d 	bl	8011ce4 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c10:	e06e      	b.n	8002cf0 <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002c18:	e061      	b.n	8002cde <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002c1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c1e:	009a      	lsls	r2, r3, #2
 8002c20:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c24:	4413      	add	r3, r2
 8002c26:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c2a:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	3304      	adds	r3, #4
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c42:	e043      	b.n	8002ccc <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c48:	009a      	lsls	r2, r3, #2
 8002c4a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c4e:	4413      	add	r3, r2
 8002c50:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c54:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 8002c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002c68:	009a      	lsls	r2, r3, #2
 8002c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c6e:	4413      	add	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002c76:	443b      	add	r3, r7
 8002c78:	3bf8      	subs	r3, #248	@ 0xf8
 8002c7a:	edd3 6a00 	vldr	s13, [r3]
 8002c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002c82:	009a      	lsls	r2, r3, #2
 8002c84:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002c88:	4413      	add	r3, r2
 8002c8a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002c8e:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	4413      	add	r3, r2
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002c9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002ca2:	009a      	lsls	r2, r3, #2
 8002ca4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ca8:	4413      	add	r3, r2
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002cb2:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002cb6:	6812      	ldr	r2, [r2, #0]
 8002cb8:	3304      	adds	r3, #4
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	ddb7      	ble.n	8002c44 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002cd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002cde:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	dd99      	ble.n	8002c1a <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cea:	3301      	adds	r3, #1
 8002cec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002cf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002cf4:	2b03      	cmp	r3, #3
 8002cf6:	dd8c      	ble.n	8002c12 <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002cf8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002d12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d16:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d22:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002d2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689a      	ldr	r2, [r3, #8]
 8002d38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002d46:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d4a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002d60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d64:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002d6e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d72:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	2104      	movs	r1, #4
 8002d7c:	f00e f9fd 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002d80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d84:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002d8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d92:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	3310      	adds	r3, #16
 8002d9a:	2204      	movs	r2, #4
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	f00e f9ec 	bl	801117a <arm_mat_init_f32>
}
 8002da2:	bf00      	nop
 8002da4:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	00000000 	.word	0x00000000

08002db0 <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	ed87 0a02 	vstr	s0, [r7, #8]
 8002dbc:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 8002dc0:	ed97 0a02 	vldr	s0, [r7, #8]
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff fafa 	bl	80023be <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8002dca:	ed97 0a01 	vldr	s0, [r7, #4]
 8002dce:	68f8      	ldr	r0, [r7, #12]
 8002dd0:	f7ff fcc2 	bl	8002758 <MotorKalman_Update>

    return filter->velocity;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8002dda:	ee07 3a90 	vmov	s15, r3
}
 8002dde:	eeb0 0a67 	vmov.f32	s0, s15
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8002de8:	b480      	push	{r7}
 8002dea:	b087      	sub	sp, #28
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	e00c      	b.n	8002e14 <matrix_copy+0x2c>
        dst[i] = src[i];
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	441a      	add	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	68b9      	ldr	r1, [r7, #8]
 8002e08:	440b      	add	r3, r1
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3301      	adds	r3, #1
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	697a      	ldr	r2, [r7, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dbee      	blt.n	8002dfa <matrix_copy+0x12>
    }
}
 8002e1c:	bf00      	nop
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8002e38:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8002e3c:	6020      	str	r0, [r4, #0]
 8002e3e:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8002e42:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8002e46:	6001      	str	r1, [r0, #0]
 8002e48:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002e4c:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002e50:	ed81 0a00 	vstr	s0, [r1]
 8002e54:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002e58:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002e5c:	600a      	str	r2, [r1, #0]
 8002e5e:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 8002e62:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 8002e66:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002e68:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e6c:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002e70:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2204      	movs	r2, #4
 8002e78:	2104      	movs	r1, #4
 8002e7a:	f00e f97e 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002e7e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e82:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002e86:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	2104      	movs	r1, #4
 8002e90:	f00e f973 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 8002e94:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002e98:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002e9c:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	f00e f968 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002eaa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002eae:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8002eb2:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	2104      	movs	r1, #4
 8002ebc:	f00e f95d 	bl	801117a <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002ec0:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002ec4:	2240      	movs	r2, #64	@ 0x40
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f00e fec7 	bl	8011c5c <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002ece:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8002ed2:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	2104      	movs	r1, #4
 8002eda:	f00e f94e 	bl	801117a <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002ee4:	e011      	b.n	8002f0a <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8002ee6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8002ef6:	443b      	add	r3, r7
 8002ef8:	3b6c      	subs	r3, #108	@ 0x6c
 8002efa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002efe:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8002f00:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002f04:	3301      	adds	r3, #1
 8002f06:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8002f0a:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8002f0e:	2b03      	cmp	r3, #3
 8002f10:	dde9      	ble.n	8002ee6 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 8002f12:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002f16:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8002f1a:	2204      	movs	r2, #4
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	f00e f92c 	bl	801117a <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 8002f22:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f26:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f2a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002f2e:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 8002f32:	ed93 0a00 	vldr	s0, [r3]
 8002f36:	4610      	mov	r0, r2
 8002f38:	f00e fd28 	bl	801198c <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8002f3c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002f40:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8002f44:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002f48:	2210      	movs	r2, #16
 8002f4a:	6819      	ldr	r1, [r3, #0]
 8002f4c:	f7ff ff4c 	bl	8002de8 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002f50:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 8002f54:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002f58:	2204      	movs	r2, #4
 8002f5a:	2104      	movs	r1, #4
 8002f5c:	f00e f90d 	bl	801117a <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002f60:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002f64:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002f68:	2204      	movs	r2, #4
 8002f6a:	2104      	movs	r1, #4
 8002f6c:	f00e f905 	bl	801117a <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002f70:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8002f74:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002f78:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f00e f8c1 	bl	8011104 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 8002f82:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002f86:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002f8a:	2210      	movs	r2, #16
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff ff2b 	bl	8002de8 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 8002f92:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f96:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002fa0:	e03a      	b.n	8003018 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 8002fa2:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fae:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 8002fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb6:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002fba:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002fbe:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002fc2:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f00e fc66 	bl	8011898 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002fcc:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002fd0:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff06 	bl	8002de8 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002fdc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fe0:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8002fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe8:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002fec:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8002ff0:	4611      	mov	r1, r2
 8002ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f00e fcc8 	bl	801198c <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8002ffc:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 8003000:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003004:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8003008:	4618      	mov	r0, r3
 800300a:	f00e f87b 	bl	8011104 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800300e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003012:	3301      	adds	r3, #1
 8003014:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8003018:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800301c:	2b0a      	cmp	r3, #10
 800301e:	ddc0      	ble.n	8002fa2 <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 8003020:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8003024:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003028:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800302c:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 8003030:	ed93 0a00 	vldr	s0, [r3]
 8003034:	4610      	mov	r0, r2
 8003036:	f00e fca9 	bl	801198c <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 800303a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800303e:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8003042:	461a      	mov	r2, r3
 8003044:	2300      	movs	r3, #0
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	6053      	str	r3, [r2, #4]
 800304a:	6093      	str	r3, [r2, #8]
 800304c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 800304e:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8003052:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8003056:	2201      	movs	r2, #1
 8003058:	2104      	movs	r1, #4
 800305a:	f00e f88e 	bl	801117a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 800305e:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 8003062:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003066:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800306a:	4618      	mov	r0, r3
 800306c:	f00e fc14 	bl	8011898 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8003070:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8003074:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8003078:	2201      	movs	r2, #1
 800307a:	2104      	movs	r1, #4
 800307c:	f00e f87d 	bl	801117a <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8003080:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003084:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003090:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003094:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003098:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800309c:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80030a0:	4611      	mov	r1, r2
 80030a2:	eeb0 0a47 	vmov.f32	s0, s14
 80030a6:	4618      	mov	r0, r3
 80030a8:	f00e fc70 	bl	801198c <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80030ac:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80030b0:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80030b4:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80030b8:	4618      	mov	r0, r3
 80030ba:	f00e f823 	bl	8011104 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 80030be:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030c2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80030c6:	4618      	mov	r0, r3
 80030c8:	2340      	movs	r3, #64	@ 0x40
 80030ca:	461a      	mov	r2, r3
 80030cc:	2100      	movs	r1, #0
 80030ce:	f00e fdc5 	bl	8011c5c <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 80030d2:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80030d6:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 80030da:	2204      	movs	r2, #4
 80030dc:	2104      	movs	r1, #4
 80030de:	f00e f84c 	bl	801117a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 80030e2:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 80030e6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80030ea:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80030ee:	4618      	mov	r0, r3
 80030f0:	f00e fbd2 	bl	8011898 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 80030f4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80030f8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80030fc:	461a      	mov	r2, r3
 80030fe:	2300      	movs	r3, #0
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	6053      	str	r3, [r2, #4]
 8003104:	6093      	str	r3, [r2, #8]
 8003106:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003108:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800310c:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 8003110:	2201      	movs	r2, #1
 8003112:	2104      	movs	r1, #4
 8003114:	f00e f831 	bl	801117a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003118:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 800311c:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003120:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003124:	4618      	mov	r0, r3
 8003126:	f00e fbb7 	bl	8011898 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 800312a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800312e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800313a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800313e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800314e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003152:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003156:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800315a:	4611      	mov	r1, r2
 800315c:	eeb0 0a47 	vmov.f32	s0, s14
 8003160:	4618      	mov	r0, r3
 8003162:	f00e fc13 	bl	801198c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003166:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800316a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800316e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003172:	4618      	mov	r0, r3
 8003174:	f00d ffc6 	bl	8011104 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8003178:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800317c:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003180:	4618      	mov	r0, r3
 8003182:	2340      	movs	r3, #64	@ 0x40
 8003184:	461a      	mov	r2, r3
 8003186:	2100      	movs	r1, #0
 8003188:	f00e fd68 	bl	8011c5c <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 800318c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003190:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8003194:	2204      	movs	r2, #4
 8003196:	2104      	movs	r1, #4
 8003198:	f00d ffef 	bl	801117a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 800319c:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80031a0:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80031a4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80031a8:	4618      	mov	r0, r3
 80031aa:	f00e fb75 	bl	8011898 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80031ae:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031b2:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 80031b6:	461a      	mov	r2, r3
 80031b8:	2300      	movs	r3, #0
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	6053      	str	r3, [r2, #4]
 80031be:	6093      	str	r3, [r2, #8]
 80031c0:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 80031c2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80031c6:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 80031ca:	2201      	movs	r2, #1
 80031cc:	2104      	movs	r1, #4
 80031ce:	f00d ffd4 	bl	801117a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 80031d2:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 80031d6:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80031da:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80031de:	4618      	mov	r0, r3
 80031e0:	f00e fb5a 	bl	8011898 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 80031e4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031e8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031ec:	edd3 7a00 	vldr	s15, [r3]
 80031f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031f4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80031f8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003204:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003208:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003214:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003218:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800321c:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003220:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003224:	4611      	mov	r1, r2
 8003226:	eeb0 0a47 	vmov.f32	s0, s14
 800322a:	4618      	mov	r0, r3
 800322c:	f00e fbae 	bl	801198c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003230:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003234:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003238:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800323c:	4618      	mov	r0, r3
 800323e:	f00d ff61 	bl	8011104 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 8003242:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003246:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 800324a:	4618      	mov	r0, r3
 800324c:	2340      	movs	r3, #64	@ 0x40
 800324e:	461a      	mov	r2, r3
 8003250:	2100      	movs	r1, #0
 8003252:	f00e fd03 	bl	8011c5c <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 8003256:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800325a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 800325e:	2204      	movs	r2, #4
 8003260:	2104      	movs	r1, #4
 8003262:	f00d ff8a 	bl	801117a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 8003266:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800326a:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800326e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8003272:	4618      	mov	r0, r3
 8003274:	f00e fb10 	bl	8011898 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8003278:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800327c:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8003280:	461a      	mov	r2, r3
 8003282:	2300      	movs	r3, #0
 8003284:	6013      	str	r3, [r2, #0]
 8003286:	6053      	str	r3, [r2, #4]
 8003288:	6093      	str	r3, [r2, #8]
 800328a:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 800328c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003290:	f107 001c 	add.w	r0, r7, #28
 8003294:	2201      	movs	r2, #1
 8003296:	2104      	movs	r1, #4
 8003298:	f00d ff6f 	bl	801117a <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 800329c:	f107 021c 	add.w	r2, r7, #28
 80032a0:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80032a4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032a8:	4618      	mov	r0, r3
 80032aa:	f00e faf5 	bl	8011898 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80032ae:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032b2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80032be:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80032c6:	edd3 7a00 	vldr	s15, [r3]
 80032ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032ce:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032d2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032de:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80032e2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80032e6:	edd3 7a00 	vldr	s15, [r3]
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003328 <discretize_system_with_arm+0x4fc>
 80032f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032f6:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80032fa:	f107 031c 	add.w	r3, r7, #28
 80032fe:	4611      	mov	r1, r2
 8003300:	eeb0 0a47 	vmov.f32	s0, s14
 8003304:	4618      	mov	r0, r3
 8003306:	f00e fb41 	bl	801198c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800330a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800330e:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003312:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003316:	4618      	mov	r0, r3
 8003318:	f00d fef4 	bl	8011104 <arm_mat_add_f32>
}
 800331c:	bf00      	nop
 800331e:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 8003322:	46bd      	mov	sp, r7
 8003324:	bd90      	pop	{r4, r7, pc}
 8003326:	bf00      	nop
 8003328:	42f00000 	.word	0x42f00000

0800332c <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 800332c:	b580      	push	{r7, lr}
 800332e:	b09e      	sub	sp, #120	@ 0x78
 8003330:	af00      	add	r7, sp, #0
 8003332:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003336:	edc7 0a08 	vstr	s1, [r7, #32]
 800333a:	ed87 1a07 	vstr	s2, [r7, #28]
 800333e:	edc7 1a06 	vstr	s3, [r7, #24]
 8003342:	ed87 2a05 	vstr	s4, [r7, #20]
 8003346:	edc7 2a04 	vstr	s5, [r7, #16]
 800334a:	ed87 3a03 	vstr	s6, [r7, #12]
 800334e:	60b8      	str	r0, [r7, #8]
 8003350:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 8003352:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003356:	2240      	movs	r2, #64	@ 0x40
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f00e fc7e 	bl	8011c5c <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8003360:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 800336e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003372:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 8003374:	edd7 7a06 	vldr	s15, [r7, #24]
 8003378:	eef1 6a67 	vneg.f32	s13, s15
 800337c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003380:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003384:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8003388:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 800338c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003394:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8003398:	edd7 6a04 	vldr	s13, [r7, #16]
 800339c:	ed97 7a07 	vldr	s14, [r7, #28]
 80033a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033a4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80033a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80033ac:	eef1 6a67 	vneg.f32	s13, s15
 80033b0:	ed97 7a08 	vldr	s14, [r7, #32]
 80033b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033b8:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 80033bc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80033c0:	eef1 6a67 	vneg.f32	s13, s15
 80033c4:	ed97 7a08 	vldr	s14, [r7, #32]
 80033c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033cc:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 80033d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033d4:	ed97 7a08 	vldr	s14, [r7, #32]
 80033d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033dc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 80033e0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80033e4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	ed97 0a03 	vldr	s0, [r7, #12]
 80033f0:	f7ff fd1c 	bl	8002e2c <discretize_system_with_arm>
}
 80033f4:	bf00      	nop
 80033f6:	3778      	adds	r7, #120	@ 0x78
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a0b      	ldr	r2, [pc, #44]	@ (800343c <PWM_init+0x40>)
 800340e:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	88fa      	ldrh	r2, [r7, #6]
 800341a:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8003422:	68b8      	ldr	r0, [r7, #8]
 8003424:	f009 ffba 	bl	800d39c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	4619      	mov	r1, r3
 800342c:	68b8      	ldr	r0, [r7, #8]
 800342e:	f00a f901 	bl	800d634 <HAL_TIM_PWM_Start>
}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	0a21fe80 	.word	0x0a21fe80

08003440 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8003440:	b5b0      	push	{r4, r5, r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	ed87 0a02 	vstr	s0, [r7, #8]
 800344c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003450:	edd7 7a02 	vldr	s15, [r7, #8]
 8003454:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345c:	d137      	bne.n	80034ce <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	889b      	ldrh	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <PWM_write_duty+0x32>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2200      	movs	r2, #0
 800346e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003470:	e0e1      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	889b      	ldrh	r3, [r3, #4]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d105      	bne.n	8003486 <PWM_write_duty+0x46>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	2300      	movs	r3, #0
 8003482:	6393      	str	r3, [r2, #56]	@ 0x38
 8003484:	e0d7      	b.n	8003636 <PWM_write_duty+0x1f6>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	889b      	ldrh	r3, [r3, #4]
 800348a:	2b08      	cmp	r3, #8
 800348c:	d105      	bne.n	800349a <PWM_write_duty+0x5a>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	2300      	movs	r3, #0
 8003496:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003498:	e0cd      	b.n	8003636 <PWM_write_duty+0x1f6>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	889b      	ldrh	r3, [r3, #4]
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d105      	bne.n	80034ae <PWM_write_duty+0x6e>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	2300      	movs	r3, #0
 80034aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80034ac:	e0c3      	b.n	8003636 <PWM_write_duty+0x1f6>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	889b      	ldrh	r3, [r3, #4]
 80034b2:	2b10      	cmp	r3, #16
 80034b4:	d105      	bne.n	80034c2 <PWM_write_duty+0x82>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	2300      	movs	r3, #0
 80034be:	6493      	str	r3, [r2, #72]	@ 0x48
 80034c0:	e0b9      	b.n	8003636 <PWM_write_duty+0x1f6>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	2300      	movs	r3, #0
 80034ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80034cc:	e0b3      	b.n	8003636 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	ee07 3a90 	vmov	s15, r3
 80034d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034da:	ed97 7a02 	vldr	s14, [r7, #8]
 80034de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e6:	ee17 2a90 	vmov	r2, s15
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80034f6:	33fe      	adds	r3, #254	@ 0xfe
 80034f8:	4a51      	ldr	r2, [pc, #324]	@ (8003640 <PWM_write_duty+0x200>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	0bdb      	lsrs	r3, r3, #15
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b01      	subs	r3, #1
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	899b      	ldrh	r3, [r3, #12]
 800351a:	3301      	adds	r3, #1
 800351c:	ee07 3a90 	vmov	s15, r3
 8003520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003524:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003528:	ed97 7a02 	vldr	s14, [r7, #8]
 800352c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003530:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003534:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800353c:	ee17 3a90 	vmov	r3, s15
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	89db      	ldrh	r3, [r3, #14]
 800354a:	4618      	mov	r0, r3
 800354c:	f7fc ffb6 	bl	80004bc <__aeabi_i2d>
 8003550:	4604      	mov	r4, r0
 8003552:	460d      	mov	r5, r1
 8003554:	edd7 7a01 	vldr	s15, [r7, #4]
 8003558:	eef0 7ae7 	vabs.f32	s15, s15
 800355c:	ee17 0a90 	vmov	r0, s15
 8003560:	f7fc ffbe 	bl	80004e0 <__aeabi_f2d>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4620      	mov	r0, r4
 800356a:	4629      	mov	r1, r5
 800356c:	f7fd f810 	bl	8000590 <__aeabi_dmul>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	4b31      	ldr	r3, [pc, #196]	@ (8003644 <PWM_write_duty+0x204>)
 800357e:	f7fd f931 	bl	80007e4 <__aeabi_ddiv>
 8003582:	4602      	mov	r2, r0
 8003584:	460b      	mov	r3, r1
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	f7fd fac3 	bl	8000b14 <__aeabi_d2uiz>
 800358e:	4603      	mov	r3, r0
 8003590:	b29b      	uxth	r3, r3
 8003592:	461a      	mov	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	899a      	ldrh	r2, [r3, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	89da      	ldrh	r2, [r3, #14]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	89da      	ldrh	r2, [r3, #14]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	889b      	ldrh	r3, [r3, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <PWM_write_duty+0x190>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	6952      	ldr	r2, [r2, #20]
 80035cc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80035ce:	e032      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	889b      	ldrh	r3, [r3, #4]
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d106      	bne.n	80035e6 <PWM_write_duty+0x1a6>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	695b      	ldr	r3, [r3, #20]
 80035e2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80035e4:	e027      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	889b      	ldrh	r3, [r3, #4]
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d106      	bne.n	80035fc <PWM_write_duty+0x1bc>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80035fa:	e01c      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	889b      	ldrh	r3, [r3, #4]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d106      	bne.n	8003612 <PWM_write_duty+0x1d2>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003610:	e011      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	889b      	ldrh	r3, [r3, #4]
 8003616:	2b10      	cmp	r3, #16
 8003618:	d106      	bne.n	8003628 <PWM_write_duty+0x1e8>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003626:	e006      	b.n	8003636 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003634:	e7ff      	b.n	8003636 <PWM_write_duty+0x1f6>
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bdb0      	pop	{r4, r5, r7, pc}
 800363e:	bf00      	nop
 8003640:	80008001 	.word	0x80008001
 8003644:	40590000 	.word	0x40590000

08003648 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003648:	b5b0      	push	{r4, r5, r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	ed87 0a02 	vstr	s0, [r7, #8]
 8003654:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003658:	edd7 7a02 	vldr	s15, [r7, #8]
 800365c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003664:	d137      	bne.n	80036d6 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	889b      	ldrh	r3, [r3, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <PWM_write_range+0x32>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2200      	movs	r2, #0
 8003676:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003678:	e0e1      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	889b      	ldrh	r3, [r3, #4]
 800367e:	2b04      	cmp	r3, #4
 8003680:	d105      	bne.n	800368e <PWM_write_range+0x46>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	2300      	movs	r3, #0
 800368a:	6393      	str	r3, [r2, #56]	@ 0x38
 800368c:	e0d7      	b.n	800383e <PWM_write_range+0x1f6>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	889b      	ldrh	r3, [r3, #4]
 8003692:	2b08      	cmp	r3, #8
 8003694:	d105      	bne.n	80036a2 <PWM_write_range+0x5a>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	2300      	movs	r3, #0
 800369e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80036a0:	e0cd      	b.n	800383e <PWM_write_range+0x1f6>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	889b      	ldrh	r3, [r3, #4]
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d105      	bne.n	80036b6 <PWM_write_range+0x6e>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	2300      	movs	r3, #0
 80036b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b4:	e0c3      	b.n	800383e <PWM_write_range+0x1f6>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	889b      	ldrh	r3, [r3, #4]
 80036ba:	2b10      	cmp	r3, #16
 80036bc:	d105      	bne.n	80036ca <PWM_write_range+0x82>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	2300      	movs	r3, #0
 80036c6:	6493      	str	r3, [r2, #72]	@ 0x48
 80036c8:	e0b9      	b.n	800383e <PWM_write_range+0x1f6>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2300      	movs	r3, #0
 80036d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80036d4:	e0b3      	b.n	800383e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036e2:	ed97 7a02 	vldr	s14, [r7, #8]
 80036e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036ee:	ee17 2a90 	vmov	r2, s15
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80036fe:	33fe      	adds	r3, #254	@ 0xfe
 8003700:	4a53      	ldr	r2, [pc, #332]	@ (8003850 <PWM_write_range+0x208>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0bdb      	lsrs	r3, r3, #15
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	899b      	ldrh	r3, [r3, #12]
 8003722:	3301      	adds	r3, #1
 8003724:	ee07 3a90 	vmov	s15, r3
 8003728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800372c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003730:	ed97 7a02 	vldr	s14, [r7, #8]
 8003734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003738:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800373c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003744:	ee17 3a90 	vmov	r3, s15
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	89db      	ldrh	r3, [r3, #14]
 8003752:	4618      	mov	r0, r3
 8003754:	f7fc feb2 	bl	80004bc <__aeabi_i2d>
 8003758:	4604      	mov	r4, r0
 800375a:	460d      	mov	r5, r1
 800375c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003760:	eef0 7ae7 	vabs.f32	s15, s15
 8003764:	ee17 0a90 	vmov	r0, s15
 8003768:	f7fc feba 	bl	80004e0 <__aeabi_f2d>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4620      	mov	r0, r4
 8003772:	4629      	mov	r1, r5
 8003774:	f7fc ff0c 	bl	8000590 <__aeabi_dmul>
 8003778:	4602      	mov	r2, r0
 800377a:	460b      	mov	r3, r1
 800377c:	4610      	mov	r0, r2
 800377e:	4619      	mov	r1, r3
 8003780:	a331      	add	r3, pc, #196	@ (adr r3, 8003848 <PWM_write_range+0x200>)
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	f7fd f82d 	bl	80007e4 <__aeabi_ddiv>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	4610      	mov	r0, r2
 8003790:	4619      	mov	r1, r3
 8003792:	f7fd f9bf 	bl	8000b14 <__aeabi_d2uiz>
 8003796:	4603      	mov	r3, r0
 8003798:	b29b      	uxth	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	899a      	ldrh	r2, [r3, #12]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	89da      	ldrh	r2, [r3, #14]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	89da      	ldrh	r2, [r3, #14]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	889b      	ldrh	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <PWM_write_range+0x190>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	6952      	ldr	r2, [r2, #20]
 80037d4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80037d6:	e032      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	889b      	ldrh	r3, [r3, #4]
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d106      	bne.n	80037ee <PWM_write_range+0x1a6>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80037ec:	e027      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	889b      	ldrh	r3, [r3, #4]
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d106      	bne.n	8003804 <PWM_write_range+0x1bc>
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003802:	e01c      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	889b      	ldrh	r3, [r3, #4]
 8003808:	2b0c      	cmp	r3, #12
 800380a:	d106      	bne.n	800381a <PWM_write_range+0x1d2>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003818:	e011      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	889b      	ldrh	r3, [r3, #4]
 800381e:	2b10      	cmp	r3, #16
 8003820:	d106      	bne.n	8003830 <PWM_write_range+0x1e8>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800382e:	e006      	b.n	800383e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800383c:	e7ff      	b.n	800383e <PWM_write_range+0x1f6>
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bdb0      	pop	{r4, r5, r7, pc}
 8003846:	bf00      	nop
 8003848:	00000000 	.word	0x00000000
 800384c:	40efffe0 	.word	0x40efffe0
 8003850:	80008001 	.word	0x80008001

08003854 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6178      	str	r0, [r7, #20]
 800385c:	6139      	str	r1, [r7, #16]
 800385e:	60fa      	str	r2, [r7, #12]
 8003860:	60bb      	str	r3, [r7, #8]
 8003862:	ed87 0a01 	vstr	s0, [r7, #4]
 8003866:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2200      	movs	r2, #0
 8003892:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 80038b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	fb93 f2f2 	sdiv	r2, r3, r2
 80038be:	68f9      	ldr	r1, [r7, #12]
 80038c0:	fb01 f202 	mul.w	r2, r1, r2
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2200      	movs	r2, #0
 80038d2:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2200      	movs	r2, #0
 80038d8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f04f 0200 	mov.w	r2, #0
 80038e0:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003922:	213c      	movs	r1, #60	@ 0x3c
 8003924:	6938      	ldr	r0, [r7, #16]
 8003926:	f00a f941 	bl	800dbac <HAL_TIM_Encoder_Start>
}
 800392a:	bf00      	nop
 800392c:	3718      	adds	r7, #24
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	0000      	movs	r0, r0
 8003934:	0000      	movs	r0, r0
	...

08003938 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003938:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800393c:	b084      	sub	sp, #16
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	0fda      	lsrs	r2, r3, #31
 8003960:	4413      	add	r3, r2
 8003962:	105b      	asrs	r3, r3, #1
 8003964:	461a      	mov	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4293      	cmp	r3, r2
 800396a:	dd05      	ble.n	8003978 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e00e      	b.n	8003996 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	0fda      	lsrs	r2, r3, #31
 800397e:	4413      	add	r3, r2
 8003980:	105b      	asrs	r3, r3, #1
 8003982:	425b      	negs	r3, r3
 8003984:	461a      	mov	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4293      	cmp	r3, r2
 800398a:	da04      	bge.n	8003996 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	4413      	add	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	ee07 3a90 	vmov	s15, r3
 80039b8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	ee07 3a90 	vmov	s15, r3
 80039c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039c8:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80039d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7fc fd7b 	bl	80004e0 <__aeabi_f2d>
 80039ea:	4604      	mov	r4, r0
 80039ec:	460d      	mov	r5, r1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a0a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003a0e:	ee17 0a90 	vmov	r0, s15
 8003a12:	f7fc fd65 	bl	80004e0 <__aeabi_f2d>
 8003a16:	a33c      	add	r3, pc, #240	@ (adr r3, 8003b08 <QEI_get_diff_count+0x1d0>)
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f7fc fdb8 	bl	8000590 <__aeabi_dmul>
 8003a20:	4602      	mov	r2, r0
 8003a22:	460b      	mov	r3, r1
 8003a24:	4690      	mov	r8, r2
 8003a26:	4699      	mov	r9, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fc fd57 	bl	80004e0 <__aeabi_f2d>
 8003a32:	4602      	mov	r2, r0
 8003a34:	460b      	mov	r3, r1
 8003a36:	4640      	mov	r0, r8
 8003a38:	4649      	mov	r1, r9
 8003a3a:	f7fc fda9 	bl	8000590 <__aeabi_dmul>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4620      	mov	r0, r4
 8003a44:	4629      	mov	r1, r5
 8003a46:	f7fc fbed 	bl	8000224 <__adddf3>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	f7fd f87f 	bl	8000b54 <__aeabi_d2f>
 8003a56:	4602      	mov	r2, r0
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fc fd3d 	bl	80004e0 <__aeabi_f2d>
 8003a66:	4604      	mov	r4, r0
 8003a68:	460d      	mov	r5, r1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a82:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a86:	ee16 0a90 	vmov	r0, s13
 8003a8a:	f7fc fd29 	bl	80004e0 <__aeabi_f2d>
 8003a8e:	a31e      	add	r3, pc, #120	@ (adr r3, 8003b08 <QEI_get_diff_count+0x1d0>)
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	f7fc fd7c 	bl	8000590 <__aeabi_dmul>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4690      	mov	r8, r2
 8003a9e:	4699      	mov	r9, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7fc fd1b 	bl	80004e0 <__aeabi_f2d>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4640      	mov	r0, r8
 8003ab0:	4649      	mov	r1, r9
 8003ab2:	f7fc fd6d 	bl	8000590 <__aeabi_dmul>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4690      	mov	r8, r2
 8003abc:	4699      	mov	r9, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fc fd0c 	bl	80004e0 <__aeabi_f2d>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4640      	mov	r0, r8
 8003ace:	4649      	mov	r1, r9
 8003ad0:	f7fc fd5e 	bl	8000590 <__aeabi_dmul>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4620      	mov	r0, r4
 8003ada:	4629      	mov	r1, r5
 8003adc:	f7fc fba2 	bl	8000224 <__adddf3>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	f7fd f834 	bl	8000b54 <__aeabi_d2f>
 8003aec:	4602      	mov	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	605a      	str	r2, [r3, #4]
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003b04:	f3af 8000 	nop.w
 8003b08:	54442d18 	.word	0x54442d18
 8003b0c:	400921fb 	.word	0x400921fb

08003b10 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8003b10:	b5b0      	push	{r4, r5, r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fc fcd2 	bl	80004e0 <__aeabi_f2d>
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	4b83      	ldr	r3, [pc, #524]	@ (8003d50 <QEI_compute_data+0x240>)
 8003b42:	f7fc fd25 	bl	8000590 <__aeabi_dmul>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4614      	mov	r4, r2
 8003b4c:	461d      	mov	r5, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	ee07 3a90 	vmov	s15, r3
 8003b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b5a:	ee17 0a90 	vmov	r0, s15
 8003b5e:	f7fc fcbf 	bl	80004e0 <__aeabi_f2d>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4620      	mov	r0, r4
 8003b68:	4629      	mov	r1, r5
 8003b6a:	f7fc fe3b 	bl	80007e4 <__aeabi_ddiv>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	460b      	mov	r3, r1
 8003b72:	4614      	mov	r4, r2
 8003b74:	461d      	mov	r5, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fc fcb0 	bl	80004e0 <__aeabi_f2d>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4620      	mov	r0, r4
 8003b86:	4629      	mov	r1, r5
 8003b88:	f7fc fd02 	bl	8000590 <__aeabi_dmul>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	f7fc ffde 	bl	8000b54 <__aeabi_d2f>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003ba4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ba8:	ee17 0a90 	vmov	r0, s15
 8003bac:	f7fc fc98 	bl	80004e0 <__aeabi_f2d>
 8003bb0:	a365      	add	r3, pc, #404	@ (adr r3, 8003d48 <QEI_compute_data+0x238>)
 8003bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb6:	f7fc fceb 	bl	8000590 <__aeabi_dmul>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4614      	mov	r4, r2
 8003bc0:	461d      	mov	r5, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	ee07 3a90 	vmov	s15, r3
 8003bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bce:	ee17 0a90 	vmov	r0, s15
 8003bd2:	f7fc fc85 	bl	80004e0 <__aeabi_f2d>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4620      	mov	r0, r4
 8003bdc:	4629      	mov	r1, r5
 8003bde:	f7fc fe01 	bl	80007e4 <__aeabi_ddiv>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4614      	mov	r4, r2
 8003be8:	461d      	mov	r5, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f7fc fc76 	bl	80004e0 <__aeabi_f2d>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	f7fc fcc8 	bl	8000590 <__aeabi_dmul>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	f7fc ffa4 	bl	8000b54 <__aeabi_d2f>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fc fc62 	bl	80004e0 <__aeabi_f2d>
 8003c1c:	a34a      	add	r3, pc, #296	@ (adr r3, 8003d48 <QEI_compute_data+0x238>)
 8003c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c22:	f7fc fcb5 	bl	8000590 <__aeabi_dmul>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4614      	mov	r4, r2
 8003c2c:	461d      	mov	r5, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc fc54 	bl	80004e0 <__aeabi_f2d>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	4629      	mov	r1, r5
 8003c40:	f7fc fca6 	bl	8000590 <__aeabi_dmul>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4614      	mov	r4, r2
 8003c4a:	461d      	mov	r5, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	ee07 3a90 	vmov	s15, r3
 8003c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c58:	ee17 0a90 	vmov	r0, s15
 8003c5c:	f7fc fc40 	bl	80004e0 <__aeabi_f2d>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4620      	mov	r0, r4
 8003c66:	4629      	mov	r1, r5
 8003c68:	f7fc fdbc 	bl	80007e4 <__aeabi_ddiv>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4614      	mov	r4, r2
 8003c72:	461d      	mov	r5, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fc31 	bl	80004e0 <__aeabi_f2d>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	4620      	mov	r0, r4
 8003c84:	4629      	mov	r1, r5
 8003c86:	f7fc fc83 	bl	8000590 <__aeabi_dmul>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4610      	mov	r0, r2
 8003c90:	4619      	mov	r1, r3
 8003c92:	f7fc ff5f 	bl	8000b54 <__aeabi_d2f>
 8003c96:	4602      	mov	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	ed93 7a02 	vldr	s14, [r3, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cbc:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8003cc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ccc:	d00a      	beq.n	8003ce4 <QEI_compute_data+0x1d4>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cd2:	ee07 3a90 	vmov	s15, r3
 8003cd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cda:	edd7 7a03 	vldr	s15, [r7, #12]
 8003cde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ce2:	e001      	b.n	8003ce8 <QEI_compute_data+0x1d8>
 8003ce4:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8003d54 <QEI_compute_data+0x244>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	ed93 7a04 	vldr	s14, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	edd3 7a05 	vldr	s15, [r3, #20]
 8003cfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cfe:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8003d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d06:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0e:	d00a      	beq.n	8003d26 <QEI_compute_data+0x216>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d14:	ee07 3a90 	vmov	s15, r3
 8003d18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d24:	e001      	b.n	8003d2a <QEI_compute_data+0x21a>
 8003d26:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8003d54 <QEI_compute_data+0x244>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	615a      	str	r2, [r3, #20]
}
 8003d40:	bf00      	nop
 8003d42:	3710      	adds	r7, #16
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bdb0      	pop	{r4, r5, r7, pc}
 8003d48:	54442d18 	.word	0x54442d18
 8003d4c:	400921fb 	.word	0x400921fb
 8003d50:	404e0000 	.word	0x404e0000
 8003d54:	00000000 	.word	0x00000000

08003d58 <QEI_reset>:

void QEI_reset(QEI *qei) {
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f04f 0200 	mov.w	r2, #0
 8003d96:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f04f 0200 	mov.w	r2, #0
 8003da6:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	615a      	str	r2, [r3, #20]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08e      	sub	sp, #56	@ 0x38
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6178      	str	r0, [r7, #20]
 8003dcc:	ed87 0a04 	vstr	s0, [r7, #16]
 8003dd0:	edc7 0a03 	vstr	s1, [r7, #12]
 8003dd4:	ed87 1a02 	vstr	s2, [r7, #8]
 8003dd8:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2200      	movs	r2, #0
 8003de0:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8003e02:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e06:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e0e:	eef0 7ae7 	vabs.f32	s15, s15
 8003e12:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8003e16:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2a:	d503      	bpl.n	8003e34 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	22ff      	movs	r2, #255	@ 0xff
 8003e30:	741a      	strb	r2, [r3, #16]
 8003e32:	e002      	b.n	8003e3a <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2201      	movs	r2, #1
 8003e38:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8003e3a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003e3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e46:	d006      	beq.n	8003e56 <Trapezoidal_Generator+0x92>
 8003e48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e54:	d104      	bne.n	8003e60 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	60da      	str	r2, [r3, #12]
        return;
 8003e5e:	e06f      	b.n	8003f40 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8003e60:	edd7 6a02 	vldr	s13, [r7, #8]
 8003e64:	ed97 7a01 	vldr	s14, [r7, #4]
 8003e68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e6c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8003e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e7c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e84:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8003e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8003e94:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003e98:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ea0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8003ea4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003ea8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb4:	db27      	blt.n	8003f06 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8003eb6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003eba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8003ec6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003eca:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ed2:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eda:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8003edc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003ee0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ee4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8003eee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003ef2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003ef6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	edc3 7a02 	vstr	s15, [r3, #8]
 8003f04:	e018      	b.n	8003f38 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8003f06:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8003f0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f12:	eeb0 0a66 	vmov.f32	s0, s13
 8003f16:	f00d ffbb 	bl	8011e90 <sqrtf>
 8003f1a:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	6a3a      	ldr	r2, [r7, #32]
 8003f22:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	6a3a      	ldr	r2, [r7, #32]
 8003f28:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8003f2a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	60da      	str	r2, [r3, #12]
}
 8003f40:	3738      	adds	r7, #56	@ 0x38
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
	...

08003f48 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8003f48:	b480      	push	{r7}
 8003f4a:	b08d      	sub	sp, #52	@ 0x34
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6178      	str	r0, [r7, #20]
 8003f50:	6139      	str	r1, [r7, #16]
 8003f52:	ed87 0a03 	vstr	s0, [r7, #12]
 8003f56:	edc7 0a02 	vstr	s1, [r7, #8]
 8003f5a:	ed87 1a01 	vstr	s2, [r7, #4]
 8003f5e:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f68:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80041ec <Trapezoidal_Evaluated+0x2a4>
 8003f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	ed93 7a03 	vldr	s14, [r3, #12]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8a:	f200 811b 	bhi.w	80041c4 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2200      	movs	r2, #0
 8003f92:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	7c1b      	ldrb	r3, [r3, #16]
 8003f98:	b25b      	sxtb	r3, r3
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa2:	ed97 7a00 	vldr	s14, [r7]
 8003fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003faa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	ed93 7a00 	vldr	s14, [r3]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fba:	eeb4 7a67 	vcmp.f32	s14, s15
 8003fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc2:	d109      	bne.n	8003fd8 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	edd3 7a00 	vldr	s15, [r3]
 8003fca:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fd2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8003fd6:	e00c      	b.n	8003ff2 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	7c1b      	ldrb	r3, [r3, #16]
 8003fdc:	b25b      	sxtb	r3, r3
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe6:	ed97 7a01 	vldr	s14, [r7, #4]
 8003fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fee:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	ed93 7a03 	vldr	s14, [r3, #12]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	edd3 7a00 	vldr	s15, [r3]
 8003ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004006:	d824      	bhi.n	8004052 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8004008:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800400c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004010:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	edd3 7a03 	vldr	s15, [r3, #12]
 800401a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	edd3 7a03 	vldr	s15, [r3, #12]
 8004024:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004028:	edd7 7a03 	vldr	s15, [r7, #12]
 800402c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	ed93 7a03 	vldr	s14, [r3, #12]
 800403c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800404e:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8004050:	e0c6      	b.n	80041e0 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	ed93 7a03 	vldr	s14, [r3, #12]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	edd3 7a01 	vldr	s15, [r3, #4]
 800405e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	d830      	bhi.n	80040ca <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004068:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800406c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004070:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	edd3 7a00 	vldr	s15, [r3]
 800407a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	edd3 7a00 	vldr	s15, [r3]
 8004084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004088:	ed97 7a03 	vldr	s14, [r7, #12]
 800408c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004090:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	ed93 7a03 	vldr	s14, [r3, #12]
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	edd3 7a00 	vldr	s15, [r3]
 80040a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040a4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80040a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80040b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040be:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
}
 80040c8:	e08a      	b.n	80041e0 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80040d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040de:	d900      	bls.n	80040e2 <Trapezoidal_Evaluated+0x19a>
}
 80040e0:	e07e      	b.n	80041e0 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80040e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80040e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80040ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	edd3 7a00 	vldr	s15, [r3]
 80040f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	edd3 7a00 	vldr	s15, [r3]
 80040fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004102:	ed97 7a03 	vldr	s14, [r7, #12]
 8004106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410a:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	ed93 7a01 	vldr	s14, [r3, #4]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	edd3 7a00 	vldr	s15, [r3]
 800411e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004126:	dd11      	ble.n	800414c <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	ed93 7a01 	vldr	s14, [r3, #4]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	edd3 7a00 	vldr	s15, [r3]
 8004134:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004138:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800413c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004140:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004148:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	ed93 7a03 	vldr	s14, [r3, #12]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	edd3 7a01 	vldr	s15, [r3, #4]
 8004158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800415c:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8004160:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8004164:	edd7 7a07 	vldr	s15, [r7, #28]
 8004168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800416c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8004170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004174:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004178:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800417c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004180:	edd7 7a07 	vldr	s15, [r7, #28]
 8004184:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004188:	edd7 7a07 	vldr	s15, [r7, #28]
 800418c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 800419a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800419e:	edd7 7a07 	vldr	s15, [r7, #28]
 80041a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80041aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 80041b4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80041b8:	eef1 7a67 	vneg.f32	s15, s15
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80041c2:	e00d      	b.n	80041e0 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	2201      	movs	r2, #1
 80041c8:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	3734      	adds	r7, #52	@ 0x34
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	3a83126f 	.word	0x3a83126f

080041f0 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80041fa:	4603      	mov	r3, r0
 80041fc:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	2b1a      	cmp	r3, #26
 8004202:	d018      	beq.n	8004236 <temperature_to_base+0x46>
 8004204:	2b1a      	cmp	r3, #26
 8004206:	dc1d      	bgt.n	8004244 <temperature_to_base+0x54>
 8004208:	2b18      	cmp	r3, #24
 800420a:	d002      	beq.n	8004212 <temperature_to_base+0x22>
 800420c:	2b19      	cmp	r3, #25
 800420e:	d003      	beq.n	8004218 <temperature_to_base+0x28>
 8004210:	e018      	b.n	8004244 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004212:	edd7 7a01 	vldr	s15, [r7, #4]
 8004216:	e017      	b.n	8004248 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004218:	edd7 7a01 	vldr	s15, [r7, #4]
 800421c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8004258 <temperature_to_base+0x68>
 8004220:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004224:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004228:	ee27 7a87 	vmul.f32	s14, s15, s14
 800422c:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004234:	e008      	b.n	8004248 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8004236:	edd7 7a01 	vldr	s15, [r7, #4]
 800423a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800425c <temperature_to_base+0x6c>
 800423e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004242:	e001      	b.n	8004248 <temperature_to_base+0x58>
        default:
            return value;
 8004244:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004248:	eeb0 0a67 	vmov.f32	s0, s15
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	42000000 	.word	0x42000000
 800425c:	43889333 	.word	0x43889333

08004260 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	ed87 0a01 	vstr	s0, [r7, #4]
 800426a:	4603      	mov	r3, r0
 800426c:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	2b1a      	cmp	r3, #26
 8004272:	d018      	beq.n	80042a6 <temperature_from_base+0x46>
 8004274:	2b1a      	cmp	r3, #26
 8004276:	dc1d      	bgt.n	80042b4 <temperature_from_base+0x54>
 8004278:	2b18      	cmp	r3, #24
 800427a:	d002      	beq.n	8004282 <temperature_from_base+0x22>
 800427c:	2b19      	cmp	r3, #25
 800427e:	d003      	beq.n	8004288 <temperature_from_base+0x28>
 8004280:	e018      	b.n	80042b4 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004282:	edd7 7a01 	vldr	s15, [r7, #4]
 8004286:	e017      	b.n	80042b8 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8004288:	edd7 7a01 	vldr	s15, [r7, #4]
 800428c:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8004290:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004294:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8004298:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800429c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80042c8 <temperature_from_base+0x68>
 80042a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042a4:	e008      	b.n	80042b8 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80042a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80042aa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80042cc <temperature_from_base+0x6c>
 80042ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80042b2:	e001      	b.n	80042b8 <temperature_from_base+0x58>
        default:
            return value;
 80042b4:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80042b8:	eeb0 0a67 	vmov.f32	s0, s15
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	42000000 	.word	0x42000000
 80042cc:	43889333 	.word	0x43889333

080042d0 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e00a      	b.n	8004300 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	3304      	adds	r3, #4
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3301      	adds	r3, #1
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2b1a      	cmp	r3, #26
 8004304:	ddf1      	ble.n	80042ea <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a11      	ldr	r2, [pc, #68]	@ (8004350 <init_length_converter+0x80>)
 800430a:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a11      	ldr	r2, [pc, #68]	@ (8004354 <init_length_converter+0x84>)
 8004310:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004318:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a0e      	ldr	r2, [pc, #56]	@ (8004358 <init_length_converter+0x88>)
 800431e:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a0e      	ldr	r2, [pc, #56]	@ (800435c <init_length_converter+0x8c>)
 8004324:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a0d      	ldr	r2, [pc, #52]	@ (8004360 <init_length_converter+0x90>)
 800432a:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a0d      	ldr	r2, [pc, #52]	@ (8004364 <init_length_converter+0x94>)
 8004330:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a0c      	ldr	r2, [pc, #48]	@ (8004368 <init_length_converter+0x98>)
 8004336:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004344:	bf00      	nop
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	3a83126f 	.word	0x3a83126f
 8004354:	3c23d70a 	.word	0x3c23d70a
 8004358:	447a0000 	.word	0x447a0000
 800435c:	3cd013a9 	.word	0x3cd013a9
 8004360:	3e9c0ebf 	.word	0x3e9c0ebf
 8004364:	3f6a161e 	.word	0x3f6a161e
 8004368:	44c92b02 	.word	0x44c92b02

0800436c <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	220a      	movs	r2, #10
 800437e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004380:	2300      	movs	r3, #0
 8004382:	60fb      	str	r3, [r7, #12]
 8004384:	e00a      	b.n	800439c <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	3304      	adds	r3, #4
 8004390:	f04f 0200 	mov.w	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b1a      	cmp	r3, #26
 80043a0:	ddf1      	ble.n	8004386 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a0e      	ldr	r2, [pc, #56]	@ (80043e0 <init_mass_converter+0x74>)
 80043a6:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a0e      	ldr	r2, [pc, #56]	@ (80043e4 <init_mass_converter+0x78>)
 80043ac:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80043b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a0b      	ldr	r2, [pc, #44]	@ (80043e8 <init_mass_converter+0x7c>)
 80043ba:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a0b      	ldr	r2, [pc, #44]	@ (80043ec <init_mass_converter+0x80>)
 80043c0:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a0a      	ldr	r2, [pc, #40]	@ (80043f0 <init_mass_converter+0x84>)
 80043c6:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80043d4:	bf00      	nop
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	358637bd 	.word	0x358637bd
 80043e4:	3a83126f 	.word	0x3a83126f
 80043e8:	447a0000 	.word	0x447a0000
 80043ec:	3ce83d36 	.word	0x3ce83d36
 80043f0:	3ee83d36 	.word	0x3ee83d36

080043f4 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	220f      	movs	r2, #15
 8004406:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]
 800440c:	e00a      	b.n	8004424 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	3304      	adds	r3, #4
 8004418:	f04f 0200 	mov.w	r2, #0
 800441c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	3301      	adds	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b1a      	cmp	r3, #26
 8004428:	ddf1      	ble.n	800440e <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a0a      	ldr	r2, [pc, #40]	@ (8004458 <init_angle_converter+0x64>)
 800442e:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a08      	ldr	r2, [pc, #32]	@ (800445c <init_angle_converter+0x68>)
 800443c:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	3c8efa35 	.word	0x3c8efa35
 800445c:	3c80adfd 	.word	0x3c80adfd

08004460 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2203      	movs	r2, #3
 800446c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2214      	movs	r2, #20
 8004472:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e00a      	b.n	8004490 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	4413      	add	r3, r2
 8004482:	3304      	adds	r3, #4
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	3301      	adds	r3, #1
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b1a      	cmp	r3, #26
 8004494:	ddf1      	ble.n	800447a <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a10      	ldr	r2, [pc, #64]	@ (80044dc <init_time_converter+0x7c>)
 800449a:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a10      	ldr	r2, [pc, #64]	@ (80044e0 <init_time_converter+0x80>)
 80044a0:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a0f      	ldr	r2, [pc, #60]	@ (80044e4 <init_time_converter+0x84>)
 80044a6:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80044ae:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a0d      	ldr	r2, [pc, #52]	@ (80044e8 <init_time_converter+0x88>)
 80044b4:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a0c      	ldr	r2, [pc, #48]	@ (80044ec <init_time_converter+0x8c>)
 80044ba:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a0c      	ldr	r2, [pc, #48]	@ (80044f0 <init_time_converter+0x90>)
 80044c0:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	3089705f 	.word	0x3089705f
 80044e0:	358637bd 	.word	0x358637bd
 80044e4:	3a83126f 	.word	0x3a83126f
 80044e8:	42700000 	.word	0x42700000
 80044ec:	45610000 	.word	0x45610000
 80044f0:	47a8c000 	.word	0x47a8c000

080044f4 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2204      	movs	r2, #4
 8004500:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2218      	movs	r2, #24
 8004506:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	e00a      	b.n	8004524 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	3304      	adds	r3, #4
 8004518:	f04f 0200 	mov.w	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3301      	adds	r3, #1
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b1a      	cmp	r3, #26
 8004528:	ddf1      	ble.n	800450e <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a05      	ldr	r2, [pc, #20]	@ (8004544 <init_temperature_converter+0x50>)
 800452e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a05      	ldr	r2, [pc, #20]	@ (8004548 <init_temperature_converter+0x54>)
 8004534:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004536:	bf00      	nop
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	080041f1 	.word	0x080041f1
 8004548:	08004261 	.word	0x08004261

0800454c <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff feba 	bl	80042d0 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3378      	adds	r3, #120	@ 0x78
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ff03 	bl	800436c <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	33f0      	adds	r3, #240	@ 0xf0
 800456a:	4618      	mov	r0, r3
 800456c:	f7ff ff42 	bl	80043f4 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff ff72 	bl	8004460 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff ffb6 	bl	80044f4 <init_temperature_converter>
}
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}

08004590 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 800459a:	79fb      	ldrb	r3, [r7, #7]
 800459c:	2b1a      	cmp	r3, #26
 800459e:	d803      	bhi.n	80045a8 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 80045a0:	79fb      	ldrb	r3, [r7, #7]
 80045a2:	4a05      	ldr	r2, [pc, #20]	@ (80045b8 <UnitConverter_get_unit_type+0x28>)
 80045a4:	5cd3      	ldrb	r3, [r2, r3]
 80045a6:	e000      	b.n	80045aa <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000118 	.word	0x20000118

080045bc <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80045c8:	460b      	mov	r3, r1
 80045ca:	71fb      	strb	r3, [r7, #7]
 80045cc:	4613      	mov	r3, r2
 80045ce:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7ff ffdc 	bl	8004590 <UnitConverter_get_unit_type>
 80045d8:	4603      	mov	r3, r0
 80045da:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 80045dc:	79bb      	ldrb	r3, [r7, #6]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ffd6 	bl	8004590 <UnitConverter_get_unit_type>
 80045e4:	4603      	mov	r3, r0
 80045e6:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 80045e8:	7efa      	ldrb	r2, [r7, #27]
 80045ea:	7ebb      	ldrb	r3, [r7, #26]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d002      	beq.n	80045f6 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 80045f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80045f4:	e03b      	b.n	800466e <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 80045f6:	7efa      	ldrb	r2, [r7, #27]
 80045f8:	4613      	mov	r3, r2
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	68fa      	ldr	r2, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	2b00      	cmp	r3, #0
 800460c:	d009      	beq.n	8004622 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	79fa      	ldrb	r2, [r7, #7]
 8004614:	4610      	mov	r0, r2
 8004616:	ed97 0a02 	vldr	s0, [r7, #8]
 800461a:	4798      	blx	r3
 800461c:	ed87 0a07 	vstr	s0, [r7, #28]
 8004620:	e00c      	b.n	800463c <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004622:	79fb      	ldrb	r3, [r7, #7]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	3304      	adds	r3, #4
 800462c:	edd3 7a00 	vldr	s15, [r3]
 8004630:	ed97 7a02 	vldr	s14, [r7, #8]
 8004634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004638:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004640:	2b00      	cmp	r3, #0
 8004642:	d009      	beq.n	8004658 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004648:	79ba      	ldrb	r2, [r7, #6]
 800464a:	4610      	mov	r0, r2
 800464c:	ed97 0a07 	vldr	s0, [r7, #28]
 8004650:	4798      	blx	r3
 8004652:	eef0 7a40 	vmov.f32	s15, s0
 8004656:	e00a      	b.n	800466e <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004658:	79bb      	ldrb	r3, [r7, #6]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	ed93 7a00 	vldr	s14, [r3]
 8004666:	edd7 6a07 	vldr	s13, [r7, #28]
 800466a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 800466e:	eeb0 0a67 	vmov.f32	s0, s15
 8004672:	3720      	adds	r7, #32
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	ed87 0a02 	vstr	s0, [r7, #8]
 8004684:	460b      	mov	r3, r1
 8004686:	71fb      	strb	r3, [r7, #7]
 8004688:	4613      	mov	r3, r2
 800468a:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff7e 	bl	8004590 <UnitConverter_get_unit_type>
 8004694:	4603      	mov	r3, r0
 8004696:	2b02      	cmp	r3, #2
 8004698:	d111      	bne.n	80046be <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 800469a:	79bb      	ldrb	r3, [r7, #6]
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff ff77 	bl	8004590 <UnitConverter_get_unit_type>
 80046a2:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d10a      	bne.n	80046be <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 80046a8:	79ba      	ldrb	r2, [r7, #6]
 80046aa:	79fb      	ldrb	r3, [r7, #7]
 80046ac:	4619      	mov	r1, r3
 80046ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff ff82 	bl	80045bc <UnitConverter_convert>
 80046b8:	eef0 7a40 	vmov.f32	s15, s0
 80046bc:	e001      	b.n	80046c2 <UnitConverter_angle+0x4a>
    }
    return value;
 80046be:	edd7 7a02 	vldr	s15, [r7, #8]
}
 80046c2:	eeb0 0a67 	vmov.f32	s0, s15
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08c      	sub	sp, #48	@ 0x30
 80046d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80046d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	605a      	str	r2, [r3, #4]
 80046dc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80046de:	1d3b      	adds	r3, r7, #4
 80046e0:	2220      	movs	r2, #32
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f00d fab9 	bl	8011c5c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80046ea:	4b39      	ldr	r3, [pc, #228]	@ (80047d0 <MX_ADC1_Init+0x104>)
 80046ec:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80046f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80046f2:	4b37      	ldr	r3, [pc, #220]	@ (80047d0 <MX_ADC1_Init+0x104>)
 80046f4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80046f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80046fa:	4b35      	ldr	r3, [pc, #212]	@ (80047d0 <MX_ADC1_Init+0x104>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004700:	4b33      	ldr	r3, [pc, #204]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004702:	2200      	movs	r2, #0
 8004704:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004706:	4b32      	ldr	r3, [pc, #200]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004708:	2200      	movs	r2, #0
 800470a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800470c:	4b30      	ldr	r3, [pc, #192]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800470e:	2201      	movs	r2, #1
 8004710:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004712:	4b2f      	ldr	r3, [pc, #188]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004714:	2204      	movs	r2, #4
 8004716:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004718:	4b2d      	ldr	r3, [pc, #180]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800471a:	2200      	movs	r2, #0
 800471c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800471e:	4b2c      	ldr	r3, [pc, #176]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004720:	2201      	movs	r2, #1
 8004722:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004724:	4b2a      	ldr	r3, [pc, #168]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004726:	2202      	movs	r2, #2
 8004728:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800472a:	4b29      	ldr	r3, [pc, #164]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800472c:	2200      	movs	r2, #0
 800472e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004732:	4b27      	ldr	r3, [pc, #156]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004734:	2200      	movs	r2, #0
 8004736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004738:	4b25      	ldr	r3, [pc, #148]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800473e:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004746:	4b22      	ldr	r3, [pc, #136]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004748:	2200      	movs	r2, #0
 800474a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800474c:	4b20      	ldr	r3, [pc, #128]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800474e:	2200      	movs	r2, #0
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004754:	481e      	ldr	r0, [pc, #120]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004756:	f005 fd33 	bl	800a1c0 <HAL_ADC_Init>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004760:	f003 fd5c 	bl	800821c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004764:	2300      	movs	r3, #0
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800476c:	4619      	mov	r1, r3
 800476e:	4818      	ldr	r0, [pc, #96]	@ (80047d0 <MX_ADC1_Init+0x104>)
 8004770:	f006 fe52 	bl	800b418 <HAL_ADCEx_MultiModeConfigChannel>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800477a:	f003 fd4f 	bl	800821c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800477e:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <MX_ADC1_Init+0x108>)
 8004780:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004782:	2306      	movs	r3, #6
 8004784:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004786:	2307      	movs	r3, #7
 8004788:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800478a:	237f      	movs	r3, #127	@ 0x7f
 800478c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800478e:	2304      	movs	r3, #4
 8004790:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004796:	1d3b      	adds	r3, r7, #4
 8004798:	4619      	mov	r1, r3
 800479a:	480d      	ldr	r0, [pc, #52]	@ (80047d0 <MX_ADC1_Init+0x104>)
 800479c:	f005 ffbe 	bl	800a71c <HAL_ADC_ConfigChannel>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80047a6:	f003 fd39 	bl	800821c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	@ (80047d8 <MX_ADC1_Init+0x10c>)
 80047ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80047ae:	230c      	movs	r3, #12
 80047b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047b2:	1d3b      	adds	r3, r7, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	4806      	ldr	r0, [pc, #24]	@ (80047d0 <MX_ADC1_Init+0x104>)
 80047b8:	f005 ffb0 	bl	800a71c <HAL_ADC_ConfigChannel>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80047c2:	f003 fd2b 	bl	800821c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047c6:	bf00      	nop
 80047c8:	3730      	adds	r7, #48	@ 0x30
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	200001b4 	.word	0x200001b4
 80047d4:	19200040 	.word	0x19200040
 80047d8:	1d500080 	.word	0x1d500080

080047dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b09e      	sub	sp, #120	@ 0x78
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	605a      	str	r2, [r3, #4]
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	60da      	str	r2, [r3, #12]
 80047f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047f4:	f107 0310 	add.w	r3, r7, #16
 80047f8:	2254      	movs	r2, #84	@ 0x54
 80047fa:	2100      	movs	r1, #0
 80047fc:	4618      	mov	r0, r3
 80047fe:	f00d fa2d 	bl	8011c5c <memset>
  if(adcHandle->Instance==ADC1)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800480a:	d15e      	bne.n	80048ca <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800480c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004810:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004812:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004816:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004818:	f107 0310 	add.w	r3, r7, #16
 800481c:	4618      	mov	r0, r3
 800481e:	f008 fb0b 	bl	800ce38 <HAL_RCCEx_PeriphCLKConfig>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004828:	f003 fcf8 	bl	800821c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800482c:	4b29      	ldr	r3, [pc, #164]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 800482e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004830:	4a28      	ldr	r2, [pc, #160]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 8004832:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004836:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004838:	4b26      	ldr	r3, [pc, #152]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 800483a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800483c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004844:	4b23      	ldr	r3, [pc, #140]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 8004846:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004848:	4a22      	ldr	r2, [pc, #136]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 800484a:	f043 0304 	orr.w	r3, r3, #4
 800484e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004850:	4b20      	ldr	r3, [pc, #128]	@ (80048d4 <HAL_ADC_MspInit+0xf8>)
 8004852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004854:	f003 0304 	and.w	r3, r3, #4
 8004858:	60bb      	str	r3, [r7, #8]
 800485a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800485c:	2303      	movs	r3, #3
 800485e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004860:	2303      	movs	r3, #3
 8004862:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004864:	2300      	movs	r3, #0
 8004866:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004868:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800486c:	4619      	mov	r1, r3
 800486e:	481a      	ldr	r0, [pc, #104]	@ (80048d8 <HAL_ADC_MspInit+0xfc>)
 8004870:	f007 fb1c 	bl	800beac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004874:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 8004876:	4a1a      	ldr	r2, [pc, #104]	@ (80048e0 <HAL_ADC_MspInit+0x104>)
 8004878:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800487a:	4b18      	ldr	r3, [pc, #96]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 800487c:	2205      	movs	r2, #5
 800487e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004880:	4b16      	ldr	r3, [pc, #88]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 8004882:	2200      	movs	r2, #0
 8004884:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004886:	4b15      	ldr	r3, [pc, #84]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 8004888:	2200      	movs	r2, #0
 800488a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800488c:	4b13      	ldr	r3, [pc, #76]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 800488e:	2280      	movs	r2, #128	@ 0x80
 8004890:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004892:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 8004894:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004898:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800489a:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 800489c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80048a2:	4b0e      	ldr	r3, [pc, #56]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 80048a4:	2220      	movs	r2, #32
 80048a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80048a8:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 80048aa:	2200      	movs	r2, #0
 80048ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80048ae:	480b      	ldr	r0, [pc, #44]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 80048b0:	f006 ffca 	bl	800b848 <HAL_DMA_Init>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80048ba:	f003 fcaf 	bl	800821c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a06      	ldr	r2, [pc, #24]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 80048c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80048c4:	4a05      	ldr	r2, [pc, #20]	@ (80048dc <HAL_ADC_MspInit+0x100>)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80048ca:	bf00      	nop
 80048cc:	3778      	adds	r7, #120	@ 0x78
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40021000 	.word	0x40021000
 80048d8:	48000800 	.word	0x48000800
 80048dc:	20000220 	.word	0x20000220
 80048e0:	40020008 	.word	0x40020008

080048e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80048ea:	4b22      	ldr	r3, [pc, #136]	@ (8004974 <MX_DMA_Init+0x90>)
 80048ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ee:	4a21      	ldr	r2, [pc, #132]	@ (8004974 <MX_DMA_Init+0x90>)
 80048f0:	f043 0304 	orr.w	r3, r3, #4
 80048f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80048f6:	4b1f      	ldr	r3, [pc, #124]	@ (8004974 <MX_DMA_Init+0x90>)
 80048f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	607b      	str	r3, [r7, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004902:	4b1c      	ldr	r3, [pc, #112]	@ (8004974 <MX_DMA_Init+0x90>)
 8004904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004906:	4a1b      	ldr	r2, [pc, #108]	@ (8004974 <MX_DMA_Init+0x90>)
 8004908:	f043 0301 	orr.w	r3, r3, #1
 800490c:	6493      	str	r3, [r2, #72]	@ 0x48
 800490e:	4b19      	ldr	r3, [pc, #100]	@ (8004974 <MX_DMA_Init+0x90>)
 8004910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800491a:	2200      	movs	r2, #0
 800491c:	2100      	movs	r1, #0
 800491e:	200b      	movs	r0, #11
 8004920:	f006 ff5d 	bl	800b7de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004924:	200b      	movs	r0, #11
 8004926:	f006 ff74 	bl	800b812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2100      	movs	r1, #0
 800492e:	200c      	movs	r0, #12
 8004930:	f006 ff55 	bl	800b7de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004934:	200c      	movs	r0, #12
 8004936:	f006 ff6c 	bl	800b812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800493a:	2200      	movs	r2, #0
 800493c:	2100      	movs	r1, #0
 800493e:	200d      	movs	r0, #13
 8004940:	f006 ff4d 	bl	800b7de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004944:	200d      	movs	r0, #13
 8004946:	f006 ff64 	bl	800b812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800494a:	2200      	movs	r2, #0
 800494c:	2100      	movs	r1, #0
 800494e:	200e      	movs	r0, #14
 8004950:	f006 ff45 	bl	800b7de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004954:	200e      	movs	r0, #14
 8004956:	f006 ff5c 	bl	800b812 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800495a:	2200      	movs	r2, #0
 800495c:	2100      	movs	r1, #0
 800495e:	200f      	movs	r0, #15
 8004960:	f006 ff3d 	bl	800b7de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004964:	200f      	movs	r0, #15
 8004966:	f006 ff54 	bl	800b812 <HAL_NVIC_EnableIRQ>

}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000

08004978 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08a      	sub	sp, #40	@ 0x28
 800497c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800497e:	f107 0314 	add.w	r3, r7, #20
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
 8004988:	609a      	str	r2, [r3, #8]
 800498a:	60da      	str	r2, [r3, #12]
 800498c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800498e:	4b75      	ldr	r3, [pc, #468]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 8004990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004992:	4a74      	ldr	r2, [pc, #464]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 8004994:	f043 0304 	orr.w	r3, r3, #4
 8004998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800499a:	4b72      	ldr	r3, [pc, #456]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 800499c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800499e:	f003 0304 	and.w	r3, r3, #4
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80049a6:	4b6f      	ldr	r3, [pc, #444]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049aa:	4a6e      	ldr	r2, [pc, #440]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049ac:	f043 0320 	orr.w	r3, r3, #32
 80049b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049b2:	4b6c      	ldr	r3, [pc, #432]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049be:	4b69      	ldr	r3, [pc, #420]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049c2:	4a68      	ldr	r2, [pc, #416]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049ca:	4b66      	ldr	r3, [pc, #408]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	60bb      	str	r3, [r7, #8]
 80049d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049d6:	4b63      	ldr	r3, [pc, #396]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049da:	4a62      	ldr	r2, [pc, #392]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049dc:	f043 0302 	orr.w	r3, r3, #2
 80049e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049e2:	4b60      	ldr	r3, [pc, #384]	@ (8004b64 <MX_GPIO_Init+0x1ec>)
 80049e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80049ee:	2200      	movs	r2, #0
 80049f0:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80049f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80049f8:	f007 fbf2 	bl	800c1e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80049fc:	2200      	movs	r2, #0
 80049fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a02:	4859      	ldr	r0, [pc, #356]	@ (8004b68 <MX_GPIO_Init+0x1f0>)
 8004a04:	f007 fbec 	bl	800c1e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a0e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4852      	ldr	r0, [pc, #328]	@ (8004b68 <MX_GPIO_Init+0x1f0>)
 8004a20:	f007 fa44 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004a24:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a32:	2300      	movs	r3, #0
 8004a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a36:	f107 0314 	add.w	r3, r7, #20
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a40:	f007 fa34 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004a44:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a54:	f107 0314 	add.w	r3, r7, #20
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4844      	ldr	r0, [pc, #272]	@ (8004b6c <MX_GPIO_Init+0x1f4>)
 8004a5c:	f007 fa26 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004a60:	2306      	movs	r3, #6
 8004a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a64:	2300      	movs	r3, #0
 8004a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a6c:	f107 0314 	add.w	r3, r7, #20
 8004a70:	4619      	mov	r1, r3
 8004a72:	483e      	ldr	r0, [pc, #248]	@ (8004b6c <MX_GPIO_Init+0x1f4>)
 8004a74:	f007 fa1a 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a86:	2300      	movs	r3, #0
 8004a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a8a:	f107 0314 	add.w	r3, r7, #20
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4835      	ldr	r0, [pc, #212]	@ (8004b68 <MX_GPIO_Init+0x1f0>)
 8004a92:	f007 fa0b 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8004a96:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004a9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aa6:	f107 0314 	add.w	r3, r7, #20
 8004aaa:	4619      	mov	r1, r3
 8004aac:	482e      	ldr	r0, [pc, #184]	@ (8004b68 <MX_GPIO_Init+0x1f0>)
 8004aae:	f007 f9fd 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8004ab2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004abc:	2302      	movs	r3, #2
 8004abe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8004ac0:	f107 0314 	add.w	r3, r7, #20
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4828      	ldr	r0, [pc, #160]	@ (8004b68 <MX_GPIO_Init+0x1f0>)
 8004ac8:	f007 f9f0 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8004acc:	2310      	movs	r3, #16
 8004ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004ad0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8004ada:	f107 0314 	add.w	r3, r7, #20
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4822      	ldr	r0, [pc, #136]	@ (8004b6c <MX_GPIO_Init+0x1f4>)
 8004ae2:	f007 f9e3 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8004ae6:	2340      	movs	r3, #64	@ 0x40
 8004ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004aea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004af0:	2301      	movs	r3, #1
 8004af2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 8004af4:	f107 0314 	add.w	r3, r7, #20
 8004af8:	4619      	mov	r1, r3
 8004afa:	481c      	ldr	r0, [pc, #112]	@ (8004b6c <MX_GPIO_Init+0x1f4>)
 8004afc:	f007 f9d6 	bl	800beac <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8004b00:	2380      	movs	r3, #128	@ 0x80
 8004b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b04:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 8004b0e:	f107 0314 	add.w	r3, r7, #20
 8004b12:	4619      	mov	r1, r3
 8004b14:	4815      	ldr	r0, [pc, #84]	@ (8004b6c <MX_GPIO_Init+0x1f4>)
 8004b16:	f007 f9c9 	bl	800beac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	2006      	movs	r0, #6
 8004b20:	f006 fe5d 	bl	800b7de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004b24:	2006      	movs	r0, #6
 8004b26:	f006 fe74 	bl	800b812 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	200a      	movs	r0, #10
 8004b30:	f006 fe55 	bl	800b7de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004b34:	200a      	movs	r0, #10
 8004b36:	f006 fe6c 	bl	800b812 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	2017      	movs	r0, #23
 8004b40:	f006 fe4d 	bl	800b7de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004b44:	2017      	movs	r0, #23
 8004b46:	f006 fe64 	bl	800b812 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	2028      	movs	r0, #40	@ 0x28
 8004b50:	f006 fe45 	bl	800b7de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004b54:	2028      	movs	r0, #40	@ 0x28
 8004b56:	f006 fe5c 	bl	800b812 <HAL_NVIC_EnableIRQ>

}
 8004b5a:	bf00      	nop
 8004b5c:	3728      	adds	r7, #40	@ 0x28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40021000 	.word	0x40021000
 8004b68:	48000800 	.word	0x48000800
 8004b6c:	48000400 	.word	0x48000400

08004b70 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b096      	sub	sp, #88	@ 0x58
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b7c:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004b86:	1d3b      	adds	r3, r7, #4
 8004b88:	2201      	movs	r2, #1
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	f00c faf5 	bl	801117a <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f00c ff65 	bl	8011a6e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f00c ff5b 	bl	8011a6e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f00c ff51 	bl	8011a6e <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8004bd8:	4619      	mov	r1, r3
 8004bda:	ed97 0a02 	vldr	s0, [r7, #8]
 8004bde:	4610      	mov	r0, r2
 8004be0:	f00c fed4 	bl	801198c <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	f00c fe4e 	bl	8011898 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f00c fa78 	bl	8011104 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004c26:	461a      	mov	r2, r3
 8004c28:	f00c fe36 	bl	8011898 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004c3e:	461a      	mov	r2, r3
 8004c40:	f00c fe2a 	bl	8011898 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8004c56:	461a      	mov	r2, r3
 8004c58:	f00c fe1e 	bl	8011898 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8004c6e:	4619      	mov	r1, r3
 8004c70:	eeb0 0a67 	vmov.f32	s0, s15
 8004c74:	4610      	mov	r0, r2
 8004c76:	f00c fe89 	bl	801198c <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	f00c fa39 	bl	8011104 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f00c fdf7 	bl	8011898 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	f00c fdeb 	bl	8011898 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f00c fa15 	bl	8011104 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	4610      	mov	r0, r2
 8004cea:	f00c fa5e 	bl	80111aa <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8004d00:	461a      	mov	r2, r3
 8004d02:	f00c fdc9 	bl	8011898 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8004d18:	461a      	mov	r2, r3
 8004d1a:	f00c fdbd 	bl	8011898 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8004d30:	461a      	mov	r2, r3
 8004d32:	f00c fdb1 	bl	8011898 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8004d48:	461a      	mov	r2, r3
 8004d4a:	f00c fe55 	bl	80119f8 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8004d60:	461a      	mov	r2, r3
 8004d62:	f00c fd99 	bl	8011898 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8004d78:	461a      	mov	r2, r3
 8004d7a:	f00c f9c3 	bl	8011104 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8004d90:	461a      	mov	r2, r3
 8004d92:	f00c fd81 	bl	8011898 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8004d96:	f107 0310 	add.w	r3, r7, #16
 8004d9a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8004d9e:	2204      	movs	r2, #4
 8004da0:	2104      	movs	r1, #4
 8004da2:	f00c f9ea 	bl	801117a <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8004db2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004db6:	4619      	mov	r1, r3
 8004db8:	f00c fd6e 	bl	8011898 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8004dc2:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8004dc6:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f00c fe14 	bl	80119f8 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8004ddc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8004de0:	4618      	mov	r0, r3
 8004de2:	f00c fd59 	bl	8011898 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8004df6:	ee07 3a90 	vmov	s15, r3
}
 8004dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8004dfe:	3758      	adds	r7, #88	@ 0x58
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8004e04:	b5b0      	push	{r4, r5, r7, lr}
 8004e06:	b0a4      	sub	sp, #144	@ 0x90
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6178      	str	r0, [r7, #20]
 8004e0c:	6139      	str	r1, [r7, #16]
 8004e0e:	60fa      	str	r2, [r7, #12]
 8004e10:	ed87 0a02 	vstr	s0, [r7, #8]
 8004e14:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	68ba      	ldr	r2, [r7, #8]
 8004e1c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8004e28:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004e2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e3e:	f04f 0300 	mov.w	r3, #0
 8004e42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e4c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004e50:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8004e5e:	4bc6      	ldr	r3, [pc, #792]	@ (8005178 <Kalman_Start+0x374>)
 8004e60:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8004e64:	461d      	mov	r5, r3
 8004e66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004e76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8004e7a:	f107 031c 	add.w	r3, r7, #28
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	605a      	str	r2, [r3, #4]
 8004e84:	609a      	str	r2, [r3, #8]
 8004e86:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f04f 0200 	mov.w	r2, #0
 8004e8e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004e98:	e028      	b.n	8004eec <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8004e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	693a      	ldr	r2, [r7, #16]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	6979      	ldr	r1, [r7, #20]
 8004ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eac:	3314      	adds	r3, #20
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8004eb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	3390      	adds	r3, #144	@ 0x90
 8004ebc:	443b      	add	r3, r7
 8004ebe:	3b64      	subs	r3, #100	@ 0x64
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	6979      	ldr	r1, [r7, #20]
 8004ec4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ec8:	3398      	adds	r3, #152	@ 0x98
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ed6:	3304      	adds	r3, #4
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	f04f 0200 	mov.w	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8004ee2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ef0:	2b0f      	cmp	r3, #15
 8004ef2:	ddd2      	ble.n	8004e9a <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004efa:	e03a      	b.n	8004f72 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8004efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	3390      	adds	r3, #144	@ 0x90
 8004f04:	443b      	add	r3, r7
 8004f06:	3b74      	subs	r3, #116	@ 0x74
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	6979      	ldr	r1, [r7, #20]
 8004f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f10:	009b      	lsls	r3, r3, #2
 8004f12:	440b      	add	r3, r1
 8004f14:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8004f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4413      	add	r3, r2
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	6979      	ldr	r1, [r7, #20]
 8004f24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f28:	3324      	adds	r3, #36	@ 0x24
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8004f30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	3390      	adds	r3, #144	@ 0x90
 8004f38:	443b      	add	r3, r7
 8004f3a:	3b14      	subs	r3, #20
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	6979      	ldr	r1, [r7, #20]
 8004f40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f44:	3328      	adds	r3, #40	@ 0x28
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8004f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	3390      	adds	r3, #144	@ 0x90
 8004f54:	443b      	add	r3, r7
 8004f56:	3b24      	subs	r3, #36	@ 0x24
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	6979      	ldr	r1, [r7, #20]
 8004f5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f60:	332c      	adds	r3, #44	@ 0x2c
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	440b      	add	r3, r1
 8004f66:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8004f68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	ddc0      	ble.n	8004efc <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	2201      	movs	r2, #1
 8004f84:	2104      	movs	r1, #4
 8004f86:	f00c f8f8 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3310      	adds	r3, #16
 8004f94:	2204      	movs	r2, #4
 8004f96:	2104      	movs	r1, #4
 8004f98:	f00c f8ef 	bl	801117a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	3350      	adds	r3, #80	@ 0x50
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	2104      	movs	r1, #4
 8004faa:	f00c f8e6 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3390      	adds	r3, #144	@ 0x90
 8004fb8:	2201      	movs	r2, #1
 8004fba:	2104      	movs	r1, #4
 8004fbc:	f00c f8dd 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	33a0      	adds	r3, #160	@ 0xa0
 8004fca:	2204      	movs	r2, #4
 8004fcc:	2101      	movs	r1, #1
 8004fce:	f00c f8d4 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	33b0      	adds	r3, #176	@ 0xb0
 8004fdc:	2201      	movs	r2, #1
 8004fde:	2104      	movs	r1, #4
 8004fe0:	f00c f8cb 	bl	801117a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	33c8      	adds	r3, #200	@ 0xc8
 8004fee:	2204      	movs	r2, #4
 8004ff0:	2104      	movs	r1, #4
 8004ff2:	f00c f8c2 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005002:	2201      	movs	r2, #1
 8005004:	2104      	movs	r1, #4
 8005006:	f00c f8b8 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8005016:	2204      	movs	r2, #4
 8005018:	2101      	movs	r1, #1
 800501a:	f00c f8ae 	bl	801117a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800502a:	2204      	movs	r2, #4
 800502c:	2104      	movs	r1, #4
 800502e:	f00c f8a4 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800503e:	2204      	movs	r2, #4
 8005040:	2104      	movs	r1, #4
 8005042:	f00c f89a 	bl	801117a <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005052:	2201      	movs	r2, #1
 8005054:	2104      	movs	r1, #4
 8005056:	f00c f890 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8005066:	2201      	movs	r2, #1
 8005068:	2104      	movs	r1, #4
 800506a:	f00c f886 	bl	801117a <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800507a:	2204      	movs	r2, #4
 800507c:	2101      	movs	r1, #1
 800507e:	f00c f87c 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800508e:	2201      	movs	r2, #1
 8005090:	2101      	movs	r1, #1
 8005092:	f00c f872 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80050a2:	2201      	movs	r2, #1
 80050a4:	2101      	movs	r1, #1
 80050a6:	f00c f868 	bl	801117a <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80050b6:	2201      	movs	r2, #1
 80050b8:	2104      	movs	r1, #4
 80050ba:	f00c f85e 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 80050ca:	2201      	movs	r2, #1
 80050cc:	2104      	movs	r1, #4
 80050ce:	f00c f854 	bl	801117a <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 80050de:	2201      	movs	r2, #1
 80050e0:	2101      	movs	r1, #1
 80050e2:	f00c f84a 	bl	801117a <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80050f2:	2201      	movs	r2, #1
 80050f4:	2101      	movs	r1, #1
 80050f6:	f00c f840 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005106:	2201      	movs	r2, #1
 8005108:	2101      	movs	r1, #1
 800510a:	f00c f836 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800511a:	2201      	movs	r2, #1
 800511c:	2104      	movs	r1, #4
 800511e:	f00c f82c 	bl	801117a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800512e:	2201      	movs	r2, #1
 8005130:	2101      	movs	r1, #1
 8005132:	f00c f822 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005142:	2204      	movs	r2, #4
 8005144:	2104      	movs	r1, #4
 8005146:	f00c f818 	bl	801117a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	33c4      	adds	r3, #196	@ 0xc4
 8005154:	2201      	movs	r2, #1
 8005156:	2101      	movs	r1, #1
 8005158:	f00c f80f 	bl	801117a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8005168:	2201      	movs	r2, #1
 800516a:	2101      	movs	r1, #1
 800516c:	f00c f805 	bl	801117a <arm_mat_init_f32>
}
 8005170:	bf00      	nop
 8005172:	3790      	adds	r7, #144	@ 0x90
 8005174:	46bd      	mov	sp, r7
 8005176:	bdb0      	pop	{r4, r5, r7, pc}
 8005178:	08013b28 	.word	0x08013b28

0800517c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005180:	f3bf 8f4f 	dsb	sy
}
 8005184:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005186:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <__NVIC_SystemReset+0x24>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800518e:	4904      	ldr	r1, [pc, #16]	@ (80051a0 <__NVIC_SystemReset+0x24>)
 8005190:	4b04      	ldr	r3, [pc, #16]	@ (80051a4 <__NVIC_SystemReset+0x28>)
 8005192:	4313      	orrs	r3, r2
 8005194:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005196:	f3bf 8f4f 	dsb	sy
}
 800519a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800519c:	bf00      	nop
 800519e:	e7fd      	b.n	800519c <__NVIC_SystemReset+0x20>
 80051a0:	e000ed00 	.word	0xe000ed00
 80051a4:	05fa0004 	.word	0x05fa0004

080051a8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80051ae:	f004 fd52 	bl	8009c56 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80051b2:	f000 f88d 	bl	80052d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80051b6:	f7ff fbdf 	bl	8004978 <MX_GPIO_Init>
	MX_DMA_Init();
 80051ba:	f7ff fb93 	bl	80048e4 <MX_DMA_Init>
	MX_ADC1_Init();
 80051be:	f7ff fa85 	bl	80046cc <MX_ADC1_Init>
	MX_TIM2_Init();
 80051c2:	f003 ff5d 	bl	8009080 <MX_TIM2_Init>
	MX_TIM3_Init();
 80051c6:	f003 ffa9 	bl	800911c <MX_TIM3_Init>
	MX_TIM4_Init();
 80051ca:	f003 fffd 	bl	80091c8 <MX_TIM4_Init>
	MX_TIM5_Init();
 80051ce:	f004 f851 	bl	8009274 <MX_TIM5_Init>
	MX_TIM8_Init();
 80051d2:	f004 f8a5 	bl	8009320 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80051d6:	f004 fb67 	bl	80098a8 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 80051da:	f004 f95f 	bl	800949c <MX_TIM16_Init>
	MX_TIM1_Init();
 80051de:	f003 febb 	bl	8008f58 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 80051e2:	f004 fb17 	bl	8009814 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 80051e6:	f003 f81f 	bl	8008228 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 80051ea:	4b28      	ldr	r3, [pc, #160]	@ (800528c <main+0xe4>)
 80051ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ee:	4a28      	ldr	r2, [pc, #160]	@ (8005290 <main+0xe8>)
 80051f0:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80051f2:	4b28      	ldr	r3, [pc, #160]	@ (8005294 <main+0xec>)
 80051f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f6:	4a28      	ldr	r2, [pc, #160]	@ (8005298 <main+0xf0>)
 80051f8:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 80051fa:	4b28      	ldr	r3, [pc, #160]	@ (800529c <main+0xf4>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005200:	4b27      	ldr	r3, [pc, #156]	@ (80052a0 <main+0xf8>)
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 8005206:	4b27      	ldr	r3, [pc, #156]	@ (80052a4 <main+0xfc>)
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 800520c:	4b26      	ldr	r3, [pc, #152]	@ (80052a8 <main+0x100>)
 800520e:	2200      	movs	r2, #0
 8005210:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 8005212:	4b26      	ldr	r3, [pc, #152]	@ (80052ac <main+0x104>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 8005218:	4b25      	ldr	r3, [pc, #148]	@ (80052b0 <main+0x108>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d032      	beq.n	8005286 <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8005220:	2101      	movs	r1, #1
 8005222:	4824      	ldr	r0, [pc, #144]	@ (80052b4 <main+0x10c>)
 8005224:	f006 ffc4 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	bf14      	ite	ne
 800522e:	2301      	movne	r3, #1
 8005230:	2300      	moveq	r3, #0
 8005232:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005234:	2140      	movs	r1, #64	@ 0x40
 8005236:	481f      	ldr	r0, [pc, #124]	@ (80052b4 <main+0x10c>)
 8005238:	f006 ffba 	bl	800c1b0 <HAL_GPIO_ReadPin>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	bf14      	ite	ne
 8005242:	2301      	movne	r3, #1
 8005244:	2300      	moveq	r3, #0
 8005246:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 8005248:	79fb      	ldrb	r3, [r7, #7]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <main+0xd8>
 800524e:	79bb      	ldrb	r3, [r7, #6]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d015      	beq.n	8005280 <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 8005254:	4b16      	ldr	r3, [pc, #88]	@ (80052b0 <main+0x108>)
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 800525a:	4b17      	ldr	r3, [pc, #92]	@ (80052b8 <main+0x110>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005260:	4b16      	ldr	r3, [pc, #88]	@ (80052bc <main+0x114>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 8005266:	4b16      	ldr	r3, [pc, #88]	@ (80052c0 <main+0x118>)
 8005268:	2200      	movs	r2, #0
 800526a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800526c:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <main+0x11c>)
 800526e:	2200      	movs	r2, #0
 8005270:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005272:	4b15      	ldr	r3, [pc, #84]	@ (80052c8 <main+0x120>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005278:	4b14      	ldr	r3, [pc, #80]	@ (80052cc <main+0x124>)
 800527a:	2200      	movs	r2, #0
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	e002      	b.n	8005286 <main+0xde>

		} else {
			start_homing_sequence(true);
 8005280:	2001      	movs	r0, #1
 8005282:	f000 f871 	bl	8005368 <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 8005286:	f002 fd37 	bl	8007cf8 <handle_b2_button_polling>
 800528a:	e7fc      	b.n	8005286 <main+0xde>
 800528c:	20000494 	.word	0x20000494
 8005290:	20000280 	.word	0x20000280
 8005294:	200004f0 	.word	0x200004f0
 8005298:	200002c4 	.word	0x200002c4
 800529c:	2000036c 	.word	0x2000036c
 80052a0:	20000375 	.word	0x20000375
 80052a4:	20000374 	.word	0x20000374
 80052a8:	20000370 	.word	0x20000370
 80052ac:	20000378 	.word	0x20000378
 80052b0:	20000133 	.word	0x20000133
 80052b4:	48000400 	.word	0x48000400
 80052b8:	2000036b 	.word	0x2000036b
 80052bc:	2000036a 	.word	0x2000036a
 80052c0:	20000368 	.word	0x20000368
 80052c4:	20000369 	.word	0x20000369
 80052c8:	20000364 	.word	0x20000364
 80052cc:	20000308 	.word	0x20000308

080052d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b094      	sub	sp, #80	@ 0x50
 80052d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80052d6:	f107 0318 	add.w	r3, r7, #24
 80052da:	2238      	movs	r2, #56	@ 0x38
 80052dc:	2100      	movs	r1, #0
 80052de:	4618      	mov	r0, r3
 80052e0:	f00c fcbc 	bl	8011c5c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
 80052ea:	605a      	str	r2, [r3, #4]
 80052ec:	609a      	str	r2, [r3, #8]
 80052ee:	60da      	str	r2, [r3, #12]
 80052f0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80052f2:	2000      	movs	r0, #0
 80052f4:	f006 ffbe 	bl	800c274 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80052f8:	2302      	movs	r3, #2
 80052fa:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80052fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005302:	2340      	movs	r3, #64	@ 0x40
 8005304:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005306:	2302      	movs	r3, #2
 8005308:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800530a:	2302      	movs	r3, #2
 800530c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800530e:	2304      	movs	r3, #4
 8005310:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8005312:	2355      	movs	r3, #85	@ 0x55
 8005314:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005316:	2302      	movs	r3, #2
 8005318:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800531a:	2302      	movs	r3, #2
 800531c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800531e:	2302      	movs	r3, #2
 8005320:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005322:	f107 0318 	add.w	r3, r7, #24
 8005326:	4618      	mov	r0, r3
 8005328:	f007 f858 	bl	800c3dc <HAL_RCC_OscConfig>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <SystemClock_Config+0x66>
		Error_Handler();
 8005332:	f002 ff73 	bl	800821c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005336:	230f      	movs	r3, #15
 8005338:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800533a:	2303      	movs	r3, #3
 800533c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800533e:	2300      	movs	r3, #0
 8005340:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005342:	2300      	movs	r3, #0
 8005344:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800534a:	1d3b      	adds	r3, r7, #4
 800534c:	2104      	movs	r1, #4
 800534e:	4618      	mov	r0, r3
 8005350:	f007 fb56 	bl	800ca00 <HAL_RCC_ClockConfig>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <SystemClock_Config+0x8e>
		Error_Handler();
 800535a:	f002 ff5f 	bl	800821c <Error_Handler>
	}
}
 800535e:	bf00      	nop
 8005360:	3750      	adds	r7, #80	@ 0x50
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
	if (homing_active)
 8005372:	4b50      	ldr	r3, [pc, #320]	@ (80054b4 <start_homing_sequence+0x14c>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	f040 8098 	bne.w	80054ac <start_homing_sequence+0x144>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 800537c:	2101      	movs	r1, #1
 800537e:	484e      	ldr	r0, [pc, #312]	@ (80054b8 <start_homing_sequence+0x150>)
 8005380:	f006 ff16 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	bf14      	ite	ne
 800538a:	2301      	movne	r3, #1
 800538c:	2300      	moveq	r3, #0
 800538e:	73fb      	strb	r3, [r7, #15]
	UPPER_PHOTO_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005390:	2140      	movs	r1, #64	@ 0x40
 8005392:	4849      	ldr	r0, [pc, #292]	@ (80054b8 <start_homing_sequence+0x150>)
 8005394:	f006 ff0c 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf14      	ite	ne
 800539e:	2301      	movne	r3, #1
 80053a0:	2300      	moveq	r3, #0
 80053a2:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 80053a4:	79fb      	ldrb	r3, [r7, #7]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d103      	bne.n	80053b2 <start_homing_sequence+0x4a>
 80053aa:	4b44      	ldr	r3, [pc, #272]	@ (80054bc <start_homing_sequence+0x154>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d02e      	beq.n	8005410 <start_homing_sequence+0xa8>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d018      	beq.n	80053ea <start_homing_sequence+0x82>
 80053b8:	7bbb      	ldrb	r3, [r7, #14]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d015      	beq.n	80053ea <start_homing_sequence+0x82>
			// Already at home position - no need to home
			homing_active = false;
 80053be:	4b3d      	ldr	r3, [pc, #244]	@ (80054b4 <start_homing_sequence+0x14c>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80053c4:	4b3e      	ldr	r3, [pc, #248]	@ (80054c0 <start_homing_sequence+0x158>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 80053ca:	4b3c      	ldr	r3, [pc, #240]	@ (80054bc <start_homing_sequence+0x154>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 80053d0:	4b3c      	ldr	r3, [pc, #240]	@ (80054c4 <start_homing_sequence+0x15c>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80053d6:	4b3c      	ldr	r3, [pc, #240]	@ (80054c8 <start_homing_sequence+0x160>)
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80053dc:	4b3b      	ldr	r3, [pc, #236]	@ (80054cc <start_homing_sequence+0x164>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 80053e2:	4b3b      	ldr	r3, [pc, #236]	@ (80054d0 <start_homing_sequence+0x168>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	701a      	strb	r2, [r3, #0]
			return;
 80053e8:	e061      	b.n	80054ae <start_homing_sequence+0x146>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 80053ea:	4b32      	ldr	r3, [pc, #200]	@ (80054b4 <start_homing_sequence+0x14c>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 80053f0:	4b37      	ldr	r3, [pc, #220]	@ (80054d0 <start_homing_sequence+0x168>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 80053f6:	4b35      	ldr	r3, [pc, #212]	@ (80054cc <start_homing_sequence+0x164>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	601a      	str	r2, [r3, #0]
		up_photo = false;
 80053fc:	4b31      	ldr	r3, [pc, #196]	@ (80054c4 <start_homing_sequence+0x15c>)
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 8005402:	4b31      	ldr	r3, [pc, #196]	@ (80054c8 <start_homing_sequence+0x160>)
 8005404:	2200      	movs	r2, #0
 8005406:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 8005408:	4b2d      	ldr	r3, [pc, #180]	@ (80054c0 <start_homing_sequence+0x158>)
 800540a:	2201      	movs	r2, #1
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	e04e      	b.n	80054ae <start_homing_sequence+0x146>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 8005410:	7bfb      	ldrb	r3, [r7, #15]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d018      	beq.n	8005448 <start_homing_sequence+0xe0>
 8005416:	7bbb      	ldrb	r3, [r7, #14]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d015      	beq.n	8005448 <start_homing_sequence+0xe0>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 800541c:	4b25      	ldr	r3, [pc, #148]	@ (80054b4 <start_homing_sequence+0x14c>)
 800541e:	2200      	movs	r2, #0
 8005420:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005422:	4b27      	ldr	r3, [pc, #156]	@ (80054c0 <start_homing_sequence+0x158>)
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 8005428:	4b24      	ldr	r3, [pc, #144]	@ (80054bc <start_homing_sequence+0x154>)
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 800542e:	4b25      	ldr	r3, [pc, #148]	@ (80054c4 <start_homing_sequence+0x15c>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005434:	4b24      	ldr	r3, [pc, #144]	@ (80054c8 <start_homing_sequence+0x160>)
 8005436:	2200      	movs	r2, #0
 8005438:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 800543a:	4b24      	ldr	r3, [pc, #144]	@ (80054cc <start_homing_sequence+0x164>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005440:	4b23      	ldr	r3, [pc, #140]	@ (80054d0 <start_homing_sequence+0x168>)
 8005442:	2200      	movs	r2, #0
 8005444:	701a      	strb	r2, [r3, #0]
			return;
 8005446:	e032      	b.n	80054ae <start_homing_sequence+0x146>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d01b      	beq.n	8005486 <start_homing_sequence+0x11e>
 800544e:	7bbb      	ldrb	r3, [r7, #14]
 8005450:	f083 0301 	eor.w	r3, r3, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d015      	beq.n	8005486 <start_homing_sequence+0x11e>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 800545a:	4b16      	ldr	r3, [pc, #88]	@ (80054b4 <start_homing_sequence+0x14c>)
 800545c:	2201      	movs	r2, #1
 800545e:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005460:	4b1b      	ldr	r3, [pc, #108]	@ (80054d0 <start_homing_sequence+0x168>)
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005466:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <start_homing_sequence+0x164>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
			up_photo = false;
 800546c:	4b15      	ldr	r3, [pc, #84]	@ (80054c4 <start_homing_sequence+0x15c>)
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 8005472:	4b15      	ldr	r3, [pc, #84]	@ (80054c8 <start_homing_sequence+0x160>)
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 8005478:	4b11      	ldr	r3, [pc, #68]	@ (80054c0 <start_homing_sequence+0x158>)
 800547a:	2207      	movs	r2, #7
 800547c:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 800547e:	4b15      	ldr	r3, [pc, #84]	@ (80054d4 <start_homing_sequence+0x16c>)
 8005480:	2200      	movs	r2, #0
 8005482:	701a      	strb	r2, [r3, #0]
 8005484:	e013      	b.n	80054ae <start_homing_sequence+0x146>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 8005486:	4b0b      	ldr	r3, [pc, #44]	@ (80054b4 <start_homing_sequence+0x14c>)
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 800548c:	4b10      	ldr	r3, [pc, #64]	@ (80054d0 <start_homing_sequence+0x168>)
 800548e:	2200      	movs	r2, #0
 8005490:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005492:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <start_homing_sequence+0x164>)
 8005494:	2200      	movs	r2, #0
 8005496:	601a      	str	r2, [r3, #0]
			up_photo = false;
 8005498:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <start_homing_sequence+0x15c>)
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800549e:	4b0a      	ldr	r3, [pc, #40]	@ (80054c8 <start_homing_sequence+0x160>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 80054a4:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <start_homing_sequence+0x158>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	701a      	strb	r2, [r3, #0]
 80054aa:	e000      	b.n	80054ae <start_homing_sequence+0x146>
		return;
 80054ac:	bf00      	nop
		}
	}
}
 80054ae:	3710      	adds	r7, #16
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	2000036b 	.word	0x2000036b
 80054b8:	48000400 	.word	0x48000400
 80054bc:	20000133 	.word	0x20000133
 80054c0:	2000036a 	.word	0x2000036a
 80054c4:	20000368 	.word	0x20000368
 80054c8:	20000369 	.word	0x20000369
 80054cc:	20000364 	.word	0x20000364
 80054d0:	20000308 	.word	0x20000308
 80054d4:	20000376 	.word	0x20000376

080054d8 <update_homing_sequence>:

void update_homing_sequence(void) {
 80054d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	ed2d 8b02 	vpush	{d8}
 80054e0:	b08b      	sub	sp, #44	@ 0x2c
 80054e2:	af00      	add	r7, sp, #0
	if (!homing_active)
 80054e4:	4b95      	ldr	r3, [pc, #596]	@ (800573c <update_homing_sequence+0x264>)
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f083 0301 	eor.w	r3, r3, #1
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f040 8377 	bne.w	8005be2 <update_homing_sequence+0x70a>
		return;

	switch (homing_state) {
 80054f4:	4b92      	ldr	r3, [pc, #584]	@ (8005740 <update_homing_sequence+0x268>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	2b0a      	cmp	r3, #10
 80054fc:	f200 8373 	bhi.w	8005be6 <update_homing_sequence+0x70e>
 8005500:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <update_homing_sequence+0x30>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005535 	.word	0x08005535
 800550c:	08005557 	.word	0x08005557
 8005510:	080055c3 	.word	0x080055c3
 8005514:	0800570f 	.word	0x0800570f
 8005518:	08005781 	.word	0x08005781
 800551c:	080058c5 	.word	0x080058c5
 8005520:	0800593d 	.word	0x0800593d
 8005524:	08005987 	.word	0x08005987
 8005528:	08005a29 	.word	0x08005a29
 800552c:	08005bb3 	.word	0x08005bb3
 8005530:	08005bdf 	.word	0x08005bdf
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005534:	f003 fafc 	bl	8008b30 <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005538:	4b82      	ldr	r3, [pc, #520]	@ (8005744 <update_homing_sequence+0x26c>)
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005540:	4b81      	ldr	r3, [pc, #516]	@ (8005748 <update_homing_sequence+0x270>)
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005548:	4b80      	ldr	r3, [pc, #512]	@ (800574c <update_homing_sequence+0x274>)
 800554a:	2200      	movs	r2, #0
 800554c:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 800554e:	4b7c      	ldr	r3, [pc, #496]	@ (8005740 <update_homing_sequence+0x268>)
 8005550:	2202      	movs	r2, #2
 8005552:	701a      	strb	r2, [r3, #0]
		break;
 8005554:	e35a      	b.n	8005c0c <update_homing_sequence+0x734>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005556:	4b7b      	ldr	r3, [pc, #492]	@ (8005744 <update_homing_sequence+0x26c>)
 8005558:	f04f 0200 	mov.w	r2, #0
 800555c:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 800555e:	4b7a      	ldr	r3, [pc, #488]	@ (8005748 <update_homing_sequence+0x270>)
 8005560:	f04f 0200 	mov.w	r2, #0
 8005564:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005566:	4b79      	ldr	r3, [pc, #484]	@ (800574c <update_homing_sequence+0x274>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3301      	adds	r3, #1
 800556c:	4a77      	ldr	r2, [pc, #476]	@ (800574c <update_homing_sequence+0x274>)
 800556e:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005570:	4b76      	ldr	r3, [pc, #472]	@ (800574c <update_homing_sequence+0x274>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005578:	f0c0 8337 	bcc.w	8005bea <update_homing_sequence+0x712>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 800557c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005580:	4873      	ldr	r0, [pc, #460]	@ (8005750 <update_homing_sequence+0x278>)
 8005582:	f006 fe15 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2da      	uxtb	r2, r3
 8005592:	4b70      	ldr	r3, [pc, #448]	@ (8005754 <update_homing_sequence+0x27c>)
 8005594:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 8005596:	4b6f      	ldr	r3, [pc, #444]	@ (8005754 <update_homing_sequence+0x27c>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00c      	beq.n	80055ba <update_homing_sequence+0xe2>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 80055a0:	4b6a      	ldr	r3, [pc, #424]	@ (800574c <update_homing_sequence+0x274>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 80055a6:	4b66      	ldr	r3, [pc, #408]	@ (8005740 <update_homing_sequence+0x268>)
 80055a8:	2204      	movs	r2, #4
 80055aa:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 80055ac:	4b69      	ldr	r3, [pc, #420]	@ (8005754 <update_homing_sequence+0x27c>)
 80055ae:	2200      	movs	r2, #0
 80055b0:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 80055b2:	4b69      	ldr	r3, [pc, #420]	@ (8005758 <update_homing_sequence+0x280>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 80055b8:	e317      	b.n	8005bea <update_homing_sequence+0x712>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 80055ba:	4b61      	ldr	r3, [pc, #388]	@ (8005740 <update_homing_sequence+0x268>)
 80055bc:	2203      	movs	r2, #3
 80055be:	701a      	strb	r2, [r3, #0]
		break;
 80055c0:	e313      	b.n	8005bea <update_homing_sequence+0x712>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 80055c2:	4b60      	ldr	r3, [pc, #384]	@ (8005744 <update_homing_sequence+0x26c>)
 80055c4:	edd3 7a07 	vldr	s15, [r3, #28]
 80055c8:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 800575c <update_homing_sequence+0x284>
 80055cc:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 80055d0:	4b5c      	ldr	r3, [pc, #368]	@ (8005744 <update_homing_sequence+0x26c>)
 80055d2:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80055d6:	4b5b      	ldr	r3, [pc, #364]	@ (8005744 <update_homing_sequence+0x26c>)
 80055d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80055dc:	eeb0 0a67 	vmov.f32	s0, s15
 80055e0:	485f      	ldr	r0, [pc, #380]	@ (8005760 <update_homing_sequence+0x288>)
 80055e2:	f7fb fe19 	bl	8001218 <PID_CONTROLLER_Compute>
 80055e6:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80055ea:	4b5e      	ldr	r3, [pc, #376]	@ (8005764 <update_homing_sequence+0x28c>)
 80055ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80055f0:	4610      	mov	r0, r2
 80055f2:	4619      	mov	r1, r3
 80055f4:	f7fb fa66 	bl	8000ac4 <__aeabi_d2iz>
 80055f8:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80055fa:	4b5a      	ldr	r3, [pc, #360]	@ (8005764 <update_homing_sequence+0x28c>)
 80055fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005600:	613a      	str	r2, [r7, #16]
 8005602:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005606:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(
 8005608:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800560c:	f7fb fa5a 	bl	8000ac4 <__aeabi_d2iz>
 8005610:	4603      	mov	r3, r0
 8005612:	4619      	mov	r1, r3
 8005614:	4620      	mov	r0, r4
 8005616:	eeb0 0a48 	vmov.f32	s0, s16
 800561a:	f7fb fd9b 	bl	8001154 <PWM_Satuation>
 800561e:	ee07 0a90 	vmov	s15, r0
 8005622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005626:	4b47      	ldr	r3, [pc, #284]	@ (8005744 <update_homing_sequence+0x26c>)
 8005628:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800562c:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005630:	484d      	ldr	r0, [pc, #308]	@ (8005768 <update_homing_sequence+0x290>)
 8005632:	f7fc f92f 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 8005636:	eef0 7a40 	vmov.f32	s15, s0
 800563a:	4b42      	ldr	r3, [pc, #264]	@ (8005744 <update_homing_sequence+0x26c>)
 800563c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005640:	4b4a      	ldr	r3, [pc, #296]	@ (800576c <update_homing_sequence+0x294>)
 8005642:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005646:	4b4a      	ldr	r3, [pc, #296]	@ (8005770 <update_homing_sequence+0x298>)
 8005648:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800564c:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 8005774 <update_homing_sequence+0x29c>
 8005650:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005654:	eeb0 1a66 	vmov.f32	s2, s13
 8005658:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8005778 <update_homing_sequence+0x2a0>
 800565c:	eeb0 0a47 	vmov.f32	s0, s14
 8005660:	4846      	ldr	r0, [pc, #280]	@ (800577c <update_homing_sequence+0x2a4>)
 8005662:	f7fc f9aa 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 8005666:	eef0 7a40 	vmov.f32	s15, s0
 800566a:	4b36      	ldr	r3, [pc, #216]	@ (8005744 <update_homing_sequence+0x26c>)
 800566c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005670:	4b34      	ldr	r3, [pc, #208]	@ (8005744 <update_homing_sequence+0x26c>)
 8005672:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005676:	4b33      	ldr	r3, [pc, #204]	@ (8005744 <update_homing_sequence+0x26c>)
 8005678:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800567c:	4b31      	ldr	r3, [pc, #196]	@ (8005744 <update_homing_sequence+0x26c>)
 800567e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800568a:	4b2e      	ldr	r3, [pc, #184]	@ (8005744 <update_homing_sequence+0x26c>)
 800568c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005690:	4b2c      	ldr	r3, [pc, #176]	@ (8005744 <update_homing_sequence+0x26c>)
 8005692:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005696:	4b33      	ldr	r3, [pc, #204]	@ (8005764 <update_homing_sequence+0x28c>)
 8005698:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800569c:	4610      	mov	r0, r2
 800569e:	4619      	mov	r1, r3
 80056a0:	f7fb fa10 	bl	8000ac4 <__aeabi_d2iz>
 80056a4:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80056a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005764 <update_homing_sequence+0x28c>)
 80056a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80056ac:	60ba      	str	r2, [r7, #8]
 80056ae:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80056b2:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 80056b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056b8:	f7fb fa04 	bl	8000ac4 <__aeabi_d2iz>
 80056bc:	4603      	mov	r3, r0
 80056be:	4619      	mov	r1, r3
 80056c0:	4620      	mov	r0, r4
 80056c2:	eeb0 0a48 	vmov.f32	s0, s16
 80056c6:	f7fb fd45 	bl	8001154 <PWM_Satuation>
 80056ca:	ee07 0a90 	vmov	s15, r0
 80056ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d2:	4b1c      	ldr	r3, [pc, #112]	@ (8005744 <update_homing_sequence+0x26c>)
 80056d4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 80056d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005754 <update_homing_sequence+0x27c>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8285 	beq.w	8005bee <update_homing_sequence+0x716>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 80056e4:	4b17      	ldr	r3, [pc, #92]	@ (8005744 <update_homing_sequence+0x26c>)
 80056e6:	f04f 0200 	mov.w	r2, #0
 80056ea:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80056ec:	4b16      	ldr	r3, [pc, #88]	@ (8005748 <update_homing_sequence+0x270>)
 80056ee:	f04f 0200 	mov.w	r2, #0
 80056f2:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80056f4:	4b15      	ldr	r3, [pc, #84]	@ (800574c <update_homing_sequence+0x274>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 80056fa:	4b11      	ldr	r3, [pc, #68]	@ (8005740 <update_homing_sequence+0x268>)
 80056fc:	2204      	movs	r2, #4
 80056fe:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005700:	4b14      	ldr	r3, [pc, #80]	@ (8005754 <update_homing_sequence+0x27c>)
 8005702:	2200      	movs	r2, #0
 8005704:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005706:	4b14      	ldr	r3, [pc, #80]	@ (8005758 <update_homing_sequence+0x280>)
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800570c:	e26f      	b.n	8005bee <update_homing_sequence+0x716>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 800570e:	4b0d      	ldr	r3, [pc, #52]	@ (8005744 <update_homing_sequence+0x26c>)
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005716:	4b0c      	ldr	r3, [pc, #48]	@ (8005748 <update_homing_sequence+0x270>)
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 800571e:	4b0b      	ldr	r3, [pc, #44]	@ (800574c <update_homing_sequence+0x274>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3301      	adds	r3, #1
 8005724:	4a09      	ldr	r2, [pc, #36]	@ (800574c <update_homing_sequence+0x274>)
 8005726:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005728:	4b08      	ldr	r3, [pc, #32]	@ (800574c <update_homing_sequence+0x274>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005730:	f0c0 825f 	bcc.w	8005bf2 <update_homing_sequence+0x71a>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 8005734:	4b02      	ldr	r3, [pc, #8]	@ (8005740 <update_homing_sequence+0x268>)
 8005736:	2205      	movs	r2, #5
 8005738:	701a      	strb	r2, [r3, #0]
		}
		break;
 800573a:	e25a      	b.n	8005bf2 <update_homing_sequence+0x71a>
 800573c:	2000036b 	.word	0x2000036b
 8005740:	2000036a 	.word	0x2000036a
 8005744:	20000280 	.word	0x20000280
 8005748:	200002c4 	.word	0x200002c4
 800574c:	20000360 	.word	0x20000360
 8005750:	48000400 	.word	0x48000400
 8005754:	20000369 	.word	0x20000369
 8005758:	20000368 	.word	0x20000368
 800575c:	437a0000 	.word	0x437a0000
 8005760:	20000574 	.word	0x20000574
 8005764:	20000080 	.word	0x20000080
 8005768:	20000614 	.word	0x20000614
 800576c:	200004f0 	.word	0x200004f0
 8005770:	20000494 	.word	0x20000494
 8005774:	447a0000 	.word	0x447a0000
 8005778:	00000000 	.word	0x00000000
 800577c:	20000618 	.word	0x20000618

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005780:	4b96      	ldr	r3, [pc, #600]	@ (80059dc <update_homing_sequence+0x504>)
 8005782:	edd3 7a07 	vldr	s15, [r3, #28]
 8005786:	ed9f 7a96 	vldr	s14, [pc, #600]	@ 80059e0 <update_homing_sequence+0x508>
 800578a:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 800578e:	4b93      	ldr	r3, [pc, #588]	@ (80059dc <update_homing_sequence+0x504>)
 8005790:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005794:	4b91      	ldr	r3, [pc, #580]	@ (80059dc <update_homing_sequence+0x504>)
 8005796:	edd3 7a06 	vldr	s15, [r3, #24]
 800579a:	eeb0 0a67 	vmov.f32	s0, s15
 800579e:	4891      	ldr	r0, [pc, #580]	@ (80059e4 <update_homing_sequence+0x50c>)
 80057a0:	f7fb fd3a 	bl	8001218 <PID_CONTROLLER_Compute>
 80057a4:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80057a8:	4b8f      	ldr	r3, [pc, #572]	@ (80059e8 <update_homing_sequence+0x510>)
 80057aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80057ae:	4610      	mov	r0, r2
 80057b0:	4619      	mov	r1, r3
 80057b2:	f7fb f987 	bl	8000ac4 <__aeabi_d2iz>
 80057b6:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80057b8:	4b8b      	ldr	r3, [pc, #556]	@ (80059e8 <update_homing_sequence+0x510>)
 80057ba:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80057be:	603a      	str	r2, [r7, #0]
 80057c0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80057c4:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_pos = PWM_Satuation(
 80057c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057ca:	f7fb f97b 	bl	8000ac4 <__aeabi_d2iz>
 80057ce:	4603      	mov	r3, r0
 80057d0:	4619      	mov	r1, r3
 80057d2:	4620      	mov	r0, r4
 80057d4:	eeb0 0a48 	vmov.f32	s0, s16
 80057d8:	f7fb fcbc 	bl	8001154 <PWM_Satuation>
 80057dc:	ee07 0a90 	vmov	s15, r0
 80057e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80057e4:	4b7d      	ldr	r3, [pc, #500]	@ (80059dc <update_homing_sequence+0x504>)
 80057e6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80057ea:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 80057ee:	487f      	ldr	r0, [pc, #508]	@ (80059ec <update_homing_sequence+0x514>)
 80057f0:	f7fc f850 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 80057f4:	eef0 7a40 	vmov.f32	s15, s0
 80057f8:	4b78      	ldr	r3, [pc, #480]	@ (80059dc <update_homing_sequence+0x504>)
 80057fa:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80057fe:	4b7c      	ldr	r3, [pc, #496]	@ (80059f0 <update_homing_sequence+0x518>)
 8005800:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005804:	4b7b      	ldr	r3, [pc, #492]	@ (80059f4 <update_homing_sequence+0x51c>)
 8005806:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800580a:	ed9f 6a7b 	vldr	s12, [pc, #492]	@ 80059f8 <update_homing_sequence+0x520>
 800580e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005812:	eeb0 1a66 	vmov.f32	s2, s13
 8005816:	eddf 0a79 	vldr	s1, [pc, #484]	@ 80059fc <update_homing_sequence+0x524>
 800581a:	eeb0 0a47 	vmov.f32	s0, s14
 800581e:	4878      	ldr	r0, [pc, #480]	@ (8005a00 <update_homing_sequence+0x528>)
 8005820:	f7fc f8cb 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 8005824:	eef0 7a40 	vmov.f32	s15, s0
 8005828:	4b6c      	ldr	r3, [pc, #432]	@ (80059dc <update_homing_sequence+0x504>)
 800582a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 800582e:	4b6b      	ldr	r3, [pc, #428]	@ (80059dc <update_homing_sequence+0x504>)
 8005830:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005834:	4b69      	ldr	r3, [pc, #420]	@ (80059dc <update_homing_sequence+0x504>)
 8005836:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800583a:	4b68      	ldr	r3, [pc, #416]	@ (80059dc <update_homing_sequence+0x504>)
 800583c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005848:	4b64      	ldr	r3, [pc, #400]	@ (80059dc <update_homing_sequence+0x504>)
 800584a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800584e:	4b63      	ldr	r3, [pc, #396]	@ (80059dc <update_homing_sequence+0x504>)
 8005850:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005854:	4b64      	ldr	r3, [pc, #400]	@ (80059e8 <update_homing_sequence+0x510>)
 8005856:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800585a:	4610      	mov	r0, r2
 800585c:	4619      	mov	r1, r3
 800585e:	f7fb f931 	bl	8000ac4 <__aeabi_d2iz>
 8005862:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005864:	4b60      	ldr	r3, [pc, #384]	@ (80059e8 <update_homing_sequence+0x510>)
 8005866:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800586a:	4692      	mov	sl, r2
 800586c:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005870:	4650      	mov	r0, sl
 8005872:	4659      	mov	r1, fp
 8005874:	f7fb f926 	bl	8000ac4 <__aeabi_d2iz>
 8005878:	4603      	mov	r3, r0
 800587a:	4619      	mov	r1, r3
 800587c:	4620      	mov	r0, r4
 800587e:	eeb0 0a48 	vmov.f32	s0, s16
 8005882:	f7fb fc67 	bl	8001154 <PWM_Satuation>
 8005886:	ee07 0a90 	vmov	s15, r0
 800588a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800588e:	4b53      	ldr	r3, [pc, #332]	@ (80059dc <update_homing_sequence+0x504>)
 8005890:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 8005894:	4b5b      	ldr	r3, [pc, #364]	@ (8005a04 <update_homing_sequence+0x52c>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 81ab 	beq.w	8005bf6 <update_homing_sequence+0x71e>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 80058a0:	4b4e      	ldr	r3, [pc, #312]	@ (80059dc <update_homing_sequence+0x504>)
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80058a8:	4b57      	ldr	r3, [pc, #348]	@ (8005a08 <update_homing_sequence+0x530>)
 80058aa:	f04f 0200 	mov.w	r2, #0
 80058ae:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80058b0:	4b56      	ldr	r3, [pc, #344]	@ (8005a0c <update_homing_sequence+0x534>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 80058b6:	4b56      	ldr	r3, [pc, #344]	@ (8005a10 <update_homing_sequence+0x538>)
 80058b8:	2206      	movs	r2, #6
 80058ba:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 80058bc:	4b51      	ldr	r3, [pc, #324]	@ (8005a04 <update_homing_sequence+0x52c>)
 80058be:	2200      	movs	r2, #0
 80058c0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80058c2:	e198      	b.n	8005bf6 <update_homing_sequence+0x71e>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 80058c4:	4b45      	ldr	r3, [pc, #276]	@ (80059dc <update_homing_sequence+0x504>)
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80058cc:	4b4e      	ldr	r3, [pc, #312]	@ (8005a08 <update_homing_sequence+0x530>)
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80058d4:	4b4d      	ldr	r3, [pc, #308]	@ (8005a0c <update_homing_sequence+0x534>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3301      	adds	r3, #1
 80058da:	4a4c      	ldr	r2, [pc, #304]	@ (8005a0c <update_homing_sequence+0x534>)
 80058dc:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80058de:	4b4b      	ldr	r3, [pc, #300]	@ (8005a0c <update_homing_sequence+0x534>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80058e6:	f0c0 8188 	bcc.w	8005bfa <update_homing_sequence+0x722>
			if (first_startup) {
 80058ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005a14 <update_homing_sequence+0x53c>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01d      	beq.n	800592e <update_homing_sequence+0x456>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80058f2:	2140      	movs	r1, #64	@ 0x40
 80058f4:	4848      	ldr	r0, [pc, #288]	@ (8005a18 <update_homing_sequence+0x540>)
 80058f6:	f006 fc5b 	bl	800c1b0 <HAL_GPIO_ReadPin>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	bf14      	ite	ne
 8005900:	2301      	movne	r3, #1
 8005902:	2300      	moveq	r3, #0
 8005904:	77fb      	strb	r3, [r7, #31]

				if (prox_detected) {
 8005906:	7ffb      	ldrb	r3, [r7, #31]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <update_homing_sequence+0x448>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 800590c:	4b3f      	ldr	r3, [pc, #252]	@ (8005a0c <update_homing_sequence+0x534>)
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005912:	4b3f      	ldr	r3, [pc, #252]	@ (8005a10 <update_homing_sequence+0x538>)
 8005914:	220a      	movs	r2, #10
 8005916:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005918:	4b40      	ldr	r3, [pc, #256]	@ (8005a1c <update_homing_sequence+0x544>)
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 800591e:	e16c      	b.n	8005bfa <update_homing_sequence+0x722>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005920:	4b3b      	ldr	r3, [pc, #236]	@ (8005a10 <update_homing_sequence+0x538>)
 8005922:	2209      	movs	r2, #9
 8005924:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005926:	4b3d      	ldr	r3, [pc, #244]	@ (8005a1c <update_homing_sequence+0x544>)
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
		break;
 800592c:	e165      	b.n	8005bfa <update_homing_sequence+0x722>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 800592e:	4b38      	ldr	r3, [pc, #224]	@ (8005a10 <update_homing_sequence+0x538>)
 8005930:	2207      	movs	r2, #7
 8005932:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005934:	4b3a      	ldr	r3, [pc, #232]	@ (8005a20 <update_homing_sequence+0x548>)
 8005936:	2200      	movs	r2, #0
 8005938:	701a      	strb	r2, [r3, #0]
		break;
 800593a:	e15e      	b.n	8005bfa <update_homing_sequence+0x722>

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 800593c:	4b38      	ldr	r3, [pc, #224]	@ (8005a20 <update_homing_sequence+0x548>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f083 0301 	eor.w	r3, r3, #1
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <update_homing_sequence+0x48a>
			// Get current prismatic position (keep it where it is)
			float current_pris_pos = prismatic_encoder.mm;
 800594a:	4b2a      	ldr	r3, [pc, #168]	@ (80059f4 <update_homing_sequence+0x51c>)
 800594c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800594e:	623b      	str	r3, [r7, #32]

			// Start combined trajectory to move revolute to 0° while keeping prismatic position
			start_combined_trajectory(current_pris_pos, 0.0f);
 8005950:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 80059fc <update_homing_sequence+0x524>
 8005954:	ed97 0a08 	vldr	s0, [r7, #32]
 8005958:	f000 fa64 	bl	8005e24 <start_combined_trajectory>

			rev_to_zero_trajectory_started = true;
 800595c:	4b30      	ldr	r3, [pc, #192]	@ (8005a20 <update_homing_sequence+0x548>)
 800595e:	2201      	movs	r2, #1
 8005960:	701a      	strb	r2, [r3, #0]
		}

		// Wait for trajectory to complete
		if (motion_sequence_state == MOTION_IDLE) {
 8005962:	4b30      	ldr	r3, [pc, #192]	@ (8005a24 <update_homing_sequence+0x54c>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f040 8149 	bne.w	8005bfe <update_homing_sequence+0x726>
			// Trajectory completed, move to next homing state
			motion_delay_timer = 0;
 800596c:	4b27      	ldr	r3, [pc, #156]	@ (8005a0c <update_homing_sequence+0x534>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005972:	4b27      	ldr	r3, [pc, #156]	@ (8005a10 <update_homing_sequence+0x538>)
 8005974:	2208      	movs	r2, #8
 8005976:	701a      	strb	r2, [r3, #0]
			prox_count = 0; // Reset prox counter for next stage
 8005978:	4b28      	ldr	r3, [pc, #160]	@ (8005a1c <update_homing_sequence+0x544>)
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
			rev_to_zero_trajectory_started = false; // Reset for next time
 800597e:	4b28      	ldr	r3, [pc, #160]	@ (8005a20 <update_homing_sequence+0x548>)
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005984:	e13b      	b.n	8005bfe <update_homing_sequence+0x726>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait - let normal control handle this
		motion_delay_timer++;
 8005986:	4b21      	ldr	r3, [pc, #132]	@ (8005a0c <update_homing_sequence+0x534>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3301      	adds	r3, #1
 800598c:	4a1f      	ldr	r2, [pc, #124]	@ (8005a0c <update_homing_sequence+0x534>)
 800598e:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005990:	4b1e      	ldr	r3, [pc, #120]	@ (8005a0c <update_homing_sequence+0x534>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005998:	f0c0 8133 	bcc.w	8005c02 <update_homing_sequence+0x72a>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 800599c:	2140      	movs	r1, #64	@ 0x40
 800599e:	481e      	ldr	r0, [pc, #120]	@ (8005a18 <update_homing_sequence+0x540>)
 80059a0:	f006 fc06 	bl	800c1b0 <HAL_GPIO_ReadPin>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bf14      	ite	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	2300      	moveq	r3, #0
 80059ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			if (prox_detected) {
 80059b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d009      	beq.n	80059ce <update_homing_sequence+0x4f6>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 80059ba:	4b14      	ldr	r3, [pc, #80]	@ (8005a0c <update_homing_sequence+0x534>)
 80059bc:	2200      	movs	r2, #0
 80059be:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 80059c0:	4b13      	ldr	r3, [pc, #76]	@ (8005a10 <update_homing_sequence+0x538>)
 80059c2:	220a      	movs	r2, #10
 80059c4:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 80059c6:	4b15      	ldr	r3, [pc, #84]	@ (8005a1c <update_homing_sequence+0x544>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 80059cc:	e119      	b.n	8005c02 <update_homing_sequence+0x72a>
				homing_state = HOMING_REV_CW_TO_PROX1;
 80059ce:	4b10      	ldr	r3, [pc, #64]	@ (8005a10 <update_homing_sequence+0x538>)
 80059d0:	2209      	movs	r2, #9
 80059d2:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 80059d4:	4b11      	ldr	r3, [pc, #68]	@ (8005a1c <update_homing_sequence+0x544>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
		break;
 80059da:	e112      	b.n	8005c02 <update_homing_sequence+0x72a>
 80059dc:	20000280 	.word	0x20000280
 80059e0:	c37a0000 	.word	0xc37a0000
 80059e4:	20000574 	.word	0x20000574
 80059e8:	20000080 	.word	0x20000080
 80059ec:	20000614 	.word	0x20000614
 80059f0:	200004f0 	.word	0x200004f0
 80059f4:	20000494 	.word	0x20000494
 80059f8:	447a0000 	.word	0x447a0000
 80059fc:	00000000 	.word	0x00000000
 8005a00:	20000618 	.word	0x20000618
 8005a04:	20000368 	.word	0x20000368
 8005a08:	200002c4 	.word	0x200002c4
 8005a0c:	20000360 	.word	0x20000360
 8005a10:	2000036a 	.word	0x2000036a
 8005a14:	20000133 	.word	0x20000133
 8005a18:	48000400 	.word	0x48000400
 8005a1c:	20000364 	.word	0x20000364
 8005a20:	20000376 	.word	0x20000376
 8005a24:	20000308 	.word	0x20000308

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005a28:	4b7d      	ldr	r3, [pc, #500]	@ (8005c20 <update_homing_sequence+0x748>)
 8005a2a:	edd3 7a07 	vldr	s15, [r3, #28]
 8005a2e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8005a32:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005a36:	4b7a      	ldr	r3, [pc, #488]	@ (8005c20 <update_homing_sequence+0x748>)
 8005a38:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005a3c:	4b78      	ldr	r3, [pc, #480]	@ (8005c20 <update_homing_sequence+0x748>)
 8005a3e:	edd3 7a06 	vldr	s15, [r3, #24]
 8005a42:	eeb0 0a67 	vmov.f32	s0, s15
 8005a46:	4877      	ldr	r0, [pc, #476]	@ (8005c24 <update_homing_sequence+0x74c>)
 8005a48:	f7fb fbe6 	bl	8001218 <PID_CONTROLLER_Compute>
 8005a4c:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8005a50:	4b75      	ldr	r3, [pc, #468]	@ (8005c28 <update_homing_sequence+0x750>)
 8005a52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f7fb f833 	bl	8000ac4 <__aeabi_d2iz>
 8005a5e:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005a60:	4b71      	ldr	r3, [pc, #452]	@ (8005c28 <update_homing_sequence+0x750>)
 8005a62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005a66:	4690      	mov	r8, r2
 8005a68:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8005a6c:	4640      	mov	r0, r8
 8005a6e:	4649      	mov	r1, r9
 8005a70:	f7fb f828 	bl	8000ac4 <__aeabi_d2iz>
 8005a74:	4603      	mov	r3, r0
 8005a76:	4619      	mov	r1, r3
 8005a78:	4630      	mov	r0, r6
 8005a7a:	eeb0 0a48 	vmov.f32	s0, s16
 8005a7e:	f7fb fb69 	bl	8001154 <PWM_Satuation>
 8005a82:	ee07 0a90 	vmov	s15, r0
 8005a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a8a:	4b65      	ldr	r3, [pc, #404]	@ (8005c20 <update_homing_sequence+0x748>)
 8005a8c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8005a90:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 8005a94:	4865      	ldr	r0, [pc, #404]	@ (8005c2c <update_homing_sequence+0x754>)
 8005a96:	f7fb fd7f 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8005a9a:	eef0 7a40 	vmov.f32	s15, s0
 8005a9e:	4b60      	ldr	r3, [pc, #384]	@ (8005c20 <update_homing_sequence+0x748>)
 8005aa0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 8005aa4:	4b5e      	ldr	r3, [pc, #376]	@ (8005c20 <update_homing_sequence+0x748>)
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

	    static float ffd_filtered = 0.0f;
	    static float dfd_filtered = 0.0f;

	    ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8005aac:	4b60      	ldr	r3, [pc, #384]	@ (8005c30 <update_homing_sequence+0x758>)
 8005aae:	edd3 7a00 	vldr	s15, [r3]
 8005ab2:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8005c34 <update_homing_sequence+0x75c>
 8005ab6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005aba:	4b59      	ldr	r3, [pc, #356]	@ (8005c20 <update_homing_sequence+0x748>)
 8005abc:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8005ac0:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8005c38 <update_homing_sequence+0x760>
 8005ac4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005acc:	4b58      	ldr	r3, [pc, #352]	@ (8005c30 <update_homing_sequence+0x758>)
 8005ace:	edc3 7a00 	vstr	s15, [r3]
	    dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8005ad2:	4b5a      	ldr	r3, [pc, #360]	@ (8005c3c <update_homing_sequence+0x764>)
 8005ad4:	edd3 7a00 	vldr	s15, [r3]
 8005ad8:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8005c34 <update_homing_sequence+0x75c>
 8005adc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ae0:	4b4f      	ldr	r3, [pc, #316]	@ (8005c20 <update_homing_sequence+0x748>)
 8005ae2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005ae6:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8005c38 <update_homing_sequence+0x760>
 8005aea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af2:	4b52      	ldr	r3, [pc, #328]	@ (8005c3c <update_homing_sequence+0x764>)
 8005af4:	edc3 7a00 	vstr	s15, [r3]

	    revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8005af8:	4b49      	ldr	r3, [pc, #292]	@ (8005c20 <update_homing_sequence+0x748>)
 8005afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fa fcef 	bl	80004e0 <__aeabi_f2d>
 8005b02:	4680      	mov	r8, r0
 8005b04:	4689      	mov	r9, r1
 8005b06:	4b4d      	ldr	r3, [pc, #308]	@ (8005c3c <update_homing_sequence+0x764>)
 8005b08:	ed93 7a00 	vldr	s14, [r3]
 8005b0c:	4b48      	ldr	r3, [pc, #288]	@ (8005c30 <update_homing_sequence+0x758>)
 8005b0e:	edd3 7a00 	vldr	s15, [r3]
 8005b12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b16:	ee17 0a90 	vmov	r0, s15
 8005b1a:	f7fa fce1 	bl	80004e0 <__aeabi_f2d>
 8005b1e:	a33e      	add	r3, pc, #248	@ (adr r3, 8005c18 <update_homing_sequence+0x740>)
 8005b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b24:	f7fa fd34 	bl	8000590 <__aeabi_dmul>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	4640      	mov	r0, r8
 8005b2e:	4649      	mov	r1, r9
 8005b30:	f7fa fb78 	bl	8000224 <__adddf3>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4610      	mov	r0, r2
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	f7fb f80a 	bl	8000b54 <__aeabi_d2f>
 8005b40:	4603      	mov	r3, r0
 8005b42:	4a37      	ldr	r2, [pc, #220]	@ (8005c20 <update_homing_sequence+0x748>)
 8005b44:	6253      	str	r3, [r2, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005b46:	4b36      	ldr	r3, [pc, #216]	@ (8005c20 <update_homing_sequence+0x748>)
 8005b48:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 8005b4c:	4b36      	ldr	r3, [pc, #216]	@ (8005c28 <update_homing_sequence+0x750>)
 8005b4e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005b52:	4610      	mov	r0, r2
 8005b54:	4619      	mov	r1, r3
 8005b56:	f7fa ffb5 	bl	8000ac4 <__aeabi_d2iz>
 8005b5a:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8005b5c:	4b32      	ldr	r3, [pc, #200]	@ (8005c28 <update_homing_sequence+0x750>)
 8005b5e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b62:	4614      	mov	r4, r2
 8005b64:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8005b68:	4620      	mov	r0, r4
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	f7fa ffaa 	bl	8000ac4 <__aeabi_d2iz>
 8005b70:	4603      	mov	r3, r0
 8005b72:	4619      	mov	r1, r3
 8005b74:	4630      	mov	r0, r6
 8005b76:	eeb0 0a48 	vmov.f32	s0, s16
 8005b7a:	f7fb faeb 	bl	8001154 <PWM_Satuation>
 8005b7e:	ee07 0a90 	vmov	s15, r0
 8005b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b86:	4b26      	ldr	r3, [pc, #152]	@ (8005c20 <update_homing_sequence+0x748>)
 8005b88:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 8005b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8005c40 <update_homing_sequence+0x768>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d038      	beq.n	8005c06 <update_homing_sequence+0x72e>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005b94:	4b2b      	ldr	r3, [pc, #172]	@ (8005c44 <update_homing_sequence+0x76c>)
 8005b96:	f04f 0200 	mov.w	r2, #0
 8005b9a:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005b9c:	4b20      	ldr	r3, [pc, #128]	@ (8005c20 <update_homing_sequence+0x748>)
 8005b9e:	f04f 0200 	mov.w	r2, #0
 8005ba2:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005ba4:	4b28      	ldr	r3, [pc, #160]	@ (8005c48 <update_homing_sequence+0x770>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 8005baa:	4b28      	ldr	r3, [pc, #160]	@ (8005c4c <update_homing_sequence+0x774>)
 8005bac:	220a      	movs	r2, #10
 8005bae:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005bb0:	e029      	b.n	8005c06 <update_homing_sequence+0x72e>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005bb2:	4b24      	ldr	r3, [pc, #144]	@ (8005c44 <update_homing_sequence+0x76c>)
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005bba:	4b19      	ldr	r3, [pc, #100]	@ (8005c20 <update_homing_sequence+0x748>)
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005bc2:	4b21      	ldr	r3, [pc, #132]	@ (8005c48 <update_homing_sequence+0x770>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8005c48 <update_homing_sequence+0x770>)
 8005bca:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005bcc:	4b1e      	ldr	r3, [pc, #120]	@ (8005c48 <update_homing_sequence+0x770>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005bd4:	d319      	bcc.n	8005c0a <update_homing_sequence+0x732>
			homing_state = HOMING_COMPLETE;
 8005bd6:	4b1d      	ldr	r3, [pc, #116]	@ (8005c4c <update_homing_sequence+0x774>)
 8005bd8:	220b      	movs	r2, #11
 8005bda:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005bdc:	e015      	b.n	8005c0a <update_homing_sequence+0x732>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 8005bde:	f7ff facd 	bl	800517c <__NVIC_SystemReset>
		return;
 8005be2:	bf00      	nop
 8005be4:	e012      	b.n	8005c0c <update_homing_sequence+0x734>
		break;

	case HOMING_IDLE:
	default:
		break;
 8005be6:	bf00      	nop
 8005be8:	e010      	b.n	8005c0c <update_homing_sequence+0x734>
		break;
 8005bea:	bf00      	nop
 8005bec:	e00e      	b.n	8005c0c <update_homing_sequence+0x734>
		break;
 8005bee:	bf00      	nop
 8005bf0:	e00c      	b.n	8005c0c <update_homing_sequence+0x734>
		break;
 8005bf2:	bf00      	nop
 8005bf4:	e00a      	b.n	8005c0c <update_homing_sequence+0x734>
		break;
 8005bf6:	bf00      	nop
 8005bf8:	e008      	b.n	8005c0c <update_homing_sequence+0x734>
		break;
 8005bfa:	bf00      	nop
 8005bfc:	e006      	b.n	8005c0c <update_homing_sequence+0x734>
		break;
 8005bfe:	bf00      	nop
 8005c00:	e004      	b.n	8005c0c <update_homing_sequence+0x734>
		break;
 8005c02:	bf00      	nop
 8005c04:	e002      	b.n	8005c0c <update_homing_sequence+0x734>
		break;
 8005c06:	bf00      	nop
 8005c08:	e000      	b.n	8005c0c <update_homing_sequence+0x734>
		break;
 8005c0a:	bf00      	nop
	}
}
 8005c0c:	372c      	adds	r7, #44	@ 0x2c
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	ecbd 8b02 	vpop	{d8}
 8005c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c18:	47ae147b 	.word	0x47ae147b
 8005c1c:	3f847ae1 	.word	0x3f847ae1
 8005c20:	200002c4 	.word	0x200002c4
 8005c24:	200005c4 	.word	0x200005c4
 8005c28:	20000000 	.word	0x20000000
 8005c2c:	20000620 	.word	0x20000620
 8005c30:	200003ec 	.word	0x200003ec
 8005c34:	3f4ccccd 	.word	0x3f4ccccd
 8005c38:	3e4ccccd 	.word	0x3e4ccccd
 8005c3c:	200003f0 	.word	0x200003f0
 8005c40:	20000364 	.word	0x20000364
 8005c44:	20000280 	.word	0x20000280
 8005c48:	20000360 	.word	0x20000360
 8005c4c:	2000036a 	.word	0x2000036a

08005c50 <normalize_angle>:

float normalize_angle(float angle_rad) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b084      	sub	sp, #16
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8005c5a:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8005c98 <normalize_angle+0x48>
 8005c5e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005c62:	f00c f8f5 	bl	8011e50 <fmodf>
 8005c66:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8005c6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c76:	d507      	bpl.n	8005c88 <normalize_angle+0x38>
		result += 2.0f * PI;
 8005c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c7c:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8005c98 <normalize_angle+0x48>
 8005c80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c84:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	ee07 3a90 	vmov	s15, r3
}
 8005c8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	40c90fdb 	.word	0x40c90fdb

08005c9c <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 8005c9c:	b480      	push	{r7}
 8005c9e:	b085      	sub	sp, #20
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	ed87 0a01 	vstr	s0, [r7, #4]
 8005ca6:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8005cb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cb4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8005e18 <calculate_movement_deg+0x17c>
 8005cb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc0:	d508      	bpl.n	8005cd4 <calculate_movement_deg+0x38>
 8005cc2:	edd7 7a00 	vldr	s15, [r7]
 8005cc6:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8005e18 <calculate_movement_deg+0x17c>
 8005cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd2:	d411      	bmi.n	8005cf8 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 8005cd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cd8:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8005e18 <calculate_movement_deg+0x17c>
 8005cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce4:	db33      	blt.n	8005d4e <calculate_movement_deg+0xb2>
 8005ce6:	edd7 7a00 	vldr	s15, [r7]
 8005cea:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8005e18 <calculate_movement_deg+0x17c>
 8005cee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf6:	db2a      	blt.n	8005d4e <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8005cf8:	ed97 7a00 	vldr	s14, [r7]
 8005cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d04:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8005d08:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d0c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005e18 <calculate_movement_deg+0x17c>
 8005d10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d18:	dd07      	ble.n	8005d2a <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8005d1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d1e:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005e1c <calculate_movement_deg+0x180>
 8005d22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d26:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005d2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d2e:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8005e20 <calculate_movement_deg+0x184>
 8005d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3a:	d562      	bpl.n	8005e02 <calculate_movement_deg+0x166>
			movement += 360.0f;
 8005d3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d40:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8005e1c <calculate_movement_deg+0x180>
 8005d44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d48:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8005d4c:	e059      	b.n	8005e02 <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8005d4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d52:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005e18 <calculate_movement_deg+0x17c>
 8005d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d5e:	d52a      	bpl.n	8005db6 <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8005d60:	edd7 7a00 	vldr	s15, [r7]
 8005d64:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8005e18 <calculate_movement_deg+0x17c>
 8005d68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d78:	d50e      	bpl.n	8005d98 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8005d7a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8005e1c <calculate_movement_deg+0x180>
 8005d7e:	edd7 7a00 	vldr	s15, [r7]
 8005d82:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005d86:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d8e:	eef1 7a67 	vneg.f32	s15, s15
 8005d92:	edc7 7a03 	vstr	s15, [r7, #12]
 8005d96:	e034      	b.n	8005e02 <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 8005d98:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d9c:	edd7 7a00 	vldr	s15, [r7]
 8005da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005da4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005e1c <calculate_movement_deg+0x180>
 8005da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dac:	eef1 7a67 	vneg.f32	s15, s15
 8005db0:	edc7 7a03 	vstr	s15, [r7, #12]
 8005db4:	e025      	b.n	8005e02 <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 8005db6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dba:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8005e18 <calculate_movement_deg+0x17c>
 8005dbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005dc2:	ed97 7a00 	vldr	s14, [r7]
 8005dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dce:	d50c      	bpl.n	8005dea <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 8005dd0:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8005e1c <calculate_movement_deg+0x180>
 8005dd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ddc:	ed97 7a00 	vldr	s14, [r7]
 8005de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005de4:	edc7 7a03 	vstr	s15, [r7, #12]
 8005de8:	e00b      	b.n	8005e02 <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8005dea:	ed97 7a00 	vldr	s14, [r7]
 8005dee:	edd7 7a01 	vldr	s15, [r7, #4]
 8005df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005df6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8005e1c <calculate_movement_deg+0x180>
 8005dfa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dfe:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	ee07 3a90 	vmov	s15, r3
}
 8005e08:	eeb0 0a67 	vmov.f32	s0, s15
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	43340000 	.word	0x43340000
 8005e1c:	43b40000 	.word	0x43b40000
 8005e20:	c3340000 	.word	0xc3340000

08005e24 <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm, float revolute_target_deg) {
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	ed2d 8b02 	vpush	{d8}
 8005e2a:	b08b      	sub	sp, #44	@ 0x2c
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8005e32:	edc7 0a00 	vstr	s1, [r7]
    bool allow_during_homing = (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG);
 8005e36:	4b85      	ldr	r3, [pc, #532]	@ (800604c <start_combined_trajectory+0x228>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d005      	beq.n	8005e4a <start_combined_trajectory+0x26>
 8005e3e:	4b84      	ldr	r3, [pc, #528]	@ (8006050 <start_combined_trajectory+0x22c>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b07      	cmp	r3, #7
 8005e44:	d101      	bne.n	8005e4a <start_combined_trajectory+0x26>
 8005e46:	2301      	movs	r3, #1
 8005e48:	e000      	b.n	8005e4c <start_combined_trajectory+0x28>
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if (is_emergency_active() || (homing_active && !allow_during_homing)) {
 8005e5c:	f000 ffa4 	bl	8006da8 <is_emergency_active>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f040 80eb 	bne.w	800603e <start_combined_trajectory+0x21a>
 8005e68:	4b78      	ldr	r3, [pc, #480]	@ (800604c <start_combined_trajectory+0x228>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d007      	beq.n	8005e80 <start_combined_trajectory+0x5c>
 8005e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e74:	f083 0301 	eor.w	r3, r3, #1
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f040 80df 	bne.w	800603e <start_combined_trajectory+0x21a>
        return;
    }

    float pris_current = prismatic_encoder.mm;
 8005e80:	4b74      	ldr	r3, [pc, #464]	@ (8006054 <start_combined_trajectory+0x230>)
 8005e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e84:	623b      	str	r3, [r7, #32]
    float rev_current = revolute_encoder.rads;
 8005e86:	4b74      	ldr	r3, [pc, #464]	@ (8006058 <start_combined_trajectory+0x234>)
 8005e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e8a:	61fb      	str	r3, [r7, #28]

    prisEva.t = 0.0f;
 8005e8c:	4b73      	ldr	r3, [pc, #460]	@ (800605c <start_combined_trajectory+0x238>)
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	60da      	str	r2, [r3, #12]
    prisEva.isFinised = false;
 8005e94:	4b71      	ldr	r3, [pc, #452]	@ (800605c <start_combined_trajectory+0x238>)
 8005e96:	2200      	movs	r2, #0
 8005e98:	741a      	strb	r2, [r3, #16]
    revEva.t = 0.0f;
 8005e9a:	4b71      	ldr	r3, [pc, #452]	@ (8006060 <start_combined_trajectory+0x23c>)
 8005e9c:	f04f 0200 	mov.w	r2, #0
 8005ea0:	60da      	str	r2, [r3, #12]
    revEva.isFinised = false;
 8005ea2:	4b6f      	ldr	r3, [pc, #444]	@ (8006060 <start_combined_trajectory+0x23c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	741a      	strb	r2, [r3, #16]

    prismatic_axis.initial_pos = pris_current;
 8005ea8:	4a6e      	ldr	r2, [pc, #440]	@ (8006064 <start_combined_trajectory+0x240>)
 8005eaa:	6a3b      	ldr	r3, [r7, #32]
 8005eac:	60d3      	str	r3, [r2, #12]
    revolute_axis.initial_pos = rev_current;
 8005eae:	4a6e      	ldr	r2, [pc, #440]	@ (8006068 <start_combined_trajectory+0x244>)
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	60d3      	str	r3, [r2, #12]

    prismatic_axis.target_pos = fminf(fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);
 8005eb4:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 800606c <start_combined_trajectory+0x248>
 8005eb8:	ed97 0a01 	vldr	s0, [r7, #4]
 8005ebc:	f00c f890 	bl	8011fe0 <fmaxf>
 8005ec0:	eef0 7a40 	vmov.f32	s15, s0
 8005ec4:	eddf 0a6a 	vldr	s1, [pc, #424]	@ 8006070 <start_combined_trajectory+0x24c>
 8005ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8005ecc:	f00c f8a5 	bl	801201a <fminf>
 8005ed0:	eef0 7a40 	vmov.f32	s15, s0
 8005ed4:	4b63      	ldr	r3, [pc, #396]	@ (8006064 <start_combined_trajectory+0x240>)
 8005ed6:	edc3 7a04 	vstr	s15, [r3, #16]

    float normalized_current = normalize_angle(rev_current);
 8005eda:	ed97 0a07 	vldr	s0, [r7, #28]
 8005ede:	f7ff feb7 	bl	8005c50 <normalize_angle>
 8005ee2:	ed87 0a06 	vstr	s0, [r7, #24]
    float current_deg = normalized_current * 180.0f / PI;
 8005ee6:	edd7 7a06 	vldr	s15, [r7, #24]
 8005eea:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8006074 <start_combined_trajectory+0x250>
 8005eee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ef2:	eddf 6a61 	vldr	s13, [pc, #388]	@ 8006078 <start_combined_trajectory+0x254>
 8005ef6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005efa:	edc7 7a05 	vstr	s15, [r7, #20]
    movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8005efe:	edd7 0a00 	vldr	s1, [r7]
 8005f02:	ed97 0a05 	vldr	s0, [r7, #20]
 8005f06:	f7ff fec9 	bl	8005c9c <calculate_movement_deg>
 8005f0a:	eef0 7a40 	vmov.f32	s15, s0
 8005f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800607c <start_combined_trajectory+0x258>)
 8005f10:	edc3 7a00 	vstr	s15, [r3]
    float movement_rad = movement_deg * PI / 180.0f;
 8005f14:	4b59      	ldr	r3, [pc, #356]	@ (800607c <start_combined_trajectory+0x258>)
 8005f16:	edd3 7a00 	vldr	s15, [r3]
 8005f1a:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8006078 <start_combined_trajectory+0x254>
 8005f1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005f22:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8006074 <start_combined_trajectory+0x250>
 8005f26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f2a:	edc7 7a04 	vstr	s15, [r7, #16]
    revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8005f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8006068 <start_combined_trajectory+0x244>)
 8005f30:	ed93 7a03 	vldr	s14, [r3, #12]
 8005f34:	edd7 7a04 	vldr	s15, [r7, #16]
 8005f38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f3c:	4b4a      	ldr	r3, [pc, #296]	@ (8006068 <start_combined_trajectory+0x244>)
 8005f3e:	edc3 7a04 	vstr	s15, [r3, #16]

    // Check if we're in HOMING_REV_TO_ZERO_DEG mode
    bool is_homing_zero_deg = (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG);
 8005f42:	4b42      	ldr	r3, [pc, #264]	@ (800604c <start_combined_trajectory+0x228>)
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <start_combined_trajectory+0x132>
 8005f4a:	4b41      	ldr	r3, [pc, #260]	@ (8006050 <start_combined_trajectory+0x22c>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b07      	cmp	r3, #7
 8005f50:	d101      	bne.n	8005f56 <start_combined_trajectory+0x132>
 8005f52:	2301      	movs	r3, #1
 8005f54:	e000      	b.n	8005f58 <start_combined_trajectory+0x134>
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	73fb      	strb	r3, [r7, #15]

    if (is_homing_zero_deg) {
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d038      	beq.n	8005fda <start_combined_trajectory+0x1b6>
        // HOMING_REV_TO_ZERO_DEG: Only generate revolute trajectory, skip prismatic

        // Don't generate prismatic trajectory at all
        prismatic_axis.trajectory_active = false;
 8005f68:	4b3e      	ldr	r3, [pc, #248]	@ (8006064 <start_combined_trajectory+0x240>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        prismatic_axis.position = pris_current;  // Hold current position
 8005f70:	4a3c      	ldr	r2, [pc, #240]	@ (8006064 <start_combined_trajectory+0x240>)
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	6013      	str	r3, [r2, #0]
        prismatic_axis.velocity = 0.0f;
 8005f76:	4b3b      	ldr	r3, [pc, #236]	@ (8006064 <start_combined_trajectory+0x240>)
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	605a      	str	r2, [r3, #4]

        // Only generate revolute trajectory
        Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8005f7e:	4b3a      	ldr	r3, [pc, #232]	@ (8006068 <start_combined_trajectory+0x244>)
 8005f80:	ed93 8a03 	vldr	s16, [r3, #12]
 8005f84:	4b38      	ldr	r3, [pc, #224]	@ (8006068 <start_combined_trajectory+0x244>)
 8005f86:	edd3 8a04 	vldr	s17, [r3, #16]
                revolute_axis.target_pos,
                ZGX45RGG_150RPM_Constant.traject_qd_max,
 8005f8a:	4b3d      	ldr	r3, [pc, #244]	@ (8006080 <start_combined_trajectory+0x25c>)
 8005f8c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
        Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8005f90:	4610      	mov	r0, r2
 8005f92:	4619      	mov	r1, r3
 8005f94:	f7fa fdde 	bl	8000b54 <__aeabi_d2f>
 8005f98:	4604      	mov	r4, r0
                ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8005f9a:	4b39      	ldr	r3, [pc, #228]	@ (8006080 <start_combined_trajectory+0x25c>)
 8005f9c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
        Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	f7fa fdd6 	bl	8000b54 <__aeabi_d2f>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	ee01 3a90 	vmov	s3, r3
 8005fae:	ee01 4a10 	vmov	s2, r4
 8005fb2:	eef0 0a68 	vmov.f32	s1, s17
 8005fb6:	eeb0 0a48 	vmov.f32	s0, s16
 8005fba:	4832      	ldr	r0, [pc, #200]	@ (8006084 <start_combined_trajectory+0x260>)
 8005fbc:	f7fd ff02 	bl	8003dc4 <Trapezoidal_Generator>

        revolute_axis.trajectory_active = false;  // Will be activated later
 8005fc0:	4b29      	ldr	r3, [pc, #164]	@ (8006068 <start_combined_trajectory+0x244>)
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Set motion sequence to skip prismatic phase
        plotter_pen_up();
 8005fc8:	f002 fdb2 	bl	8008b30 <plotter_pen_up>
        motion_delay_timer = 0;
 8005fcc:	4b2e      	ldr	r3, [pc, #184]	@ (8006088 <start_combined_trajectory+0x264>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	601a      	str	r2, [r3, #0]
        motion_sequence_state = MOTION_PEN_UP_DELAY;  // Will skip to revolute directly
 8005fd2:	4b2e      	ldr	r3, [pc, #184]	@ (800608c <start_combined_trajectory+0x268>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	e032      	b.n	8006040 <start_combined_trajectory+0x21c>

    } else {
        // NORMAL TRAJECTORY: Generate both prismatic and revolute trajectories

        // Generate prismatic trajectory
        Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8005fda:	4b22      	ldr	r3, [pc, #136]	@ (8006064 <start_combined_trajectory+0x240>)
 8005fdc:	ed93 8a03 	vldr	s16, [r3, #12]
 8005fe0:	4b20      	ldr	r3, [pc, #128]	@ (8006064 <start_combined_trajectory+0x240>)
 8005fe2:	edd3 8a04 	vldr	s17, [r3, #16]
                prismatic_axis.target_pos,
                ZGX45RGG_400RPM_Constant.traject_sd_max,
 8005fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8006090 <start_combined_trajectory+0x26c>)
 8005fe8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
        Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8005fec:	4610      	mov	r0, r2
 8005fee:	4619      	mov	r1, r3
 8005ff0:	f7fa fdb0 	bl	8000b54 <__aeabi_d2f>
 8005ff4:	4604      	mov	r4, r0
                ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8005ff6:	4b26      	ldr	r3, [pc, #152]	@ (8006090 <start_combined_trajectory+0x26c>)
 8005ff8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
        Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4619      	mov	r1, r3
 8006000:	f7fa fda8 	bl	8000b54 <__aeabi_d2f>
 8006004:	4603      	mov	r3, r0
 8006006:	ee01 3a90 	vmov	s3, r3
 800600a:	ee01 4a10 	vmov	s2, r4
 800600e:	eef0 0a68 	vmov.f32	s1, s17
 8006012:	eeb0 0a48 	vmov.f32	s0, s16
 8006016:	481f      	ldr	r0, [pc, #124]	@ (8006094 <start_combined_trajectory+0x270>)
 8006018:	f7fd fed4 	bl	8003dc4 <Trapezoidal_Generator>

        prismatic_axis.trajectory_active = false;
 800601c:	4b11      	ldr	r3, [pc, #68]	@ (8006064 <start_combined_trajectory+0x240>)
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        revolute_axis.trajectory_active = false;
 8006024:	4b10      	ldr	r3, [pc, #64]	@ (8006068 <start_combined_trajectory+0x244>)
 8006026:	2200      	movs	r2, #0
 8006028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        plotter_pen_up();
 800602c:	f002 fd80 	bl	8008b30 <plotter_pen_up>
        motion_delay_timer = 0;
 8006030:	4b15      	ldr	r3, [pc, #84]	@ (8006088 <start_combined_trajectory+0x264>)
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]
        motion_sequence_state = MOTION_PEN_UP_DELAY;
 8006036:	4b15      	ldr	r3, [pc, #84]	@ (800608c <start_combined_trajectory+0x268>)
 8006038:	2201      	movs	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	e000      	b.n	8006040 <start_combined_trajectory+0x21c>
        return;
 800603e:	bf00      	nop
    }
}
 8006040:	372c      	adds	r7, #44	@ 0x2c
 8006042:	46bd      	mov	sp, r7
 8006044:	ecbd 8b02 	vpop	{d8}
 8006048:	bd90      	pop	{r4, r7, pc}
 800604a:	bf00      	nop
 800604c:	2000036b 	.word	0x2000036b
 8006050:	2000036a 	.word	0x2000036a
 8006054:	20000494 	.word	0x20000494
 8006058:	200004f0 	.word	0x200004f0
 800605c:	20000334 	.word	0x20000334
 8006060:	20000348 	.word	0x20000348
 8006064:	20000280 	.word	0x20000280
 8006068:	200002c4 	.word	0x200002c4
 800606c:	00000000 	.word	0x00000000
 8006070:	43960000 	.word	0x43960000
 8006074:	43340000 	.word	0x43340000
 8006078:	40490fdb 	.word	0x40490fdb
 800607c:	20000380 	.word	0x20000380
 8006080:	20000000 	.word	0x20000000
 8006084:	20000320 	.word	0x20000320
 8006088:	20000360 	.word	0x20000360
 800608c:	20000308 	.word	0x20000308
 8006090:	20000080 	.word	0x20000080
 8006094:	2000030c 	.word	0x2000030c

08006098 <update_position_control>:

void update_position_control(void) {
 8006098:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800609c:	ed2d 8b02 	vpush	{d8}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 80060a4:	4b50      	ldr	r3, [pc, #320]	@ (80061e8 <update_position_control+0x150>)
 80060a6:	ed93 7a00 	vldr	s14, [r3]
 80060aa:	4b50      	ldr	r3, [pc, #320]	@ (80061ec <update_position_control+0x154>)
 80060ac:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80060b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060b4:	4b4c      	ldr	r3, [pc, #304]	@ (80061e8 <update_position_control+0x150>)
 80060b6:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 80060ba:	4b4b      	ldr	r3, [pc, #300]	@ (80061e8 <update_position_control+0x150>)
 80060bc:	edd3 7a05 	vldr	s15, [r3, #20]
 80060c0:	eeb0 0a67 	vmov.f32	s0, s15
 80060c4:	484a      	ldr	r0, [pc, #296]	@ (80061f0 <update_position_control+0x158>)
 80060c6:	f7fb f8a7 	bl	8001218 <PID_CONTROLLER_Compute>
 80060ca:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 80060ce:	4b49      	ldr	r3, [pc, #292]	@ (80061f4 <update_position_control+0x15c>)
 80060d0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 80060d4:	4610      	mov	r0, r2
 80060d6:	4619      	mov	r1, r3
 80060d8:	f7fa fcf4 	bl	8000ac4 <__aeabi_d2iz>
 80060dc:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 80060de:	4b45      	ldr	r3, [pc, #276]	@ (80061f4 <update_position_control+0x15c>)
 80060e0:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80060e4:	4690      	mov	r8, r2
 80060e6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 80060ea:	4640      	mov	r0, r8
 80060ec:	4649      	mov	r1, r9
 80060ee:	f7fa fce9 	bl	8000ac4 <__aeabi_d2iz>
 80060f2:	4603      	mov	r3, r0
 80060f4:	4619      	mov	r1, r3
 80060f6:	4630      	mov	r0, r6
 80060f8:	eeb0 0a48 	vmov.f32	s0, s16
 80060fc:	f7fb f82a 	bl	8001154 <PWM_Satuation>
 8006100:	ee07 0a90 	vmov	s15, r0
 8006104:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006108:	4b37      	ldr	r3, [pc, #220]	@ (80061e8 <update_position_control+0x150>)
 800610a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 800610e:	4b3a      	ldr	r3, [pc, #232]	@ (80061f8 <update_position_control+0x160>)
 8006110:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006114:	eeb0 0a67 	vmov.f32	s0, s15
 8006118:	f7ff fd9a 	bl	8005c50 <normalize_angle>
 800611c:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8006120:	4b36      	ldr	r3, [pc, #216]	@ (80061fc <update_position_control+0x164>)
 8006122:	ed93 7a00 	vldr	s14, [r3]
 8006126:	edd7 7a01 	vldr	s15, [r7, #4]
 800612a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800612e:	4b33      	ldr	r3, [pc, #204]	@ (80061fc <update_position_control+0x164>)
 8006130:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 8006134:	4b31      	ldr	r3, [pc, #196]	@ (80061fc <update_position_control+0x164>)
 8006136:	edd3 7a05 	vldr	s15, [r3, #20]
 800613a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006200 <update_position_control+0x168>
 800613e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006146:	dd09      	ble.n	800615c <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 8006148:	4b2c      	ldr	r3, [pc, #176]	@ (80061fc <update_position_control+0x164>)
 800614a:	edd3 7a05 	vldr	s15, [r3, #20]
 800614e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8006204 <update_position_control+0x16c>
 8006152:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006156:	4b29      	ldr	r3, [pc, #164]	@ (80061fc <update_position_control+0x164>)
 8006158:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 800615c:	4b27      	ldr	r3, [pc, #156]	@ (80061fc <update_position_control+0x164>)
 800615e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006162:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8006208 <update_position_control+0x170>
 8006166:	eef4 7ac7 	vcmpe.f32	s15, s14
 800616a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616e:	d509      	bpl.n	8006184 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 8006170:	4b22      	ldr	r3, [pc, #136]	@ (80061fc <update_position_control+0x164>)
 8006172:	edd3 7a05 	vldr	s15, [r3, #20]
 8006176:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006204 <update_position_control+0x16c>
 800617a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800617e:	4b1f      	ldr	r3, [pc, #124]	@ (80061fc <update_position_control+0x164>)
 8006180:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8006184:	4b1d      	ldr	r3, [pc, #116]	@ (80061fc <update_position_control+0x164>)
 8006186:	edd3 7a05 	vldr	s15, [r3, #20]
 800618a:	eeb0 0a67 	vmov.f32	s0, s15
 800618e:	481f      	ldr	r0, [pc, #124]	@ (800620c <update_position_control+0x174>)
 8006190:	f7fb f842 	bl	8001218 <PID_CONTROLLER_Compute>
 8006194:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 8006198:	4b1d      	ldr	r3, [pc, #116]	@ (8006210 <update_position_control+0x178>)
 800619a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 800619e:	4610      	mov	r0, r2
 80061a0:	4619      	mov	r1, r3
 80061a2:	f7fa fc8f 	bl	8000ac4 <__aeabi_d2iz>
 80061a6:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 80061a8:	4b19      	ldr	r3, [pc, #100]	@ (8006210 <update_position_control+0x178>)
 80061aa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80061ae:	4614      	mov	r4, r2
 80061b0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 80061b4:	4620      	mov	r0, r4
 80061b6:	4629      	mov	r1, r5
 80061b8:	f7fa fc84 	bl	8000ac4 <__aeabi_d2iz>
 80061bc:	4603      	mov	r3, r0
 80061be:	4619      	mov	r1, r3
 80061c0:	4630      	mov	r0, r6
 80061c2:	eeb0 0a48 	vmov.f32	s0, s16
 80061c6:	f7fa ffc5 	bl	8001154 <PWM_Satuation>
 80061ca:	ee07 0a90 	vmov	s15, r0
 80061ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061d2:	4b0a      	ldr	r3, [pc, #40]	@ (80061fc <update_position_control+0x164>)
 80061d4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	ecbd 8b02 	vpop	{d8}
 80061e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061e6:	bf00      	nop
 80061e8:	20000280 	.word	0x20000280
 80061ec:	20000494 	.word	0x20000494
 80061f0:	2000054c 	.word	0x2000054c
 80061f4:	20000080 	.word	0x20000080
 80061f8:	200004f0 	.word	0x200004f0
 80061fc:	200002c4 	.word	0x200002c4
 8006200:	40490fdb 	.word	0x40490fdb
 8006204:	40c90fdb 	.word	0x40c90fdb
 8006208:	c0490fdb 	.word	0xc0490fdb
 800620c:	2000059c 	.word	0x2000059c
 8006210:	20000000 	.word	0x20000000
 8006214:	00000000 	.word	0x00000000

08006218 <update_velocity_control>:

void update_velocity_control(void) {
 8006218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	ed2d 8b02 	vpush	{d8}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
	if (prismatic_axis.trajectory_active) {
 8006224:	4b96      	ldr	r3, [pc, #600]	@ (8006480 <update_velocity_control+0x268>)
 8006226:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800622a:	2b00      	cmp	r3, #0
 800622c:	d010      	beq.n	8006250 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 800622e:	4b94      	ldr	r3, [pc, #592]	@ (8006480 <update_velocity_control+0x268>)
 8006230:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 8006234:	4b92      	ldr	r3, [pc, #584]	@ (8006480 <update_velocity_control+0x268>)
 8006236:	edd3 7a01 	vldr	s15, [r3, #4]
 800623a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800623e:	4b90      	ldr	r3, [pc, #576]	@ (8006480 <update_velocity_control+0x268>)
 8006240:	edd3 7a07 	vldr	s15, [r3, #28]
 8006244:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006248:	4b8d      	ldr	r3, [pc, #564]	@ (8006480 <update_velocity_control+0x268>)
 800624a:	edc3 7a06 	vstr	s15, [r3, #24]
 800624e:	e00a      	b.n	8006266 <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006250:	4b8b      	ldr	r3, [pc, #556]	@ (8006480 <update_velocity_control+0x268>)
 8006252:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8006256:	4b8a      	ldr	r3, [pc, #552]	@ (8006480 <update_velocity_control+0x268>)
 8006258:	edd3 7a07 	vldr	s15, [r3, #28]
 800625c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006260:	4b87      	ldr	r3, [pc, #540]	@ (8006480 <update_velocity_control+0x268>)
 8006262:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 8006266:	4b86      	ldr	r3, [pc, #536]	@ (8006480 <update_velocity_control+0x268>)
 8006268:	edd3 7a06 	vldr	s15, [r3, #24]
 800626c:	eeb0 0a67 	vmov.f32	s0, s15
 8006270:	4884      	ldr	r0, [pc, #528]	@ (8006484 <update_velocity_control+0x26c>)
 8006272:	f7fa ffd1 	bl	8001218 <PID_CONTROLLER_Compute>
 8006276:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 800627a:	4b83      	ldr	r3, [pc, #524]	@ (8006488 <update_velocity_control+0x270>)
 800627c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006280:	4610      	mov	r0, r2
 8006282:	4619      	mov	r1, r3
 8006284:	f7fa fc1e 	bl	8000ac4 <__aeabi_d2iz>
 8006288:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 800628a:	4b7f      	ldr	r3, [pc, #508]	@ (8006488 <update_velocity_control+0x270>)
 800628c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006290:	603a      	str	r2, [r7, #0]
 8006292:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006296:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800629c:	f7fa fc12 	bl	8000ac4 <__aeabi_d2iz>
 80062a0:	4603      	mov	r3, r0
 80062a2:	4619      	mov	r1, r3
 80062a4:	4630      	mov	r0, r6
 80062a6:	eeb0 0a48 	vmov.f32	s0, s16
 80062aa:	f7fa ff53 	bl	8001154 <PWM_Satuation>
 80062ae:	ee07 0a90 	vmov	s15, r0
 80062b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062b6:	4b72      	ldr	r3, [pc, #456]	@ (8006480 <update_velocity_control+0x268>)
 80062b8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 80062bc:	4b70      	ldr	r3, [pc, #448]	@ (8006480 <update_velocity_control+0x268>)
 80062be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d02c      	beq.n	8006320 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 80062c6:	4b6e      	ldr	r3, [pc, #440]	@ (8006480 <update_velocity_control+0x268>)
 80062c8:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 80062cc:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800648c <update_velocity_control+0x274>
 80062d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80062d4:	eeb0 0a47 	vmov.f32	s0, s14
 80062d8:	486d      	ldr	r0, [pc, #436]	@ (8006490 <update_velocity_control+0x278>)
 80062da:	f7fb fadb 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 80062de:	eef0 7a40 	vmov.f32	s15, s0
 80062e2:	4b67      	ldr	r3, [pc, #412]	@ (8006480 <update_velocity_control+0x268>)
 80062e4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80062e8:	4b6a      	ldr	r3, [pc, #424]	@ (8006494 <update_velocity_control+0x27c>)
 80062ea:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80062ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006498 <update_velocity_control+0x280>)
 80062f0:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 80062f4:	4b69      	ldr	r3, [pc, #420]	@ (800649c <update_velocity_control+0x284>)
 80062f6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80062fa:	eddf 5a64 	vldr	s11, [pc, #400]	@ 800648c <update_velocity_control+0x274>
 80062fe:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8006302:	eeb0 1a46 	vmov.f32	s2, s12
 8006306:	eef0 0a66 	vmov.f32	s1, s13
 800630a:	eeb0 0a47 	vmov.f32	s0, s14
 800630e:	4864      	ldr	r0, [pc, #400]	@ (80064a0 <update_velocity_control+0x288>)
 8006310:	f7fb fb53 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 8006314:	eef0 7a40 	vmov.f32	s15, s0
 8006318:	4b59      	ldr	r3, [pc, #356]	@ (8006480 <update_velocity_control+0x268>)
 800631a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 800631e:	e007      	b.n	8006330 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 8006320:	4b57      	ldr	r3, [pc, #348]	@ (8006480 <update_velocity_control+0x268>)
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8006328:	4b55      	ldr	r3, [pc, #340]	@ (8006480 <update_velocity_control+0x268>)
 800632a:	f04f 0200 	mov.w	r2, #0
 800632e:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8006330:	4b53      	ldr	r3, [pc, #332]	@ (8006480 <update_velocity_control+0x268>)
 8006332:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006336:	4b52      	ldr	r3, [pc, #328]	@ (8006480 <update_velocity_control+0x268>)
 8006338:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800633c:	4b50      	ldr	r3, [pc, #320]	@ (8006480 <update_velocity_control+0x268>)
 800633e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800634a:	4b4d      	ldr	r3, [pc, #308]	@ (8006480 <update_velocity_control+0x268>)
 800634c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006350:	4b4b      	ldr	r3, [pc, #300]	@ (8006480 <update_velocity_control+0x268>)
 8006352:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006356:	4b4c      	ldr	r3, [pc, #304]	@ (8006488 <update_velocity_control+0x270>)
 8006358:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800635c:	4610      	mov	r0, r2
 800635e:	4619      	mov	r1, r3
 8006360:	f7fa fbb0 	bl	8000ac4 <__aeabi_d2iz>
 8006364:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006366:	4b48      	ldr	r3, [pc, #288]	@ (8006488 <update_velocity_control+0x270>)
 8006368:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800636c:	4692      	mov	sl, r2
 800636e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006372:	4650      	mov	r0, sl
 8006374:	4659      	mov	r1, fp
 8006376:	f7fa fba5 	bl	8000ac4 <__aeabi_d2iz>
 800637a:	4603      	mov	r3, r0
 800637c:	4619      	mov	r1, r3
 800637e:	4630      	mov	r0, r6
 8006380:	eeb0 0a48 	vmov.f32	s0, s16
 8006384:	f7fa fee6 	bl	8001154 <PWM_Satuation>
 8006388:	ee07 0a90 	vmov	s15, r0
 800638c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006390:	4b3b      	ldr	r3, [pc, #236]	@ (8006480 <update_velocity_control+0x268>)
 8006392:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006396:	4b40      	ldr	r3, [pc, #256]	@ (8006498 <update_velocity_control+0x280>)
 8006398:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800639c:	2b00      	cmp	r3, #0
 800639e:	d010      	beq.n	80063c2 <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 80063a0:	4b3d      	ldr	r3, [pc, #244]	@ (8006498 <update_velocity_control+0x280>)
 80063a2:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 80063a6:	4b3c      	ldr	r3, [pc, #240]	@ (8006498 <update_velocity_control+0x280>)
 80063a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80063ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063b0:	4b39      	ldr	r3, [pc, #228]	@ (8006498 <update_velocity_control+0x280>)
 80063b2:	edd3 7a07 	vldr	s15, [r3, #28]
 80063b6:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80063ba:	4b37      	ldr	r3, [pc, #220]	@ (8006498 <update_velocity_control+0x280>)
 80063bc:	edc3 7a06 	vstr	s15, [r3, #24]
 80063c0:	e00a      	b.n	80063d8 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 80063c2:	4b35      	ldr	r3, [pc, #212]	@ (8006498 <update_velocity_control+0x280>)
 80063c4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 80063c8:	4b33      	ldr	r3, [pc, #204]	@ (8006498 <update_velocity_control+0x280>)
 80063ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80063ce:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 80063d2:	4b31      	ldr	r3, [pc, #196]	@ (8006498 <update_velocity_control+0x280>)
 80063d4:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 80063d8:	4b2f      	ldr	r3, [pc, #188]	@ (8006498 <update_velocity_control+0x280>)
 80063da:	edd3 7a06 	vldr	s15, [r3, #24]
 80063de:	eeb0 0a67 	vmov.f32	s0, s15
 80063e2:	4830      	ldr	r0, [pc, #192]	@ (80064a4 <update_velocity_control+0x28c>)
 80063e4:	f7fa ff18 	bl	8001218 <PID_CONTROLLER_Compute>
 80063e8:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 80063ec:	4b2e      	ldr	r3, [pc, #184]	@ (80064a8 <update_velocity_control+0x290>)
 80063ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	f7fa fb65 	bl	8000ac4 <__aeabi_d2iz>
 80063fa:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 80063fc:	4b2a      	ldr	r3, [pc, #168]	@ (80064a8 <update_velocity_control+0x290>)
 80063fe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006402:	4690      	mov	r8, r2
 8006404:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006408:	4640      	mov	r0, r8
 800640a:	4649      	mov	r1, r9
 800640c:	f7fa fb5a 	bl	8000ac4 <__aeabi_d2iz>
 8006410:	4603      	mov	r3, r0
 8006412:	4619      	mov	r1, r3
 8006414:	4630      	mov	r0, r6
 8006416:	eeb0 0a48 	vmov.f32	s0, s16
 800641a:	f7fa fe9b 	bl	8001154 <PWM_Satuation>
 800641e:	ee07 0a90 	vmov	s15, r0
 8006422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006426:	4b1c      	ldr	r3, [pc, #112]	@ (8006498 <update_velocity_control+0x280>)
 8006428:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 800642c:	4b1a      	ldr	r3, [pc, #104]	@ (8006498 <update_velocity_control+0x280>)
 800642e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006432:	2b00      	cmp	r3, #0
 8006434:	d03e      	beq.n	80064b4 <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006436:	4b18      	ldr	r3, [pc, #96]	@ (8006498 <update_velocity_control+0x280>)
 8006438:	edd3 7a01 	vldr	s15, [r3, #4]
 800643c:	eeb0 0a67 	vmov.f32	s0, s15
 8006440:	481a      	ldr	r0, [pc, #104]	@ (80064ac <update_velocity_control+0x294>)
 8006442:	f7fb f8a9 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 8006446:	eef0 7a40 	vmov.f32	s15, s0
 800644a:	4b13      	ldr	r3, [pc, #76]	@ (8006498 <update_velocity_control+0x280>)
 800644c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006450:	4b10      	ldr	r3, [pc, #64]	@ (8006494 <update_velocity_control+0x27c>)
 8006452:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006456:	4b11      	ldr	r3, [pc, #68]	@ (800649c <update_velocity_control+0x284>)
 8006458:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800645c:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 800648c <update_velocity_control+0x274>
 8006460:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006464:	eef0 0a66 	vmov.f32	s1, s13
 8006468:	eeb0 0a47 	vmov.f32	s0, s14
 800646c:	4810      	ldr	r0, [pc, #64]	@ (80064b0 <update_velocity_control+0x298>)
 800646e:	f7fb f926 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006472:	eef0 7a40 	vmov.f32	s15, s0
 8006476:	4b08      	ldr	r3, [pc, #32]	@ (8006498 <update_velocity_control+0x280>)
 8006478:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 800647c:	e034      	b.n	80064e8 <update_velocity_control+0x2d0>
 800647e:	bf00      	nop
 8006480:	20000280 	.word	0x20000280
 8006484:	20000574 	.word	0x20000574
 8006488:	20000080 	.word	0x20000080
 800648c:	447a0000 	.word	0x447a0000
 8006490:	20000614 	.word	0x20000614
 8006494:	200004f0 	.word	0x200004f0
 8006498:	200002c4 	.word	0x200002c4
 800649c:	20000494 	.word	0x20000494
 80064a0:	20000618 	.word	0x20000618
 80064a4:	200005c4 	.word	0x200005c4
 80064a8:	20000000 	.word	0x20000000
 80064ac:	20000620 	.word	0x20000620
 80064b0:	20000624 	.word	0x20000624
	} else {
		revolute_axis.ffd = 0.0f;
 80064b4:	4b54      	ldr	r3, [pc, #336]	@ (8006608 <update_velocity_control+0x3f0>)
 80064b6:	f04f 0200 	mov.w	r2, #0
 80064ba:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80064bc:	4b53      	ldr	r3, [pc, #332]	@ (800660c <update_velocity_control+0x3f4>)
 80064be:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80064c2:	4b53      	ldr	r3, [pc, #332]	@ (8006610 <update_velocity_control+0x3f8>)
 80064c4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80064c8:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8006614 <update_velocity_control+0x3fc>
 80064cc:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80064d0:	eef0 0a66 	vmov.f32	s1, s13
 80064d4:	eeb0 0a47 	vmov.f32	s0, s14
 80064d8:	484f      	ldr	r0, [pc, #316]	@ (8006618 <update_velocity_control+0x400>)
 80064da:	f7fb f8f0 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 80064de:	eef0 7a40 	vmov.f32	s15, s0
 80064e2:	4b49      	ldr	r3, [pc, #292]	@ (8006608 <update_velocity_control+0x3f0>)
 80064e4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 80064e8:	4b4c      	ldr	r3, [pc, #304]	@ (800661c <update_velocity_control+0x404>)
 80064ea:	edd3 7a00 	vldr	s15, [r3]
 80064ee:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006620 <update_velocity_control+0x408>
 80064f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80064f6:	4b44      	ldr	r3, [pc, #272]	@ (8006608 <update_velocity_control+0x3f0>)
 80064f8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80064fc:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8006624 <update_velocity_control+0x40c>
 8006500:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006508:	4b44      	ldr	r3, [pc, #272]	@ (800661c <update_velocity_control+0x404>)
 800650a:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 800650e:	4b46      	ldr	r3, [pc, #280]	@ (8006628 <update_velocity_control+0x410>)
 8006510:	edd3 7a00 	vldr	s15, [r3]
 8006514:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006620 <update_velocity_control+0x408>
 8006518:	ee27 7a87 	vmul.f32	s14, s15, s14
 800651c:	4b3a      	ldr	r3, [pc, #232]	@ (8006608 <update_velocity_control+0x3f0>)
 800651e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006522:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8006624 <update_velocity_control+0x40c>
 8006526:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800652a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800652e:	4b3e      	ldr	r3, [pc, #248]	@ (8006628 <update_velocity_control+0x410>)
 8006530:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8006534:	4b34      	ldr	r3, [pc, #208]	@ (8006608 <update_velocity_control+0x3f0>)
 8006536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006538:	4618      	mov	r0, r3
 800653a:	f7f9 ffd1 	bl	80004e0 <__aeabi_f2d>
 800653e:	4680      	mov	r8, r0
 8006540:	4689      	mov	r9, r1
 8006542:	4b39      	ldr	r3, [pc, #228]	@ (8006628 <update_velocity_control+0x410>)
 8006544:	ed93 7a00 	vldr	s14, [r3]
 8006548:	4b34      	ldr	r3, [pc, #208]	@ (800661c <update_velocity_control+0x404>)
 800654a:	edd3 7a00 	vldr	s15, [r3]
 800654e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006552:	ee17 0a90 	vmov	r0, s15
 8006556:	f7f9 ffc3 	bl	80004e0 <__aeabi_f2d>
 800655a:	a329      	add	r3, pc, #164	@ (adr r3, 8006600 <update_velocity_control+0x3e8>)
 800655c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006560:	f7fa f816 	bl	8000590 <__aeabi_dmul>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4640      	mov	r0, r8
 800656a:	4649      	mov	r1, r9
 800656c:	f7f9 fe5a 	bl	8000224 <__adddf3>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4610      	mov	r0, r2
 8006576:	4619      	mov	r1, r3
 8006578:	f7fa faec 	bl	8000b54 <__aeabi_d2f>
 800657c:	4603      	mov	r3, r0
 800657e:	4a22      	ldr	r2, [pc, #136]	@ (8006608 <update_velocity_control+0x3f0>)
 8006580:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006582:	4b21      	ldr	r3, [pc, #132]	@ (8006608 <update_velocity_control+0x3f0>)
 8006584:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006588:	4b28      	ldr	r3, [pc, #160]	@ (800662c <update_velocity_control+0x414>)
 800658a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800658e:	4610      	mov	r0, r2
 8006590:	4619      	mov	r1, r3
 8006592:	f7fa fa97 	bl	8000ac4 <__aeabi_d2iz>
 8006596:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006598:	4b24      	ldr	r3, [pc, #144]	@ (800662c <update_velocity_control+0x414>)
 800659a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800659e:	4614      	mov	r4, r2
 80065a0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80065a4:	4620      	mov	r0, r4
 80065a6:	4629      	mov	r1, r5
 80065a8:	f7fa fa8c 	bl	8000ac4 <__aeabi_d2iz>
 80065ac:	4603      	mov	r3, r0
 80065ae:	4619      	mov	r1, r3
 80065b0:	4630      	mov	r0, r6
 80065b2:	eeb0 0a48 	vmov.f32	s0, s16
 80065b6:	f7fa fdcd 	bl	8001154 <PWM_Satuation>
 80065ba:	ee07 0a90 	vmov	s15, r0
 80065be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065c2:	4b11      	ldr	r3, [pc, #68]	@ (8006608 <update_velocity_control+0x3f0>)
 80065c4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 80065c8:	4b19      	ldr	r3, [pc, #100]	@ (8006630 <update_velocity_control+0x418>)
 80065ca:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80065ce:	eef0 0a67 	vmov.f32	s1, s15
 80065d2:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8006634 <update_velocity_control+0x41c>
 80065d6:	4818      	ldr	r0, [pc, #96]	@ (8006638 <update_velocity_control+0x420>)
 80065d8:	f7fa fef6 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 80065dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006608 <update_velocity_control+0x3f0>)
 80065de:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80065e2:	eef0 0a67 	vmov.f32	s1, s15
 80065e6:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8006634 <update_velocity_control+0x41c>
 80065ea:	4814      	ldr	r0, [pc, #80]	@ (800663c <update_velocity_control+0x424>)
 80065ec:	f7fa feec 	bl	80013c8 <MDXX_set_range>
}
 80065f0:	bf00      	nop
 80065f2:	370c      	adds	r7, #12
 80065f4:	46bd      	mov	sp, r7
 80065f6:	ecbd 8b02 	vpop	{d8}
 80065fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fe:	bf00      	nop
 8006600:	47ae147b 	.word	0x47ae147b
 8006604:	3f847ae1 	.word	0x3f847ae1
 8006608:	200002c4 	.word	0x200002c4
 800660c:	200004f0 	.word	0x200004f0
 8006610:	20000494 	.word	0x20000494
 8006614:	447a0000 	.word	0x447a0000
 8006618:	20000624 	.word	0x20000624
 800661c:	200003f4 	.word	0x200003f4
 8006620:	3f4ccccd 	.word	0x3f4ccccd
 8006624:	3e4ccccd 	.word	0x3e4ccccd
 8006628:	200003f8 	.word	0x200003f8
 800662c:	20000000 	.word	0x20000000
 8006630:	20000280 	.word	0x20000280
 8006634:	44fa0000 	.word	0x44fa0000
 8006638:	200003fc 	.word	0x200003fc
 800663c:	20000448 	.word	0x20000448

08006640 <update_control_loops>:

void update_control_loops(void) {
 8006640:	b598      	push	{r3, r4, r7, lr}
 8006642:	ed2d 8b02 	vpush	{d8}
 8006646:	af00      	add	r7, sp, #0
    normalized_position = normalize_angle(revolute_encoder.rads);
 8006648:	4b96      	ldr	r3, [pc, #600]	@ (80068a4 <update_control_loops+0x264>)
 800664a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800664e:	eeb0 0a67 	vmov.f32	s0, s15
 8006652:	f7ff fafd 	bl	8005c50 <normalize_angle>
 8006656:	eef0 7a40 	vmov.f32	s15, s0
 800665a:	4b93      	ldr	r3, [pc, #588]	@ (80068a8 <update_control_loops+0x268>)
 800665c:	edc3 7a00 	vstr	s15, [r3]

    if (is_emergency_active()) {
 8006660:	f000 fba2 	bl	8006da8 <is_emergency_active>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d015      	beq.n	8006696 <update_control_loops+0x56>
        emergency_stop_all_motors();
 800666a:	f000 fad5 	bl	8006c18 <emergency_stop_all_motors>
        prismatic_axis.mm = prismatic_encoder.mm;
 800666e:	4b8f      	ldr	r3, [pc, #572]	@ (80068ac <update_control_loops+0x26c>)
 8006670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006672:	4a8f      	ldr	r2, [pc, #572]	@ (80068b0 <update_control_loops+0x270>)
 8006674:	6393      	str	r3, [r2, #56]	@ 0x38
        revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006676:	4b8c      	ldr	r3, [pc, #560]	@ (80068a8 <update_control_loops+0x268>)
 8006678:	edd3 7a00 	vldr	s15, [r3]
 800667c:	220e      	movs	r2, #14
 800667e:	210f      	movs	r1, #15
 8006680:	eeb0 0a67 	vmov.f32	s0, s15
 8006684:	488b      	ldr	r0, [pc, #556]	@ (80068b4 <update_control_loops+0x274>)
 8006686:	f7fd fff7 	bl	8004678 <UnitConverter_angle>
 800668a:	eef0 7a40 	vmov.f32	s15, s0
 800668e:	4b8a      	ldr	r3, [pc, #552]	@ (80068b8 <update_control_loops+0x278>)
 8006690:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                normalized_position, UNIT_RADIAN, UNIT_DEGREE);
        return;
 8006694:	e1ac      	b.n	80069f0 <update_control_loops+0x3b0>
    }

    // Handle all homing states except HOMING_REV_TO_ZERO_DEG with direct motor control
    if (homing_active && homing_state != HOMING_REV_TO_ZERO_DEG) {
 8006696:	4b89      	ldr	r3, [pc, #548]	@ (80068bc <update_control_loops+0x27c>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d02d      	beq.n	80066fa <update_control_loops+0xba>
 800669e:	4b88      	ldr	r3, [pc, #544]	@ (80068c0 <update_control_loops+0x280>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b07      	cmp	r3, #7
 80066a4:	d029      	beq.n	80066fa <update_control_loops+0xba>
        update_homing_sequence();
 80066a6:	f7fe ff17 	bl	80054d8 <update_homing_sequence>
        MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 80066aa:	4b81      	ldr	r3, [pc, #516]	@ (80068b0 <update_control_loops+0x270>)
 80066ac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80066b0:	eef0 0a67 	vmov.f32	s1, s15
 80066b4:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 80068c4 <update_control_loops+0x284>
 80066b8:	4883      	ldr	r0, [pc, #524]	@ (80068c8 <update_control_loops+0x288>)
 80066ba:	f7fa fe85 	bl	80013c8 <MDXX_set_range>
        MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 80066be:	4b7e      	ldr	r3, [pc, #504]	@ (80068b8 <update_control_loops+0x278>)
 80066c0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80066c4:	eef0 0a67 	vmov.f32	s1, s15
 80066c8:	ed9f 0a7e 	vldr	s0, [pc, #504]	@ 80068c4 <update_control_loops+0x284>
 80066cc:	487f      	ldr	r0, [pc, #508]	@ (80068cc <update_control_loops+0x28c>)
 80066ce:	f7fa fe7b 	bl	80013c8 <MDXX_set_range>
        prismatic_axis.mm = prismatic_encoder.mm;
 80066d2:	4b76      	ldr	r3, [pc, #472]	@ (80068ac <update_control_loops+0x26c>)
 80066d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066d6:	4a76      	ldr	r2, [pc, #472]	@ (80068b0 <update_control_loops+0x270>)
 80066d8:	6393      	str	r3, [r2, #56]	@ 0x38
        revolute_axis.deg = UnitConverter_angle(&converter_system,
 80066da:	4b73      	ldr	r3, [pc, #460]	@ (80068a8 <update_control_loops+0x268>)
 80066dc:	edd3 7a00 	vldr	s15, [r3]
 80066e0:	220e      	movs	r2, #14
 80066e2:	210f      	movs	r1, #15
 80066e4:	eeb0 0a67 	vmov.f32	s0, s15
 80066e8:	4872      	ldr	r0, [pc, #456]	@ (80068b4 <update_control_loops+0x274>)
 80066ea:	f7fd ffc5 	bl	8004678 <UnitConverter_angle>
 80066ee:	eef0 7a40 	vmov.f32	s15, s0
 80066f2:	4b71      	ldr	r3, [pc, #452]	@ (80068b8 <update_control_loops+0x278>)
 80066f4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                normalized_position, UNIT_RADIAN, UNIT_DEGREE);
        return;
 80066f8:	e17a      	b.n	80069f0 <update_control_loops+0x3b0>
    }

    // Handle HOMING_REV_TO_ZERO_DEG: use trajectory system + check completion
    if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 80066fa:	4b70      	ldr	r3, [pc, #448]	@ (80068bc <update_control_loops+0x27c>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d01d      	beq.n	800673e <update_control_loops+0xfe>
 8006702:	4b6f      	ldr	r3, [pc, #444]	@ (80068c0 <update_control_loops+0x280>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	2b07      	cmp	r3, #7
 8006708:	d119      	bne.n	800673e <update_control_loops+0xfe>
        // First, update the homing sequence to handle trajectory start/completion
        update_homing_sequence();
 800670a:	f7fe fee5 	bl	80054d8 <update_homing_sequence>

        // If still in HOMING_REV_TO_ZERO_DEG after update, continue with trajectory control
        if (homing_state == HOMING_REV_TO_ZERO_DEG) {
 800670e:	4b6c      	ldr	r3, [pc, #432]	@ (80068c0 <update_control_loops+0x280>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b07      	cmp	r3, #7
 8006714:	d013      	beq.n	800673e <update_control_loops+0xfe>
            // Let the trajectory system handle the motion
            // Fall through to the switch statement below
        } else {
            // Homing sequence advanced to next state, return
            prismatic_axis.mm = prismatic_encoder.mm;
 8006716:	4b65      	ldr	r3, [pc, #404]	@ (80068ac <update_control_loops+0x26c>)
 8006718:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800671a:	4a65      	ldr	r2, [pc, #404]	@ (80068b0 <update_control_loops+0x270>)
 800671c:	6393      	str	r3, [r2, #56]	@ 0x38
            revolute_axis.deg = UnitConverter_angle(&converter_system,
 800671e:	4b62      	ldr	r3, [pc, #392]	@ (80068a8 <update_control_loops+0x268>)
 8006720:	edd3 7a00 	vldr	s15, [r3]
 8006724:	220e      	movs	r2, #14
 8006726:	210f      	movs	r1, #15
 8006728:	eeb0 0a67 	vmov.f32	s0, s15
 800672c:	4861      	ldr	r0, [pc, #388]	@ (80068b4 <update_control_loops+0x274>)
 800672e:	f7fd ffa3 	bl	8004678 <UnitConverter_angle>
 8006732:	eef0 7a40 	vmov.f32	s15, s0
 8006736:	4b60      	ldr	r3, [pc, #384]	@ (80068b8 <update_control_loops+0x278>)
 8006738:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                    normalized_position, UNIT_RADIAN, UNIT_DEGREE);
            return;
 800673c:	e158      	b.n	80069f0 <update_control_loops+0x3b0>
        }
    }

    // Motion sequence handling
    switch (motion_sequence_state) {
 800673e:	4b64      	ldr	r3, [pc, #400]	@ (80068d0 <update_control_loops+0x290>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	3b01      	subs	r3, #1
 8006744:	2b04      	cmp	r3, #4
 8006746:	f200 8137 	bhi.w	80069b8 <update_control_loops+0x378>
 800674a:	a201      	add	r2, pc, #4	@ (adr r2, 8006750 <update_control_loops+0x110>)
 800674c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006750:	08006765 	.word	0x08006765
 8006754:	080067c1 	.word	0x080067c1
 8006758:	080068ed 	.word	0x080068ed
 800675c:	08006993 	.word	0x08006993
 8006760:	080069b1 	.word	0x080069b1
    case MOTION_PEN_UP_DELAY:
        if (++motion_delay_timer >= 1500) {
 8006764:	4b5b      	ldr	r3, [pc, #364]	@ (80068d4 <update_control_loops+0x294>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3301      	adds	r3, #1
 800676a:	4a5a      	ldr	r2, [pc, #360]	@ (80068d4 <update_control_loops+0x294>)
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006772:	4293      	cmp	r3, r2
 8006774:	f240 8122 	bls.w	80069bc <update_control_loops+0x37c>
            // Check if we're in HOMING_REV_TO_ZERO_DEG mode
            if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006778:	4b50      	ldr	r3, [pc, #320]	@ (80068bc <update_control_loops+0x27c>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d017      	beq.n	80067b0 <update_control_loops+0x170>
 8006780:	4b4f      	ldr	r3, [pc, #316]	@ (80068c0 <update_control_loops+0x280>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b07      	cmp	r3, #7
 8006786:	d113      	bne.n	80067b0 <update_control_loops+0x170>
                // Skip prismatic phase entirely - go directly to revolute motion
                revolute_axis.trajectory_active = true;
 8006788:	4b4b      	ldr	r3, [pc, #300]	@ (80068b8 <update_control_loops+0x278>)
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8006790:	4b4f      	ldr	r3, [pc, #316]	@ (80068d0 <update_control_loops+0x290>)
 8006792:	2203      	movs	r2, #3
 8006794:	701a      	strb	r2, [r3, #0]

                // Ensure prismatic stays stationary
                prismatic_axis.trajectory_active = false;
 8006796:	4b46      	ldr	r3, [pc, #280]	@ (80068b0 <update_control_loops+0x270>)
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                prismatic_axis.position = prismatic_encoder.mm;
 800679e:	4b43      	ldr	r3, [pc, #268]	@ (80068ac <update_control_loops+0x26c>)
 80067a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a2:	4a43      	ldr	r2, [pc, #268]	@ (80068b0 <update_control_loops+0x270>)
 80067a4:	6013      	str	r3, [r2, #0]
                prismatic_axis.velocity = 0.0f;
 80067a6:	4b42      	ldr	r3, [pc, #264]	@ (80068b0 <update_control_loops+0x270>)
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	605a      	str	r2, [r3, #4]
                // Normal trajectory - activate prismatic first
                prismatic_axis.trajectory_active = true;
                motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
            }
        }
        break;
 80067ae:	e105      	b.n	80069bc <update_control_loops+0x37c>
                prismatic_axis.trajectory_active = true;
 80067b0:	4b3f      	ldr	r3, [pc, #252]	@ (80068b0 <update_control_loops+0x270>)
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 80067b8:	4b45      	ldr	r3, [pc, #276]	@ (80068d0 <update_control_loops+0x290>)
 80067ba:	2202      	movs	r2, #2
 80067bc:	701a      	strb	r2, [r3, #0]
        break;
 80067be:	e0fd      	b.n	80069bc <update_control_loops+0x37c>

    case MOTION_PRISMATIC_ACTIVE:
        if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 80067c0:	4b3b      	ldr	r3, [pc, #236]	@ (80068b0 <update_control_loops+0x270>)
 80067c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f000 80fa 	beq.w	80069c0 <update_control_loops+0x380>
 80067cc:	4b42      	ldr	r3, [pc, #264]	@ (80068d8 <update_control_loops+0x298>)
 80067ce:	7c1b      	ldrb	r3, [r3, #16]
 80067d0:	f083 0301 	eor.w	r3, r3, #1
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	f000 80f2 	beq.w	80069c0 <update_control_loops+0x380>
            Trapezoidal_Evaluated(&prisGen, &prisEva,
 80067dc:	4b34      	ldr	r3, [pc, #208]	@ (80068b0 <update_control_loops+0x270>)
 80067de:	ed93 8a03 	vldr	s16, [r3, #12]
 80067e2:	4b33      	ldr	r3, [pc, #204]	@ (80068b0 <update_control_loops+0x270>)
 80067e4:	edd3 8a04 	vldr	s17, [r3, #16]
                    prismatic_axis.initial_pos, prismatic_axis.target_pos,
                    ZGX45RGG_400RPM_Constant.traject_sd_max,
 80067e8:	4b3c      	ldr	r3, [pc, #240]	@ (80068dc <update_control_loops+0x29c>)
 80067ea:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
            Trapezoidal_Evaluated(&prisGen, &prisEva,
 80067ee:	4610      	mov	r0, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	f7fa f9af 	bl	8000b54 <__aeabi_d2f>
 80067f6:	4604      	mov	r4, r0
                    ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80067f8:	4b38      	ldr	r3, [pc, #224]	@ (80068dc <update_control_loops+0x29c>)
 80067fa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
            Trapezoidal_Evaluated(&prisGen, &prisEva,
 80067fe:	4610      	mov	r0, r2
 8006800:	4619      	mov	r1, r3
 8006802:	f7fa f9a7 	bl	8000b54 <__aeabi_d2f>
 8006806:	4603      	mov	r3, r0
 8006808:	ee01 3a90 	vmov	s3, r3
 800680c:	ee01 4a10 	vmov	s2, r4
 8006810:	eef0 0a68 	vmov.f32	s1, s17
 8006814:	eeb0 0a48 	vmov.f32	s0, s16
 8006818:	492f      	ldr	r1, [pc, #188]	@ (80068d8 <update_control_loops+0x298>)
 800681a:	4831      	ldr	r0, [pc, #196]	@ (80068e0 <update_control_loops+0x2a0>)
 800681c:	f7fd fb94 	bl	8003f48 <Trapezoidal_Evaluated>

            prismatic_axis.position = prisEva.setposition;
 8006820:	4b2d      	ldr	r3, [pc, #180]	@ (80068d8 <update_control_loops+0x298>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a22      	ldr	r2, [pc, #136]	@ (80068b0 <update_control_loops+0x270>)
 8006826:	6013      	str	r3, [r2, #0]
            prismatic_axis.velocity = prisEva.setvelocity;
 8006828:	4b2b      	ldr	r3, [pc, #172]	@ (80068d8 <update_control_loops+0x298>)
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	4a20      	ldr	r2, [pc, #128]	@ (80068b0 <update_control_loops+0x270>)
 800682e:	6053      	str	r3, [r2, #4]

            if (prisEva.isFinised) {
 8006830:	4b29      	ldr	r3, [pc, #164]	@ (80068d8 <update_control_loops+0x298>)
 8006832:	7c1b      	ldrb	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 80c3 	beq.w	80069c0 <update_control_loops+0x380>
                prismatic_axis.trajectory_active = false;
 800683a:	4b1d      	ldr	r3, [pc, #116]	@ (80068b0 <update_control_loops+0x270>)
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                prismatic_axis.position = prisEva.setposition;
 8006842:	4b25      	ldr	r3, [pc, #148]	@ (80068d8 <update_control_loops+0x298>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1a      	ldr	r2, [pc, #104]	@ (80068b0 <update_control_loops+0x270>)
 8006848:	6013      	str	r3, [r2, #0]
                prismatic_axis.velocity = 0.0f;
 800684a:	4b19      	ldr	r3, [pc, #100]	@ (80068b0 <update_control_loops+0x270>)
 800684c:	f04f 0200 	mov.w	r2, #0
 8006850:	605a      	str	r2, [r3, #4]

                Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006852:	4b19      	ldr	r3, [pc, #100]	@ (80068b8 <update_control_loops+0x278>)
 8006854:	ed93 8a03 	vldr	s16, [r3, #12]
 8006858:	4b17      	ldr	r3, [pc, #92]	@ (80068b8 <update_control_loops+0x278>)
 800685a:	edd3 8a04 	vldr	s17, [r3, #16]
                        revolute_axis.target_pos,
                        ZGX45RGG_150RPM_Constant.traject_qd_max,
 800685e:	4b21      	ldr	r3, [pc, #132]	@ (80068e4 <update_control_loops+0x2a4>)
 8006860:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
                Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006864:	4610      	mov	r0, r2
 8006866:	4619      	mov	r1, r3
 8006868:	f7fa f974 	bl	8000b54 <__aeabi_d2f>
 800686c:	4604      	mov	r4, r0
                        ZGX45RGG_150RPM_Constant.traject_qdd_max);
 800686e:	4b1d      	ldr	r3, [pc, #116]	@ (80068e4 <update_control_loops+0x2a4>)
 8006870:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
                Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006874:	4610      	mov	r0, r2
 8006876:	4619      	mov	r1, r3
 8006878:	f7fa f96c 	bl	8000b54 <__aeabi_d2f>
 800687c:	4603      	mov	r3, r0
 800687e:	ee01 3a90 	vmov	s3, r3
 8006882:	ee01 4a10 	vmov	s2, r4
 8006886:	eef0 0a68 	vmov.f32	s1, s17
 800688a:	eeb0 0a48 	vmov.f32	s0, s16
 800688e:	4816      	ldr	r0, [pc, #88]	@ (80068e8 <update_control_loops+0x2a8>)
 8006890:	f7fd fa98 	bl	8003dc4 <Trapezoidal_Generator>

                revolute_axis.trajectory_active = true;
 8006894:	4b08      	ldr	r3, [pc, #32]	@ (80068b8 <update_control_loops+0x278>)
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 800689c:	4b0c      	ldr	r3, [pc, #48]	@ (80068d0 <update_control_loops+0x290>)
 800689e:	2203      	movs	r2, #3
 80068a0:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 80068a2:	e08d      	b.n	80069c0 <update_control_loops+0x380>
 80068a4:	200004f0 	.word	0x200004f0
 80068a8:	2000037c 	.word	0x2000037c
 80068ac:	20000494 	.word	0x20000494
 80068b0:	20000280 	.word	0x20000280
 80068b4:	20000888 	.word	0x20000888
 80068b8:	200002c4 	.word	0x200002c4
 80068bc:	2000036b 	.word	0x2000036b
 80068c0:	2000036a 	.word	0x2000036a
 80068c4:	44fa0000 	.word	0x44fa0000
 80068c8:	200003fc 	.word	0x200003fc
 80068cc:	20000448 	.word	0x20000448
 80068d0:	20000308 	.word	0x20000308
 80068d4:	20000360 	.word	0x20000360
 80068d8:	20000334 	.word	0x20000334
 80068dc:	20000080 	.word	0x20000080
 80068e0:	2000030c 	.word	0x2000030c
 80068e4:	20000000 	.word	0x20000000
 80068e8:	20000320 	.word	0x20000320

    case MOTION_REVOLUTE_ACTIVE:
        if (revolute_axis.trajectory_active && !revEva.isFinised) {
 80068ec:	4b42      	ldr	r3, [pc, #264]	@ (80069f8 <update_control_loops+0x3b8>)
 80068ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d066      	beq.n	80069c4 <update_control_loops+0x384>
 80068f6:	4b41      	ldr	r3, [pc, #260]	@ (80069fc <update_control_loops+0x3bc>)
 80068f8:	7c1b      	ldrb	r3, [r3, #16]
 80068fa:	f083 0301 	eor.w	r3, r3, #1
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b00      	cmp	r3, #0
 8006902:	d05f      	beq.n	80069c4 <update_control_loops+0x384>
            Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006904:	4b3c      	ldr	r3, [pc, #240]	@ (80069f8 <update_control_loops+0x3b8>)
 8006906:	ed93 8a03 	vldr	s16, [r3, #12]
 800690a:	4b3b      	ldr	r3, [pc, #236]	@ (80069f8 <update_control_loops+0x3b8>)
 800690c:	edd3 8a04 	vldr	s17, [r3, #16]
                    revolute_axis.target_pos,
                    ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006910:	4b3b      	ldr	r3, [pc, #236]	@ (8006a00 <update_control_loops+0x3c0>)
 8006912:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
            Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006916:	4610      	mov	r0, r2
 8006918:	4619      	mov	r1, r3
 800691a:	f7fa f91b 	bl	8000b54 <__aeabi_d2f>
 800691e:	4604      	mov	r4, r0
                    ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8006920:	4b37      	ldr	r3, [pc, #220]	@ (8006a00 <update_control_loops+0x3c0>)
 8006922:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
            Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 8006926:	4610      	mov	r0, r2
 8006928:	4619      	mov	r1, r3
 800692a:	f7fa f913 	bl	8000b54 <__aeabi_d2f>
 800692e:	4603      	mov	r3, r0
 8006930:	ee01 3a90 	vmov	s3, r3
 8006934:	ee01 4a10 	vmov	s2, r4
 8006938:	eef0 0a68 	vmov.f32	s1, s17
 800693c:	eeb0 0a48 	vmov.f32	s0, s16
 8006940:	492e      	ldr	r1, [pc, #184]	@ (80069fc <update_control_loops+0x3bc>)
 8006942:	4830      	ldr	r0, [pc, #192]	@ (8006a04 <update_control_loops+0x3c4>)
 8006944:	f7fd fb00 	bl	8003f48 <Trapezoidal_Evaluated>

            revolute_axis.position = revEva.setposition;
 8006948:	4b2c      	ldr	r3, [pc, #176]	@ (80069fc <update_control_loops+0x3bc>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a2a      	ldr	r2, [pc, #168]	@ (80069f8 <update_control_loops+0x3b8>)
 800694e:	6013      	str	r3, [r2, #0]
            revolute_axis.velocity = revEva.setvelocity;
 8006950:	4b2a      	ldr	r3, [pc, #168]	@ (80069fc <update_control_loops+0x3bc>)
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	4a28      	ldr	r2, [pc, #160]	@ (80069f8 <update_control_loops+0x3b8>)
 8006956:	6053      	str	r3, [r2, #4]

            if (revEva.isFinised) {
 8006958:	4b28      	ldr	r3, [pc, #160]	@ (80069fc <update_control_loops+0x3bc>)
 800695a:	7c1b      	ldrb	r3, [r3, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d031      	beq.n	80069c4 <update_control_loops+0x384>
                revolute_axis.trajectory_active = false;
 8006960:	4b25      	ldr	r3, [pc, #148]	@ (80069f8 <update_control_loops+0x3b8>)
 8006962:	2200      	movs	r2, #0
 8006964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                revolute_axis.position = revEva.setposition;
 8006968:	4b24      	ldr	r3, [pc, #144]	@ (80069fc <update_control_loops+0x3bc>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a22      	ldr	r2, [pc, #136]	@ (80069f8 <update_control_loops+0x3b8>)
 800696e:	6013      	str	r3, [r2, #0]
                revolute_axis.velocity = 0.0f;
 8006970:	4b21      	ldr	r3, [pc, #132]	@ (80069f8 <update_control_loops+0x3b8>)
 8006972:	f04f 0200 	mov.w	r2, #0
 8006976:	605a      	str	r2, [r3, #4]

                PID_CONTROLLER_Reset(&revolute_position_pid);
 8006978:	4823      	ldr	r0, [pc, #140]	@ (8006a08 <update_control_loops+0x3c8>)
 800697a:	f7fa fcdf 	bl	800133c <PID_CONTROLLER_Reset>
                PID_CONTROLLER_Reset(&revolute_velocity_pid);
 800697e:	4823      	ldr	r0, [pc, #140]	@ (8006a0c <update_control_loops+0x3cc>)
 8006980:	f7fa fcdc 	bl	800133c <PID_CONTROLLER_Reset>

                motion_delay_timer = 0;
 8006984:	4b22      	ldr	r3, [pc, #136]	@ (8006a10 <update_control_loops+0x3d0>)
 8006986:	2200      	movs	r2, #0
 8006988:	601a      	str	r2, [r3, #0]
                motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 800698a:	4b22      	ldr	r3, [pc, #136]	@ (8006a14 <update_control_loops+0x3d4>)
 800698c:	2204      	movs	r2, #4
 800698e:	701a      	strb	r2, [r3, #0]
            }
        }
        break;
 8006990:	e018      	b.n	80069c4 <update_control_loops+0x384>

    case MOTION_PEN_DOWN_DELAY:
        if (++motion_delay_timer >= 1500) {
 8006992:	4b1f      	ldr	r3, [pc, #124]	@ (8006a10 <update_control_loops+0x3d0>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3301      	adds	r3, #1
 8006998:	4a1d      	ldr	r2, [pc, #116]	@ (8006a10 <update_control_loops+0x3d0>)
 800699a:	6013      	str	r3, [r2, #0]
 800699c:	f240 52db 	movw	r2, #1499	@ 0x5db
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d911      	bls.n	80069c8 <update_control_loops+0x388>
            plotter_pen_down();
 80069a4:	f002 f8d4 	bl	8008b50 <plotter_pen_down>
            motion_sequence_state = MOTION_COMPLETE;
 80069a8:	4b1a      	ldr	r3, [pc, #104]	@ (8006a14 <update_control_loops+0x3d4>)
 80069aa:	2205      	movs	r2, #5
 80069ac:	701a      	strb	r2, [r3, #0]
        }
        break;
 80069ae:	e00b      	b.n	80069c8 <update_control_loops+0x388>

    case MOTION_COMPLETE:
        motion_sequence_state = MOTION_IDLE;
 80069b0:	4b18      	ldr	r3, [pc, #96]	@ (8006a14 <update_control_loops+0x3d4>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]
        break;
 80069b6:	e008      	b.n	80069ca <update_control_loops+0x38a>

    default:
        break;
 80069b8:	bf00      	nop
 80069ba:	e006      	b.n	80069ca <update_control_loops+0x38a>
        break;
 80069bc:	bf00      	nop
 80069be:	e004      	b.n	80069ca <update_control_loops+0x38a>
        break;
 80069c0:	bf00      	nop
 80069c2:	e002      	b.n	80069ca <update_control_loops+0x38a>
        break;
 80069c4:	bf00      	nop
 80069c6:	e000      	b.n	80069ca <update_control_loops+0x38a>
        break;
 80069c8:	bf00      	nop
    }

    prismatic_axis.mm = prismatic_encoder.mm;
 80069ca:	4b13      	ldr	r3, [pc, #76]	@ (8006a18 <update_control_loops+0x3d8>)
 80069cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069ce:	4a13      	ldr	r2, [pc, #76]	@ (8006a1c <update_control_loops+0x3dc>)
 80069d0:	6393      	str	r3, [r2, #56]	@ 0x38
    revolute_axis.deg = UnitConverter_angle(&converter_system,
 80069d2:	4b13      	ldr	r3, [pc, #76]	@ (8006a20 <update_control_loops+0x3e0>)
 80069d4:	edd3 7a00 	vldr	s15, [r3]
 80069d8:	220e      	movs	r2, #14
 80069da:	210f      	movs	r1, #15
 80069dc:	eeb0 0a67 	vmov.f32	s0, s15
 80069e0:	4810      	ldr	r0, [pc, #64]	@ (8006a24 <update_control_loops+0x3e4>)
 80069e2:	f7fd fe49 	bl	8004678 <UnitConverter_angle>
 80069e6:	eef0 7a40 	vmov.f32	s15, s0
 80069ea:	4b03      	ldr	r3, [pc, #12]	@ (80069f8 <update_control_loops+0x3b8>)
 80069ec:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
            normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 80069f0:	46bd      	mov	sp, r7
 80069f2:	ecbd 8b02 	vpop	{d8}
 80069f6:	bd98      	pop	{r3, r4, r7, pc}
 80069f8:	200002c4 	.word	0x200002c4
 80069fc:	20000348 	.word	0x20000348
 8006a00:	20000000 	.word	0x20000000
 8006a04:	20000320 	.word	0x20000320
 8006a08:	2000059c 	.word	0x2000059c
 8006a0c:	200005c4 	.word	0x200005c4
 8006a10:	20000360 	.word	0x20000360
 8006a14:	20000308 	.word	0x20000308
 8006a18:	20000494 	.word	0x20000494
 8006a1c:	20000280 	.word	0x20000280
 8006a20:	2000037c 	.word	0x2000037c
 8006a24:	20000888 	.word	0x20000888

08006a28 <check_emergency_button>:

void check_emergency_button(void) {
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
	// Read current state of emergency button
	bool emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8006a2e:	2110      	movs	r1, #16
 8006a30:	480c      	ldr	r0, [pc, #48]	@ (8006a64 <check_emergency_button+0x3c>)
 8006a32:	f005 fbbd 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bf14      	ite	ne
 8006a3c:	2301      	movne	r3, #1
 8006a3e:	2300      	moveq	r3, #0
 8006a40:	71fb      	strb	r3, [r7, #7]
	// If emergency button is pressed (assuming active high)
	// Adjust the logic based on your hardware:
	// - If button is active HIGH when pressed: use == GPIO_PIN_SET
	// - If button is active LOW when pressed: use == GPIO_PIN_RESET

	if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 8006a42:	79fb      	ldrb	r3, [r7, #7]
 8006a44:	f083 0301 	eor.w	r3, r3, #1
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d005      	beq.n	8006a5a <check_emergency_button+0x32>
		// Emergency button is pressed - trigger hardware emergency
		if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 8006a4e:	4b06      	ldr	r3, [pc, #24]	@ (8006a68 <check_emergency_button+0x40>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d001      	beq.n	8006a5a <check_emergency_button+0x32>
			trigger_hardware_emergency();
 8006a56:	f000 f877 	bl	8006b48 <trigger_hardware_emergency>
	 // Auto-clear emergency when button released (NOT RECOMMENDED)
	 // clear_emergency_state();
	 }
	 }
	 */
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	48000400 	.word	0x48000400
 8006a68:	2000036c 	.word	0x2000036c

08006a6c <check_safety_conditions>:

void check_safety_conditions(void) {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 8006a70:	4b16      	ldr	r3, [pc, #88]	@ (8006acc <check_safety_conditions+0x60>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d127      	bne.n	8006ac8 <check_safety_conditions+0x5c>
 8006a78:	4b15      	ldr	r3, [pc, #84]	@ (8006ad0 <check_safety_conditions+0x64>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d123      	bne.n	8006ac8 <check_safety_conditions+0x5c>
 8006a80:	4b14      	ldr	r3, [pc, #80]	@ (8006ad4 <check_safety_conditions+0x68>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d11f      	bne.n	8006ac8 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 8006a88:	4b13      	ldr	r3, [pc, #76]	@ (8006ad8 <check_safety_conditions+0x6c>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00a      	beq.n	8006aa8 <check_safety_conditions+0x3c>
 8006a92:	4b12      	ldr	r3, [pc, #72]	@ (8006adc <check_safety_conditions+0x70>)
 8006a94:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006a98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006aa0:	d502      	bpl.n	8006aa8 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 8006aa2:	f000 f81f 	bl	8006ae4 <trigger_software_emergency>
		return;
 8006aa6:	e010      	b.n	8006aca <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8006aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ae0 <check_safety_conditions+0x74>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <check_safety_conditions+0x5e>
 8006ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8006adc <check_safety_conditions+0x70>)
 8006ab4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006ab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac0:	dd03      	ble.n	8006aca <check_safety_conditions+0x5e>
		trigger_software_emergency();
 8006ac2:	f000 f80f 	bl	8006ae4 <trigger_software_emergency>
		return;
 8006ac6:	e000      	b.n	8006aca <check_safety_conditions+0x5e>
		return;
 8006ac8:	bf00      	nop
	}
}
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000134 	.word	0x20000134
 8006ad0:	2000036c 	.word	0x2000036c
 8006ad4:	2000036b 	.word	0x2000036b
 8006ad8:	20000368 	.word	0x20000368
 8006adc:	20000280 	.word	0x20000280
 8006ae0:	20000369 	.word	0x20000369

08006ae4 <trigger_software_emergency>:

void trigger_software_emergency(void) {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 8006ae8:	4b10      	ldr	r3, [pc, #64]	@ (8006b2c <trigger_software_emergency+0x48>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d11b      	bne.n	8006b28 <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8006af0:	4b0e      	ldr	r3, [pc, #56]	@ (8006b2c <trigger_software_emergency+0x48>)
 8006af2:	2201      	movs	r2, #1
 8006af4:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 8006af6:	f000 f88f 	bl	8006c18 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 8006afa:	4b0d      	ldr	r3, [pc, #52]	@ (8006b30 <trigger_software_emergency+0x4c>)
 8006afc:	2200      	movs	r2, #0
 8006afe:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8006b00:	4b0c      	ldr	r3, [pc, #48]	@ (8006b34 <trigger_software_emergency+0x50>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8006b06:	4b0c      	ldr	r3, [pc, #48]	@ (8006b38 <trigger_software_emergency+0x54>)
 8006b08:	2200      	movs	r2, #0
 8006b0a:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8006b3c <trigger_software_emergency+0x58>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 8006b14:	4b0a      	ldr	r3, [pc, #40]	@ (8006b40 <trigger_software_emergency+0x5c>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 8006b1c:	4b09      	ldr	r3, [pc, #36]	@ (8006b44 <trigger_software_emergency+0x60>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <trigger_software_emergency+0x44>
			exit_joy_mode();
 8006b24:	f000 f9c2 	bl	8006eac <exit_joy_mode>
		}
	}
}
 8006b28:	bf00      	nop
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	2000036c 	.word	0x2000036c
 8006b30:	20000370 	.word	0x20000370
 8006b34:	20000374 	.word	0x20000374
 8006b38:	20000308 	.word	0x20000308
 8006b3c:	20000280 	.word	0x20000280
 8006b40:	200002c4 	.word	0x200002c4
 8006b44:	20000385 	.word	0x20000385

08006b48 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 8006b4c:	4b13      	ldr	r3, [pc, #76]	@ (8006b9c <trigger_hardware_emergency+0x54>)
 8006b4e:	2202      	movs	r2, #2
 8006b50:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 8006b52:	4b13      	ldr	r3, [pc, #76]	@ (8006ba0 <trigger_hardware_emergency+0x58>)
 8006b54:	2201      	movs	r2, #1
 8006b56:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 8006b58:	f000 f85e 	bl	8006c18 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 8006b5c:	4b11      	ldr	r3, [pc, #68]	@ (8006ba4 <trigger_hardware_emergency+0x5c>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006b62:	4b11      	ldr	r3, [pc, #68]	@ (8006ba8 <trigger_hardware_emergency+0x60>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 8006b68:	4b10      	ldr	r3, [pc, #64]	@ (8006bac <trigger_hardware_emergency+0x64>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 8006b6e:	4b10      	ldr	r3, [pc, #64]	@ (8006bb0 <trigger_hardware_emergency+0x68>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 8006b74:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb4 <trigger_hardware_emergency+0x6c>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8006bb8 <trigger_hardware_emergency+0x70>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006b82:	4b0e      	ldr	r3, [pc, #56]	@ (8006bbc <trigger_hardware_emergency+0x74>)
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Exit joy mode if active
	if (joy_mode_active) {
 8006b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc0 <trigger_hardware_emergency+0x78>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <trigger_hardware_emergency+0x4e>
		exit_joy_mode();
 8006b92:	f000 f98b 	bl	8006eac <exit_joy_mode>
	}
}
 8006b96:	bf00      	nop
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	2000036c 	.word	0x2000036c
 8006ba0:	20000375 	.word	0x20000375
 8006ba4:	20000370 	.word	0x20000370
 8006ba8:	20000374 	.word	0x20000374
 8006bac:	2000036b 	.word	0x2000036b
 8006bb0:	2000036a 	.word	0x2000036a
 8006bb4:	20000308 	.word	0x20000308
 8006bb8:	20000280 	.word	0x20000280
 8006bbc:	200002c4 	.word	0x200002c4
 8006bc0:	20000385 	.word	0x20000385

08006bc4 <clear_emergency_state>:

void clear_emergency_state(void) {
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 8006bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8006c00 <clear_emergency_state+0x3c>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <clear_emergency_state+0x40>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 8006bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c08 <clear_emergency_state+0x44>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8006bda:	4b0c      	ldr	r3, [pc, #48]	@ (8006c0c <clear_emergency_state+0x48>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006be0:	2200      	movs	r2, #0
 8006be2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006be6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006bea:	f005 faf9 	bl	800c1e0 <HAL_GPIO_WritePin>
	up_photo = false;
 8006bee:	4b08      	ldr	r3, [pc, #32]	@ (8006c10 <clear_emergency_state+0x4c>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 8006bf4:	4b07      	ldr	r3, [pc, #28]	@ (8006c14 <clear_emergency_state+0x50>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	701a      	strb	r2, [r3, #0]
}
 8006bfa:	bf00      	nop
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	2000036c 	.word	0x2000036c
 8006c04:	20000375 	.word	0x20000375
 8006c08:	20000370 	.word	0x20000370
 8006c0c:	20000374 	.word	0x20000374
 8006c10:	20000368 	.word	0x20000368
 8006c14:	20000369 	.word	0x20000369

08006c18 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8006c1c:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8006c7c <emergency_stop_all_motors+0x64>
 8006c20:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8006c80 <emergency_stop_all_motors+0x68>
 8006c24:	4817      	ldr	r0, [pc, #92]	@ (8006c84 <emergency_stop_all_motors+0x6c>)
 8006c26:	f7fa fbcf 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8006c2a:	eddf 0a14 	vldr	s1, [pc, #80]	@ 8006c7c <emergency_stop_all_motors+0x64>
 8006c2e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8006c80 <emergency_stop_all_motors+0x68>
 8006c32:	4815      	ldr	r0, [pc, #84]	@ (8006c88 <emergency_stop_all_motors+0x70>)
 8006c34:	f7fa fbc8 	bl	80013c8 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 8006c38:	4b14      	ldr	r3, [pc, #80]	@ (8006c8c <emergency_stop_all_motors+0x74>)
 8006c3a:	f04f 0200 	mov.w	r2, #0
 8006c3e:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8006c40:	4b13      	ldr	r3, [pc, #76]	@ (8006c90 <emergency_stop_all_motors+0x78>)
 8006c42:	f04f 0200 	mov.w	r2, #0
 8006c46:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8006c48:	4b10      	ldr	r3, [pc, #64]	@ (8006c8c <emergency_stop_all_motors+0x74>)
 8006c4a:	f04f 0200 	mov.w	r2, #0
 8006c4e:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006c50:	4b0f      	ldr	r3, [pc, #60]	@ (8006c90 <emergency_stop_all_motors+0x78>)
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	629a      	str	r2, [r3, #40]	@ 0x28

	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006c58:	480e      	ldr	r0, [pc, #56]	@ (8006c94 <emergency_stop_all_motors+0x7c>)
 8006c5a:	f7fa fb6f 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006c5e:	480e      	ldr	r0, [pc, #56]	@ (8006c98 <emergency_stop_all_motors+0x80>)
 8006c60:	f7fa fb6c 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006c64:	480d      	ldr	r0, [pc, #52]	@ (8006c9c <emergency_stop_all_motors+0x84>)
 8006c66:	f7fa fb69 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006c6a:	480d      	ldr	r0, [pc, #52]	@ (8006ca0 <emergency_stop_all_motors+0x88>)
 8006c6c:	f7fa fb66 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006c70:	480b      	ldr	r0, [pc, #44]	@ (8006ca0 <emergency_stop_all_motors+0x88>)
 8006c72:	f7fa fb63 	bl	800133c <PID_CONTROLLER_Reset>
}
 8006c76:	bf00      	nop
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	00000000 	.word	0x00000000
 8006c80:	44fa0000 	.word	0x44fa0000
 8006c84:	200003fc 	.word	0x200003fc
 8006c88:	20000448 	.word	0x20000448
 8006c8c:	20000280 	.word	0x20000280
 8006c90:	200002c4 	.word	0x200002c4
 8006c94:	2000054c 	.word	0x2000054c
 8006c98:	20000574 	.word	0x20000574
 8006c9c:	2000059c 	.word	0x2000059c
 8006ca0:	200005c4 	.word	0x200005c4

08006ca4 <update_safety_system>:

void update_safety_system(void) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 8006ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8006d94 <update_safety_system+0xf0>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d16e      	bne.n	8006d8e <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 8006cb0:	4b39      	ldr	r3, [pc, #228]	@ (8006d98 <update_safety_system+0xf4>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d11f      	bne.n	8006cf8 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006cb8:	4b38      	ldr	r3, [pc, #224]	@ (8006d9c <update_safety_system+0xf8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	4a37      	ldr	r2, [pc, #220]	@ (8006d9c <update_safety_system+0xf8>)
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	2bf9      	cmp	r3, #249	@ 0xf9
 8006cc4:	d918      	bls.n	8006cf8 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006cc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006cca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cce:	f005 fa9f 	bl	800c210 <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 8006cd2:	4b33      	ldr	r3, [pc, #204]	@ (8006da0 <update_safety_system+0xfc>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bf14      	ite	ne
 8006cdc:	2301      	movne	r3, #1
 8006cde:	2300      	moveq	r3, #0
 8006ce0:	b2db      	uxtb	r3, r3
 8006ce2:	f083 0301 	eor.w	r3, r3, #1
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	4b2c      	ldr	r3, [pc, #176]	@ (8006da0 <update_safety_system+0xfc>)
 8006cf0:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8006cf2:	4b2a      	ldr	r3, [pc, #168]	@ (8006d9c <update_safety_system+0xf8>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8006cf8:	4b27      	ldr	r3, [pc, #156]	@ (8006d98 <update_safety_system+0xf4>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d134      	bne.n	8006d6a <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8006d00:	2110      	movs	r1, #16
 8006d02:	4828      	ldr	r0, [pc, #160]	@ (8006da4 <update_safety_system+0x100>)
 8006d04:	f005 fa54 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d120      	bne.n	8006d50 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8006d0e:	4b23      	ldr	r3, [pc, #140]	@ (8006d9c <update_safety_system+0xf8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3301      	adds	r3, #1
 8006d14:	4a21      	ldr	r2, [pc, #132]	@ (8006d9c <update_safety_system+0xf8>)
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	2bf9      	cmp	r3, #249	@ 0xf9
 8006d1a:	d926      	bls.n	8006d6a <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8006d1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d24:	f005 fa74 	bl	800c210 <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8006d28:	4b1d      	ldr	r3, [pc, #116]	@ (8006da0 <update_safety_system+0xfc>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	bf14      	ite	ne
 8006d32:	2301      	movne	r3, #1
 8006d34:	2300      	moveq	r3, #0
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	f083 0301 	eor.w	r3, r3, #1
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	4b16      	ldr	r3, [pc, #88]	@ (8006da0 <update_safety_system+0xfc>)
 8006d46:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8006d48:	4b14      	ldr	r3, [pc, #80]	@ (8006d9c <update_safety_system+0xf8>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e00c      	b.n	8006d6a <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006d50:	2200      	movs	r2, #0
 8006d52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d5a:	f005 fa41 	bl	800c1e0 <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8006d5e:	4b10      	ldr	r3, [pc, #64]	@ (8006da0 <update_safety_system+0xfc>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 8006d64:	4b0d      	ldr	r3, [pc, #52]	@ (8006d9c <update_safety_system+0xf8>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 8006d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006d98 <update_safety_system+0xf4>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10e      	bne.n	8006d90 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006d72:	2200      	movs	r2, #0
 8006d74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006d7c:	f005 fa30 	bl	800c1e0 <HAL_GPIO_WritePin>
		pilot_light_state = false;
 8006d80:	4b07      	ldr	r3, [pc, #28]	@ (8006da0 <update_safety_system+0xfc>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 8006d86:	4b05      	ldr	r3, [pc, #20]	@ (8006d9c <update_safety_system+0xf8>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e000      	b.n	8006d90 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 8006d8e:	bf00      	nop
	}
}
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	20000385 	.word	0x20000385
 8006d98:	2000036c 	.word	0x2000036c
 8006d9c:	20000370 	.word	0x20000370
 8006da0:	20000374 	.word	0x20000374
 8006da4:	48000400 	.word	0x48000400

08006da8 <is_emergency_active>:

bool is_emergency_active(void) {
 8006da8:	b480      	push	{r7}
 8006daa:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 8006dac:	4b05      	ldr	r3, [pc, #20]	@ (8006dc4 <is_emergency_active+0x1c>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bf14      	ite	ne
 8006db4:	2301      	movne	r3, #1
 8006db6:	2300      	moveq	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	2000036c 	.word	0x2000036c

08006dc8 <enter_joy_mode>:

void enter_joy_mode(void) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8006dcc:	f7ff ffec 	bl	8006da8 <is_emergency_active>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d14c      	bne.n	8006e70 <enter_joy_mode+0xa8>
 8006dd6:	4b27      	ldr	r3, [pc, #156]	@ (8006e74 <enter_joy_mode+0xac>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d148      	bne.n	8006e70 <enter_joy_mode+0xa8>
 8006dde:	4b26      	ldr	r3, [pc, #152]	@ (8006e78 <enter_joy_mode+0xb0>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d144      	bne.n	8006e70 <enter_joy_mode+0xa8>
		return;
	}

	joy_mode_active = true;
 8006de6:	4b24      	ldr	r3, [pc, #144]	@ (8006e78 <enter_joy_mode+0xb0>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 8006dec:	4b23      	ldr	r3, [pc, #140]	@ (8006e7c <enter_joy_mode+0xb4>)
 8006dee:	2201      	movs	r2, #1
 8006df0:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 8006df2:	f000 f95f 	bl	80070b4 <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8006df6:	2201      	movs	r2, #1
 8006df8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006dfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e00:	f005 f9ee 	bl	800c1e0 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 8006e04:	4b1e      	ldr	r3, [pc, #120]	@ (8006e80 <enter_joy_mode+0xb8>)
 8006e06:	2201      	movs	r2, #1
 8006e08:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8006e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8006e84 <enter_joy_mode+0xbc>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 8006e10:	4b1d      	ldr	r3, [pc, #116]	@ (8006e88 <enter_joy_mode+0xc0>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006e16:	4b1d      	ldr	r3, [pc, #116]	@ (8006e8c <enter_joy_mode+0xc4>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006e90 <enter_joy_mode+0xc8>)
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 8006e26:	4b1b      	ldr	r3, [pc, #108]	@ (8006e94 <enter_joy_mode+0xcc>)
 8006e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e2a:	4a18      	ldr	r2, [pc, #96]	@ (8006e8c <enter_joy_mode+0xc4>)
 8006e2c:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8006e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8006e98 <enter_joy_mode+0xd0>)
 8006e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e32:	4a17      	ldr	r2, [pc, #92]	@ (8006e90 <enter_joy_mode+0xc8>)
 8006e34:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 8006e36:	4b15      	ldr	r3, [pc, #84]	@ (8006e8c <enter_joy_mode+0xc4>)
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8006e3e:	4b14      	ldr	r3, [pc, #80]	@ (8006e90 <enter_joy_mode+0xc8>)
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 8006e46:	4b11      	ldr	r3, [pc, #68]	@ (8006e8c <enter_joy_mode+0xc4>)
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006e4e:	4b10      	ldr	r3, [pc, #64]	@ (8006e90 <enter_joy_mode+0xc8>)
 8006e50:	f04f 0200 	mov.w	r2, #0
 8006e54:	629a      	str	r2, [r3, #40]	@ 0x28

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006e56:	4811      	ldr	r0, [pc, #68]	@ (8006e9c <enter_joy_mode+0xd4>)
 8006e58:	f7fa fa70 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006e5c:	4810      	ldr	r0, [pc, #64]	@ (8006ea0 <enter_joy_mode+0xd8>)
 8006e5e:	f7fa fa6d 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006e62:	4810      	ldr	r0, [pc, #64]	@ (8006ea4 <enter_joy_mode+0xdc>)
 8006e64:	f7fa fa6a 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006e68:	480f      	ldr	r0, [pc, #60]	@ (8006ea8 <enter_joy_mode+0xe0>)
 8006e6a:	f7fa fa67 	bl	800133c <PID_CONTROLLER_Reset>
 8006e6e:	e000      	b.n	8006e72 <enter_joy_mode+0xaa>
		return;
 8006e70:	bf00      	nop
}
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	2000036b 	.word	0x2000036b
 8006e78:	20000385 	.word	0x20000385
 8006e7c:	20000384 	.word	0x20000384
 8006e80:	200003e0 	.word	0x200003e0
 8006e84:	200003dc 	.word	0x200003dc
 8006e88:	20000308 	.word	0x20000308
 8006e8c:	20000280 	.word	0x20000280
 8006e90:	200002c4 	.word	0x200002c4
 8006e94:	20000494 	.word	0x20000494
 8006e98:	200004f0 	.word	0x200004f0
 8006e9c:	2000054c 	.word	0x2000054c
 8006ea0:	20000574 	.word	0x20000574
 8006ea4:	2000059c 	.word	0x2000059c
 8006ea8:	200005c4 	.word	0x200005c4

08006eac <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 8006eb0:	4b31      	ldr	r3, [pc, #196]	@ (8006f78 <exit_joy_mode+0xcc>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 8006eb6:	4b31      	ldr	r3, [pc, #196]	@ (8006f7c <exit_joy_mode+0xd0>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 8006ebc:	f000 f8fa 	bl	80070b4 <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006ec6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006eca:	f005 f989 	bl	800c1e0 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 8006ece:	4b2c      	ldr	r3, [pc, #176]	@ (8006f80 <exit_joy_mode+0xd4>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8006ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8006f84 <exit_joy_mode+0xd8>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 8006eda:	4b2b      	ldr	r3, [pc, #172]	@ (8006f88 <exit_joy_mode+0xdc>)
 8006edc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ede:	4a2b      	ldr	r2, [pc, #172]	@ (8006f8c <exit_joy_mode+0xe0>)
 8006ee0:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8006ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8006f90 <exit_joy_mode+0xe4>)
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee6:	4a2b      	ldr	r2, [pc, #172]	@ (8006f94 <exit_joy_mode+0xe8>)
 8006ee8:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 8006eea:	4b28      	ldr	r3, [pc, #160]	@ (8006f8c <exit_joy_mode+0xe0>)
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8006ef2:	4b28      	ldr	r3, [pc, #160]	@ (8006f94 <exit_joy_mode+0xe8>)
 8006ef4:	f04f 0200 	mov.w	r2, #0
 8006ef8:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 8006efa:	4b24      	ldr	r3, [pc, #144]	@ (8006f8c <exit_joy_mode+0xe0>)
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 8006f02:	4b22      	ldr	r3, [pc, #136]	@ (8006f8c <exit_joy_mode+0xe0>)
 8006f04:	f04f 0200 	mov.w	r2, #0
 8006f08:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 8006f0a:	4b22      	ldr	r3, [pc, #136]	@ (8006f94 <exit_joy_mode+0xe8>)
 8006f0c:	f04f 0200 	mov.w	r2, #0
 8006f10:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006f12:	4b1f      	ldr	r3, [pc, #124]	@ (8006f90 <exit_joy_mode+0xe4>)
 8006f14:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006f18:	4b1b      	ldr	r3, [pc, #108]	@ (8006f88 <exit_joy_mode+0xdc>)
 8006f1a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006f1e:	ed9f 6a1e 	vldr	s12, [pc, #120]	@ 8006f98 <exit_joy_mode+0xec>
 8006f22:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006f26:	eef0 0a66 	vmov.f32	s1, s13
 8006f2a:	eeb0 0a47 	vmov.f32	s0, s14
 8006f2e:	481b      	ldr	r0, [pc, #108]	@ (8006f9c <exit_joy_mode+0xf0>)
 8006f30:	f7fa fbc5 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8006f34:	eef0 7a40 	vmov.f32	s15, s0
 8006f38:	4b16      	ldr	r3, [pc, #88]	@ (8006f94 <exit_joy_mode+0xe8>)
 8006f3a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Reset PID controllers
	PID_CONTROLLER_Reset(&prismatic_position_pid);
 8006f3e:	4818      	ldr	r0, [pc, #96]	@ (8006fa0 <exit_joy_mode+0xf4>)
 8006f40:	f7fa f9fc 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
 8006f44:	4817      	ldr	r0, [pc, #92]	@ (8006fa4 <exit_joy_mode+0xf8>)
 8006f46:	f7fa f9f9 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_position_pid);
 8006f4a:	4817      	ldr	r0, [pc, #92]	@ (8006fa8 <exit_joy_mode+0xfc>)
 8006f4c:	f7fa f9f6 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006f50:	4816      	ldr	r0, [pc, #88]	@ (8006fac <exit_joy_mode+0x100>)
 8006f52:	f7fa f9f3 	bl	800133c <PID_CONTROLLER_Reset>
	PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8006f56:	4815      	ldr	r0, [pc, #84]	@ (8006fac <exit_joy_mode+0x100>)
 8006f58:	f7fa f9f0 	bl	800133c <PID_CONTROLLER_Reset>

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 8006f5c:	4b14      	ldr	r3, [pc, #80]	@ (8006fb0 <exit_joy_mode+0x104>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8006f62:	4b0a      	ldr	r3, [pc, #40]	@ (8006f8c <exit_joy_mode+0xe0>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8006f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f94 <exit_joy_mode+0xe8>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
}
 8006f72:	bf00      	nop
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20000385 	.word	0x20000385
 8006f7c:	20000384 	.word	0x20000384
 8006f80:	200003e0 	.word	0x200003e0
 8006f84:	200003dc 	.word	0x200003dc
 8006f88:	20000494 	.word	0x20000494
 8006f8c:	20000280 	.word	0x20000280
 8006f90:	200004f0 	.word	0x200004f0
 8006f94:	200002c4 	.word	0x200002c4
 8006f98:	447a0000 	.word	0x447a0000
 8006f9c:	20000624 	.word	0x20000624
 8006fa0:	2000054c 	.word	0x2000054c
 8006fa4:	20000574 	.word	0x20000574
 8006fa8:	2000059c 	.word	0x2000059c
 8006fac:	200005c4 	.word	0x200005c4
 8006fb0:	20000308 	.word	0x20000308

08006fb4 <save_current_position>:

void save_current_position(void) {
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 8006fb8:	4b15      	ldr	r3, [pc, #84]	@ (8007010 <save_current_position+0x5c>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b09      	cmp	r3, #9
 8006fbe:	d822      	bhi.n	8007006 <save_current_position+0x52>
		saved_positions[saved_position_count].prismatic_pos =
 8006fc0:	4b13      	ldr	r3, [pc, #76]	@ (8007010 <save_current_position+0x5c>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	4618      	mov	r0, r3
				prismatic_encoder.mm;
 8006fc6:	4b13      	ldr	r3, [pc, #76]	@ (8007014 <save_current_position+0x60>)
 8006fc8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
		saved_positions[saved_position_count].prismatic_pos =
 8006fca:	4913      	ldr	r1, [pc, #76]	@ (8007018 <save_current_position+0x64>)
 8006fcc:	00c3      	lsls	r3, r0, #3
 8006fce:	440b      	add	r3, r1
 8006fd0:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos =
 8006fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8007010 <save_current_position+0x5c>)
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
				revolute_encoder.rads;
 8006fd8:	4b10      	ldr	r3, [pc, #64]	@ (800701c <save_current_position+0x68>)
 8006fda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
		saved_positions[saved_position_count].revolute_pos =
 8006fdc:	490e      	ldr	r1, [pc, #56]	@ (8007018 <save_current_position+0x64>)
 8006fde:	00c3      	lsls	r3, r0, #3
 8006fe0:	440b      	add	r3, r1
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	601a      	str	r2, [r3, #0]
		saved_position_count++;
 8006fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8007010 <save_current_position+0x5c>)
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	3301      	adds	r3, #1
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	4b08      	ldr	r3, [pc, #32]	@ (8007010 <save_current_position+0x5c>)
 8006ff0:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 8006ff2:	4b07      	ldr	r3, [pc, #28]	@ (8007010 <save_current_position+0x5c>)
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b09      	cmp	r3, #9
 8006ff8:	d905      	bls.n	8007006 <save_current_position+0x52>
			// All 10 positions saved, start pilot toggling
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 8006ffa:	4b09      	ldr	r3, [pc, #36]	@ (8007020 <save_current_position+0x6c>)
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007000:	4b08      	ldr	r3, [pc, #32]	@ (8007024 <save_current_position+0x70>)
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
		}
	}
}
 8007006:	bf00      	nop
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	200003d8 	.word	0x200003d8
 8007014:	20000494 	.word	0x20000494
 8007018:	20000388 	.word	0x20000388
 800701c:	200004f0 	.word	0x200004f0
 8007020:	20000384 	.word	0x20000384
 8007024:	200003dc 	.word	0x200003dc

08007028 <start_position_playback>:

void start_position_playback(void) {
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
	if (saved_position_count > 0) {
 800702e:	4b19      	ldr	r3, [pc, #100]	@ (8007094 <start_position_playback+0x6c>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d02a      	beq.n	800708c <start_position_playback+0x64>
		joy_mode_state = JOY_MODE_PLAYBACK;
 8007036:	4b18      	ldr	r3, [pc, #96]	@ (8007098 <start_position_playback+0x70>)
 8007038:	2204      	movs	r2, #4
 800703a:	701a      	strb	r2, [r3, #0]
		playback_position_index = 0;
 800703c:	4b17      	ldr	r3, [pc, #92]	@ (800709c <start_position_playback+0x74>)
 800703e:	2200      	movs	r2, #0
 8007040:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 8007042:	4b17      	ldr	r3, [pc, #92]	@ (80070a0 <start_position_playback+0x78>)
 8007044:	2200      	movs	r2, #0
 8007046:	601a      	str	r2, [r3, #0]

		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007048:	2201      	movs	r2, #1
 800704a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800704e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007052:	f005 f8c5 	bl	800c1e0 <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 8007056:	4b13      	ldr	r3, [pc, #76]	@ (80070a4 <start_position_playback+0x7c>)
 8007058:	2201      	movs	r2, #1
 800705a:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 800705c:	4b12      	ldr	r3, [pc, #72]	@ (80070a8 <start_position_playback+0x80>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 8007062:	4b11      	ldr	r3, [pc, #68]	@ (80070a8 <start_position_playback+0x80>)
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007068:	edd7 7a02 	vldr	s15, [r7, #8]
 800706c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80070ac <start_position_playback+0x84>
 8007070:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007074:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80070b0 <start_position_playback+0x88>
 8007078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800707c:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 8007080:	edd7 0a01 	vldr	s1, [r7, #4]
 8007084:	ed97 0a03 	vldr	s0, [r7, #12]
 8007088:	f7fe fecc 	bl	8005e24 <start_combined_trajectory>
	}
}
 800708c:	bf00      	nop
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	200003d8 	.word	0x200003d8
 8007098:	20000384 	.word	0x20000384
 800709c:	200003d9 	.word	0x200003d9
 80070a0:	200003e4 	.word	0x200003e4
 80070a4:	200003e0 	.word	0x200003e0
 80070a8:	20000388 	.word	0x20000388
 80070ac:	43340000 	.word	0x43340000
 80070b0:	40490fdb 	.word	0x40490fdb

080070b4 <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 80070ba:	4b19      	ldr	r3, [pc, #100]	@ (8007120 <reset_joy_mode_data+0x6c>)
 80070bc:	2200      	movs	r2, #0
 80070be:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 80070c0:	4b18      	ldr	r3, [pc, #96]	@ (8007124 <reset_joy_mode_data+0x70>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 80070c6:	2300      	movs	r3, #0
 80070c8:	607b      	str	r3, [r7, #4]
 80070ca:	e011      	b.n	80070f0 <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 80070cc:	4a16      	ldr	r2, [pc, #88]	@ (8007128 <reset_joy_mode_data+0x74>)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	4413      	add	r3, r2
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 80070da:	4a13      	ldr	r2, [pc, #76]	@ (8007128 <reset_joy_mode_data+0x74>)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	4413      	add	r3, r2
 80070e2:	3304      	adds	r3, #4
 80070e4:	f04f 0200 	mov.w	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	3301      	adds	r3, #1
 80070ee:	607b      	str	r3, [r7, #4]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b09      	cmp	r3, #9
 80070f4:	ddea      	ble.n	80070cc <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 80070f6:	4b0d      	ldr	r3, [pc, #52]	@ (800712c <reset_joy_mode_data+0x78>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 80070fc:	4b0c      	ldr	r3, [pc, #48]	@ (8007130 <reset_joy_mode_data+0x7c>)
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 8007102:	4b0c      	ldr	r3, [pc, #48]	@ (8007134 <reset_joy_mode_data+0x80>)
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 8007108:	4b0b      	ldr	r3, [pc, #44]	@ (8007138 <reset_joy_mode_data+0x84>)
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 800710e:	4b0b      	ldr	r3, [pc, #44]	@ (800713c <reset_joy_mode_data+0x88>)
 8007110:	2200      	movs	r2, #0
 8007112:	701a      	strb	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	370c      	adds	r7, #12
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr
 8007120:	200003d8 	.word	0x200003d8
 8007124:	200003d9 	.word	0x200003d9
 8007128:	20000388 	.word	0x20000388
 800712c:	200003dc 	.word	0x200003dc
 8007130:	200003e0 	.word	0x200003e0
 8007134:	200003e4 	.word	0x200003e4
 8007138:	200003e8 	.word	0x200003e8
 800713c:	200003e9 	.word	0x200003e9

08007140 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 8007140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007144:	ed2d 8b02 	vpush	{d8}
 8007148:	b091      	sub	sp, #68	@ 0x44
 800714a:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 800714c:	2101      	movs	r1, #1
 800714e:	48a2      	ldr	r0, [pc, #648]	@ (80073d8 <update_joy_mode_velocity_control+0x298>)
 8007150:	f005 f82e 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	bf14      	ite	ne
 800715a:	2301      	movne	r3, #1
 800715c:	2300      	moveq	r3, #0
 800715e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
			UPPER_PHOTO_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8007162:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007166:	489c      	ldr	r0, [pc, #624]	@ (80073d8 <update_joy_mode_velocity_control+0x298>)
 8007168:	f005 f822 	bl	800c1b0 <HAL_GPIO_ReadPin>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	bf14      	ite	ne
 8007172:	2301      	movne	r3, #1
 8007174:	2300      	moveq	r3, #0
 8007176:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
			LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 800717a:	f04f 0300 	mov.w	r3, #0
 800717e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	bool pris_moving = false;
 8007180:	2300      	movs	r3, #0
 8007182:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007186:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00d      	beq.n	80071aa <update_joy_mode_velocity_control+0x6a>
 800718e:	4b93      	ldr	r3, [pc, #588]	@ (80073dc <update_joy_mode_velocity_control+0x29c>)
 8007190:	edd3 7a00 	vldr	s15, [r3]
 8007194:	ed9f 7a92 	vldr	s14, [pc, #584]	@ 80073e0 <update_joy_mode_velocity_control+0x2a0>
 8007198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800719c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a0:	dd03      	ble.n	80071aa <update_joy_mode_velocity_control+0x6a>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 80071a2:	f04f 0300 	mov.w	r3, #0
 80071a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071a8:	e04b      	b.n	8007242 <update_joy_mode_velocity_control+0x102>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 80071aa:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00d      	beq.n	80071ce <update_joy_mode_velocity_control+0x8e>
 80071b2:	4b8a      	ldr	r3, [pc, #552]	@ (80073dc <update_joy_mode_velocity_control+0x29c>)
 80071b4:	edd3 7a00 	vldr	s15, [r3]
 80071b8:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 80073e4 <update_joy_mode_velocity_control+0x2a4>
 80071bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071c4:	d503      	bpl.n	80071ce <update_joy_mode_velocity_control+0x8e>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 80071c6:	f04f 0300 	mov.w	r3, #0
 80071ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071cc:	e039      	b.n	8007242 <update_joy_mode_velocity_control+0x102>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 80071ce:	4b83      	ldr	r3, [pc, #524]	@ (80073dc <update_joy_mode_velocity_control+0x29c>)
 80071d0:	edd3 7a00 	vldr	s15, [r3]
 80071d4:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 80073e4 <update_joy_mode_velocity_control+0x2a4>
 80071d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e0:	d50f      	bpl.n	8007202 <update_joy_mode_velocity_control+0xc2>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 80071e2:	4b81      	ldr	r3, [pc, #516]	@ (80073e8 <update_joy_mode_velocity_control+0x2a8>)
 80071e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = true;
 80071e6:	2301      	movs	r3, #1
 80071e8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 80071ec:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80071f0:	f083 0301 	eor.w	r3, r3, #1
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d023      	beq.n	8007242 <update_joy_mode_velocity_control+0x102>
			up_photo = false;
 80071fa:	4a7c      	ldr	r2, [pc, #496]	@ (80073ec <update_joy_mode_velocity_control+0x2ac>)
 80071fc:	2300      	movs	r3, #0
 80071fe:	7013      	strb	r3, [r2, #0]
 8007200:	e01f      	b.n	8007242 <update_joy_mode_velocity_control+0x102>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007202:	4b76      	ldr	r3, [pc, #472]	@ (80073dc <update_joy_mode_velocity_control+0x29c>)
 8007204:	edd3 7a00 	vldr	s15, [r3]
 8007208:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80073e0 <update_joy_mode_velocity_control+0x2a0>
 800720c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007214:	dd0f      	ble.n	8007236 <update_joy_mode_velocity_control+0xf6>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007216:	4b76      	ldr	r3, [pc, #472]	@ (80073f0 <update_joy_mode_velocity_control+0x2b0>)
 8007218:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = true;
 800721a:	2301      	movs	r3, #1
 800721c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 8007220:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007224:	f083 0301 	eor.w	r3, r3, #1
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d009      	beq.n	8007242 <update_joy_mode_velocity_control+0x102>
			low_photo = false;
 800722e:	4a71      	ldr	r2, [pc, #452]	@ (80073f4 <update_joy_mode_velocity_control+0x2b4>)
 8007230:	2300      	movs	r3, #0
 8007232:	7013      	strb	r3, [r2, #0]
 8007234:	e005      	b.n	8007242 <update_joy_mode_velocity_control+0x102>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 8007236:	f04f 0300 	mov.w	r3, #0
 800723a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		pris_moving = false;
 800723c:	2300      	movs	r3, #0
 800723e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 8007242:	f04f 0300 	mov.w	r3, #0
 8007246:	637b      	str	r3, [r7, #52]	@ 0x34
	bool rev_moving = false;
 8007248:	2300      	movs	r3, #0
 800724a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 800724e:	4b6a      	ldr	r3, [pc, #424]	@ (80073f8 <update_joy_mode_velocity_control+0x2b8>)
 8007250:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007254:	220e      	movs	r2, #14
 8007256:	210f      	movs	r1, #15
 8007258:	eeb0 0a67 	vmov.f32	s0, s15
 800725c:	4867      	ldr	r0, [pc, #412]	@ (80073fc <update_joy_mode_velocity_control+0x2bc>)
 800725e:	f7fd fa0b 	bl	8004678 <UnitConverter_angle>
 8007262:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 8007266:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800726a:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8007400 <update_joy_mode_velocity_control+0x2c0>
 800726e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007276:	dd09      	ble.n	800728c <update_joy_mode_velocity_control+0x14c>
 8007278:	4b62      	ldr	r3, [pc, #392]	@ (8007404 <update_joy_mode_velocity_control+0x2c4>)
 800727a:	edd3 7a00 	vldr	s15, [r3]
 800727e:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80073e0 <update_joy_mode_velocity_control+0x2a0>
 8007282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800728a:	dc12      	bgt.n	80072b2 <update_joy_mode_velocity_control+0x172>
			|| (revolute_deg < -175.0f
 800728c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007290:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8007408 <update_joy_mode_velocity_control+0x2c8>
 8007294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800729c:	d510      	bpl.n	80072c0 <update_joy_mode_velocity_control+0x180>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 800729e:	4b59      	ldr	r3, [pc, #356]	@ (8007404 <update_joy_mode_velocity_control+0x2c4>)
 80072a0:	edd3 7a00 	vldr	s15, [r3]
 80072a4:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80073e4 <update_joy_mode_velocity_control+0x2a4>
 80072a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072b0:	d506      	bpl.n	80072c0 <update_joy_mode_velocity_control+0x180>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = false;
 80072b8:	2300      	movs	r3, #0
 80072ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80072be:	e025      	b.n	800730c <update_joy_mode_velocity_control+0x1cc>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 80072c0:	4b50      	ldr	r3, [pc, #320]	@ (8007404 <update_joy_mode_velocity_control+0x2c4>)
 80072c2:	edd3 7a00 	vldr	s15, [r3]
 80072c6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80073e0 <update_joy_mode_velocity_control+0x2a0>
 80072ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d2:	dd05      	ble.n	80072e0 <update_joy_mode_velocity_control+0x1a0>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 80072d4:	4b4d      	ldr	r3, [pc, #308]	@ (800740c <update_joy_mode_velocity_control+0x2cc>)
 80072d6:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = true;
 80072d8:	2301      	movs	r3, #1
 80072da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80072de:	e015      	b.n	800730c <update_joy_mode_velocity_control+0x1cc>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 80072e0:	4b48      	ldr	r3, [pc, #288]	@ (8007404 <update_joy_mode_velocity_control+0x2c4>)
 80072e2:	edd3 7a00 	vldr	s15, [r3]
 80072e6:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80073e4 <update_joy_mode_velocity_control+0x2a4>
 80072ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072f2:	d505      	bpl.n	8007300 <update_joy_mode_velocity_control+0x1c0>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 80072f4:	4b46      	ldr	r3, [pc, #280]	@ (8007410 <update_joy_mode_velocity_control+0x2d0>)
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = true;
 80072f8:	2301      	movs	r3, #1
 80072fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80072fe:	e005      	b.n	800730c <update_joy_mode_velocity_control+0x1cc>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	637b      	str	r3, [r7, #52]	@ 0x34
		rev_moving = false;
 8007306:	2300      	movs	r3, #0
 8007308:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	}

	/* PRISMATIC AXIS CONTROL */
	if (pris_moving) {
 800730c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 808f 	beq.w	8007434 <update_joy_mode_velocity_control+0x2f4>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 8007316:	4b3f      	ldr	r3, [pc, #252]	@ (8007414 <update_joy_mode_velocity_control+0x2d4>)
 8007318:	edd3 7a07 	vldr	s15, [r3, #28]
 800731c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007320:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 8007324:	4b3b      	ldr	r3, [pc, #236]	@ (8007414 <update_joy_mode_velocity_control+0x2d4>)
 8007326:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 800732a:	4b3a      	ldr	r3, [pc, #232]	@ (8007414 <update_joy_mode_velocity_control+0x2d4>)
 800732c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007330:	eeb0 0a67 	vmov.f32	s0, s15
 8007334:	4838      	ldr	r0, [pc, #224]	@ (8007418 <update_joy_mode_velocity_control+0x2d8>)
 8007336:	f7f9 ff6f 	bl	8001218 <PID_CONTROLLER_Compute>
 800733a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 800733e:	4b37      	ldr	r3, [pc, #220]	@ (800741c <update_joy_mode_velocity_control+0x2dc>)
 8007340:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007344:	4610      	mov	r0, r2
 8007346:	4619      	mov	r1, r3
 8007348:	f7f9 fbbc 	bl	8000ac4 <__aeabi_d2iz>
 800734c:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 800734e:	4b33      	ldr	r3, [pc, #204]	@ (800741c <update_joy_mode_velocity_control+0x2dc>)
 8007350:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007354:	4690      	mov	r8, r2
 8007356:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 800735a:	4640      	mov	r0, r8
 800735c:	4649      	mov	r1, r9
 800735e:	f7f9 fbb1 	bl	8000ac4 <__aeabi_d2iz>
 8007362:	4603      	mov	r3, r0
 8007364:	4619      	mov	r1, r3
 8007366:	4620      	mov	r0, r4
 8007368:	eeb0 0a48 	vmov.f32	s0, s16
 800736c:	f7f9 fef2 	bl	8001154 <PWM_Satuation>
 8007370:	ee07 0a90 	vmov	s15, r0
 8007374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007378:	4b26      	ldr	r3, [pc, #152]	@ (8007414 <update_joy_mode_velocity_control+0x2d4>)
 800737a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800737e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8007382:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8007420 <update_joy_mode_velocity_control+0x2e0>
 8007386:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800738a:	eeb0 0a47 	vmov.f32	s0, s14
 800738e:	4825      	ldr	r0, [pc, #148]	@ (8007424 <update_joy_mode_velocity_control+0x2e4>)
 8007390:	f7fa fa80 	bl	8001894 <PRISMATIC_MOTOR_FFD_Compute>
 8007394:	eef0 7a40 	vmov.f32	s15, s0
 8007398:	4b1e      	ldr	r3, [pc, #120]	@ (8007414 <update_joy_mode_velocity_control+0x2d4>)
 800739a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 800739e:	4b16      	ldr	r3, [pc, #88]	@ (80073f8 <update_joy_mode_velocity_control+0x2b8>)
 80073a0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 80073a4:	4b20      	ldr	r3, [pc, #128]	@ (8007428 <update_joy_mode_velocity_control+0x2e8>)
 80073a6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80073aa:	ed9f 6a1d 	vldr	s12, [pc, #116]	@ 8007420 <update_joy_mode_velocity_control+0x2e0>
 80073ae:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80073b2:	eeb0 1a66 	vmov.f32	s2, s13
 80073b6:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800742c <update_joy_mode_velocity_control+0x2ec>
 80073ba:	eeb0 0a47 	vmov.f32	s0, s14
 80073be:	481c      	ldr	r0, [pc, #112]	@ (8007430 <update_joy_mode_velocity_control+0x2f0>)
 80073c0:	f7fa fafb 	bl	80019ba <PRISMATIC_MOTOR_DFD_Compute>
 80073c4:	eef0 7a40 	vmov.f32	s15, s0
 80073c8:	4b12      	ldr	r3, [pc, #72]	@ (8007414 <update_joy_mode_velocity_control+0x2d4>)
 80073ca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Update target position for when we stop moving
		prismatic_axis.position = prismatic_encoder.mm;
 80073ce:	4b16      	ldr	r3, [pc, #88]	@ (8007428 <update_joy_mode_velocity_control+0x2e8>)
 80073d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80073d2:	4a10      	ldr	r2, [pc, #64]	@ (8007414 <update_joy_mode_velocity_control+0x2d4>)
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	e09f      	b.n	8007518 <update_joy_mode_velocity_control+0x3d8>
 80073d8:	48000400 	.word	0x48000400
 80073dc:	20001964 	.word	0x20001964
 80073e0:	42200000 	.word	0x42200000
 80073e4:	c2200000 	.word	0xc2200000
 80073e8:	43480000 	.word	0x43480000
 80073ec:	20000368 	.word	0x20000368
 80073f0:	c3480000 	.word	0xc3480000
 80073f4:	20000369 	.word	0x20000369
 80073f8:	200004f0 	.word	0x200004f0
 80073fc:	20000888 	.word	0x20000888
 8007400:	432f0000 	.word	0x432f0000
 8007404:	20001968 	.word	0x20001968
 8007408:	c32f0000 	.word	0xc32f0000
 800740c:	40600000 	.word	0x40600000
 8007410:	c0600000 	.word	0xc0600000
 8007414:	20000280 	.word	0x20000280
 8007418:	20000574 	.word	0x20000574
 800741c:	20000080 	.word	0x20000080
 8007420:	447a0000 	.word	0x447a0000
 8007424:	20000614 	.word	0x20000614
 8007428:	20000494 	.word	0x20000494
 800742c:	00000000 	.word	0x00000000
 8007430:	20000618 	.word	0x20000618
	} else {
		// Not moving - hold current position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 8007434:	4b81      	ldr	r3, [pc, #516]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 8007436:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 800743a:	4b81      	ldr	r3, [pc, #516]	@ (8007640 <update_joy_mode_velocity_control+0x500>)
 800743c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007440:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 8007444:	4b7d      	ldr	r3, [pc, #500]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 8007446:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 800744a:	4b7c      	ldr	r3, [pc, #496]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 800744c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007450:	eeb0 0a67 	vmov.f32	s0, s15
 8007454:	487b      	ldr	r0, [pc, #492]	@ (8007644 <update_joy_mode_velocity_control+0x504>)
 8007456:	f7f9 fedf 	bl	8001218 <PID_CONTROLLER_Compute>
 800745a:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 800745e:	4b7a      	ldr	r3, [pc, #488]	@ (8007648 <update_joy_mode_velocity_control+0x508>)
 8007460:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8007464:	4610      	mov	r0, r2
 8007466:	4619      	mov	r1, r3
 8007468:	f7f9 fb2c 	bl	8000ac4 <__aeabi_d2iz>
 800746c:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 800746e:	4b76      	ldr	r3, [pc, #472]	@ (8007648 <update_joy_mode_velocity_control+0x508>)
 8007470:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007474:	4692      	mov	sl, r2
 8007476:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_vel = PWM_Satuation(
 800747a:	4650      	mov	r0, sl
 800747c:	4659      	mov	r1, fp
 800747e:	f7f9 fb21 	bl	8000ac4 <__aeabi_d2iz>
 8007482:	4603      	mov	r3, r0
 8007484:	4619      	mov	r1, r3
 8007486:	4620      	mov	r0, r4
 8007488:	eeb0 0a48 	vmov.f32	s0, s16
 800748c:	f7f9 fe62 	bl	8001154 <PWM_Satuation>
 8007490:	ee07 0a90 	vmov	s15, r0
 8007494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007498:	4b68      	ldr	r3, [pc, #416]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 800749a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 800749e:	4b67      	ldr	r3, [pc, #412]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 80074a0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 80074a4:	4b65      	ldr	r3, [pc, #404]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 80074a6:	edd3 7a07 	vldr	s15, [r3, #28]
 80074aa:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80074ae:	4b63      	ldr	r3, [pc, #396]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 80074b0:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 80074b4:	4b61      	ldr	r3, [pc, #388]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 80074b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80074ba:	eeb0 0a67 	vmov.f32	s0, s15
 80074be:	4863      	ldr	r0, [pc, #396]	@ (800764c <update_joy_mode_velocity_control+0x50c>)
 80074c0:	f7f9 feaa 	bl	8001218 <PID_CONTROLLER_Compute>
 80074c4:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 80074c8:	4b5f      	ldr	r3, [pc, #380]	@ (8007648 <update_joy_mode_velocity_control+0x508>)
 80074ca:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 80074ce:	4610      	mov	r0, r2
 80074d0:	4619      	mov	r1, r3
 80074d2:	f7f9 faf7 	bl	8000ac4 <__aeabi_d2iz>
 80074d6:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 80074d8:	4b5b      	ldr	r3, [pc, #364]	@ (8007648 <update_joy_mode_velocity_control+0x508>)
 80074da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80074de:	4615      	mov	r5, r2
 80074e0:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 80074e4:	4628      	mov	r0, r5
 80074e6:	4631      	mov	r1, r6
 80074e8:	f7f9 faec 	bl	8000ac4 <__aeabi_d2iz>
 80074ec:	4603      	mov	r3, r0
 80074ee:	4619      	mov	r1, r3
 80074f0:	4620      	mov	r0, r4
 80074f2:	eeb0 0a48 	vmov.f32	s0, s16
 80074f6:	f7f9 fe2d 	bl	8001154 <PWM_Satuation>
 80074fa:	ee07 0a90 	vmov	s15, r0
 80074fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007502:	4b4e      	ldr	r3, [pc, #312]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 8007504:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 8007508:	4b4c      	ldr	r3, [pc, #304]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8007510:	4b4a      	ldr	r3, [pc, #296]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 8007512:	f04f 0200 	mov.w	r2, #0
 8007516:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8007518:	4b48      	ldr	r3, [pc, #288]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 800751a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800751e:	4b47      	ldr	r3, [pc, #284]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 8007520:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8007524:	4b45      	ldr	r3, [pc, #276]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 8007526:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007532:	4b42      	ldr	r3, [pc, #264]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 8007534:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007538:	4b40      	ldr	r3, [pc, #256]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 800753a:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800753e:	4b42      	ldr	r3, [pc, #264]	@ (8007648 <update_joy_mode_velocity_control+0x508>)
 8007540:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007544:	4610      	mov	r0, r2
 8007546:	4619      	mov	r1, r3
 8007548:	f7f9 fabc 	bl	8000ac4 <__aeabi_d2iz>
 800754c:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 800754e:	4b3e      	ldr	r3, [pc, #248]	@ (8007648 <update_joy_mode_velocity_control+0x508>)
 8007550:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007554:	623a      	str	r2, [r7, #32]
 8007556:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800755a:	627b      	str	r3, [r7, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 800755c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007560:	f7f9 fab0 	bl	8000ac4 <__aeabi_d2iz>
 8007564:	4603      	mov	r3, r0
 8007566:	4619      	mov	r1, r3
 8007568:	4620      	mov	r0, r4
 800756a:	eeb0 0a48 	vmov.f32	s0, s16
 800756e:	f7f9 fdf1 	bl	8001154 <PWM_Satuation>
 8007572:	ee07 0a90 	vmov	s15, r0
 8007576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800757a:	4b30      	ldr	r3, [pc, #192]	@ (800763c <update_joy_mode_velocity_control+0x4fc>)
 800757c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL */
	if (rev_moving) {
 8007580:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007584:	2b00      	cmp	r3, #0
 8007586:	d071      	beq.n	800766c <update_joy_mode_velocity_control+0x52c>
		// Moving - use velocity control
		revolute_axis.vel_error = rev_command_vel
				- revolute_axis.kalman_velocity;
 8007588:	4b31      	ldr	r3, [pc, #196]	@ (8007650 <update_joy_mode_velocity_control+0x510>)
 800758a:	edd3 7a07 	vldr	s15, [r3, #28]
 800758e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8007592:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = rev_command_vel
 8007596:	4b2e      	ldr	r3, [pc, #184]	@ (8007650 <update_joy_mode_velocity_control+0x510>)
 8007598:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 800759c:	4b2c      	ldr	r3, [pc, #176]	@ (8007650 <update_joy_mode_velocity_control+0x510>)
 800759e:	edd3 7a06 	vldr	s15, [r3, #24]
 80075a2:	eeb0 0a67 	vmov.f32	s0, s15
 80075a6:	482b      	ldr	r0, [pc, #172]	@ (8007654 <update_joy_mode_velocity_control+0x514>)
 80075a8:	f7f9 fe36 	bl	8001218 <PID_CONTROLLER_Compute>
 80075ac:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 80075b0:	4b29      	ldr	r3, [pc, #164]	@ (8007658 <update_joy_mode_velocity_control+0x518>)
 80075b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 80075b6:	4610      	mov	r0, r2
 80075b8:	4619      	mov	r1, r3
 80075ba:	f7f9 fa83 	bl	8000ac4 <__aeabi_d2iz>
 80075be:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 80075c0:	4b25      	ldr	r3, [pc, #148]	@ (8007658 <update_joy_mode_velocity_control+0x518>)
 80075c2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80075c6:	61ba      	str	r2, [r7, #24]
 80075c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80075cc:	61fb      	str	r3, [r7, #28]
		revolute_axis.command_pos = PWM_Satuation(
 80075ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80075d2:	f7f9 fa77 	bl	8000ac4 <__aeabi_d2iz>
 80075d6:	4603      	mov	r3, r0
 80075d8:	4619      	mov	r1, r3
 80075da:	4620      	mov	r0, r4
 80075dc:	eeb0 0a48 	vmov.f32	s0, s16
 80075e0:	f7f9 fdb8 	bl	8001154 <PWM_Satuation>
 80075e4:	ee07 0a90 	vmov	s15, r0
 80075e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075ec:	4b18      	ldr	r3, [pc, #96]	@ (8007650 <update_joy_mode_velocity_control+0x510>)
 80075ee:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80075f2:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 80075f6:	4819      	ldr	r0, [pc, #100]	@ (800765c <update_joy_mode_velocity_control+0x51c>)
 80075f8:	f7f9 ffce 	bl	8001598 <REVOLUTE_MOTOR_FFD_Compute>
 80075fc:	eef0 7a40 	vmov.f32	s15, s0
 8007600:	4b13      	ldr	r3, [pc, #76]	@ (8007650 <update_joy_mode_velocity_control+0x510>)
 8007602:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				rev_command_vel);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007606:	4b16      	ldr	r3, [pc, #88]	@ (8007660 <update_joy_mode_velocity_control+0x520>)
 8007608:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 800760c:	4b0c      	ldr	r3, [pc, #48]	@ (8007640 <update_joy_mode_velocity_control+0x500>)
 800760e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007612:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8007664 <update_joy_mode_velocity_control+0x524>
 8007616:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800761a:	eef0 0a66 	vmov.f32	s1, s13
 800761e:	eeb0 0a47 	vmov.f32	s0, s14
 8007622:	4811      	ldr	r0, [pc, #68]	@ (8007668 <update_joy_mode_velocity_control+0x528>)
 8007624:	f7fa f84b 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 8007628:	eef0 7a40 	vmov.f32	s15, s0
 800762c:	4b08      	ldr	r3, [pc, #32]	@ (8007650 <update_joy_mode_velocity_control+0x510>)
 800762e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Update target position for when we stop moving
		revolute_axis.position = revolute_encoder.rads;
 8007632:	4b0b      	ldr	r3, [pc, #44]	@ (8007660 <update_joy_mode_velocity_control+0x520>)
 8007634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007636:	4a06      	ldr	r2, [pc, #24]	@ (8007650 <update_joy_mode_velocity_control+0x510>)
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	e0d1      	b.n	80077e0 <update_joy_mode_velocity_control+0x6a0>
 800763c:	20000280 	.word	0x20000280
 8007640:	20000494 	.word	0x20000494
 8007644:	2000054c 	.word	0x2000054c
 8007648:	20000080 	.word	0x20000080
 800764c:	20000574 	.word	0x20000574
 8007650:	200002c4 	.word	0x200002c4
 8007654:	200005c4 	.word	0x200005c4
 8007658:	20000000 	.word	0x20000000
 800765c:	20000620 	.word	0x20000620
 8007660:	200004f0 	.word	0x200004f0
 8007664:	447a0000 	.word	0x447a0000
 8007668:	20000624 	.word	0x20000624
	} else {
		// Not moving - hold current position with position control
		revolute_axis.position = revolute_encoder.rads;
 800766c:	4b84      	ldr	r3, [pc, #528]	@ (8007880 <update_joy_mode_velocity_control+0x740>)
 800766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007670:	4a84      	ldr	r2, [pc, #528]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 8007672:	6013      	str	r3, [r2, #0]

		float normalized_position = normalize_angle(revolute_encoder.rads);
 8007674:	4b82      	ldr	r3, [pc, #520]	@ (8007880 <update_joy_mode_velocity_control+0x740>)
 8007676:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800767a:	eeb0 0a67 	vmov.f32	s0, s15
 800767e:	f7fe fae7 	bl	8005c50 <normalize_angle>
 8007682:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
		revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8007686:	4b7f      	ldr	r3, [pc, #508]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 8007688:	ed93 7a00 	vldr	s14, [r3]
 800768c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007694:	4b7b      	ldr	r3, [pc, #492]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 8007696:	edc3 7a05 	vstr	s15, [r3, #20]

		// Handle angle wrapping for position error
		if (revolute_axis.pos_error > PI)
 800769a:	4b7a      	ldr	r3, [pc, #488]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 800769c:	edd3 7a05 	vldr	s15, [r3, #20]
 80076a0:	ed9f 7a79 	vldr	s14, [pc, #484]	@ 8007888 <update_joy_mode_velocity_control+0x748>
 80076a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ac:	dd09      	ble.n	80076c2 <update_joy_mode_velocity_control+0x582>
			revolute_axis.pos_error -= 2.0f * PI;
 80076ae:	4b75      	ldr	r3, [pc, #468]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80076b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80076b4:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 800788c <update_joy_mode_velocity_control+0x74c>
 80076b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076bc:	4b71      	ldr	r3, [pc, #452]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80076be:	edc3 7a05 	vstr	s15, [r3, #20]
		if (revolute_axis.pos_error < -PI)
 80076c2:	4b70      	ldr	r3, [pc, #448]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80076c4:	edd3 7a05 	vldr	s15, [r3, #20]
 80076c8:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8007890 <update_joy_mode_velocity_control+0x750>
 80076cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80076d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076d4:	d509      	bpl.n	80076ea <update_joy_mode_velocity_control+0x5aa>
			revolute_axis.pos_error += 2.0f * PI;
 80076d6:	4b6b      	ldr	r3, [pc, #428]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80076d8:	edd3 7a05 	vldr	s15, [r3, #20]
 80076dc:	ed9f 7a6b 	vldr	s14, [pc, #428]	@ 800788c <update_joy_mode_velocity_control+0x74c>
 80076e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80076e4:	4b67      	ldr	r3, [pc, #412]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80076e6:	edc3 7a05 	vstr	s15, [r3, #20]

		revolute_axis.command_vel = PWM_Satuation(
 80076ea:	4b66      	ldr	r3, [pc, #408]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80076ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80076f0:	eeb0 0a67 	vmov.f32	s0, s15
 80076f4:	4867      	ldr	r0, [pc, #412]	@ (8007894 <update_joy_mode_velocity_control+0x754>)
 80076f6:	f7f9 fd8f 	bl	8001218 <PID_CONTROLLER_Compute>
 80076fa:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_position_pid,
						revolute_axis.pos_error),
				ZGX45RGG_150RPM_Constant.qd_max,
 80076fe:	4b66      	ldr	r3, [pc, #408]	@ (8007898 <update_joy_mode_velocity_control+0x758>)
 8007700:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
		revolute_axis.command_vel = PWM_Satuation(
 8007704:	4610      	mov	r0, r2
 8007706:	4619      	mov	r1, r3
 8007708:	f7f9 f9dc 	bl	8000ac4 <__aeabi_d2iz>
 800770c:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.qd_max);
 800770e:	4b62      	ldr	r3, [pc, #392]	@ (8007898 <update_joy_mode_velocity_control+0x758>)
 8007710:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8007714:	613a      	str	r2, [r7, #16]
 8007716:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800771a:	617b      	str	r3, [r7, #20]
		revolute_axis.command_vel = PWM_Satuation(
 800771c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007720:	f7f9 f9d0 	bl	8000ac4 <__aeabi_d2iz>
 8007724:	4603      	mov	r3, r0
 8007726:	4619      	mov	r1, r3
 8007728:	4620      	mov	r0, r4
 800772a:	eeb0 0a48 	vmov.f32	s0, s16
 800772e:	f7f9 fd11 	bl	8001154 <PWM_Satuation>
 8007732:	ee07 0a90 	vmov	s15, r0
 8007736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800773a:	4b52      	ldr	r3, [pc, #328]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 800773c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		revolute_axis.vel_error = revolute_axis.command_vel
 8007740:	4b50      	ldr	r3, [pc, #320]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 8007742:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8007746:	4b4f      	ldr	r3, [pc, #316]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 8007748:	edd3 7a07 	vldr	s15, [r3, #28]
 800774c:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8007750:	4b4c      	ldr	r3, [pc, #304]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 8007752:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8007756:	4b4b      	ldr	r3, [pc, #300]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 8007758:	edd3 7a06 	vldr	s15, [r3, #24]
 800775c:	eeb0 0a67 	vmov.f32	s0, s15
 8007760:	484e      	ldr	r0, [pc, #312]	@ (800789c <update_joy_mode_velocity_control+0x75c>)
 8007762:	f7f9 fd59 	bl	8001218 <PID_CONTROLLER_Compute>
 8007766:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 800776a:	4b4b      	ldr	r3, [pc, #300]	@ (8007898 <update_joy_mode_velocity_control+0x758>)
 800776c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 8007770:	4610      	mov	r0, r2
 8007772:	4619      	mov	r1, r3
 8007774:	f7f9 f9a6 	bl	8000ac4 <__aeabi_d2iz>
 8007778:	4604      	mov	r4, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 800777a:	4b47      	ldr	r3, [pc, #284]	@ (8007898 <update_joy_mode_velocity_control+0x758>)
 800777c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007780:	60ba      	str	r2, [r7, #8]
 8007782:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007786:	60fb      	str	r3, [r7, #12]
		revolute_axis.command_pos = PWM_Satuation(
 8007788:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800778c:	f7f9 f99a 	bl	8000ac4 <__aeabi_d2iz>
 8007790:	4603      	mov	r3, r0
 8007792:	4619      	mov	r1, r3
 8007794:	4620      	mov	r0, r4
 8007796:	eeb0 0a48 	vmov.f32	s0, s16
 800779a:	f7f9 fcdb 	bl	8001154 <PWM_Satuation>
 800779e:	ee07 0a90 	vmov	s15, r0
 80077a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077a6:	4b37      	ldr	r3, [pc, #220]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80077a8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Always include DFD for gravity compensation, but no FFD when holding
		revolute_axis.ffd = 0.0f;
 80077ac:	4b35      	ldr	r3, [pc, #212]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80077ae:	f04f 0200 	mov.w	r2, #0
 80077b2:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80077b4:	4b32      	ldr	r3, [pc, #200]	@ (8007880 <update_joy_mode_velocity_control+0x740>)
 80077b6:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 80077ba:	4b39      	ldr	r3, [pc, #228]	@ (80078a0 <update_joy_mode_velocity_control+0x760>)
 80077bc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80077c0:	ed9f 6a38 	vldr	s12, [pc, #224]	@ 80078a4 <update_joy_mode_velocity_control+0x764>
 80077c4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80077c8:	eef0 0a66 	vmov.f32	s1, s13
 80077cc:	eeb0 0a47 	vmov.f32	s0, s14
 80077d0:	4835      	ldr	r0, [pc, #212]	@ (80078a8 <update_joy_mode_velocity_control+0x768>)
 80077d2:	f7f9 ff74 	bl	80016be <REVOLUTE_MOTOR_DFD_Compute>
 80077d6:	eef0 7a40 	vmov.f32	s15, s0
 80077da:	4b2a      	ldr	r3, [pc, #168]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80077dc:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//
//    ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
//    dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;

//    revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
    revolute_axis.command_pos += revolute_axis.dfd + revolute_axis.ffd;
 80077e0:	4b28      	ldr	r3, [pc, #160]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80077e2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80077e6:	4b27      	ldr	r3, [pc, #156]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80077e8:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80077ec:	4b25      	ldr	r3, [pc, #148]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80077ee:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80077f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077fa:	4b22      	ldr	r3, [pc, #136]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 80077fc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007800:	4b20      	ldr	r3, [pc, #128]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 8007802:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007806:	4b24      	ldr	r3, [pc, #144]	@ (8007898 <update_joy_mode_velocity_control+0x758>)
 8007808:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 800780c:	4610      	mov	r0, r2
 800780e:	4619      	mov	r1, r3
 8007810:	f7f9 f958 	bl	8000ac4 <__aeabi_d2iz>
 8007814:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007816:	4b20      	ldr	r3, [pc, #128]	@ (8007898 <update_joy_mode_velocity_control+0x758>)
 8007818:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800781c:	603a      	str	r2, [r7, #0]
 800781e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007822:	607b      	str	r3, [r7, #4]
    revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007824:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007828:	f7f9 f94c 	bl	8000ac4 <__aeabi_d2iz>
 800782c:	4603      	mov	r3, r0
 800782e:	4619      	mov	r1, r3
 8007830:	4620      	mov	r0, r4
 8007832:	eeb0 0a48 	vmov.f32	s0, s16
 8007836:	f7f9 fc8d 	bl	8001154 <PWM_Satuation>
 800783a:	ee07 0a90 	vmov	s15, r0
 800783e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007842:	4b10      	ldr	r3, [pc, #64]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 8007844:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8007848:	4b18      	ldr	r3, [pc, #96]	@ (80078ac <update_joy_mode_velocity_control+0x76c>)
 800784a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800784e:	eef0 0a67 	vmov.f32	s1, s15
 8007852:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 80078b0 <update_joy_mode_velocity_control+0x770>
 8007856:	4817      	ldr	r0, [pc, #92]	@ (80078b4 <update_joy_mode_velocity_control+0x774>)
 8007858:	f7f9 fdb6 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 800785c:	4b09      	ldr	r3, [pc, #36]	@ (8007884 <update_joy_mode_velocity_control+0x744>)
 800785e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007862:	eef0 0a67 	vmov.f32	s1, s15
 8007866:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80078b0 <update_joy_mode_velocity_control+0x770>
 800786a:	4813      	ldr	r0, [pc, #76]	@ (80078b8 <update_joy_mode_velocity_control+0x778>)
 800786c:	f7f9 fdac 	bl	80013c8 <MDXX_set_range>
}
 8007870:	bf00      	nop
 8007872:	3744      	adds	r7, #68	@ 0x44
 8007874:	46bd      	mov	sp, r7
 8007876:	ecbd 8b02 	vpop	{d8}
 800787a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800787e:	bf00      	nop
 8007880:	200004f0 	.word	0x200004f0
 8007884:	200002c4 	.word	0x200002c4
 8007888:	40490fdb 	.word	0x40490fdb
 800788c:	40c90fdb 	.word	0x40c90fdb
 8007890:	c0490fdb 	.word	0xc0490fdb
 8007894:	2000059c 	.word	0x2000059c
 8007898:	20000000 	.word	0x20000000
 800789c:	200005c4 	.word	0x200005c4
 80078a0:	20000494 	.word	0x20000494
 80078a4:	447a0000 	.word	0x447a0000
 80078a8:	20000624 	.word	0x20000624
 80078ac:	20000280 	.word	0x20000280
 80078b0:	44fa0000 	.word	0x44fa0000
 80078b4:	200003fc 	.word	0x200003fc
 80078b8:	20000448 	.word	0x20000448

080078bc <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 80078c0:	4b14      	ldr	r3, [pc, #80]	@ (8007914 <update_joy_mode_pilot_light+0x58>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d122      	bne.n	800790e <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 80078c8:	4b13      	ldr	r3, [pc, #76]	@ (8007918 <update_joy_mode_pilot_light+0x5c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3301      	adds	r3, #1
 80078ce:	4a12      	ldr	r2, [pc, #72]	@ (8007918 <update_joy_mode_pilot_light+0x5c>)
 80078d0:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 80078d2:	4b11      	ldr	r3, [pc, #68]	@ (8007918 <update_joy_mode_pilot_light+0x5c>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078da:	d318      	bcc.n	800790e <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80078dc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80078e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80078e4:	f004 fc94 	bl	800c210 <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 80078e8:	4b0c      	ldr	r3, [pc, #48]	@ (800791c <update_joy_mode_pilot_light+0x60>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	bf14      	ite	ne
 80078f2:	2301      	movne	r3, #1
 80078f4:	2300      	moveq	r3, #0
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f083 0301 	eor.w	r3, r3, #1
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 0301 	and.w	r3, r3, #1
 8007902:	b2da      	uxtb	r2, r3
 8007904:	4b05      	ldr	r3, [pc, #20]	@ (800791c <update_joy_mode_pilot_light+0x60>)
 8007906:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 8007908:	4b03      	ldr	r3, [pc, #12]	@ (8007918 <update_joy_mode_pilot_light+0x5c>)
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800790e:	bf00      	nop
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	20000384 	.word	0x20000384
 8007918:	200003dc 	.word	0x200003dc
 800791c:	200003e0 	.word	0x200003e0

08007920 <update_joy_mode>:

void update_joy_mode(void) {
 8007920:	b590      	push	{r4, r7, lr}
 8007922:	ed2d 8b02 	vpush	{d8}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 800792a:	4b8f      	ldr	r3, [pc, #572]	@ (8007b68 <update_joy_mode+0x248>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	f083 0301 	eor.w	r3, r3, #1
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	f040 81c2 	bne.w	8007cbe <update_joy_mode+0x39e>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 800793a:	4b8c      	ldr	r3, [pc, #560]	@ (8007b6c <update_joy_mode+0x24c>)
 800793c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007940:	eeb0 0a67 	vmov.f32	s0, s15
 8007944:	f7fe f984 	bl	8005c50 <normalize_angle>
 8007948:	eef0 7a40 	vmov.f32	s15, s0
 800794c:	4b88      	ldr	r3, [pc, #544]	@ (8007b70 <update_joy_mode+0x250>)
 800794e:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 8007952:	4b88      	ldr	r3, [pc, #544]	@ (8007b74 <update_joy_mode+0x254>)
 8007954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007956:	4a88      	ldr	r2, [pc, #544]	@ (8007b78 <update_joy_mode+0x258>)
 8007958:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 800795a:	4b85      	ldr	r3, [pc, #532]	@ (8007b70 <update_joy_mode+0x250>)
 800795c:	edd3 7a00 	vldr	s15, [r3]
 8007960:	220e      	movs	r2, #14
 8007962:	210f      	movs	r1, #15
 8007964:	eeb0 0a67 	vmov.f32	s0, s15
 8007968:	4884      	ldr	r0, [pc, #528]	@ (8007b7c <update_joy_mode+0x25c>)
 800796a:	f7fc fe85 	bl	8004678 <UnitConverter_angle>
 800796e:	eef0 7a40 	vmov.f32	s15, s0
 8007972:	4b83      	ldr	r3, [pc, #524]	@ (8007b80 <update_joy_mode+0x260>)
 8007974:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 8007978:	4b82      	ldr	r3, [pc, #520]	@ (8007b84 <update_joy_mode+0x264>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	3b01      	subs	r3, #1
 800797e:	2b04      	cmp	r3, #4
 8007980:	f200 819f 	bhi.w	8007cc2 <update_joy_mode+0x3a2>
 8007984:	a201      	add	r2, pc, #4	@ (adr r2, 800798c <update_joy_mode+0x6c>)
 8007986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798a:	bf00      	nop
 800798c:	080079a1 	.word	0x080079a1
 8007990:	080079a7 	.word	0x080079a7
 8007994:	080079ad 	.word	0x080079ad
 8007998:	080079b3 	.word	0x080079b3
 800799c:	08007cb9 	.word	0x08007cb9
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 80079a0:	f7ff fbce 	bl	8007140 <update_joy_mode_velocity_control>
		break;
 80079a4:	e190      	b.n	8007cc8 <update_joy_mode+0x3a8>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 80079a6:	f7ff fbcb 	bl	8007140 <update_joy_mode_velocity_control>
		break;
 80079aa:	e18d      	b.n	8007cc8 <update_joy_mode+0x3a8>

	case JOY_MODE_POSITION_SAVED:
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 80079ac:	f7ff ff86 	bl	80078bc <update_joy_mode_pilot_light>
		break;
 80079b0:	e18a      	b.n	8007cc8 <update_joy_mode+0x3a8>

	case JOY_MODE_PLAYBACK:
		// Playing back saved positions - PILOT LIGHT STAYS ON
		// Handle trajectory sequence states for joy mode playback
		switch (motion_sequence_state) {
 80079b2:	4b75      	ldr	r3, [pc, #468]	@ (8007b88 <update_joy_mode+0x268>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b05      	cmp	r3, #5
 80079b8:	f200 8166 	bhi.w	8007c88 <update_joy_mode+0x368>
 80079bc:	a201      	add	r2, pc, #4	@ (adr r2, 80079c4 <update_joy_mode+0xa4>)
 80079be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c2:	bf00      	nop
 80079c4:	080079dd 	.word	0x080079dd
 80079c8:	08007a61 	.word	0x08007a61
 80079cc:	08007a85 	.word	0x08007a85
 80079d0:	08007bbd 	.word	0x08007bbd
 80079d4:	08007c63 	.word	0x08007c63
 80079d8:	08007c81 	.word	0x08007c81
		case MOTION_IDLE:
			// Current trajectory finished, wait before starting next
			joy_mode_playback_timer++;
 80079dc:	4b6b      	ldr	r3, [pc, #428]	@ (8007b8c <update_joy_mode+0x26c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	4a6a      	ldr	r2, [pc, #424]	@ (8007b8c <update_joy_mode+0x26c>)
 80079e4:	6013      	str	r3, [r2, #0]
			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 80079e6:	4b69      	ldr	r3, [pc, #420]	@ (8007b8c <update_joy_mode+0x26c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80079ee:	f0c0 814d 	bcc.w	8007c8c <update_joy_mode+0x36c>
				playback_position_index++;
 80079f2:	4b67      	ldr	r3, [pc, #412]	@ (8007b90 <update_joy_mode+0x270>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	3301      	adds	r3, #1
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	4b65      	ldr	r3, [pc, #404]	@ (8007b90 <update_joy_mode+0x270>)
 80079fc:	701a      	strb	r2, [r3, #0]

				if (playback_position_index < saved_position_count) {
 80079fe:	4b64      	ldr	r3, [pc, #400]	@ (8007b90 <update_joy_mode+0x270>)
 8007a00:	781a      	ldrb	r2, [r3, #0]
 8007a02:	4b64      	ldr	r3, [pc, #400]	@ (8007b94 <update_joy_mode+0x274>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d224      	bcs.n	8007a54 <update_joy_mode+0x134>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 8007a0a:	4b61      	ldr	r3, [pc, #388]	@ (8007b90 <update_joy_mode+0x270>)
 8007a0c:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 8007a0e:	4a62      	ldr	r2, [pc, #392]	@ (8007b98 <update_joy_mode+0x278>)
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4413      	add	r3, r2
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 8007a18:	4b5d      	ldr	r3, [pc, #372]	@ (8007b90 <update_joy_mode+0x270>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 8007a1c:	4a5e      	ldr	r2, [pc, #376]	@ (8007b98 <update_joy_mode+0x278>)
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	4413      	add	r3, r2
 8007a22:	3304      	adds	r3, #4
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007a28:	edd7 7a02 	vldr	s15, [r7, #8]
 8007a2c:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 8007b9c <update_joy_mode+0x27c>
 8007a30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007a34:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8007ba0 <update_joy_mode+0x280>
 8007a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a3c:	edc7 7a01 	vstr	s15, [r7, #4]

					start_combined_trajectory(target_pris, target_rev_deg);
 8007a40:	edd7 0a01 	vldr	s1, [r7, #4]
 8007a44:	ed97 0a03 	vldr	s0, [r7, #12]
 8007a48:	f7fe f9ec 	bl	8005e24 <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 8007a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8007b8c <update_joy_mode+0x26c>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]

					// Start homing sequence after a short delay
					start_homing_sequence(false); // false = manual homing (not startup)
				}
			}
			break;
 8007a52:	e11b      	b.n	8007c8c <update_joy_mode+0x36c>
					exit_joy_mode();
 8007a54:	f7ff fa2a 	bl	8006eac <exit_joy_mode>
					start_homing_sequence(false); // false = manual homing (not startup)
 8007a58:	2000      	movs	r0, #0
 8007a5a:	f7fd fc85 	bl	8005368 <start_homing_sequence>
			break;
 8007a5e:	e115      	b.n	8007c8c <update_joy_mode+0x36c>

		case MOTION_PEN_UP_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8007a60:	4b50      	ldr	r3, [pc, #320]	@ (8007ba4 <update_joy_mode+0x284>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3301      	adds	r3, #1
 8007a66:	4a4f      	ldr	r2, [pc, #316]	@ (8007ba4 <update_joy_mode+0x284>)
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	f240 52db 	movw	r2, #1499	@ 0x5db
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	f240 810e 	bls.w	8007c90 <update_joy_mode+0x370>
				prismatic_axis.trajectory_active = true;
 8007a74:	4b40      	ldr	r3, [pc, #256]	@ (8007b78 <update_joy_mode+0x258>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8007a7c:	4b42      	ldr	r3, [pc, #264]	@ (8007b88 <update_joy_mode+0x268>)
 8007a7e:	2202      	movs	r2, #2
 8007a80:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007a82:	e105      	b.n	8007c90 <update_joy_mode+0x370>

		case MOTION_PRISMATIC_ACTIVE:
			if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8007a84:	4b3c      	ldr	r3, [pc, #240]	@ (8007b78 <update_joy_mode+0x258>)
 8007a86:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 8102 	beq.w	8007c94 <update_joy_mode+0x374>
 8007a90:	4b45      	ldr	r3, [pc, #276]	@ (8007ba8 <update_joy_mode+0x288>)
 8007a92:	7c1b      	ldrb	r3, [r3, #16]
 8007a94:	f083 0301 	eor.w	r3, r3, #1
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	f000 80fa 	beq.w	8007c94 <update_joy_mode+0x374>
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007aa0:	4b35      	ldr	r3, [pc, #212]	@ (8007b78 <update_joy_mode+0x258>)
 8007aa2:	ed93 8a03 	vldr	s16, [r3, #12]
 8007aa6:	4b34      	ldr	r3, [pc, #208]	@ (8007b78 <update_joy_mode+0x258>)
 8007aa8:	edd3 8a04 	vldr	s17, [r3, #16]
						prismatic_axis.initial_pos, prismatic_axis.target_pos,
						ZGX45RGG_400RPM_Constant.traject_sd_max,
 8007aac:	4b3f      	ldr	r3, [pc, #252]	@ (8007bac <update_joy_mode+0x28c>)
 8007aae:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f7f9 f84d 	bl	8000b54 <__aeabi_d2f>
 8007aba:	4604      	mov	r4, r0
						ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8007abc:	4b3b      	ldr	r3, [pc, #236]	@ (8007bac <update_joy_mode+0x28c>)
 8007abe:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	f7f9 f845 	bl	8000b54 <__aeabi_d2f>
 8007aca:	4603      	mov	r3, r0
 8007acc:	ee01 3a90 	vmov	s3, r3
 8007ad0:	ee01 4a10 	vmov	s2, r4
 8007ad4:	eef0 0a68 	vmov.f32	s1, s17
 8007ad8:	eeb0 0a48 	vmov.f32	s0, s16
 8007adc:	4932      	ldr	r1, [pc, #200]	@ (8007ba8 <update_joy_mode+0x288>)
 8007ade:	4834      	ldr	r0, [pc, #208]	@ (8007bb0 <update_joy_mode+0x290>)
 8007ae0:	f7fc fa32 	bl	8003f48 <Trapezoidal_Evaluated>

				prismatic_axis.position = prisEva.setposition;
 8007ae4:	4b30      	ldr	r3, [pc, #192]	@ (8007ba8 <update_joy_mode+0x288>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a23      	ldr	r2, [pc, #140]	@ (8007b78 <update_joy_mode+0x258>)
 8007aea:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = prisEva.setvelocity;
 8007aec:	4b2e      	ldr	r3, [pc, #184]	@ (8007ba8 <update_joy_mode+0x288>)
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	4a21      	ldr	r2, [pc, #132]	@ (8007b78 <update_joy_mode+0x258>)
 8007af2:	6053      	str	r3, [r2, #4]

				if (prisEva.isFinised) {
 8007af4:	4b2c      	ldr	r3, [pc, #176]	@ (8007ba8 <update_joy_mode+0x288>)
 8007af6:	7c1b      	ldrb	r3, [r3, #16]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 80cb 	beq.w	8007c94 <update_joy_mode+0x374>
					prismatic_axis.trajectory_active = false;
 8007afe:	4b1e      	ldr	r3, [pc, #120]	@ (8007b78 <update_joy_mode+0x258>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					prismatic_axis.position = prisEva.setposition;
 8007b06:	4b28      	ldr	r3, [pc, #160]	@ (8007ba8 <update_joy_mode+0x288>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1b      	ldr	r2, [pc, #108]	@ (8007b78 <update_joy_mode+0x258>)
 8007b0c:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = 0.0f;
 8007b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8007b78 <update_joy_mode+0x258>)
 8007b10:	f04f 0200 	mov.w	r2, #0
 8007b14:	605a      	str	r2, [r3, #4]

					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007b16:	4b1a      	ldr	r3, [pc, #104]	@ (8007b80 <update_joy_mode+0x260>)
 8007b18:	ed93 8a03 	vldr	s16, [r3, #12]
 8007b1c:	4b18      	ldr	r3, [pc, #96]	@ (8007b80 <update_joy_mode+0x260>)
 8007b1e:	edd3 8a04 	vldr	s17, [r3, #16]
							revolute_axis.target_pos,
							ZGX45RGG_150RPM_Constant.traject_qd_max,
 8007b22:	4b24      	ldr	r3, [pc, #144]	@ (8007bb4 <update_joy_mode+0x294>)
 8007b24:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007b28:	4610      	mov	r0, r2
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	f7f9 f812 	bl	8000b54 <__aeabi_d2f>
 8007b30:	4604      	mov	r4, r0
							ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007b32:	4b20      	ldr	r3, [pc, #128]	@ (8007bb4 <update_joy_mode+0x294>)
 8007b34:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8007b38:	4610      	mov	r0, r2
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	f7f9 f80a 	bl	8000b54 <__aeabi_d2f>
 8007b40:	4603      	mov	r3, r0
 8007b42:	ee01 3a90 	vmov	s3, r3
 8007b46:	ee01 4a10 	vmov	s2, r4
 8007b4a:	eef0 0a68 	vmov.f32	s1, s17
 8007b4e:	eeb0 0a48 	vmov.f32	s0, s16
 8007b52:	4819      	ldr	r0, [pc, #100]	@ (8007bb8 <update_joy_mode+0x298>)
 8007b54:	f7fc f936 	bl	8003dc4 <Trapezoidal_Generator>

					revolute_axis.trajectory_active = true;
 8007b58:	4b09      	ldr	r3, [pc, #36]	@ (8007b80 <update_joy_mode+0x260>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 8007b60:	4b09      	ldr	r3, [pc, #36]	@ (8007b88 <update_joy_mode+0x268>)
 8007b62:	2203      	movs	r2, #3
 8007b64:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8007b66:	e095      	b.n	8007c94 <update_joy_mode+0x374>
 8007b68:	20000385 	.word	0x20000385
 8007b6c:	200004f0 	.word	0x200004f0
 8007b70:	2000037c 	.word	0x2000037c
 8007b74:	20000494 	.word	0x20000494
 8007b78:	20000280 	.word	0x20000280
 8007b7c:	20000888 	.word	0x20000888
 8007b80:	200002c4 	.word	0x200002c4
 8007b84:	20000384 	.word	0x20000384
 8007b88:	20000308 	.word	0x20000308
 8007b8c:	200003e4 	.word	0x200003e4
 8007b90:	200003d9 	.word	0x200003d9
 8007b94:	200003d8 	.word	0x200003d8
 8007b98:	20000388 	.word	0x20000388
 8007b9c:	43340000 	.word	0x43340000
 8007ba0:	40490fdb 	.word	0x40490fdb
 8007ba4:	20000360 	.word	0x20000360
 8007ba8:	20000334 	.word	0x20000334
 8007bac:	20000080 	.word	0x20000080
 8007bb0:	2000030c 	.word	0x2000030c
 8007bb4:	20000000 	.word	0x20000000
 8007bb8:	20000320 	.word	0x20000320

		case MOTION_REVOLUTE_ACTIVE:
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 8007bbc:	4b45      	ldr	r3, [pc, #276]	@ (8007cd4 <update_joy_mode+0x3b4>)
 8007bbe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d068      	beq.n	8007c98 <update_joy_mode+0x378>
 8007bc6:	4b44      	ldr	r3, [pc, #272]	@ (8007cd8 <update_joy_mode+0x3b8>)
 8007bc8:	7c1b      	ldrb	r3, [r3, #16]
 8007bca:	f083 0301 	eor.w	r3, r3, #1
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d061      	beq.n	8007c98 <update_joy_mode+0x378>
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8007cd4 <update_joy_mode+0x3b4>)
 8007bd6:	ed93 8a03 	vldr	s16, [r3, #12]
 8007bda:	4b3e      	ldr	r3, [pc, #248]	@ (8007cd4 <update_joy_mode+0x3b4>)
 8007bdc:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8007be0:	4b3e      	ldr	r3, [pc, #248]	@ (8007cdc <update_joy_mode+0x3bc>)
 8007be2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007be6:	4610      	mov	r0, r2
 8007be8:	4619      	mov	r1, r3
 8007bea:	f7f8 ffb3 	bl	8000b54 <__aeabi_d2f>
 8007bee:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8007cdc <update_joy_mode+0x3bc>)
 8007bf2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007bf6:	4610      	mov	r0, r2
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	f7f8 ffab 	bl	8000b54 <__aeabi_d2f>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	ee01 3a90 	vmov	s3, r3
 8007c04:	ee01 4a10 	vmov	s2, r4
 8007c08:	eef0 0a68 	vmov.f32	s1, s17
 8007c0c:	eeb0 0a48 	vmov.f32	s0, s16
 8007c10:	4931      	ldr	r1, [pc, #196]	@ (8007cd8 <update_joy_mode+0x3b8>)
 8007c12:	4833      	ldr	r0, [pc, #204]	@ (8007ce0 <update_joy_mode+0x3c0>)
 8007c14:	f7fc f998 	bl	8003f48 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 8007c18:	4b2f      	ldr	r3, [pc, #188]	@ (8007cd8 <update_joy_mode+0x3b8>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8007cd4 <update_joy_mode+0x3b4>)
 8007c1e:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 8007c20:	4b2d      	ldr	r3, [pc, #180]	@ (8007cd8 <update_joy_mode+0x3b8>)
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	4a2b      	ldr	r2, [pc, #172]	@ (8007cd4 <update_joy_mode+0x3b4>)
 8007c26:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 8007c28:	4b2b      	ldr	r3, [pc, #172]	@ (8007cd8 <update_joy_mode+0x3b8>)
 8007c2a:	7c1b      	ldrb	r3, [r3, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d033      	beq.n	8007c98 <update_joy_mode+0x378>
					revolute_axis.trajectory_active = false;
 8007c30:	4b28      	ldr	r3, [pc, #160]	@ (8007cd4 <update_joy_mode+0x3b4>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 8007c38:	4b27      	ldr	r3, [pc, #156]	@ (8007cd8 <update_joy_mode+0x3b8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a25      	ldr	r2, [pc, #148]	@ (8007cd4 <update_joy_mode+0x3b4>)
 8007c3e:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 8007c40:	4b24      	ldr	r3, [pc, #144]	@ (8007cd4 <update_joy_mode+0x3b4>)
 8007c42:	f04f 0200 	mov.w	r2, #0
 8007c46:	605a      	str	r2, [r3, #4]

					PID_CONTROLLER_Reset(&revolute_position_pid);
 8007c48:	4826      	ldr	r0, [pc, #152]	@ (8007ce4 <update_joy_mode+0x3c4>)
 8007c4a:	f7f9 fb77 	bl	800133c <PID_CONTROLLER_Reset>
					PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8007c4e:	4826      	ldr	r0, [pc, #152]	@ (8007ce8 <update_joy_mode+0x3c8>)
 8007c50:	f7f9 fb74 	bl	800133c <PID_CONTROLLER_Reset>

					motion_delay_timer = 0;
 8007c54:	4b25      	ldr	r3, [pc, #148]	@ (8007cec <update_joy_mode+0x3cc>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
					motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8007c5a:	4b25      	ldr	r3, [pc, #148]	@ (8007cf0 <update_joy_mode+0x3d0>)
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8007c60:	e01a      	b.n	8007c98 <update_joy_mode+0x378>

		case MOTION_PEN_DOWN_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8007c62:	4b22      	ldr	r3, [pc, #136]	@ (8007cec <update_joy_mode+0x3cc>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3301      	adds	r3, #1
 8007c68:	4a20      	ldr	r2, [pc, #128]	@ (8007cec <update_joy_mode+0x3cc>)
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	f240 52db 	movw	r2, #1499	@ 0x5db
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d913      	bls.n	8007c9c <update_joy_mode+0x37c>
				plotter_pen_down();
 8007c74:	f000 ff6c 	bl	8008b50 <plotter_pen_down>
				motion_sequence_state = MOTION_COMPLETE;
 8007c78:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf0 <update_joy_mode+0x3d0>)
 8007c7a:	2205      	movs	r2, #5
 8007c7c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8007c7e:	e00d      	b.n	8007c9c <update_joy_mode+0x37c>

		case MOTION_COMPLETE:
			motion_sequence_state = MOTION_IDLE;
 8007c80:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf0 <update_joy_mode+0x3d0>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	701a      	strb	r2, [r3, #0]
			break;
 8007c86:	e00a      	b.n	8007c9e <update_joy_mode+0x37e>

		default:
			break;
 8007c88:	bf00      	nop
 8007c8a:	e008      	b.n	8007c9e <update_joy_mode+0x37e>
			break;
 8007c8c:	bf00      	nop
 8007c8e:	e006      	b.n	8007c9e <update_joy_mode+0x37e>
			break;
 8007c90:	bf00      	nop
 8007c92:	e004      	b.n	8007c9e <update_joy_mode+0x37e>
			break;
 8007c94:	bf00      	nop
 8007c96:	e002      	b.n	8007c9e <update_joy_mode+0x37e>
			break;
 8007c98:	bf00      	nop
 8007c9a:	e000      	b.n	8007c9e <update_joy_mode+0x37e>
			break;
 8007c9c:	bf00      	nop
		}

		// Update position/velocity control for trajectory playback
		if (motion_sequence_state != MOTION_IDLE) {
 8007c9e:	4b14      	ldr	r3, [pc, #80]	@ (8007cf0 <update_joy_mode+0x3d0>)
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00f      	beq.n	8007cc6 <update_joy_mode+0x3a6>
			// Run position control if not in manual control
			if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8007ca6:	4b13      	ldr	r3, [pc, #76]	@ (8007cf4 <update_joy_mode+0x3d4>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b09      	cmp	r3, #9
 8007cac:	d901      	bls.n	8007cb2 <update_joy_mode+0x392>
				update_position_control();
 8007cae:	f7fe f9f3 	bl	8006098 <update_position_control>
			}
			// Always run velocity control during trajectory
			update_velocity_control();
 8007cb2:	f7fe fab1 	bl	8006218 <update_velocity_control>
		}
		break;
 8007cb6:	e006      	b.n	8007cc6 <update_joy_mode+0x3a6>

	case JOY_MODE_COMPLETE:
		exit_joy_mode();
 8007cb8:	f7ff f8f8 	bl	8006eac <exit_joy_mode>
		break;
 8007cbc:	e004      	b.n	8007cc8 <update_joy_mode+0x3a8>
		return;
 8007cbe:	bf00      	nop
 8007cc0:	e002      	b.n	8007cc8 <update_joy_mode+0x3a8>

	default:
		break;
 8007cc2:	bf00      	nop
 8007cc4:	e000      	b.n	8007cc8 <update_joy_mode+0x3a8>
		break;
 8007cc6:	bf00      	nop
	}
}
 8007cc8:	3714      	adds	r7, #20
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	ecbd 8b02 	vpop	{d8}
 8007cd0:	bd90      	pop	{r4, r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	200002c4 	.word	0x200002c4
 8007cd8:	20000348 	.word	0x20000348
 8007cdc:	20000000 	.word	0x20000000
 8007ce0:	20000320 	.word	0x20000320
 8007ce4:	2000059c 	.word	0x2000059c
 8007ce8:	200005c4 	.word	0x200005c4
 8007cec:	20000360 	.word	0x20000360
 8007cf0:	20000308 	.word	0x20000308
 8007cf4:	20000378 	.word	0x20000378

08007cf8 <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8007cfe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007d02:	482c      	ldr	r0, [pc, #176]	@ (8007db4 <handle_b2_button_polling+0xbc>)
 8007d04:	f004 fa54 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	bf0c      	ite	eq
 8007d0e:	2301      	moveq	r3, #1
 8007d10:	2300      	movne	r3, #0
 8007d12:	71fb      	strb	r3, [r7, #7]

	// Simple edge detection without debounce timer here
	if (b2_current_state && !joy_mode_b2_last_state) {
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d03b      	beq.n	8007d92 <handle_b2_button_polling+0x9a>
 8007d1a:	4b27      	ldr	r3, [pc, #156]	@ (8007db8 <handle_b2_button_polling+0xc0>)
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	f083 0301 	eor.w	r3, r3, #1
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d034      	beq.n	8007d92 <handle_b2_button_polling+0x9a>
		// Button just pressed - trigger action immediately
		joy_mode_b2_pressed = true;
 8007d28:	4b24      	ldr	r3, [pc, #144]	@ (8007dbc <handle_b2_button_polling+0xc4>)
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	701a      	strb	r2, [r3, #0]

		// Handle B2 button press logic
		if (!is_emergency_active() && !homing_active
 8007d2e:	f7ff f83b 	bl	8006da8 <is_emergency_active>
 8007d32:	4603      	mov	r3, r0
 8007d34:	f083 0301 	eor.w	r3, r3, #1
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d029      	beq.n	8007d92 <handle_b2_button_polling+0x9a>
 8007d3e:	4b20      	ldr	r3, [pc, #128]	@ (8007dc0 <handle_b2_button_polling+0xc8>)
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	f083 0301 	eor.w	r3, r3, #1
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d022      	beq.n	8007d92 <handle_b2_button_polling+0x9a>
				&& motion_sequence_state == MOTION_IDLE) {
 8007d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc4 <handle_b2_button_polling+0xcc>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d11e      	bne.n	8007d92 <handle_b2_button_polling+0x9a>
			if (!joy_mode_active) {
 8007d54:	4b1c      	ldr	r3, [pc, #112]	@ (8007dc8 <handle_b2_button_polling+0xd0>)
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	f083 0301 	eor.w	r3, r3, #1
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <handle_b2_button_polling+0x70>
				// Enter joy mode (starts in JOY_MODE_INITIAL_CONTROL)
				enter_joy_mode();
 8007d62:	f7ff f831 	bl	8006dc8 <enter_joy_mode>
 8007d66:	e014      	b.n	8007d92 <handle_b2_button_polling+0x9a>
			} else {
				// Joy mode is active, handle button press based on current state
				if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 8007d68:	4b18      	ldr	r3, [pc, #96]	@ (8007dcc <handle_b2_button_polling+0xd4>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d103      	bne.n	8007d78 <handle_b2_button_polling+0x80>
					// First B2 press in joy mode - start position saving mode
					joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 8007d70:	4b16      	ldr	r3, [pc, #88]	@ (8007dcc <handle_b2_button_polling+0xd4>)
 8007d72:	2202      	movs	r2, #2
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	e00c      	b.n	8007d92 <handle_b2_button_polling+0x9a>
				} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 8007d78:	4b14      	ldr	r3, [pc, #80]	@ (8007dcc <handle_b2_button_polling+0xd4>)
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d102      	bne.n	8007d86 <handle_b2_button_polling+0x8e>
					// Save current position
					save_current_position();
 8007d80:	f7ff f918 	bl	8006fb4 <save_current_position>
 8007d84:	e005      	b.n	8007d92 <handle_b2_button_polling+0x9a>
				} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8007d86:	4b11      	ldr	r3, [pc, #68]	@ (8007dcc <handle_b2_button_polling+0xd4>)
 8007d88:	781b      	ldrb	r3, [r3, #0]
 8007d8a:	2b03      	cmp	r3, #3
 8007d8c:	d101      	bne.n	8007d92 <handle_b2_button_polling+0x9a>
					// Start playback of saved positions
					start_position_playback();
 8007d8e:	f7ff f94b 	bl	8007028 <start_position_playback>
			}
		}
	}

	// Update last state
	joy_mode_b2_last_state = b2_current_state;
 8007d92:	4a09      	ldr	r2, [pc, #36]	@ (8007db8 <handle_b2_button_polling+0xc0>)
 8007d94:	79fb      	ldrb	r3, [r7, #7]
 8007d96:	7013      	strb	r3, [r2, #0]

	// Reset pressed flag when button is released
	if (!b2_current_state) {
 8007d98:	79fb      	ldrb	r3, [r7, #7]
 8007d9a:	f083 0301 	eor.w	r3, r3, #1
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <handle_b2_button_polling+0xb2>
		joy_mode_b2_pressed = false;
 8007da4:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <handle_b2_button_polling+0xc4>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
	}
}
 8007daa:	bf00      	nop
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	48000800 	.word	0x48000800
 8007db8:	200003e9 	.word	0x200003e9
 8007dbc:	200003e8 	.word	0x200003e8
 8007dc0:	2000036b 	.word	0x2000036b
 8007dc4:	20000308 	.word	0x20000308
 8007dc8:	20000385 	.word	0x20000385
 8007dcc:	20000384 	.word	0x20000384

08007dd0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 8007dda:	88fb      	ldrh	r3, [r7, #6]
 8007ddc:	2b40      	cmp	r3, #64	@ 0x40
 8007dde:	d105      	bne.n	8007dec <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 8007de0:	4b4e      	ldr	r3, [pc, #312]	@ (8007f1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	3301      	adds	r3, #1
 8007de6:	4a4d      	ldr	r2, [pc, #308]	@ (8007f1c <HAL_GPIO_EXTI_Callback+0x14c>)
 8007de8:	6013      	str	r3, [r2, #0]
		return;
 8007dea:	e093      	b.n	8007f14 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 8007dec:	88fb      	ldrh	r3, [r7, #6]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d103      	bne.n	8007dfa <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 8007df2:	4b4b      	ldr	r3, [pc, #300]	@ (8007f20 <HAL_GPIO_EXTI_Callback+0x150>)
 8007df4:	2201      	movs	r2, #1
 8007df6:	701a      	strb	r2, [r3, #0]
		return;
 8007df8:	e08c      	b.n	8007f14 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e00:	d103      	bne.n	8007e0a <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 8007e02:	4b48      	ldr	r3, [pc, #288]	@ (8007f24 <HAL_GPIO_EXTI_Callback+0x154>)
 8007e04:	2201      	movs	r2, #1
 8007e06:	701a      	strb	r2, [r3, #0]
		return;
 8007e08:	e084      	b.n	8007f14 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == EMER_Pin) {
 8007e0a:	88fb      	ldrh	r3, [r7, #6]
 8007e0c:	2b10      	cmp	r3, #16
 8007e0e:	d102      	bne.n	8007e16 <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 8007e10:	f7fe fe9a 	bl	8006b48 <trigger_hardware_emergency>
		return;
 8007e14:	e07e      	b.n	8007f14 <HAL_GPIO_EXTI_Callback+0x144>
	}

	if (GPIO_Pin == J1_Pin) {
 8007e16:	88fb      	ldrh	r3, [r7, #6]
 8007e18:	2b80      	cmp	r3, #128	@ 0x80
 8007e1a:	d145      	bne.n	8007ea8 <HAL_GPIO_EXTI_Callback+0xd8>
		if (!is_emergency_active() && !homing_active && !joy_mode_active
 8007e1c:	f7fe ffc4 	bl	8006da8 <is_emergency_active>
 8007e20:	4603      	mov	r3, r0
 8007e22:	f083 0301 	eor.w	r3, r3, #1
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d06e      	beq.n	8007f0a <HAL_GPIO_EXTI_Callback+0x13a>
 8007e2c:	4b3e      	ldr	r3, [pc, #248]	@ (8007f28 <HAL_GPIO_EXTI_Callback+0x158>)
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	f083 0301 	eor.w	r3, r3, #1
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d067      	beq.n	8007f0a <HAL_GPIO_EXTI_Callback+0x13a>
 8007e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8007f2c <HAL_GPIO_EXTI_Callback+0x15c>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	f083 0301 	eor.w	r3, r3, #1
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d060      	beq.n	8007f0a <HAL_GPIO_EXTI_Callback+0x13a>
				&& motion_sequence_state == MOTION_IDLE && !first_startup) {
 8007e48:	4b39      	ldr	r3, [pc, #228]	@ (8007f30 <HAL_GPIO_EXTI_Callback+0x160>)
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d15c      	bne.n	8007f0a <HAL_GPIO_EXTI_Callback+0x13a>
 8007e50:	4b38      	ldr	r3, [pc, #224]	@ (8007f34 <HAL_GPIO_EXTI_Callback+0x164>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	f083 0301 	eor.w	r3, r3, #1
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d055      	beq.n	8007f0a <HAL_GPIO_EXTI_Callback+0x13a>
			start_combined_trajectory(
 8007e5e:	4b36      	ldr	r3, [pc, #216]	@ (8007f38 <HAL_GPIO_EXTI_Callback+0x168>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
					sequence_pris_points[trajectory_sequence_index],
 8007e62:	4a36      	ldr	r2, [pc, #216]	@ (8007f3c <HAL_GPIO_EXTI_Callback+0x16c>)
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	4413      	add	r3, r2
 8007e68:	edd3 7a00 	vldr	s15, [r3]
			start_combined_trajectory(
 8007e6c:	4b32      	ldr	r3, [pc, #200]	@ (8007f38 <HAL_GPIO_EXTI_Callback+0x168>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
					sequence_rev_points[trajectory_sequence_index]);
 8007e70:	4a33      	ldr	r2, [pc, #204]	@ (8007f40 <HAL_GPIO_EXTI_Callback+0x170>)
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4413      	add	r3, r2
 8007e76:	ed93 7a00 	vldr	s14, [r3]
			start_combined_trajectory(
 8007e7a:	eef0 0a47 	vmov.f32	s1, s14
 8007e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e82:	f7fd ffcf 	bl	8005e24 <start_combined_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8007e86:	4b2c      	ldr	r3, [pc, #176]	@ (8007f38 <HAL_GPIO_EXTI_Callback+0x168>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	1c5a      	adds	r2, r3, #1
					% SEQUENCE_MAX_POINTS;
 8007e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8007f44 <HAL_GPIO_EXTI_Callback+0x174>)
 8007e8e:	fb83 3102 	smull	r3, r1, r3, r2
 8007e92:	17d3      	asrs	r3, r2, #31
 8007e94:	1ac9      	subs	r1, r1, r3
 8007e96:	460b      	mov	r3, r1
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	440b      	add	r3, r1
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	1ad1      	subs	r1, r2, r3
			trajectory_sequence_index = (trajectory_sequence_index + 1)
 8007ea0:	b2ca      	uxtb	r2, r1
 8007ea2:	4b25      	ldr	r3, [pc, #148]	@ (8007f38 <HAL_GPIO_EXTI_Callback+0x168>)
 8007ea4:	701a      	strb	r2, [r3, #0]
		}
		return;
 8007ea6:	e030      	b.n	8007f0a <HAL_GPIO_EXTI_Callback+0x13a>
	}

	// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 8007ea8:	88fb      	ldrh	r3, [r7, #6]
 8007eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eae:	d116      	bne.n	8007ede <HAL_GPIO_EXTI_Callback+0x10e>
		if (!is_emergency_active() && !joy_mode_active
 8007eb0:	f7fe ff7a 	bl	8006da8 <is_emergency_active>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	f083 0301 	eor.w	r3, r3, #1
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d026      	beq.n	8007f0e <HAL_GPIO_EXTI_Callback+0x13e>
 8007ec0:	4b1a      	ldr	r3, [pc, #104]	@ (8007f2c <HAL_GPIO_EXTI_Callback+0x15c>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	f083 0301 	eor.w	r3, r3, #1
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01f      	beq.n	8007f0e <HAL_GPIO_EXTI_Callback+0x13e>
				&& motion_sequence_state == MOTION_IDLE) {
 8007ece:	4b18      	ldr	r3, [pc, #96]	@ (8007f30 <HAL_GPIO_EXTI_Callback+0x160>)
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d11b      	bne.n	8007f0e <HAL_GPIO_EXTI_Callback+0x13e>
			start_homing_sequence(false);
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	f7fd fa46 	bl	8005368 <start_homing_sequence>
		}
		return;
 8007edc:	e017      	b.n	8007f0e <HAL_GPIO_EXTI_Callback+0x13e>
	}

	// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 8007ede:	88fb      	ldrh	r3, [r7, #6]
 8007ee0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ee4:	d116      	bne.n	8007f14 <HAL_GPIO_EXTI_Callback+0x144>
		if (joy_mode_active) {
 8007ee6:	4b11      	ldr	r3, [pc, #68]	@ (8007f2c <HAL_GPIO_EXTI_Callback+0x15c>)
 8007ee8:	781b      	ldrb	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d002      	beq.n	8007ef4 <HAL_GPIO_EXTI_Callback+0x124>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 8007eee:	f7fe ffdd 	bl	8006eac <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
			start_homing_sequence(true);
		}
		return;
 8007ef2:	e00e      	b.n	8007f12 <HAL_GPIO_EXTI_Callback+0x142>
		} else if (is_emergency_active()) {
 8007ef4:	f7fe ff58 	bl	8006da8 <is_emergency_active>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d009      	beq.n	8007f12 <HAL_GPIO_EXTI_Callback+0x142>
			clear_emergency_state();
 8007efe:	f7fe fe61 	bl	8006bc4 <clear_emergency_state>
			start_homing_sequence(true);
 8007f02:	2001      	movs	r0, #1
 8007f04:	f7fd fa30 	bl	8005368 <start_homing_sequence>
		return;
 8007f08:	e003      	b.n	8007f12 <HAL_GPIO_EXTI_Callback+0x142>
		return;
 8007f0a:	bf00      	nop
 8007f0c:	e002      	b.n	8007f14 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8007f0e:	bf00      	nop
 8007f10:	e000      	b.n	8007f14 <HAL_GPIO_EXTI_Callback+0x144>
		return;
 8007f12:	bf00      	nop
	}
}
 8007f14:	3708      	adds	r7, #8
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
 8007f1a:	bf00      	nop
 8007f1c:	20000364 	.word	0x20000364
 8007f20:	20000368 	.word	0x20000368
 8007f24:	20000369 	.word	0x20000369
 8007f28:	2000036b 	.word	0x2000036b
 8007f2c:	20000385 	.word	0x20000385
 8007f30:	20000308 	.word	0x20000308
 8007f34:	20000133 	.word	0x20000133
 8007f38:	2000035c 	.word	0x2000035c
 8007f3c:	08013b68 	.word	0x08013b68
 8007f40:	08013b80 	.word	0x08013b80
 8007f44:	2aaaaaab 	.word	0x2aaaaaab

08007f48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
    if (htim == &htim2) {
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a9d      	ldr	r2, [pc, #628]	@ (80081c8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	f040 8133 	bne.w	80081c0 <HAL_TIM_PeriodElapsedCallback+0x278>
        plotter_update_sensors();
 8007f5a:	f000 fd43 	bl	80089e4 <plotter_update_sensors>

        check_emergency_button();
 8007f5e:	f7fe fd63 	bl	8006a28 <check_emergency_button>

        QEI_get_diff_count(&prismatic_encoder);
 8007f62:	489a      	ldr	r0, [pc, #616]	@ (80081cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007f64:	f7fb fce8 	bl	8003938 <QEI_get_diff_count>
        QEI_compute_data(&prismatic_encoder);
 8007f68:	4898      	ldr	r0, [pc, #608]	@ (80081cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8007f6a:	f7fb fdd1 	bl	8003b10 <QEI_compute_data>
        QEI_get_diff_count(&revolute_encoder);
 8007f6e:	4898      	ldr	r0, [pc, #608]	@ (80081d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8007f70:	f7fb fce2 	bl	8003938 <QEI_get_diff_count>
        QEI_compute_data(&revolute_encoder);
 8007f74:	4896      	ldr	r0, [pc, #600]	@ (80081d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8007f76:	f7fb fdcb 	bl	8003b10 <QEI_compute_data>

        revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8007f7a:	4b96      	ldr	r3, [pc, #600]	@ (80081d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007f7c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007f80:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8007f84:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8007f88:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 80081d8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8007f8c:	eddf 0a93 	vldr	s1, [pc, #588]	@ 80081dc <HAL_TIM_PeriodElapsedCallback+0x294>
 8007f90:	eeb0 0a67 	vmov.f32	s0, s15
 8007f94:	f7f9 ff3f 	bl	8001e16 <mapf>
 8007f98:	eef0 7a40 	vmov.f32	s15, s0
 8007f9c:	4b8d      	ldr	r3, [pc, #564]	@ (80081d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007f9e:	edc3 7a08 	vstr	s15, [r3, #32]
                65535.0f, -12.0f, 12.0f);
        revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8007fa2:	4b8c      	ldr	r3, [pc, #560]	@ (80081d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007fa4:	edd3 7a08 	vldr	s15, [r3, #32]
 8007fa8:	4b89      	ldr	r3, [pc, #548]	@ (80081d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8007faa:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8007fae:	eef0 0a47 	vmov.f32	s1, s14
 8007fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8007fb6:	488a      	ldr	r0, [pc, #552]	@ (80081e0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8007fb8:	f7fc fdda 	bl	8004b70 <SteadyStateKalmanFilter>
 8007fbc:	eef0 7a40 	vmov.f32	s15, s0
 8007fc0:	4b84      	ldr	r3, [pc, #528]	@ (80081d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007fc2:	edc3 7a07 	vstr	s15, [r3, #28]
                &revolute_kalman, revolute_axis.input_voltage,
                revolute_encoder.rads);

        if (isnan(revolute_axis.kalman_velocity)) {
 8007fc6:	4b83      	ldr	r3, [pc, #524]	@ (80081d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007fc8:	edd3 7a07 	vldr	s15, [r3, #28]
 8007fcc:	eef4 7a67 	vcmp.f32	s15, s15
 8007fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fd4:	d703      	bvc.n	8007fde <HAL_TIM_PeriodElapsedCallback+0x96>
            revolute_axis.kalman_velocity = 0.0f;
 8007fd6:	4b7f      	ldr	r3, [pc, #508]	@ (80081d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	61da      	str	r2, [r3, #28]
        }

        prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 8007fde:	4b81      	ldr	r3, [pc, #516]	@ (80081e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8007fe0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007fe4:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8007fe8:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8007fec:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 80081d8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8007ff0:	eddf 0a7a 	vldr	s1, [pc, #488]	@ 80081dc <HAL_TIM_PeriodElapsedCallback+0x294>
 8007ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8007ff8:	f7f9 ff0d 	bl	8001e16 <mapf>
 8007ffc:	eef0 7a40 	vmov.f32	s15, s0
 8008000:	4b78      	ldr	r3, [pc, #480]	@ (80081e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008002:	edc3 7a08 	vstr	s15, [r3, #32]
                -65535.0f, 65535.0f, -12.0f, 12.0f);
        prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008006:	4b77      	ldr	r3, [pc, #476]	@ (80081e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008008:	edd3 7a08 	vldr	s15, [r3, #32]
 800800c:	4b6f      	ldr	r3, [pc, #444]	@ (80081cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800800e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8008012:	eef0 0a47 	vmov.f32	s1, s14
 8008016:	eeb0 0a67 	vmov.f32	s0, s15
 800801a:	4873      	ldr	r0, [pc, #460]	@ (80081e8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 800801c:	f7fa fec8 	bl	8002db0 <MotorKalman_Estimate>
 8008020:	eeb0 7a40 	vmov.f32	s14, s0
                prismatic_axis.input_voltage, prismatic_encoder.rads)
                * Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008024:	4b71      	ldr	r3, [pc, #452]	@ (80081ec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8008026:	edd3 7a04 	vldr	s15, [r3, #16]
 800802a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800802e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80081f0 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 8008032:	ee67 7a87 	vmul.f32	s15, s15, s14
        prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008036:	4b6b      	ldr	r3, [pc, #428]	@ (80081e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8008038:	edc3 7a07 	vstr	s15, [r3, #28]

        if (isnan(prismatic_axis.kalman_velocity)) {
 800803c:	4b69      	ldr	r3, [pc, #420]	@ (80081e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800803e:	edd3 7a07 	vldr	s15, [r3, #28]
 8008042:	eef4 7a67 	vcmp.f32	s15, s15
 8008046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800804a:	d703      	bvc.n	8008054 <HAL_TIM_PeriodElapsedCallback+0x10c>
            prismatic_axis.kalman_velocity = 0.0f;
 800804c:	4b65      	ldr	r3, [pc, #404]	@ (80081e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800804e:	f04f 0200 	mov.w	r2, #0
 8008052:	61da      	str	r2, [r3, #28]
        }

        // Position control update - Allow during HOMING_REV_TO_ZERO_DEG
        if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8008054:	4b67      	ldr	r3, [pc, #412]	@ (80081f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	3301      	adds	r3, #1
 800805a:	4a66      	ldr	r2, [pc, #408]	@ (80081f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 800805c:	6013      	str	r3, [r2, #0]
 800805e:	2b09      	cmp	r3, #9
 8008060:	d92a      	bls.n	80080b8 <HAL_TIM_PeriodElapsedCallback+0x170>
            position_control_tick = 0;
 8008062:	4b64      	ldr	r3, [pc, #400]	@ (80081f4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008064:	2200      	movs	r2, #0
 8008066:	601a      	str	r2, [r3, #0]

            if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG)  // ← FIXED
 8008068:	4b63      	ldr	r3, [pc, #396]	@ (80081f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	f083 0301 	eor.w	r3, r3, #1
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b00      	cmp	r3, #0
 8008074:	d103      	bne.n	800807e <HAL_TIM_PeriodElapsedCallback+0x136>
 8008076:	4b61      	ldr	r3, [pc, #388]	@ (80081fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b07      	cmp	r3, #7
 800807c:	d11c      	bne.n	80080b8 <HAL_TIM_PeriodElapsedCallback+0x170>
                    && (!joy_mode_active
 800807e:	4b60      	ldr	r3, [pc, #384]	@ (8008200 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	f083 0301 	eor.w	r3, r3, #1
 8008086:	b2db      	uxtb	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d107      	bne.n	800809c <HAL_TIM_PeriodElapsedCallback+0x154>
                            || (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 800808c:	4b5d      	ldr	r3, [pc, #372]	@ (8008204 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d011      	beq.n	80080b8 <HAL_TIM_PeriodElapsedCallback+0x170>
                                    && joy_mode_state != JOY_MODE_INITIAL_CONTROL))
 8008094:	4b5b      	ldr	r3, [pc, #364]	@ (8008204 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	2b01      	cmp	r3, #1
 800809a:	d00d      	beq.n	80080b8 <HAL_TIM_PeriodElapsedCallback+0x170>
                    && (!is_emergency_active() || tuning_mode)) {
 800809c:	f7fe fe84 	bl	8006da8 <is_emergency_active>
 80080a0:	4603      	mov	r3, r0
 80080a2:	f083 0301 	eor.w	r3, r3, #1
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d103      	bne.n	80080b4 <HAL_TIM_PeriodElapsedCallback+0x16c>
 80080ac:	4b56      	ldr	r3, [pc, #344]	@ (8008208 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d001      	beq.n	80080b8 <HAL_TIM_PeriodElapsedCallback+0x170>
                update_position_control();
 80080b4:	f7fd fff0 	bl	8006098 <update_position_control>
            }
        }

        // Velocity control update - Allow during HOMING_REV_TO_ZERO_DEG
        if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG)  // ← FIXED
 80080b8:	4b4f      	ldr	r3, [pc, #316]	@ (80081f8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	f083 0301 	eor.w	r3, r3, #1
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d103      	bne.n	80080ce <HAL_TIM_PeriodElapsedCallback+0x186>
 80080c6:	4b4d      	ldr	r3, [pc, #308]	@ (80081fc <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b07      	cmp	r3, #7
 80080cc:	d11c      	bne.n	8008108 <HAL_TIM_PeriodElapsedCallback+0x1c0>
                && (!joy_mode_active
 80080ce:	4b4c      	ldr	r3, [pc, #304]	@ (8008200 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	f083 0301 	eor.w	r3, r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d107      	bne.n	80080ec <HAL_TIM_PeriodElapsedCallback+0x1a4>
                        || (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 80080dc:	4b49      	ldr	r3, [pc, #292]	@ (8008204 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d011      	beq.n	8008108 <HAL_TIM_PeriodElapsedCallback+0x1c0>
                                && joy_mode_state != JOY_MODE_INITIAL_CONTROL))
 80080e4:	4b47      	ldr	r3, [pc, #284]	@ (8008204 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d00d      	beq.n	8008108 <HAL_TIM_PeriodElapsedCallback+0x1c0>
                && (!is_emergency_active() || tuning_mode)) {
 80080ec:	f7fe fe5c 	bl	8006da8 <is_emergency_active>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f083 0301 	eor.w	r3, r3, #1
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d103      	bne.n	8008104 <HAL_TIM_PeriodElapsedCallback+0x1bc>
 80080fc:	4b42      	ldr	r3, [pc, #264]	@ (8008208 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <HAL_TIM_PeriodElapsedCallback+0x1c0>
            update_velocity_control();
 8008104:	f7fe f888 	bl	8006218 <update_velocity_control>
        }

        update_safety_system();
 8008108:	f7fe fdcc 	bl	8006ca4 <update_safety_system>

        if (!is_emergency_active() || tuning_mode) {
 800810c:	f7fe fe4c 	bl	8006da8 <is_emergency_active>
 8008110:	4603      	mov	r3, r0
 8008112:	f083 0301 	eor.w	r3, r3, #1
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b00      	cmp	r3, #0
 800811a:	d103      	bne.n	8008124 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 800811c:	4b3a      	ldr	r3, [pc, #232]	@ (8008208 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <HAL_TIM_PeriodElapsedCallback+0x1e0>
            check_safety_conditions();
 8008124:	f7fe fca2 	bl	8006a6c <check_safety_conditions>
        }

        // Control loops - joy mode handles its own control
        if (!joy_mode_active) {
 8008128:	4b35      	ldr	r3, [pc, #212]	@ (8008200 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	f083 0301 	eor.w	r3, r3, #1
 8008130:	b2db      	uxtb	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d002      	beq.n	800813c <HAL_TIM_PeriodElapsedCallback+0x1f4>
            update_control_loops();
 8008136:	f7fe fa83 	bl	8006640 <update_control_loops>
 800813a:	e001      	b.n	8008140 <HAL_TIM_PeriodElapsedCallback+0x1f8>
        } else {
            update_joy_mode();
 800813c:	f7ff fbf0 	bl	8007920 <update_joy_mode>
        }

        // ALWAYS update display values
        if (!joy_mode_active) {
 8008140:	4b2f      	ldr	r3, [pc, #188]	@ (8008200 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	f083 0301 	eor.w	r3, r3, #1
 8008148:	b2db      	uxtb	r3, r3
 800814a:	2b00      	cmp	r3, #0
 800814c:	d01e      	beq.n	800818c <HAL_TIM_PeriodElapsedCallback+0x244>
            // Update display values for normal operation
            normalized_position = normalize_angle(revolute_encoder.rads);
 800814e:	4b20      	ldr	r3, [pc, #128]	@ (80081d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8008150:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8008154:	eeb0 0a67 	vmov.f32	s0, s15
 8008158:	f7fd fd7a 	bl	8005c50 <normalize_angle>
 800815c:	eef0 7a40 	vmov.f32	s15, s0
 8008160:	4b2a      	ldr	r3, [pc, #168]	@ (800820c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008162:	edc3 7a00 	vstr	s15, [r3]
            prismatic_axis.mm = prismatic_encoder.mm;
 8008166:	4b19      	ldr	r3, [pc, #100]	@ (80081cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 8008168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800816a:	4a1e      	ldr	r2, [pc, #120]	@ (80081e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800816c:	6393      	str	r3, [r2, #56]	@ 0x38
            revolute_axis.deg = UnitConverter_angle(&converter_system,
 800816e:	4b27      	ldr	r3, [pc, #156]	@ (800820c <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008170:	edd3 7a00 	vldr	s15, [r3]
 8008174:	220e      	movs	r2, #14
 8008176:	210f      	movs	r1, #15
 8008178:	eeb0 0a67 	vmov.f32	s0, s15
 800817c:	4824      	ldr	r0, [pc, #144]	@ (8008210 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800817e:	f7fc fa7b 	bl	8004678 <UnitConverter_angle>
 8008182:	eef0 7a40 	vmov.f32	s15, s0
 8008186:	4b13      	ldr	r3, [pc, #76]	@ (80081d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8008188:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
                    normalized_position, UNIT_RADIAN, UNIT_DEGREE);
        }
        // Note: joy mode updates its own display values in update_joy_mode()

        prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel, prismatic_encoder.mmpss);
 800818c:	4b0f      	ldr	r3, [pc, #60]	@ (80081cc <HAL_TIM_PeriodElapsedCallback+0x284>)
 800818e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008192:	eeb0 0a67 	vmov.f32	s0, s15
 8008196:	481f      	ldr	r0, [pc, #124]	@ (8008214 <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8008198:	f7f9 fde4 	bl	8001d64 <FIR_process>
 800819c:	eef0 7a40 	vmov.f32	s15, s0
 80081a0:	4b10      	ldr	r3, [pc, #64]	@ (80081e4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80081a2:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
        revolute_axis.accel_show = FIR_process(&revolute_lp_accel, revolute_encoder.radpss);
 80081a6:	4b0a      	ldr	r3, [pc, #40]	@ (80081d0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 80081a8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80081ac:	eeb0 0a67 	vmov.f32	s0, s15
 80081b0:	4819      	ldr	r0, [pc, #100]	@ (8008218 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80081b2:	f7f9 fdd7 	bl	8001d64 <FIR_process>
 80081b6:	eef0 7a40 	vmov.f32	s15, s0
 80081ba:	4b06      	ldr	r3, [pc, #24]	@ (80081d4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80081bc:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    }
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	20001a54 	.word	0x20001a54
 80081cc:	20000494 	.word	0x20000494
 80081d0:	200004f0 	.word	0x200004f0
 80081d4:	200002c4 	.word	0x200002c4
 80081d8:	477fff00 	.word	0x477fff00
 80081dc:	c77fff00 	.word	0xc77fff00
 80081e0:	20001594 	.word	0x20001594
 80081e4:	20000280 	.word	0x20000280
 80081e8:	20001228 	.word	0x20001228
 80081ec:	20000100 	.word	0x20000100
 80081f0:	447a0000 	.word	0x447a0000
 80081f4:	20000378 	.word	0x20000378
 80081f8:	2000036b 	.word	0x2000036b
 80081fc:	2000036a 	.word	0x2000036a
 8008200:	20000385 	.word	0x20000385
 8008204:	20000384 	.word	0x20000384
 8008208:	20000134 	.word	0x20000134
 800820c:	2000037c 	.word	0x2000037c
 8008210:	20000888 	.word	0x20000888
 8008214:	20000ae0 	.word	0x20000ae0
 8008218:	20000aec 	.word	0x20000aec

0800821c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800821c:	b480      	push	{r7}
 800821e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008220:	b672      	cpsid	i
}
 8008222:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008224:	bf00      	nop
 8008226:	e7fd      	b.n	8008224 <Error_Handler+0x8>

08008228 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8008228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800822c:	ed2d 8b02 	vpush	{d8}
 8008230:	b083      	sub	sp, #12
 8008232:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008234:	4bc6      	ldr	r3, [pc, #792]	@ (8008550 <plotter_begin+0x328>)
 8008236:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 800823a:	4bc6      	ldr	r3, [pc, #792]	@ (8008554 <plotter_begin+0x32c>)
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	4618      	mov	r0, r3
 8008240:	f7f8 f94e 	bl	80004e0 <__aeabi_f2d>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	4620      	mov	r0, r4
 800824a:	4629      	mov	r1, r5
 800824c:	f7f8 f9a0 	bl	8000590 <__aeabi_dmul>
 8008250:	4602      	mov	r2, r0
 8008252:	460b      	mov	r3, r1
 8008254:	4610      	mov	r0, r2
 8008256:	4619      	mov	r1, r3
 8008258:	f04f 0200 	mov.w	r2, #0
 800825c:	4bbe      	ldr	r3, [pc, #760]	@ (8008558 <plotter_begin+0x330>)
 800825e:	f7f8 f997 	bl	8000590 <__aeabi_dmul>
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8008266:	49ba      	ldr	r1, [pc, #744]	@ (8008550 <plotter_begin+0x328>)
 8008268:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 800826c:	4bb8      	ldr	r3, [pc, #736]	@ (8008550 <plotter_begin+0x328>)
 800826e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8008272:	4602      	mov	r2, r0
 8008274:	460b      	mov	r3, r1
 8008276:	f7f7 ffd5 	bl	8000224 <__adddf3>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	49b4      	ldr	r1, [pc, #720]	@ (8008550 <plotter_begin+0x328>)
 8008280:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 8008284:	49b2      	ldr	r1, [pc, #712]	@ (8008550 <plotter_begin+0x328>)
 8008286:	f04f 0200 	mov.w	r2, #0
 800828a:	4bb4      	ldr	r3, [pc, #720]	@ (800855c <plotter_begin+0x334>)
 800828c:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8008290:	49af      	ldr	r1, [pc, #700]	@ (8008550 <plotter_begin+0x328>)
 8008292:	f04f 0200 	mov.w	r2, #0
 8008296:	4bb0      	ldr	r3, [pc, #704]	@ (8008558 <plotter_begin+0x330>)
 8008298:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 800829c:	4bb0      	ldr	r3, [pc, #704]	@ (8008560 <plotter_begin+0x338>)
 800829e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 80082a2:	a3a9      	add	r3, pc, #676	@ (adr r3, 8008548 <plotter_begin+0x320>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f8 f972 	bl	8000590 <__aeabi_dmul>
 80082ac:	4602      	mov	r2, r0
 80082ae:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 80082b0:	49ab      	ldr	r1, [pc, #684]	@ (8008560 <plotter_begin+0x338>)
 80082b2:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 80082b6:	49aa      	ldr	r1, [pc, #680]	@ (8008560 <plotter_begin+0x338>)
 80082b8:	f04f 0200 	mov.w	r2, #0
 80082bc:	4ba9      	ldr	r3, [pc, #676]	@ (8008564 <plotter_begin+0x33c>)
 80082be:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 2.0;
 80082c2:	49a7      	ldr	r1, [pc, #668]	@ (8008560 <plotter_begin+0x338>)
 80082c4:	f04f 0200 	mov.w	r2, #0
 80082c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80082cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 80082d0:	2100      	movs	r1, #0
 80082d2:	48a5      	ldr	r0, [pc, #660]	@ (8008568 <plotter_begin+0x340>)
 80082d4:	f000 fc4c 	bl	8008b70 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 80082d8:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 800856c <plotter_begin+0x344>
 80082dc:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8008570 <plotter_begin+0x348>
 80082e0:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 80085a8 <plotter_begin+0x380>
 80082e4:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 80085a8 <plotter_begin+0x380>
 80082e8:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8008574 <plotter_begin+0x34c>
 80082ec:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 800856c <plotter_begin+0x344>
 80082f0:	489d      	ldr	r0, [pc, #628]	@ (8008568 <plotter_begin+0x340>)
 80082f2:	f000 fc9b 	bl	8008c2c <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 80082f6:	2102      	movs	r1, #2
 80082f8:	489f      	ldr	r0, [pc, #636]	@ (8008578 <plotter_begin+0x350>)
 80082fa:	f000 fc39 	bl	8008b70 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 80082fe:	ed9f 3a9b 	vldr	s6, [pc, #620]	@ 800856c <plotter_begin+0x344>
 8008302:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 8008570 <plotter_begin+0x348>
 8008306:	ed9f 2aa8 	vldr	s4, [pc, #672]	@ 80085a8 <plotter_begin+0x380>
 800830a:	eddf 1aa7 	vldr	s3, [pc, #668]	@ 80085a8 <plotter_begin+0x380>
 800830e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008312:	eddf 0a98 	vldr	s1, [pc, #608]	@ 8008574 <plotter_begin+0x34c>
 8008316:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 800856c <plotter_begin+0x344>
 800831a:	4897      	ldr	r0, [pc, #604]	@ (8008578 <plotter_begin+0x350>)
 800831c:	f000 fcb1 	bl	8008c82 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8008320:	2100      	movs	r1, #0
 8008322:	4896      	ldr	r0, [pc, #600]	@ (800857c <plotter_begin+0x354>)
 8008324:	f000 fc24 	bl	8008b70 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8008328:	eddf 2a95 	vldr	s5, [pc, #596]	@ 8008580 <plotter_begin+0x358>
 800832c:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 8008584 <plotter_begin+0x35c>
 8008330:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 80085a8 <plotter_begin+0x380>
 8008334:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 80085a8 <plotter_begin+0x380>
 8008338:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8008574 <plotter_begin+0x34c>
 800833c:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8008580 <plotter_begin+0x358>
 8008340:	488e      	ldr	r0, [pc, #568]	@ (800857c <plotter_begin+0x354>)
 8008342:	f000 fc73 	bl	8008c2c <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8008346:	2102      	movs	r1, #2
 8008348:	488f      	ldr	r0, [pc, #572]	@ (8008588 <plotter_begin+0x360>)
 800834a:	f000 fc11 	bl	8008b70 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 800834e:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8008352:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8008356:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 80085a8 <plotter_begin+0x380>
 800835a:	eddf 1a93 	vldr	s3, [pc, #588]	@ 80085a8 <plotter_begin+0x380>
 800835e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008362:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8008574 <plotter_begin+0x34c>
 8008366:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 800836a:	4887      	ldr	r0, [pc, #540]	@ (8008588 <plotter_begin+0x360>)
 800836c:	f000 fc89 	bl	8008c82 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8008370:	2100      	movs	r1, #0
 8008372:	4886      	ldr	r0, [pc, #536]	@ (800858c <plotter_begin+0x364>)
 8008374:	f000 fbfc 	bl	8008b70 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008378:	4b75      	ldr	r3, [pc, #468]	@ (8008550 <plotter_begin+0x328>)
 800837a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800837e:	4610      	mov	r0, r2
 8008380:	4619      	mov	r1, r3
 8008382:	f7f8 fbe7 	bl	8000b54 <__aeabi_d2f>
 8008386:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8008388:	4b71      	ldr	r3, [pc, #452]	@ (8008550 <plotter_begin+0x328>)
 800838a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800838e:	4610      	mov	r0, r2
 8008390:	4619      	mov	r1, r3
 8008392:	f7f8 fbdf 	bl	8000b54 <__aeabi_d2f>
 8008396:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008398:	ee07 3a90 	vmov	s15, r3
 800839c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 80083a0:	4b6b      	ldr	r3, [pc, #428]	@ (8008550 <plotter_begin+0x328>)
 80083a2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80083a6:	4610      	mov	r0, r2
 80083a8:	4619      	mov	r1, r3
 80083aa:	f7f8 fbd3 	bl	8000b54 <__aeabi_d2f>
 80083ae:	4603      	mov	r3, r0
 80083b0:	ee02 3a90 	vmov	s5, r3
 80083b4:	eeb0 2a48 	vmov.f32	s4, s16
 80083b8:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 80085a8 <plotter_begin+0x380>
 80083bc:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 80085a8 <plotter_begin+0x380>
 80083c0:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8008574 <plotter_begin+0x34c>
 80083c4:	ee00 4a10 	vmov	s0, r4
 80083c8:	4870      	ldr	r0, [pc, #448]	@ (800858c <plotter_begin+0x364>)
 80083ca:	f000 fc2f 	bl	8008c2c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 80083ce:	2102      	movs	r1, #2
 80083d0:	486f      	ldr	r0, [pc, #444]	@ (8008590 <plotter_begin+0x368>)
 80083d2:	f000 fbcd 	bl	8008b70 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80083d6:	4b5e      	ldr	r3, [pc, #376]	@ (8008550 <plotter_begin+0x328>)
 80083d8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80083dc:	4610      	mov	r0, r2
 80083de:	4619      	mov	r1, r3
 80083e0:	f7f8 fbb8 	bl	8000b54 <__aeabi_d2f>
 80083e4:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80083e6:	4b5a      	ldr	r3, [pc, #360]	@ (8008550 <plotter_begin+0x328>)
 80083e8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80083ec:	4610      	mov	r0, r2
 80083ee:	4619      	mov	r1, r3
 80083f0:	f7f8 fbb0 	bl	8000b54 <__aeabi_d2f>
 80083f4:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80083f6:	ee07 3a90 	vmov	s15, r3
 80083fa:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 80083fe:	4b54      	ldr	r3, [pc, #336]	@ (8008550 <plotter_begin+0x328>)
 8008400:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8008404:	4610      	mov	r0, r2
 8008406:	4619      	mov	r1, r3
 8008408:	f7f8 fba4 	bl	8000b54 <__aeabi_d2f>
 800840c:	4603      	mov	r3, r0
 800840e:	ee03 3a10 	vmov	s6, r3
 8008412:	eef0 2a48 	vmov.f32	s5, s16
 8008416:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 80085a8 <plotter_begin+0x380>
 800841a:	eddf 1a63 	vldr	s3, [pc, #396]	@ 80085a8 <plotter_begin+0x380>
 800841e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8008422:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8008574 <plotter_begin+0x34c>
 8008426:	ee00 4a10 	vmov	s0, r4
 800842a:	4859      	ldr	r0, [pc, #356]	@ (8008590 <plotter_begin+0x368>)
 800842c:	f000 fc29 	bl	8008c82 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8008430:	2100      	movs	r1, #0
 8008432:	4858      	ldr	r0, [pc, #352]	@ (8008594 <plotter_begin+0x36c>)
 8008434:	f000 fb9c 	bl	8008b70 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008438:	4b49      	ldr	r3, [pc, #292]	@ (8008560 <plotter_begin+0x338>)
 800843a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800843e:	4610      	mov	r0, r2
 8008440:	4619      	mov	r1, r3
 8008442:	f7f8 fb87 	bl	8000b54 <__aeabi_d2f>
 8008446:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8008448:	4b45      	ldr	r3, [pc, #276]	@ (8008560 <plotter_begin+0x338>)
 800844a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800844e:	4610      	mov	r0, r2
 8008450:	4619      	mov	r1, r3
 8008452:	f7f8 fb7f 	bl	8000b54 <__aeabi_d2f>
 8008456:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008458:	ee07 3a90 	vmov	s15, r3
 800845c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8008460:	4b3f      	ldr	r3, [pc, #252]	@ (8008560 <plotter_begin+0x338>)
 8008462:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008466:	4610      	mov	r0, r2
 8008468:	4619      	mov	r1, r3
 800846a:	f7f8 fb73 	bl	8000b54 <__aeabi_d2f>
 800846e:	4603      	mov	r3, r0
 8008470:	ee02 3a90 	vmov	s5, r3
 8008474:	eeb0 2a48 	vmov.f32	s4, s16
 8008478:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 80085a8 <plotter_begin+0x380>
 800847c:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80085a8 <plotter_begin+0x380>
 8008480:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8008574 <plotter_begin+0x34c>
 8008484:	ee00 4a10 	vmov	s0, r4
 8008488:	4842      	ldr	r0, [pc, #264]	@ (8008594 <plotter_begin+0x36c>)
 800848a:	f000 fbcf 	bl	8008c2c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 800848e:	2102      	movs	r1, #2
 8008490:	4841      	ldr	r0, [pc, #260]	@ (8008598 <plotter_begin+0x370>)
 8008492:	f000 fb6d 	bl	8008b70 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8008496:	4b32      	ldr	r3, [pc, #200]	@ (8008560 <plotter_begin+0x338>)
 8008498:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800849c:	4610      	mov	r0, r2
 800849e:	4619      	mov	r1, r3
 80084a0:	f7f8 fb58 	bl	8000b54 <__aeabi_d2f>
 80084a4:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80084a6:	4b2e      	ldr	r3, [pc, #184]	@ (8008560 <plotter_begin+0x338>)
 80084a8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80084ac:	4610      	mov	r0, r2
 80084ae:	4619      	mov	r1, r3
 80084b0:	f7f8 fb50 	bl	8000b54 <__aeabi_d2f>
 80084b4:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80084be:	4b28      	ldr	r3, [pc, #160]	@ (8008560 <plotter_begin+0x338>)
 80084c0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80084c4:	4610      	mov	r0, r2
 80084c6:	4619      	mov	r1, r3
 80084c8:	f7f8 fb44 	bl	8000b54 <__aeabi_d2f>
 80084cc:	4603      	mov	r3, r0
 80084ce:	ee03 3a10 	vmov	s6, r3
 80084d2:	eef0 2a48 	vmov.f32	s5, s16
 80084d6:	ed9f 2a34 	vldr	s4, [pc, #208]	@ 80085a8 <plotter_begin+0x380>
 80084da:	eddf 1a33 	vldr	s3, [pc, #204]	@ 80085a8 <plotter_begin+0x380>
 80084de:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80084e2:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8008574 <plotter_begin+0x34c>
 80084e6:	ee00 4a10 	vmov	s0, r4
 80084ea:	482b      	ldr	r0, [pc, #172]	@ (8008598 <plotter_begin+0x370>)
 80084ec:	f000 fbc9 	bl	8008c82 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 80084f0:	482a      	ldr	r0, [pc, #168]	@ (800859c <plotter_begin+0x374>)
 80084f2:	f7fc f82b 	bl	800454c <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 80084f6:	4b17      	ldr	r3, [pc, #92]	@ (8008554 <plotter_begin+0x32c>)
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7f7 fff0 	bl	80004e0 <__aeabi_f2d>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	f7f7 fe8e 	bl	8000224 <__adddf3>
 8008508:	4602      	mov	r2, r0
 800850a:	460b      	mov	r3, r1
 800850c:	4610      	mov	r0, r2
 800850e:	4619      	mov	r1, r3
 8008510:	f04f 0200 	mov.w	r2, #0
 8008514:	4b10      	ldr	r3, [pc, #64]	@ (8008558 <plotter_begin+0x330>)
 8008516:	f7f8 f83b 	bl	8000590 <__aeabi_dmul>
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 800851e:	4610      	mov	r0, r2
 8008520:	4619      	mov	r1, r3
 8008522:	f7f8 fb17 	bl	8000b54 <__aeabi_d2f>
 8008526:	4603      	mov	r3, r0
 8008528:	ee00 3a90 	vmov	s1, r3
 800852c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008530:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008534:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008538:	4919      	ldr	r1, [pc, #100]	@ (80085a0 <plotter_begin+0x378>)
 800853a:	481a      	ldr	r0, [pc, #104]	@ (80085a4 <plotter_begin+0x37c>)
 800853c:	f7fb f98a 	bl	8003854 <QEI_init>
 8008540:	e034      	b.n	80085ac <plotter_begin+0x384>
 8008542:	bf00      	nop
 8008544:	f3af 8000 	nop.w
 8008548:	55555555 	.word	0x55555555
 800854c:	3fe55555 	.word	0x3fe55555
 8008550:	20000080 	.word	0x20000080
 8008554:	20000100 	.word	0x20000100
 8008558:	408f4000 	.word	0x408f4000
 800855c:	407f4000 	.word	0x407f4000
 8008560:	20000000 	.word	0x20000000
 8008564:	40140000 	.word	0x40140000
 8008568:	20000668 	.word	0x20000668
 800856c:	477fff00 	.word	0x477fff00
 8008570:	c77fff00 	.word	0xc77fff00
 8008574:	3dcccccd 	.word	0x3dcccccd
 8008578:	200006ac 	.word	0x200006ac
 800857c:	200006f0 	.word	0x200006f0
 8008580:	43480000 	.word	0x43480000
 8008584:	c3480000 	.word	0xc3480000
 8008588:	20000734 	.word	0x20000734
 800858c:	20000778 	.word	0x20000778
 8008590:	200007bc 	.word	0x200007bc
 8008594:	20000800 	.word	0x20000800
 8008598:	20000844 	.word	0x20000844
 800859c:	20000888 	.word	0x20000888
 80085a0:	20001cb8 	.word	0x20001cb8
 80085a4:	20000494 	.word	0x20000494
 80085a8:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 80085ac:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 80085a8 <plotter_begin+0x380>
 80085b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80085b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80085b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80085bc:	49b8      	ldr	r1, [pc, #736]	@ (80088a0 <plotter_begin+0x678>)
 80085be:	48b9      	ldr	r0, [pc, #740]	@ (80088a4 <plotter_begin+0x67c>)
 80085c0:	f7fb f948 	bl	8003854 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 80085c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085c8:	9300      	str	r3, [sp, #0]
 80085ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80085ce:	2204      	movs	r2, #4
 80085d0:	49b5      	ldr	r1, [pc, #724]	@ (80088a8 <plotter_begin+0x680>)
 80085d2:	48b6      	ldr	r0, [pc, #728]	@ (80088ac <plotter_begin+0x684>)
 80085d4:	f7f8 fed4 	bl	8001380 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 80085d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	4bb4      	ldr	r3, [pc, #720]	@ (80088b0 <plotter_begin+0x688>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	49b1      	ldr	r1, [pc, #708]	@ (80088a8 <plotter_begin+0x680>)
 80085e4:	48b3      	ldr	r0, [pc, #716]	@ (80088b4 <plotter_begin+0x68c>)
 80085e6:	f7f8 fecb 	bl	8001380 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 80085ea:	220c      	movs	r2, #12
 80085ec:	49b2      	ldr	r1, [pc, #712]	@ (80088b8 <plotter_begin+0x690>)
 80085ee:	48b3      	ldr	r0, [pc, #716]	@ (80088bc <plotter_begin+0x694>)
 80085f0:	f7fa ff04 	bl	80033fc <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 80085f4:	eddf 0ab2 	vldr	s1, [pc, #712]	@ 80088c0 <plotter_begin+0x698>
 80085f8:	ed9f 0ab2 	vldr	s0, [pc, #712]	@ 80088c4 <plotter_begin+0x69c>
 80085fc:	48ab      	ldr	r0, [pc, #684]	@ (80088ac <plotter_begin+0x684>)
 80085fe:	f7f8 fee3 	bl	80013c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8008602:	eddf 0aaf 	vldr	s1, [pc, #700]	@ 80088c0 <plotter_begin+0x698>
 8008606:	ed9f 0aaf 	vldr	s0, [pc, #700]	@ 80088c4 <plotter_begin+0x69c>
 800860a:	48aa      	ldr	r0, [pc, #680]	@ (80088b4 <plotter_begin+0x68c>)
 800860c:	f7f8 fedc 	bl	80013c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 8008610:	4bad      	ldr	r3, [pc, #692]	@ (80088c8 <plotter_begin+0x6a0>)
 8008612:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 8008616:	4610      	mov	r0, r2
 8008618:	4619      	mov	r1, r3
 800861a:	f7f8 fa9b 	bl	8000b54 <__aeabi_d2f>
 800861e:	4603      	mov	r3, r0
 8008620:	ee01 3a90 	vmov	s3, r3
 8008624:	ed9f 1aa9 	vldr	s2, [pc, #676]	@ 80088cc <plotter_begin+0x6a4>
 8008628:	eddf 0aa9 	vldr	s1, [pc, #676]	@ 80088d0 <plotter_begin+0x6a8>
 800862c:	ed9f 0aa9 	vldr	s0, [pc, #676]	@ 80088d4 <plotter_begin+0x6ac>
 8008630:	48a9      	ldr	r0, [pc, #676]	@ (80088d8 <plotter_begin+0x6b0>)
 8008632:	f7f8 fdbe 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8008636:	4ba4      	ldr	r3, [pc, #656]	@ (80088c8 <plotter_begin+0x6a0>)
 8008638:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 800863c:	4610      	mov	r0, r2
 800863e:	4619      	mov	r1, r3
 8008640:	f7f8 fa88 	bl	8000b54 <__aeabi_d2f>
 8008644:	4603      	mov	r3, r0
 8008646:	ee01 3a90 	vmov	s3, r3
 800864a:	ed9f 1a9d 	vldr	s2, [pc, #628]	@ 80088c0 <plotter_begin+0x698>
 800864e:	eddf 0aa3 	vldr	s1, [pc, #652]	@ 80088dc <plotter_begin+0x6b4>
 8008652:	ed9f 0aa3 	vldr	s0, [pc, #652]	@ 80088e0 <plotter_begin+0x6b8>
 8008656:	48a3      	ldr	r0, [pc, #652]	@ (80088e4 <plotter_begin+0x6bc>)
 8008658:	f7f8 fdab 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 100, 0.1, 450,
			ZGX45RGG_150RPM_Constant.qd_max);
 800865c:	4ba2      	ldr	r3, [pc, #648]	@ (80088e8 <plotter_begin+0x6c0>)
 800865e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 100, 0.1, 450,
 8008662:	4610      	mov	r0, r2
 8008664:	4619      	mov	r1, r3
 8008666:	f7f8 fa75 	bl	8000b54 <__aeabi_d2f>
 800866a:	4603      	mov	r3, r0
 800866c:	ee01 3a90 	vmov	s3, r3
 8008670:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 80088ec <plotter_begin+0x6c4>
 8008674:	eddf 0a9e 	vldr	s1, [pc, #632]	@ 80088f0 <plotter_begin+0x6c8>
 8008678:	ed9f 0a9e 	vldr	s0, [pc, #632]	@ 80088f4 <plotter_begin+0x6cc>
 800867c:	489e      	ldr	r0, [pc, #632]	@ (80088f8 <plotter_begin+0x6d0>)
 800867e:	f7f8 fd98 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
			ZGX45RGG_150RPM_Constant.U_max);
 8008682:	4b99      	ldr	r3, [pc, #612]	@ (80088e8 <plotter_begin+0x6c0>)
 8008684:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
 8008688:	4610      	mov	r0, r2
 800868a:	4619      	mov	r1, r3
 800868c:	f7f8 fa62 	bl	8000b54 <__aeabi_d2f>
 8008690:	4603      	mov	r3, r0
 8008692:	ee01 3a90 	vmov	s3, r3
 8008696:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 80088fc <plotter_begin+0x6d4>
 800869a:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 800869e:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 80088c4 <plotter_begin+0x69c>
 80086a2:	4897      	ldr	r0, [pc, #604]	@ (8008900 <plotter_begin+0x6d8>)
 80086a4:	f7f8 fd85 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 80086a8:	4b8f      	ldr	r3, [pc, #572]	@ (80088e8 <plotter_begin+0x6c0>)
 80086aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 80086ae:	4610      	mov	r0, r2
 80086b0:	4619      	mov	r1, r3
 80086b2:	f7f8 fa4f 	bl	8000b54 <__aeabi_d2f>
 80086b6:	4603      	mov	r3, r0
 80086b8:	ee01 3a90 	vmov	s3, r3
 80086bc:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 80088c4 <plotter_begin+0x69c>
 80086c0:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 80088f4 <plotter_begin+0x6cc>
 80086c4:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 8008904 <plotter_begin+0x6dc>
 80086c8:	488f      	ldr	r0, [pc, #572]	@ (8008908 <plotter_begin+0x6e0>)
 80086ca:	f7f8 fd72 	bl	80011b2 <PID_CONTROLLER_Init>


	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 80086ce:	4986      	ldr	r1, [pc, #536]	@ (80088e8 <plotter_begin+0x6c0>)
 80086d0:	488e      	ldr	r0, [pc, #568]	@ (800890c <plotter_begin+0x6e4>)
 80086d2:	f7f8 ff53 	bl	800157c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 80086d6:	497c      	ldr	r1, [pc, #496]	@ (80088c8 <plotter_begin+0x6a0>)
 80086d8:	488d      	ldr	r0, [pc, #564]	@ (8008910 <plotter_begin+0x6e8>)
 80086da:	f7f9 f8cd 	bl	8001878 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 80086de:	4a8d      	ldr	r2, [pc, #564]	@ (8008914 <plotter_begin+0x6ec>)
 80086e0:	4981      	ldr	r1, [pc, #516]	@ (80088e8 <plotter_begin+0x6c0>)
 80086e2:	488d      	ldr	r0, [pc, #564]	@ (8008918 <plotter_begin+0x6f0>)
 80086e4:	f7f8 ffd9 	bl	800169a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 80086e8:	4a8a      	ldr	r2, [pc, #552]	@ (8008914 <plotter_begin+0x6ec>)
 80086ea:	4977      	ldr	r1, [pc, #476]	@ (80088c8 <plotter_begin+0x6a0>)
 80086ec:	488b      	ldr	r0, [pc, #556]	@ (800891c <plotter_begin+0x6f4>)
 80086ee:	f7f9 f952 	bl	8001996 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 80086f2:	2302      	movs	r3, #2
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8008920 <plotter_begin+0x6f8>
 80086fa:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8008924 <plotter_begin+0x6fc>
 80086fe:	2364      	movs	r3, #100	@ 0x64
 8008700:	4a89      	ldr	r2, [pc, #548]	@ (8008928 <plotter_begin+0x700>)
 8008702:	498a      	ldr	r1, [pc, #552]	@ (800892c <plotter_begin+0x704>)
 8008704:	488a      	ldr	r0, [pc, #552]	@ (8008930 <plotter_begin+0x708>)
 8008706:	f7f8 fc0b 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 800870a:	2105      	movs	r1, #5
 800870c:	ed9f 0a89 	vldr	s0, [pc, #548]	@ 8008934 <plotter_begin+0x70c>
 8008710:	4887      	ldr	r0, [pc, #540]	@ (8008930 <plotter_begin+0x708>)
 8008712:	f7f8 fcb7 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8008716:	4886      	ldr	r0, [pc, #536]	@ (8008930 <plotter_begin+0x708>)
 8008718:	f7f8 fc5a 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800871c:	eddf 0a86 	vldr	s1, [pc, #536]	@ 8008938 <plotter_begin+0x710>
 8008720:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8008724:	211f      	movs	r1, #31
 8008726:	4885      	ldr	r0, [pc, #532]	@ (800893c <plotter_begin+0x714>)
 8008728:	f7f9 f9fc 	bl	8001b24 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800872c:	eddf 0a82 	vldr	s1, [pc, #520]	@ 8008938 <plotter_begin+0x710>
 8008730:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8008734:	211f      	movs	r1, #31
 8008736:	4882      	ldr	r0, [pc, #520]	@ (8008940 <plotter_begin+0x718>)
 8008738:	f7f9 f9f4 	bl	8001b24 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800873c:	4b62      	ldr	r3, [pc, #392]	@ (80088c8 <plotter_begin+0x6a0>)
 800873e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008742:	4610      	mov	r0, r2
 8008744:	4619      	mov	r1, r3
 8008746:	f7f8 fa05 	bl	8000b54 <__aeabi_d2f>
 800874a:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800874c:	4b5e      	ldr	r3, [pc, #376]	@ (80088c8 <plotter_begin+0x6a0>)
 800874e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008752:	4610      	mov	r0, r2
 8008754:	4619      	mov	r1, r3
 8008756:	f7f8 f9fd 	bl	8000b54 <__aeabi_d2f>
 800875a:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 800875c:	4b5a      	ldr	r3, [pc, #360]	@ (80088c8 <plotter_begin+0x6a0>)
 800875e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008762:	4610      	mov	r0, r2
 8008764:	4619      	mov	r1, r3
 8008766:	f7f8 f9f5 	bl	8000b54 <__aeabi_d2f>
 800876a:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800876c:	4b56      	ldr	r3, [pc, #344]	@ (80088c8 <plotter_begin+0x6a0>)
 800876e:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008772:	4610      	mov	r0, r2
 8008774:	4619      	mov	r1, r3
 8008776:	f7f8 f9ed 	bl	8000b54 <__aeabi_d2f>
 800877a:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 800877c:	4b52      	ldr	r3, [pc, #328]	@ (80088c8 <plotter_begin+0x6a0>)
 800877e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008782:	4610      	mov	r0, r2
 8008784:	4619      	mov	r1, r3
 8008786:	f7f8 f9e5 	bl	8000b54 <__aeabi_d2f>
 800878a:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 800878c:	4b4e      	ldr	r3, [pc, #312]	@ (80088c8 <plotter_begin+0x6a0>)
 800878e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8008792:	4610      	mov	r0, r2
 8008794:	4619      	mov	r1, r3
 8008796:	f7f8 f9dd 	bl	8000b54 <__aeabi_d2f>
 800879a:	4603      	mov	r3, r0
 800879c:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80087a0:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80087a4:	ee03 3a10 	vmov	s6, r3
 80087a8:	ee02 9a90 	vmov	s5, r9
 80087ac:	ee02 8a10 	vmov	s4, r8
 80087b0:	ee01 6a90 	vmov	s3, r6
 80087b4:	ee01 5a10 	vmov	s2, r5
 80087b8:	ee00 4a90 	vmov	s1, r4
 80087bc:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8008944 <plotter_begin+0x71c>
 80087c0:	4861      	ldr	r0, [pc, #388]	@ (8008948 <plotter_begin+0x720>)
 80087c2:	f7f9 fc07 	bl	8001fd4 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80087c6:	4b48      	ldr	r3, [pc, #288]	@ (80088e8 <plotter_begin+0x6c0>)
 80087c8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80087cc:	4610      	mov	r0, r2
 80087ce:	4619      	mov	r1, r3
 80087d0:	f7f8 f9c0 	bl	8000b54 <__aeabi_d2f>
 80087d4:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 80087d6:	4b44      	ldr	r3, [pc, #272]	@ (80088e8 <plotter_begin+0x6c0>)
 80087d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80087dc:	4610      	mov	r0, r2
 80087de:	4619      	mov	r1, r3
 80087e0:	f7f8 f9b8 	bl	8000b54 <__aeabi_d2f>
 80087e4:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 80087e6:	4b40      	ldr	r3, [pc, #256]	@ (80088e8 <plotter_begin+0x6c0>)
 80087e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80087ec:	4610      	mov	r0, r2
 80087ee:	4619      	mov	r1, r3
 80087f0:	f7f8 f9b0 	bl	8000b54 <__aeabi_d2f>
 80087f4:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 80087f6:	4b3c      	ldr	r3, [pc, #240]	@ (80088e8 <plotter_begin+0x6c0>)
 80087f8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80087fc:	a326      	add	r3, pc, #152	@ (adr r3, 8008898 <plotter_begin+0x670>)
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	f7f7 fec5 	bl	8000590 <__aeabi_dmul>
 8008806:	4602      	mov	r2, r0
 8008808:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800880a:	4610      	mov	r0, r2
 800880c:	4619      	mov	r1, r3
 800880e:	f7f8 f9a1 	bl	8000b54 <__aeabi_d2f>
 8008812:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8008814:	4b34      	ldr	r3, [pc, #208]	@ (80088e8 <plotter_begin+0x6c0>)
 8008816:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800881a:	4610      	mov	r0, r2
 800881c:	4619      	mov	r1, r3
 800881e:	f7f8 f999 	bl	8000b54 <__aeabi_d2f>
 8008822:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 8008824:	4b30      	ldr	r3, [pc, #192]	@ (80088e8 <plotter_begin+0x6c0>)
 8008826:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 800882a:	4610      	mov	r0, r2
 800882c:	4619      	mov	r1, r3
 800882e:	f7f8 f991 	bl	8000b54 <__aeabi_d2f>
 8008832:	4603      	mov	r3, r0
 8008834:	4945      	ldr	r1, [pc, #276]	@ (800894c <plotter_begin+0x724>)
 8008836:	4846      	ldr	r0, [pc, #280]	@ (8008950 <plotter_begin+0x728>)
 8008838:	ed9f 3a42 	vldr	s6, [pc, #264]	@ 8008944 <plotter_begin+0x71c>
 800883c:	ee02 3a90 	vmov	s5, r3
 8008840:	ee02 9a10 	vmov	s4, r9
 8008844:	ee01 8a90 	vmov	s3, r8
 8008848:	ee01 6a10 	vmov	s2, r6
 800884c:	ee00 5a90 	vmov	s1, r5
 8008850:	ee00 4a10 	vmov	s0, r4
 8008854:	f7fa fd6a 	bl	800332c <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 8008858:	eddf 0a3e 	vldr	s1, [pc, #248]	@ 8008954 <plotter_begin+0x72c>
 800885c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008860:	4a3a      	ldr	r2, [pc, #232]	@ (800894c <plotter_begin+0x724>)
 8008862:	493b      	ldr	r1, [pc, #236]	@ (8008950 <plotter_begin+0x728>)
 8008864:	483c      	ldr	r0, [pc, #240]	@ (8008958 <plotter_begin+0x730>)
 8008866:	f7fc facd 	bl	8004e04 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 800886a:	23c8      	movs	r3, #200	@ 0xc8
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	2315      	movs	r3, #21
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	4b3a      	ldr	r3, [pc, #232]	@ (800895c <plotter_begin+0x734>)
 8008874:	4a3a      	ldr	r2, [pc, #232]	@ (8008960 <plotter_begin+0x738>)
 8008876:	493b      	ldr	r1, [pc, #236]	@ (8008964 <plotter_begin+0x73c>)
 8008878:	483b      	ldr	r0, [pc, #236]	@ (8008968 <plotter_begin+0x740>)
 800887a:	f7f9 fb43 	bl	8001f04 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 800887e:	483b      	ldr	r0, [pc, #236]	@ (800896c <plotter_begin+0x744>)
 8008880:	f004 fdfc 	bl	800d47c <HAL_TIM_Base_Start_IT>

	plotter_reset();
 8008884:	f000 f874 	bl	8008970 <plotter_reset>
}
 8008888:	bf00      	nop
 800888a:	3704      	adds	r7, #4
 800888c:	46bd      	mov	sp, r7
 800888e:	ecbd 8b02 	vpop	{d8}
 8008892:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008896:	bf00      	nop
 8008898:	9999999a 	.word	0x9999999a
 800889c:	40019999 	.word	0x40019999
 80088a0:	20001bec 	.word	0x20001bec
 80088a4:	200004f0 	.word	0x200004f0
 80088a8:	20001d84 	.word	0x20001d84
 80088ac:	200003fc 	.word	0x200003fc
 80088b0:	48000800 	.word	0x48000800
 80088b4:	20000448 	.word	0x20000448
 80088b8:	20001988 	.word	0x20001988
 80088bc:	2000062c 	.word	0x2000062c
 80088c0:	00000000 	.word	0x00000000
 80088c4:	44fa0000 	.word	0x44fa0000
 80088c8:	20000080 	.word	0x20000080
 80088cc:	42f00000 	.word	0x42f00000
 80088d0:	2edbe6ff 	.word	0x2edbe6ff
 80088d4:	42960000 	.word	0x42960000
 80088d8:	2000054c 	.word	0x2000054c
 80088dc:	3727c5ac 	.word	0x3727c5ac
 80088e0:	43160000 	.word	0x43160000
 80088e4:	20000574 	.word	0x20000574
 80088e8:	20000000 	.word	0x20000000
 80088ec:	43e10000 	.word	0x43e10000
 80088f0:	3dcccccd 	.word	0x3dcccccd
 80088f4:	42c80000 	.word	0x42c80000
 80088f8:	2000059c 	.word	0x2000059c
 80088fc:	43fa0000 	.word	0x43fa0000
 8008900:	200005c4 	.word	0x200005c4
 8008904:	45ea6000 	.word	0x45ea6000
 8008908:	200005ec 	.word	0x200005ec
 800890c:	20000620 	.word	0x20000620
 8008910:	20000614 	.word	0x20000614
 8008914:	20000100 	.word	0x20000100
 8008918:	20000624 	.word	0x20000624
 800891c:	20000618 	.word	0x20000618
 8008920:	457ff000 	.word	0x457ff000
 8008924:	40533333 	.word	0x40533333
 8008928:	20000af8 	.word	0x20000af8
 800892c:	200001b4 	.word	0x200001b4
 8008930:	20000644 	.word	0x20000644
 8008934:	45000000 	.word	0x45000000
 8008938:	447a0000 	.word	0x447a0000
 800893c:	20000ae0 	.word	0x20000ae0
 8008940:	20000aec 	.word	0x20000aec
 8008944:	3a83126f 	.word	0x3a83126f
 8008948:	20001228 	.word	0x20001228
 800894c:	20001954 	.word	0x20001954
 8008950:	20001914 	.word	0x20001914
 8008954:	3d4ccccd 	.word	0x3d4ccccd
 8008958:	20001594 	.word	0x20001594
 800895c:	20001098 	.word	0x20001098
 8008960:	20001e50 	.word	0x20001e50
 8008964:	20001fe8 	.word	0x20001fe8
 8008968:	20000bc0 	.word	0x20000bc0
 800896c:	20001a54 	.word	0x20001a54

08008970 <plotter_reset>:

void plotter_reset() {
 8008970:	b580      	push	{r7, lr}
 8008972:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 8008974:	4819      	ldr	r0, [pc, #100]	@ (80089dc <plotter_reset+0x6c>)
 8008976:	f7fb f9ef 	bl	8003d58 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 800897a:	4818      	ldr	r0, [pc, #96]	@ (80089dc <plotter_reset+0x6c>)
 800897c:	f7fb f9ec 	bl	8003d58 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 8008980:	4b16      	ldr	r3, [pc, #88]	@ (80089dc <plotter_reset+0x6c>)
 8008982:	2200      	movs	r2, #0
 8008984:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 8008986:	4b15      	ldr	r3, [pc, #84]	@ (80089dc <plotter_reset+0x6c>)
 8008988:	f04f 0200 	mov.w	r2, #0
 800898c:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 800898e:	4b13      	ldr	r3, [pc, #76]	@ (80089dc <plotter_reset+0x6c>)
 8008990:	2200      	movs	r2, #0
 8008992:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8008994:	4b11      	ldr	r3, [pc, #68]	@ (80089dc <plotter_reset+0x6c>)
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 800899c:	4b0f      	ldr	r3, [pc, #60]	@ (80089dc <plotter_reset+0x6c>)
 800899e:	f04f 0200 	mov.w	r2, #0
 80089a2:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 80089a4:	4b0d      	ldr	r3, [pc, #52]	@ (80089dc <plotter_reset+0x6c>)
 80089a6:	f04f 0200 	mov.w	r2, #0
 80089aa:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 80089ac:	4b0c      	ldr	r3, [pc, #48]	@ (80089e0 <plotter_reset+0x70>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 80089b2:	4b0b      	ldr	r3, [pc, #44]	@ (80089e0 <plotter_reset+0x70>)
 80089b4:	f04f 0200 	mov.w	r2, #0
 80089b8:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 80089ba:	4b09      	ldr	r3, [pc, #36]	@ (80089e0 <plotter_reset+0x70>)
 80089bc:	2200      	movs	r2, #0
 80089be:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 80089c0:	4b07      	ldr	r3, [pc, #28]	@ (80089e0 <plotter_reset+0x70>)
 80089c2:	f04f 0200 	mov.w	r2, #0
 80089c6:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 80089c8:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <plotter_reset+0x70>)
 80089ca:	f04f 0200 	mov.w	r2, #0
 80089ce:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 80089d0:	4b03      	ldr	r3, [pc, #12]	@ (80089e0 <plotter_reset+0x70>)
 80089d2:	f04f 0200 	mov.w	r2, #0
 80089d6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80089d8:	bf00      	nop
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000494 	.word	0x20000494
 80089e0:	200004f0 	.word	0x200004f0

080089e4 <plotter_update_sensors>:

void plotter_update_sensors() {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 80089e8:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8008af0 <plotter_update_sensors+0x10c>
 80089ec:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8008af4 <plotter_update_sensors+0x110>
 80089f0:	2106      	movs	r1, #6
 80089f2:	4841      	ldr	r0, [pc, #260]	@ (8008af8 <plotter_update_sensors+0x114>)
 80089f4:	f7f8 fb70 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 80089f8:	eef0 7a40 	vmov.f32	s15, s0
 80089fc:	4b3f      	ldr	r3, [pc, #252]	@ (8008afc <plotter_update_sensors+0x118>)
 80089fe:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8008a02:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8008af0 <plotter_update_sensors+0x10c>
 8008a06:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8008af4 <plotter_update_sensors+0x110>
 8008a0a:	2107      	movs	r1, #7
 8008a0c:	483a      	ldr	r0, [pc, #232]	@ (8008af8 <plotter_update_sensors+0x114>)
 8008a0e:	f7f8 fb63 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8008a12:	eef0 7a40 	vmov.f32	s15, s0
 8008a16:	4b3a      	ldr	r3, [pc, #232]	@ (8008b00 <plotter_update_sensors+0x11c>)
 8008a18:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 8008a1c:	2180      	movs	r1, #128	@ 0x80
 8008a1e:	4839      	ldr	r0, [pc, #228]	@ (8008b04 <plotter_update_sensors+0x120>)
 8008a20:	f003 fbc6 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8008a24:	4603      	mov	r3, r0
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bf0c      	ite	eq
 8008a2a:	2301      	moveq	r3, #1
 8008a2c:	2300      	movne	r3, #0
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	461a      	mov	r2, r3
 8008a32:	4b35      	ldr	r3, [pc, #212]	@ (8008b08 <plotter_update_sensors+0x124>)
 8008a34:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8008a36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008a3a:	4834      	ldr	r0, [pc, #208]	@ (8008b0c <plotter_update_sensors+0x128>)
 8008a3c:	f003 fbb8 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	bf0c      	ite	eq
 8008a46:	2301      	moveq	r3, #1
 8008a48:	2300      	movne	r3, #0
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4b30      	ldr	r3, [pc, #192]	@ (8008b10 <plotter_update_sensors+0x12c>)
 8008a50:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 8008a52:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a56:	482d      	ldr	r0, [pc, #180]	@ (8008b0c <plotter_update_sensors+0x128>)
 8008a58:	f003 fbaa 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	bf0c      	ite	eq
 8008a62:	2301      	moveq	r3, #1
 8008a64:	2300      	movne	r3, #0
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	461a      	mov	r2, r3
 8008a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8008b14 <plotter_update_sensors+0x130>)
 8008a6c:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 8008a6e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a72:	4826      	ldr	r0, [pc, #152]	@ (8008b0c <plotter_update_sensors+0x128>)
 8008a74:	f003 fb9c 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	bf0c      	ite	eq
 8008a7e:	2301      	moveq	r3, #1
 8008a80:	2300      	movne	r3, #0
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	461a      	mov	r2, r3
 8008a86:	4b24      	ldr	r3, [pc, #144]	@ (8008b18 <plotter_update_sensors+0x134>)
 8008a88:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 8008a8a:	2104      	movs	r1, #4
 8008a8c:	481d      	ldr	r0, [pc, #116]	@ (8008b04 <plotter_update_sensors+0x120>)
 8008a8e:	f003 fb8f 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8008a92:	4603      	mov	r3, r0
 8008a94:	461a      	mov	r2, r3
 8008a96:	4b21      	ldr	r3, [pc, #132]	@ (8008b1c <plotter_update_sensors+0x138>)
 8008a98:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 8008a9a:	2102      	movs	r1, #2
 8008a9c:	4819      	ldr	r0, [pc, #100]	@ (8008b04 <plotter_update_sensors+0x120>)
 8008a9e:	f003 fb87 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	461a      	mov	r2, r3
 8008aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b20 <plotter_update_sensors+0x13c>)
 8008aa8:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 8008aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8008b24 <plotter_update_sensors+0x140>)
 8008aac:	781b      	ldrb	r3, [r3, #0]
 8008aae:	f083 0301 	eor.w	r3, r3, #1
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d018      	beq.n	8008aea <plotter_update_sensors+0x106>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8008ab8:	2101      	movs	r1, #1
 8008aba:	4812      	ldr	r0, [pc, #72]	@ (8008b04 <plotter_update_sensors+0x120>)
 8008abc:	f003 fb78 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	bf14      	ite	ne
 8008ac6:	2301      	movne	r3, #1
 8008ac8:	2300      	moveq	r3, #0
 8008aca:	b2da      	uxtb	r2, r3
 8008acc:	4b16      	ldr	r3, [pc, #88]	@ (8008b28 <plotter_update_sensors+0x144>)
 8008ace:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8008ad0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8008ad4:	480b      	ldr	r0, [pc, #44]	@ (8008b04 <plotter_update_sensors+0x120>)
 8008ad6:	f003 fb6b 	bl	800c1b0 <HAL_GPIO_ReadPin>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	bf14      	ite	ne
 8008ae0:	2301      	movne	r3, #1
 8008ae2:	2300      	moveq	r3, #0
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	4b11      	ldr	r3, [pc, #68]	@ (8008b2c <plotter_update_sensors+0x148>)
 8008ae8:	701a      	strb	r2, [r3, #0]
	}
}
 8008aea:	bf00      	nop
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	42480000 	.word	0x42480000
 8008af4:	c2480000 	.word	0xc2480000
 8008af8:	20000644 	.word	0x20000644
 8008afc:	20001964 	.word	0x20001964
 8008b00:	20001968 	.word	0x20001968
 8008b04:	48000400 	.word	0x48000400
 8008b08:	20001974 	.word	0x20001974
 8008b0c:	48000800 	.word	0x48000800
 8008b10:	20001978 	.word	0x20001978
 8008b14:	2000197c 	.word	0x2000197c
 8008b18:	20001980 	.word	0x20001980
 8008b1c:	2000196c 	.word	0x2000196c
 8008b20:	20001970 	.word	0x20001970
 8008b24:	2000036b 	.word	0x2000036b
 8008b28:	20000368 	.word	0x20000368
 8008b2c:	20000369 	.word	0x20000369

08008b30 <plotter_pen_up>:

void plotter_pen_up() {
 8008b30:	b580      	push	{r7, lr}
 8008b32:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8008b34:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8008b38:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8008b48 <plotter_pen_up+0x18>
 8008b3c:	4803      	ldr	r0, [pc, #12]	@ (8008b4c <plotter_pen_up+0x1c>)
 8008b3e:	f7fa fc7f 	bl	8003440 <PWM_write_duty>
}
 8008b42:	bf00      	nop
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	42480000 	.word	0x42480000
 8008b4c:	2000062c 	.word	0x2000062c

08008b50 <plotter_pen_down>:

void plotter_pen_down() {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 12);
 8008b54:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8008b58:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8008b68 <plotter_pen_down+0x18>
 8008b5c:	4803      	ldr	r0, [pc, #12]	@ (8008b6c <plotter_pen_down+0x1c>)
 8008b5e:	f7fa fc6f 	bl	8003440 <PWM_write_duty>
}
 8008b62:	bf00      	nop
 8008b64:	bd80      	pop	{r7, pc}
 8008b66:	bf00      	nop
 8008b68:	42480000 	.word	0x42480000
 8008b6c:	2000062c 	.word	0x2000062c

08008b70 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	78fa      	ldrb	r2, [r7, #3]
 8008b80:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008b88:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008b90:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f04f 0200 	mov.w	r2, #0
 8008b98:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f04f 0200 	mov.w	r2, #0
 8008ba0:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8008c24 <SIGNAL_init+0xb4>)
 8008bb6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008bbe:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d828      	bhi.n	8008c18 <SIGNAL_init+0xa8>
 8008bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bcc <SIGNAL_init+0x5c>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008c17 	.word	0x08008c17
 8008bd0:	08008bdd 	.word	0x08008bdd
 8008bd4:	08008bfb 	.word	0x08008bfb
 8008bd8:	08008c05 	.word	0x08008c05
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2200      	movs	r2, #0
 8008be0:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008be8:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a0e      	ldr	r2, [pc, #56]	@ (8008c28 <SIGNAL_init+0xb8>)
 8008bee:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008bf6:	621a      	str	r2, [r3, #32]
            break;
 8008bf8:	e00e      	b.n	8008c18 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8008c00:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8008c02:	e009      	b.n	8008c18 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f04f 0200 	mov.w	r2, #0
 8008c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8008c12:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8008c14:	e000      	b.n	8008c18 <SIGNAL_init+0xa8>
            break;
 8008c16:	bf00      	nop
    }
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	bf800000 	.word	0xbf800000
 8008c28:	41200000 	.word	0x41200000

08008c2c <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8008c2c:	b480      	push	{r7}
 8008c2e:	b089      	sub	sp, #36	@ 0x24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	61f8      	str	r0, [r7, #28]
 8008c34:	ed87 0a06 	vstr	s0, [r7, #24]
 8008c38:	edc7 0a05 	vstr	s1, [r7, #20]
 8008c3c:	ed87 1a04 	vstr	s2, [r7, #16]
 8008c40:	edc7 1a03 	vstr	s3, [r7, #12]
 8008c44:	ed87 2a02 	vstr	s4, [r7, #8]
 8008c48:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	69ba      	ldr	r2, [r7, #24]
 8008c56:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	68ba      	ldr	r2, [r7, #8]
 8008c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008c76:	bf00      	nop
 8008c78:	3724      	adds	r7, #36	@ 0x24
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr

08008c82 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8008c82:	b480      	push	{r7}
 8008c84:	b089      	sub	sp, #36	@ 0x24
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	61f8      	str	r0, [r7, #28]
 8008c8a:	ed87 0a06 	vstr	s0, [r7, #24]
 8008c8e:	edc7 0a05 	vstr	s1, [r7, #20]
 8008c92:	ed87 1a04 	vstr	s2, [r7, #16]
 8008c96:	edc7 1a03 	vstr	s3, [r7, #12]
 8008c9a:	ed87 2a02 	vstr	s4, [r7, #8]
 8008c9e:	edc7 2a01 	vstr	s5, [r7, #4]
 8008ca2:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8008cac:	69fb      	ldr	r3, [r7, #28]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	697a      	ldr	r2, [r7, #20]
 8008cb6:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	693a      	ldr	r2, [r7, #16]
 8008cbc:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	68ba      	ldr	r2, [r7, #8]
 8008cc8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	687a      	ldr	r2, [r7, #4]
 8008cce:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8008cd6:	bf00      	nop
 8008cd8:	3724      	adds	r7, #36	@ 0x24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
	...

08008ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cea:	4b0f      	ldr	r3, [pc, #60]	@ (8008d28 <HAL_MspInit+0x44>)
 8008cec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cee:	4a0e      	ldr	r2, [pc, #56]	@ (8008d28 <HAL_MspInit+0x44>)
 8008cf0:	f043 0301 	orr.w	r3, r3, #1
 8008cf4:	6613      	str	r3, [r2, #96]	@ 0x60
 8008cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8008d28 <HAL_MspInit+0x44>)
 8008cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	607b      	str	r3, [r7, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d02:	4b09      	ldr	r3, [pc, #36]	@ (8008d28 <HAL_MspInit+0x44>)
 8008d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d06:	4a08      	ldr	r2, [pc, #32]	@ (8008d28 <HAL_MspInit+0x44>)
 8008d08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d0e:	4b06      	ldr	r3, [pc, #24]	@ (8008d28 <HAL_MspInit+0x44>)
 8008d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d16:	603b      	str	r3, [r7, #0]
 8008d18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8008d1a:	f003 fb4f 	bl	800c3bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d1e:	bf00      	nop
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	40021000 	.word	0x40021000

08008d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008d30:	bf00      	nop
 8008d32:	e7fd      	b.n	8008d30 <NMI_Handler+0x4>

08008d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d34:	b480      	push	{r7}
 8008d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d38:	bf00      	nop
 8008d3a:	e7fd      	b.n	8008d38 <HardFault_Handler+0x4>

08008d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d40:	bf00      	nop
 8008d42:	e7fd      	b.n	8008d40 <MemManage_Handler+0x4>

08008d44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d44:	b480      	push	{r7}
 8008d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d48:	bf00      	nop
 8008d4a:	e7fd      	b.n	8008d48 <BusFault_Handler+0x4>

08008d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d50:	bf00      	nop
 8008d52:	e7fd      	b.n	8008d50 <UsageFault_Handler+0x4>

08008d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d54:	b480      	push	{r7}
 8008d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d58:	bf00      	nop
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr

08008d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d62:	b480      	push	{r7}
 8008d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d66:	bf00      	nop
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d74:	bf00      	nop
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d82:	f000 ffbb 	bl	8009cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d86:	bf00      	nop
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8008d8e:	2001      	movs	r0, #1
 8008d90:	f003 fa58 	bl	800c244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008d94:	bf00      	nop
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8008d9c:	2010      	movs	r0, #16
 8008d9e:	f003 fa51 	bl	800c244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8008da2:	bf00      	nop
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008dac:	4802      	ldr	r0, [pc, #8]	@ (8008db8 <DMA1_Channel1_IRQHandler+0x10>)
 8008dae:	f002 ff2e 	bl	800bc0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008db2:	bf00      	nop
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	20000220 	.word	0x20000220

08008dbc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008dc0:	4802      	ldr	r0, [pc, #8]	@ (8008dcc <DMA1_Channel2_IRQHandler+0x10>)
 8008dc2:	f002 ff24 	bl	800bc0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008dc6:	bf00      	nop
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20002174 	.word	0x20002174

08008dd0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8008dd4:	4802      	ldr	r0, [pc, #8]	@ (8008de0 <DMA1_Channel3_IRQHandler+0x10>)
 8008dd6:	f002 ff1a 	bl	800bc0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008dda:	bf00      	nop
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	200021d4 	.word	0x200021d4

08008de4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8008de8:	4802      	ldr	r0, [pc, #8]	@ (8008df4 <DMA1_Channel4_IRQHandler+0x10>)
 8008dea:	f002 ff10 	bl	800bc0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8008dee:	bf00      	nop
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	200020b4 	.word	0x200020b4

08008df8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8008dfc:	4802      	ldr	r0, [pc, #8]	@ (8008e08 <DMA1_Channel5_IRQHandler+0x10>)
 8008dfe:	f002 ff06 	bl	800bc0e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8008e02:	bf00      	nop
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20002114 	.word	0x20002114

08008e0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8008e10:	2040      	movs	r0, #64	@ 0x40
 8008e12:	f003 fa17 	bl	800c244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8008e16:	2080      	movs	r0, #128	@ 0x80
 8008e18:	f003 fa14 	bl	800c244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008e1c:	bf00      	nop
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008e24:	4803      	ldr	r0, [pc, #12]	@ (8008e34 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8008e26:	f004 ff4f 	bl	800dcc8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8008e2a:	4803      	ldr	r0, [pc, #12]	@ (8008e38 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8008e2c:	f004 ff4c 	bl	800dcc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8008e30:	bf00      	nop
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	20001988 	.word	0x20001988
 8008e38:	20001e50 	.word	0x20001e50

08008e3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008e40:	4802      	ldr	r0, [pc, #8]	@ (8008e4c <TIM2_IRQHandler+0x10>)
 8008e42:	f004 ff41 	bl	800dcc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008e46:	bf00      	nop
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	20001a54 	.word	0x20001a54

08008e50 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008e54:	4802      	ldr	r0, [pc, #8]	@ (8008e60 <TIM3_IRQHandler+0x10>)
 8008e56:	f004 ff37 	bl	800dcc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008e5a:	bf00      	nop
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	20001b20 	.word	0x20001b20

08008e64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008e68:	4802      	ldr	r0, [pc, #8]	@ (8008e74 <TIM4_IRQHandler+0x10>)
 8008e6a:	f004 ff2d 	bl	800dcc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008e6e:	bf00      	nop
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	20001bec 	.word	0x20001bec

08008e78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008e7c:	4802      	ldr	r0, [pc, #8]	@ (8008e88 <USART2_IRQHandler+0x10>)
 8008e7e:	f006 fc77 	bl	800f770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008e82:	bf00      	nop
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	20001fe8 	.word	0x20001fe8

08008e8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8008e90:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008e94:	f003 f9d6 	bl	800c244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8008e98:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8008e9c:	f003 f9d2 	bl	800c244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8008ea0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8008ea4:	f003 f9ce 	bl	800c244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8008ea8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8008eac:	f003 f9ca 	bl	800c244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008eb0:	bf00      	nop
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8008eb8:	4802      	ldr	r0, [pc, #8]	@ (8008ec4 <LPUART1_IRQHandler+0x10>)
 8008eba:	f006 fc59 	bl	800f770 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8008ebe:	bf00      	nop
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20001f1c 	.word	0x20001f1c

08008ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b086      	sub	sp, #24
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008ed0:	4a14      	ldr	r2, [pc, #80]	@ (8008f24 <_sbrk+0x5c>)
 8008ed2:	4b15      	ldr	r3, [pc, #84]	@ (8008f28 <_sbrk+0x60>)
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008edc:	4b13      	ldr	r3, [pc, #76]	@ (8008f2c <_sbrk+0x64>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d102      	bne.n	8008eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008ee4:	4b11      	ldr	r3, [pc, #68]	@ (8008f2c <_sbrk+0x64>)
 8008ee6:	4a12      	ldr	r2, [pc, #72]	@ (8008f30 <_sbrk+0x68>)
 8008ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008eea:	4b10      	ldr	r3, [pc, #64]	@ (8008f2c <_sbrk+0x64>)
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d207      	bcs.n	8008f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008ef8:	f008 fec8 	bl	8011c8c <__errno>
 8008efc:	4603      	mov	r3, r0
 8008efe:	220c      	movs	r2, #12
 8008f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295
 8008f06:	e009      	b.n	8008f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008f08:	4b08      	ldr	r3, [pc, #32]	@ (8008f2c <_sbrk+0x64>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008f0e:	4b07      	ldr	r3, [pc, #28]	@ (8008f2c <_sbrk+0x64>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	4413      	add	r3, r2
 8008f16:	4a05      	ldr	r2, [pc, #20]	@ (8008f2c <_sbrk+0x64>)
 8008f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3718      	adds	r7, #24
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	20020000 	.word	0x20020000
 8008f28:	00000400 	.word	0x00000400
 8008f2c:	20001984 	.word	0x20001984
 8008f30:	20002380 	.word	0x20002380

08008f34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008f34:	b480      	push	{r7}
 8008f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008f38:	4b06      	ldr	r3, [pc, #24]	@ (8008f54 <SystemInit+0x20>)
 8008f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f3e:	4a05      	ldr	r2, [pc, #20]	@ (8008f54 <SystemInit+0x20>)
 8008f40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008f44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008f48:	bf00      	nop
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	e000ed00 	.word	0xe000ed00

08008f58 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b098      	sub	sp, #96	@ 0x60
 8008f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f5e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	605a      	str	r2, [r3, #4]
 8008f68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008f6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	605a      	str	r2, [r3, #4]
 8008f74:	609a      	str	r2, [r3, #8]
 8008f76:	60da      	str	r2, [r3, #12]
 8008f78:	611a      	str	r2, [r3, #16]
 8008f7a:	615a      	str	r2, [r3, #20]
 8008f7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008f7e:	1d3b      	adds	r3, r7, #4
 8008f80:	2234      	movs	r2, #52	@ 0x34
 8008f82:	2100      	movs	r1, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f008 fe69 	bl	8011c5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8009078 <MX_TIM1_Init+0x120>)
 8008f8c:	4a3b      	ldr	r2, [pc, #236]	@ (800907c <MX_TIM1_Init+0x124>)
 8008f8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008f90:	4b39      	ldr	r3, [pc, #228]	@ (8009078 <MX_TIM1_Init+0x120>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f96:	4b38      	ldr	r3, [pc, #224]	@ (8009078 <MX_TIM1_Init+0x120>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8008f9c:	4b36      	ldr	r3, [pc, #216]	@ (8009078 <MX_TIM1_Init+0x120>)
 8008f9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008fa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008fa4:	4b34      	ldr	r3, [pc, #208]	@ (8009078 <MX_TIM1_Init+0x120>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008faa:	4b33      	ldr	r3, [pc, #204]	@ (8009078 <MX_TIM1_Init+0x120>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008fb0:	4b31      	ldr	r3, [pc, #196]	@ (8009078 <MX_TIM1_Init+0x120>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008fb6:	4830      	ldr	r0, [pc, #192]	@ (8009078 <MX_TIM1_Init+0x120>)
 8008fb8:	f004 fad8 	bl	800d56c <HAL_TIM_PWM_Init>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d001      	beq.n	8008fc6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8008fc2:	f7ff f92b 	bl	800821c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008fd2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	4827      	ldr	r0, [pc, #156]	@ (8009078 <MX_TIM1_Init+0x120>)
 8008fda:	f006 f8e9 	bl	800f1b0 <HAL_TIMEx_MasterConfigSynchronization>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8008fe4:	f7ff f91a 	bl	800821c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008fe8:	2360      	movs	r3, #96	@ 0x60
 8008fea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8008fec:	2300      	movs	r3, #0
 8008fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009000:	2300      	movs	r3, #0
 8009002:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009004:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009008:	220c      	movs	r2, #12
 800900a:	4619      	mov	r1, r3
 800900c:	481a      	ldr	r0, [pc, #104]	@ (8009078 <MX_TIM1_Init+0x120>)
 800900e:	f004 ffd5 	bl	800dfbc <HAL_TIM_PWM_ConfigChannel>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8009018:	f7ff f900 	bl	800821c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800901c:	2300      	movs	r3, #0
 800901e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009020:	2300      	movs	r3, #0
 8009022:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009028:	2300      	movs	r3, #0
 800902a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800902c:	2300      	movs	r3, #0
 800902e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009030:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009034:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800903a:	2300      	movs	r3, #0
 800903c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800903e:	2300      	movs	r3, #0
 8009040:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009042:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009046:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800904c:	2300      	movs	r3, #0
 800904e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009050:	2300      	movs	r3, #0
 8009052:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009054:	1d3b      	adds	r3, r7, #4
 8009056:	4619      	mov	r1, r3
 8009058:	4807      	ldr	r0, [pc, #28]	@ (8009078 <MX_TIM1_Init+0x120>)
 800905a:	f006 f93f 	bl	800f2dc <HAL_TIMEx_ConfigBreakDeadTime>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8009064:	f7ff f8da 	bl	800821c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009068:	4803      	ldr	r0, [pc, #12]	@ (8009078 <MX_TIM1_Init+0x120>)
 800906a:	f000 fb77 	bl	800975c <HAL_TIM_MspPostInit>

}
 800906e:	bf00      	nop
 8009070:	3760      	adds	r7, #96	@ 0x60
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	20001988 	.word	0x20001988
 800907c:	40012c00 	.word	0x40012c00

08009080 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009086:	f107 0310 	add.w	r3, r7, #16
 800908a:	2200      	movs	r2, #0
 800908c:	601a      	str	r2, [r3, #0]
 800908e:	605a      	str	r2, [r3, #4]
 8009090:	609a      	str	r2, [r3, #8]
 8009092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009094:	1d3b      	adds	r3, r7, #4
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	605a      	str	r2, [r3, #4]
 800909c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800909e:	4b1e      	ldr	r3, [pc, #120]	@ (8009118 <MX_TIM2_Init+0x98>)
 80090a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80090a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80090a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009118 <MX_TIM2_Init+0x98>)
 80090a8:	22a9      	movs	r2, #169	@ 0xa9
 80090aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009118 <MX_TIM2_Init+0x98>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80090b2:	4b19      	ldr	r3, [pc, #100]	@ (8009118 <MX_TIM2_Init+0x98>)
 80090b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80090b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090ba:	4b17      	ldr	r3, [pc, #92]	@ (8009118 <MX_TIM2_Init+0x98>)
 80090bc:	2200      	movs	r2, #0
 80090be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090c0:	4b15      	ldr	r3, [pc, #84]	@ (8009118 <MX_TIM2_Init+0x98>)
 80090c2:	2200      	movs	r2, #0
 80090c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80090c6:	4814      	ldr	r0, [pc, #80]	@ (8009118 <MX_TIM2_Init+0x98>)
 80090c8:	f004 f904 	bl	800d2d4 <HAL_TIM_Base_Init>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d001      	beq.n	80090d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80090d2:	f7ff f8a3 	bl	800821c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80090d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80090dc:	f107 0310 	add.w	r3, r7, #16
 80090e0:	4619      	mov	r1, r3
 80090e2:	480d      	ldr	r0, [pc, #52]	@ (8009118 <MX_TIM2_Init+0x98>)
 80090e4:	f005 f87e 	bl	800e1e4 <HAL_TIM_ConfigClockSource>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80090ee:	f7ff f895 	bl	800821c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80090f2:	2300      	movs	r3, #0
 80090f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80090fa:	1d3b      	adds	r3, r7, #4
 80090fc:	4619      	mov	r1, r3
 80090fe:	4806      	ldr	r0, [pc, #24]	@ (8009118 <MX_TIM2_Init+0x98>)
 8009100:	f006 f856 	bl	800f1b0 <HAL_TIMEx_MasterConfigSynchronization>
 8009104:	4603      	mov	r3, r0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800910a:	f7ff f887 	bl	800821c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800910e:	bf00      	nop
 8009110:	3720      	adds	r7, #32
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20001a54 	.word	0x20001a54

0800911c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b08c      	sub	sp, #48	@ 0x30
 8009120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009122:	f107 030c 	add.w	r3, r7, #12
 8009126:	2224      	movs	r2, #36	@ 0x24
 8009128:	2100      	movs	r1, #0
 800912a:	4618      	mov	r0, r3
 800912c:	f008 fd96 	bl	8011c5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009130:	463b      	mov	r3, r7
 8009132:	2200      	movs	r2, #0
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	605a      	str	r2, [r3, #4]
 8009138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800913a:	4b21      	ldr	r3, [pc, #132]	@ (80091c0 <MX_TIM3_Init+0xa4>)
 800913c:	4a21      	ldr	r2, [pc, #132]	@ (80091c4 <MX_TIM3_Init+0xa8>)
 800913e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009140:	4b1f      	ldr	r3, [pc, #124]	@ (80091c0 <MX_TIM3_Init+0xa4>)
 8009142:	2200      	movs	r2, #0
 8009144:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009146:	4b1e      	ldr	r3, [pc, #120]	@ (80091c0 <MX_TIM3_Init+0xa4>)
 8009148:	2200      	movs	r2, #0
 800914a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800914c:	4b1c      	ldr	r3, [pc, #112]	@ (80091c0 <MX_TIM3_Init+0xa4>)
 800914e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009152:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009154:	4b1a      	ldr	r3, [pc, #104]	@ (80091c0 <MX_TIM3_Init+0xa4>)
 8009156:	2200      	movs	r2, #0
 8009158:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800915a:	4b19      	ldr	r3, [pc, #100]	@ (80091c0 <MX_TIM3_Init+0xa4>)
 800915c:	2200      	movs	r2, #0
 800915e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009160:	2303      	movs	r3, #3
 8009162:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009164:	2300      	movs	r3, #0
 8009166:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009168:	2301      	movs	r3, #1
 800916a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800916c:	2300      	movs	r3, #0
 800916e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009170:	2300      	movs	r3, #0
 8009172:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009174:	2300      	movs	r3, #0
 8009176:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009178:	2301      	movs	r3, #1
 800917a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800917c:	2300      	movs	r3, #0
 800917e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009184:	f107 030c 	add.w	r3, r7, #12
 8009188:	4619      	mov	r1, r3
 800918a:	480d      	ldr	r0, [pc, #52]	@ (80091c0 <MX_TIM3_Init+0xa4>)
 800918c:	f004 fc5a 	bl	800da44 <HAL_TIM_Encoder_Init>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d001      	beq.n	800919a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8009196:	f7ff f841 	bl	800821c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800919a:	2300      	movs	r3, #0
 800919c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800919e:	2300      	movs	r3, #0
 80091a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80091a2:	463b      	mov	r3, r7
 80091a4:	4619      	mov	r1, r3
 80091a6:	4806      	ldr	r0, [pc, #24]	@ (80091c0 <MX_TIM3_Init+0xa4>)
 80091a8:	f006 f802 	bl	800f1b0 <HAL_TIMEx_MasterConfigSynchronization>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80091b2:	f7ff f833 	bl	800821c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80091b6:	bf00      	nop
 80091b8:	3730      	adds	r7, #48	@ 0x30
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
 80091be:	bf00      	nop
 80091c0:	20001b20 	.word	0x20001b20
 80091c4:	40000400 	.word	0x40000400

080091c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b08c      	sub	sp, #48	@ 0x30
 80091cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80091ce:	f107 030c 	add.w	r3, r7, #12
 80091d2:	2224      	movs	r2, #36	@ 0x24
 80091d4:	2100      	movs	r1, #0
 80091d6:	4618      	mov	r0, r3
 80091d8:	f008 fd40 	bl	8011c5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80091dc:	463b      	mov	r3, r7
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
 80091e2:	605a      	str	r2, [r3, #4]
 80091e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80091e6:	4b21      	ldr	r3, [pc, #132]	@ (800926c <MX_TIM4_Init+0xa4>)
 80091e8:	4a21      	ldr	r2, [pc, #132]	@ (8009270 <MX_TIM4_Init+0xa8>)
 80091ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80091ec:	4b1f      	ldr	r3, [pc, #124]	@ (800926c <MX_TIM4_Init+0xa4>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80091f2:	4b1e      	ldr	r3, [pc, #120]	@ (800926c <MX_TIM4_Init+0xa4>)
 80091f4:	2200      	movs	r2, #0
 80091f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80091f8:	4b1c      	ldr	r3, [pc, #112]	@ (800926c <MX_TIM4_Init+0xa4>)
 80091fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80091fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009200:	4b1a      	ldr	r3, [pc, #104]	@ (800926c <MX_TIM4_Init+0xa4>)
 8009202:	2200      	movs	r2, #0
 8009204:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009206:	4b19      	ldr	r3, [pc, #100]	@ (800926c <MX_TIM4_Init+0xa4>)
 8009208:	2200      	movs	r2, #0
 800920a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800920c:	2303      	movs	r3, #3
 800920e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009210:	2300      	movs	r3, #0
 8009212:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009214:	2301      	movs	r3, #1
 8009216:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009218:	2300      	movs	r3, #0
 800921a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009220:	2300      	movs	r3, #0
 8009222:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009224:	2301      	movs	r3, #1
 8009226:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009228:	2300      	movs	r3, #0
 800922a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8009230:	f107 030c 	add.w	r3, r7, #12
 8009234:	4619      	mov	r1, r3
 8009236:	480d      	ldr	r0, [pc, #52]	@ (800926c <MX_TIM4_Init+0xa4>)
 8009238:	f004 fc04 	bl	800da44 <HAL_TIM_Encoder_Init>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d001      	beq.n	8009246 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8009242:	f7fe ffeb 	bl	800821c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009246:	2300      	movs	r3, #0
 8009248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800924a:	2300      	movs	r3, #0
 800924c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800924e:	463b      	mov	r3, r7
 8009250:	4619      	mov	r1, r3
 8009252:	4806      	ldr	r0, [pc, #24]	@ (800926c <MX_TIM4_Init+0xa4>)
 8009254:	f005 ffac 	bl	800f1b0 <HAL_TIMEx_MasterConfigSynchronization>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800925e:	f7fe ffdd 	bl	800821c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009262:	bf00      	nop
 8009264:	3730      	adds	r7, #48	@ 0x30
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	20001bec 	.word	0x20001bec
 8009270:	40000800 	.word	0x40000800

08009274 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08c      	sub	sp, #48	@ 0x30
 8009278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800927a:	f107 030c 	add.w	r3, r7, #12
 800927e:	2224      	movs	r2, #36	@ 0x24
 8009280:	2100      	movs	r1, #0
 8009282:	4618      	mov	r0, r3
 8009284:	f008 fcea 	bl	8011c5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009288:	463b      	mov	r3, r7
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	605a      	str	r2, [r3, #4]
 8009290:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009292:	4b21      	ldr	r3, [pc, #132]	@ (8009318 <MX_TIM5_Init+0xa4>)
 8009294:	4a21      	ldr	r2, [pc, #132]	@ (800931c <MX_TIM5_Init+0xa8>)
 8009296:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8009298:	4b1f      	ldr	r3, [pc, #124]	@ (8009318 <MX_TIM5_Init+0xa4>)
 800929a:	2200      	movs	r2, #0
 800929c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800929e:	4b1e      	ldr	r3, [pc, #120]	@ (8009318 <MX_TIM5_Init+0xa4>)
 80092a0:	2200      	movs	r2, #0
 80092a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80092a4:	4b1c      	ldr	r3, [pc, #112]	@ (8009318 <MX_TIM5_Init+0xa4>)
 80092a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009318 <MX_TIM5_Init+0xa4>)
 80092ae:	2200      	movs	r2, #0
 80092b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092b2:	4b19      	ldr	r3, [pc, #100]	@ (8009318 <MX_TIM5_Init+0xa4>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80092b8:	2303      	movs	r3, #3
 80092ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80092bc:	2300      	movs	r3, #0
 80092be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80092c0:	2301      	movs	r3, #1
 80092c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80092c4:	2300      	movs	r3, #0
 80092c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80092cc:	2300      	movs	r3, #0
 80092ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80092d0:	2301      	movs	r3, #1
 80092d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80092d4:	2300      	movs	r3, #0
 80092d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80092dc:	f107 030c 	add.w	r3, r7, #12
 80092e0:	4619      	mov	r1, r3
 80092e2:	480d      	ldr	r0, [pc, #52]	@ (8009318 <MX_TIM5_Init+0xa4>)
 80092e4:	f004 fbae 	bl	800da44 <HAL_TIM_Encoder_Init>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d001      	beq.n	80092f2 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80092ee:	f7fe ff95 	bl	800821c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80092f2:	2300      	movs	r3, #0
 80092f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80092f6:	2300      	movs	r3, #0
 80092f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80092fa:	463b      	mov	r3, r7
 80092fc:	4619      	mov	r1, r3
 80092fe:	4806      	ldr	r0, [pc, #24]	@ (8009318 <MX_TIM5_Init+0xa4>)
 8009300:	f005 ff56 	bl	800f1b0 <HAL_TIMEx_MasterConfigSynchronization>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800930a:	f7fe ff87 	bl	800821c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800930e:	bf00      	nop
 8009310:	3730      	adds	r7, #48	@ 0x30
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop
 8009318:	20001cb8 	.word	0x20001cb8
 800931c:	40000c00 	.word	0x40000c00

08009320 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b09c      	sub	sp, #112	@ 0x70
 8009324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009326:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800932a:	2200      	movs	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
 800932e:	605a      	str	r2, [r3, #4]
 8009330:	609a      	str	r2, [r3, #8]
 8009332:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009334:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]
 800933c:	605a      	str	r2, [r3, #4]
 800933e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009340:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009344:	2200      	movs	r2, #0
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	605a      	str	r2, [r3, #4]
 800934a:	609a      	str	r2, [r3, #8]
 800934c:	60da      	str	r2, [r3, #12]
 800934e:	611a      	str	r2, [r3, #16]
 8009350:	615a      	str	r2, [r3, #20]
 8009352:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009354:	1d3b      	adds	r3, r7, #4
 8009356:	2234      	movs	r2, #52	@ 0x34
 8009358:	2100      	movs	r1, #0
 800935a:	4618      	mov	r0, r3
 800935c:	f008 fc7e 	bl	8011c5c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009360:	4b4c      	ldr	r3, [pc, #304]	@ (8009494 <MX_TIM8_Init+0x174>)
 8009362:	4a4d      	ldr	r2, [pc, #308]	@ (8009498 <MX_TIM8_Init+0x178>)
 8009364:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009366:	4b4b      	ldr	r3, [pc, #300]	@ (8009494 <MX_TIM8_Init+0x174>)
 8009368:	2200      	movs	r2, #0
 800936a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800936c:	4b49      	ldr	r3, [pc, #292]	@ (8009494 <MX_TIM8_Init+0x174>)
 800936e:	2200      	movs	r2, #0
 8009370:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8009372:	4b48      	ldr	r3, [pc, #288]	@ (8009494 <MX_TIM8_Init+0x174>)
 8009374:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009378:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800937a:	4b46      	ldr	r3, [pc, #280]	@ (8009494 <MX_TIM8_Init+0x174>)
 800937c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009380:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009382:	4b44      	ldr	r3, [pc, #272]	@ (8009494 <MX_TIM8_Init+0x174>)
 8009384:	2200      	movs	r2, #0
 8009386:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009388:	4b42      	ldr	r3, [pc, #264]	@ (8009494 <MX_TIM8_Init+0x174>)
 800938a:	2200      	movs	r2, #0
 800938c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800938e:	4841      	ldr	r0, [pc, #260]	@ (8009494 <MX_TIM8_Init+0x174>)
 8009390:	f003 ffa0 	bl	800d2d4 <HAL_TIM_Base_Init>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800939a:	f7fe ff3f 	bl	800821c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800939e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80093a2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80093a4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80093a8:	4619      	mov	r1, r3
 80093aa:	483a      	ldr	r0, [pc, #232]	@ (8009494 <MX_TIM8_Init+0x174>)
 80093ac:	f004 ff1a 	bl	800e1e4 <HAL_TIM_ConfigClockSource>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d001      	beq.n	80093ba <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 80093b6:	f7fe ff31 	bl	800821c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80093ba:	4836      	ldr	r0, [pc, #216]	@ (8009494 <MX_TIM8_Init+0x174>)
 80093bc:	f004 f8d6 	bl	800d56c <HAL_TIM_PWM_Init>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d001      	beq.n	80093ca <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 80093c6:	f7fe ff29 	bl	800821c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80093ca:	2300      	movs	r3, #0
 80093cc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80093ce:	2300      	movs	r3, #0
 80093d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80093d2:	2300      	movs	r3, #0
 80093d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80093d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80093da:	4619      	mov	r1, r3
 80093dc:	482d      	ldr	r0, [pc, #180]	@ (8009494 <MX_TIM8_Init+0x174>)
 80093de:	f005 fee7 	bl	800f1b0 <HAL_TIMEx_MasterConfigSynchronization>
 80093e2:	4603      	mov	r3, r0
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d001      	beq.n	80093ec <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 80093e8:	f7fe ff18 	bl	800821c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80093ec:	2360      	movs	r3, #96	@ 0x60
 80093ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80093f4:	2300      	movs	r3, #0
 80093f6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80093f8:	2300      	movs	r3, #0
 80093fa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80093fc:	2300      	movs	r3, #0
 80093fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009400:	2300      	movs	r3, #0
 8009402:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009404:	2300      	movs	r3, #0
 8009406:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009408:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800940c:	2200      	movs	r2, #0
 800940e:	4619      	mov	r1, r3
 8009410:	4820      	ldr	r0, [pc, #128]	@ (8009494 <MX_TIM8_Init+0x174>)
 8009412:	f004 fdd3 	bl	800dfbc <HAL_TIM_PWM_ConfigChannel>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800941c:	f7fe fefe 	bl	800821c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009420:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009424:	2204      	movs	r2, #4
 8009426:	4619      	mov	r1, r3
 8009428:	481a      	ldr	r0, [pc, #104]	@ (8009494 <MX_TIM8_Init+0x174>)
 800942a:	f004 fdc7 	bl	800dfbc <HAL_TIM_PWM_ConfigChannel>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8009434:	f7fe fef2 	bl	800821c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009438:	2300      	movs	r3, #0
 800943a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800943c:	2300      	movs	r3, #0
 800943e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009440:	2300      	movs	r3, #0
 8009442:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009444:	2300      	movs	r3, #0
 8009446:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009448:	2300      	movs	r3, #0
 800944a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800944c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009450:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009456:	2300      	movs	r3, #0
 8009458:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800945a:	2300      	movs	r3, #0
 800945c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800945e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009462:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009468:	2300      	movs	r3, #0
 800946a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800946c:	2300      	movs	r3, #0
 800946e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8009470:	1d3b      	adds	r3, r7, #4
 8009472:	4619      	mov	r1, r3
 8009474:	4807      	ldr	r0, [pc, #28]	@ (8009494 <MX_TIM8_Init+0x174>)
 8009476:	f005 ff31 	bl	800f2dc <HAL_TIMEx_ConfigBreakDeadTime>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8009480:	f7fe fecc 	bl	800821c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8009484:	4803      	ldr	r0, [pc, #12]	@ (8009494 <MX_TIM8_Init+0x174>)
 8009486:	f000 f969 	bl	800975c <HAL_TIM_MspPostInit>

}
 800948a:	bf00      	nop
 800948c:	3770      	adds	r7, #112	@ 0x70
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	20001d84 	.word	0x20001d84
 8009498:	40013400 	.word	0x40013400

0800949c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80094a0:	4b14      	ldr	r3, [pc, #80]	@ (80094f4 <MX_TIM16_Init+0x58>)
 80094a2:	4a15      	ldr	r2, [pc, #84]	@ (80094f8 <MX_TIM16_Init+0x5c>)
 80094a4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80094a6:	4b13      	ldr	r3, [pc, #76]	@ (80094f4 <MX_TIM16_Init+0x58>)
 80094a8:	22a9      	movs	r2, #169	@ 0xa9
 80094aa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094ac:	4b11      	ldr	r3, [pc, #68]	@ (80094f4 <MX_TIM16_Init+0x58>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80094b2:	4b10      	ldr	r3, [pc, #64]	@ (80094f4 <MX_TIM16_Init+0x58>)
 80094b4:	f240 4279 	movw	r2, #1145	@ 0x479
 80094b8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094ba:	4b0e      	ldr	r3, [pc, #56]	@ (80094f4 <MX_TIM16_Init+0x58>)
 80094bc:	2200      	movs	r2, #0
 80094be:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80094c0:	4b0c      	ldr	r3, [pc, #48]	@ (80094f4 <MX_TIM16_Init+0x58>)
 80094c2:	2200      	movs	r2, #0
 80094c4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094c6:	4b0b      	ldr	r3, [pc, #44]	@ (80094f4 <MX_TIM16_Init+0x58>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80094cc:	4809      	ldr	r0, [pc, #36]	@ (80094f4 <MX_TIM16_Init+0x58>)
 80094ce:	f003 ff01 	bl	800d2d4 <HAL_TIM_Base_Init>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80094d8:	f7fe fea0 	bl	800821c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80094dc:	2108      	movs	r1, #8
 80094de:	4805      	ldr	r0, [pc, #20]	@ (80094f4 <MX_TIM16_Init+0x58>)
 80094e0:	f004 f9ba 	bl	800d858 <HAL_TIM_OnePulse_Init>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 80094ea:	f7fe fe97 	bl	800821c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80094ee:	bf00      	nop
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	20001e50 	.word	0x20001e50
 80094f8:	40014400 	.word	0x40014400

080094fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a0d      	ldr	r2, [pc, #52]	@ (8009540 <HAL_TIM_PWM_MspInit+0x44>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d113      	bne.n	8009536 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800950e:	4b0d      	ldr	r3, [pc, #52]	@ (8009544 <HAL_TIM_PWM_MspInit+0x48>)
 8009510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009512:	4a0c      	ldr	r2, [pc, #48]	@ (8009544 <HAL_TIM_PWM_MspInit+0x48>)
 8009514:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009518:	6613      	str	r3, [r2, #96]	@ 0x60
 800951a:	4b0a      	ldr	r3, [pc, #40]	@ (8009544 <HAL_TIM_PWM_MspInit+0x48>)
 800951c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800951e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8009526:	2200      	movs	r2, #0
 8009528:	2100      	movs	r1, #0
 800952a:	2019      	movs	r0, #25
 800952c:	f002 f957 	bl	800b7de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009530:	2019      	movs	r0, #25
 8009532:	f002 f96e 	bl	800b812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8009536:	bf00      	nop
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}
 800953e:	bf00      	nop
 8009540:	40012c00 	.word	0x40012c00
 8009544:	40021000 	.word	0x40021000

08009548 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b086      	sub	sp, #24
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009558:	d114      	bne.n	8009584 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800955a:	4b22      	ldr	r3, [pc, #136]	@ (80095e4 <HAL_TIM_Base_MspInit+0x9c>)
 800955c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800955e:	4a21      	ldr	r2, [pc, #132]	@ (80095e4 <HAL_TIM_Base_MspInit+0x9c>)
 8009560:	f043 0301 	orr.w	r3, r3, #1
 8009564:	6593      	str	r3, [r2, #88]	@ 0x58
 8009566:	4b1f      	ldr	r3, [pc, #124]	@ (80095e4 <HAL_TIM_Base_MspInit+0x9c>)
 8009568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800956a:	f003 0301 	and.w	r3, r3, #1
 800956e:	617b      	str	r3, [r7, #20]
 8009570:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8009572:	2200      	movs	r2, #0
 8009574:	2100      	movs	r1, #0
 8009576:	201c      	movs	r0, #28
 8009578:	f002 f931 	bl	800b7de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800957c:	201c      	movs	r0, #28
 800957e:	f002 f948 	bl	800b812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8009582:	e02a      	b.n	80095da <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a17      	ldr	r2, [pc, #92]	@ (80095e8 <HAL_TIM_Base_MspInit+0xa0>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d10c      	bne.n	80095a8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800958e:	4b15      	ldr	r3, [pc, #84]	@ (80095e4 <HAL_TIM_Base_MspInit+0x9c>)
 8009590:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009592:	4a14      	ldr	r2, [pc, #80]	@ (80095e4 <HAL_TIM_Base_MspInit+0x9c>)
 8009594:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009598:	6613      	str	r3, [r2, #96]	@ 0x60
 800959a:	4b12      	ldr	r3, [pc, #72]	@ (80095e4 <HAL_TIM_Base_MspInit+0x9c>)
 800959c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800959e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095a2:	613b      	str	r3, [r7, #16]
 80095a4:	693b      	ldr	r3, [r7, #16]
}
 80095a6:	e018      	b.n	80095da <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a0f      	ldr	r2, [pc, #60]	@ (80095ec <HAL_TIM_Base_MspInit+0xa4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d113      	bne.n	80095da <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80095b2:	4b0c      	ldr	r3, [pc, #48]	@ (80095e4 <HAL_TIM_Base_MspInit+0x9c>)
 80095b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095b6:	4a0b      	ldr	r2, [pc, #44]	@ (80095e4 <HAL_TIM_Base_MspInit+0x9c>)
 80095b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80095be:	4b09      	ldr	r3, [pc, #36]	@ (80095e4 <HAL_TIM_Base_MspInit+0x9c>)
 80095c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80095ca:	2200      	movs	r2, #0
 80095cc:	2100      	movs	r1, #0
 80095ce:	2019      	movs	r0, #25
 80095d0:	f002 f905 	bl	800b7de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80095d4:	2019      	movs	r0, #25
 80095d6:	f002 f91c 	bl	800b812 <HAL_NVIC_EnableIRQ>
}
 80095da:	bf00      	nop
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	40021000 	.word	0x40021000
 80095e8:	40013400 	.word	0x40013400
 80095ec:	40014400 	.word	0x40014400

080095f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08e      	sub	sp, #56	@ 0x38
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095fc:	2200      	movs	r2, #0
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	605a      	str	r2, [r3, #4]
 8009602:	609a      	str	r2, [r3, #8]
 8009604:	60da      	str	r2, [r3, #12]
 8009606:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a4f      	ldr	r2, [pc, #316]	@ (800974c <HAL_TIM_Encoder_MspInit+0x15c>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d131      	bne.n	8009676 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009612:	4b4f      	ldr	r3, [pc, #316]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 8009614:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009616:	4a4e      	ldr	r2, [pc, #312]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 8009618:	f043 0302 	orr.w	r3, r3, #2
 800961c:	6593      	str	r3, [r2, #88]	@ 0x58
 800961e:	4b4c      	ldr	r3, [pc, #304]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 8009620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009622:	f003 0302 	and.w	r3, r3, #2
 8009626:	623b      	str	r3, [r7, #32]
 8009628:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800962a:	4b49      	ldr	r3, [pc, #292]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 800962c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800962e:	4a48      	ldr	r2, [pc, #288]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 8009630:	f043 0301 	orr.w	r3, r3, #1
 8009634:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009636:	4b46      	ldr	r3, [pc, #280]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 8009638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	61fb      	str	r3, [r7, #28]
 8009640:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009642:	23c0      	movs	r3, #192	@ 0xc0
 8009644:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009646:	2302      	movs	r3, #2
 8009648:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800964a:	2300      	movs	r3, #0
 800964c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800964e:	2300      	movs	r3, #0
 8009650:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8009652:	2302      	movs	r3, #2
 8009654:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800965a:	4619      	mov	r1, r3
 800965c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009660:	f002 fc24 	bl	800beac <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8009664:	2200      	movs	r2, #0
 8009666:	2100      	movs	r1, #0
 8009668:	201d      	movs	r0, #29
 800966a:	f002 f8b8 	bl	800b7de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800966e:	201d      	movs	r0, #29
 8009670:	f002 f8cf 	bl	800b812 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8009674:	e065      	b.n	8009742 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a36      	ldr	r2, [pc, #216]	@ (8009754 <HAL_TIM_Encoder_MspInit+0x164>)
 800967c:	4293      	cmp	r3, r2
 800967e:	d132      	bne.n	80096e6 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009680:	4b33      	ldr	r3, [pc, #204]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 8009682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009684:	4a32      	ldr	r2, [pc, #200]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 8009686:	f043 0304 	orr.w	r3, r3, #4
 800968a:	6593      	str	r3, [r2, #88]	@ 0x58
 800968c:	4b30      	ldr	r3, [pc, #192]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 800968e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	61bb      	str	r3, [r7, #24]
 8009696:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009698:	4b2d      	ldr	r3, [pc, #180]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 800969a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800969c:	4a2c      	ldr	r2, [pc, #176]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 800969e:	f043 0301 	orr.w	r3, r3, #1
 80096a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80096a4:	4b2a      	ldr	r3, [pc, #168]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 80096a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096a8:	f003 0301 	and.w	r3, r3, #1
 80096ac:	617b      	str	r3, [r7, #20]
 80096ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096b0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80096b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096b6:	2302      	movs	r3, #2
 80096b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096be:	2300      	movs	r3, #0
 80096c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80096c2:	230a      	movs	r3, #10
 80096c4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80096ca:	4619      	mov	r1, r3
 80096cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80096d0:	f002 fbec 	bl	800beac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80096d4:	2200      	movs	r2, #0
 80096d6:	2100      	movs	r1, #0
 80096d8:	201e      	movs	r0, #30
 80096da:	f002 f880 	bl	800b7de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80096de:	201e      	movs	r0, #30
 80096e0:	f002 f897 	bl	800b812 <HAL_NVIC_EnableIRQ>
}
 80096e4:	e02d      	b.n	8009742 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009758 <HAL_TIM_Encoder_MspInit+0x168>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d128      	bne.n	8009742 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80096f0:	4b17      	ldr	r3, [pc, #92]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 80096f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096f4:	4a16      	ldr	r2, [pc, #88]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 80096f6:	f043 0308 	orr.w	r3, r3, #8
 80096fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80096fc:	4b14      	ldr	r3, [pc, #80]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 80096fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009700:	f003 0308 	and.w	r3, r3, #8
 8009704:	613b      	str	r3, [r7, #16]
 8009706:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009708:	4b11      	ldr	r3, [pc, #68]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 800970a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800970c:	4a10      	ldr	r2, [pc, #64]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 800970e:	f043 0301 	orr.w	r3, r3, #1
 8009712:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009714:	4b0e      	ldr	r3, [pc, #56]	@ (8009750 <HAL_TIM_Encoder_MspInit+0x160>)
 8009716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009718:	f003 0301 	and.w	r3, r3, #1
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009720:	2303      	movs	r3, #3
 8009722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009724:	2302      	movs	r3, #2
 8009726:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009728:	2300      	movs	r3, #0
 800972a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800972c:	2300      	movs	r3, #0
 800972e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8009730:	2302      	movs	r3, #2
 8009732:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009738:	4619      	mov	r1, r3
 800973a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800973e:	f002 fbb5 	bl	800beac <HAL_GPIO_Init>
}
 8009742:	bf00      	nop
 8009744:	3738      	adds	r7, #56	@ 0x38
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	40000400 	.word	0x40000400
 8009750:	40021000 	.word	0x40021000
 8009754:	40000800 	.word	0x40000800
 8009758:	40000c00 	.word	0x40000c00

0800975c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b08a      	sub	sp, #40	@ 0x28
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009764:	f107 0314 	add.w	r3, r7, #20
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	605a      	str	r2, [r3, #4]
 800976e:	609a      	str	r2, [r3, #8]
 8009770:	60da      	str	r2, [r3, #12]
 8009772:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a22      	ldr	r2, [pc, #136]	@ (8009804 <HAL_TIM_MspPostInit+0xa8>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d11c      	bne.n	80097b8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800977e:	4b22      	ldr	r3, [pc, #136]	@ (8009808 <HAL_TIM_MspPostInit+0xac>)
 8009780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009782:	4a21      	ldr	r2, [pc, #132]	@ (8009808 <HAL_TIM_MspPostInit+0xac>)
 8009784:	f043 0304 	orr.w	r3, r3, #4
 8009788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800978a:	4b1f      	ldr	r3, [pc, #124]	@ (8009808 <HAL_TIM_MspPostInit+0xac>)
 800978c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800978e:	f003 0304 	and.w	r3, r3, #4
 8009792:	613b      	str	r3, [r7, #16]
 8009794:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009796:	2308      	movs	r3, #8
 8009798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800979a:	2302      	movs	r3, #2
 800979c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800979e:	2300      	movs	r3, #0
 80097a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097a2:	2300      	movs	r3, #0
 80097a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80097a6:	2302      	movs	r3, #2
 80097a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097aa:	f107 0314 	add.w	r3, r7, #20
 80097ae:	4619      	mov	r1, r3
 80097b0:	4816      	ldr	r0, [pc, #88]	@ (800980c <HAL_TIM_MspPostInit+0xb0>)
 80097b2:	f002 fb7b 	bl	800beac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80097b6:	e020      	b.n	80097fa <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a14      	ldr	r2, [pc, #80]	@ (8009810 <HAL_TIM_MspPostInit+0xb4>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d11b      	bne.n	80097fa <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80097c2:	4b11      	ldr	r3, [pc, #68]	@ (8009808 <HAL_TIM_MspPostInit+0xac>)
 80097c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097c6:	4a10      	ldr	r2, [pc, #64]	@ (8009808 <HAL_TIM_MspPostInit+0xac>)
 80097c8:	f043 0304 	orr.w	r3, r3, #4
 80097cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097ce:	4b0e      	ldr	r3, [pc, #56]	@ (8009808 <HAL_TIM_MspPostInit+0xac>)
 80097d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097d2:	f003 0304 	and.w	r3, r3, #4
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80097da:	23c0      	movs	r3, #192	@ 0xc0
 80097dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097de:	2302      	movs	r3, #2
 80097e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e2:	2300      	movs	r3, #0
 80097e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097e6:	2300      	movs	r3, #0
 80097e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80097ea:	2304      	movs	r3, #4
 80097ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097ee:	f107 0314 	add.w	r3, r7, #20
 80097f2:	4619      	mov	r1, r3
 80097f4:	4805      	ldr	r0, [pc, #20]	@ (800980c <HAL_TIM_MspPostInit+0xb0>)
 80097f6:	f002 fb59 	bl	800beac <HAL_GPIO_Init>
}
 80097fa:	bf00      	nop
 80097fc:	3728      	adds	r7, #40	@ 0x28
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	40012c00 	.word	0x40012c00
 8009808:	40021000 	.word	0x40021000
 800980c:	48000800 	.word	0x48000800
 8009810:	40013400 	.word	0x40013400

08009814 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8009818:	4b20      	ldr	r3, [pc, #128]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 800981a:	4a21      	ldr	r2, [pc, #132]	@ (80098a0 <MX_LPUART1_UART_Init+0x8c>)
 800981c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800981e:	4b1f      	ldr	r3, [pc, #124]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 8009820:	4a20      	ldr	r2, [pc, #128]	@ (80098a4 <MX_LPUART1_UART_Init+0x90>)
 8009822:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009824:	4b1d      	ldr	r3, [pc, #116]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 8009826:	2200      	movs	r2, #0
 8009828:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800982a:	4b1c      	ldr	r3, [pc, #112]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 800982c:	2200      	movs	r2, #0
 800982e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8009830:	4b1a      	ldr	r3, [pc, #104]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 8009832:	2200      	movs	r2, #0
 8009834:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8009836:	4b19      	ldr	r3, [pc, #100]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 8009838:	220c      	movs	r2, #12
 800983a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800983c:	4b17      	ldr	r3, [pc, #92]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 800983e:	2200      	movs	r2, #0
 8009840:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009842:	4b16      	ldr	r3, [pc, #88]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 8009844:	2200      	movs	r2, #0
 8009846:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009848:	4b14      	ldr	r3, [pc, #80]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 800984a:	2200      	movs	r2, #0
 800984c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800984e:	4b13      	ldr	r3, [pc, #76]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 8009850:	2200      	movs	r2, #0
 8009852:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8009854:	4811      	ldr	r0, [pc, #68]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 8009856:	f005 fe25 	bl	800f4a4 <HAL_UART_Init>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8009860:	f7fe fcdc 	bl	800821c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009864:	2100      	movs	r1, #0
 8009866:	480d      	ldr	r0, [pc, #52]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 8009868:	f007 fb82 	bl	8010f70 <HAL_UARTEx_SetTxFifoThreshold>
 800986c:	4603      	mov	r3, r0
 800986e:	2b00      	cmp	r3, #0
 8009870:	d001      	beq.n	8009876 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8009872:	f7fe fcd3 	bl	800821c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009876:	2100      	movs	r1, #0
 8009878:	4808      	ldr	r0, [pc, #32]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 800987a:	f007 fbb7 	bl	8010fec <HAL_UARTEx_SetRxFifoThreshold>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d001      	beq.n	8009888 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8009884:	f7fe fcca 	bl	800821c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8009888:	4804      	ldr	r0, [pc, #16]	@ (800989c <MX_LPUART1_UART_Init+0x88>)
 800988a:	f007 fb38 	bl	8010efe <HAL_UARTEx_DisableFifoMode>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8009894:	f7fe fcc2 	bl	800821c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8009898:	bf00      	nop
 800989a:	bd80      	pop	{r7, pc}
 800989c:	20001f1c 	.word	0x20001f1c
 80098a0:	40008000 	.word	0x40008000
 80098a4:	001e8480 	.word	0x001e8480

080098a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80098ac:	4b23      	ldr	r3, [pc, #140]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098ae:	4a24      	ldr	r2, [pc, #144]	@ (8009940 <MX_USART2_UART_Init+0x98>)
 80098b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80098b2:	4b22      	ldr	r3, [pc, #136]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098b4:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80098b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80098ba:	4b20      	ldr	r3, [pc, #128]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80098c0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80098c2:	4b1e      	ldr	r3, [pc, #120]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098c4:	2200      	movs	r2, #0
 80098c6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80098c8:	4b1c      	ldr	r3, [pc, #112]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80098ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80098d0:	4b1a      	ldr	r3, [pc, #104]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098d2:	220c      	movs	r2, #12
 80098d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098d6:	4b19      	ldr	r3, [pc, #100]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098d8:	2200      	movs	r2, #0
 80098da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80098dc:	4b17      	ldr	r3, [pc, #92]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098de:	2200      	movs	r2, #0
 80098e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80098e2:	4b16      	ldr	r3, [pc, #88]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098e4:	2200      	movs	r2, #0
 80098e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80098e8:	4b14      	ldr	r3, [pc, #80]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098ea:	2200      	movs	r2, #0
 80098ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80098ee:	4b13      	ldr	r3, [pc, #76]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098f0:	2200      	movs	r2, #0
 80098f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80098f4:	4811      	ldr	r0, [pc, #68]	@ (800993c <MX_USART2_UART_Init+0x94>)
 80098f6:	f005 fdd5 	bl	800f4a4 <HAL_UART_Init>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d001      	beq.n	8009904 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8009900:	f7fe fc8c 	bl	800821c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009904:	2100      	movs	r1, #0
 8009906:	480d      	ldr	r0, [pc, #52]	@ (800993c <MX_USART2_UART_Init+0x94>)
 8009908:	f007 fb32 	bl	8010f70 <HAL_UARTEx_SetTxFifoThreshold>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d001      	beq.n	8009916 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8009912:	f7fe fc83 	bl	800821c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009916:	2100      	movs	r1, #0
 8009918:	4808      	ldr	r0, [pc, #32]	@ (800993c <MX_USART2_UART_Init+0x94>)
 800991a:	f007 fb67 	bl	8010fec <HAL_UARTEx_SetRxFifoThreshold>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d001      	beq.n	8009928 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8009924:	f7fe fc7a 	bl	800821c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8009928:	4804      	ldr	r0, [pc, #16]	@ (800993c <MX_USART2_UART_Init+0x94>)
 800992a:	f007 fae8 	bl	8010efe <HAL_UARTEx_DisableFifoMode>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8009934:	f7fe fc72 	bl	800821c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009938:	bf00      	nop
 800993a:	bd80      	pop	{r7, pc}
 800993c:	20001fe8 	.word	0x20001fe8
 8009940:	40004400 	.word	0x40004400

08009944 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b0a0      	sub	sp, #128	@ 0x80
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800994c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009950:	2200      	movs	r2, #0
 8009952:	601a      	str	r2, [r3, #0]
 8009954:	605a      	str	r2, [r3, #4]
 8009956:	609a      	str	r2, [r3, #8]
 8009958:	60da      	str	r2, [r3, #12]
 800995a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800995c:	f107 0318 	add.w	r3, r7, #24
 8009960:	2254      	movs	r2, #84	@ 0x54
 8009962:	2100      	movs	r1, #0
 8009964:	4618      	mov	r0, r3
 8009966:	f008 f979 	bl	8011c5c <memset>
  if(uartHandle->Instance==LPUART1)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a99      	ldr	r2, [pc, #612]	@ (8009bd4 <HAL_UART_MspInit+0x290>)
 8009970:	4293      	cmp	r3, r2
 8009972:	f040 8093 	bne.w	8009a9c <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8009976:	2320      	movs	r3, #32
 8009978:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800997a:	2300      	movs	r3, #0
 800997c:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800997e:	f107 0318 	add.w	r3, r7, #24
 8009982:	4618      	mov	r0, r3
 8009984:	f003 fa58 	bl	800ce38 <HAL_RCCEx_PeriphCLKConfig>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d001      	beq.n	8009992 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800998e:	f7fe fc45 	bl	800821c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8009992:	4b91      	ldr	r3, [pc, #580]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 8009994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009996:	4a90      	ldr	r2, [pc, #576]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 8009998:	f043 0301 	orr.w	r3, r3, #1
 800999c:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800999e:	4b8e      	ldr	r3, [pc, #568]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 80099a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	617b      	str	r3, [r7, #20]
 80099a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80099aa:	4b8b      	ldr	r3, [pc, #556]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 80099ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099ae:	4a8a      	ldr	r2, [pc, #552]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 80099b0:	f043 0302 	orr.w	r3, r3, #2
 80099b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80099b6:	4b88      	ldr	r3, [pc, #544]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 80099b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	613b      	str	r3, [r7, #16]
 80099c0:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80099c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80099c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099c8:	2302      	movs	r3, #2
 80099ca:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099cc:	2300      	movs	r3, #0
 80099ce:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099d0:	2300      	movs	r3, #0
 80099d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80099d4:	2308      	movs	r3, #8
 80099d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80099d8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80099dc:	4619      	mov	r1, r3
 80099de:	487f      	ldr	r0, [pc, #508]	@ (8009bdc <HAL_UART_MspInit+0x298>)
 80099e0:	f002 fa64 	bl	800beac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 80099e4:	4b7e      	ldr	r3, [pc, #504]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 80099e6:	4a7f      	ldr	r2, [pc, #508]	@ (8009be4 <HAL_UART_MspInit+0x2a0>)
 80099e8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80099ea:	4b7d      	ldr	r3, [pc, #500]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 80099ec:	2222      	movs	r2, #34	@ 0x22
 80099ee:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099f0:	4b7b      	ldr	r3, [pc, #492]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80099f6:	4b7a      	ldr	r3, [pc, #488]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80099fc:	4b78      	ldr	r3, [pc, #480]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 80099fe:	2280      	movs	r2, #128	@ 0x80
 8009a00:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a02:	4b77      	ldr	r3, [pc, #476]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a08:	4b75      	ldr	r3, [pc, #468]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8009a0e:	4b74      	ldr	r3, [pc, #464]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009a14:	4b72      	ldr	r3, [pc, #456]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8009a1a:	4871      	ldr	r0, [pc, #452]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 8009a1c:	f001 ff14 	bl	800b848 <HAL_DMA_Init>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8009a26:	f7fe fbf9 	bl	800821c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a6c      	ldr	r2, [pc, #432]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 8009a2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009a32:	4a6b      	ldr	r2, [pc, #428]	@ (8009be0 <HAL_UART_MspInit+0x29c>)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 8009a38:	4b6b      	ldr	r3, [pc, #428]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a3a:	4a6c      	ldr	r2, [pc, #432]	@ (8009bec <HAL_UART_MspInit+0x2a8>)
 8009a3c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8009a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a40:	2223      	movs	r2, #35	@ 0x23
 8009a42:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009a44:	4b68      	ldr	r3, [pc, #416]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a46:	2210      	movs	r2, #16
 8009a48:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009a4a:	4b67      	ldr	r3, [pc, #412]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009a50:	4b65      	ldr	r3, [pc, #404]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a52:	2280      	movs	r2, #128	@ 0x80
 8009a54:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009a56:	4b64      	ldr	r3, [pc, #400]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a58:	2200      	movs	r2, #0
 8009a5a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009a5c:	4b62      	ldr	r3, [pc, #392]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a5e:	2200      	movs	r2, #0
 8009a60:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8009a62:	4b61      	ldr	r3, [pc, #388]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a64:	2200      	movs	r2, #0
 8009a66:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009a68:	4b5f      	ldr	r3, [pc, #380]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8009a6e:	485e      	ldr	r0, [pc, #376]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a70:	f001 feea 	bl	800b848 <HAL_DMA_Init>
 8009a74:	4603      	mov	r3, r0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d001      	beq.n	8009a7e <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8009a7a:	f7fe fbcf 	bl	800821c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a59      	ldr	r2, [pc, #356]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a82:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009a84:	4a58      	ldr	r2, [pc, #352]	@ (8009be8 <HAL_UART_MspInit+0x2a4>)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	205b      	movs	r0, #91	@ 0x5b
 8009a90:	f001 fea5 	bl	800b7de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8009a94:	205b      	movs	r0, #91	@ 0x5b
 8009a96:	f001 febc 	bl	800b812 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009a9a:	e097      	b.n	8009bcc <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a53      	ldr	r2, [pc, #332]	@ (8009bf0 <HAL_UART_MspInit+0x2ac>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	f040 8092 	bne.w	8009bcc <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009aac:	2300      	movs	r3, #0
 8009aae:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009ab0:	f107 0318 	add.w	r3, r7, #24
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f003 f9bf 	bl	800ce38 <HAL_RCCEx_PeriphCLKConfig>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <HAL_UART_MspInit+0x180>
      Error_Handler();
 8009ac0:	f7fe fbac 	bl	800821c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009ac4:	4b44      	ldr	r3, [pc, #272]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 8009ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ac8:	4a43      	ldr	r2, [pc, #268]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 8009aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ace:	6593      	str	r3, [r2, #88]	@ 0x58
 8009ad0:	4b41      	ldr	r3, [pc, #260]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 8009ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009adc:	4b3e      	ldr	r3, [pc, #248]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 8009ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ae0:	4a3d      	ldr	r2, [pc, #244]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 8009ae2:	f043 0301 	orr.w	r3, r3, #1
 8009ae6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8009bd8 <HAL_UART_MspInit+0x294>)
 8009aea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	60bb      	str	r3, [r7, #8]
 8009af2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009af4:	230c      	movs	r3, #12
 8009af6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009af8:	2302      	movs	r3, #2
 8009afa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009afc:	2300      	movs	r3, #0
 8009afe:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b00:	2300      	movs	r3, #0
 8009b02:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009b04:	2307      	movs	r3, #7
 8009b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009b12:	f002 f9cb 	bl	800beac <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8009b16:	4b37      	ldr	r3, [pc, #220]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b18:	4a37      	ldr	r2, [pc, #220]	@ (8009bf8 <HAL_UART_MspInit+0x2b4>)
 8009b1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8009b1c:	4b35      	ldr	r3, [pc, #212]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b1e:	221a      	movs	r2, #26
 8009b20:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009b22:	4b34      	ldr	r3, [pc, #208]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b24:	2200      	movs	r2, #0
 8009b26:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009b28:	4b32      	ldr	r3, [pc, #200]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009b2e:	4b31      	ldr	r3, [pc, #196]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b30:	2280      	movs	r2, #128	@ 0x80
 8009b32:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009b34:	4b2f      	ldr	r3, [pc, #188]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b36:	2200      	movs	r2, #0
 8009b38:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009b3a:	4b2e      	ldr	r3, [pc, #184]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8009b40:	4b2c      	ldr	r3, [pc, #176]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009b46:	4b2b      	ldr	r3, [pc, #172]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8009b4c:	4829      	ldr	r0, [pc, #164]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b4e:	f001 fe7b 	bl	800b848 <HAL_DMA_Init>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <HAL_UART_MspInit+0x218>
      Error_Handler();
 8009b58:	f7fe fb60 	bl	800821c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a25      	ldr	r2, [pc, #148]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8009b64:	4a23      	ldr	r2, [pc, #140]	@ (8009bf4 <HAL_UART_MspInit+0x2b0>)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8009b6a:	4b24      	ldr	r3, [pc, #144]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009b6c:	4a24      	ldr	r2, [pc, #144]	@ (8009c00 <HAL_UART_MspInit+0x2bc>)
 8009b6e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8009b70:	4b22      	ldr	r3, [pc, #136]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009b72:	221b      	movs	r2, #27
 8009b74:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009b76:	4b21      	ldr	r3, [pc, #132]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009b78:	2210      	movs	r2, #16
 8009b7a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009b7e:	2200      	movs	r2, #0
 8009b80:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009b82:	4b1e      	ldr	r3, [pc, #120]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009b84:	2280      	movs	r2, #128	@ 0x80
 8009b86:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009b88:	4b1c      	ldr	r3, [pc, #112]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8009b94:	4b19      	ldr	r3, [pc, #100]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009b9a:	4b18      	ldr	r3, [pc, #96]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8009ba0:	4816      	ldr	r0, [pc, #88]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009ba2:	f001 fe51 	bl	800b848 <HAL_DMA_Init>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 8009bac:	f7fe fb36 	bl	800821c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a12      	ldr	r2, [pc, #72]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009bb4:	67da      	str	r2, [r3, #124]	@ 0x7c
 8009bb6:	4a11      	ldr	r2, [pc, #68]	@ (8009bfc <HAL_UART_MspInit+0x2b8>)
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2100      	movs	r1, #0
 8009bc0:	2026      	movs	r0, #38	@ 0x26
 8009bc2:	f001 fe0c 	bl	800b7de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009bc6:	2026      	movs	r0, #38	@ 0x26
 8009bc8:	f001 fe23 	bl	800b812 <HAL_NVIC_EnableIRQ>
}
 8009bcc:	bf00      	nop
 8009bce:	3780      	adds	r7, #128	@ 0x80
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	40008000 	.word	0x40008000
 8009bd8:	40021000 	.word	0x40021000
 8009bdc:	48000400 	.word	0x48000400
 8009be0:	200020b4 	.word	0x200020b4
 8009be4:	40020044 	.word	0x40020044
 8009be8:	20002114 	.word	0x20002114
 8009bec:	40020058 	.word	0x40020058
 8009bf0:	40004400 	.word	0x40004400
 8009bf4:	20002174 	.word	0x20002174
 8009bf8:	4002001c 	.word	0x4002001c
 8009bfc:	200021d4 	.word	0x200021d4
 8009c00:	40020030 	.word	0x40020030

08009c04 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8009c04:	480d      	ldr	r0, [pc, #52]	@ (8009c3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8009c06:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 8009c08:	f7ff f994 	bl	8008f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009c0c:	480c      	ldr	r0, [pc, #48]	@ (8009c40 <LoopForever+0x6>)
  ldr r1, =_edata
 8009c0e:	490d      	ldr	r1, [pc, #52]	@ (8009c44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009c10:	4a0d      	ldr	r2, [pc, #52]	@ (8009c48 <LoopForever+0xe>)
  movs r3, #0
 8009c12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8009c14:	e002      	b.n	8009c1c <LoopCopyDataInit>

08009c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c1a:	3304      	adds	r3, #4

08009c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c20:	d3f9      	bcc.n	8009c16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c22:	4a0a      	ldr	r2, [pc, #40]	@ (8009c4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8009c24:	4c0a      	ldr	r4, [pc, #40]	@ (8009c50 <LoopForever+0x16>)
  movs r3, #0
 8009c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c28:	e001      	b.n	8009c2e <LoopFillZerobss>

08009c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c2c:	3204      	adds	r2, #4

08009c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c30:	d3fb      	bcc.n	8009c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009c32:	f008 f831 	bl	8011c98 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009c36:	f7fb fab7 	bl	80051a8 <main>

08009c3a <LoopForever>:

LoopForever:
    b LoopForever
 8009c3a:	e7fe      	b.n	8009c3a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8009c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c44:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8009c48:	08014198 	.word	0x08014198
  ldr r2, =_sbss
 8009c4c:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8009c50:	20002380 	.word	0x20002380

08009c54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009c54:	e7fe      	b.n	8009c54 <ADC1_2_IRQHandler>

08009c56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b082      	sub	sp, #8
 8009c5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c60:	2003      	movs	r0, #3
 8009c62:	f001 fdb1 	bl	800b7c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009c66:	2000      	movs	r0, #0
 8009c68:	f000 f80e 	bl	8009c88 <HAL_InitTick>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	71fb      	strb	r3, [r7, #7]
 8009c76:	e001      	b.n	8009c7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009c78:	f7ff f834 	bl	8008ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009c7c:	79fb      	ldrb	r3, [r7, #7]

}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
	...

08009c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009c90:	2300      	movs	r3, #0
 8009c92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009c94:	4b16      	ldr	r3, [pc, #88]	@ (8009cf0 <HAL_InitTick+0x68>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d022      	beq.n	8009ce2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009c9c:	4b15      	ldr	r3, [pc, #84]	@ (8009cf4 <HAL_InitTick+0x6c>)
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	4b13      	ldr	r3, [pc, #76]	@ (8009cf0 <HAL_InitTick+0x68>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009ca8:	fbb1 f3f3 	udiv	r3, r1, r3
 8009cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f001 fdbc 	bl	800b82e <HAL_SYSTICK_Config>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d10f      	bne.n	8009cdc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b0f      	cmp	r3, #15
 8009cc0:	d809      	bhi.n	8009cd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	6879      	ldr	r1, [r7, #4]
 8009cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cca:	f001 fd88 	bl	800b7de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009cce:	4a0a      	ldr	r2, [pc, #40]	@ (8009cf8 <HAL_InitTick+0x70>)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6013      	str	r3, [r2, #0]
 8009cd4:	e007      	b.n	8009ce6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	73fb      	strb	r3, [r7, #15]
 8009cda:	e004      	b.n	8009ce6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	73fb      	strb	r3, [r7, #15]
 8009ce0:	e001      	b.n	8009ce6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	20000140 	.word	0x20000140
 8009cf4:	20000138 	.word	0x20000138
 8009cf8:	2000013c 	.word	0x2000013c

08009cfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d00:	4b05      	ldr	r3, [pc, #20]	@ (8009d18 <HAL_IncTick+0x1c>)
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	4b05      	ldr	r3, [pc, #20]	@ (8009d1c <HAL_IncTick+0x20>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4413      	add	r3, r2
 8009d0a:	4a03      	ldr	r2, [pc, #12]	@ (8009d18 <HAL_IncTick+0x1c>)
 8009d0c:	6013      	str	r3, [r2, #0]
}
 8009d0e:	bf00      	nop
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr
 8009d18:	20002234 	.word	0x20002234
 8009d1c:	20000140 	.word	0x20000140

08009d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d20:	b480      	push	{r7}
 8009d22:	af00      	add	r7, sp, #0
  return uwTick;
 8009d24:	4b03      	ldr	r3, [pc, #12]	@ (8009d34 <HAL_GetTick+0x14>)
 8009d26:	681b      	ldr	r3, [r3, #0]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	20002234 	.word	0x20002234

08009d38 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	431a      	orrs	r2, r3
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	609a      	str	r2, [r3, #8]
}
 8009d52:	bf00      	nop
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b083      	sub	sp, #12
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	609a      	str	r2, [r3, #8]
}
 8009d78:	bf00      	nop
 8009d7a:	370c      	adds	r7, #12
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b087      	sub	sp, #28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	3360      	adds	r3, #96	@ 0x60
 8009db2:	461a      	mov	r2, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	4413      	add	r3, r2
 8009dba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	4b08      	ldr	r3, [pc, #32]	@ (8009de4 <LL_ADC_SetOffset+0x44>)
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8009dd8:	bf00      	nop
 8009dda:	371c      	adds	r7, #28
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	03fff000 	.word	0x03fff000

08009de8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	3360      	adds	r3, #96	@ 0x60
 8009df6:	461a      	mov	r2, r3
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3714      	adds	r7, #20
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	3360      	adds	r3, #96	@ 0x60
 8009e24:	461a      	mov	r2, r3
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4413      	add	r3, r2
 8009e2c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	431a      	orrs	r2, r3
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009e3e:	bf00      	nop
 8009e40:	371c      	adds	r7, #28
 8009e42:	46bd      	mov	sp, r7
 8009e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e48:	4770      	bx	lr

08009e4a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009e4a:	b480      	push	{r7}
 8009e4c:	b087      	sub	sp, #28
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	60b9      	str	r1, [r7, #8]
 8009e54:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	3360      	adds	r3, #96	@ 0x60
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	009b      	lsls	r3, r3, #2
 8009e60:	4413      	add	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	431a      	orrs	r2, r3
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009e74:	bf00      	nop
 8009e76:	371c      	adds	r7, #28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3360      	adds	r3, #96	@ 0x60
 8009e90:	461a      	mov	r2, r3
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009e9a:	697b      	ldr	r3, [r7, #20]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8009eaa:	bf00      	nop
 8009eac:	371c      	adds	r7, #28
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	695b      	ldr	r3, [r3, #20]
 8009ec4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	431a      	orrs	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	615a      	str	r2, [r3, #20]
}
 8009ed0:	bf00      	nop
 8009ed2:	370c      	adds	r7, #12
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d101      	bne.n	8009ef4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009f02:	b480      	push	{r7}
 8009f04:	b087      	sub	sp, #28
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	60f8      	str	r0, [r7, #12]
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	3330      	adds	r3, #48	@ 0x30
 8009f12:	461a      	mov	r2, r3
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	0a1b      	lsrs	r3, r3, #8
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	f003 030c 	and.w	r3, r3, #12
 8009f1e:	4413      	add	r3, r2
 8009f20:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f003 031f 	and.w	r3, r3, #31
 8009f2c:	211f      	movs	r1, #31
 8009f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f32:	43db      	mvns	r3, r3
 8009f34:	401a      	ands	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	0e9b      	lsrs	r3, r3, #26
 8009f3a:	f003 011f 	and.w	r1, r3, #31
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f003 031f 	and.w	r3, r3, #31
 8009f44:	fa01 f303 	lsl.w	r3, r1, r3
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009f4e:	bf00      	nop
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f58:	4770      	bx	lr

08009f5a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009f5a:	b480      	push	{r7}
 8009f5c:	b087      	sub	sp, #28
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	60b9      	str	r1, [r7, #8]
 8009f64:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	3314      	adds	r3, #20
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	0e5b      	lsrs	r3, r3, #25
 8009f70:	009b      	lsls	r3, r3, #2
 8009f72:	f003 0304 	and.w	r3, r3, #4
 8009f76:	4413      	add	r3, r2
 8009f78:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	0d1b      	lsrs	r3, r3, #20
 8009f82:	f003 031f 	and.w	r3, r3, #31
 8009f86:	2107      	movs	r1, #7
 8009f88:	fa01 f303 	lsl.w	r3, r1, r3
 8009f8c:	43db      	mvns	r3, r3
 8009f8e:	401a      	ands	r2, r3
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	0d1b      	lsrs	r3, r3, #20
 8009f94:	f003 031f 	and.w	r3, r3, #31
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8009fa4:	bf00      	nop
 8009fa6:	371c      	adds	r7, #28
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fc8:	43db      	mvns	r3, r3
 8009fca:	401a      	ands	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f003 0318 	and.w	r3, r3, #24
 8009fd2:	4908      	ldr	r1, [pc, #32]	@ (8009ff4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8009fd4:	40d9      	lsrs	r1, r3
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	400b      	ands	r3, r1
 8009fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8009fe6:	bf00      	nop
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	0007ffff 	.word	0x0007ffff

08009ff8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f003 031f 	and.w	r3, r3, #31
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a024:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	6093      	str	r3, [r2, #8]
}
 800a02c:	bf00      	nop
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800a038:	b480      	push	{r7}
 800a03a:	b083      	sub	sp, #12
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a04c:	d101      	bne.n	800a052 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	370c      	adds	r7, #12
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800a070:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a074:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a09c:	d101      	bne.n	800a0a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a09e:	2301      	movs	r3, #1
 800a0a0:	e000      	b.n	800a0a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a0a2:	2300      	movs	r3, #0
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a0c4:	f043 0201 	orr.w	r2, r3, #1
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a0cc:	bf00      	nop
 800a0ce:	370c      	adds	r7, #12
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0e8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a0ec:	f043 0202 	orr.w	r2, r3, #2
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f003 0301 	and.w	r3, r3, #1
 800a110:	2b01      	cmp	r3, #1
 800a112:	d101      	bne.n	800a118 <LL_ADC_IsEnabled+0x18>
 800a114:	2301      	movs	r3, #1
 800a116:	e000      	b.n	800a11a <LL_ADC_IsEnabled+0x1a>
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800a126:	b480      	push	{r7}
 800a128:	b083      	sub	sp, #12
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	f003 0302 	and.w	r3, r3, #2
 800a136:	2b02      	cmp	r3, #2
 800a138:	d101      	bne.n	800a13e <LL_ADC_IsDisableOngoing+0x18>
 800a13a:	2301      	movs	r3, #1
 800a13c:	e000      	b.n	800a140 <LL_ADC_IsDisableOngoing+0x1a>
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	689b      	ldr	r3, [r3, #8]
 800a158:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a15c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a160:	f043 0204 	orr.w	r2, r3, #4
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b04      	cmp	r3, #4
 800a186:	d101      	bne.n	800a18c <LL_ADC_REG_IsConversionOngoing+0x18>
 800a188:	2301      	movs	r3, #1
 800a18a:	e000      	b.n	800a18e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	370c      	adds	r7, #12
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800a19a:	b480      	push	{r7}
 800a19c:	b083      	sub	sp, #12
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	f003 0308 	and.w	r3, r3, #8
 800a1aa:	2b08      	cmp	r3, #8
 800a1ac:	d101      	bne.n	800a1b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e000      	b.n	800a1b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a1b2:	2300      	movs	r3, #0
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a1c0:	b590      	push	{r4, r7, lr}
 800a1c2:	b089      	sub	sp, #36	@ 0x24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e1a9      	b.n	800a52e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d109      	bne.n	800a1fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7fa faf7 	bl	80047dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4618      	mov	r0, r3
 800a202:	f7ff ff19 	bl	800a038 <LL_ADC_IsDeepPowerDownEnabled>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d004      	beq.n	800a216 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4618      	mov	r0, r3
 800a212:	f7ff feff 	bl	800a014 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7ff ff34 	bl	800a088 <LL_ADC_IsInternalRegulatorEnabled>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d115      	bne.n	800a252 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f7ff ff18 	bl	800a060 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a230:	4b9c      	ldr	r3, [pc, #624]	@ (800a4a4 <HAL_ADC_Init+0x2e4>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	099b      	lsrs	r3, r3, #6
 800a236:	4a9c      	ldr	r2, [pc, #624]	@ (800a4a8 <HAL_ADC_Init+0x2e8>)
 800a238:	fba2 2303 	umull	r2, r3, r2, r3
 800a23c:	099b      	lsrs	r3, r3, #6
 800a23e:	3301      	adds	r3, #1
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a244:	e002      	b.n	800a24c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	3b01      	subs	r3, #1
 800a24a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1f9      	bne.n	800a246 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4618      	mov	r0, r3
 800a258:	f7ff ff16 	bl	800a088 <LL_ADC_IsInternalRegulatorEnabled>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10d      	bne.n	800a27e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a266:	f043 0210 	orr.w	r2, r3, #16
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a272:	f043 0201 	orr.w	r2, r3, #1
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff ff76 	bl	800a174 <LL_ADC_REG_IsConversionOngoing>
 800a288:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a28e:	f003 0310 	and.w	r3, r3, #16
 800a292:	2b00      	cmp	r3, #0
 800a294:	f040 8142 	bne.w	800a51c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f040 813e 	bne.w	800a51c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a2a4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800a2a8:	f043 0202 	orr.w	r2, r3, #2
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7ff ff23 	bl	800a100 <LL_ADC_IsEnabled>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d141      	bne.n	800a344 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a2c8:	d004      	beq.n	800a2d4 <HAL_ADC_Init+0x114>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a77      	ldr	r2, [pc, #476]	@ (800a4ac <HAL_ADC_Init+0x2ec>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d10f      	bne.n	800a2f4 <HAL_ADC_Init+0x134>
 800a2d4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800a2d8:	f7ff ff12 	bl	800a100 <LL_ADC_IsEnabled>
 800a2dc:	4604      	mov	r4, r0
 800a2de:	4873      	ldr	r0, [pc, #460]	@ (800a4ac <HAL_ADC_Init+0x2ec>)
 800a2e0:	f7ff ff0e 	bl	800a100 <LL_ADC_IsEnabled>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	4323      	orrs	r3, r4
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	bf0c      	ite	eq
 800a2ec:	2301      	moveq	r3, #1
 800a2ee:	2300      	movne	r3, #0
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	e012      	b.n	800a31a <HAL_ADC_Init+0x15a>
 800a2f4:	486e      	ldr	r0, [pc, #440]	@ (800a4b0 <HAL_ADC_Init+0x2f0>)
 800a2f6:	f7ff ff03 	bl	800a100 <LL_ADC_IsEnabled>
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	486d      	ldr	r0, [pc, #436]	@ (800a4b4 <HAL_ADC_Init+0x2f4>)
 800a2fe:	f7ff feff 	bl	800a100 <LL_ADC_IsEnabled>
 800a302:	4603      	mov	r3, r0
 800a304:	431c      	orrs	r4, r3
 800a306:	486c      	ldr	r0, [pc, #432]	@ (800a4b8 <HAL_ADC_Init+0x2f8>)
 800a308:	f7ff fefa 	bl	800a100 <LL_ADC_IsEnabled>
 800a30c:	4603      	mov	r3, r0
 800a30e:	4323      	orrs	r3, r4
 800a310:	2b00      	cmp	r3, #0
 800a312:	bf0c      	ite	eq
 800a314:	2301      	moveq	r3, #1
 800a316:	2300      	movne	r3, #0
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d012      	beq.n	800a344 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a326:	d004      	beq.n	800a332 <HAL_ADC_Init+0x172>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a5f      	ldr	r2, [pc, #380]	@ (800a4ac <HAL_ADC_Init+0x2ec>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d101      	bne.n	800a336 <HAL_ADC_Init+0x176>
 800a332:	4a62      	ldr	r2, [pc, #392]	@ (800a4bc <HAL_ADC_Init+0x2fc>)
 800a334:	e000      	b.n	800a338 <HAL_ADC_Init+0x178>
 800a336:	4a62      	ldr	r2, [pc, #392]	@ (800a4c0 <HAL_ADC_Init+0x300>)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	4619      	mov	r1, r3
 800a33e:	4610      	mov	r0, r2
 800a340:	f7ff fcfa 	bl	8009d38 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	7f5b      	ldrb	r3, [r3, #29]
 800a348:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a34e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800a354:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800a35a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a362:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a364:	4313      	orrs	r3, r2
 800a366:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d106      	bne.n	800a380 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a376:	3b01      	subs	r3, #1
 800a378:	045b      	lsls	r3, r3, #17
 800a37a:	69ba      	ldr	r2, [r7, #24]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a384:	2b00      	cmp	r3, #0
 800a386:	d009      	beq.n	800a39c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a38c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a394:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800a396:	69ba      	ldr	r2, [r7, #24]
 800a398:	4313      	orrs	r3, r2
 800a39a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68da      	ldr	r2, [r3, #12]
 800a3a2:	4b48      	ldr	r3, [pc, #288]	@ (800a4c4 <HAL_ADC_Init+0x304>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	6812      	ldr	r2, [r2, #0]
 800a3aa:	69b9      	ldr	r1, [r7, #24]
 800a3ac:	430b      	orrs	r3, r1
 800a3ae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	430a      	orrs	r2, r1
 800a3c4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fee5 	bl	800a19a <LL_ADC_INJ_IsConversionOngoing>
 800a3d0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d17f      	bne.n	800a4d8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d17c      	bne.n	800a4d8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a3e2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800a3ea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	68db      	ldr	r3, [r3, #12]
 800a3f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a3fa:	f023 0302 	bic.w	r3, r3, #2
 800a3fe:	687a      	ldr	r2, [r7, #4]
 800a400:	6812      	ldr	r2, [r2, #0]
 800a402:	69b9      	ldr	r1, [r7, #24]
 800a404:	430b      	orrs	r3, r1
 800a406:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d017      	beq.n	800a440 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	691a      	ldr	r2, [r3, #16]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800a41e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a428:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a42c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	6911      	ldr	r1, [r2, #16]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6812      	ldr	r2, [r2, #0]
 800a438:	430b      	orrs	r3, r1
 800a43a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800a43e:	e013      	b.n	800a468 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	691a      	ldr	r2, [r3, #16]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a44e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	6812      	ldr	r2, [r2, #0]
 800a45c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800a460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a464:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d12a      	bne.n	800a4c8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a47c:	f023 0304 	bic.w	r3, r3, #4
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800a488:	4311      	orrs	r1, r2
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a48e:	4311      	orrs	r1, r2
 800a490:	687a      	ldr	r2, [r7, #4]
 800a492:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a494:	430a      	orrs	r2, r1
 800a496:	431a      	orrs	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f042 0201 	orr.w	r2, r2, #1
 800a4a0:	611a      	str	r2, [r3, #16]
 800a4a2:	e019      	b.n	800a4d8 <HAL_ADC_Init+0x318>
 800a4a4:	20000138 	.word	0x20000138
 800a4a8:	053e2d63 	.word	0x053e2d63
 800a4ac:	50000100 	.word	0x50000100
 800a4b0:	50000400 	.word	0x50000400
 800a4b4:	50000500 	.word	0x50000500
 800a4b8:	50000600 	.word	0x50000600
 800a4bc:	50000300 	.word	0x50000300
 800a4c0:	50000700 	.word	0x50000700
 800a4c4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	691a      	ldr	r2, [r3, #16]
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f022 0201 	bic.w	r2, r2, #1
 800a4d6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	695b      	ldr	r3, [r3, #20]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d10c      	bne.n	800a4fa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4e6:	f023 010f 	bic.w	r1, r3, #15
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a1b      	ldr	r3, [r3, #32]
 800a4ee:	1e5a      	subs	r2, r3, #1
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	430a      	orrs	r2, r1
 800a4f6:	631a      	str	r2, [r3, #48]	@ 0x30
 800a4f8:	e007      	b.n	800a50a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f022 020f 	bic.w	r2, r2, #15
 800a508:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a50e:	f023 0303 	bic.w	r3, r3, #3
 800a512:	f043 0201 	orr.w	r2, r3, #1
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a51a:	e007      	b.n	800a52c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a520:	f043 0210 	orr.w	r2, r3, #16
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800a52c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3724      	adds	r7, #36	@ 0x24
 800a532:	46bd      	mov	sp, r7
 800a534:	bd90      	pop	{r4, r7, pc}
 800a536:	bf00      	nop

0800a538 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b086      	sub	sp, #24
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a54c:	d004      	beq.n	800a558 <HAL_ADC_Start_DMA+0x20>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	4a5a      	ldr	r2, [pc, #360]	@ (800a6bc <HAL_ADC_Start_DMA+0x184>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d101      	bne.n	800a55c <HAL_ADC_Start_DMA+0x24>
 800a558:	4b59      	ldr	r3, [pc, #356]	@ (800a6c0 <HAL_ADC_Start_DMA+0x188>)
 800a55a:	e000      	b.n	800a55e <HAL_ADC_Start_DMA+0x26>
 800a55c:	4b59      	ldr	r3, [pc, #356]	@ (800a6c4 <HAL_ADC_Start_DMA+0x18c>)
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff fd4a 	bl	8009ff8 <LL_ADC_GetMultimode>
 800a564:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7ff fe02 	bl	800a174 <LL_ADC_REG_IsConversionOngoing>
 800a570:	4603      	mov	r3, r0
 800a572:	2b00      	cmp	r3, #0
 800a574:	f040 809b 	bne.w	800a6ae <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a57e:	2b01      	cmp	r3, #1
 800a580:	d101      	bne.n	800a586 <HAL_ADC_Start_DMA+0x4e>
 800a582:	2302      	movs	r3, #2
 800a584:	e096      	b.n	800a6b4 <HAL_ADC_Start_DMA+0x17c>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2201      	movs	r2, #1
 800a58a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	4a4d      	ldr	r2, [pc, #308]	@ (800a6c8 <HAL_ADC_Start_DMA+0x190>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d008      	beq.n	800a5aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d005      	beq.n	800a5aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	2b05      	cmp	r3, #5
 800a5a2:	d002      	beq.n	800a5aa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	2b09      	cmp	r3, #9
 800a5a8:	d17a      	bne.n	800a6a0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800a5aa:	68f8      	ldr	r0, [r7, #12]
 800a5ac:	f000 fcf6 	bl	800af9c <ADC_Enable>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800a5b4:	7dfb      	ldrb	r3, [r7, #23]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d16d      	bne.n	800a696 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a5be:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a5c2:	f023 0301 	bic.w	r3, r3, #1
 800a5c6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4a3a      	ldr	r2, [pc, #232]	@ (800a6bc <HAL_ADC_Start_DMA+0x184>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d009      	beq.n	800a5ec <HAL_ADC_Start_DMA+0xb4>
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a3b      	ldr	r2, [pc, #236]	@ (800a6cc <HAL_ADC_Start_DMA+0x194>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d002      	beq.n	800a5e8 <HAL_ADC_Start_DMA+0xb0>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	e003      	b.n	800a5f0 <HAL_ADC_Start_DMA+0xb8>
 800a5e8:	4b39      	ldr	r3, [pc, #228]	@ (800a6d0 <HAL_ADC_Start_DMA+0x198>)
 800a5ea:	e001      	b.n	800a5f0 <HAL_ADC_Start_DMA+0xb8>
 800a5ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	6812      	ldr	r2, [r2, #0]
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d002      	beq.n	800a5fe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d105      	bne.n	800a60a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a602:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a60e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d006      	beq.n	800a624 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a61a:	f023 0206 	bic.w	r2, r3, #6
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	661a      	str	r2, [r3, #96]	@ 0x60
 800a622:	e002      	b.n	800a62a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2200      	movs	r2, #0
 800a628:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a62e:	4a29      	ldr	r2, [pc, #164]	@ (800a6d4 <HAL_ADC_Start_DMA+0x19c>)
 800a630:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a636:	4a28      	ldr	r2, [pc, #160]	@ (800a6d8 <HAL_ADC_Start_DMA+0x1a0>)
 800a638:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a63e:	4a27      	ldr	r2, [pc, #156]	@ (800a6dc <HAL_ADC_Start_DMA+0x1a4>)
 800a640:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	221c      	movs	r2, #28
 800a648:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2200      	movs	r2, #0
 800a64e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	685a      	ldr	r2, [r3, #4]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f042 0210 	orr.w	r2, r2, #16
 800a660:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68da      	ldr	r2, [r3, #12]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f042 0201 	orr.w	r2, r2, #1
 800a670:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	3340      	adds	r3, #64	@ 0x40
 800a67c:	4619      	mov	r1, r3
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f001 f989 	bl	800b998 <HAL_DMA_Start_IT>
 800a686:	4603      	mov	r3, r0
 800a688:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff fd5c 	bl	800a14c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800a694:	e00d      	b.n	800a6b2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800a69e:	e008      	b.n	800a6b2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800a6a0:	2301      	movs	r3, #1
 800a6a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800a6ac:	e001      	b.n	800a6b2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800a6b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	50000100 	.word	0x50000100
 800a6c0:	50000300 	.word	0x50000300
 800a6c4:	50000700 	.word	0x50000700
 800a6c8:	50000600 	.word	0x50000600
 800a6cc:	50000500 	.word	0x50000500
 800a6d0:	50000400 	.word	0x50000400
 800a6d4:	0800b187 	.word	0x0800b187
 800a6d8:	0800b25f 	.word	0x0800b25f
 800a6dc:	0800b27b 	.word	0x0800b27b

0800a6e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b0b6      	sub	sp, #216	@ 0xd8
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a72c:	2300      	movs	r3, #0
 800a72e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800a736:	2b01      	cmp	r3, #1
 800a738:	d102      	bne.n	800a740 <HAL_ADC_ConfigChannel+0x24>
 800a73a:	2302      	movs	r3, #2
 800a73c:	f000 bc13 	b.w	800af66 <HAL_ADC_ConfigChannel+0x84a>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7ff fd11 	bl	800a174 <LL_ADC_REG_IsConversionOngoing>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	f040 83f3 	bne.w	800af40 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6818      	ldr	r0, [r3, #0]
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	6859      	ldr	r1, [r3, #4]
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	f7ff fbcb 	bl	8009f02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4618      	mov	r0, r3
 800a772:	f7ff fcff 	bl	800a174 <LL_ADC_REG_IsConversionOngoing>
 800a776:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	4618      	mov	r0, r3
 800a780:	f7ff fd0b 	bl	800a19a <LL_ADC_INJ_IsConversionOngoing>
 800a784:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800a788:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f040 81d9 	bne.w	800ab44 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800a792:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a796:	2b00      	cmp	r3, #0
 800a798:	f040 81d4 	bne.w	800ab44 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7a4:	d10f      	bne.n	800a7c6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6818      	ldr	r0, [r3, #0]
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	f7ff fbd2 	bl	8009f5a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7ff fb79 	bl	8009eb6 <LL_ADC_SetSamplingTimeCommonConfig>
 800a7c4:	e00e      	b.n	800a7e4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	6819      	ldr	r1, [r3, #0]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	f7ff fbc1 	bl	8009f5a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	2100      	movs	r1, #0
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff fb69 	bl	8009eb6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	695a      	ldr	r2, [r3, #20]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	08db      	lsrs	r3, r3, #3
 800a7f0:	f003 0303 	and.w	r3, r3, #3
 800a7f4:	005b      	lsls	r3, r3, #1
 800a7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	691b      	ldr	r3, [r3, #16]
 800a802:	2b04      	cmp	r3, #4
 800a804:	d022      	beq.n	800a84c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6818      	ldr	r0, [r3, #0]
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	6919      	ldr	r1, [r3, #16]
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	681a      	ldr	r2, [r3, #0]
 800a812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a816:	f7ff fac3 	bl	8009da0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6818      	ldr	r0, [r3, #0]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	6919      	ldr	r1, [r3, #16]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	699b      	ldr	r3, [r3, #24]
 800a826:	461a      	mov	r2, r3
 800a828:	f7ff fb0f 	bl	8009e4a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6818      	ldr	r0, [r3, #0]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d102      	bne.n	800a842 <HAL_ADC_ConfigChannel+0x126>
 800a83c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a840:	e000      	b.n	800a844 <HAL_ADC_ConfigChannel+0x128>
 800a842:	2300      	movs	r3, #0
 800a844:	461a      	mov	r2, r3
 800a846:	f7ff fb1b 	bl	8009e80 <LL_ADC_SetOffsetSaturation>
 800a84a:	e17b      	b.n	800ab44 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2100      	movs	r1, #0
 800a852:	4618      	mov	r0, r3
 800a854:	f7ff fac8 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800a858:	4603      	mov	r3, r0
 800a85a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10a      	bne.n	800a878 <HAL_ADC_ConfigChannel+0x15c>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2100      	movs	r1, #0
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff fabd 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800a86e:	4603      	mov	r3, r0
 800a870:	0e9b      	lsrs	r3, r3, #26
 800a872:	f003 021f 	and.w	r2, r3, #31
 800a876:	e01e      	b.n	800a8b6 <HAL_ADC_ConfigChannel+0x19a>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2100      	movs	r1, #0
 800a87e:	4618      	mov	r0, r3
 800a880:	f7ff fab2 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800a884:	4603      	mov	r3, r0
 800a886:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a88a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a88e:	fa93 f3a3 	rbit	r3, r3
 800a892:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800a896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a89a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800a89e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800a8a6:	2320      	movs	r3, #32
 800a8a8:	e004      	b.n	800a8b4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800a8aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8ae:	fab3 f383 	clz	r3, r3
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d105      	bne.n	800a8ce <HAL_ADC_ConfigChannel+0x1b2>
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	0e9b      	lsrs	r3, r3, #26
 800a8c8:	f003 031f 	and.w	r3, r3, #31
 800a8cc:	e018      	b.n	800a900 <HAL_ADC_ConfigChannel+0x1e4>
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a8d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a8da:	fa93 f3a3 	rbit	r3, r3
 800a8de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800a8e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a8e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800a8ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d101      	bne.n	800a8f6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800a8f2:	2320      	movs	r3, #32
 800a8f4:	e004      	b.n	800a900 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800a8f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a8fa:	fab3 f383 	clz	r3, r3
 800a8fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800a900:	429a      	cmp	r2, r3
 800a902:	d106      	bne.n	800a912 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2200      	movs	r2, #0
 800a90a:	2100      	movs	r1, #0
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff fa81 	bl	8009e14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2101      	movs	r1, #1
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff fa65 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800a91e:	4603      	mov	r3, r0
 800a920:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10a      	bne.n	800a93e <HAL_ADC_ConfigChannel+0x222>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2101      	movs	r1, #1
 800a92e:	4618      	mov	r0, r3
 800a930:	f7ff fa5a 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800a934:	4603      	mov	r3, r0
 800a936:	0e9b      	lsrs	r3, r3, #26
 800a938:	f003 021f 	and.w	r2, r3, #31
 800a93c:	e01e      	b.n	800a97c <HAL_ADC_ConfigChannel+0x260>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2101      	movs	r1, #1
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff fa4f 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a950:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a954:	fa93 f3a3 	rbit	r3, r3
 800a958:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800a95c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800a964:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d101      	bne.n	800a970 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800a96c:	2320      	movs	r3, #32
 800a96e:	e004      	b.n	800a97a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800a970:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a974:	fab3 f383 	clz	r3, r3
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a984:	2b00      	cmp	r3, #0
 800a986:	d105      	bne.n	800a994 <HAL_ADC_ConfigChannel+0x278>
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	0e9b      	lsrs	r3, r3, #26
 800a98e:	f003 031f 	and.w	r3, r3, #31
 800a992:	e018      	b.n	800a9c6 <HAL_ADC_ConfigChannel+0x2aa>
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a99c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a9a0:	fa93 f3a3 	rbit	r3, r3
 800a9a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800a9a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800a9ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800a9b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800a9b8:	2320      	movs	r3, #32
 800a9ba:	e004      	b.n	800a9c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800a9bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a9c0:	fab3 f383 	clz	r3, r3
 800a9c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d106      	bne.n	800a9d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	2101      	movs	r1, #1
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7ff fa1e 	bl	8009e14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2102      	movs	r1, #2
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7ff fa02 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d10a      	bne.n	800aa04 <HAL_ADC_ConfigChannel+0x2e8>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2102      	movs	r1, #2
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7ff f9f7 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	0e9b      	lsrs	r3, r3, #26
 800a9fe:	f003 021f 	and.w	r2, r3, #31
 800aa02:	e01e      	b.n	800aa42 <HAL_ADC_ConfigChannel+0x326>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2102      	movs	r1, #2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7ff f9ec 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800aa10:	4603      	mov	r3, r0
 800aa12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aa1a:	fa93 f3a3 	rbit	r3, r3
 800aa1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800aa22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aa26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800aa2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800aa32:	2320      	movs	r3, #32
 800aa34:	e004      	b.n	800aa40 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800aa36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800aa3a:	fab3 f383 	clz	r3, r3
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d105      	bne.n	800aa5a <HAL_ADC_ConfigChannel+0x33e>
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	0e9b      	lsrs	r3, r3, #26
 800aa54:	f003 031f 	and.w	r3, r3, #31
 800aa58:	e016      	b.n	800aa88 <HAL_ADC_ConfigChannel+0x36c>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aa62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aa66:	fa93 f3a3 	rbit	r3, r3
 800aa6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800aa6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aa6e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800aa72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800aa7a:	2320      	movs	r3, #32
 800aa7c:	e004      	b.n	800aa88 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800aa7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aa82:	fab3 f383 	clz	r3, r3
 800aa86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d106      	bne.n	800aa9a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2200      	movs	r2, #0
 800aa92:	2102      	movs	r1, #2
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7ff f9bd 	bl	8009e14 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	2103      	movs	r1, #3
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7ff f9a1 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10a      	bne.n	800aac6 <HAL_ADC_ConfigChannel+0x3aa>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2103      	movs	r1, #3
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7ff f996 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800aabc:	4603      	mov	r3, r0
 800aabe:	0e9b      	lsrs	r3, r3, #26
 800aac0:	f003 021f 	and.w	r2, r3, #31
 800aac4:	e017      	b.n	800aaf6 <HAL_ADC_ConfigChannel+0x3da>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2103      	movs	r1, #3
 800aacc:	4618      	mov	r0, r3
 800aace:	f7ff f98b 	bl	8009de8 <LL_ADC_GetOffsetChannel>
 800aad2:	4603      	mov	r3, r0
 800aad4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aad6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800aad8:	fa93 f3a3 	rbit	r3, r3
 800aadc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800aade:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aae0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800aae2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d101      	bne.n	800aaec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800aae8:	2320      	movs	r3, #32
 800aaea:	e003      	b.n	800aaf4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800aaec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aaee:	fab3 f383 	clz	r3, r3
 800aaf2:	b2db      	uxtb	r3, r3
 800aaf4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d105      	bne.n	800ab0e <HAL_ADC_ConfigChannel+0x3f2>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	0e9b      	lsrs	r3, r3, #26
 800ab08:	f003 031f 	and.w	r3, r3, #31
 800ab0c:	e011      	b.n	800ab32 <HAL_ADC_ConfigChannel+0x416>
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ab14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab16:	fa93 f3a3 	rbit	r3, r3
 800ab1a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800ab1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ab1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800ab20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800ab26:	2320      	movs	r3, #32
 800ab28:	e003      	b.n	800ab32 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800ab2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab2c:	fab3 f383 	clz	r3, r3
 800ab30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d106      	bne.n	800ab44 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	2103      	movs	r1, #3
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7ff f968 	bl	8009e14 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff fad9 	bl	800a100 <LL_ADC_IsEnabled>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	f040 813d 	bne.w	800add0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6818      	ldr	r0, [r3, #0]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	6819      	ldr	r1, [r3, #0]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f7ff fa24 	bl	8009fb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	4aa2      	ldr	r2, [pc, #648]	@ (800adf8 <HAL_ADC_ConfigChannel+0x6dc>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	f040 812e 	bne.w	800add0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10b      	bne.n	800ab9c <HAL_ADC_ConfigChannel+0x480>
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	0e9b      	lsrs	r3, r3, #26
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	f003 031f 	and.w	r3, r3, #31
 800ab90:	2b09      	cmp	r3, #9
 800ab92:	bf94      	ite	ls
 800ab94:	2301      	movls	r3, #1
 800ab96:	2300      	movhi	r3, #0
 800ab98:	b2db      	uxtb	r3, r3
 800ab9a:	e019      	b.n	800abd0 <HAL_ADC_ConfigChannel+0x4b4>
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aba4:	fa93 f3a3 	rbit	r3, r3
 800aba8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800abaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800abac:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800abae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800abb4:	2320      	movs	r3, #32
 800abb6:	e003      	b.n	800abc0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800abb8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abba:	fab3 f383 	clz	r3, r3
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	3301      	adds	r3, #1
 800abc2:	f003 031f 	and.w	r3, r3, #31
 800abc6:	2b09      	cmp	r3, #9
 800abc8:	bf94      	ite	ls
 800abca:	2301      	movls	r3, #1
 800abcc:	2300      	movhi	r3, #0
 800abce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d079      	beq.n	800acc8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d107      	bne.n	800abf0 <HAL_ADC_ConfigChannel+0x4d4>
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	0e9b      	lsrs	r3, r3, #26
 800abe6:	3301      	adds	r3, #1
 800abe8:	069b      	lsls	r3, r3, #26
 800abea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800abee:	e015      	b.n	800ac1c <HAL_ADC_ConfigChannel+0x500>
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800abf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800abf8:	fa93 f3a3 	rbit	r3, r3
 800abfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800abfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac00:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800ac02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800ac08:	2320      	movs	r3, #32
 800ac0a:	e003      	b.n	800ac14 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800ac0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac0e:	fab3 f383 	clz	r3, r3
 800ac12:	b2db      	uxtb	r3, r3
 800ac14:	3301      	adds	r3, #1
 800ac16:	069b      	lsls	r3, r3, #26
 800ac18:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d109      	bne.n	800ac3c <HAL_ADC_ConfigChannel+0x520>
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	0e9b      	lsrs	r3, r3, #26
 800ac2e:	3301      	adds	r3, #1
 800ac30:	f003 031f 	and.w	r3, r3, #31
 800ac34:	2101      	movs	r1, #1
 800ac36:	fa01 f303 	lsl.w	r3, r1, r3
 800ac3a:	e017      	b.n	800ac6c <HAL_ADC_ConfigChannel+0x550>
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ac44:	fa93 f3a3 	rbit	r3, r3
 800ac48:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800ac4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ac4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800ac4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d101      	bne.n	800ac58 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800ac54:	2320      	movs	r3, #32
 800ac56:	e003      	b.n	800ac60 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800ac58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ac5a:	fab3 f383 	clz	r3, r3
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	3301      	adds	r3, #1
 800ac62:	f003 031f 	and.w	r3, r3, #31
 800ac66:	2101      	movs	r1, #1
 800ac68:	fa01 f303 	lsl.w	r3, r1, r3
 800ac6c:	ea42 0103 	orr.w	r1, r2, r3
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10a      	bne.n	800ac92 <HAL_ADC_ConfigChannel+0x576>
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	0e9b      	lsrs	r3, r3, #26
 800ac82:	3301      	adds	r3, #1
 800ac84:	f003 021f 	and.w	r2, r3, #31
 800ac88:	4613      	mov	r3, r2
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	4413      	add	r3, r2
 800ac8e:	051b      	lsls	r3, r3, #20
 800ac90:	e018      	b.n	800acc4 <HAL_ADC_ConfigChannel+0x5a8>
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9a:	fa93 f3a3 	rbit	r3, r3
 800ac9e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800aca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800aca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800acaa:	2320      	movs	r3, #32
 800acac:	e003      	b.n	800acb6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800acae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acb0:	fab3 f383 	clz	r3, r3
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	3301      	adds	r3, #1
 800acb8:	f003 021f 	and.w	r2, r3, #31
 800acbc:	4613      	mov	r3, r2
 800acbe:	005b      	lsls	r3, r3, #1
 800acc0:	4413      	add	r3, r2
 800acc2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800acc4:	430b      	orrs	r3, r1
 800acc6:	e07e      	b.n	800adc6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d107      	bne.n	800ace4 <HAL_ADC_ConfigChannel+0x5c8>
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	0e9b      	lsrs	r3, r3, #26
 800acda:	3301      	adds	r3, #1
 800acdc:	069b      	lsls	r3, r3, #26
 800acde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ace2:	e015      	b.n	800ad10 <HAL_ADC_ConfigChannel+0x5f4>
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acec:	fa93 f3a3 	rbit	r3, r3
 800acf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800acf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800acf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d101      	bne.n	800ad00 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800acfc:	2320      	movs	r3, #32
 800acfe:	e003      	b.n	800ad08 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800ad00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad02:	fab3 f383 	clz	r3, r3
 800ad06:	b2db      	uxtb	r3, r3
 800ad08:	3301      	adds	r3, #1
 800ad0a:	069b      	lsls	r3, r3, #26
 800ad0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d109      	bne.n	800ad30 <HAL_ADC_ConfigChannel+0x614>
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	0e9b      	lsrs	r3, r3, #26
 800ad22:	3301      	adds	r3, #1
 800ad24:	f003 031f 	and.w	r3, r3, #31
 800ad28:	2101      	movs	r1, #1
 800ad2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad2e:	e017      	b.n	800ad60 <HAL_ADC_ConfigChannel+0x644>
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	fa93 f3a3 	rbit	r3, r3
 800ad3c:	61fb      	str	r3, [r7, #28]
  return result;
 800ad3e:	69fb      	ldr	r3, [r7, #28]
 800ad40:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ad42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800ad48:	2320      	movs	r3, #32
 800ad4a:	e003      	b.n	800ad54 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4e:	fab3 f383 	clz	r3, r3
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	3301      	adds	r3, #1
 800ad56:	f003 031f 	and.w	r3, r3, #31
 800ad5a:	2101      	movs	r1, #1
 800ad5c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad60:	ea42 0103 	orr.w	r1, r2, r3
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10d      	bne.n	800ad8c <HAL_ADC_ConfigChannel+0x670>
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	0e9b      	lsrs	r3, r3, #26
 800ad76:	3301      	adds	r3, #1
 800ad78:	f003 021f 	and.w	r2, r3, #31
 800ad7c:	4613      	mov	r3, r2
 800ad7e:	005b      	lsls	r3, r3, #1
 800ad80:	4413      	add	r3, r2
 800ad82:	3b1e      	subs	r3, #30
 800ad84:	051b      	lsls	r3, r3, #20
 800ad86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ad8a:	e01b      	b.n	800adc4 <HAL_ADC_ConfigChannel+0x6a8>
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	fa93 f3a3 	rbit	r3, r3
 800ad98:	613b      	str	r3, [r7, #16]
  return result;
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ad9e:	69bb      	ldr	r3, [r7, #24]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d101      	bne.n	800ada8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800ada4:	2320      	movs	r3, #32
 800ada6:	e003      	b.n	800adb0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	fab3 f383 	clz	r3, r3
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	3301      	adds	r3, #1
 800adb2:	f003 021f 	and.w	r2, r3, #31
 800adb6:	4613      	mov	r3, r2
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	4413      	add	r3, r2
 800adbc:	3b1e      	subs	r3, #30
 800adbe:	051b      	lsls	r3, r3, #20
 800adc0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800adc4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800adc6:	683a      	ldr	r2, [r7, #0]
 800adc8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800adca:	4619      	mov	r1, r3
 800adcc:	f7ff f8c5 	bl	8009f5a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	4b09      	ldr	r3, [pc, #36]	@ (800adfc <HAL_ADC_ConfigChannel+0x6e0>)
 800add6:	4013      	ands	r3, r2
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 80be 	beq.w	800af5a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ade6:	d004      	beq.n	800adf2 <HAL_ADC_ConfigChannel+0x6d6>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a04      	ldr	r2, [pc, #16]	@ (800ae00 <HAL_ADC_ConfigChannel+0x6e4>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d10a      	bne.n	800ae08 <HAL_ADC_ConfigChannel+0x6ec>
 800adf2:	4b04      	ldr	r3, [pc, #16]	@ (800ae04 <HAL_ADC_ConfigChannel+0x6e8>)
 800adf4:	e009      	b.n	800ae0a <HAL_ADC_ConfigChannel+0x6ee>
 800adf6:	bf00      	nop
 800adf8:	407f0000 	.word	0x407f0000
 800adfc:	80080000 	.word	0x80080000
 800ae00:	50000100 	.word	0x50000100
 800ae04:	50000300 	.word	0x50000300
 800ae08:	4b59      	ldr	r3, [pc, #356]	@ (800af70 <HAL_ADC_ConfigChannel+0x854>)
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe ffba 	bl	8009d84 <LL_ADC_GetCommonPathInternalCh>
 800ae10:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a56      	ldr	r2, [pc, #344]	@ (800af74 <HAL_ADC_ConfigChannel+0x858>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d004      	beq.n	800ae28 <HAL_ADC_ConfigChannel+0x70c>
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	4a55      	ldr	r2, [pc, #340]	@ (800af78 <HAL_ADC_ConfigChannel+0x85c>)
 800ae24:	4293      	cmp	r3, r2
 800ae26:	d13a      	bne.n	800ae9e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800ae28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ae2c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d134      	bne.n	800ae9e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae3c:	d005      	beq.n	800ae4a <HAL_ADC_ConfigChannel+0x72e>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a4e      	ldr	r2, [pc, #312]	@ (800af7c <HAL_ADC_ConfigChannel+0x860>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	f040 8085 	bne.w	800af54 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ae52:	d004      	beq.n	800ae5e <HAL_ADC_ConfigChannel+0x742>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	4a49      	ldr	r2, [pc, #292]	@ (800af80 <HAL_ADC_ConfigChannel+0x864>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d101      	bne.n	800ae62 <HAL_ADC_ConfigChannel+0x746>
 800ae5e:	4a49      	ldr	r2, [pc, #292]	@ (800af84 <HAL_ADC_ConfigChannel+0x868>)
 800ae60:	e000      	b.n	800ae64 <HAL_ADC_ConfigChannel+0x748>
 800ae62:	4a43      	ldr	r2, [pc, #268]	@ (800af70 <HAL_ADC_ConfigChannel+0x854>)
 800ae64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ae68:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4610      	mov	r0, r2
 800ae70:	f7fe ff75 	bl	8009d5e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800ae74:	4b44      	ldr	r3, [pc, #272]	@ (800af88 <HAL_ADC_ConfigChannel+0x86c>)
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	099b      	lsrs	r3, r3, #6
 800ae7a:	4a44      	ldr	r2, [pc, #272]	@ (800af8c <HAL_ADC_ConfigChannel+0x870>)
 800ae7c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae80:	099b      	lsrs	r3, r3, #6
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	4613      	mov	r3, r2
 800ae86:	005b      	lsls	r3, r3, #1
 800ae88:	4413      	add	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ae8e:	e002      	b.n	800ae96 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	3b01      	subs	r3, #1
 800ae94:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1f9      	bne.n	800ae90 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800ae9c:	e05a      	b.n	800af54 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4a3b      	ldr	r2, [pc, #236]	@ (800af90 <HAL_ADC_ConfigChannel+0x874>)
 800aea4:	4293      	cmp	r3, r2
 800aea6:	d125      	bne.n	800aef4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800aea8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aeac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d11f      	bne.n	800aef4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a31      	ldr	r2, [pc, #196]	@ (800af80 <HAL_ADC_ConfigChannel+0x864>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d104      	bne.n	800aec8 <HAL_ADC_ConfigChannel+0x7ac>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a34      	ldr	r2, [pc, #208]	@ (800af94 <HAL_ADC_ConfigChannel+0x878>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d047      	beq.n	800af58 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aed0:	d004      	beq.n	800aedc <HAL_ADC_ConfigChannel+0x7c0>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a2a      	ldr	r2, [pc, #168]	@ (800af80 <HAL_ADC_ConfigChannel+0x864>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d101      	bne.n	800aee0 <HAL_ADC_ConfigChannel+0x7c4>
 800aedc:	4a29      	ldr	r2, [pc, #164]	@ (800af84 <HAL_ADC_ConfigChannel+0x868>)
 800aede:	e000      	b.n	800aee2 <HAL_ADC_ConfigChannel+0x7c6>
 800aee0:	4a23      	ldr	r2, [pc, #140]	@ (800af70 <HAL_ADC_ConfigChannel+0x854>)
 800aee2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800aeea:	4619      	mov	r1, r3
 800aeec:	4610      	mov	r0, r2
 800aeee:	f7fe ff36 	bl	8009d5e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800aef2:	e031      	b.n	800af58 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a27      	ldr	r2, [pc, #156]	@ (800af98 <HAL_ADC_ConfigChannel+0x87c>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d12d      	bne.n	800af5a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800aefe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800af02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af06:	2b00      	cmp	r3, #0
 800af08:	d127      	bne.n	800af5a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a1c      	ldr	r2, [pc, #112]	@ (800af80 <HAL_ADC_ConfigChannel+0x864>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d022      	beq.n	800af5a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af1c:	d004      	beq.n	800af28 <HAL_ADC_ConfigChannel+0x80c>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a17      	ldr	r2, [pc, #92]	@ (800af80 <HAL_ADC_ConfigChannel+0x864>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d101      	bne.n	800af2c <HAL_ADC_ConfigChannel+0x810>
 800af28:	4a16      	ldr	r2, [pc, #88]	@ (800af84 <HAL_ADC_ConfigChannel+0x868>)
 800af2a:	e000      	b.n	800af2e <HAL_ADC_ConfigChannel+0x812>
 800af2c:	4a10      	ldr	r2, [pc, #64]	@ (800af70 <HAL_ADC_ConfigChannel+0x854>)
 800af2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800af32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800af36:	4619      	mov	r1, r3
 800af38:	4610      	mov	r0, r2
 800af3a:	f7fe ff10 	bl	8009d5e <LL_ADC_SetCommonPathInternalCh>
 800af3e:	e00c      	b.n	800af5a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af44:	f043 0220 	orr.w	r2, r3, #32
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800af52:	e002      	b.n	800af5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800af54:	bf00      	nop
 800af56:	e000      	b.n	800af5a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800af58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800af62:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800af66:	4618      	mov	r0, r3
 800af68:	37d8      	adds	r7, #216	@ 0xd8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	50000700 	.word	0x50000700
 800af74:	c3210000 	.word	0xc3210000
 800af78:	90c00010 	.word	0x90c00010
 800af7c:	50000600 	.word	0x50000600
 800af80:	50000100 	.word	0x50000100
 800af84:	50000300 	.word	0x50000300
 800af88:	20000138 	.word	0x20000138
 800af8c:	053e2d63 	.word	0x053e2d63
 800af90:	c7520000 	.word	0xc7520000
 800af94:	50000500 	.word	0x50000500
 800af98:	cb840000 	.word	0xcb840000

0800af9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b084      	sub	sp, #16
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800afa4:	2300      	movs	r3, #0
 800afa6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4618      	mov	r0, r3
 800afae:	f7ff f8a7 	bl	800a100 <LL_ADC_IsEnabled>
 800afb2:	4603      	mov	r3, r0
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d176      	bne.n	800b0a6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	689a      	ldr	r2, [r3, #8]
 800afbe:	4b3c      	ldr	r3, [pc, #240]	@ (800b0b0 <ADC_Enable+0x114>)
 800afc0:	4013      	ands	r3, r2
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00d      	beq.n	800afe2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afca:	f043 0210 	orr.w	r2, r3, #16
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afd6:	f043 0201 	orr.w	r2, r3, #1
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e062      	b.n	800b0a8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7ff f862 	bl	800a0b0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aff4:	d004      	beq.n	800b000 <ADC_Enable+0x64>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a2e      	ldr	r2, [pc, #184]	@ (800b0b4 <ADC_Enable+0x118>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d101      	bne.n	800b004 <ADC_Enable+0x68>
 800b000:	4b2d      	ldr	r3, [pc, #180]	@ (800b0b8 <ADC_Enable+0x11c>)
 800b002:	e000      	b.n	800b006 <ADC_Enable+0x6a>
 800b004:	4b2d      	ldr	r3, [pc, #180]	@ (800b0bc <ADC_Enable+0x120>)
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe febc 	bl	8009d84 <LL_ADC_GetCommonPathInternalCh>
 800b00c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800b00e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800b012:	2b00      	cmp	r3, #0
 800b014:	d013      	beq.n	800b03e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b016:	4b2a      	ldr	r3, [pc, #168]	@ (800b0c0 <ADC_Enable+0x124>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	099b      	lsrs	r3, r3, #6
 800b01c:	4a29      	ldr	r2, [pc, #164]	@ (800b0c4 <ADC_Enable+0x128>)
 800b01e:	fba2 2303 	umull	r2, r3, r2, r3
 800b022:	099b      	lsrs	r3, r3, #6
 800b024:	1c5a      	adds	r2, r3, #1
 800b026:	4613      	mov	r3, r2
 800b028:	005b      	lsls	r3, r3, #1
 800b02a:	4413      	add	r3, r2
 800b02c:	009b      	lsls	r3, r3, #2
 800b02e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b030:	e002      	b.n	800b038 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	3b01      	subs	r3, #1
 800b036:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1f9      	bne.n	800b032 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b03e:	f7fe fe6f 	bl	8009d20 <HAL_GetTick>
 800b042:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b044:	e028      	b.n	800b098 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7ff f858 	bl	800a100 <LL_ADC_IsEnabled>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d104      	bne.n	800b060 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff f828 	bl	800a0b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b060:	f7fe fe5e 	bl	8009d20 <HAL_GetTick>
 800b064:	4602      	mov	r2, r0
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	1ad3      	subs	r3, r2, r3
 800b06a:	2b02      	cmp	r3, #2
 800b06c:	d914      	bls.n	800b098 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f003 0301 	and.w	r3, r3, #1
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d00d      	beq.n	800b098 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b080:	f043 0210 	orr.w	r2, r3, #16
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b08c:	f043 0201 	orr.w	r2, r3, #1
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	e007      	b.n	800b0a8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d1cf      	bne.n	800b046 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	8000003f 	.word	0x8000003f
 800b0b4:	50000100 	.word	0x50000100
 800b0b8:	50000300 	.word	0x50000300
 800b0bc:	50000700 	.word	0x50000700
 800b0c0:	20000138 	.word	0x20000138
 800b0c4:	053e2d63 	.word	0x053e2d63

0800b0c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f7ff f826 	bl	800a126 <LL_ADC_IsDisableOngoing>
 800b0da:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff f80d 	bl	800a100 <LL_ADC_IsEnabled>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d047      	beq.n	800b17c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d144      	bne.n	800b17c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f003 030d 	and.w	r3, r3, #13
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d10c      	bne.n	800b11a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4618      	mov	r0, r3
 800b106:	f7fe ffe7 	bl	800a0d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2203      	movs	r2, #3
 800b110:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b112:	f7fe fe05 	bl	8009d20 <HAL_GetTick>
 800b116:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b118:	e029      	b.n	800b16e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b11e:	f043 0210 	orr.w	r2, r3, #16
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b12a:	f043 0201 	orr.w	r2, r3, #1
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800b132:	2301      	movs	r3, #1
 800b134:	e023      	b.n	800b17e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b136:	f7fe fdf3 	bl	8009d20 <HAL_GetTick>
 800b13a:	4602      	mov	r2, r0
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	1ad3      	subs	r3, r2, r3
 800b140:	2b02      	cmp	r3, #2
 800b142:	d914      	bls.n	800b16e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	f003 0301 	and.w	r3, r3, #1
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00d      	beq.n	800b16e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b156:	f043 0210 	orr.w	r2, r3, #16
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b162:	f043 0201 	orr.w	r2, r3, #1
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	e007      	b.n	800b17e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1dc      	bne.n	800b136 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b192:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b198:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d14b      	bne.n	800b238 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0308 	and.w	r3, r3, #8
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d021      	beq.n	800b1fe <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4618      	mov	r0, r3
 800b1c0:	f7fe fe8c 	bl	8009edc <LL_ADC_REG_IsTriggerSourceSWStart>
 800b1c4:	4603      	mov	r3, r0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d032      	beq.n	800b230 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	68db      	ldr	r3, [r3, #12]
 800b1d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d12b      	bne.n	800b230 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d11f      	bne.n	800b230 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b1f4:	f043 0201 	orr.w	r2, r3, #1
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b1fc:	e018      	b.n	800b230 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	f003 0302 	and.w	r3, r3, #2
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d111      	bne.n	800b230 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b210:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b21c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b220:	2b00      	cmp	r3, #0
 800b222:	d105      	bne.n	800b230 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b228:	f043 0201 	orr.w	r2, r3, #1
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f7ff fa55 	bl	800a6e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800b236:	e00e      	b.n	800b256 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b23c:	f003 0310 	and.w	r3, r3, #16
 800b240:	2b00      	cmp	r3, #0
 800b242:	d003      	beq.n	800b24c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800b244:	68f8      	ldr	r0, [r7, #12]
 800b246:	f7ff fa5f 	bl	800a708 <HAL_ADC_ErrorCallback>
}
 800b24a:	e004      	b.n	800b256 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	4798      	blx	r3
}
 800b256:	bf00      	nop
 800b258:	3710      	adds	r7, #16
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}

0800b25e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800b25e:	b580      	push	{r7, lr}
 800b260:	b084      	sub	sp, #16
 800b262:	af00      	add	r7, sp, #0
 800b264:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b26a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7ff fa41 	bl	800a6f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b272:	bf00      	nop
 800b274:	3710      	adds	r7, #16
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}

0800b27a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b286:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b28c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b298:	f043 0204 	orr.w	r2, r3, #4
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f7ff fa31 	bl	800a708 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800b2a6:	bf00      	nop
 800b2a8:	3710      	adds	r7, #16
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	bd80      	pop	{r7, pc}

0800b2ae <LL_ADC_IsEnabled>:
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b083      	sub	sp, #12
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f003 0301 	and.w	r3, r3, #1
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d101      	bne.n	800b2c6 <LL_ADC_IsEnabled+0x18>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	e000      	b.n	800b2c8 <LL_ADC_IsEnabled+0x1a>
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	370c      	adds	r7, #12
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <LL_ADC_StartCalibration>:
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800b2e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	609a      	str	r2, [r3, #8]
}
 800b2fa:	bf00      	nop
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <LL_ADC_IsCalibrationOnGoing>:
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b316:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b31a:	d101      	bne.n	800b320 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800b31c:	2301      	movs	r3, #1
 800b31e:	e000      	b.n	800b322 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	370c      	adds	r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <LL_ADC_REG_IsConversionOngoing>:
{
 800b32e:	b480      	push	{r7}
 800b330:	b083      	sub	sp, #12
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	f003 0304 	and.w	r3, r3, #4
 800b33e:	2b04      	cmp	r3, #4
 800b340:	d101      	bne.n	800b346 <LL_ADC_REG_IsConversionOngoing+0x18>
 800b342:	2301      	movs	r3, #1
 800b344:	e000      	b.n	800b348 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800b35e:	2300      	movs	r3, #0
 800b360:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d101      	bne.n	800b370 <HAL_ADCEx_Calibration_Start+0x1c>
 800b36c:	2302      	movs	r3, #2
 800b36e:	e04d      	b.n	800b40c <HAL_ADCEx_Calibration_Start+0xb8>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7ff fea5 	bl	800b0c8 <ADC_Disable>
 800b37e:	4603      	mov	r3, r0
 800b380:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800b382:	7bfb      	ldrb	r3, [r7, #15]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d136      	bne.n	800b3f6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b38c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800b390:	f023 0302 	bic.w	r3, r3, #2
 800b394:	f043 0202 	orr.w	r2, r3, #2
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	6839      	ldr	r1, [r7, #0]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff ff96 	bl	800b2d4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b3a8:	e014      	b.n	800b3d4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	4a18      	ldr	r2, [pc, #96]	@ (800b414 <HAL_ADCEx_Calibration_Start+0xc0>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d90d      	bls.n	800b3d4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3bc:	f023 0312 	bic.w	r3, r3, #18
 800b3c0:	f043 0210 	orr.w	r2, r3, #16
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e01b      	b.n	800b40c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7ff ff94 	bl	800b306 <LL_ADC_IsCalibrationOnGoing>
 800b3de:	4603      	mov	r3, r0
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d1e2      	bne.n	800b3aa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3e8:	f023 0303 	bic.w	r3, r3, #3
 800b3ec:	f043 0201 	orr.w	r2, r3, #1
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b3f4:	e005      	b.n	800b402 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3fa:	f043 0210 	orr.w	r2, r3, #16
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3710      	adds	r7, #16
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	0004de01 	.word	0x0004de01

0800b418 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800b418:	b590      	push	{r4, r7, lr}
 800b41a:	b0a1      	sub	sp, #132	@ 0x84
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b422:	2300      	movs	r3, #0
 800b424:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d101      	bne.n	800b436 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800b432:	2302      	movs	r3, #2
 800b434:	e0e7      	b.n	800b606 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800b43e:	2300      	movs	r3, #0
 800b440:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800b442:	2300      	movs	r3, #0
 800b444:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b44e:	d102      	bne.n	800b456 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800b450:	4b6f      	ldr	r3, [pc, #444]	@ (800b610 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b452:	60bb      	str	r3, [r7, #8]
 800b454:	e009      	b.n	800b46a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4a6e      	ldr	r2, [pc, #440]	@ (800b614 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d102      	bne.n	800b466 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800b460:	4b6d      	ldr	r3, [pc, #436]	@ (800b618 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b462:	60bb      	str	r3, [r7, #8]
 800b464:	e001      	b.n	800b46a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800b466:	2300      	movs	r3, #0
 800b468:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10b      	bne.n	800b488 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b474:	f043 0220 	orr.w	r2, r3, #32
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800b484:	2301      	movs	r3, #1
 800b486:	e0be      	b.n	800b606 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f7ff ff4f 	bl	800b32e <LL_ADC_REG_IsConversionOngoing>
 800b490:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4618      	mov	r0, r3
 800b498:	f7ff ff49 	bl	800b32e <LL_ADC_REG_IsConversionOngoing>
 800b49c:	4603      	mov	r3, r0
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	f040 80a0 	bne.w	800b5e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800b4a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f040 809c 	bne.w	800b5e4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4b4:	d004      	beq.n	800b4c0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a55      	ldr	r2, [pc, #340]	@ (800b610 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d101      	bne.n	800b4c4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800b4c0:	4b56      	ldr	r3, [pc, #344]	@ (800b61c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800b4c2:	e000      	b.n	800b4c6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800b4c4:	4b56      	ldr	r3, [pc, #344]	@ (800b620 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800b4c6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d04b      	beq.n	800b568 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800b4d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	6859      	ldr	r1, [r3, #4]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b4e2:	035b      	lsls	r3, r3, #13
 800b4e4:	430b      	orrs	r3, r1
 800b4e6:	431a      	orrs	r2, r3
 800b4e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b4ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b4f4:	d004      	beq.n	800b500 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a45      	ldr	r2, [pc, #276]	@ (800b610 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d10f      	bne.n	800b520 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800b500:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b504:	f7ff fed3 	bl	800b2ae <LL_ADC_IsEnabled>
 800b508:	4604      	mov	r4, r0
 800b50a:	4841      	ldr	r0, [pc, #260]	@ (800b610 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b50c:	f7ff fecf 	bl	800b2ae <LL_ADC_IsEnabled>
 800b510:	4603      	mov	r3, r0
 800b512:	4323      	orrs	r3, r4
 800b514:	2b00      	cmp	r3, #0
 800b516:	bf0c      	ite	eq
 800b518:	2301      	moveq	r3, #1
 800b51a:	2300      	movne	r3, #0
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	e012      	b.n	800b546 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800b520:	483c      	ldr	r0, [pc, #240]	@ (800b614 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b522:	f7ff fec4 	bl	800b2ae <LL_ADC_IsEnabled>
 800b526:	4604      	mov	r4, r0
 800b528:	483b      	ldr	r0, [pc, #236]	@ (800b618 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b52a:	f7ff fec0 	bl	800b2ae <LL_ADC_IsEnabled>
 800b52e:	4603      	mov	r3, r0
 800b530:	431c      	orrs	r4, r3
 800b532:	483c      	ldr	r0, [pc, #240]	@ (800b624 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b534:	f7ff febb 	bl	800b2ae <LL_ADC_IsEnabled>
 800b538:	4603      	mov	r3, r0
 800b53a:	4323      	orrs	r3, r4
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	bf0c      	ite	eq
 800b540:	2301      	moveq	r3, #1
 800b542:	2300      	movne	r3, #0
 800b544:	b2db      	uxtb	r3, r3
 800b546:	2b00      	cmp	r3, #0
 800b548:	d056      	beq.n	800b5f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800b54a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b54c:	689b      	ldr	r3, [r3, #8]
 800b54e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b552:	f023 030f 	bic.w	r3, r3, #15
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	6811      	ldr	r1, [r2, #0]
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	6892      	ldr	r2, [r2, #8]
 800b55e:	430a      	orrs	r2, r1
 800b560:	431a      	orrs	r2, r3
 800b562:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b564:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b566:	e047      	b.n	800b5f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800b568:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b56a:	689b      	ldr	r3, [r3, #8]
 800b56c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b570:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b572:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b57c:	d004      	beq.n	800b588 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a23      	ldr	r2, [pc, #140]	@ (800b610 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d10f      	bne.n	800b5a8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800b588:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b58c:	f7ff fe8f 	bl	800b2ae <LL_ADC_IsEnabled>
 800b590:	4604      	mov	r4, r0
 800b592:	481f      	ldr	r0, [pc, #124]	@ (800b610 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800b594:	f7ff fe8b 	bl	800b2ae <LL_ADC_IsEnabled>
 800b598:	4603      	mov	r3, r0
 800b59a:	4323      	orrs	r3, r4
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	bf0c      	ite	eq
 800b5a0:	2301      	moveq	r3, #1
 800b5a2:	2300      	movne	r3, #0
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	e012      	b.n	800b5ce <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800b5a8:	481a      	ldr	r0, [pc, #104]	@ (800b614 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800b5aa:	f7ff fe80 	bl	800b2ae <LL_ADC_IsEnabled>
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4819      	ldr	r0, [pc, #100]	@ (800b618 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800b5b2:	f7ff fe7c 	bl	800b2ae <LL_ADC_IsEnabled>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	431c      	orrs	r4, r3
 800b5ba:	481a      	ldr	r0, [pc, #104]	@ (800b624 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800b5bc:	f7ff fe77 	bl	800b2ae <LL_ADC_IsEnabled>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	4323      	orrs	r3, r4
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	bf0c      	ite	eq
 800b5c8:	2301      	moveq	r3, #1
 800b5ca:	2300      	movne	r3, #0
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d012      	beq.n	800b5f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800b5d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800b5da:	f023 030f 	bic.w	r3, r3, #15
 800b5de:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800b5e0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b5e2:	e009      	b.n	800b5f8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5e8:	f043 0220 	orr.w	r2, r3, #32
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800b5f6:	e000      	b.n	800b5fa <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800b5f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800b602:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800b606:	4618      	mov	r0, r3
 800b608:	3784      	adds	r7, #132	@ 0x84
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd90      	pop	{r4, r7, pc}
 800b60e:	bf00      	nop
 800b610:	50000100 	.word	0x50000100
 800b614:	50000400 	.word	0x50000400
 800b618:	50000500 	.word	0x50000500
 800b61c:	50000300 	.word	0x50000300
 800b620:	50000700 	.word	0x50000700
 800b624:	50000600 	.word	0x50000600

0800b628 <__NVIC_SetPriorityGrouping>:
{
 800b628:	b480      	push	{r7}
 800b62a:	b085      	sub	sp, #20
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f003 0307 	and.w	r3, r3, #7
 800b636:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b638:	4b0c      	ldr	r3, [pc, #48]	@ (800b66c <__NVIC_SetPriorityGrouping+0x44>)
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b644:	4013      	ands	r3, r2
 800b646:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b650:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b658:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b65a:	4a04      	ldr	r2, [pc, #16]	@ (800b66c <__NVIC_SetPriorityGrouping+0x44>)
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	60d3      	str	r3, [r2, #12]
}
 800b660:	bf00      	nop
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	e000ed00 	.word	0xe000ed00

0800b670 <__NVIC_GetPriorityGrouping>:
{
 800b670:	b480      	push	{r7}
 800b672:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b674:	4b04      	ldr	r3, [pc, #16]	@ (800b688 <__NVIC_GetPriorityGrouping+0x18>)
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	0a1b      	lsrs	r3, r3, #8
 800b67a:	f003 0307 	and.w	r3, r3, #7
}
 800b67e:	4618      	mov	r0, r3
 800b680:	46bd      	mov	sp, r7
 800b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b686:	4770      	bx	lr
 800b688:	e000ed00 	.word	0xe000ed00

0800b68c <__NVIC_EnableIRQ>:
{
 800b68c:	b480      	push	{r7}
 800b68e:	b083      	sub	sp, #12
 800b690:	af00      	add	r7, sp, #0
 800b692:	4603      	mov	r3, r0
 800b694:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	db0b      	blt.n	800b6b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b69e:	79fb      	ldrb	r3, [r7, #7]
 800b6a0:	f003 021f 	and.w	r2, r3, #31
 800b6a4:	4907      	ldr	r1, [pc, #28]	@ (800b6c4 <__NVIC_EnableIRQ+0x38>)
 800b6a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6aa:	095b      	lsrs	r3, r3, #5
 800b6ac:	2001      	movs	r0, #1
 800b6ae:	fa00 f202 	lsl.w	r2, r0, r2
 800b6b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b6b6:	bf00      	nop
 800b6b8:	370c      	adds	r7, #12
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr
 800b6c2:	bf00      	nop
 800b6c4:	e000e100 	.word	0xe000e100

0800b6c8 <__NVIC_SetPriority>:
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b083      	sub	sp, #12
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	6039      	str	r1, [r7, #0]
 800b6d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b6d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	db0a      	blt.n	800b6f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	490c      	ldr	r1, [pc, #48]	@ (800b714 <__NVIC_SetPriority+0x4c>)
 800b6e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b6e6:	0112      	lsls	r2, r2, #4
 800b6e8:	b2d2      	uxtb	r2, r2
 800b6ea:	440b      	add	r3, r1
 800b6ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b6f0:	e00a      	b.n	800b708 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	b2da      	uxtb	r2, r3
 800b6f6:	4908      	ldr	r1, [pc, #32]	@ (800b718 <__NVIC_SetPriority+0x50>)
 800b6f8:	79fb      	ldrb	r3, [r7, #7]
 800b6fa:	f003 030f 	and.w	r3, r3, #15
 800b6fe:	3b04      	subs	r3, #4
 800b700:	0112      	lsls	r2, r2, #4
 800b702:	b2d2      	uxtb	r2, r2
 800b704:	440b      	add	r3, r1
 800b706:	761a      	strb	r2, [r3, #24]
}
 800b708:	bf00      	nop
 800b70a:	370c      	adds	r7, #12
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	e000e100 	.word	0xe000e100
 800b718:	e000ed00 	.word	0xe000ed00

0800b71c <NVIC_EncodePriority>:
{
 800b71c:	b480      	push	{r7}
 800b71e:	b089      	sub	sp, #36	@ 0x24
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f003 0307 	and.w	r3, r3, #7
 800b72e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b730:	69fb      	ldr	r3, [r7, #28]
 800b732:	f1c3 0307 	rsb	r3, r3, #7
 800b736:	2b04      	cmp	r3, #4
 800b738:	bf28      	it	cs
 800b73a:	2304      	movcs	r3, #4
 800b73c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	3304      	adds	r3, #4
 800b742:	2b06      	cmp	r3, #6
 800b744:	d902      	bls.n	800b74c <NVIC_EncodePriority+0x30>
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	3b03      	subs	r3, #3
 800b74a:	e000      	b.n	800b74e <NVIC_EncodePriority+0x32>
 800b74c:	2300      	movs	r3, #0
 800b74e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b750:	f04f 32ff 	mov.w	r2, #4294967295
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	fa02 f303 	lsl.w	r3, r2, r3
 800b75a:	43da      	mvns	r2, r3
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	401a      	ands	r2, r3
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b764:	f04f 31ff 	mov.w	r1, #4294967295
 800b768:	697b      	ldr	r3, [r7, #20]
 800b76a:	fa01 f303 	lsl.w	r3, r1, r3
 800b76e:	43d9      	mvns	r1, r3
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b774:	4313      	orrs	r3, r2
}
 800b776:	4618      	mov	r0, r3
 800b778:	3724      	adds	r7, #36	@ 0x24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr
	...

0800b784 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3b01      	subs	r3, #1
 800b790:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b794:	d301      	bcc.n	800b79a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b796:	2301      	movs	r3, #1
 800b798:	e00f      	b.n	800b7ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b79a:	4a0a      	ldr	r2, [pc, #40]	@ (800b7c4 <SysTick_Config+0x40>)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	3b01      	subs	r3, #1
 800b7a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b7a2:	210f      	movs	r1, #15
 800b7a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a8:	f7ff ff8e 	bl	800b6c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b7ac:	4b05      	ldr	r3, [pc, #20]	@ (800b7c4 <SysTick_Config+0x40>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b7b2:	4b04      	ldr	r3, [pc, #16]	@ (800b7c4 <SysTick_Config+0x40>)
 800b7b4:	2207      	movs	r2, #7
 800b7b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	e000e010 	.word	0xe000e010

0800b7c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f7ff ff29 	bl	800b628 <__NVIC_SetPriorityGrouping>
}
 800b7d6:	bf00      	nop
 800b7d8:	3708      	adds	r7, #8
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b086      	sub	sp, #24
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	4603      	mov	r3, r0
 800b7e6:	60b9      	str	r1, [r7, #8]
 800b7e8:	607a      	str	r2, [r7, #4]
 800b7ea:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b7ec:	f7ff ff40 	bl	800b670 <__NVIC_GetPriorityGrouping>
 800b7f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b7f2:	687a      	ldr	r2, [r7, #4]
 800b7f4:	68b9      	ldr	r1, [r7, #8]
 800b7f6:	6978      	ldr	r0, [r7, #20]
 800b7f8:	f7ff ff90 	bl	800b71c <NVIC_EncodePriority>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b802:	4611      	mov	r1, r2
 800b804:	4618      	mov	r0, r3
 800b806:	f7ff ff5f 	bl	800b6c8 <__NVIC_SetPriority>
}
 800b80a:	bf00      	nop
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}

0800b812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b812:	b580      	push	{r7, lr}
 800b814:	b082      	sub	sp, #8
 800b816:	af00      	add	r7, sp, #0
 800b818:	4603      	mov	r3, r0
 800b81a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b81c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b820:	4618      	mov	r0, r3
 800b822:	f7ff ff33 	bl	800b68c <__NVIC_EnableIRQ>
}
 800b826:	bf00      	nop
 800b828:	3708      	adds	r7, #8
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b082      	sub	sp, #8
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f7ff ffa4 	bl	800b784 <SysTick_Config>
 800b83c:	4603      	mov	r3, r0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3708      	adds	r7, #8
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
	...

0800b848 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b084      	sub	sp, #16
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d101      	bne.n	800b85a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e08d      	b.n	800b976 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	461a      	mov	r2, r3
 800b860:	4b47      	ldr	r3, [pc, #284]	@ (800b980 <HAL_DMA_Init+0x138>)
 800b862:	429a      	cmp	r2, r3
 800b864:	d80f      	bhi.n	800b886 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	461a      	mov	r2, r3
 800b86c:	4b45      	ldr	r3, [pc, #276]	@ (800b984 <HAL_DMA_Init+0x13c>)
 800b86e:	4413      	add	r3, r2
 800b870:	4a45      	ldr	r2, [pc, #276]	@ (800b988 <HAL_DMA_Init+0x140>)
 800b872:	fba2 2303 	umull	r2, r3, r2, r3
 800b876:	091b      	lsrs	r3, r3, #4
 800b878:	009a      	lsls	r2, r3, #2
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	4a42      	ldr	r2, [pc, #264]	@ (800b98c <HAL_DMA_Init+0x144>)
 800b882:	641a      	str	r2, [r3, #64]	@ 0x40
 800b884:	e00e      	b.n	800b8a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	461a      	mov	r2, r3
 800b88c:	4b40      	ldr	r3, [pc, #256]	@ (800b990 <HAL_DMA_Init+0x148>)
 800b88e:	4413      	add	r3, r2
 800b890:	4a3d      	ldr	r2, [pc, #244]	@ (800b988 <HAL_DMA_Init+0x140>)
 800b892:	fba2 2303 	umull	r2, r3, r2, r3
 800b896:	091b      	lsrs	r3, r3, #4
 800b898:	009a      	lsls	r2, r3, #2
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	4a3c      	ldr	r2, [pc, #240]	@ (800b994 <HAL_DMA_Init+0x14c>)
 800b8a2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2202      	movs	r2, #2
 800b8a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800b8ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b8c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	691b      	ldr	r3, [r3, #16]
 800b8ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b8d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	699b      	ldr	r3, [r3, #24]
 800b8da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b8e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6a1b      	ldr	r3, [r3, #32]
 800b8e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b8f6:	6878      	ldr	r0, [r7, #4]
 800b8f8:	f000 fa76 	bl	800bde8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b904:	d102      	bne.n	800b90c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b914:	b2d2      	uxtb	r2, r2
 800b916:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b920:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	685b      	ldr	r3, [r3, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d010      	beq.n	800b94c <HAL_DMA_Init+0x104>
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	2b04      	cmp	r3, #4
 800b930:	d80c      	bhi.n	800b94c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fa96 	bl	800be64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b93c:	2200      	movs	r2, #0
 800b93e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b944:	687a      	ldr	r2, [r7, #4]
 800b946:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800b948:	605a      	str	r2, [r3, #4]
 800b94a:	e008      	b.n	800b95e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2200      	movs	r2, #0
 800b950:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2200      	movs	r2, #0
 800b962:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2200      	movs	r2, #0
 800b970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	40020407 	.word	0x40020407
 800b984:	bffdfff8 	.word	0xbffdfff8
 800b988:	cccccccd 	.word	0xcccccccd
 800b98c:	40020000 	.word	0x40020000
 800b990:	bffdfbf8 	.word	0xbffdfbf8
 800b994:	40020400 	.word	0x40020400

0800b998 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]
 800b9a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d101      	bne.n	800b9b8 <HAL_DMA_Start_IT+0x20>
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	e066      	b.n	800ba86 <HAL_DMA_Start_IT+0xee>
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b9c6:	b2db      	uxtb	r3, r3
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d155      	bne.n	800ba78 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f022 0201 	bic.w	r2, r2, #1
 800b9e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	68b9      	ldr	r1, [r7, #8]
 800b9f0:	68f8      	ldr	r0, [r7, #12]
 800b9f2:	f000 f9bb 	bl	800bd6c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d008      	beq.n	800ba10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f042 020e 	orr.w	r2, r2, #14
 800ba0c:	601a      	str	r2, [r3, #0]
 800ba0e:	e00f      	b.n	800ba30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f022 0204 	bic.w	r2, r2, #4
 800ba1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f042 020a 	orr.w	r2, r2, #10
 800ba2e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d007      	beq.n	800ba4e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba42:	681a      	ldr	r2, [r3, #0]
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba48:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba4c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d007      	beq.n	800ba66 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba5a:	681a      	ldr	r2, [r3, #0]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ba64:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f042 0201 	orr.w	r2, r2, #1
 800ba74:	601a      	str	r2, [r3, #0]
 800ba76:	e005      	b.n	800ba84 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800ba80:	2302      	movs	r3, #2
 800ba82:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800ba84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3718      	adds	r7, #24
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ba8e:	b480      	push	{r7}
 800ba90:	b085      	sub	sp, #20
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b02      	cmp	r3, #2
 800baa4:	d005      	beq.n	800bab2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2204      	movs	r2, #4
 800baaa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	73fb      	strb	r3, [r7, #15]
 800bab0:	e037      	b.n	800bb22 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 020e 	bic.w	r2, r2, #14
 800bac0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bacc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bad0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f022 0201 	bic.w	r2, r2, #1
 800bae0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bae6:	f003 021f 	and.w	r2, r3, #31
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800baee:	2101      	movs	r1, #1
 800baf0:	fa01 f202 	lsl.w	r2, r1, r2
 800baf4:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bafa:	687a      	ldr	r2, [r7, #4]
 800bafc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bafe:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d00c      	beq.n	800bb22 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb12:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bb16:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bb20:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2201      	movs	r2, #1
 800bb26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800bb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	d00d      	beq.n	800bb74 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2204      	movs	r2, #4
 800bb5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	73fb      	strb	r3, [r7, #15]
 800bb72:	e047      	b.n	800bc04 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f022 020e 	bic.w	r2, r2, #14
 800bb82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f022 0201 	bic.w	r2, r2, #1
 800bb92:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bba2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bba8:	f003 021f 	and.w	r2, r3, #31
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbb0:	2101      	movs	r1, #1
 800bbb2:	fa01 f202 	lsl.w	r2, r1, r2
 800bbb6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bbc0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00c      	beq.n	800bbe4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbd4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800bbd8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bbe2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d003      	beq.n	800bc04 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	4798      	blx	r3
    }
  }
  return status;
 800bc04:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3710      	adds	r7, #16
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}

0800bc0e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc2a:	f003 031f 	and.w	r3, r3, #31
 800bc2e:	2204      	movs	r2, #4
 800bc30:	409a      	lsls	r2, r3
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	4013      	ands	r3, r2
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d026      	beq.n	800bc88 <HAL_DMA_IRQHandler+0x7a>
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	f003 0304 	and.w	r3, r3, #4
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d021      	beq.n	800bc88 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f003 0320 	and.w	r3, r3, #32
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d107      	bne.n	800bc62 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f022 0204 	bic.w	r2, r2, #4
 800bc60:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc66:	f003 021f 	and.w	r2, r3, #31
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc6e:	2104      	movs	r1, #4
 800bc70:	fa01 f202 	lsl.w	r2, r1, r2
 800bc74:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d071      	beq.n	800bd62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bc86:	e06c      	b.n	800bd62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc8c:	f003 031f 	and.w	r3, r3, #31
 800bc90:	2202      	movs	r2, #2
 800bc92:	409a      	lsls	r2, r3
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	4013      	ands	r3, r2
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d02e      	beq.n	800bcfa <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	f003 0302 	and.w	r3, r3, #2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d029      	beq.n	800bcfa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 0320 	and.w	r3, r3, #32
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d10b      	bne.n	800bccc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f022 020a 	bic.w	r2, r2, #10
 800bcc2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcd0:	f003 021f 	and.w	r2, r3, #31
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcd8:	2102      	movs	r1, #2
 800bcda:	fa01 f202 	lsl.w	r2, r1, r2
 800bcde:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d038      	beq.n	800bd62 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bcf8:	e033      	b.n	800bd62 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcfe:	f003 031f 	and.w	r3, r3, #31
 800bd02:	2208      	movs	r2, #8
 800bd04:	409a      	lsls	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4013      	ands	r3, r2
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d02a      	beq.n	800bd64 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	f003 0308 	and.w	r3, r3, #8
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d025      	beq.n	800bd64 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f022 020e 	bic.w	r2, r2, #14
 800bd26:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd2c:	f003 021f 	and.w	r2, r3, #31
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd34:	2101      	movs	r1, #1
 800bd36:	fa01 f202 	lsl.w	r2, r1, r2
 800bd3a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2201      	movs	r2, #1
 800bd40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d004      	beq.n	800bd64 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bd62:	bf00      	nop
 800bd64:	bf00      	nop
}
 800bd66:	3710      	adds	r7, #16
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	b085      	sub	sp, #20
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	60f8      	str	r0, [r7, #12]
 800bd74:	60b9      	str	r1, [r7, #8]
 800bd76:	607a      	str	r2, [r7, #4]
 800bd78:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800bd82:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d004      	beq.n	800bd96 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800bd94:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd9a:	f003 021f 	and.w	r2, r3, #31
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda2:	2101      	movs	r1, #1
 800bda4:	fa01 f202 	lsl.w	r2, r1, r2
 800bda8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	689b      	ldr	r3, [r3, #8]
 800bdb6:	2b10      	cmp	r3, #16
 800bdb8:	d108      	bne.n	800bdcc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800bdca:	e007      	b.n	800bddc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	60da      	str	r2, [r3, #12]
}
 800bddc:	bf00      	nop
 800bdde:	3714      	adds	r7, #20
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr

0800bde8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	4b16      	ldr	r3, [pc, #88]	@ (800be50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d802      	bhi.n	800be02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800bdfc:	4b15      	ldr	r3, [pc, #84]	@ (800be54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800bdfe:	617b      	str	r3, [r7, #20]
 800be00:	e001      	b.n	800be06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800be02:	4b15      	ldr	r3, [pc, #84]	@ (800be58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800be04:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	3b08      	subs	r3, #8
 800be12:	4a12      	ldr	r2, [pc, #72]	@ (800be5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800be14:	fba2 2303 	umull	r2, r3, r2, r3
 800be18:	091b      	lsrs	r3, r3, #4
 800be1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be20:	089b      	lsrs	r3, r3, #2
 800be22:	009a      	lsls	r2, r3, #2
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	4413      	add	r3, r2
 800be28:	461a      	mov	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	4a0b      	ldr	r2, [pc, #44]	@ (800be60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800be32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f003 031f 	and.w	r3, r3, #31
 800be3a:	2201      	movs	r2, #1
 800be3c:	409a      	lsls	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800be42:	bf00      	nop
 800be44:	371c      	adds	r7, #28
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	40020407 	.word	0x40020407
 800be54:	40020800 	.word	0x40020800
 800be58:	40020820 	.word	0x40020820
 800be5c:	cccccccd 	.word	0xcccccccd
 800be60:	40020880 	.word	0x40020880

0800be64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800be64:	b480      	push	{r7}
 800be66:	b085      	sub	sp, #20
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	b2db      	uxtb	r3, r3
 800be72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	4b0b      	ldr	r3, [pc, #44]	@ (800bea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800be78:	4413      	add	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	461a      	mov	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a08      	ldr	r2, [pc, #32]	@ (800bea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800be86:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	f003 031f 	and.w	r3, r3, #31
 800be90:	2201      	movs	r2, #1
 800be92:	409a      	lsls	r2, r3
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800be98:	bf00      	nop
 800be9a:	3714      	adds	r7, #20
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr
 800bea4:	1000823f 	.word	0x1000823f
 800bea8:	40020940 	.word	0x40020940

0800beac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800beac:	b480      	push	{r7}
 800beae:	b087      	sub	sp, #28
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800beb6:	2300      	movs	r3, #0
 800beb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800beba:	e15a      	b.n	800c172 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	2101      	movs	r1, #1
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	fa01 f303 	lsl.w	r3, r1, r3
 800bec8:	4013      	ands	r3, r2
 800beca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f000 814c 	beq.w	800c16c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	f003 0303 	and.w	r3, r3, #3
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d005      	beq.n	800beec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800bee8:	2b02      	cmp	r3, #2
 800beea:	d130      	bne.n	800bf4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	005b      	lsls	r3, r3, #1
 800bef6:	2203      	movs	r2, #3
 800bef8:	fa02 f303 	lsl.w	r3, r2, r3
 800befc:	43db      	mvns	r3, r3
 800befe:	693a      	ldr	r2, [r7, #16]
 800bf00:	4013      	ands	r3, r2
 800bf02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	68da      	ldr	r2, [r3, #12]
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	005b      	lsls	r3, r3, #1
 800bf0c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf10:	693a      	ldr	r2, [r7, #16]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bf22:	2201      	movs	r2, #1
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2a:	43db      	mvns	r3, r3
 800bf2c:	693a      	ldr	r2, [r7, #16]
 800bf2e:	4013      	ands	r3, r2
 800bf30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	091b      	lsrs	r3, r3, #4
 800bf38:	f003 0201 	and.w	r2, r3, #1
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	4313      	orrs	r3, r2
 800bf46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	693a      	ldr	r2, [r7, #16]
 800bf4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	f003 0303 	and.w	r3, r3, #3
 800bf56:	2b03      	cmp	r3, #3
 800bf58:	d017      	beq.n	800bf8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	2203      	movs	r2, #3
 800bf66:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6a:	43db      	mvns	r3, r3
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	4013      	ands	r3, r2
 800bf70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	689a      	ldr	r2, [r3, #8]
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	005b      	lsls	r3, r3, #1
 800bf7a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf7e:	693a      	ldr	r2, [r7, #16]
 800bf80:	4313      	orrs	r3, r2
 800bf82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	693a      	ldr	r2, [r7, #16]
 800bf88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	f003 0303 	and.w	r3, r3, #3
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d123      	bne.n	800bfde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	08da      	lsrs	r2, r3, #3
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	3208      	adds	r2, #8
 800bf9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	f003 0307 	and.w	r3, r3, #7
 800bfaa:	009b      	lsls	r3, r3, #2
 800bfac:	220f      	movs	r2, #15
 800bfae:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb2:	43db      	mvns	r3, r3
 800bfb4:	693a      	ldr	r2, [r7, #16]
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	691a      	ldr	r2, [r3, #16]
 800bfbe:	697b      	ldr	r3, [r7, #20]
 800bfc0:	f003 0307 	and.w	r3, r3, #7
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfca:	693a      	ldr	r2, [r7, #16]
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	08da      	lsrs	r2, r3, #3
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3208      	adds	r2, #8
 800bfd8:	6939      	ldr	r1, [r7, #16]
 800bfda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	2203      	movs	r2, #3
 800bfea:	fa02 f303 	lsl.w	r3, r2, r3
 800bfee:	43db      	mvns	r3, r3
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	4013      	ands	r3, r2
 800bff4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	685b      	ldr	r3, [r3, #4]
 800bffa:	f003 0203 	and.w	r2, r3, #3
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	fa02 f303 	lsl.w	r3, r2, r3
 800c006:	693a      	ldr	r2, [r7, #16]
 800c008:	4313      	orrs	r3, r2
 800c00a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f000 80a6 	beq.w	800c16c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c020:	4b5b      	ldr	r3, [pc, #364]	@ (800c190 <HAL_GPIO_Init+0x2e4>)
 800c022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c024:	4a5a      	ldr	r2, [pc, #360]	@ (800c190 <HAL_GPIO_Init+0x2e4>)
 800c026:	f043 0301 	orr.w	r3, r3, #1
 800c02a:	6613      	str	r3, [r2, #96]	@ 0x60
 800c02c:	4b58      	ldr	r3, [pc, #352]	@ (800c190 <HAL_GPIO_Init+0x2e4>)
 800c02e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c030:	f003 0301 	and.w	r3, r3, #1
 800c034:	60bb      	str	r3, [r7, #8]
 800c036:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c038:	4a56      	ldr	r2, [pc, #344]	@ (800c194 <HAL_GPIO_Init+0x2e8>)
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	089b      	lsrs	r3, r3, #2
 800c03e:	3302      	adds	r3, #2
 800c040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c044:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	f003 0303 	and.w	r3, r3, #3
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	220f      	movs	r2, #15
 800c050:	fa02 f303 	lsl.w	r3, r2, r3
 800c054:	43db      	mvns	r3, r3
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	4013      	ands	r3, r2
 800c05a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800c062:	d01f      	beq.n	800c0a4 <HAL_GPIO_Init+0x1f8>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a4c      	ldr	r2, [pc, #304]	@ (800c198 <HAL_GPIO_Init+0x2ec>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d019      	beq.n	800c0a0 <HAL_GPIO_Init+0x1f4>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a4b      	ldr	r2, [pc, #300]	@ (800c19c <HAL_GPIO_Init+0x2f0>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d013      	beq.n	800c09c <HAL_GPIO_Init+0x1f0>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a4a      	ldr	r2, [pc, #296]	@ (800c1a0 <HAL_GPIO_Init+0x2f4>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d00d      	beq.n	800c098 <HAL_GPIO_Init+0x1ec>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a49      	ldr	r2, [pc, #292]	@ (800c1a4 <HAL_GPIO_Init+0x2f8>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d007      	beq.n	800c094 <HAL_GPIO_Init+0x1e8>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4a48      	ldr	r2, [pc, #288]	@ (800c1a8 <HAL_GPIO_Init+0x2fc>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d101      	bne.n	800c090 <HAL_GPIO_Init+0x1e4>
 800c08c:	2305      	movs	r3, #5
 800c08e:	e00a      	b.n	800c0a6 <HAL_GPIO_Init+0x1fa>
 800c090:	2306      	movs	r3, #6
 800c092:	e008      	b.n	800c0a6 <HAL_GPIO_Init+0x1fa>
 800c094:	2304      	movs	r3, #4
 800c096:	e006      	b.n	800c0a6 <HAL_GPIO_Init+0x1fa>
 800c098:	2303      	movs	r3, #3
 800c09a:	e004      	b.n	800c0a6 <HAL_GPIO_Init+0x1fa>
 800c09c:	2302      	movs	r3, #2
 800c09e:	e002      	b.n	800c0a6 <HAL_GPIO_Init+0x1fa>
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e000      	b.n	800c0a6 <HAL_GPIO_Init+0x1fa>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	697a      	ldr	r2, [r7, #20]
 800c0a8:	f002 0203 	and.w	r2, r2, #3
 800c0ac:	0092      	lsls	r2, r2, #2
 800c0ae:	4093      	lsls	r3, r2
 800c0b0:	693a      	ldr	r2, [r7, #16]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c0b6:	4937      	ldr	r1, [pc, #220]	@ (800c194 <HAL_GPIO_Init+0x2e8>)
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	089b      	lsrs	r3, r3, #2
 800c0bc:	3302      	adds	r3, #2
 800c0be:	693a      	ldr	r2, [r7, #16]
 800c0c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c0c4:	4b39      	ldr	r3, [pc, #228]	@ (800c1ac <HAL_GPIO_Init+0x300>)
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	43db      	mvns	r3, r3
 800c0ce:	693a      	ldr	r2, [r7, #16]
 800c0d0:	4013      	ands	r3, r2
 800c0d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c0d4:	683b      	ldr	r3, [r7, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d003      	beq.n	800c0e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c0e0:	693a      	ldr	r2, [r7, #16]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c0e8:	4a30      	ldr	r2, [pc, #192]	@ (800c1ac <HAL_GPIO_Init+0x300>)
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c0ee:	4b2f      	ldr	r3, [pc, #188]	@ (800c1ac <HAL_GPIO_Init+0x300>)
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	43db      	mvns	r3, r3
 800c0f8:	693a      	ldr	r2, [r7, #16]
 800c0fa:	4013      	ands	r3, r2
 800c0fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c106:	2b00      	cmp	r3, #0
 800c108:	d003      	beq.n	800c112 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c10a:	693a      	ldr	r2, [r7, #16]
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	4313      	orrs	r3, r2
 800c110:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c112:	4a26      	ldr	r2, [pc, #152]	@ (800c1ac <HAL_GPIO_Init+0x300>)
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800c118:	4b24      	ldr	r3, [pc, #144]	@ (800c1ac <HAL_GPIO_Init+0x300>)
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	43db      	mvns	r3, r3
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	4013      	ands	r3, r2
 800c126:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c130:	2b00      	cmp	r3, #0
 800c132:	d003      	beq.n	800c13c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	4313      	orrs	r3, r2
 800c13a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c13c:	4a1b      	ldr	r2, [pc, #108]	@ (800c1ac <HAL_GPIO_Init+0x300>)
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c142:	4b1a      	ldr	r3, [pc, #104]	@ (800c1ac <HAL_GPIO_Init+0x300>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	43db      	mvns	r3, r3
 800c14c:	693a      	ldr	r2, [r7, #16]
 800c14e:	4013      	ands	r3, r2
 800c150:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d003      	beq.n	800c166 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c15e:	693a      	ldr	r2, [r7, #16]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4313      	orrs	r3, r2
 800c164:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c166:	4a11      	ldr	r2, [pc, #68]	@ (800c1ac <HAL_GPIO_Init+0x300>)
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	3301      	adds	r3, #1
 800c170:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	697b      	ldr	r3, [r7, #20]
 800c178:	fa22 f303 	lsr.w	r3, r2, r3
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f47f ae9d 	bne.w	800bebc <HAL_GPIO_Init+0x10>
  }
}
 800c182:	bf00      	nop
 800c184:	bf00      	nop
 800c186:	371c      	adds	r7, #28
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr
 800c190:	40021000 	.word	0x40021000
 800c194:	40010000 	.word	0x40010000
 800c198:	48000400 	.word	0x48000400
 800c19c:	48000800 	.word	0x48000800
 800c1a0:	48000c00 	.word	0x48000c00
 800c1a4:	48001000 	.word	0x48001000
 800c1a8:	48001400 	.word	0x48001400
 800c1ac:	40010400 	.word	0x40010400

0800c1b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b085      	sub	sp, #20
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	691a      	ldr	r2, [r3, #16]
 800c1c0:	887b      	ldrh	r3, [r7, #2]
 800c1c2:	4013      	ands	r3, r2
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d002      	beq.n	800c1ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c1c8:	2301      	movs	r3, #1
 800c1ca:	73fb      	strb	r3, [r7, #15]
 800c1cc:	e001      	b.n	800c1d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3714      	adds	r7, #20
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	807b      	strh	r3, [r7, #2]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c1f0:	787b      	ldrb	r3, [r7, #1]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d003      	beq.n	800c1fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c1f6:	887a      	ldrh	r2, [r7, #2]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c1fc:	e002      	b.n	800c204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c1fe:	887a      	ldrh	r2, [r7, #2]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c204:	bf00      	nop
 800c206:	370c      	adds	r7, #12
 800c208:	46bd      	mov	sp, r7
 800c20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20e:	4770      	bx	lr

0800c210 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c210:	b480      	push	{r7}
 800c212:	b085      	sub	sp, #20
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
 800c218:	460b      	mov	r3, r1
 800c21a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	695b      	ldr	r3, [r3, #20]
 800c220:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c222:	887a      	ldrh	r2, [r7, #2]
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	4013      	ands	r3, r2
 800c228:	041a      	lsls	r2, r3, #16
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	43d9      	mvns	r1, r3
 800c22e:	887b      	ldrh	r3, [r7, #2]
 800c230:	400b      	ands	r3, r1
 800c232:	431a      	orrs	r2, r3
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	619a      	str	r2, [r3, #24]
}
 800c238:	bf00      	nop
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	4603      	mov	r3, r0
 800c24c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800c24e:	4b08      	ldr	r3, [pc, #32]	@ (800c270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c250:	695a      	ldr	r2, [r3, #20]
 800c252:	88fb      	ldrh	r3, [r7, #6]
 800c254:	4013      	ands	r3, r2
 800c256:	2b00      	cmp	r3, #0
 800c258:	d006      	beq.n	800c268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c25a:	4a05      	ldr	r2, [pc, #20]	@ (800c270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c25c:	88fb      	ldrh	r3, [r7, #6]
 800c25e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c260:	88fb      	ldrh	r3, [r7, #6]
 800c262:	4618      	mov	r0, r3
 800c264:	f7fb fdb4 	bl	8007dd0 <HAL_GPIO_EXTI_Callback>
  }
}
 800c268:	bf00      	nop
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	40010400 	.word	0x40010400

0800c274 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d141      	bne.n	800c306 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c282:	4b4b      	ldr	r3, [pc, #300]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c28a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c28e:	d131      	bne.n	800c2f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c290:	4b47      	ldr	r3, [pc, #284]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c292:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c296:	4a46      	ldr	r2, [pc, #280]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c298:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c29c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c2a0:	4b43      	ldr	r3, [pc, #268]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c2a8:	4a41      	ldr	r2, [pc, #260]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c2ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c2b0:	4b40      	ldr	r3, [pc, #256]	@ (800c3b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2232      	movs	r2, #50	@ 0x32
 800c2b6:	fb02 f303 	mul.w	r3, r2, r3
 800c2ba:	4a3f      	ldr	r2, [pc, #252]	@ (800c3b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c2bc:	fba2 2303 	umull	r2, r3, r2, r3
 800c2c0:	0c9b      	lsrs	r3, r3, #18
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c2c6:	e002      	b.n	800c2ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c2ce:	4b38      	ldr	r3, [pc, #224]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2d0:	695b      	ldr	r3, [r3, #20]
 800c2d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2da:	d102      	bne.n	800c2e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1f2      	bne.n	800c2c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c2e2:	4b33      	ldr	r3, [pc, #204]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2e4:	695b      	ldr	r3, [r3, #20]
 800c2e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2ee:	d158      	bne.n	800c3a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e057      	b.n	800c3a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c2f4:	4b2e      	ldr	r3, [pc, #184]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2fa:	4a2d      	ldr	r2, [pc, #180]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c300:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c304:	e04d      	b.n	800c3a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c30c:	d141      	bne.n	800c392 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c30e:	4b28      	ldr	r3, [pc, #160]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c316:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c31a:	d131      	bne.n	800c380 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c31c:	4b24      	ldr	r3, [pc, #144]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c31e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c322:	4a23      	ldr	r2, [pc, #140]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c328:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c32c:	4b20      	ldr	r3, [pc, #128]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c334:	4a1e      	ldr	r2, [pc, #120]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c33a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c33c:	4b1d      	ldr	r3, [pc, #116]	@ (800c3b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	2232      	movs	r2, #50	@ 0x32
 800c342:	fb02 f303 	mul.w	r3, r2, r3
 800c346:	4a1c      	ldr	r2, [pc, #112]	@ (800c3b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c348:	fba2 2303 	umull	r2, r3, r2, r3
 800c34c:	0c9b      	lsrs	r3, r3, #18
 800c34e:	3301      	adds	r3, #1
 800c350:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c352:	e002      	b.n	800c35a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	3b01      	subs	r3, #1
 800c358:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c35a:	4b15      	ldr	r3, [pc, #84]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c35c:	695b      	ldr	r3, [r3, #20]
 800c35e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c366:	d102      	bne.n	800c36e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d1f2      	bne.n	800c354 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c36e:	4b10      	ldr	r3, [pc, #64]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c370:	695b      	ldr	r3, [r3, #20]
 800c372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c37a:	d112      	bne.n	800c3a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c37c:	2303      	movs	r3, #3
 800c37e:	e011      	b.n	800c3a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c380:	4b0b      	ldr	r3, [pc, #44]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c382:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c386:	4a0a      	ldr	r2, [pc, #40]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c38c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800c390:	e007      	b.n	800c3a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c392:	4b07      	ldr	r3, [pc, #28]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800c39a:	4a05      	ldr	r2, [pc, #20]	@ (800c3b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c39c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c3a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3714      	adds	r7, #20
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ae:	4770      	bx	lr
 800c3b0:	40007000 	.word	0x40007000
 800c3b4:	20000138 	.word	0x20000138
 800c3b8:	431bde83 	.word	0x431bde83

0800c3bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800c3c0:	4b05      	ldr	r3, [pc, #20]	@ (800c3d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c3c2:	689b      	ldr	r3, [r3, #8]
 800c3c4:	4a04      	ldr	r2, [pc, #16]	@ (800c3d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800c3c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c3ca:	6093      	str	r3, [r2, #8]
}
 800c3cc:	bf00      	nop
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d4:	4770      	bx	lr
 800c3d6:	bf00      	nop
 800c3d8:	40007000 	.word	0x40007000

0800c3dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d101      	bne.n	800c3ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e2fe      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d075      	beq.n	800c4e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3fa:	4b97      	ldr	r3, [pc, #604]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c3fc:	689b      	ldr	r3, [r3, #8]
 800c3fe:	f003 030c 	and.w	r3, r3, #12
 800c402:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c404:	4b94      	ldr	r3, [pc, #592]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c406:	68db      	ldr	r3, [r3, #12]
 800c408:	f003 0303 	and.w	r3, r3, #3
 800c40c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	2b0c      	cmp	r3, #12
 800c412:	d102      	bne.n	800c41a <HAL_RCC_OscConfig+0x3e>
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	2b03      	cmp	r3, #3
 800c418:	d002      	beq.n	800c420 <HAL_RCC_OscConfig+0x44>
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	2b08      	cmp	r3, #8
 800c41e:	d10b      	bne.n	800c438 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c420:	4b8d      	ldr	r3, [pc, #564]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d05b      	beq.n	800c4e4 <HAL_RCC_OscConfig+0x108>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d157      	bne.n	800c4e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c434:	2301      	movs	r3, #1
 800c436:	e2d9      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c440:	d106      	bne.n	800c450 <HAL_RCC_OscConfig+0x74>
 800c442:	4b85      	ldr	r3, [pc, #532]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a84      	ldr	r2, [pc, #528]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c44c:	6013      	str	r3, [r2, #0]
 800c44e:	e01d      	b.n	800c48c <HAL_RCC_OscConfig+0xb0>
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c458:	d10c      	bne.n	800c474 <HAL_RCC_OscConfig+0x98>
 800c45a:	4b7f      	ldr	r3, [pc, #508]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	4a7e      	ldr	r2, [pc, #504]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c460:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c464:	6013      	str	r3, [r2, #0]
 800c466:	4b7c      	ldr	r3, [pc, #496]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a7b      	ldr	r2, [pc, #492]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c46c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c470:	6013      	str	r3, [r2, #0]
 800c472:	e00b      	b.n	800c48c <HAL_RCC_OscConfig+0xb0>
 800c474:	4b78      	ldr	r3, [pc, #480]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	4a77      	ldr	r2, [pc, #476]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c47a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c47e:	6013      	str	r3, [r2, #0]
 800c480:	4b75      	ldr	r3, [pc, #468]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4a74      	ldr	r2, [pc, #464]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c48a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	685b      	ldr	r3, [r3, #4]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d013      	beq.n	800c4bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c494:	f7fd fc44 	bl	8009d20 <HAL_GetTick>
 800c498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c49a:	e008      	b.n	800c4ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c49c:	f7fd fc40 	bl	8009d20 <HAL_GetTick>
 800c4a0:	4602      	mov	r2, r0
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	1ad3      	subs	r3, r2, r3
 800c4a6:	2b64      	cmp	r3, #100	@ 0x64
 800c4a8:	d901      	bls.n	800c4ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c4aa:	2303      	movs	r3, #3
 800c4ac:	e29e      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c4ae:	4b6a      	ldr	r3, [pc, #424]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d0f0      	beq.n	800c49c <HAL_RCC_OscConfig+0xc0>
 800c4ba:	e014      	b.n	800c4e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4bc:	f7fd fc30 	bl	8009d20 <HAL_GetTick>
 800c4c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c4c2:	e008      	b.n	800c4d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c4c4:	f7fd fc2c 	bl	8009d20 <HAL_GetTick>
 800c4c8:	4602      	mov	r2, r0
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	1ad3      	subs	r3, r2, r3
 800c4ce:	2b64      	cmp	r3, #100	@ 0x64
 800c4d0:	d901      	bls.n	800c4d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c4d2:	2303      	movs	r3, #3
 800c4d4:	e28a      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c4d6:	4b60      	ldr	r3, [pc, #384]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d1f0      	bne.n	800c4c4 <HAL_RCC_OscConfig+0xe8>
 800c4e2:	e000      	b.n	800c4e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c4e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f003 0302 	and.w	r3, r3, #2
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d075      	beq.n	800c5de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c4f2:	4b59      	ldr	r3, [pc, #356]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c4f4:	689b      	ldr	r3, [r3, #8]
 800c4f6:	f003 030c 	and.w	r3, r3, #12
 800c4fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c4fc:	4b56      	ldr	r3, [pc, #344]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c4fe:	68db      	ldr	r3, [r3, #12]
 800c500:	f003 0303 	and.w	r3, r3, #3
 800c504:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	2b0c      	cmp	r3, #12
 800c50a:	d102      	bne.n	800c512 <HAL_RCC_OscConfig+0x136>
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d002      	beq.n	800c518 <HAL_RCC_OscConfig+0x13c>
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	2b04      	cmp	r3, #4
 800c516:	d11f      	bne.n	800c558 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c518:	4b4f      	ldr	r3, [pc, #316]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c520:	2b00      	cmp	r3, #0
 800c522:	d005      	beq.n	800c530 <HAL_RCC_OscConfig+0x154>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d101      	bne.n	800c530 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c52c:	2301      	movs	r3, #1
 800c52e:	e25d      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c530:	4b49      	ldr	r3, [pc, #292]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	691b      	ldr	r3, [r3, #16]
 800c53c:	061b      	lsls	r3, r3, #24
 800c53e:	4946      	ldr	r1, [pc, #280]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c540:	4313      	orrs	r3, r2
 800c542:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c544:	4b45      	ldr	r3, [pc, #276]	@ (800c65c <HAL_RCC_OscConfig+0x280>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4618      	mov	r0, r3
 800c54a:	f7fd fb9d 	bl	8009c88 <HAL_InitTick>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d043      	beq.n	800c5dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c554:	2301      	movs	r3, #1
 800c556:	e249      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d023      	beq.n	800c5a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c560:	4b3d      	ldr	r3, [pc, #244]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a3c      	ldr	r2, [pc, #240]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c56a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c56c:	f7fd fbd8 	bl	8009d20 <HAL_GetTick>
 800c570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c572:	e008      	b.n	800c586 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c574:	f7fd fbd4 	bl	8009d20 <HAL_GetTick>
 800c578:	4602      	mov	r2, r0
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	2b02      	cmp	r3, #2
 800c580:	d901      	bls.n	800c586 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c582:	2303      	movs	r3, #3
 800c584:	e232      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c586:	4b34      	ldr	r3, [pc, #208]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d0f0      	beq.n	800c574 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c592:	4b31      	ldr	r3, [pc, #196]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	691b      	ldr	r3, [r3, #16]
 800c59e:	061b      	lsls	r3, r3, #24
 800c5a0:	492d      	ldr	r1, [pc, #180]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	604b      	str	r3, [r1, #4]
 800c5a6:	e01a      	b.n	800c5de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c5a8:	4b2b      	ldr	r3, [pc, #172]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4a2a      	ldr	r2, [pc, #168]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c5ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c5b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5b4:	f7fd fbb4 	bl	8009d20 <HAL_GetTick>
 800c5b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c5ba:	e008      	b.n	800c5ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c5bc:	f7fd fbb0 	bl	8009d20 <HAL_GetTick>
 800c5c0:	4602      	mov	r2, r0
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d901      	bls.n	800c5ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c5ca:	2303      	movs	r3, #3
 800c5cc:	e20e      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c5ce:	4b22      	ldr	r3, [pc, #136]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1f0      	bne.n	800c5bc <HAL_RCC_OscConfig+0x1e0>
 800c5da:	e000      	b.n	800c5de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c5dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f003 0308 	and.w	r3, r3, #8
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d041      	beq.n	800c66e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	695b      	ldr	r3, [r3, #20]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d01c      	beq.n	800c62c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c5f2:	4b19      	ldr	r3, [pc, #100]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c5f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c5f8:	4a17      	ldr	r2, [pc, #92]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c5fa:	f043 0301 	orr.w	r3, r3, #1
 800c5fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c602:	f7fd fb8d 	bl	8009d20 <HAL_GetTick>
 800c606:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c608:	e008      	b.n	800c61c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c60a:	f7fd fb89 	bl	8009d20 <HAL_GetTick>
 800c60e:	4602      	mov	r2, r0
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	1ad3      	subs	r3, r2, r3
 800c614:	2b02      	cmp	r3, #2
 800c616:	d901      	bls.n	800c61c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c618:	2303      	movs	r3, #3
 800c61a:	e1e7      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c61c:	4b0e      	ldr	r3, [pc, #56]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c61e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c622:	f003 0302 	and.w	r3, r3, #2
 800c626:	2b00      	cmp	r3, #0
 800c628:	d0ef      	beq.n	800c60a <HAL_RCC_OscConfig+0x22e>
 800c62a:	e020      	b.n	800c66e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c62c:	4b0a      	ldr	r3, [pc, #40]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c62e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c632:	4a09      	ldr	r2, [pc, #36]	@ (800c658 <HAL_RCC_OscConfig+0x27c>)
 800c634:	f023 0301 	bic.w	r3, r3, #1
 800c638:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c63c:	f7fd fb70 	bl	8009d20 <HAL_GetTick>
 800c640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c642:	e00d      	b.n	800c660 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c644:	f7fd fb6c 	bl	8009d20 <HAL_GetTick>
 800c648:	4602      	mov	r2, r0
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	2b02      	cmp	r3, #2
 800c650:	d906      	bls.n	800c660 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800c652:	2303      	movs	r3, #3
 800c654:	e1ca      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
 800c656:	bf00      	nop
 800c658:	40021000 	.word	0x40021000
 800c65c:	2000013c 	.word	0x2000013c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c660:	4b8c      	ldr	r3, [pc, #560]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c666:	f003 0302 	and.w	r3, r3, #2
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d1ea      	bne.n	800c644 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f003 0304 	and.w	r3, r3, #4
 800c676:	2b00      	cmp	r3, #0
 800c678:	f000 80a6 	beq.w	800c7c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c67c:	2300      	movs	r3, #0
 800c67e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c680:	4b84      	ldr	r3, [pc, #528]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d101      	bne.n	800c690 <HAL_RCC_OscConfig+0x2b4>
 800c68c:	2301      	movs	r3, #1
 800c68e:	e000      	b.n	800c692 <HAL_RCC_OscConfig+0x2b6>
 800c690:	2300      	movs	r3, #0
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00d      	beq.n	800c6b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c696:	4b7f      	ldr	r3, [pc, #508]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c69a:	4a7e      	ldr	r2, [pc, #504]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c69c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c6a0:	6593      	str	r3, [r2, #88]	@ 0x58
 800c6a2:	4b7c      	ldr	r3, [pc, #496]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c6a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c6aa:	60fb      	str	r3, [r7, #12]
 800c6ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6b2:	4b79      	ldr	r3, [pc, #484]	@ (800c898 <HAL_RCC_OscConfig+0x4bc>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d118      	bne.n	800c6f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c6be:	4b76      	ldr	r3, [pc, #472]	@ (800c898 <HAL_RCC_OscConfig+0x4bc>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	4a75      	ldr	r2, [pc, #468]	@ (800c898 <HAL_RCC_OscConfig+0x4bc>)
 800c6c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c6c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c6ca:	f7fd fb29 	bl	8009d20 <HAL_GetTick>
 800c6ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6d0:	e008      	b.n	800c6e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6d2:	f7fd fb25 	bl	8009d20 <HAL_GetTick>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	2b02      	cmp	r3, #2
 800c6de:	d901      	bls.n	800c6e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c6e0:	2303      	movs	r3, #3
 800c6e2:	e183      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c6e4:	4b6c      	ldr	r3, [pc, #432]	@ (800c898 <HAL_RCC_OscConfig+0x4bc>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0f0      	beq.n	800c6d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	d108      	bne.n	800c70a <HAL_RCC_OscConfig+0x32e>
 800c6f8:	4b66      	ldr	r3, [pc, #408]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6fe:	4a65      	ldr	r2, [pc, #404]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c700:	f043 0301 	orr.w	r3, r3, #1
 800c704:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c708:	e024      	b.n	800c754 <HAL_RCC_OscConfig+0x378>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	689b      	ldr	r3, [r3, #8]
 800c70e:	2b05      	cmp	r3, #5
 800c710:	d110      	bne.n	800c734 <HAL_RCC_OscConfig+0x358>
 800c712:	4b60      	ldr	r3, [pc, #384]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c718:	4a5e      	ldr	r2, [pc, #376]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c71a:	f043 0304 	orr.w	r3, r3, #4
 800c71e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c722:	4b5c      	ldr	r3, [pc, #368]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c728:	4a5a      	ldr	r2, [pc, #360]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c72a:	f043 0301 	orr.w	r3, r3, #1
 800c72e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c732:	e00f      	b.n	800c754 <HAL_RCC_OscConfig+0x378>
 800c734:	4b57      	ldr	r3, [pc, #348]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c73a:	4a56      	ldr	r2, [pc, #344]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c73c:	f023 0301 	bic.w	r3, r3, #1
 800c740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800c744:	4b53      	ldr	r3, [pc, #332]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c74a:	4a52      	ldr	r2, [pc, #328]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c74c:	f023 0304 	bic.w	r3, r3, #4
 800c750:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d016      	beq.n	800c78a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c75c:	f7fd fae0 	bl	8009d20 <HAL_GetTick>
 800c760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c762:	e00a      	b.n	800c77a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c764:	f7fd fadc 	bl	8009d20 <HAL_GetTick>
 800c768:	4602      	mov	r2, r0
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c772:	4293      	cmp	r3, r2
 800c774:	d901      	bls.n	800c77a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c776:	2303      	movs	r3, #3
 800c778:	e138      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c77a:	4b46      	ldr	r3, [pc, #280]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c780:	f003 0302 	and.w	r3, r3, #2
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0ed      	beq.n	800c764 <HAL_RCC_OscConfig+0x388>
 800c788:	e015      	b.n	800c7b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c78a:	f7fd fac9 	bl	8009d20 <HAL_GetTick>
 800c78e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c790:	e00a      	b.n	800c7a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c792:	f7fd fac5 	bl	8009d20 <HAL_GetTick>
 800c796:	4602      	mov	r2, r0
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	d901      	bls.n	800c7a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e121      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c7a8:	4b3a      	ldr	r3, [pc, #232]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c7aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7ae:	f003 0302 	and.w	r3, r3, #2
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d1ed      	bne.n	800c792 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c7b6:	7ffb      	ldrb	r3, [r7, #31]
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d105      	bne.n	800c7c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7bc:	4b35      	ldr	r3, [pc, #212]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c7be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7c0:	4a34      	ldr	r2, [pc, #208]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c7c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c7c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 0320 	and.w	r3, r3, #32
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d03c      	beq.n	800c84e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d01c      	beq.n	800c816 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c7dc:	4b2d      	ldr	r3, [pc, #180]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c7de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c7e2:	4a2c      	ldr	r2, [pc, #176]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c7e4:	f043 0301 	orr.w	r3, r3, #1
 800c7e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7ec:	f7fd fa98 	bl	8009d20 <HAL_GetTick>
 800c7f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c7f2:	e008      	b.n	800c806 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c7f4:	f7fd fa94 	bl	8009d20 <HAL_GetTick>
 800c7f8:	4602      	mov	r2, r0
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	1ad3      	subs	r3, r2, r3
 800c7fe:	2b02      	cmp	r3, #2
 800c800:	d901      	bls.n	800c806 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c802:	2303      	movs	r3, #3
 800c804:	e0f2      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c806:	4b23      	ldr	r3, [pc, #140]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c808:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c80c:	f003 0302 	and.w	r3, r3, #2
 800c810:	2b00      	cmp	r3, #0
 800c812:	d0ef      	beq.n	800c7f4 <HAL_RCC_OscConfig+0x418>
 800c814:	e01b      	b.n	800c84e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c816:	4b1f      	ldr	r3, [pc, #124]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c818:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c81c:	4a1d      	ldr	r2, [pc, #116]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c81e:	f023 0301 	bic.w	r3, r3, #1
 800c822:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c826:	f7fd fa7b 	bl	8009d20 <HAL_GetTick>
 800c82a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c82c:	e008      	b.n	800c840 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c82e:	f7fd fa77 	bl	8009d20 <HAL_GetTick>
 800c832:	4602      	mov	r2, r0
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	2b02      	cmp	r3, #2
 800c83a:	d901      	bls.n	800c840 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c83c:	2303      	movs	r3, #3
 800c83e:	e0d5      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c840:	4b14      	ldr	r3, [pc, #80]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c846:	f003 0302 	and.w	r3, r3, #2
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d1ef      	bne.n	800c82e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	69db      	ldr	r3, [r3, #28]
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 80c9 	beq.w	800c9ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c858:	4b0e      	ldr	r3, [pc, #56]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c85a:	689b      	ldr	r3, [r3, #8]
 800c85c:	f003 030c 	and.w	r3, r3, #12
 800c860:	2b0c      	cmp	r3, #12
 800c862:	f000 8083 	beq.w	800c96c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	69db      	ldr	r3, [r3, #28]
 800c86a:	2b02      	cmp	r3, #2
 800c86c:	d15e      	bne.n	800c92c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c86e:	4b09      	ldr	r3, [pc, #36]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	4a08      	ldr	r2, [pc, #32]	@ (800c894 <HAL_RCC_OscConfig+0x4b8>)
 800c874:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c878:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c87a:	f7fd fa51 	bl	8009d20 <HAL_GetTick>
 800c87e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c880:	e00c      	b.n	800c89c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c882:	f7fd fa4d 	bl	8009d20 <HAL_GetTick>
 800c886:	4602      	mov	r2, r0
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	2b02      	cmp	r3, #2
 800c88e:	d905      	bls.n	800c89c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800c890:	2303      	movs	r3, #3
 800c892:	e0ab      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
 800c894:	40021000 	.word	0x40021000
 800c898:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c89c:	4b55      	ldr	r3, [pc, #340]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d1ec      	bne.n	800c882 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c8a8:	4b52      	ldr	r3, [pc, #328]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c8aa:	68da      	ldr	r2, [r3, #12]
 800c8ac:	4b52      	ldr	r3, [pc, #328]	@ (800c9f8 <HAL_RCC_OscConfig+0x61c>)
 800c8ae:	4013      	ands	r3, r2
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	6a11      	ldr	r1, [r2, #32]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c8b8:	3a01      	subs	r2, #1
 800c8ba:	0112      	lsls	r2, r2, #4
 800c8bc:	4311      	orrs	r1, r2
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800c8c2:	0212      	lsls	r2, r2, #8
 800c8c4:	4311      	orrs	r1, r2
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c8ca:	0852      	lsrs	r2, r2, #1
 800c8cc:	3a01      	subs	r2, #1
 800c8ce:	0552      	lsls	r2, r2, #21
 800c8d0:	4311      	orrs	r1, r2
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c8d6:	0852      	lsrs	r2, r2, #1
 800c8d8:	3a01      	subs	r2, #1
 800c8da:	0652      	lsls	r2, r2, #25
 800c8dc:	4311      	orrs	r1, r2
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c8e2:	06d2      	lsls	r2, r2, #27
 800c8e4:	430a      	orrs	r2, r1
 800c8e6:	4943      	ldr	r1, [pc, #268]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c8ec:	4b41      	ldr	r3, [pc, #260]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a40      	ldr	r2, [pc, #256]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c8f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c8f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c8f8:	4b3e      	ldr	r3, [pc, #248]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	4a3d      	ldr	r2, [pc, #244]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c8fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c902:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c904:	f7fd fa0c 	bl	8009d20 <HAL_GetTick>
 800c908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c90a:	e008      	b.n	800c91e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c90c:	f7fd fa08 	bl	8009d20 <HAL_GetTick>
 800c910:	4602      	mov	r2, r0
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	1ad3      	subs	r3, r2, r3
 800c916:	2b02      	cmp	r3, #2
 800c918:	d901      	bls.n	800c91e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800c91a:	2303      	movs	r3, #3
 800c91c:	e066      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c91e:	4b35      	ldr	r3, [pc, #212]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c926:	2b00      	cmp	r3, #0
 800c928:	d0f0      	beq.n	800c90c <HAL_RCC_OscConfig+0x530>
 800c92a:	e05e      	b.n	800c9ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c92c:	4b31      	ldr	r3, [pc, #196]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a30      	ldr	r2, [pc, #192]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c932:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c938:	f7fd f9f2 	bl	8009d20 <HAL_GetTick>
 800c93c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c93e:	e008      	b.n	800c952 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c940:	f7fd f9ee 	bl	8009d20 <HAL_GetTick>
 800c944:	4602      	mov	r2, r0
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	1ad3      	subs	r3, r2, r3
 800c94a:	2b02      	cmp	r3, #2
 800c94c:	d901      	bls.n	800c952 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800c94e:	2303      	movs	r3, #3
 800c950:	e04c      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c952:	4b28      	ldr	r3, [pc, #160]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1f0      	bne.n	800c940 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c95e:	4b25      	ldr	r3, [pc, #148]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c960:	68da      	ldr	r2, [r3, #12]
 800c962:	4924      	ldr	r1, [pc, #144]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c964:	4b25      	ldr	r3, [pc, #148]	@ (800c9fc <HAL_RCC_OscConfig+0x620>)
 800c966:	4013      	ands	r3, r2
 800c968:	60cb      	str	r3, [r1, #12]
 800c96a:	e03e      	b.n	800c9ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	69db      	ldr	r3, [r3, #28]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d101      	bne.n	800c978 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800c974:	2301      	movs	r3, #1
 800c976:	e039      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c978:	4b1e      	ldr	r3, [pc, #120]	@ (800c9f4 <HAL_RCC_OscConfig+0x618>)
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	f003 0203 	and.w	r2, r3, #3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6a1b      	ldr	r3, [r3, #32]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d12c      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c996:	3b01      	subs	r3, #1
 800c998:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d123      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c9aa:	429a      	cmp	r2, r3
 800c9ac:	d11b      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c9ba:	429a      	cmp	r2, r3
 800c9bc:	d113      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9c8:	085b      	lsrs	r3, r3, #1
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d109      	bne.n	800c9e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c9d2:	697b      	ldr	r3, [r7, #20]
 800c9d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9dc:	085b      	lsrs	r3, r3, #1
 800c9de:	3b01      	subs	r3, #1
 800c9e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d001      	beq.n	800c9ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e000      	b.n	800c9ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800c9ea:	2300      	movs	r3, #0
}
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	3720      	adds	r7, #32
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}
 800c9f4:	40021000 	.word	0x40021000
 800c9f8:	019f800c 	.word	0x019f800c
 800c9fc:	feeefffc 	.word	0xfeeefffc

0800ca00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b086      	sub	sp, #24
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d101      	bne.n	800ca18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800ca14:	2301      	movs	r3, #1
 800ca16:	e11e      	b.n	800cc56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca18:	4b91      	ldr	r3, [pc, #580]	@ (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 030f 	and.w	r3, r3, #15
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d910      	bls.n	800ca48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca26:	4b8e      	ldr	r3, [pc, #568]	@ (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f023 020f 	bic.w	r2, r3, #15
 800ca2e:	498c      	ldr	r1, [pc, #560]	@ (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca36:	4b8a      	ldr	r3, [pc, #552]	@ (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	f003 030f 	and.w	r3, r3, #15
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	429a      	cmp	r2, r3
 800ca42:	d001      	beq.n	800ca48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	e106      	b.n	800cc56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 0301 	and.w	r3, r3, #1
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d073      	beq.n	800cb3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	2b03      	cmp	r3, #3
 800ca5a:	d129      	bne.n	800cab0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ca5c:	4b81      	ldr	r3, [pc, #516]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d101      	bne.n	800ca6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	e0f4      	b.n	800cc56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800ca6c:	f000 f99e 	bl	800cdac <RCC_GetSysClockFreqFromPLLSource>
 800ca70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	4a7c      	ldr	r2, [pc, #496]	@ (800cc68 <HAL_RCC_ClockConfig+0x268>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d93f      	bls.n	800cafa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ca7a:	4b7a      	ldr	r3, [pc, #488]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d009      	beq.n	800ca9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d033      	beq.n	800cafa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d12f      	bne.n	800cafa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ca9a:	4b72      	ldr	r3, [pc, #456]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800ca9c:	689b      	ldr	r3, [r3, #8]
 800ca9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800caa2:	4a70      	ldr	r2, [pc, #448]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800caa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caa8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800caaa:	2380      	movs	r3, #128	@ 0x80
 800caac:	617b      	str	r3, [r7, #20]
 800caae:	e024      	b.n	800cafa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	2b02      	cmp	r3, #2
 800cab6:	d107      	bne.n	800cac8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cab8:	4b6a      	ldr	r3, [pc, #424]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d109      	bne.n	800cad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cac4:	2301      	movs	r3, #1
 800cac6:	e0c6      	b.n	800cc56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cac8:	4b66      	ldr	r3, [pc, #408]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d101      	bne.n	800cad8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	e0be      	b.n	800cc56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800cad8:	f000 f8ce 	bl	800cc78 <HAL_RCC_GetSysClockFreq>
 800cadc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	4a61      	ldr	r2, [pc, #388]	@ (800cc68 <HAL_RCC_ClockConfig+0x268>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d909      	bls.n	800cafa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cae6:	4b5f      	ldr	r3, [pc, #380]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800caee:	4a5d      	ldr	r2, [pc, #372]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800caf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caf4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800caf6:	2380      	movs	r3, #128	@ 0x80
 800caf8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cafa:	4b5a      	ldr	r3, [pc, #360]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	f023 0203 	bic.w	r2, r3, #3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	4957      	ldr	r1, [pc, #348]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cb08:	4313      	orrs	r3, r2
 800cb0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb0c:	f7fd f908 	bl	8009d20 <HAL_GetTick>
 800cb10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb12:	e00a      	b.n	800cb2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb14:	f7fd f904 	bl	8009d20 <HAL_GetTick>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	1ad3      	subs	r3, r2, r3
 800cb1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb22:	4293      	cmp	r3, r2
 800cb24:	d901      	bls.n	800cb2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800cb26:	2303      	movs	r3, #3
 800cb28:	e095      	b.n	800cc56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb2a:	4b4e      	ldr	r3, [pc, #312]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	f003 020c 	and.w	r2, r3, #12
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	685b      	ldr	r3, [r3, #4]
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d1eb      	bne.n	800cb14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f003 0302 	and.w	r3, r3, #2
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d023      	beq.n	800cb90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f003 0304 	and.w	r3, r3, #4
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d005      	beq.n	800cb60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cb54:	4b43      	ldr	r3, [pc, #268]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	4a42      	ldr	r2, [pc, #264]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cb5a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800cb5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f003 0308 	and.w	r3, r3, #8
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d007      	beq.n	800cb7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800cb6c:	4b3d      	ldr	r3, [pc, #244]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cb74:	4a3b      	ldr	r2, [pc, #236]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cb76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800cb7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb7c:	4b39      	ldr	r3, [pc, #228]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	689b      	ldr	r3, [r3, #8]
 800cb88:	4936      	ldr	r1, [pc, #216]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cb8a:	4313      	orrs	r3, r2
 800cb8c:	608b      	str	r3, [r1, #8]
 800cb8e:	e008      	b.n	800cba2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	2b80      	cmp	r3, #128	@ 0x80
 800cb94:	d105      	bne.n	800cba2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cb96:	4b33      	ldr	r3, [pc, #204]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cb98:	689b      	ldr	r3, [r3, #8]
 800cb9a:	4a32      	ldr	r2, [pc, #200]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cb9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cba0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cba2:	4b2f      	ldr	r3, [pc, #188]	@ (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f003 030f 	and.w	r3, r3, #15
 800cbaa:	683a      	ldr	r2, [r7, #0]
 800cbac:	429a      	cmp	r2, r3
 800cbae:	d21d      	bcs.n	800cbec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbb0:	4b2b      	ldr	r3, [pc, #172]	@ (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f023 020f 	bic.w	r2, r3, #15
 800cbb8:	4929      	ldr	r1, [pc, #164]	@ (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cbc0:	f7fd f8ae 	bl	8009d20 <HAL_GetTick>
 800cbc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbc6:	e00a      	b.n	800cbde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cbc8:	f7fd f8aa 	bl	8009d20 <HAL_GetTick>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	1ad3      	subs	r3, r2, r3
 800cbd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d901      	bls.n	800cbde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800cbda:	2303      	movs	r3, #3
 800cbdc:	e03b      	b.n	800cc56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbde:	4b20      	ldr	r3, [pc, #128]	@ (800cc60 <HAL_RCC_ClockConfig+0x260>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f003 030f 	and.w	r3, r3, #15
 800cbe6:	683a      	ldr	r2, [r7, #0]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d1ed      	bne.n	800cbc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f003 0304 	and.w	r3, r3, #4
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d008      	beq.n	800cc0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cbf8:	4b1a      	ldr	r3, [pc, #104]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cbfa:	689b      	ldr	r3, [r3, #8]
 800cbfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	4917      	ldr	r1, [pc, #92]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cc06:	4313      	orrs	r3, r2
 800cc08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	f003 0308 	and.w	r3, r3, #8
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d009      	beq.n	800cc2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cc16:	4b13      	ldr	r3, [pc, #76]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cc18:	689b      	ldr	r3, [r3, #8]
 800cc1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	00db      	lsls	r3, r3, #3
 800cc24:	490f      	ldr	r1, [pc, #60]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cc26:	4313      	orrs	r3, r2
 800cc28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cc2a:	f000 f825 	bl	800cc78 <HAL_RCC_GetSysClockFreq>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	4b0c      	ldr	r3, [pc, #48]	@ (800cc64 <HAL_RCC_ClockConfig+0x264>)
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	091b      	lsrs	r3, r3, #4
 800cc36:	f003 030f 	and.w	r3, r3, #15
 800cc3a:	490c      	ldr	r1, [pc, #48]	@ (800cc6c <HAL_RCC_ClockConfig+0x26c>)
 800cc3c:	5ccb      	ldrb	r3, [r1, r3]
 800cc3e:	f003 031f 	and.w	r3, r3, #31
 800cc42:	fa22 f303 	lsr.w	r3, r2, r3
 800cc46:	4a0a      	ldr	r2, [pc, #40]	@ (800cc70 <HAL_RCC_ClockConfig+0x270>)
 800cc48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cc4a:	4b0a      	ldr	r3, [pc, #40]	@ (800cc74 <HAL_RCC_ClockConfig+0x274>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7fd f81a 	bl	8009c88 <HAL_InitTick>
 800cc54:	4603      	mov	r3, r0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3718      	adds	r7, #24
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
 800cc5e:	bf00      	nop
 800cc60:	40022000 	.word	0x40022000
 800cc64:	40021000 	.word	0x40021000
 800cc68:	04c4b400 	.word	0x04c4b400
 800cc6c:	08013b98 	.word	0x08013b98
 800cc70:	20000138 	.word	0x20000138
 800cc74:	2000013c 	.word	0x2000013c

0800cc78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b087      	sub	sp, #28
 800cc7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cc7e:	4b2c      	ldr	r3, [pc, #176]	@ (800cd30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc80:	689b      	ldr	r3, [r3, #8]
 800cc82:	f003 030c 	and.w	r3, r3, #12
 800cc86:	2b04      	cmp	r3, #4
 800cc88:	d102      	bne.n	800cc90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cc8a:	4b2a      	ldr	r3, [pc, #168]	@ (800cd34 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cc8c:	613b      	str	r3, [r7, #16]
 800cc8e:	e047      	b.n	800cd20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cc90:	4b27      	ldr	r3, [pc, #156]	@ (800cd30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc92:	689b      	ldr	r3, [r3, #8]
 800cc94:	f003 030c 	and.w	r3, r3, #12
 800cc98:	2b08      	cmp	r3, #8
 800cc9a:	d102      	bne.n	800cca2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cc9c:	4b26      	ldr	r3, [pc, #152]	@ (800cd38 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cc9e:	613b      	str	r3, [r7, #16]
 800cca0:	e03e      	b.n	800cd20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cca2:	4b23      	ldr	r3, [pc, #140]	@ (800cd30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	f003 030c 	and.w	r3, r3, #12
 800ccaa:	2b0c      	cmp	r3, #12
 800ccac:	d136      	bne.n	800cd1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ccae:	4b20      	ldr	r3, [pc, #128]	@ (800cd30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	f003 0303 	and.w	r3, r3, #3
 800ccb6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ccb8:	4b1d      	ldr	r3, [pc, #116]	@ (800cd30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccba:	68db      	ldr	r3, [r3, #12]
 800ccbc:	091b      	lsrs	r3, r3, #4
 800ccbe:	f003 030f 	and.w	r3, r3, #15
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2b03      	cmp	r3, #3
 800ccca:	d10c      	bne.n	800cce6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cccc:	4a1a      	ldr	r2, [pc, #104]	@ (800cd38 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccd4:	4a16      	ldr	r2, [pc, #88]	@ (800cd30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccd6:	68d2      	ldr	r2, [r2, #12]
 800ccd8:	0a12      	lsrs	r2, r2, #8
 800ccda:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ccde:	fb02 f303 	mul.w	r3, r2, r3
 800cce2:	617b      	str	r3, [r7, #20]
      break;
 800cce4:	e00c      	b.n	800cd00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cce6:	4a13      	ldr	r2, [pc, #76]	@ (800cd34 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cce8:	68bb      	ldr	r3, [r7, #8]
 800ccea:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccee:	4a10      	ldr	r2, [pc, #64]	@ (800cd30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ccf0:	68d2      	ldr	r2, [r2, #12]
 800ccf2:	0a12      	lsrs	r2, r2, #8
 800ccf4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800ccf8:	fb02 f303 	mul.w	r3, r2, r3
 800ccfc:	617b      	str	r3, [r7, #20]
      break;
 800ccfe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cd00:	4b0b      	ldr	r3, [pc, #44]	@ (800cd30 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	0e5b      	lsrs	r3, r3, #25
 800cd06:	f003 0303 	and.w	r3, r3, #3
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	005b      	lsls	r3, r3, #1
 800cd0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cd10:	697a      	ldr	r2, [r7, #20]
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd18:	613b      	str	r3, [r7, #16]
 800cd1a:	e001      	b.n	800cd20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cd20:	693b      	ldr	r3, [r7, #16]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	371c      	adds	r7, #28
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	40021000 	.word	0x40021000
 800cd34:	00f42400 	.word	0x00f42400
 800cd38:	016e3600 	.word	0x016e3600

0800cd3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cd40:	4b03      	ldr	r3, [pc, #12]	@ (800cd50 <HAL_RCC_GetHCLKFreq+0x14>)
 800cd42:	681b      	ldr	r3, [r3, #0]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	20000138 	.word	0x20000138

0800cd54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800cd58:	f7ff fff0 	bl	800cd3c <HAL_RCC_GetHCLKFreq>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	4b06      	ldr	r3, [pc, #24]	@ (800cd78 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	0a1b      	lsrs	r3, r3, #8
 800cd64:	f003 0307 	and.w	r3, r3, #7
 800cd68:	4904      	ldr	r1, [pc, #16]	@ (800cd7c <HAL_RCC_GetPCLK1Freq+0x28>)
 800cd6a:	5ccb      	ldrb	r3, [r1, r3]
 800cd6c:	f003 031f 	and.w	r3, r3, #31
 800cd70:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	40021000 	.word	0x40021000
 800cd7c:	08013ba8 	.word	0x08013ba8

0800cd80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800cd84:	f7ff ffda 	bl	800cd3c <HAL_RCC_GetHCLKFreq>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	4b06      	ldr	r3, [pc, #24]	@ (800cda4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	0adb      	lsrs	r3, r3, #11
 800cd90:	f003 0307 	and.w	r3, r3, #7
 800cd94:	4904      	ldr	r1, [pc, #16]	@ (800cda8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800cd96:	5ccb      	ldrb	r3, [r1, r3]
 800cd98:	f003 031f 	and.w	r3, r3, #31
 800cd9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	40021000 	.word	0x40021000
 800cda8:	08013ba8 	.word	0x08013ba8

0800cdac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b087      	sub	sp, #28
 800cdb0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cdb2:	4b1e      	ldr	r3, [pc, #120]	@ (800ce2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cdb4:	68db      	ldr	r3, [r3, #12]
 800cdb6:	f003 0303 	and.w	r3, r3, #3
 800cdba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cdbc:	4b1b      	ldr	r3, [pc, #108]	@ (800ce2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cdbe:	68db      	ldr	r3, [r3, #12]
 800cdc0:	091b      	lsrs	r3, r3, #4
 800cdc2:	f003 030f 	and.w	r3, r3, #15
 800cdc6:	3301      	adds	r3, #1
 800cdc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800cdca:	693b      	ldr	r3, [r7, #16]
 800cdcc:	2b03      	cmp	r3, #3
 800cdce:	d10c      	bne.n	800cdea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cdd0:	4a17      	ldr	r2, [pc, #92]	@ (800ce30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdd8:	4a14      	ldr	r2, [pc, #80]	@ (800ce2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cdda:	68d2      	ldr	r2, [r2, #12]
 800cddc:	0a12      	lsrs	r2, r2, #8
 800cdde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cde2:	fb02 f303 	mul.w	r3, r2, r3
 800cde6:	617b      	str	r3, [r7, #20]
    break;
 800cde8:	e00c      	b.n	800ce04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cdea:	4a12      	ldr	r2, [pc, #72]	@ (800ce34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdf2:	4a0e      	ldr	r2, [pc, #56]	@ (800ce2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cdf4:	68d2      	ldr	r2, [r2, #12]
 800cdf6:	0a12      	lsrs	r2, r2, #8
 800cdf8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800cdfc:	fb02 f303 	mul.w	r3, r2, r3
 800ce00:	617b      	str	r3, [r7, #20]
    break;
 800ce02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ce04:	4b09      	ldr	r3, [pc, #36]	@ (800ce2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	0e5b      	lsrs	r3, r3, #25
 800ce0a:	f003 0303 	and.w	r3, r3, #3
 800ce0e:	3301      	adds	r3, #1
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ce14:	697a      	ldr	r2, [r7, #20]
 800ce16:	68bb      	ldr	r3, [r7, #8]
 800ce18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ce1e:	687b      	ldr	r3, [r7, #4]
}
 800ce20:	4618      	mov	r0, r3
 800ce22:	371c      	adds	r7, #28
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr
 800ce2c:	40021000 	.word	0x40021000
 800ce30:	016e3600 	.word	0x016e3600
 800ce34:	00f42400 	.word	0x00f42400

0800ce38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ce40:	2300      	movs	r3, #0
 800ce42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ce44:	2300      	movs	r3, #0
 800ce46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f000 8098 	beq.w	800cf86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ce56:	2300      	movs	r3, #0
 800ce58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ce5a:	4b43      	ldr	r3, [pc, #268]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d10d      	bne.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce66:	4b40      	ldr	r3, [pc, #256]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce6a:	4a3f      	ldr	r2, [pc, #252]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce6c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ce70:	6593      	str	r3, [r2, #88]	@ 0x58
 800ce72:	4b3d      	ldr	r3, [pc, #244]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ce76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ce7a:	60bb      	str	r3, [r7, #8]
 800ce7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ce82:	4b3a      	ldr	r3, [pc, #232]	@ (800cf6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4a39      	ldr	r2, [pc, #228]	@ (800cf6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ce88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ce8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ce8e:	f7fc ff47 	bl	8009d20 <HAL_GetTick>
 800ce92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ce94:	e009      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce96:	f7fc ff43 	bl	8009d20 <HAL_GetTick>
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	1ad3      	subs	r3, r2, r3
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d902      	bls.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cea4:	2303      	movs	r3, #3
 800cea6:	74fb      	strb	r3, [r7, #19]
        break;
 800cea8:	e005      	b.n	800ceb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ceaa:	4b30      	ldr	r3, [pc, #192]	@ (800cf6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d0ef      	beq.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ceb6:	7cfb      	ldrb	r3, [r7, #19]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d159      	bne.n	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cebc:	4b2a      	ldr	r3, [pc, #168]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cec6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d01e      	beq.n	800cf0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ced2:	697a      	ldr	r2, [r7, #20]
 800ced4:	429a      	cmp	r2, r3
 800ced6:	d019      	beq.n	800cf0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ced8:	4b23      	ldr	r3, [pc, #140]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ceda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cee2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cee4:	4b20      	ldr	r3, [pc, #128]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ceea:	4a1f      	ldr	r2, [pc, #124]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ceec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cef0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cef4:	4b1c      	ldr	r3, [pc, #112]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cefa:	4a1b      	ldr	r2, [pc, #108]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cefc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cf00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cf04:	4a18      	ldr	r2, [pc, #96]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	f003 0301 	and.w	r3, r3, #1
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d016      	beq.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf16:	f7fc ff03 	bl	8009d20 <HAL_GetTick>
 800cf1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf1c:	e00b      	b.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf1e:	f7fc feff 	bl	8009d20 <HAL_GetTick>
 800cf22:	4602      	mov	r2, r0
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d902      	bls.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800cf30:	2303      	movs	r3, #3
 800cf32:	74fb      	strb	r3, [r7, #19]
            break;
 800cf34:	e006      	b.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf36:	4b0c      	ldr	r3, [pc, #48]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cf38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf3c:	f003 0302 	and.w	r3, r3, #2
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d0ec      	beq.n	800cf1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800cf44:	7cfb      	ldrb	r3, [r7, #19]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d10b      	bne.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf4a:	4b07      	ldr	r3, [pc, #28]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cf4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cf50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf58:	4903      	ldr	r1, [pc, #12]	@ (800cf68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cf5a:	4313      	orrs	r3, r2
 800cf5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800cf60:	e008      	b.n	800cf74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cf62:	7cfb      	ldrb	r3, [r7, #19]
 800cf64:	74bb      	strb	r3, [r7, #18]
 800cf66:	e005      	b.n	800cf74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800cf68:	40021000 	.word	0x40021000
 800cf6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf70:	7cfb      	ldrb	r3, [r7, #19]
 800cf72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cf74:	7c7b      	ldrb	r3, [r7, #17]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d105      	bne.n	800cf86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf7a:	4ba7      	ldr	r3, [pc, #668]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf7e:	4aa6      	ldr	r2, [pc, #664]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f003 0301 	and.w	r3, r3, #1
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00a      	beq.n	800cfa8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cf92:	4ba1      	ldr	r3, [pc, #644]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cf94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cf98:	f023 0203 	bic.w	r2, r3, #3
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	499d      	ldr	r1, [pc, #628]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	f003 0302 	and.w	r3, r3, #2
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d00a      	beq.n	800cfca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800cfb4:	4b98      	ldr	r3, [pc, #608]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfba:	f023 020c 	bic.w	r2, r3, #12
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	4995      	ldr	r1, [pc, #596]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f003 0304 	and.w	r3, r3, #4
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d00a      	beq.n	800cfec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800cfd6:	4b90      	ldr	r3, [pc, #576]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cfdc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	498c      	ldr	r1, [pc, #560]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f003 0308 	and.w	r3, r3, #8
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00a      	beq.n	800d00e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cff8:	4b87      	ldr	r3, [pc, #540]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800cffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cffe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	4984      	ldr	r1, [pc, #528]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d008:	4313      	orrs	r3, r2
 800d00a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f003 0310 	and.w	r3, r3, #16
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00a      	beq.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d01a:	4b7f      	ldr	r3, [pc, #508]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d020:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	695b      	ldr	r3, [r3, #20]
 800d028:	497b      	ldr	r1, [pc, #492]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d02a:	4313      	orrs	r3, r2
 800d02c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f003 0320 	and.w	r3, r3, #32
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d00a      	beq.n	800d052 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d03c:	4b76      	ldr	r3, [pc, #472]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d042:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	699b      	ldr	r3, [r3, #24]
 800d04a:	4973      	ldr	r1, [pc, #460]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d04c:	4313      	orrs	r3, r2
 800d04e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d00a      	beq.n	800d074 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d05e:	4b6e      	ldr	r3, [pc, #440]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d064:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	69db      	ldr	r3, [r3, #28]
 800d06c:	496a      	ldr	r1, [pc, #424]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d06e:	4313      	orrs	r3, r2
 800d070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d00a      	beq.n	800d096 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d080:	4b65      	ldr	r3, [pc, #404]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d086:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a1b      	ldr	r3, [r3, #32]
 800d08e:	4962      	ldr	r1, [pc, #392]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d090:	4313      	orrs	r3, r2
 800d092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00a      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d0a2:	4b5d      	ldr	r3, [pc, #372]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0b0:	4959      	ldr	r1, [pc, #356]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d00a      	beq.n	800d0da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d0c4:	4b54      	ldr	r3, [pc, #336]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d0ca:	f023 0203 	bic.w	r2, r3, #3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0d2:	4951      	ldr	r1, [pc, #324]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d00a      	beq.n	800d0fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d0e6:	4b4c      	ldr	r3, [pc, #304]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d0ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0f4:	4948      	ldr	r1, [pc, #288]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d104:	2b00      	cmp	r3, #0
 800d106:	d015      	beq.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d108:	4b43      	ldr	r3, [pc, #268]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d10e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d116:	4940      	ldr	r1, [pc, #256]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d118:	4313      	orrs	r3, r2
 800d11a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d122:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d126:	d105      	bne.n	800d134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d128:	4b3b      	ldr	r3, [pc, #236]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d12a:	68db      	ldr	r3, [r3, #12]
 800d12c:	4a3a      	ldr	r2, [pc, #232]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d12e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d132:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d015      	beq.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d140:	4b35      	ldr	r3, [pc, #212]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d146:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d14e:	4932      	ldr	r1, [pc, #200]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d150:	4313      	orrs	r3, r2
 800d152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d15a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d15e:	d105      	bne.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d160:	4b2d      	ldr	r3, [pc, #180]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d162:	68db      	ldr	r3, [r3, #12]
 800d164:	4a2c      	ldr	r2, [pc, #176]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d16a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d174:	2b00      	cmp	r3, #0
 800d176:	d015      	beq.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d178:	4b27      	ldr	r3, [pc, #156]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d17e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d186:	4924      	ldr	r1, [pc, #144]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d188:	4313      	orrs	r3, r2
 800d18a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d192:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d196:	d105      	bne.n	800d1a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d198:	4b1f      	ldr	r3, [pc, #124]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d19a:	68db      	ldr	r3, [r3, #12]
 800d19c:	4a1e      	ldr	r2, [pc, #120]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d19e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d015      	beq.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d1b0:	4b19      	ldr	r3, [pc, #100]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1be:	4916      	ldr	r1, [pc, #88]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1c0:	4313      	orrs	r3, r2
 800d1c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d1ce:	d105      	bne.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d1d0:	4b11      	ldr	r3, [pc, #68]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	4a10      	ldr	r2, [pc, #64]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d019      	beq.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d1e8:	4b0b      	ldr	r3, [pc, #44]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d1ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1f6:	4908      	ldr	r1, [pc, #32]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d202:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d206:	d109      	bne.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d208:	4b03      	ldr	r3, [pc, #12]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d20a:	68db      	ldr	r3, [r3, #12]
 800d20c:	4a02      	ldr	r2, [pc, #8]	@ (800d218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800d20e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d212:	60d3      	str	r3, [r2, #12]
 800d214:	e002      	b.n	800d21c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800d216:	bf00      	nop
 800d218:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d015      	beq.n	800d254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d228:	4b29      	ldr	r3, [pc, #164]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d22a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d22e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d236:	4926      	ldr	r1, [pc, #152]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d238:	4313      	orrs	r3, r2
 800d23a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d242:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d246:	d105      	bne.n	800d254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d248:	4b21      	ldr	r3, [pc, #132]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d24a:	68db      	ldr	r3, [r3, #12]
 800d24c:	4a20      	ldr	r2, [pc, #128]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d24e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d252:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d015      	beq.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d260:	4b1b      	ldr	r3, [pc, #108]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d266:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d26e:	4918      	ldr	r1, [pc, #96]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d270:	4313      	orrs	r3, r2
 800d272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d27a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d27e:	d105      	bne.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d280:	4b13      	ldr	r3, [pc, #76]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d282:	68db      	ldr	r3, [r3, #12]
 800d284:	4a12      	ldr	r2, [pc, #72]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d28a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d294:	2b00      	cmp	r3, #0
 800d296:	d015      	beq.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d298:	4b0d      	ldr	r3, [pc, #52]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d29a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d29e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2a6:	490a      	ldr	r1, [pc, #40]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d2b6:	d105      	bne.n	800d2c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d2b8:	4b05      	ldr	r3, [pc, #20]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	4a04      	ldr	r2, [pc, #16]	@ (800d2d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800d2be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d2c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d2c4:	7cbb      	ldrb	r3, [r7, #18]
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3718      	adds	r7, #24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	40021000 	.word	0x40021000

0800d2d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d101      	bne.n	800d2e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2e2:	2301      	movs	r3, #1
 800d2e4:	e054      	b.n	800d390 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d111      	bne.n	800d316 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f001 fee2 	bl	800f0c4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d304:	2b00      	cmp	r3, #0
 800d306:	d102      	bne.n	800d30e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	4a23      	ldr	r2, [pc, #140]	@ (800d398 <HAL_TIM_Base_Init+0xc4>)
 800d30c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	2202      	movs	r2, #2
 800d31a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681a      	ldr	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	3304      	adds	r3, #4
 800d326:	4619      	mov	r1, r3
 800d328:	4610      	mov	r0, r2
 800d32a:	f001 fa2b 	bl	800e784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2201      	movs	r2, #1
 800d332:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2201      	movs	r2, #1
 800d33a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2201      	movs	r2, #1
 800d342:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2201      	movs	r2, #1
 800d34a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2201      	movs	r2, #1
 800d352:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2201      	movs	r2, #1
 800d35a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2201      	movs	r2, #1
 800d362:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2201      	movs	r2, #1
 800d36a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2201      	movs	r2, #1
 800d372:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2201      	movs	r2, #1
 800d37a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2201      	movs	r2, #1
 800d382:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2201      	movs	r2, #1
 800d38a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d38e:	2300      	movs	r3, #0
}
 800d390:	4618      	mov	r0, r3
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	08009549 	.word	0x08009549

0800d39c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b085      	sub	sp, #20
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d3aa:	b2db      	uxtb	r3, r3
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d001      	beq.n	800d3b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e04c      	b.n	800d44e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2202      	movs	r2, #2
 800d3b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	4a26      	ldr	r2, [pc, #152]	@ (800d45c <HAL_TIM_Base_Start+0xc0>)
 800d3c2:	4293      	cmp	r3, r2
 800d3c4:	d022      	beq.n	800d40c <HAL_TIM_Base_Start+0x70>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d3ce:	d01d      	beq.n	800d40c <HAL_TIM_Base_Start+0x70>
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4a22      	ldr	r2, [pc, #136]	@ (800d460 <HAL_TIM_Base_Start+0xc4>)
 800d3d6:	4293      	cmp	r3, r2
 800d3d8:	d018      	beq.n	800d40c <HAL_TIM_Base_Start+0x70>
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	4a21      	ldr	r2, [pc, #132]	@ (800d464 <HAL_TIM_Base_Start+0xc8>)
 800d3e0:	4293      	cmp	r3, r2
 800d3e2:	d013      	beq.n	800d40c <HAL_TIM_Base_Start+0x70>
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4a1f      	ldr	r2, [pc, #124]	@ (800d468 <HAL_TIM_Base_Start+0xcc>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d00e      	beq.n	800d40c <HAL_TIM_Base_Start+0x70>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	4a1e      	ldr	r2, [pc, #120]	@ (800d46c <HAL_TIM_Base_Start+0xd0>)
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d009      	beq.n	800d40c <HAL_TIM_Base_Start+0x70>
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a1c      	ldr	r2, [pc, #112]	@ (800d470 <HAL_TIM_Base_Start+0xd4>)
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d004      	beq.n	800d40c <HAL_TIM_Base_Start+0x70>
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4a1b      	ldr	r2, [pc, #108]	@ (800d474 <HAL_TIM_Base_Start+0xd8>)
 800d408:	4293      	cmp	r3, r2
 800d40a:	d115      	bne.n	800d438 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	689a      	ldr	r2, [r3, #8]
 800d412:	4b19      	ldr	r3, [pc, #100]	@ (800d478 <HAL_TIM_Base_Start+0xdc>)
 800d414:	4013      	ands	r3, r2
 800d416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2b06      	cmp	r3, #6
 800d41c:	d015      	beq.n	800d44a <HAL_TIM_Base_Start+0xae>
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d424:	d011      	beq.n	800d44a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f042 0201 	orr.w	r2, r2, #1
 800d434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d436:	e008      	b.n	800d44a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f042 0201 	orr.w	r2, r2, #1
 800d446:	601a      	str	r2, [r3, #0]
 800d448:	e000      	b.n	800d44c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d44a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d44c:	2300      	movs	r3, #0
}
 800d44e:	4618      	mov	r0, r3
 800d450:	3714      	adds	r7, #20
 800d452:	46bd      	mov	sp, r7
 800d454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d458:	4770      	bx	lr
 800d45a:	bf00      	nop
 800d45c:	40012c00 	.word	0x40012c00
 800d460:	40000400 	.word	0x40000400
 800d464:	40000800 	.word	0x40000800
 800d468:	40000c00 	.word	0x40000c00
 800d46c:	40013400 	.word	0x40013400
 800d470:	40014000 	.word	0x40014000
 800d474:	40015000 	.word	0x40015000
 800d478:	00010007 	.word	0x00010007

0800d47c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d48a:	b2db      	uxtb	r3, r3
 800d48c:	2b01      	cmp	r3, #1
 800d48e:	d001      	beq.n	800d494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d490:	2301      	movs	r3, #1
 800d492:	e054      	b.n	800d53e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2202      	movs	r2, #2
 800d498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	68da      	ldr	r2, [r3, #12]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	f042 0201 	orr.w	r2, r2, #1
 800d4aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a26      	ldr	r2, [pc, #152]	@ (800d54c <HAL_TIM_Base_Start_IT+0xd0>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d022      	beq.n	800d4fc <HAL_TIM_Base_Start_IT+0x80>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4be:	d01d      	beq.n	800d4fc <HAL_TIM_Base_Start_IT+0x80>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a22      	ldr	r2, [pc, #136]	@ (800d550 <HAL_TIM_Base_Start_IT+0xd4>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d018      	beq.n	800d4fc <HAL_TIM_Base_Start_IT+0x80>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4a21      	ldr	r2, [pc, #132]	@ (800d554 <HAL_TIM_Base_Start_IT+0xd8>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d013      	beq.n	800d4fc <HAL_TIM_Base_Start_IT+0x80>
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	4a1f      	ldr	r2, [pc, #124]	@ (800d558 <HAL_TIM_Base_Start_IT+0xdc>)
 800d4da:	4293      	cmp	r3, r2
 800d4dc:	d00e      	beq.n	800d4fc <HAL_TIM_Base_Start_IT+0x80>
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	4a1e      	ldr	r2, [pc, #120]	@ (800d55c <HAL_TIM_Base_Start_IT+0xe0>)
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d009      	beq.n	800d4fc <HAL_TIM_Base_Start_IT+0x80>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a1c      	ldr	r2, [pc, #112]	@ (800d560 <HAL_TIM_Base_Start_IT+0xe4>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d004      	beq.n	800d4fc <HAL_TIM_Base_Start_IT+0x80>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a1b      	ldr	r2, [pc, #108]	@ (800d564 <HAL_TIM_Base_Start_IT+0xe8>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d115      	bne.n	800d528 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	689a      	ldr	r2, [r3, #8]
 800d502:	4b19      	ldr	r3, [pc, #100]	@ (800d568 <HAL_TIM_Base_Start_IT+0xec>)
 800d504:	4013      	ands	r3, r2
 800d506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2b06      	cmp	r3, #6
 800d50c:	d015      	beq.n	800d53a <HAL_TIM_Base_Start_IT+0xbe>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d514:	d011      	beq.n	800d53a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f042 0201 	orr.w	r2, r2, #1
 800d524:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d526:	e008      	b.n	800d53a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f042 0201 	orr.w	r2, r2, #1
 800d536:	601a      	str	r2, [r3, #0]
 800d538:	e000      	b.n	800d53c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d53a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3714      	adds	r7, #20
 800d542:	46bd      	mov	sp, r7
 800d544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d548:	4770      	bx	lr
 800d54a:	bf00      	nop
 800d54c:	40012c00 	.word	0x40012c00
 800d550:	40000400 	.word	0x40000400
 800d554:	40000800 	.word	0x40000800
 800d558:	40000c00 	.word	0x40000c00
 800d55c:	40013400 	.word	0x40013400
 800d560:	40014000 	.word	0x40014000
 800d564:	40015000 	.word	0x40015000
 800d568:	00010007 	.word	0x00010007

0800d56c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b082      	sub	sp, #8
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d101      	bne.n	800d57e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d57a:	2301      	movs	r3, #1
 800d57c:	e054      	b.n	800d628 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d584:	b2db      	uxtb	r3, r3
 800d586:	2b00      	cmp	r3, #0
 800d588:	d111      	bne.n	800d5ae <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	2200      	movs	r2, #0
 800d58e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f001 fd96 	bl	800f0c4 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d102      	bne.n	800d5a6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	4a23      	ldr	r2, [pc, #140]	@ (800d630 <HAL_TIM_PWM_Init+0xc4>)
 800d5a4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2202      	movs	r2, #2
 800d5b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681a      	ldr	r2, [r3, #0]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	3304      	adds	r3, #4
 800d5be:	4619      	mov	r1, r3
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	f001 f8df 	bl	800e784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2201      	movs	r2, #1
 800d5da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2201      	movs	r2, #1
 800d5ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2201      	movs	r2, #1
 800d5fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2201      	movs	r2, #1
 800d602:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2201      	movs	r2, #1
 800d60a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2201      	movs	r2, #1
 800d61a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	2201      	movs	r2, #1
 800d622:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	080094fd 	.word	0x080094fd

0800d634 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	6078      	str	r0, [r7, #4]
 800d63c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d109      	bne.n	800d658 <HAL_TIM_PWM_Start+0x24>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	bf14      	ite	ne
 800d650:	2301      	movne	r3, #1
 800d652:	2300      	moveq	r3, #0
 800d654:	b2db      	uxtb	r3, r3
 800d656:	e03c      	b.n	800d6d2 <HAL_TIM_PWM_Start+0x9e>
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	2b04      	cmp	r3, #4
 800d65c:	d109      	bne.n	800d672 <HAL_TIM_PWM_Start+0x3e>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d664:	b2db      	uxtb	r3, r3
 800d666:	2b01      	cmp	r3, #1
 800d668:	bf14      	ite	ne
 800d66a:	2301      	movne	r3, #1
 800d66c:	2300      	moveq	r3, #0
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	e02f      	b.n	800d6d2 <HAL_TIM_PWM_Start+0x9e>
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	2b08      	cmp	r3, #8
 800d676:	d109      	bne.n	800d68c <HAL_TIM_PWM_Start+0x58>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	2b01      	cmp	r3, #1
 800d682:	bf14      	ite	ne
 800d684:	2301      	movne	r3, #1
 800d686:	2300      	moveq	r3, #0
 800d688:	b2db      	uxtb	r3, r3
 800d68a:	e022      	b.n	800d6d2 <HAL_TIM_PWM_Start+0x9e>
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2b0c      	cmp	r3, #12
 800d690:	d109      	bne.n	800d6a6 <HAL_TIM_PWM_Start+0x72>
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	bf14      	ite	ne
 800d69e:	2301      	movne	r3, #1
 800d6a0:	2300      	moveq	r3, #0
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	e015      	b.n	800d6d2 <HAL_TIM_PWM_Start+0x9e>
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	2b10      	cmp	r3, #16
 800d6aa:	d109      	bne.n	800d6c0 <HAL_TIM_PWM_Start+0x8c>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d6b2:	b2db      	uxtb	r3, r3
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	bf14      	ite	ne
 800d6b8:	2301      	movne	r3, #1
 800d6ba:	2300      	moveq	r3, #0
 800d6bc:	b2db      	uxtb	r3, r3
 800d6be:	e008      	b.n	800d6d2 <HAL_TIM_PWM_Start+0x9e>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d6c6:	b2db      	uxtb	r3, r3
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	bf14      	ite	ne
 800d6cc:	2301      	movne	r3, #1
 800d6ce:	2300      	moveq	r3, #0
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d001      	beq.n	800d6da <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	e0a6      	b.n	800d828 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d104      	bne.n	800d6ea <HAL_TIM_PWM_Start+0xb6>
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2202      	movs	r2, #2
 800d6e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d6e8:	e023      	b.n	800d732 <HAL_TIM_PWM_Start+0xfe>
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	2b04      	cmp	r3, #4
 800d6ee:	d104      	bne.n	800d6fa <HAL_TIM_PWM_Start+0xc6>
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2202      	movs	r2, #2
 800d6f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d6f8:	e01b      	b.n	800d732 <HAL_TIM_PWM_Start+0xfe>
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b08      	cmp	r3, #8
 800d6fe:	d104      	bne.n	800d70a <HAL_TIM_PWM_Start+0xd6>
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2202      	movs	r2, #2
 800d704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d708:	e013      	b.n	800d732 <HAL_TIM_PWM_Start+0xfe>
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	2b0c      	cmp	r3, #12
 800d70e:	d104      	bne.n	800d71a <HAL_TIM_PWM_Start+0xe6>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2202      	movs	r2, #2
 800d714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d718:	e00b      	b.n	800d732 <HAL_TIM_PWM_Start+0xfe>
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	2b10      	cmp	r3, #16
 800d71e:	d104      	bne.n	800d72a <HAL_TIM_PWM_Start+0xf6>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2202      	movs	r2, #2
 800d724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d728:	e003      	b.n	800d732 <HAL_TIM_PWM_Start+0xfe>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2202      	movs	r2, #2
 800d72e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	2201      	movs	r2, #1
 800d738:	6839      	ldr	r1, [r7, #0]
 800d73a:	4618      	mov	r0, r3
 800d73c:	f001 fc9c 	bl	800f078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a3a      	ldr	r2, [pc, #232]	@ (800d830 <HAL_TIM_PWM_Start+0x1fc>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d018      	beq.n	800d77c <HAL_TIM_PWM_Start+0x148>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	4a39      	ldr	r2, [pc, #228]	@ (800d834 <HAL_TIM_PWM_Start+0x200>)
 800d750:	4293      	cmp	r3, r2
 800d752:	d013      	beq.n	800d77c <HAL_TIM_PWM_Start+0x148>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a37      	ldr	r2, [pc, #220]	@ (800d838 <HAL_TIM_PWM_Start+0x204>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d00e      	beq.n	800d77c <HAL_TIM_PWM_Start+0x148>
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a36      	ldr	r2, [pc, #216]	@ (800d83c <HAL_TIM_PWM_Start+0x208>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d009      	beq.n	800d77c <HAL_TIM_PWM_Start+0x148>
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a34      	ldr	r2, [pc, #208]	@ (800d840 <HAL_TIM_PWM_Start+0x20c>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d004      	beq.n	800d77c <HAL_TIM_PWM_Start+0x148>
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a33      	ldr	r2, [pc, #204]	@ (800d844 <HAL_TIM_PWM_Start+0x210>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d101      	bne.n	800d780 <HAL_TIM_PWM_Start+0x14c>
 800d77c:	2301      	movs	r3, #1
 800d77e:	e000      	b.n	800d782 <HAL_TIM_PWM_Start+0x14e>
 800d780:	2300      	movs	r3, #0
 800d782:	2b00      	cmp	r3, #0
 800d784:	d007      	beq.n	800d796 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d794:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	4a25      	ldr	r2, [pc, #148]	@ (800d830 <HAL_TIM_PWM_Start+0x1fc>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d022      	beq.n	800d7e6 <HAL_TIM_PWM_Start+0x1b2>
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d7a8:	d01d      	beq.n	800d7e6 <HAL_TIM_PWM_Start+0x1b2>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a26      	ldr	r2, [pc, #152]	@ (800d848 <HAL_TIM_PWM_Start+0x214>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d018      	beq.n	800d7e6 <HAL_TIM_PWM_Start+0x1b2>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	4a24      	ldr	r2, [pc, #144]	@ (800d84c <HAL_TIM_PWM_Start+0x218>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d013      	beq.n	800d7e6 <HAL_TIM_PWM_Start+0x1b2>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a23      	ldr	r2, [pc, #140]	@ (800d850 <HAL_TIM_PWM_Start+0x21c>)
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	d00e      	beq.n	800d7e6 <HAL_TIM_PWM_Start+0x1b2>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	4a19      	ldr	r2, [pc, #100]	@ (800d834 <HAL_TIM_PWM_Start+0x200>)
 800d7ce:	4293      	cmp	r3, r2
 800d7d0:	d009      	beq.n	800d7e6 <HAL_TIM_PWM_Start+0x1b2>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	4a18      	ldr	r2, [pc, #96]	@ (800d838 <HAL_TIM_PWM_Start+0x204>)
 800d7d8:	4293      	cmp	r3, r2
 800d7da:	d004      	beq.n	800d7e6 <HAL_TIM_PWM_Start+0x1b2>
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a18      	ldr	r2, [pc, #96]	@ (800d844 <HAL_TIM_PWM_Start+0x210>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d115      	bne.n	800d812 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	689a      	ldr	r2, [r3, #8]
 800d7ec:	4b19      	ldr	r3, [pc, #100]	@ (800d854 <HAL_TIM_PWM_Start+0x220>)
 800d7ee:	4013      	ands	r3, r2
 800d7f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2b06      	cmp	r3, #6
 800d7f6:	d015      	beq.n	800d824 <HAL_TIM_PWM_Start+0x1f0>
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7fe:	d011      	beq.n	800d824 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f042 0201 	orr.w	r2, r2, #1
 800d80e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d810:	e008      	b.n	800d824 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	681a      	ldr	r2, [r3, #0]
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	f042 0201 	orr.w	r2, r2, #1
 800d820:	601a      	str	r2, [r3, #0]
 800d822:	e000      	b.n	800d826 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d824:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3710      	adds	r7, #16
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	40012c00 	.word	0x40012c00
 800d834:	40013400 	.word	0x40013400
 800d838:	40014000 	.word	0x40014000
 800d83c:	40014400 	.word	0x40014400
 800d840:	40014800 	.word	0x40014800
 800d844:	40015000 	.word	0x40015000
 800d848:	40000400 	.word	0x40000400
 800d84c:	40000800 	.word	0x40000800
 800d850:	40000c00 	.word	0x40000c00
 800d854:	00010007 	.word	0x00010007

0800d858 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d101      	bne.n	800d86c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800d868:	2301      	movs	r3, #1
 800d86a:	e04c      	b.n	800d906 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d872:	b2db      	uxtb	r3, r3
 800d874:	2b00      	cmp	r3, #0
 800d876:	d111      	bne.n	800d89c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f001 fc1f 	bl	800f0c4 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d102      	bne.n	800d894 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	4a1f      	ldr	r2, [pc, #124]	@ (800d910 <HAL_TIM_OnePulse_Init+0xb8>)
 800d892:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2202      	movs	r2, #2
 800d8a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	4610      	mov	r0, r2
 800d8b0:	f000 ff68 	bl	800e784 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f022 0208 	bic.w	r2, r2, #8
 800d8c2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	6819      	ldr	r1, [r3, #0]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	430a      	orrs	r2, r1
 800d8d2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2201      	movs	r2, #1
 800d8e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2201      	movs	r2, #1
 800d8f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2201      	movs	r2, #1
 800d8f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d904:	2300      	movs	r3, #0
}
 800d906:	4618      	mov	r0, r3
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	0800d915 	.word	0x0800d915

0800d914 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800d91c:	bf00      	nop
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800d938:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800d940:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d948:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d950:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d952:	7bfb      	ldrb	r3, [r7, #15]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d108      	bne.n	800d96a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d958:	7bbb      	ldrb	r3, [r7, #14]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d105      	bne.n	800d96a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d95e:	7b7b      	ldrb	r3, [r7, #13]
 800d960:	2b01      	cmp	r3, #1
 800d962:	d102      	bne.n	800d96a <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d964:	7b3b      	ldrb	r3, [r7, #12]
 800d966:	2b01      	cmp	r3, #1
 800d968:	d001      	beq.n	800d96e <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800d96a:	2301      	movs	r3, #1
 800d96c:	e059      	b.n	800da22 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2202      	movs	r2, #2
 800d972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2202      	movs	r2, #2
 800d97a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2202      	movs	r2, #2
 800d982:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	2202      	movs	r2, #2
 800d98a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	68da      	ldr	r2, [r3, #12]
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f042 0202 	orr.w	r2, r2, #2
 800d99c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	68da      	ldr	r2, [r3, #12]
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	f042 0204 	orr.w	r2, r2, #4
 800d9ac:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	2100      	movs	r1, #0
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	f001 fb5e 	bl	800f078 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	2104      	movs	r1, #4
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f001 fb57 	bl	800f078 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	4a17      	ldr	r2, [pc, #92]	@ (800da2c <HAL_TIM_OnePulse_Start_IT+0x104>)
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	d018      	beq.n	800da06 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	4a15      	ldr	r2, [pc, #84]	@ (800da30 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d013      	beq.n	800da06 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	4a14      	ldr	r2, [pc, #80]	@ (800da34 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800d9e4:	4293      	cmp	r3, r2
 800d9e6:	d00e      	beq.n	800da06 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4a12      	ldr	r2, [pc, #72]	@ (800da38 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d009      	beq.n	800da06 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	4a11      	ldr	r2, [pc, #68]	@ (800da3c <HAL_TIM_OnePulse_Start_IT+0x114>)
 800d9f8:	4293      	cmp	r3, r2
 800d9fa:	d004      	beq.n	800da06 <HAL_TIM_OnePulse_Start_IT+0xde>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a0f      	ldr	r2, [pc, #60]	@ (800da40 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d101      	bne.n	800da0a <HAL_TIM_OnePulse_Start_IT+0xe2>
 800da06:	2301      	movs	r3, #1
 800da08:	e000      	b.n	800da0c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800da0a:	2300      	movs	r3, #0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d007      	beq.n	800da20 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800da1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	40012c00 	.word	0x40012c00
 800da30:	40013400 	.word	0x40013400
 800da34:	40014000 	.word	0x40014000
 800da38:	40014400 	.word	0x40014400
 800da3c:	40014800 	.word	0x40014800
 800da40:	40015000 	.word	0x40015000

0800da44 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b086      	sub	sp, #24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d101      	bne.n	800da58 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800da54:	2301      	movs	r3, #1
 800da56:	e0a2      	b.n	800db9e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	2b00      	cmp	r3, #0
 800da62:	d111      	bne.n	800da88 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f001 fb29 	bl	800f0c4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da76:	2b00      	cmp	r3, #0
 800da78:	d102      	bne.n	800da80 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4a4a      	ldr	r2, [pc, #296]	@ (800dba8 <HAL_TIM_Encoder_Init+0x164>)
 800da7e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2202      	movs	r2, #2
 800da8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	689b      	ldr	r3, [r3, #8]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	6812      	ldr	r2, [r2, #0]
 800da9a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800da9e:	f023 0307 	bic.w	r3, r3, #7
 800daa2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681a      	ldr	r2, [r3, #0]
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	3304      	adds	r3, #4
 800daac:	4619      	mov	r1, r3
 800daae:	4610      	mov	r0, r2
 800dab0:	f000 fe68 	bl	800e784 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	689b      	ldr	r3, [r3, #8]
 800daba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	699b      	ldr	r3, [r3, #24]
 800dac2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	6a1b      	ldr	r3, [r3, #32]
 800daca:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	697a      	ldr	r2, [r7, #20]
 800dad2:	4313      	orrs	r3, r2
 800dad4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dadc:	f023 0303 	bic.w	r3, r3, #3
 800dae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	689a      	ldr	r2, [r3, #8]
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	021b      	lsls	r3, r3, #8
 800daec:	4313      	orrs	r3, r2
 800daee:	693a      	ldr	r2, [r7, #16]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800daf4:	693b      	ldr	r3, [r7, #16]
 800daf6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800dafa:	f023 030c 	bic.w	r3, r3, #12
 800dafe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800db06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800db0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	68da      	ldr	r2, [r3, #12]
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	69db      	ldr	r3, [r3, #28]
 800db14:	021b      	lsls	r3, r3, #8
 800db16:	4313      	orrs	r3, r2
 800db18:	693a      	ldr	r2, [r7, #16]
 800db1a:	4313      	orrs	r3, r2
 800db1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	691b      	ldr	r3, [r3, #16]
 800db22:	011a      	lsls	r2, r3, #4
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	6a1b      	ldr	r3, [r3, #32]
 800db28:	031b      	lsls	r3, r3, #12
 800db2a:	4313      	orrs	r3, r2
 800db2c:	693a      	ldr	r2, [r7, #16]
 800db2e:	4313      	orrs	r3, r2
 800db30:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800db38:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800db40:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	685a      	ldr	r2, [r3, #4]
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	695b      	ldr	r3, [r3, #20]
 800db4a:	011b      	lsls	r3, r3, #4
 800db4c:	4313      	orrs	r3, r2
 800db4e:	68fa      	ldr	r2, [r7, #12]
 800db50:	4313      	orrs	r3, r2
 800db52:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	697a      	ldr	r2, [r7, #20]
 800db5a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	693a      	ldr	r2, [r7, #16]
 800db62:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2201      	movs	r2, #1
 800db98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800db9c:	2300      	movs	r3, #0
}
 800db9e:	4618      	mov	r0, r3
 800dba0:	3718      	adds	r7, #24
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	080095f1 	.word	0x080095f1

0800dbac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
 800dbb4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800dbbc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800dbc4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dbcc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbd4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d110      	bne.n	800dbfe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
 800dbde:	2b01      	cmp	r3, #1
 800dbe0:	d102      	bne.n	800dbe8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800dbe2:	7b7b      	ldrb	r3, [r7, #13]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d001      	beq.n	800dbec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	e069      	b.n	800dcc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2202      	movs	r2, #2
 800dbf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2202      	movs	r2, #2
 800dbf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dbfc:	e031      	b.n	800dc62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2b04      	cmp	r3, #4
 800dc02:	d110      	bne.n	800dc26 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc04:	7bbb      	ldrb	r3, [r7, #14]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d102      	bne.n	800dc10 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc0a:	7b3b      	ldrb	r3, [r7, #12]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d001      	beq.n	800dc14 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800dc10:	2301      	movs	r3, #1
 800dc12:	e055      	b.n	800dcc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2202      	movs	r2, #2
 800dc18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2202      	movs	r2, #2
 800dc20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dc24:	e01d      	b.n	800dc62 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc26:	7bfb      	ldrb	r3, [r7, #15]
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d108      	bne.n	800dc3e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc2c:	7bbb      	ldrb	r3, [r7, #14]
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d105      	bne.n	800dc3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800dc32:	7b7b      	ldrb	r3, [r7, #13]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d102      	bne.n	800dc3e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800dc38:	7b3b      	ldrb	r3, [r7, #12]
 800dc3a:	2b01      	cmp	r3, #1
 800dc3c:	d001      	beq.n	800dc42 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800dc3e:	2301      	movs	r3, #1
 800dc40:	e03e      	b.n	800dcc0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2202      	movs	r2, #2
 800dc46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2202      	movs	r2, #2
 800dc4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2202      	movs	r2, #2
 800dc56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2202      	movs	r2, #2
 800dc5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d003      	beq.n	800dc70 <HAL_TIM_Encoder_Start+0xc4>
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	2b04      	cmp	r3, #4
 800dc6c:	d008      	beq.n	800dc80 <HAL_TIM_Encoder_Start+0xd4>
 800dc6e:	e00f      	b.n	800dc90 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2201      	movs	r2, #1
 800dc76:	2100      	movs	r1, #0
 800dc78:	4618      	mov	r0, r3
 800dc7a:	f001 f9fd 	bl	800f078 <TIM_CCxChannelCmd>
      break;
 800dc7e:	e016      	b.n	800dcae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2201      	movs	r2, #1
 800dc86:	2104      	movs	r1, #4
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f001 f9f5 	bl	800f078 <TIM_CCxChannelCmd>
      break;
 800dc8e:	e00e      	b.n	800dcae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2201      	movs	r2, #1
 800dc96:	2100      	movs	r1, #0
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f001 f9ed 	bl	800f078 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	2201      	movs	r2, #1
 800dca4:	2104      	movs	r1, #4
 800dca6:	4618      	mov	r0, r3
 800dca8:	f001 f9e6 	bl	800f078 <TIM_CCxChannelCmd>
      break;
 800dcac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	681a      	ldr	r2, [r3, #0]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	f042 0201 	orr.w	r2, r2, #1
 800dcbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800dcbe:	2300      	movs	r3, #0
}
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	68db      	ldr	r3, [r3, #12]
 800dcd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	691b      	ldr	r3, [r3, #16]
 800dcde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dce0:	68bb      	ldr	r3, [r7, #8]
 800dce2:	f003 0302 	and.w	r3, r3, #2
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d026      	beq.n	800dd38 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	f003 0302 	and.w	r3, r3, #2
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d021      	beq.n	800dd38 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f06f 0202 	mvn.w	r2, #2
 800dcfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	699b      	ldr	r3, [r3, #24]
 800dd0a:	f003 0303 	and.w	r3, r3, #3
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d005      	beq.n	800dd1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	4798      	blx	r3
 800dd1c:	e009      	b.n	800dd32 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2200      	movs	r2, #0
 800dd36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	f003 0304 	and.w	r3, r3, #4
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d026      	beq.n	800dd90 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f003 0304 	and.w	r3, r3, #4
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d021      	beq.n	800dd90 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f06f 0204 	mvn.w	r2, #4
 800dd54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2202      	movs	r2, #2
 800dd5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	699b      	ldr	r3, [r3, #24]
 800dd62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d005      	beq.n	800dd76 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	4798      	blx	r3
 800dd74:	e009      	b.n	800dd8a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	f003 0308 	and.w	r3, r3, #8
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d026      	beq.n	800dde8 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f003 0308 	and.w	r3, r3, #8
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d021      	beq.n	800dde8 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	f06f 0208 	mvn.w	r2, #8
 800ddac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2204      	movs	r2, #4
 800ddb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	69db      	ldr	r3, [r3, #28]
 800ddba:	f003 0303 	and.w	r3, r3, #3
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d005      	beq.n	800ddce <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ddc8:	6878      	ldr	r0, [r7, #4]
 800ddca:	4798      	blx	r3
 800ddcc:	e009      	b.n	800dde2 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dde8:	68bb      	ldr	r3, [r7, #8]
 800ddea:	f003 0310 	and.w	r3, r3, #16
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d026      	beq.n	800de40 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	f003 0310 	and.w	r3, r3, #16
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d021      	beq.n	800de40 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	f06f 0210 	mvn.w	r2, #16
 800de04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2208      	movs	r2, #8
 800de0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	69db      	ldr	r3, [r3, #28]
 800de12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800de16:	2b00      	cmp	r3, #0
 800de18:	d005      	beq.n	800de26 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	4798      	blx	r3
 800de24:	e009      	b.n	800de3a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	f003 0301 	and.w	r3, r3, #1
 800de46:	2b00      	cmp	r3, #0
 800de48:	d00e      	beq.n	800de68 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f003 0301 	and.w	r3, r3, #1
 800de50:	2b00      	cmp	r3, #0
 800de52:	d009      	beq.n	800de68 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f06f 0201 	mvn.w	r2, #1
 800de5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d104      	bne.n	800de7c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800de72:	68bb      	ldr	r3, [r7, #8]
 800de74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d00e      	beq.n	800de9a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de82:	2b00      	cmp	r3, #0
 800de84:	d009      	beq.n	800de9a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800de8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d00e      	beq.n	800dec2 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d009      	beq.n	800dec2 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800deb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d00e      	beq.n	800deea <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d009      	beq.n	800deea <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800dede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	f003 0320 	and.w	r3, r3, #32
 800def0:	2b00      	cmp	r3, #0
 800def2:	d00e      	beq.n	800df12 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f003 0320 	and.w	r3, r3, #32
 800defa:	2b00      	cmp	r3, #0
 800defc:	d009      	beq.n	800df12 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f06f 0220 	mvn.w	r2, #32
 800df06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d00e      	beq.n	800df3a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800df22:	2b00      	cmp	r3, #0
 800df24:	d009      	beq.n	800df3a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800df2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800df40:	2b00      	cmp	r3, #0
 800df42:	d00e      	beq.n	800df62 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d009      	beq.n	800df62 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800df56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d00e      	beq.n	800df8a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800df72:	2b00      	cmp	r3, #0
 800df74:	d009      	beq.n	800df8a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800df7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800df8a:	68bb      	ldr	r3, [r7, #8]
 800df8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df90:	2b00      	cmp	r3, #0
 800df92:	d00e      	beq.n	800dfb2 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d009      	beq.n	800dfb2 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800dfa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dfb2:	bf00      	nop
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
	...

0800dfbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dfbc:	b580      	push	{r7, lr}
 800dfbe:	b086      	sub	sp, #24
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	60f8      	str	r0, [r7, #12]
 800dfc4:	60b9      	str	r1, [r7, #8]
 800dfc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d101      	bne.n	800dfda <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	e0ff      	b.n	800e1da <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2201      	movs	r2, #1
 800dfde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2b14      	cmp	r3, #20
 800dfe6:	f200 80f0 	bhi.w	800e1ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dfea:	a201      	add	r2, pc, #4	@ (adr r2, 800dff0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff0:	0800e045 	.word	0x0800e045
 800dff4:	0800e1cb 	.word	0x0800e1cb
 800dff8:	0800e1cb 	.word	0x0800e1cb
 800dffc:	0800e1cb 	.word	0x0800e1cb
 800e000:	0800e085 	.word	0x0800e085
 800e004:	0800e1cb 	.word	0x0800e1cb
 800e008:	0800e1cb 	.word	0x0800e1cb
 800e00c:	0800e1cb 	.word	0x0800e1cb
 800e010:	0800e0c7 	.word	0x0800e0c7
 800e014:	0800e1cb 	.word	0x0800e1cb
 800e018:	0800e1cb 	.word	0x0800e1cb
 800e01c:	0800e1cb 	.word	0x0800e1cb
 800e020:	0800e107 	.word	0x0800e107
 800e024:	0800e1cb 	.word	0x0800e1cb
 800e028:	0800e1cb 	.word	0x0800e1cb
 800e02c:	0800e1cb 	.word	0x0800e1cb
 800e030:	0800e149 	.word	0x0800e149
 800e034:	0800e1cb 	.word	0x0800e1cb
 800e038:	0800e1cb 	.word	0x0800e1cb
 800e03c:	0800e1cb 	.word	0x0800e1cb
 800e040:	0800e189 	.word	0x0800e189
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68b9      	ldr	r1, [r7, #8]
 800e04a:	4618      	mov	r0, r3
 800e04c:	f000 fc4e 	bl	800e8ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	699a      	ldr	r2, [r3, #24]
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f042 0208 	orr.w	r2, r2, #8
 800e05e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	699a      	ldr	r2, [r3, #24]
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f022 0204 	bic.w	r2, r2, #4
 800e06e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	6999      	ldr	r1, [r3, #24]
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	691a      	ldr	r2, [r3, #16]
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	430a      	orrs	r2, r1
 800e080:	619a      	str	r2, [r3, #24]
      break;
 800e082:	e0a5      	b.n	800e1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	68b9      	ldr	r1, [r7, #8]
 800e08a:	4618      	mov	r0, r3
 800e08c:	f000 fcc8 	bl	800ea20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	699a      	ldr	r2, [r3, #24]
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e09e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	699a      	ldr	r2, [r3, #24]
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e0ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	6999      	ldr	r1, [r3, #24]
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	691b      	ldr	r3, [r3, #16]
 800e0ba:	021a      	lsls	r2, r3, #8
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	430a      	orrs	r2, r1
 800e0c2:	619a      	str	r2, [r3, #24]
      break;
 800e0c4:	e084      	b.n	800e1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	68b9      	ldr	r1, [r7, #8]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	f000 fd3b 	bl	800eb48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	69da      	ldr	r2, [r3, #28]
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	f042 0208 	orr.w	r2, r2, #8
 800e0e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	69da      	ldr	r2, [r3, #28]
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f022 0204 	bic.w	r2, r2, #4
 800e0f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	69d9      	ldr	r1, [r3, #28]
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	691a      	ldr	r2, [r3, #16]
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	430a      	orrs	r2, r1
 800e102:	61da      	str	r2, [r3, #28]
      break;
 800e104:	e064      	b.n	800e1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	68b9      	ldr	r1, [r7, #8]
 800e10c:	4618      	mov	r0, r3
 800e10e:	f000 fdad 	bl	800ec6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	69da      	ldr	r2, [r3, #28]
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	69da      	ldr	r2, [r3, #28]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	69d9      	ldr	r1, [r3, #28]
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	691b      	ldr	r3, [r3, #16]
 800e13c:	021a      	lsls	r2, r3, #8
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	430a      	orrs	r2, r1
 800e144:	61da      	str	r2, [r3, #28]
      break;
 800e146:	e043      	b.n	800e1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	68b9      	ldr	r1, [r7, #8]
 800e14e:	4618      	mov	r0, r3
 800e150:	f000 fe20 	bl	800ed94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f042 0208 	orr.w	r2, r2, #8
 800e162:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f022 0204 	bic.w	r2, r2, #4
 800e172:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	691a      	ldr	r2, [r3, #16]
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	430a      	orrs	r2, r1
 800e184:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e186:	e023      	b.n	800e1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	68b9      	ldr	r1, [r7, #8]
 800e18e:	4618      	mov	r0, r3
 800e190:	f000 fe6a 	bl	800ee68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e1a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e1b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	691b      	ldr	r3, [r3, #16]
 800e1be:	021a      	lsls	r2, r3, #8
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	430a      	orrs	r2, r1
 800e1c6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800e1c8:	e002      	b.n	800e1d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	75fb      	strb	r3, [r7, #23]
      break;
 800e1ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e1d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3718      	adds	r7, #24
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
 800e1e2:	bf00      	nop

0800e1e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b084      	sub	sp, #16
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d101      	bne.n	800e200 <HAL_TIM_ConfigClockSource+0x1c>
 800e1fc:	2302      	movs	r3, #2
 800e1fe:	e0f6      	b.n	800e3ee <HAL_TIM_ConfigClockSource+0x20a>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	2201      	movs	r2, #1
 800e204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2202      	movs	r2, #2
 800e20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800e21e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e22a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a6f      	ldr	r2, [pc, #444]	@ (800e3f8 <HAL_TIM_ConfigClockSource+0x214>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	f000 80c1 	beq.w	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e240:	4a6d      	ldr	r2, [pc, #436]	@ (800e3f8 <HAL_TIM_ConfigClockSource+0x214>)
 800e242:	4293      	cmp	r3, r2
 800e244:	f200 80c6 	bhi.w	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e248:	4a6c      	ldr	r2, [pc, #432]	@ (800e3fc <HAL_TIM_ConfigClockSource+0x218>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	f000 80b9 	beq.w	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e250:	4a6a      	ldr	r2, [pc, #424]	@ (800e3fc <HAL_TIM_ConfigClockSource+0x218>)
 800e252:	4293      	cmp	r3, r2
 800e254:	f200 80be 	bhi.w	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e258:	4a69      	ldr	r2, [pc, #420]	@ (800e400 <HAL_TIM_ConfigClockSource+0x21c>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	f000 80b1 	beq.w	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e260:	4a67      	ldr	r2, [pc, #412]	@ (800e400 <HAL_TIM_ConfigClockSource+0x21c>)
 800e262:	4293      	cmp	r3, r2
 800e264:	f200 80b6 	bhi.w	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e268:	4a66      	ldr	r2, [pc, #408]	@ (800e404 <HAL_TIM_ConfigClockSource+0x220>)
 800e26a:	4293      	cmp	r3, r2
 800e26c:	f000 80a9 	beq.w	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e270:	4a64      	ldr	r2, [pc, #400]	@ (800e404 <HAL_TIM_ConfigClockSource+0x220>)
 800e272:	4293      	cmp	r3, r2
 800e274:	f200 80ae 	bhi.w	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e278:	4a63      	ldr	r2, [pc, #396]	@ (800e408 <HAL_TIM_ConfigClockSource+0x224>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	f000 80a1 	beq.w	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e280:	4a61      	ldr	r2, [pc, #388]	@ (800e408 <HAL_TIM_ConfigClockSource+0x224>)
 800e282:	4293      	cmp	r3, r2
 800e284:	f200 80a6 	bhi.w	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e288:	4a60      	ldr	r2, [pc, #384]	@ (800e40c <HAL_TIM_ConfigClockSource+0x228>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	f000 8099 	beq.w	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e290:	4a5e      	ldr	r2, [pc, #376]	@ (800e40c <HAL_TIM_ConfigClockSource+0x228>)
 800e292:	4293      	cmp	r3, r2
 800e294:	f200 809e 	bhi.w	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e298:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e29c:	f000 8091 	beq.w	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e2a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e2a4:	f200 8096 	bhi.w	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e2ac:	f000 8089 	beq.w	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e2b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e2b4:	f200 808e 	bhi.w	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2bc:	d03e      	beq.n	800e33c <HAL_TIM_ConfigClockSource+0x158>
 800e2be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e2c2:	f200 8087 	bhi.w	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e2ca:	f000 8086 	beq.w	800e3da <HAL_TIM_ConfigClockSource+0x1f6>
 800e2ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e2d2:	d87f      	bhi.n	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2d4:	2b70      	cmp	r3, #112	@ 0x70
 800e2d6:	d01a      	beq.n	800e30e <HAL_TIM_ConfigClockSource+0x12a>
 800e2d8:	2b70      	cmp	r3, #112	@ 0x70
 800e2da:	d87b      	bhi.n	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2dc:	2b60      	cmp	r3, #96	@ 0x60
 800e2de:	d050      	beq.n	800e382 <HAL_TIM_ConfigClockSource+0x19e>
 800e2e0:	2b60      	cmp	r3, #96	@ 0x60
 800e2e2:	d877      	bhi.n	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2e4:	2b50      	cmp	r3, #80	@ 0x50
 800e2e6:	d03c      	beq.n	800e362 <HAL_TIM_ConfigClockSource+0x17e>
 800e2e8:	2b50      	cmp	r3, #80	@ 0x50
 800e2ea:	d873      	bhi.n	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2ec:	2b40      	cmp	r3, #64	@ 0x40
 800e2ee:	d058      	beq.n	800e3a2 <HAL_TIM_ConfigClockSource+0x1be>
 800e2f0:	2b40      	cmp	r3, #64	@ 0x40
 800e2f2:	d86f      	bhi.n	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2f4:	2b30      	cmp	r3, #48	@ 0x30
 800e2f6:	d064      	beq.n	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e2f8:	2b30      	cmp	r3, #48	@ 0x30
 800e2fa:	d86b      	bhi.n	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e2fc:	2b20      	cmp	r3, #32
 800e2fe:	d060      	beq.n	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e300:	2b20      	cmp	r3, #32
 800e302:	d867      	bhi.n	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
 800e304:	2b00      	cmp	r3, #0
 800e306:	d05c      	beq.n	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e308:	2b10      	cmp	r3, #16
 800e30a:	d05a      	beq.n	800e3c2 <HAL_TIM_ConfigClockSource+0x1de>
 800e30c:	e062      	b.n	800e3d4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e31e:	f000 fe8b 	bl	800f038 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	689b      	ldr	r3, [r3, #8]
 800e328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	609a      	str	r2, [r3, #8]
      break;
 800e33a:	e04f      	b.n	800e3dc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e34c:	f000 fe74 	bl	800f038 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	689a      	ldr	r2, [r3, #8]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e35e:	609a      	str	r2, [r3, #8]
      break;
 800e360:	e03c      	b.n	800e3dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e36e:	461a      	mov	r2, r3
 800e370:	f000 fde6 	bl	800ef40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	2150      	movs	r1, #80	@ 0x50
 800e37a:	4618      	mov	r0, r3
 800e37c:	f000 fe3f 	bl	800effe <TIM_ITRx_SetConfig>
      break;
 800e380:	e02c      	b.n	800e3dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e38e:	461a      	mov	r2, r3
 800e390:	f000 fe05 	bl	800ef9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	2160      	movs	r1, #96	@ 0x60
 800e39a:	4618      	mov	r0, r3
 800e39c:	f000 fe2f 	bl	800effe <TIM_ITRx_SetConfig>
      break;
 800e3a0:	e01c      	b.n	800e3dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e3ae:	461a      	mov	r2, r3
 800e3b0:	f000 fdc6 	bl	800ef40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2140      	movs	r1, #64	@ 0x40
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f000 fe1f 	bl	800effe <TIM_ITRx_SetConfig>
      break;
 800e3c0:	e00c      	b.n	800e3dc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681a      	ldr	r2, [r3, #0]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	4610      	mov	r0, r2
 800e3ce:	f000 fe16 	bl	800effe <TIM_ITRx_SetConfig>
      break;
 800e3d2:	e003      	b.n	800e3dc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	73fb      	strb	r3, [r7, #15]
      break;
 800e3d8:	e000      	b.n	800e3dc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800e3da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e3ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3710      	adds	r7, #16
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	00100070 	.word	0x00100070
 800e3fc:	00100060 	.word	0x00100060
 800e400:	00100050 	.word	0x00100050
 800e404:	00100040 	.word	0x00100040
 800e408:	00100030 	.word	0x00100030
 800e40c:	00100020 	.word	0x00100020

0800e410 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800e418:	bf00      	nop
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e42c:	bf00      	nop
 800e42e:	370c      	adds	r7, #12
 800e430:	46bd      	mov	sp, r7
 800e432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e436:	4770      	bx	lr

0800e438 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e438:	b480      	push	{r7}
 800e43a:	b083      	sub	sp, #12
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e440:	bf00      	nop
 800e442:	370c      	adds	r7, #12
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e44c:	b480      	push	{r7}
 800e44e:	b083      	sub	sp, #12
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800e454:	bf00      	nop
 800e456:	370c      	adds	r7, #12
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr

0800e460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e460:	b480      	push	{r7}
 800e462:	b083      	sub	sp, #12
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e468:	bf00      	nop
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr

0800e488 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e490:	bf00      	nop
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr

0800e49c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800e4a4:	bf00      	nop
 800e4a6:	370c      	adds	r7, #12
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr

0800e4b0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800e4b0:	b480      	push	{r7}
 800e4b2:	b083      	sub	sp, #12
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800e4b8:	bf00      	nop
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr

0800e4c4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b087      	sub	sp, #28
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	607a      	str	r2, [r7, #4]
 800e4d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d101      	bne.n	800e4e0 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e14a      	b.n	800e776 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4e6:	b2db      	uxtb	r3, r3
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	f040 80dd 	bne.w	800e6a8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800e4ee:	7afb      	ldrb	r3, [r7, #11]
 800e4f0:	2b1f      	cmp	r3, #31
 800e4f2:	f200 80d6 	bhi.w	800e6a2 <HAL_TIM_RegisterCallback+0x1de>
 800e4f6:	a201      	add	r2, pc, #4	@ (adr r2, 800e4fc <HAL_TIM_RegisterCallback+0x38>)
 800e4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fc:	0800e57d 	.word	0x0800e57d
 800e500:	0800e585 	.word	0x0800e585
 800e504:	0800e58d 	.word	0x0800e58d
 800e508:	0800e595 	.word	0x0800e595
 800e50c:	0800e59d 	.word	0x0800e59d
 800e510:	0800e5a5 	.word	0x0800e5a5
 800e514:	0800e5ad 	.word	0x0800e5ad
 800e518:	0800e5b5 	.word	0x0800e5b5
 800e51c:	0800e5bd 	.word	0x0800e5bd
 800e520:	0800e5c5 	.word	0x0800e5c5
 800e524:	0800e5cd 	.word	0x0800e5cd
 800e528:	0800e5d5 	.word	0x0800e5d5
 800e52c:	0800e5dd 	.word	0x0800e5dd
 800e530:	0800e5e5 	.word	0x0800e5e5
 800e534:	0800e5ef 	.word	0x0800e5ef
 800e538:	0800e5f9 	.word	0x0800e5f9
 800e53c:	0800e603 	.word	0x0800e603
 800e540:	0800e60d 	.word	0x0800e60d
 800e544:	0800e617 	.word	0x0800e617
 800e548:	0800e621 	.word	0x0800e621
 800e54c:	0800e62b 	.word	0x0800e62b
 800e550:	0800e635 	.word	0x0800e635
 800e554:	0800e63f 	.word	0x0800e63f
 800e558:	0800e649 	.word	0x0800e649
 800e55c:	0800e653 	.word	0x0800e653
 800e560:	0800e65d 	.word	0x0800e65d
 800e564:	0800e667 	.word	0x0800e667
 800e568:	0800e671 	.word	0x0800e671
 800e56c:	0800e67b 	.word	0x0800e67b
 800e570:	0800e685 	.word	0x0800e685
 800e574:	0800e68f 	.word	0x0800e68f
 800e578:	0800e699 	.word	0x0800e699
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	687a      	ldr	r2, [r7, #4]
 800e580:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800e582:	e0f7      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800e58a:	e0f3      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	687a      	ldr	r2, [r7, #4]
 800e590:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800e592:	e0ef      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800e59a:	e0eb      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	687a      	ldr	r2, [r7, #4]
 800e5a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800e5a2:	e0e7      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800e5aa:	e0e3      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800e5b2:	e0df      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800e5ba:	e0db      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800e5c2:	e0d7      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800e5ca:	e0d3      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800e5d2:	e0cf      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800e5da:	e0cb      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800e5e2:	e0c7      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800e5ec:	e0c2      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	687a      	ldr	r2, [r7, #4]
 800e5f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800e5f6:	e0bd      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800e600:	e0b8      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800e60a:	e0b3      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	687a      	ldr	r2, [r7, #4]
 800e610:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800e614:	e0ae      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800e61e:	e0a9      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800e628:	e0a4      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	687a      	ldr	r2, [r7, #4]
 800e62e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800e632:	e09f      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800e63c:	e09a      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	687a      	ldr	r2, [r7, #4]
 800e642:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800e646:	e095      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800e650:	e090      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800e65a:	e08b      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800e664:	e086      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800e66e:	e081      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	687a      	ldr	r2, [r7, #4]
 800e674:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800e678:	e07c      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	687a      	ldr	r2, [r7, #4]
 800e67e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800e682:	e077      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	687a      	ldr	r2, [r7, #4]
 800e688:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800e68c:	e072      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	687a      	ldr	r2, [r7, #4]
 800e692:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800e696:	e06d      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	687a      	ldr	r2, [r7, #4]
 800e69c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800e6a0:	e068      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	75fb      	strb	r3, [r7, #23]
        break;
 800e6a6:	e065      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d15d      	bne.n	800e770 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800e6b4:	7afb      	ldrb	r3, [r7, #11]
 800e6b6:	2b0d      	cmp	r3, #13
 800e6b8:	d857      	bhi.n	800e76a <HAL_TIM_RegisterCallback+0x2a6>
 800e6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800e6c0 <HAL_TIM_RegisterCallback+0x1fc>)
 800e6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c0:	0800e6f9 	.word	0x0800e6f9
 800e6c4:	0800e701 	.word	0x0800e701
 800e6c8:	0800e709 	.word	0x0800e709
 800e6cc:	0800e711 	.word	0x0800e711
 800e6d0:	0800e719 	.word	0x0800e719
 800e6d4:	0800e721 	.word	0x0800e721
 800e6d8:	0800e729 	.word	0x0800e729
 800e6dc:	0800e731 	.word	0x0800e731
 800e6e0:	0800e739 	.word	0x0800e739
 800e6e4:	0800e741 	.word	0x0800e741
 800e6e8:	0800e749 	.word	0x0800e749
 800e6ec:	0800e751 	.word	0x0800e751
 800e6f0:	0800e759 	.word	0x0800e759
 800e6f4:	0800e761 	.word	0x0800e761
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800e6fe:	e039      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	687a      	ldr	r2, [r7, #4]
 800e704:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800e706:	e035      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800e70e:	e031      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	687a      	ldr	r2, [r7, #4]
 800e714:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800e716:	e02d      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800e71e:	e029      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800e726:	e025      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	687a      	ldr	r2, [r7, #4]
 800e72c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800e72e:	e021      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800e736:	e01d      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	687a      	ldr	r2, [r7, #4]
 800e73c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800e73e:	e019      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	687a      	ldr	r2, [r7, #4]
 800e744:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800e746:	e015      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800e74e:	e011      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800e756:	e00d      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	687a      	ldr	r2, [r7, #4]
 800e75c:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800e75e:	e009      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800e768:	e004      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	75fb      	strb	r3, [r7, #23]
        break;
 800e76e:	e001      	b.n	800e774 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800e770:	2301      	movs	r3, #1
 800e772:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800e774:	7dfb      	ldrb	r3, [r7, #23]
}
 800e776:	4618      	mov	r0, r3
 800e778:	371c      	adds	r7, #28
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr
 800e782:	bf00      	nop

0800e784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e784:	b480      	push	{r7}
 800e786:	b085      	sub	sp, #20
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	4a4c      	ldr	r2, [pc, #304]	@ (800e8c8 <TIM_Base_SetConfig+0x144>)
 800e798:	4293      	cmp	r3, r2
 800e79a:	d017      	beq.n	800e7cc <TIM_Base_SetConfig+0x48>
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7a2:	d013      	beq.n	800e7cc <TIM_Base_SetConfig+0x48>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4a49      	ldr	r2, [pc, #292]	@ (800e8cc <TIM_Base_SetConfig+0x148>)
 800e7a8:	4293      	cmp	r3, r2
 800e7aa:	d00f      	beq.n	800e7cc <TIM_Base_SetConfig+0x48>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	4a48      	ldr	r2, [pc, #288]	@ (800e8d0 <TIM_Base_SetConfig+0x14c>)
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	d00b      	beq.n	800e7cc <TIM_Base_SetConfig+0x48>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	4a47      	ldr	r2, [pc, #284]	@ (800e8d4 <TIM_Base_SetConfig+0x150>)
 800e7b8:	4293      	cmp	r3, r2
 800e7ba:	d007      	beq.n	800e7cc <TIM_Base_SetConfig+0x48>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	4a46      	ldr	r2, [pc, #280]	@ (800e8d8 <TIM_Base_SetConfig+0x154>)
 800e7c0:	4293      	cmp	r3, r2
 800e7c2:	d003      	beq.n	800e7cc <TIM_Base_SetConfig+0x48>
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	4a45      	ldr	r2, [pc, #276]	@ (800e8dc <TIM_Base_SetConfig+0x158>)
 800e7c8:	4293      	cmp	r3, r2
 800e7ca:	d108      	bne.n	800e7de <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	4313      	orrs	r3, r2
 800e7dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a39      	ldr	r2, [pc, #228]	@ (800e8c8 <TIM_Base_SetConfig+0x144>)
 800e7e2:	4293      	cmp	r3, r2
 800e7e4:	d023      	beq.n	800e82e <TIM_Base_SetConfig+0xaa>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e7ec:	d01f      	beq.n	800e82e <TIM_Base_SetConfig+0xaa>
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	4a36      	ldr	r2, [pc, #216]	@ (800e8cc <TIM_Base_SetConfig+0x148>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d01b      	beq.n	800e82e <TIM_Base_SetConfig+0xaa>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	4a35      	ldr	r2, [pc, #212]	@ (800e8d0 <TIM_Base_SetConfig+0x14c>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d017      	beq.n	800e82e <TIM_Base_SetConfig+0xaa>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	4a34      	ldr	r2, [pc, #208]	@ (800e8d4 <TIM_Base_SetConfig+0x150>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d013      	beq.n	800e82e <TIM_Base_SetConfig+0xaa>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	4a33      	ldr	r2, [pc, #204]	@ (800e8d8 <TIM_Base_SetConfig+0x154>)
 800e80a:	4293      	cmp	r3, r2
 800e80c:	d00f      	beq.n	800e82e <TIM_Base_SetConfig+0xaa>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	4a33      	ldr	r2, [pc, #204]	@ (800e8e0 <TIM_Base_SetConfig+0x15c>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d00b      	beq.n	800e82e <TIM_Base_SetConfig+0xaa>
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	4a32      	ldr	r2, [pc, #200]	@ (800e8e4 <TIM_Base_SetConfig+0x160>)
 800e81a:	4293      	cmp	r3, r2
 800e81c:	d007      	beq.n	800e82e <TIM_Base_SetConfig+0xaa>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4a31      	ldr	r2, [pc, #196]	@ (800e8e8 <TIM_Base_SetConfig+0x164>)
 800e822:	4293      	cmp	r3, r2
 800e824:	d003      	beq.n	800e82e <TIM_Base_SetConfig+0xaa>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4a2c      	ldr	r2, [pc, #176]	@ (800e8dc <TIM_Base_SetConfig+0x158>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d108      	bne.n	800e840 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e834:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	68db      	ldr	r3, [r3, #12]
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	4313      	orrs	r3, r2
 800e83e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	695b      	ldr	r3, [r3, #20]
 800e84a:	4313      	orrs	r3, r2
 800e84c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	68fa      	ldr	r2, [r7, #12]
 800e852:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	689a      	ldr	r2, [r3, #8]
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a18      	ldr	r2, [pc, #96]	@ (800e8c8 <TIM_Base_SetConfig+0x144>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d013      	beq.n	800e894 <TIM_Base_SetConfig+0x110>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a1a      	ldr	r2, [pc, #104]	@ (800e8d8 <TIM_Base_SetConfig+0x154>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d00f      	beq.n	800e894 <TIM_Base_SetConfig+0x110>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4a1a      	ldr	r2, [pc, #104]	@ (800e8e0 <TIM_Base_SetConfig+0x15c>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d00b      	beq.n	800e894 <TIM_Base_SetConfig+0x110>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	4a19      	ldr	r2, [pc, #100]	@ (800e8e4 <TIM_Base_SetConfig+0x160>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d007      	beq.n	800e894 <TIM_Base_SetConfig+0x110>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	4a18      	ldr	r2, [pc, #96]	@ (800e8e8 <TIM_Base_SetConfig+0x164>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d003      	beq.n	800e894 <TIM_Base_SetConfig+0x110>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	4a13      	ldr	r2, [pc, #76]	@ (800e8dc <TIM_Base_SetConfig+0x158>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d103      	bne.n	800e89c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	691a      	ldr	r2, [r3, #16]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2201      	movs	r2, #1
 800e8a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	691b      	ldr	r3, [r3, #16]
 800e8a6:	f003 0301 	and.w	r3, r3, #1
 800e8aa:	2b01      	cmp	r3, #1
 800e8ac:	d105      	bne.n	800e8ba <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	691b      	ldr	r3, [r3, #16]
 800e8b2:	f023 0201 	bic.w	r2, r3, #1
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	611a      	str	r2, [r3, #16]
  }
}
 800e8ba:	bf00      	nop
 800e8bc:	3714      	adds	r7, #20
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	40012c00 	.word	0x40012c00
 800e8cc:	40000400 	.word	0x40000400
 800e8d0:	40000800 	.word	0x40000800
 800e8d4:	40000c00 	.word	0x40000c00
 800e8d8:	40013400 	.word	0x40013400
 800e8dc:	40015000 	.word	0x40015000
 800e8e0:	40014000 	.word	0x40014000
 800e8e4:	40014400 	.word	0x40014400
 800e8e8:	40014800 	.word	0x40014800

0800e8ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b087      	sub	sp, #28
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6a1b      	ldr	r3, [r3, #32]
 800e8fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6a1b      	ldr	r3, [r3, #32]
 800e900:	f023 0201 	bic.w	r2, r3, #1
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	699b      	ldr	r3, [r3, #24]
 800e912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e91a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e91e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f023 0303 	bic.w	r3, r3, #3
 800e926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e928:	683b      	ldr	r3, [r7, #0]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	68fa      	ldr	r2, [r7, #12]
 800e92e:	4313      	orrs	r3, r2
 800e930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	f023 0302 	bic.w	r3, r3, #2
 800e938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	689b      	ldr	r3, [r3, #8]
 800e93e:	697a      	ldr	r2, [r7, #20]
 800e940:	4313      	orrs	r3, r2
 800e942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	4a30      	ldr	r2, [pc, #192]	@ (800ea08 <TIM_OC1_SetConfig+0x11c>)
 800e948:	4293      	cmp	r3, r2
 800e94a:	d013      	beq.n	800e974 <TIM_OC1_SetConfig+0x88>
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	4a2f      	ldr	r2, [pc, #188]	@ (800ea0c <TIM_OC1_SetConfig+0x120>)
 800e950:	4293      	cmp	r3, r2
 800e952:	d00f      	beq.n	800e974 <TIM_OC1_SetConfig+0x88>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	4a2e      	ldr	r2, [pc, #184]	@ (800ea10 <TIM_OC1_SetConfig+0x124>)
 800e958:	4293      	cmp	r3, r2
 800e95a:	d00b      	beq.n	800e974 <TIM_OC1_SetConfig+0x88>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	4a2d      	ldr	r2, [pc, #180]	@ (800ea14 <TIM_OC1_SetConfig+0x128>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d007      	beq.n	800e974 <TIM_OC1_SetConfig+0x88>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4a2c      	ldr	r2, [pc, #176]	@ (800ea18 <TIM_OC1_SetConfig+0x12c>)
 800e968:	4293      	cmp	r3, r2
 800e96a:	d003      	beq.n	800e974 <TIM_OC1_SetConfig+0x88>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	4a2b      	ldr	r2, [pc, #172]	@ (800ea1c <TIM_OC1_SetConfig+0x130>)
 800e970:	4293      	cmp	r3, r2
 800e972:	d10c      	bne.n	800e98e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	f023 0308 	bic.w	r3, r3, #8
 800e97a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	68db      	ldr	r3, [r3, #12]
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	4313      	orrs	r3, r2
 800e984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	f023 0304 	bic.w	r3, r3, #4
 800e98c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4a1d      	ldr	r2, [pc, #116]	@ (800ea08 <TIM_OC1_SetConfig+0x11c>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d013      	beq.n	800e9be <TIM_OC1_SetConfig+0xd2>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4a1c      	ldr	r2, [pc, #112]	@ (800ea0c <TIM_OC1_SetConfig+0x120>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d00f      	beq.n	800e9be <TIM_OC1_SetConfig+0xd2>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4a1b      	ldr	r2, [pc, #108]	@ (800ea10 <TIM_OC1_SetConfig+0x124>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d00b      	beq.n	800e9be <TIM_OC1_SetConfig+0xd2>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4a1a      	ldr	r2, [pc, #104]	@ (800ea14 <TIM_OC1_SetConfig+0x128>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d007      	beq.n	800e9be <TIM_OC1_SetConfig+0xd2>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4a19      	ldr	r2, [pc, #100]	@ (800ea18 <TIM_OC1_SetConfig+0x12c>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d003      	beq.n	800e9be <TIM_OC1_SetConfig+0xd2>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4a18      	ldr	r2, [pc, #96]	@ (800ea1c <TIM_OC1_SetConfig+0x130>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d111      	bne.n	800e9e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e9c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800e9cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	695b      	ldr	r3, [r3, #20]
 800e9d2:	693a      	ldr	r2, [r7, #16]
 800e9d4:	4313      	orrs	r3, r2
 800e9d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	699b      	ldr	r3, [r3, #24]
 800e9dc:	693a      	ldr	r2, [r7, #16]
 800e9de:	4313      	orrs	r3, r2
 800e9e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	693a      	ldr	r2, [r7, #16]
 800e9e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	68fa      	ldr	r2, [r7, #12]
 800e9ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	685a      	ldr	r2, [r3, #4]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	697a      	ldr	r2, [r7, #20]
 800e9fa:	621a      	str	r2, [r3, #32]
}
 800e9fc:	bf00      	nop
 800e9fe:	371c      	adds	r7, #28
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr
 800ea08:	40012c00 	.word	0x40012c00
 800ea0c:	40013400 	.word	0x40013400
 800ea10:	40014000 	.word	0x40014000
 800ea14:	40014400 	.word	0x40014400
 800ea18:	40014800 	.word	0x40014800
 800ea1c:	40015000 	.word	0x40015000

0800ea20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b087      	sub	sp, #28
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	6a1b      	ldr	r3, [r3, #32]
 800ea2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a1b      	ldr	r3, [r3, #32]
 800ea34:	f023 0210 	bic.w	r2, r3, #16
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	699b      	ldr	r3, [r3, #24]
 800ea46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ea4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ea5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ea5c:	683b      	ldr	r3, [r7, #0]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	021b      	lsls	r3, r3, #8
 800ea62:	68fa      	ldr	r2, [r7, #12]
 800ea64:	4313      	orrs	r3, r2
 800ea66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ea68:	697b      	ldr	r3, [r7, #20]
 800ea6a:	f023 0320 	bic.w	r3, r3, #32
 800ea6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	011b      	lsls	r3, r3, #4
 800ea76:	697a      	ldr	r2, [r7, #20]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a2c      	ldr	r2, [pc, #176]	@ (800eb30 <TIM_OC2_SetConfig+0x110>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d007      	beq.n	800ea94 <TIM_OC2_SetConfig+0x74>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4a2b      	ldr	r2, [pc, #172]	@ (800eb34 <TIM_OC2_SetConfig+0x114>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d003      	beq.n	800ea94 <TIM_OC2_SetConfig+0x74>
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	4a2a      	ldr	r2, [pc, #168]	@ (800eb38 <TIM_OC2_SetConfig+0x118>)
 800ea90:	4293      	cmp	r3, r2
 800ea92:	d10d      	bne.n	800eab0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ea94:	697b      	ldr	r3, [r7, #20]
 800ea96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ea9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	011b      	lsls	r3, r3, #4
 800eaa2:	697a      	ldr	r2, [r7, #20]
 800eaa4:	4313      	orrs	r3, r2
 800eaa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eaae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	4a1f      	ldr	r2, [pc, #124]	@ (800eb30 <TIM_OC2_SetConfig+0x110>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d013      	beq.n	800eae0 <TIM_OC2_SetConfig+0xc0>
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	4a1e      	ldr	r2, [pc, #120]	@ (800eb34 <TIM_OC2_SetConfig+0x114>)
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d00f      	beq.n	800eae0 <TIM_OC2_SetConfig+0xc0>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	4a1e      	ldr	r2, [pc, #120]	@ (800eb3c <TIM_OC2_SetConfig+0x11c>)
 800eac4:	4293      	cmp	r3, r2
 800eac6:	d00b      	beq.n	800eae0 <TIM_OC2_SetConfig+0xc0>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	4a1d      	ldr	r2, [pc, #116]	@ (800eb40 <TIM_OC2_SetConfig+0x120>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d007      	beq.n	800eae0 <TIM_OC2_SetConfig+0xc0>
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	4a1c      	ldr	r2, [pc, #112]	@ (800eb44 <TIM_OC2_SetConfig+0x124>)
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d003      	beq.n	800eae0 <TIM_OC2_SetConfig+0xc0>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	4a17      	ldr	r2, [pc, #92]	@ (800eb38 <TIM_OC2_SetConfig+0x118>)
 800eadc:	4293      	cmp	r3, r2
 800eade:	d113      	bne.n	800eb08 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eaee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	695b      	ldr	r3, [r3, #20]
 800eaf4:	009b      	lsls	r3, r3, #2
 800eaf6:	693a      	ldr	r2, [r7, #16]
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	699b      	ldr	r3, [r3, #24]
 800eb00:	009b      	lsls	r3, r3, #2
 800eb02:	693a      	ldr	r2, [r7, #16]
 800eb04:	4313      	orrs	r3, r2
 800eb06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	693a      	ldr	r2, [r7, #16]
 800eb0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	68fa      	ldr	r2, [r7, #12]
 800eb12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	697a      	ldr	r2, [r7, #20]
 800eb20:	621a      	str	r2, [r3, #32]
}
 800eb22:	bf00      	nop
 800eb24:	371c      	adds	r7, #28
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	40012c00 	.word	0x40012c00
 800eb34:	40013400 	.word	0x40013400
 800eb38:	40015000 	.word	0x40015000
 800eb3c:	40014000 	.word	0x40014000
 800eb40:	40014400 	.word	0x40014400
 800eb44:	40014800 	.word	0x40014800

0800eb48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b087      	sub	sp, #28
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
 800eb50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6a1b      	ldr	r3, [r3, #32]
 800eb56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6a1b      	ldr	r3, [r3, #32]
 800eb5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	685b      	ldr	r3, [r3, #4]
 800eb68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	69db      	ldr	r3, [r3, #28]
 800eb6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800eb76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f023 0303 	bic.w	r3, r3, #3
 800eb82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	68fa      	ldr	r2, [r7, #12]
 800eb8a:	4313      	orrs	r3, r2
 800eb8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eb94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	021b      	lsls	r3, r3, #8
 800eb9c:	697a      	ldr	r2, [r7, #20]
 800eb9e:	4313      	orrs	r3, r2
 800eba0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a2b      	ldr	r2, [pc, #172]	@ (800ec54 <TIM_OC3_SetConfig+0x10c>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d007      	beq.n	800ebba <TIM_OC3_SetConfig+0x72>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a2a      	ldr	r2, [pc, #168]	@ (800ec58 <TIM_OC3_SetConfig+0x110>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d003      	beq.n	800ebba <TIM_OC3_SetConfig+0x72>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4a29      	ldr	r2, [pc, #164]	@ (800ec5c <TIM_OC3_SetConfig+0x114>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d10d      	bne.n	800ebd6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ebc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	021b      	lsls	r3, r3, #8
 800ebc8:	697a      	ldr	r2, [r7, #20]
 800ebca:	4313      	orrs	r3, r2
 800ebcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ebce:	697b      	ldr	r3, [r7, #20]
 800ebd0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ebd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	4a1e      	ldr	r2, [pc, #120]	@ (800ec54 <TIM_OC3_SetConfig+0x10c>)
 800ebda:	4293      	cmp	r3, r2
 800ebdc:	d013      	beq.n	800ec06 <TIM_OC3_SetConfig+0xbe>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	4a1d      	ldr	r2, [pc, #116]	@ (800ec58 <TIM_OC3_SetConfig+0x110>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d00f      	beq.n	800ec06 <TIM_OC3_SetConfig+0xbe>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	4a1d      	ldr	r2, [pc, #116]	@ (800ec60 <TIM_OC3_SetConfig+0x118>)
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d00b      	beq.n	800ec06 <TIM_OC3_SetConfig+0xbe>
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	4a1c      	ldr	r2, [pc, #112]	@ (800ec64 <TIM_OC3_SetConfig+0x11c>)
 800ebf2:	4293      	cmp	r3, r2
 800ebf4:	d007      	beq.n	800ec06 <TIM_OC3_SetConfig+0xbe>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	4a1b      	ldr	r2, [pc, #108]	@ (800ec68 <TIM_OC3_SetConfig+0x120>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d003      	beq.n	800ec06 <TIM_OC3_SetConfig+0xbe>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	4a16      	ldr	r2, [pc, #88]	@ (800ec5c <TIM_OC3_SetConfig+0x114>)
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d113      	bne.n	800ec2e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec06:	693b      	ldr	r3, [r7, #16]
 800ec08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	695b      	ldr	r3, [r3, #20]
 800ec1a:	011b      	lsls	r3, r3, #4
 800ec1c:	693a      	ldr	r2, [r7, #16]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	699b      	ldr	r3, [r3, #24]
 800ec26:	011b      	lsls	r3, r3, #4
 800ec28:	693a      	ldr	r2, [r7, #16]
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	693a      	ldr	r2, [r7, #16]
 800ec32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	685a      	ldr	r2, [r3, #4]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	697a      	ldr	r2, [r7, #20]
 800ec46:	621a      	str	r2, [r3, #32]
}
 800ec48:	bf00      	nop
 800ec4a:	371c      	adds	r7, #28
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec52:	4770      	bx	lr
 800ec54:	40012c00 	.word	0x40012c00
 800ec58:	40013400 	.word	0x40013400
 800ec5c:	40015000 	.word	0x40015000
 800ec60:	40014000 	.word	0x40014000
 800ec64:	40014400 	.word	0x40014400
 800ec68:	40014800 	.word	0x40014800

0800ec6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b087      	sub	sp, #28
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	6a1b      	ldr	r3, [r3, #32]
 800ec7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6a1b      	ldr	r3, [r3, #32]
 800ec80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	69db      	ldr	r3, [r3, #28]
 800ec92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ec9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ec9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	021b      	lsls	r3, r3, #8
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	4313      	orrs	r3, r2
 800ecb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ecba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	031b      	lsls	r3, r3, #12
 800ecc2:	697a      	ldr	r2, [r7, #20]
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4a2c      	ldr	r2, [pc, #176]	@ (800ed7c <TIM_OC4_SetConfig+0x110>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d007      	beq.n	800ece0 <TIM_OC4_SetConfig+0x74>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	4a2b      	ldr	r2, [pc, #172]	@ (800ed80 <TIM_OC4_SetConfig+0x114>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d003      	beq.n	800ece0 <TIM_OC4_SetConfig+0x74>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	4a2a      	ldr	r2, [pc, #168]	@ (800ed84 <TIM_OC4_SetConfig+0x118>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d10d      	bne.n	800ecfc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ece6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	031b      	lsls	r3, r3, #12
 800ecee:	697a      	ldr	r2, [r7, #20]
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ecfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4a1f      	ldr	r2, [pc, #124]	@ (800ed7c <TIM_OC4_SetConfig+0x110>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d013      	beq.n	800ed2c <TIM_OC4_SetConfig+0xc0>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4a1e      	ldr	r2, [pc, #120]	@ (800ed80 <TIM_OC4_SetConfig+0x114>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d00f      	beq.n	800ed2c <TIM_OC4_SetConfig+0xc0>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	4a1e      	ldr	r2, [pc, #120]	@ (800ed88 <TIM_OC4_SetConfig+0x11c>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d00b      	beq.n	800ed2c <TIM_OC4_SetConfig+0xc0>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	4a1d      	ldr	r2, [pc, #116]	@ (800ed8c <TIM_OC4_SetConfig+0x120>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d007      	beq.n	800ed2c <TIM_OC4_SetConfig+0xc0>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	4a1c      	ldr	r2, [pc, #112]	@ (800ed90 <TIM_OC4_SetConfig+0x124>)
 800ed20:	4293      	cmp	r3, r2
 800ed22:	d003      	beq.n	800ed2c <TIM_OC4_SetConfig+0xc0>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	4a17      	ldr	r2, [pc, #92]	@ (800ed84 <TIM_OC4_SetConfig+0x118>)
 800ed28:	4293      	cmp	r3, r2
 800ed2a:	d113      	bne.n	800ed54 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ed3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed3c:	683b      	ldr	r3, [r7, #0]
 800ed3e:	695b      	ldr	r3, [r3, #20]
 800ed40:	019b      	lsls	r3, r3, #6
 800ed42:	693a      	ldr	r2, [r7, #16]
 800ed44:	4313      	orrs	r3, r2
 800ed46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	699b      	ldr	r3, [r3, #24]
 800ed4c:	019b      	lsls	r3, r3, #6
 800ed4e:	693a      	ldr	r2, [r7, #16]
 800ed50:	4313      	orrs	r3, r2
 800ed52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	693a      	ldr	r2, [r7, #16]
 800ed58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	68fa      	ldr	r2, [r7, #12]
 800ed5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	685a      	ldr	r2, [r3, #4]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	697a      	ldr	r2, [r7, #20]
 800ed6c:	621a      	str	r2, [r3, #32]
}
 800ed6e:	bf00      	nop
 800ed70:	371c      	adds	r7, #28
 800ed72:	46bd      	mov	sp, r7
 800ed74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed78:	4770      	bx	lr
 800ed7a:	bf00      	nop
 800ed7c:	40012c00 	.word	0x40012c00
 800ed80:	40013400 	.word	0x40013400
 800ed84:	40015000 	.word	0x40015000
 800ed88:	40014000 	.word	0x40014000
 800ed8c:	40014400 	.word	0x40014400
 800ed90:	40014800 	.word	0x40014800

0800ed94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b087      	sub	sp, #28
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6a1b      	ldr	r3, [r3, #32]
 800eda2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	6a1b      	ldr	r3, [r3, #32]
 800eda8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800edc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800edc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	68fa      	ldr	r2, [r7, #12]
 800edce:	4313      	orrs	r3, r2
 800edd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800edd2:	693b      	ldr	r3, [r7, #16]
 800edd4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800edd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	689b      	ldr	r3, [r3, #8]
 800edde:	041b      	lsls	r3, r3, #16
 800ede0:	693a      	ldr	r2, [r7, #16]
 800ede2:	4313      	orrs	r3, r2
 800ede4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	4a19      	ldr	r2, [pc, #100]	@ (800ee50 <TIM_OC5_SetConfig+0xbc>)
 800edea:	4293      	cmp	r3, r2
 800edec:	d013      	beq.n	800ee16 <TIM_OC5_SetConfig+0x82>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	4a18      	ldr	r2, [pc, #96]	@ (800ee54 <TIM_OC5_SetConfig+0xc0>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	d00f      	beq.n	800ee16 <TIM_OC5_SetConfig+0x82>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	4a17      	ldr	r2, [pc, #92]	@ (800ee58 <TIM_OC5_SetConfig+0xc4>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	d00b      	beq.n	800ee16 <TIM_OC5_SetConfig+0x82>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	4a16      	ldr	r2, [pc, #88]	@ (800ee5c <TIM_OC5_SetConfig+0xc8>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d007      	beq.n	800ee16 <TIM_OC5_SetConfig+0x82>
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4a15      	ldr	r2, [pc, #84]	@ (800ee60 <TIM_OC5_SetConfig+0xcc>)
 800ee0a:	4293      	cmp	r3, r2
 800ee0c:	d003      	beq.n	800ee16 <TIM_OC5_SetConfig+0x82>
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	4a14      	ldr	r2, [pc, #80]	@ (800ee64 <TIM_OC5_SetConfig+0xd0>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d109      	bne.n	800ee2a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ee1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ee1e:	683b      	ldr	r3, [r7, #0]
 800ee20:	695b      	ldr	r3, [r3, #20]
 800ee22:	021b      	lsls	r3, r3, #8
 800ee24:	697a      	ldr	r2, [r7, #20]
 800ee26:	4313      	orrs	r3, r2
 800ee28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	697a      	ldr	r2, [r7, #20]
 800ee2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	68fa      	ldr	r2, [r7, #12]
 800ee34:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	685a      	ldr	r2, [r3, #4]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	693a      	ldr	r2, [r7, #16]
 800ee42:	621a      	str	r2, [r3, #32]
}
 800ee44:	bf00      	nop
 800ee46:	371c      	adds	r7, #28
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4e:	4770      	bx	lr
 800ee50:	40012c00 	.word	0x40012c00
 800ee54:	40013400 	.word	0x40013400
 800ee58:	40014000 	.word	0x40014000
 800ee5c:	40014400 	.word	0x40014400
 800ee60:	40014800 	.word	0x40014800
 800ee64:	40015000 	.word	0x40015000

0800ee68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b087      	sub	sp, #28
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6a1b      	ldr	r3, [r3, #32]
 800ee76:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6a1b      	ldr	r3, [r3, #32]
 800ee7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ee96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	021b      	lsls	r3, r3, #8
 800eea2:	68fa      	ldr	r2, [r7, #12]
 800eea4:	4313      	orrs	r3, r2
 800eea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800eeae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	051b      	lsls	r3, r3, #20
 800eeb6:	693a      	ldr	r2, [r7, #16]
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	4a1a      	ldr	r2, [pc, #104]	@ (800ef28 <TIM_OC6_SetConfig+0xc0>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d013      	beq.n	800eeec <TIM_OC6_SetConfig+0x84>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	4a19      	ldr	r2, [pc, #100]	@ (800ef2c <TIM_OC6_SetConfig+0xc4>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d00f      	beq.n	800eeec <TIM_OC6_SetConfig+0x84>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	4a18      	ldr	r2, [pc, #96]	@ (800ef30 <TIM_OC6_SetConfig+0xc8>)
 800eed0:	4293      	cmp	r3, r2
 800eed2:	d00b      	beq.n	800eeec <TIM_OC6_SetConfig+0x84>
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	4a17      	ldr	r2, [pc, #92]	@ (800ef34 <TIM_OC6_SetConfig+0xcc>)
 800eed8:	4293      	cmp	r3, r2
 800eeda:	d007      	beq.n	800eeec <TIM_OC6_SetConfig+0x84>
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	4a16      	ldr	r2, [pc, #88]	@ (800ef38 <TIM_OC6_SetConfig+0xd0>)
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d003      	beq.n	800eeec <TIM_OC6_SetConfig+0x84>
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	4a15      	ldr	r2, [pc, #84]	@ (800ef3c <TIM_OC6_SetConfig+0xd4>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d109      	bne.n	800ef00 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800eeec:	697b      	ldr	r3, [r7, #20]
 800eeee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800eef2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	695b      	ldr	r3, [r3, #20]
 800eef8:	029b      	lsls	r3, r3, #10
 800eefa:	697a      	ldr	r2, [r7, #20]
 800eefc:	4313      	orrs	r3, r2
 800eefe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	697a      	ldr	r2, [r7, #20]
 800ef04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	68fa      	ldr	r2, [r7, #12]
 800ef0a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	685a      	ldr	r2, [r3, #4]
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	693a      	ldr	r2, [r7, #16]
 800ef18:	621a      	str	r2, [r3, #32]
}
 800ef1a:	bf00      	nop
 800ef1c:	371c      	adds	r7, #28
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop
 800ef28:	40012c00 	.word	0x40012c00
 800ef2c:	40013400 	.word	0x40013400
 800ef30:	40014000 	.word	0x40014000
 800ef34:	40014400 	.word	0x40014400
 800ef38:	40014800 	.word	0x40014800
 800ef3c:	40015000 	.word	0x40015000

0800ef40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef40:	b480      	push	{r7}
 800ef42:	b087      	sub	sp, #28
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	60b9      	str	r1, [r7, #8]
 800ef4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	6a1b      	ldr	r3, [r3, #32]
 800ef50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6a1b      	ldr	r3, [r3, #32]
 800ef56:	f023 0201 	bic.w	r2, r3, #1
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	699b      	ldr	r3, [r3, #24]
 800ef62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ef64:	693b      	ldr	r3, [r7, #16]
 800ef66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ef6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	011b      	lsls	r3, r3, #4
 800ef70:	693a      	ldr	r2, [r7, #16]
 800ef72:	4313      	orrs	r3, r2
 800ef74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ef76:	697b      	ldr	r3, [r7, #20]
 800ef78:	f023 030a 	bic.w	r3, r3, #10
 800ef7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ef7e:	697a      	ldr	r2, [r7, #20]
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	4313      	orrs	r3, r2
 800ef84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	693a      	ldr	r2, [r7, #16]
 800ef8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	697a      	ldr	r2, [r7, #20]
 800ef90:	621a      	str	r2, [r3, #32]
}
 800ef92:	bf00      	nop
 800ef94:	371c      	adds	r7, #28
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr

0800ef9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ef9e:	b480      	push	{r7}
 800efa0:	b087      	sub	sp, #28
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	60f8      	str	r0, [r7, #12]
 800efa6:	60b9      	str	r1, [r7, #8]
 800efa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6a1b      	ldr	r3, [r3, #32]
 800efae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6a1b      	ldr	r3, [r3, #32]
 800efb4:	f023 0210 	bic.w	r2, r3, #16
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	699b      	ldr	r3, [r3, #24]
 800efc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800efc2:	693b      	ldr	r3, [r7, #16]
 800efc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800efc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	031b      	lsls	r3, r3, #12
 800efce:	693a      	ldr	r2, [r7, #16]
 800efd0:	4313      	orrs	r3, r2
 800efd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800efda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	011b      	lsls	r3, r3, #4
 800efe0:	697a      	ldr	r2, [r7, #20]
 800efe2:	4313      	orrs	r3, r2
 800efe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	693a      	ldr	r2, [r7, #16]
 800efea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	697a      	ldr	r2, [r7, #20]
 800eff0:	621a      	str	r2, [r3, #32]
}
 800eff2:	bf00      	nop
 800eff4:	371c      	adds	r7, #28
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr

0800effe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800effe:	b480      	push	{r7}
 800f000:	b085      	sub	sp, #20
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
 800f006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	689b      	ldr	r3, [r3, #8]
 800f00c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800f014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f018:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f01a:	683a      	ldr	r2, [r7, #0]
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	4313      	orrs	r3, r2
 800f020:	f043 0307 	orr.w	r3, r3, #7
 800f024:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	609a      	str	r2, [r3, #8]
}
 800f02c:	bf00      	nop
 800f02e:	3714      	adds	r7, #20
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr

0800f038 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f038:	b480      	push	{r7}
 800f03a:	b087      	sub	sp, #28
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	607a      	str	r2, [r7, #4]
 800f044:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	689b      	ldr	r3, [r3, #8]
 800f04a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f052:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	021a      	lsls	r2, r3, #8
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	431a      	orrs	r2, r3
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	4313      	orrs	r3, r2
 800f060:	697a      	ldr	r2, [r7, #20]
 800f062:	4313      	orrs	r3, r2
 800f064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	697a      	ldr	r2, [r7, #20]
 800f06a:	609a      	str	r2, [r3, #8]
}
 800f06c:	bf00      	nop
 800f06e:	371c      	adds	r7, #28
 800f070:	46bd      	mov	sp, r7
 800f072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f076:	4770      	bx	lr

0800f078 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f078:	b480      	push	{r7}
 800f07a:	b087      	sub	sp, #28
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	60f8      	str	r0, [r7, #12]
 800f080:	60b9      	str	r1, [r7, #8]
 800f082:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	f003 031f 	and.w	r3, r3, #31
 800f08a:	2201      	movs	r2, #1
 800f08c:	fa02 f303 	lsl.w	r3, r2, r3
 800f090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	6a1a      	ldr	r2, [r3, #32]
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	43db      	mvns	r3, r3
 800f09a:	401a      	ands	r2, r3
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	6a1a      	ldr	r2, [r3, #32]
 800f0a4:	68bb      	ldr	r3, [r7, #8]
 800f0a6:	f003 031f 	and.w	r3, r3, #31
 800f0aa:	6879      	ldr	r1, [r7, #4]
 800f0ac:	fa01 f303 	lsl.w	r3, r1, r3
 800f0b0:	431a      	orrs	r2, r3
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	621a      	str	r2, [r3, #32]
}
 800f0b6:	bf00      	nop
 800f0b8:	371c      	adds	r7, #28
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr
	...

0800f0c4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4a26      	ldr	r2, [pc, #152]	@ (800f168 <TIM_ResetCallback+0xa4>)
 800f0d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4a25      	ldr	r2, [pc, #148]	@ (800f16c <TIM_ResetCallback+0xa8>)
 800f0d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a24      	ldr	r2, [pc, #144]	@ (800f170 <TIM_ResetCallback+0xac>)
 800f0e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4a23      	ldr	r2, [pc, #140]	@ (800f174 <TIM_ResetCallback+0xb0>)
 800f0e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4a22      	ldr	r2, [pc, #136]	@ (800f178 <TIM_ResetCallback+0xb4>)
 800f0f0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	4a21      	ldr	r2, [pc, #132]	@ (800f17c <TIM_ResetCallback+0xb8>)
 800f0f8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4a20      	ldr	r2, [pc, #128]	@ (800f180 <TIM_ResetCallback+0xbc>)
 800f100:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	4a1f      	ldr	r2, [pc, #124]	@ (800f184 <TIM_ResetCallback+0xc0>)
 800f108:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	4a1e      	ldr	r2, [pc, #120]	@ (800f188 <TIM_ResetCallback+0xc4>)
 800f110:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	4a1d      	ldr	r2, [pc, #116]	@ (800f18c <TIM_ResetCallback+0xc8>)
 800f118:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	4a1c      	ldr	r2, [pc, #112]	@ (800f190 <TIM_ResetCallback+0xcc>)
 800f120:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	4a1b      	ldr	r2, [pc, #108]	@ (800f194 <TIM_ResetCallback+0xd0>)
 800f128:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	4a1a      	ldr	r2, [pc, #104]	@ (800f198 <TIM_ResetCallback+0xd4>)
 800f130:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	4a19      	ldr	r2, [pc, #100]	@ (800f19c <TIM_ResetCallback+0xd8>)
 800f138:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	4a18      	ldr	r2, [pc, #96]	@ (800f1a0 <TIM_ResetCallback+0xdc>)
 800f140:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	4a17      	ldr	r2, [pc, #92]	@ (800f1a4 <TIM_ResetCallback+0xe0>)
 800f148:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	4a16      	ldr	r2, [pc, #88]	@ (800f1a8 <TIM_ResetCallback+0xe4>)
 800f150:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a15      	ldr	r2, [pc, #84]	@ (800f1ac <TIM_ResetCallback+0xe8>)
 800f158:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800f15c:	bf00      	nop
 800f15e:	370c      	adds	r7, #12
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr
 800f168:	08007f49 	.word	0x08007f49
 800f16c:	0800e411 	.word	0x0800e411
 800f170:	0800e489 	.word	0x0800e489
 800f174:	0800e49d 	.word	0x0800e49d
 800f178:	0800e439 	.word	0x0800e439
 800f17c:	0800e44d 	.word	0x0800e44d
 800f180:	0800e425 	.word	0x0800e425
 800f184:	0800e461 	.word	0x0800e461
 800f188:	0800e475 	.word	0x0800e475
 800f18c:	0800e4b1 	.word	0x0800e4b1
 800f190:	0800f405 	.word	0x0800f405
 800f194:	0800f419 	.word	0x0800f419
 800f198:	0800f42d 	.word	0x0800f42d
 800f19c:	0800f441 	.word	0x0800f441
 800f1a0:	0800f455 	.word	0x0800f455
 800f1a4:	0800f469 	.word	0x0800f469
 800f1a8:	0800f47d 	.word	0x0800f47d
 800f1ac:	0800f491 	.word	0x0800f491

0800f1b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b085      	sub	sp, #20
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f1c0:	2b01      	cmp	r3, #1
 800f1c2:	d101      	bne.n	800f1c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f1c4:	2302      	movs	r3, #2
 800f1c6:	e074      	b.n	800f2b2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2202      	movs	r2, #2
 800f1d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a34      	ldr	r2, [pc, #208]	@ (800f2c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d009      	beq.n	800f206 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	4a33      	ldr	r2, [pc, #204]	@ (800f2c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	d004      	beq.n	800f206 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4a31      	ldr	r2, [pc, #196]	@ (800f2c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f202:	4293      	cmp	r3, r2
 800f204:	d108      	bne.n	800f218 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f20c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	68fa      	ldr	r2, [r7, #12]
 800f214:	4313      	orrs	r3, r2
 800f216:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800f21e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f222:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	68fa      	ldr	r2, [r7, #12]
 800f22a:	4313      	orrs	r3, r2
 800f22c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	4a21      	ldr	r2, [pc, #132]	@ (800f2c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d022      	beq.n	800f286 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f248:	d01d      	beq.n	800f286 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4a1f      	ldr	r2, [pc, #124]	@ (800f2cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d018      	beq.n	800f286 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a1d      	ldr	r2, [pc, #116]	@ (800f2d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d013      	beq.n	800f286 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4a1c      	ldr	r2, [pc, #112]	@ (800f2d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d00e      	beq.n	800f286 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	4a15      	ldr	r2, [pc, #84]	@ (800f2c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f26e:	4293      	cmp	r3, r2
 800f270:	d009      	beq.n	800f286 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	4a18      	ldr	r2, [pc, #96]	@ (800f2d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d004      	beq.n	800f286 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	4a11      	ldr	r2, [pc, #68]	@ (800f2c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d10c      	bne.n	800f2a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f28c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	689b      	ldr	r3, [r3, #8]
 800f292:	68ba      	ldr	r2, [r7, #8]
 800f294:	4313      	orrs	r3, r2
 800f296:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	68ba      	ldr	r2, [r7, #8]
 800f29e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f2b0:	2300      	movs	r3, #0
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3714      	adds	r7, #20
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	40012c00 	.word	0x40012c00
 800f2c4:	40013400 	.word	0x40013400
 800f2c8:	40015000 	.word	0x40015000
 800f2cc:	40000400 	.word	0x40000400
 800f2d0:	40000800 	.word	0x40000800
 800f2d4:	40000c00 	.word	0x40000c00
 800f2d8:	40014000 	.word	0x40014000

0800f2dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d101      	bne.n	800f2f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f2f4:	2302      	movs	r3, #2
 800f2f6:	e078      	b.n	800f3ea <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	4313      	orrs	r3, r2
 800f30c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	689b      	ldr	r3, [r3, #8]
 800f318:	4313      	orrs	r3, r2
 800f31a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	685b      	ldr	r3, [r3, #4]
 800f326:	4313      	orrs	r3, r2
 800f328:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f330:	683b      	ldr	r3, [r7, #0]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4313      	orrs	r3, r2
 800f336:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f33e:	683b      	ldr	r3, [r7, #0]
 800f340:	691b      	ldr	r3, [r3, #16]
 800f342:	4313      	orrs	r3, r2
 800f344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f34c:	683b      	ldr	r3, [r7, #0]
 800f34e:	695b      	ldr	r3, [r3, #20]
 800f350:	4313      	orrs	r3, r2
 800f352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f35e:	4313      	orrs	r3, r2
 800f360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	699b      	ldr	r3, [r3, #24]
 800f36c:	041b      	lsls	r3, r3, #16
 800f36e:	4313      	orrs	r3, r2
 800f370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	69db      	ldr	r3, [r3, #28]
 800f37c:	4313      	orrs	r3, r2
 800f37e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	4a1c      	ldr	r2, [pc, #112]	@ (800f3f8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800f386:	4293      	cmp	r3, r2
 800f388:	d009      	beq.n	800f39e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	4a1b      	ldr	r2, [pc, #108]	@ (800f3fc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d004      	beq.n	800f39e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4a19      	ldr	r2, [pc, #100]	@ (800f400 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d11c      	bne.n	800f3d8 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f3a8:	051b      	lsls	r3, r3, #20
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	6a1b      	ldr	r3, [r3, #32]
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f3c6:	4313      	orrs	r3, r2
 800f3c8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3d4:	4313      	orrs	r3, r2
 800f3d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	68fa      	ldr	r2, [r7, #12]
 800f3de:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	2200      	movs	r2, #0
 800f3e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f3e8:	2300      	movs	r3, #0
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3714      	adds	r7, #20
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	40012c00 	.word	0x40012c00
 800f3fc:	40013400 	.word	0x40013400
 800f400:	40015000 	.word	0x40015000

0800f404 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f40c:	bf00      	nop
 800f40e:	370c      	adds	r7, #12
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr

0800f418 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800f420:	bf00      	nop
 800f422:	370c      	adds	r7, #12
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr

0800f42c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f42c:	b480      	push	{r7}
 800f42e:	b083      	sub	sp, #12
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f434:	bf00      	nop
 800f436:	370c      	adds	r7, #12
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f440:	b480      	push	{r7}
 800f442:	b083      	sub	sp, #12
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f448:	bf00      	nop
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800f454:	b480      	push	{r7}
 800f456:	b083      	sub	sp, #12
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800f45c:	bf00      	nop
 800f45e:	370c      	adds	r7, #12
 800f460:	46bd      	mov	sp, r7
 800f462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f466:	4770      	bx	lr

0800f468 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800f468:	b480      	push	{r7}
 800f46a:	b083      	sub	sp, #12
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800f470:	bf00      	nop
 800f472:	370c      	adds	r7, #12
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr

0800f47c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b083      	sub	sp, #12
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800f484:	bf00      	nop
 800f486:	370c      	adds	r7, #12
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800f490:	b480      	push	{r7}
 800f492:	b083      	sub	sp, #12
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800f498:	bf00      	nop
 800f49a:	370c      	adds	r7, #12
 800f49c:	46bd      	mov	sp, r7
 800f49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a2:	4770      	bx	lr

0800f4a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d101      	bne.n	800f4b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f4b2:	2301      	movs	r3, #1
 800f4b4:	e050      	b.n	800f558 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d114      	bne.n	800f4ea <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2200      	movs	r2, #0
 800f4c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 fd65 	bl	800ff98 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d103      	bne.n	800f4e0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	4a21      	ldr	r2, [pc, #132]	@ (800f560 <HAL_UART_Init+0xbc>)
 800f4dc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f4e6:	6878      	ldr	r0, [r7, #4]
 800f4e8:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	2224      	movs	r2, #36	@ 0x24
 800f4ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f022 0201 	bic.w	r2, r2, #1
 800f500:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f506:	2b00      	cmp	r3, #0
 800f508:	d002      	beq.n	800f510 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f001 f892 	bl	8010634 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f000 fd93 	bl	801003c <UART_SetConfig>
 800f516:	4603      	mov	r3, r0
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d101      	bne.n	800f520 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800f51c:	2301      	movs	r3, #1
 800f51e:	e01b      	b.n	800f558 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	685a      	ldr	r2, [r3, #4]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f52e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	689a      	ldr	r2, [r3, #8]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f53e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	681a      	ldr	r2, [r3, #0]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f042 0201 	orr.w	r2, r2, #1
 800f54e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f001 f911 	bl	8010778 <UART_CheckIdleState>
 800f556:	4603      	mov	r3, r0
}
 800f558:	4618      	mov	r0, r3
 800f55a:	3708      	adds	r7, #8
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}
 800f560:	08009945 	.word	0x08009945

0800f564 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800f564:	b480      	push	{r7}
 800f566:	b087      	sub	sp, #28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	60f8      	str	r0, [r7, #12]
 800f56c:	460b      	mov	r3, r1
 800f56e:	607a      	str	r2, [r7, #4]
 800f570:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f572:	2300      	movs	r3, #0
 800f574:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d109      	bne.n	800f590 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f582:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800f58c:	2301      	movs	r3, #1
 800f58e:	e09c      	b.n	800f6ca <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f596:	2b20      	cmp	r3, #32
 800f598:	d16c      	bne.n	800f674 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800f59a:	7afb      	ldrb	r3, [r7, #11]
 800f59c:	2b0c      	cmp	r3, #12
 800f59e:	d85e      	bhi.n	800f65e <HAL_UART_RegisterCallback+0xfa>
 800f5a0:	a201      	add	r2, pc, #4	@ (adr r2, 800f5a8 <HAL_UART_RegisterCallback+0x44>)
 800f5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a6:	bf00      	nop
 800f5a8:	0800f5dd 	.word	0x0800f5dd
 800f5ac:	0800f5e7 	.word	0x0800f5e7
 800f5b0:	0800f5f1 	.word	0x0800f5f1
 800f5b4:	0800f5fb 	.word	0x0800f5fb
 800f5b8:	0800f605 	.word	0x0800f605
 800f5bc:	0800f60f 	.word	0x0800f60f
 800f5c0:	0800f619 	.word	0x0800f619
 800f5c4:	0800f623 	.word	0x0800f623
 800f5c8:	0800f62d 	.word	0x0800f62d
 800f5cc:	0800f637 	.word	0x0800f637
 800f5d0:	0800f641 	.word	0x0800f641
 800f5d4:	0800f64b 	.word	0x0800f64b
 800f5d8:	0800f655 	.word	0x0800f655
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f5e4:	e070      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f5ee:	e06b      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f5f8:	e066      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f602:	e061      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	687a      	ldr	r2, [r7, #4]
 800f608:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f60c:	e05c      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	687a      	ldr	r2, [r7, #4]
 800f612:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f616:	e057      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f620:	e052      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f62a:	e04d      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800f634:	e048      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	687a      	ldr	r2, [r7, #4]
 800f63a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800f63e:	e043      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	687a      	ldr	r2, [r7, #4]
 800f644:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800f648:	e03e      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f652:	e039      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f65c:	e034      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f664:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800f66e:	2301      	movs	r3, #1
 800f670:	75fb      	strb	r3, [r7, #23]
        break;
 800f672:	e029      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d11a      	bne.n	800f6b4 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800f67e:	7afb      	ldrb	r3, [r7, #11]
 800f680:	2b0b      	cmp	r3, #11
 800f682:	d002      	beq.n	800f68a <HAL_UART_RegisterCallback+0x126>
 800f684:	2b0c      	cmp	r3, #12
 800f686:	d005      	beq.n	800f694 <HAL_UART_RegisterCallback+0x130>
 800f688:	e009      	b.n	800f69e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f692:	e019      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f69c:	e014      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6a4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800f6ae:	2301      	movs	r3, #1
 800f6b0:	75fb      	strb	r3, [r7, #23]
        break;
 800f6b2:	e009      	b.n	800f6c8 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800f6c4:	2301      	movs	r3, #1
 800f6c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f6c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	371c      	adds	r7, #28
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop

0800f6d8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b08a      	sub	sp, #40	@ 0x28
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	60f8      	str	r0, [r7, #12]
 800f6e0:	60b9      	str	r1, [r7, #8]
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f6ec:	2b20      	cmp	r3, #32
 800f6ee:	d137      	bne.n	800f760 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d002      	beq.n	800f6fc <HAL_UART_Receive_DMA+0x24>
 800f6f6:	88fb      	ldrh	r3, [r7, #6]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d101      	bne.n	800f700 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e030      	b.n	800f762 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2200      	movs	r2, #0
 800f704:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	4a18      	ldr	r2, [pc, #96]	@ (800f76c <HAL_UART_Receive_DMA+0x94>)
 800f70c:	4293      	cmp	r3, r2
 800f70e:	d01f      	beq.n	800f750 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d018      	beq.n	800f750 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	e853 3f00 	ldrex	r3, [r3]
 800f72a:	613b      	str	r3, [r7, #16]
   return(result);
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f732:	627b      	str	r3, [r7, #36]	@ 0x24
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	461a      	mov	r2, r3
 800f73a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f73c:	623b      	str	r3, [r7, #32]
 800f73e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f740:	69f9      	ldr	r1, [r7, #28]
 800f742:	6a3a      	ldr	r2, [r7, #32]
 800f744:	e841 2300 	strex	r3, r2, [r1]
 800f748:	61bb      	str	r3, [r7, #24]
   return(result);
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d1e6      	bne.n	800f71e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f750:	88fb      	ldrh	r3, [r7, #6]
 800f752:	461a      	mov	r2, r3
 800f754:	68b9      	ldr	r1, [r7, #8]
 800f756:	68f8      	ldr	r0, [r7, #12]
 800f758:	f001 f926 	bl	80109a8 <UART_Start_Receive_DMA>
 800f75c:	4603      	mov	r3, r0
 800f75e:	e000      	b.n	800f762 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f760:	2302      	movs	r3, #2
  }
}
 800f762:	4618      	mov	r0, r3
 800f764:	3728      	adds	r7, #40	@ 0x28
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}
 800f76a:	bf00      	nop
 800f76c:	40008000 	.word	0x40008000

0800f770 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b0ba      	sub	sp, #232	@ 0xe8
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	69db      	ldr	r3, [r3, #28]
 800f77e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f796:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f79a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f79e:	4013      	ands	r3, r2
 800f7a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f7a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d11b      	bne.n	800f7e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f7ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f7b0:	f003 0320 	and.w	r3, r3, #32
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d015      	beq.n	800f7e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f7b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7bc:	f003 0320 	and.w	r3, r3, #32
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d105      	bne.n	800f7d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f7c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f7c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d009      	beq.n	800f7e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f000 8312 	beq.w	800fdfe <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	4798      	blx	r3
      }
      return;
 800f7e2:	e30c      	b.n	800fdfe <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f7e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f000 8129 	beq.w	800fa40 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f7ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f7f2:	4b90      	ldr	r3, [pc, #576]	@ (800fa34 <HAL_UART_IRQHandler+0x2c4>)
 800f7f4:	4013      	ands	r3, r2
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d106      	bne.n	800f808 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f7fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f7fe:	4b8e      	ldr	r3, [pc, #568]	@ (800fa38 <HAL_UART_IRQHandler+0x2c8>)
 800f800:	4013      	ands	r3, r2
 800f802:	2b00      	cmp	r3, #0
 800f804:	f000 811c 	beq.w	800fa40 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f80c:	f003 0301 	and.w	r3, r3, #1
 800f810:	2b00      	cmp	r3, #0
 800f812:	d011      	beq.n	800f838 <HAL_UART_IRQHandler+0xc8>
 800f814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d00b      	beq.n	800f838 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2201      	movs	r2, #1
 800f826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f82e:	f043 0201 	orr.w	r2, r3, #1
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f83c:	f003 0302 	and.w	r3, r3, #2
 800f840:	2b00      	cmp	r3, #0
 800f842:	d011      	beq.n	800f868 <HAL_UART_IRQHandler+0xf8>
 800f844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f848:	f003 0301 	and.w	r3, r3, #1
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d00b      	beq.n	800f868 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2202      	movs	r2, #2
 800f856:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f85e:	f043 0204 	orr.w	r2, r3, #4
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f86c:	f003 0304 	and.w	r3, r3, #4
 800f870:	2b00      	cmp	r3, #0
 800f872:	d011      	beq.n	800f898 <HAL_UART_IRQHandler+0x128>
 800f874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f878:	f003 0301 	and.w	r3, r3, #1
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d00b      	beq.n	800f898 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	2204      	movs	r2, #4
 800f886:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f88e:	f043 0202 	orr.w	r2, r3, #2
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f89c:	f003 0308 	and.w	r3, r3, #8
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d017      	beq.n	800f8d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f8a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8a8:	f003 0320 	and.w	r3, r3, #32
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d105      	bne.n	800f8bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f8b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f8b4:	4b5f      	ldr	r3, [pc, #380]	@ (800fa34 <HAL_UART_IRQHandler+0x2c4>)
 800f8b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d00b      	beq.n	800f8d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2208      	movs	r2, #8
 800f8c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8ca:	f043 0208 	orr.w	r2, r3, #8
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f8d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d012      	beq.n	800f906 <HAL_UART_IRQHandler+0x196>
 800f8e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d00c      	beq.n	800f906 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f8f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8fc:	f043 0220 	orr.w	r2, r3, #32
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 8278 	beq.w	800fe02 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f916:	f003 0320 	and.w	r3, r3, #32
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d013      	beq.n	800f946 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f91e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f922:	f003 0320 	and.w	r3, r3, #32
 800f926:	2b00      	cmp	r3, #0
 800f928:	d105      	bne.n	800f936 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f92a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f92e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f932:	2b00      	cmp	r3, #0
 800f934:	d007      	beq.n	800f946 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d003      	beq.n	800f946 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f94c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	689b      	ldr	r3, [r3, #8]
 800f956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f95a:	2b40      	cmp	r3, #64	@ 0x40
 800f95c:	d005      	beq.n	800f96a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f95e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f962:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f966:	2b00      	cmp	r3, #0
 800f968:	d058      	beq.n	800fa1c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	f001 f903 	bl	8010b76 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f97a:	2b40      	cmp	r3, #64	@ 0x40
 800f97c:	d148      	bne.n	800fa10 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	3308      	adds	r3, #8
 800f984:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f988:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f98c:	e853 3f00 	ldrex	r3, [r3]
 800f990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f994:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f998:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f99c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	3308      	adds	r3, #8
 800f9a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f9aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f9ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f9b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f9ba:	e841 2300 	strex	r3, r2, [r1]
 800f9be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f9c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d1d9      	bne.n	800f97e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d017      	beq.n	800fa04 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9da:	4a18      	ldr	r2, [pc, #96]	@ (800fa3c <HAL_UART_IRQHandler+0x2cc>)
 800f9dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7fc f8ab 	bl	800bb40 <HAL_DMA_Abort_IT>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d01f      	beq.n	800fa30 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f9f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800f9fe:	4610      	mov	r0, r2
 800fa00:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa02:	e015      	b.n	800fa30 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa0e:	e00f      	b.n	800fa30 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa1a:	e009      	b.n	800fa30 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800fa22:	6878      	ldr	r0, [r7, #4]
 800fa24:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fa2e:	e1e8      	b.n	800fe02 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa30:	bf00      	nop
    return;
 800fa32:	e1e6      	b.n	800fe02 <HAL_UART_IRQHandler+0x692>
 800fa34:	10000001 	.word	0x10000001
 800fa38:	04000120 	.word	0x04000120
 800fa3c:	08010e41 	.word	0x08010e41

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa44:	2b01      	cmp	r3, #1
 800fa46:	f040 8176 	bne.w	800fd36 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fa4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa4e:	f003 0310 	and.w	r3, r3, #16
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	f000 816f 	beq.w	800fd36 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fa58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fa5c:	f003 0310 	and.w	r3, r3, #16
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	f000 8168 	beq.w	800fd36 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2210      	movs	r2, #16
 800fa6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	689b      	ldr	r3, [r3, #8]
 800fa74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa78:	2b40      	cmp	r3, #64	@ 0x40
 800fa7a:	f040 80dc 	bne.w	800fc36 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fa8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	f000 80b1 	beq.w	800fbf8 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fa9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800faa0:	429a      	cmp	r2, r3
 800faa2:	f080 80a9 	bcs.w	800fbf8 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800faac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	f003 0320 	and.w	r3, r3, #32
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f040 8087 	bne.w	800fbd2 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800facc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fad0:	e853 3f00 	ldrex	r3, [r3]
 800fad4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fadc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fae0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	461a      	mov	r2, r3
 800faea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800faee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800faf2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800faf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fafa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fafe:	e841 2300 	strex	r3, r2, [r1]
 800fb02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fb06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d1da      	bne.n	800fac4 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	3308      	adds	r3, #8
 800fb14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fb18:	e853 3f00 	ldrex	r3, [r3]
 800fb1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fb1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fb20:	f023 0301 	bic.w	r3, r3, #1
 800fb24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	3308      	adds	r3, #8
 800fb2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fb32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fb36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fb3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb3e:	e841 2300 	strex	r3, r2, [r1]
 800fb42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fb44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d1e1      	bne.n	800fb0e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	3308      	adds	r3, #8
 800fb50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fb54:	e853 3f00 	ldrex	r3, [r3]
 800fb58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fb5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fb5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fb60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	3308      	adds	r3, #8
 800fb6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fb6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fb70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fb74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fb76:	e841 2300 	strex	r3, r2, [r1]
 800fb7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fb7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1e3      	bne.n	800fb4a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2220      	movs	r2, #32
 800fb86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb98:	e853 3f00 	ldrex	r3, [r3]
 800fb9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fb9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fba0:	f023 0310 	bic.w	r3, r3, #16
 800fba4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	461a      	mov	r2, r3
 800fbae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fbb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fbb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fbb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fbba:	e841 2300 	strex	r3, r2, [r1]
 800fbbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fbc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d1e4      	bne.n	800fb90 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7fb ff5e 	bl	800ba8e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	2202      	movs	r2, #2
 800fbd6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800fbe4:	687a      	ldr	r2, [r7, #4]
 800fbe6:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800fbea:	b292      	uxth	r2, r2
 800fbec:	1a8a      	subs	r2, r1, r2
 800fbee:	b292      	uxth	r2, r2
 800fbf0:	4611      	mov	r1, r2
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800fbf6:	e106      	b.n	800fe06 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fbfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fc02:	429a      	cmp	r2, r3
 800fc04:	f040 80ff 	bne.w	800fe06 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	f003 0320 	and.w	r3, r3, #32
 800fc16:	2b20      	cmp	r3, #32
 800fc18:	f040 80f5 	bne.w	800fe06 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2202      	movs	r2, #2
 800fc20:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800fc2e:	4611      	mov	r1, r2
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	4798      	blx	r3
      return;
 800fc34:	e0e7      	b.n	800fe06 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	1ad3      	subs	r3, r2, r3
 800fc46:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	f000 80d9 	beq.w	800fe0a <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800fc58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f000 80d4 	beq.w	800fe0a <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc6a:	e853 3f00 	ldrex	r3, [r3]
 800fc6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fc70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc72:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc76:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	461a      	mov	r2, r3
 800fc80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fc84:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fc8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc8c:	e841 2300 	strex	r3, r2, [r1]
 800fc90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fc92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d1e4      	bne.n	800fc62 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	3308      	adds	r3, #8
 800fc9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca2:	e853 3f00 	ldrex	r3, [r3]
 800fca6:	623b      	str	r3, [r7, #32]
   return(result);
 800fca8:	6a3b      	ldr	r3, [r7, #32]
 800fcaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800fcae:	f023 0301 	bic.w	r3, r3, #1
 800fcb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	3308      	adds	r3, #8
 800fcbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fcc0:	633a      	str	r2, [r7, #48]	@ 0x30
 800fcc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fcc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fcc8:	e841 2300 	strex	r3, r2, [r1]
 800fccc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fcce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d1e1      	bne.n	800fc98 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2220      	movs	r2, #32
 800fcd8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2200      	movs	r2, #0
 800fce0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2200      	movs	r2, #0
 800fce6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcee:	693b      	ldr	r3, [r7, #16]
 800fcf0:	e853 3f00 	ldrex	r3, [r3]
 800fcf4:	60fb      	str	r3, [r7, #12]
   return(result);
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	f023 0310 	bic.w	r3, r3, #16
 800fcfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	461a      	mov	r2, r3
 800fd06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fd0a:	61fb      	str	r3, [r7, #28]
 800fd0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd0e:	69b9      	ldr	r1, [r7, #24]
 800fd10:	69fa      	ldr	r2, [r7, #28]
 800fd12:	e841 2300 	strex	r3, r2, [r1]
 800fd16:	617b      	str	r3, [r7, #20]
   return(result);
 800fd18:	697b      	ldr	r3, [r7, #20]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d1e4      	bne.n	800fce8 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2202      	movs	r2, #2
 800fd22:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800fd2a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800fd2e:	4611      	mov	r1, r2
 800fd30:	6878      	ldr	r0, [r7, #4]
 800fd32:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd34:	e069      	b.n	800fe0a <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fd36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d010      	beq.n	800fd64 <HAL_UART_IRQHandler+0x5f4>
 800fd42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d00a      	beq.n	800fd64 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fd56:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd62:	e055      	b.n	800fe10 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fd64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d014      	beq.n	800fd9a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fd70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fd74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d105      	bne.n	800fd88 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fd7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fd80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d008      	beq.n	800fd9a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d03e      	beq.n	800fe0e <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	4798      	blx	r3
    }
    return;
 800fd98:	e039      	b.n	800fe0e <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fd9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fd9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d009      	beq.n	800fdba <HAL_UART_IRQHandler+0x64a>
 800fda6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d003      	beq.n	800fdba <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800fdb2:	6878      	ldr	r0, [r7, #4]
 800fdb4:	f001 f858 	bl	8010e68 <UART_EndTransmit_IT>
    return;
 800fdb8:	e02a      	b.n	800fe10 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fdba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fdbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00b      	beq.n	800fdde <HAL_UART_IRQHandler+0x66e>
 800fdc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdca:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d005      	beq.n	800fdde <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fddc:	e018      	b.n	800fe10 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fdde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fde2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d012      	beq.n	800fe10 <HAL_UART_IRQHandler+0x6a0>
 800fdea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	da0e      	bge.n	800fe10 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fdfc:	e008      	b.n	800fe10 <HAL_UART_IRQHandler+0x6a0>
      return;
 800fdfe:	bf00      	nop
 800fe00:	e006      	b.n	800fe10 <HAL_UART_IRQHandler+0x6a0>
    return;
 800fe02:	bf00      	nop
 800fe04:	e004      	b.n	800fe10 <HAL_UART_IRQHandler+0x6a0>
      return;
 800fe06:	bf00      	nop
 800fe08:	e002      	b.n	800fe10 <HAL_UART_IRQHandler+0x6a0>
      return;
 800fe0a:	bf00      	nop
 800fe0c:	e000      	b.n	800fe10 <HAL_UART_IRQHandler+0x6a0>
    return;
 800fe0e:	bf00      	nop
  }
}
 800fe10:	37e8      	adds	r7, #232	@ 0xe8
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop

0800fe18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fe18:	b480      	push	{r7}
 800fe1a:	b083      	sub	sp, #12
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fe20:	bf00      	nop
 800fe22:	370c      	adds	r7, #12
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr

0800fe2c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b083      	sub	sp, #12
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fe34:	bf00      	nop
 800fe36:	370c      	adds	r7, #12
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr

0800fe40 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fe48:	bf00      	nop
 800fe4a:	370c      	adds	r7, #12
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr

0800fe54 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b083      	sub	sp, #12
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800fe5c:	bf00      	nop
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b083      	sub	sp, #12
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fe70:	bf00      	nop
 800fe72:	370c      	adds	r7, #12
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800fe84:	bf00      	nop
 800fe86:	370c      	adds	r7, #12
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr

0800fe90 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b083      	sub	sp, #12
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800fe98:	bf00      	nop
 800fe9a:	370c      	adds	r7, #12
 800fe9c:	46bd      	mov	sp, r7
 800fe9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea2:	4770      	bx	lr

0800fea4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800fea4:	b480      	push	{r7}
 800fea6:	b083      	sub	sp, #12
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800feac:	bf00      	nop
 800feae:	370c      	adds	r7, #12
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800feb8:	b480      	push	{r7}
 800feba:	b083      	sub	sp, #12
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	460b      	mov	r3, r1
 800fec2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fec4:	bf00      	nop
 800fec6:	370c      	adds	r7, #12
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr

0800fed0 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
 800fed8:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	4a09      	ldr	r2, [pc, #36]	@ (800ff04 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d009      	beq.n	800fef8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	695b      	ldr	r3, [r3, #20]
 800feea:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	683a      	ldr	r2, [r7, #0]
 800fef4:	430a      	orrs	r2, r1
 800fef6:	615a      	str	r2, [r3, #20]
  }
}
 800fef8:	bf00      	nop
 800fefa:	370c      	adds	r7, #12
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr
 800ff04:	40008000 	.word	0x40008000

0800ff08 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	4a18      	ldr	r2, [pc, #96]	@ (800ff78 <HAL_UART_EnableReceiverTimeout+0x70>)
 800ff16:	4293      	cmp	r3, r2
 800ff18:	d027      	beq.n	800ff6a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ff20:	2b20      	cmp	r3, #32
 800ff22:	d120      	bne.n	800ff66 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	d101      	bne.n	800ff32 <HAL_UART_EnableReceiverTimeout+0x2a>
 800ff2e:	2302      	movs	r3, #2
 800ff30:	e01c      	b.n	800ff6c <HAL_UART_EnableReceiverTimeout+0x64>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2201      	movs	r2, #1
 800ff36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2224      	movs	r2, #36	@ 0x24
 800ff3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	685a      	ldr	r2, [r3, #4]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800ff50:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2220      	movs	r2, #32
 800ff56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800ff62:	2300      	movs	r3, #0
 800ff64:	e002      	b.n	800ff6c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800ff66:	2302      	movs	r3, #2
 800ff68:	e000      	b.n	800ff6c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800ff6a:	2301      	movs	r3, #1
  }
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	370c      	adds	r7, #12
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr
 800ff78:	40008000 	.word	0x40008000

0800ff7c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	370c      	adds	r7, #12
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff94:	4770      	bx	lr
	...

0800ff98 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800ff98:	b480      	push	{r7}
 800ff9a:	b083      	sub	sp, #12
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	4a1a      	ldr	r2, [pc, #104]	@ (801000c <UART_InitCallbacksToDefault+0x74>)
 800ffa4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	4a19      	ldr	r2, [pc, #100]	@ (8010010 <UART_InitCallbacksToDefault+0x78>)
 800ffac:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	4a18      	ldr	r2, [pc, #96]	@ (8010014 <UART_InitCallbacksToDefault+0x7c>)
 800ffb4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	4a17      	ldr	r2, [pc, #92]	@ (8010018 <UART_InitCallbacksToDefault+0x80>)
 800ffbc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4a16      	ldr	r2, [pc, #88]	@ (801001c <UART_InitCallbacksToDefault+0x84>)
 800ffc4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	4a15      	ldr	r2, [pc, #84]	@ (8010020 <UART_InitCallbacksToDefault+0x88>)
 800ffcc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	4a14      	ldr	r2, [pc, #80]	@ (8010024 <UART_InitCallbacksToDefault+0x8c>)
 800ffd4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	4a13      	ldr	r2, [pc, #76]	@ (8010028 <UART_InitCallbacksToDefault+0x90>)
 800ffdc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	4a12      	ldr	r2, [pc, #72]	@ (801002c <UART_InitCallbacksToDefault+0x94>)
 800ffe4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	4a11      	ldr	r2, [pc, #68]	@ (8010030 <UART_InitCallbacksToDefault+0x98>)
 800ffec:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4a10      	ldr	r2, [pc, #64]	@ (8010034 <UART_InitCallbacksToDefault+0x9c>)
 800fff4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	4a0f      	ldr	r2, [pc, #60]	@ (8010038 <UART_InitCallbacksToDefault+0xa0>)
 800fffc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8010000:	bf00      	nop
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr
 801000c:	0800fe2d 	.word	0x0800fe2d
 8010010:	0800fe19 	.word	0x0800fe19
 8010014:	0800fe55 	.word	0x0800fe55
 8010018:	0800fe41 	.word	0x0800fe41
 801001c:	0800fe69 	.word	0x0800fe69
 8010020:	0800fe7d 	.word	0x0800fe7d
 8010024:	0800fe91 	.word	0x0800fe91
 8010028:	0800fea5 	.word	0x0800fea5
 801002c:	08010ec3 	.word	0x08010ec3
 8010030:	08010ed7 	.word	0x08010ed7
 8010034:	08010eeb 	.word	0x08010eeb
 8010038:	0800feb9 	.word	0x0800feb9

0801003c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801003c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010040:	b08c      	sub	sp, #48	@ 0x30
 8010042:	af00      	add	r7, sp, #0
 8010044:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010046:	2300      	movs	r3, #0
 8010048:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801004c:	697b      	ldr	r3, [r7, #20]
 801004e:	689a      	ldr	r2, [r3, #8]
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	691b      	ldr	r3, [r3, #16]
 8010054:	431a      	orrs	r2, r3
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	695b      	ldr	r3, [r3, #20]
 801005a:	431a      	orrs	r2, r3
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	69db      	ldr	r3, [r3, #28]
 8010060:	4313      	orrs	r3, r2
 8010062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010064:	697b      	ldr	r3, [r7, #20]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	681a      	ldr	r2, [r3, #0]
 801006a:	4baa      	ldr	r3, [pc, #680]	@ (8010314 <UART_SetConfig+0x2d8>)
 801006c:	4013      	ands	r3, r2
 801006e:	697a      	ldr	r2, [r7, #20]
 8010070:	6812      	ldr	r2, [r2, #0]
 8010072:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010074:	430b      	orrs	r3, r1
 8010076:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010078:	697b      	ldr	r3, [r7, #20]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010082:	697b      	ldr	r3, [r7, #20]
 8010084:	68da      	ldr	r2, [r3, #12]
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	430a      	orrs	r2, r1
 801008c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801008e:	697b      	ldr	r3, [r7, #20]
 8010090:	699b      	ldr	r3, [r3, #24]
 8010092:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010094:	697b      	ldr	r3, [r7, #20]
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	4a9f      	ldr	r2, [pc, #636]	@ (8010318 <UART_SetConfig+0x2dc>)
 801009a:	4293      	cmp	r3, r2
 801009c:	d004      	beq.n	80100a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801009e:	697b      	ldr	r3, [r7, #20]
 80100a0:	6a1b      	ldr	r3, [r3, #32]
 80100a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80100a4:	4313      	orrs	r3, r2
 80100a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80100a8:	697b      	ldr	r3, [r7, #20]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	689b      	ldr	r3, [r3, #8]
 80100ae:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80100b2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80100b6:	697a      	ldr	r2, [r7, #20]
 80100b8:	6812      	ldr	r2, [r2, #0]
 80100ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80100bc:	430b      	orrs	r3, r1
 80100be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100c6:	f023 010f 	bic.w	r1, r3, #15
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	430a      	orrs	r2, r1
 80100d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4a90      	ldr	r2, [pc, #576]	@ (801031c <UART_SetConfig+0x2e0>)
 80100dc:	4293      	cmp	r3, r2
 80100de:	d125      	bne.n	801012c <UART_SetConfig+0xf0>
 80100e0:	4b8f      	ldr	r3, [pc, #572]	@ (8010320 <UART_SetConfig+0x2e4>)
 80100e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80100e6:	f003 0303 	and.w	r3, r3, #3
 80100ea:	2b03      	cmp	r3, #3
 80100ec:	d81a      	bhi.n	8010124 <UART_SetConfig+0xe8>
 80100ee:	a201      	add	r2, pc, #4	@ (adr r2, 80100f4 <UART_SetConfig+0xb8>)
 80100f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100f4:	08010105 	.word	0x08010105
 80100f8:	08010115 	.word	0x08010115
 80100fc:	0801010d 	.word	0x0801010d
 8010100:	0801011d 	.word	0x0801011d
 8010104:	2301      	movs	r3, #1
 8010106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801010a:	e116      	b.n	801033a <UART_SetConfig+0x2fe>
 801010c:	2302      	movs	r3, #2
 801010e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010112:	e112      	b.n	801033a <UART_SetConfig+0x2fe>
 8010114:	2304      	movs	r3, #4
 8010116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801011a:	e10e      	b.n	801033a <UART_SetConfig+0x2fe>
 801011c:	2308      	movs	r3, #8
 801011e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010122:	e10a      	b.n	801033a <UART_SetConfig+0x2fe>
 8010124:	2310      	movs	r3, #16
 8010126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801012a:	e106      	b.n	801033a <UART_SetConfig+0x2fe>
 801012c:	697b      	ldr	r3, [r7, #20]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a7c      	ldr	r2, [pc, #496]	@ (8010324 <UART_SetConfig+0x2e8>)
 8010132:	4293      	cmp	r3, r2
 8010134:	d138      	bne.n	80101a8 <UART_SetConfig+0x16c>
 8010136:	4b7a      	ldr	r3, [pc, #488]	@ (8010320 <UART_SetConfig+0x2e4>)
 8010138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801013c:	f003 030c 	and.w	r3, r3, #12
 8010140:	2b0c      	cmp	r3, #12
 8010142:	d82d      	bhi.n	80101a0 <UART_SetConfig+0x164>
 8010144:	a201      	add	r2, pc, #4	@ (adr r2, 801014c <UART_SetConfig+0x110>)
 8010146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801014a:	bf00      	nop
 801014c:	08010181 	.word	0x08010181
 8010150:	080101a1 	.word	0x080101a1
 8010154:	080101a1 	.word	0x080101a1
 8010158:	080101a1 	.word	0x080101a1
 801015c:	08010191 	.word	0x08010191
 8010160:	080101a1 	.word	0x080101a1
 8010164:	080101a1 	.word	0x080101a1
 8010168:	080101a1 	.word	0x080101a1
 801016c:	08010189 	.word	0x08010189
 8010170:	080101a1 	.word	0x080101a1
 8010174:	080101a1 	.word	0x080101a1
 8010178:	080101a1 	.word	0x080101a1
 801017c:	08010199 	.word	0x08010199
 8010180:	2300      	movs	r3, #0
 8010182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010186:	e0d8      	b.n	801033a <UART_SetConfig+0x2fe>
 8010188:	2302      	movs	r3, #2
 801018a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801018e:	e0d4      	b.n	801033a <UART_SetConfig+0x2fe>
 8010190:	2304      	movs	r3, #4
 8010192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010196:	e0d0      	b.n	801033a <UART_SetConfig+0x2fe>
 8010198:	2308      	movs	r3, #8
 801019a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801019e:	e0cc      	b.n	801033a <UART_SetConfig+0x2fe>
 80101a0:	2310      	movs	r3, #16
 80101a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101a6:	e0c8      	b.n	801033a <UART_SetConfig+0x2fe>
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	4a5e      	ldr	r2, [pc, #376]	@ (8010328 <UART_SetConfig+0x2ec>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d125      	bne.n	80101fe <UART_SetConfig+0x1c2>
 80101b2:	4b5b      	ldr	r3, [pc, #364]	@ (8010320 <UART_SetConfig+0x2e4>)
 80101b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80101b8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80101bc:	2b30      	cmp	r3, #48	@ 0x30
 80101be:	d016      	beq.n	80101ee <UART_SetConfig+0x1b2>
 80101c0:	2b30      	cmp	r3, #48	@ 0x30
 80101c2:	d818      	bhi.n	80101f6 <UART_SetConfig+0x1ba>
 80101c4:	2b20      	cmp	r3, #32
 80101c6:	d00a      	beq.n	80101de <UART_SetConfig+0x1a2>
 80101c8:	2b20      	cmp	r3, #32
 80101ca:	d814      	bhi.n	80101f6 <UART_SetConfig+0x1ba>
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d002      	beq.n	80101d6 <UART_SetConfig+0x19a>
 80101d0:	2b10      	cmp	r3, #16
 80101d2:	d008      	beq.n	80101e6 <UART_SetConfig+0x1aa>
 80101d4:	e00f      	b.n	80101f6 <UART_SetConfig+0x1ba>
 80101d6:	2300      	movs	r3, #0
 80101d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101dc:	e0ad      	b.n	801033a <UART_SetConfig+0x2fe>
 80101de:	2302      	movs	r3, #2
 80101e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101e4:	e0a9      	b.n	801033a <UART_SetConfig+0x2fe>
 80101e6:	2304      	movs	r3, #4
 80101e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101ec:	e0a5      	b.n	801033a <UART_SetConfig+0x2fe>
 80101ee:	2308      	movs	r3, #8
 80101f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101f4:	e0a1      	b.n	801033a <UART_SetConfig+0x2fe>
 80101f6:	2310      	movs	r3, #16
 80101f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80101fc:	e09d      	b.n	801033a <UART_SetConfig+0x2fe>
 80101fe:	697b      	ldr	r3, [r7, #20]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	4a4a      	ldr	r2, [pc, #296]	@ (801032c <UART_SetConfig+0x2f0>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d125      	bne.n	8010254 <UART_SetConfig+0x218>
 8010208:	4b45      	ldr	r3, [pc, #276]	@ (8010320 <UART_SetConfig+0x2e4>)
 801020a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801020e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8010212:	2bc0      	cmp	r3, #192	@ 0xc0
 8010214:	d016      	beq.n	8010244 <UART_SetConfig+0x208>
 8010216:	2bc0      	cmp	r3, #192	@ 0xc0
 8010218:	d818      	bhi.n	801024c <UART_SetConfig+0x210>
 801021a:	2b80      	cmp	r3, #128	@ 0x80
 801021c:	d00a      	beq.n	8010234 <UART_SetConfig+0x1f8>
 801021e:	2b80      	cmp	r3, #128	@ 0x80
 8010220:	d814      	bhi.n	801024c <UART_SetConfig+0x210>
 8010222:	2b00      	cmp	r3, #0
 8010224:	d002      	beq.n	801022c <UART_SetConfig+0x1f0>
 8010226:	2b40      	cmp	r3, #64	@ 0x40
 8010228:	d008      	beq.n	801023c <UART_SetConfig+0x200>
 801022a:	e00f      	b.n	801024c <UART_SetConfig+0x210>
 801022c:	2300      	movs	r3, #0
 801022e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010232:	e082      	b.n	801033a <UART_SetConfig+0x2fe>
 8010234:	2302      	movs	r3, #2
 8010236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801023a:	e07e      	b.n	801033a <UART_SetConfig+0x2fe>
 801023c:	2304      	movs	r3, #4
 801023e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010242:	e07a      	b.n	801033a <UART_SetConfig+0x2fe>
 8010244:	2308      	movs	r3, #8
 8010246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801024a:	e076      	b.n	801033a <UART_SetConfig+0x2fe>
 801024c:	2310      	movs	r3, #16
 801024e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010252:	e072      	b.n	801033a <UART_SetConfig+0x2fe>
 8010254:	697b      	ldr	r3, [r7, #20]
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	4a35      	ldr	r2, [pc, #212]	@ (8010330 <UART_SetConfig+0x2f4>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d12a      	bne.n	80102b4 <UART_SetConfig+0x278>
 801025e:	4b30      	ldr	r3, [pc, #192]	@ (8010320 <UART_SetConfig+0x2e4>)
 8010260:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010264:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010268:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801026c:	d01a      	beq.n	80102a4 <UART_SetConfig+0x268>
 801026e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010272:	d81b      	bhi.n	80102ac <UART_SetConfig+0x270>
 8010274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010278:	d00c      	beq.n	8010294 <UART_SetConfig+0x258>
 801027a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801027e:	d815      	bhi.n	80102ac <UART_SetConfig+0x270>
 8010280:	2b00      	cmp	r3, #0
 8010282:	d003      	beq.n	801028c <UART_SetConfig+0x250>
 8010284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010288:	d008      	beq.n	801029c <UART_SetConfig+0x260>
 801028a:	e00f      	b.n	80102ac <UART_SetConfig+0x270>
 801028c:	2300      	movs	r3, #0
 801028e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010292:	e052      	b.n	801033a <UART_SetConfig+0x2fe>
 8010294:	2302      	movs	r3, #2
 8010296:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801029a:	e04e      	b.n	801033a <UART_SetConfig+0x2fe>
 801029c:	2304      	movs	r3, #4
 801029e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102a2:	e04a      	b.n	801033a <UART_SetConfig+0x2fe>
 80102a4:	2308      	movs	r3, #8
 80102a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102aa:	e046      	b.n	801033a <UART_SetConfig+0x2fe>
 80102ac:	2310      	movs	r3, #16
 80102ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102b2:	e042      	b.n	801033a <UART_SetConfig+0x2fe>
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	4a17      	ldr	r2, [pc, #92]	@ (8010318 <UART_SetConfig+0x2dc>)
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d13a      	bne.n	8010334 <UART_SetConfig+0x2f8>
 80102be:	4b18      	ldr	r3, [pc, #96]	@ (8010320 <UART_SetConfig+0x2e4>)
 80102c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80102c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80102c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80102cc:	d01a      	beq.n	8010304 <UART_SetConfig+0x2c8>
 80102ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80102d2:	d81b      	bhi.n	801030c <UART_SetConfig+0x2d0>
 80102d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102d8:	d00c      	beq.n	80102f4 <UART_SetConfig+0x2b8>
 80102da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80102de:	d815      	bhi.n	801030c <UART_SetConfig+0x2d0>
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d003      	beq.n	80102ec <UART_SetConfig+0x2b0>
 80102e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80102e8:	d008      	beq.n	80102fc <UART_SetConfig+0x2c0>
 80102ea:	e00f      	b.n	801030c <UART_SetConfig+0x2d0>
 80102ec:	2300      	movs	r3, #0
 80102ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102f2:	e022      	b.n	801033a <UART_SetConfig+0x2fe>
 80102f4:	2302      	movs	r3, #2
 80102f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80102fa:	e01e      	b.n	801033a <UART_SetConfig+0x2fe>
 80102fc:	2304      	movs	r3, #4
 80102fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010302:	e01a      	b.n	801033a <UART_SetConfig+0x2fe>
 8010304:	2308      	movs	r3, #8
 8010306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801030a:	e016      	b.n	801033a <UART_SetConfig+0x2fe>
 801030c:	2310      	movs	r3, #16
 801030e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010312:	e012      	b.n	801033a <UART_SetConfig+0x2fe>
 8010314:	cfff69f3 	.word	0xcfff69f3
 8010318:	40008000 	.word	0x40008000
 801031c:	40013800 	.word	0x40013800
 8010320:	40021000 	.word	0x40021000
 8010324:	40004400 	.word	0x40004400
 8010328:	40004800 	.word	0x40004800
 801032c:	40004c00 	.word	0x40004c00
 8010330:	40005000 	.word	0x40005000
 8010334:	2310      	movs	r3, #16
 8010336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	681b      	ldr	r3, [r3, #0]
 801033e:	4aae      	ldr	r2, [pc, #696]	@ (80105f8 <UART_SetConfig+0x5bc>)
 8010340:	4293      	cmp	r3, r2
 8010342:	f040 8097 	bne.w	8010474 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010346:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801034a:	2b08      	cmp	r3, #8
 801034c:	d823      	bhi.n	8010396 <UART_SetConfig+0x35a>
 801034e:	a201      	add	r2, pc, #4	@ (adr r2, 8010354 <UART_SetConfig+0x318>)
 8010350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010354:	08010379 	.word	0x08010379
 8010358:	08010397 	.word	0x08010397
 801035c:	08010381 	.word	0x08010381
 8010360:	08010397 	.word	0x08010397
 8010364:	08010387 	.word	0x08010387
 8010368:	08010397 	.word	0x08010397
 801036c:	08010397 	.word	0x08010397
 8010370:	08010397 	.word	0x08010397
 8010374:	0801038f 	.word	0x0801038f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010378:	f7fc fcec 	bl	800cd54 <HAL_RCC_GetPCLK1Freq>
 801037c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801037e:	e010      	b.n	80103a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010380:	4b9e      	ldr	r3, [pc, #632]	@ (80105fc <UART_SetConfig+0x5c0>)
 8010382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010384:	e00d      	b.n	80103a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010386:	f7fc fc77 	bl	800cc78 <HAL_RCC_GetSysClockFreq>
 801038a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801038c:	e009      	b.n	80103a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801038e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010394:	e005      	b.n	80103a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8010396:	2300      	movs	r3, #0
 8010398:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801039a:	2301      	movs	r3, #1
 801039c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80103a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80103a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	f000 8130 	beq.w	801060a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103ae:	4a94      	ldr	r2, [pc, #592]	@ (8010600 <UART_SetConfig+0x5c4>)
 80103b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103b4:	461a      	mov	r2, r3
 80103b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80103bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	685a      	ldr	r2, [r3, #4]
 80103c2:	4613      	mov	r3, r2
 80103c4:	005b      	lsls	r3, r3, #1
 80103c6:	4413      	add	r3, r2
 80103c8:	69ba      	ldr	r2, [r7, #24]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d305      	bcc.n	80103da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80103d4:	69ba      	ldr	r2, [r7, #24]
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d903      	bls.n	80103e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80103da:	2301      	movs	r3, #1
 80103dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80103e0:	e113      	b.n	801060a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80103e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103e4:	2200      	movs	r2, #0
 80103e6:	60bb      	str	r3, [r7, #8]
 80103e8:	60fa      	str	r2, [r7, #12]
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103ee:	4a84      	ldr	r2, [pc, #528]	@ (8010600 <UART_SetConfig+0x5c4>)
 80103f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80103f4:	b29b      	uxth	r3, r3
 80103f6:	2200      	movs	r2, #0
 80103f8:	603b      	str	r3, [r7, #0]
 80103fa:	607a      	str	r2, [r7, #4]
 80103fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010400:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010404:	f7f0 fbf6 	bl	8000bf4 <__aeabi_uldivmod>
 8010408:	4602      	mov	r2, r0
 801040a:	460b      	mov	r3, r1
 801040c:	4610      	mov	r0, r2
 801040e:	4619      	mov	r1, r3
 8010410:	f04f 0200 	mov.w	r2, #0
 8010414:	f04f 0300 	mov.w	r3, #0
 8010418:	020b      	lsls	r3, r1, #8
 801041a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801041e:	0202      	lsls	r2, r0, #8
 8010420:	6979      	ldr	r1, [r7, #20]
 8010422:	6849      	ldr	r1, [r1, #4]
 8010424:	0849      	lsrs	r1, r1, #1
 8010426:	2000      	movs	r0, #0
 8010428:	460c      	mov	r4, r1
 801042a:	4605      	mov	r5, r0
 801042c:	eb12 0804 	adds.w	r8, r2, r4
 8010430:	eb43 0905 	adc.w	r9, r3, r5
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	685b      	ldr	r3, [r3, #4]
 8010438:	2200      	movs	r2, #0
 801043a:	469a      	mov	sl, r3
 801043c:	4693      	mov	fp, r2
 801043e:	4652      	mov	r2, sl
 8010440:	465b      	mov	r3, fp
 8010442:	4640      	mov	r0, r8
 8010444:	4649      	mov	r1, r9
 8010446:	f7f0 fbd5 	bl	8000bf4 <__aeabi_uldivmod>
 801044a:	4602      	mov	r2, r0
 801044c:	460b      	mov	r3, r1
 801044e:	4613      	mov	r3, r2
 8010450:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010452:	6a3b      	ldr	r3, [r7, #32]
 8010454:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010458:	d308      	bcc.n	801046c <UART_SetConfig+0x430>
 801045a:	6a3b      	ldr	r3, [r7, #32]
 801045c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010460:	d204      	bcs.n	801046c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	6a3a      	ldr	r2, [r7, #32]
 8010468:	60da      	str	r2, [r3, #12]
 801046a:	e0ce      	b.n	801060a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801046c:	2301      	movs	r3, #1
 801046e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010472:	e0ca      	b.n	801060a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010474:	697b      	ldr	r3, [r7, #20]
 8010476:	69db      	ldr	r3, [r3, #28]
 8010478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801047c:	d166      	bne.n	801054c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801047e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010482:	2b08      	cmp	r3, #8
 8010484:	d827      	bhi.n	80104d6 <UART_SetConfig+0x49a>
 8010486:	a201      	add	r2, pc, #4	@ (adr r2, 801048c <UART_SetConfig+0x450>)
 8010488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801048c:	080104b1 	.word	0x080104b1
 8010490:	080104b9 	.word	0x080104b9
 8010494:	080104c1 	.word	0x080104c1
 8010498:	080104d7 	.word	0x080104d7
 801049c:	080104c7 	.word	0x080104c7
 80104a0:	080104d7 	.word	0x080104d7
 80104a4:	080104d7 	.word	0x080104d7
 80104a8:	080104d7 	.word	0x080104d7
 80104ac:	080104cf 	.word	0x080104cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80104b0:	f7fc fc50 	bl	800cd54 <HAL_RCC_GetPCLK1Freq>
 80104b4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80104b6:	e014      	b.n	80104e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80104b8:	f7fc fc62 	bl	800cd80 <HAL_RCC_GetPCLK2Freq>
 80104bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80104be:	e010      	b.n	80104e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80104c0:	4b4e      	ldr	r3, [pc, #312]	@ (80105fc <UART_SetConfig+0x5c0>)
 80104c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80104c4:	e00d      	b.n	80104e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80104c6:	f7fc fbd7 	bl	800cc78 <HAL_RCC_GetSysClockFreq>
 80104ca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80104cc:	e009      	b.n	80104e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80104ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80104d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80104d4:	e005      	b.n	80104e2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80104d6:	2300      	movs	r3, #0
 80104d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80104da:	2301      	movs	r3, #1
 80104dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80104e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80104e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	f000 8090 	beq.w	801060a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80104ea:	697b      	ldr	r3, [r7, #20]
 80104ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104ee:	4a44      	ldr	r2, [pc, #272]	@ (8010600 <UART_SetConfig+0x5c4>)
 80104f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80104f4:	461a      	mov	r2, r3
 80104f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80104fc:	005a      	lsls	r2, r3, #1
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	685b      	ldr	r3, [r3, #4]
 8010502:	085b      	lsrs	r3, r3, #1
 8010504:	441a      	add	r2, r3
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	fbb2 f3f3 	udiv	r3, r2, r3
 801050e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010510:	6a3b      	ldr	r3, [r7, #32]
 8010512:	2b0f      	cmp	r3, #15
 8010514:	d916      	bls.n	8010544 <UART_SetConfig+0x508>
 8010516:	6a3b      	ldr	r3, [r7, #32]
 8010518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801051c:	d212      	bcs.n	8010544 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801051e:	6a3b      	ldr	r3, [r7, #32]
 8010520:	b29b      	uxth	r3, r3
 8010522:	f023 030f 	bic.w	r3, r3, #15
 8010526:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010528:	6a3b      	ldr	r3, [r7, #32]
 801052a:	085b      	lsrs	r3, r3, #1
 801052c:	b29b      	uxth	r3, r3
 801052e:	f003 0307 	and.w	r3, r3, #7
 8010532:	b29a      	uxth	r2, r3
 8010534:	8bfb      	ldrh	r3, [r7, #30]
 8010536:	4313      	orrs	r3, r2
 8010538:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801053a:	697b      	ldr	r3, [r7, #20]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	8bfa      	ldrh	r2, [r7, #30]
 8010540:	60da      	str	r2, [r3, #12]
 8010542:	e062      	b.n	801060a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8010544:	2301      	movs	r3, #1
 8010546:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801054a:	e05e      	b.n	801060a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801054c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010550:	2b08      	cmp	r3, #8
 8010552:	d828      	bhi.n	80105a6 <UART_SetConfig+0x56a>
 8010554:	a201      	add	r2, pc, #4	@ (adr r2, 801055c <UART_SetConfig+0x520>)
 8010556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801055a:	bf00      	nop
 801055c:	08010581 	.word	0x08010581
 8010560:	08010589 	.word	0x08010589
 8010564:	08010591 	.word	0x08010591
 8010568:	080105a7 	.word	0x080105a7
 801056c:	08010597 	.word	0x08010597
 8010570:	080105a7 	.word	0x080105a7
 8010574:	080105a7 	.word	0x080105a7
 8010578:	080105a7 	.word	0x080105a7
 801057c:	0801059f 	.word	0x0801059f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010580:	f7fc fbe8 	bl	800cd54 <HAL_RCC_GetPCLK1Freq>
 8010584:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010586:	e014      	b.n	80105b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010588:	f7fc fbfa 	bl	800cd80 <HAL_RCC_GetPCLK2Freq>
 801058c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801058e:	e010      	b.n	80105b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010590:	4b1a      	ldr	r3, [pc, #104]	@ (80105fc <UART_SetConfig+0x5c0>)
 8010592:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010594:	e00d      	b.n	80105b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010596:	f7fc fb6f 	bl	800cc78 <HAL_RCC_GetSysClockFreq>
 801059a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801059c:	e009      	b.n	80105b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801059e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80105a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80105a4:	e005      	b.n	80105b2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80105a6:	2300      	movs	r3, #0
 80105a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80105aa:	2301      	movs	r3, #1
 80105ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80105b0:	bf00      	nop
    }

    if (pclk != 0U)
 80105b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d028      	beq.n	801060a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105bc:	4a10      	ldr	r2, [pc, #64]	@ (8010600 <UART_SetConfig+0x5c4>)
 80105be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80105c2:	461a      	mov	r2, r3
 80105c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80105ca:	697b      	ldr	r3, [r7, #20]
 80105cc:	685b      	ldr	r3, [r3, #4]
 80105ce:	085b      	lsrs	r3, r3, #1
 80105d0:	441a      	add	r2, r3
 80105d2:	697b      	ldr	r3, [r7, #20]
 80105d4:	685b      	ldr	r3, [r3, #4]
 80105d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80105da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80105dc:	6a3b      	ldr	r3, [r7, #32]
 80105de:	2b0f      	cmp	r3, #15
 80105e0:	d910      	bls.n	8010604 <UART_SetConfig+0x5c8>
 80105e2:	6a3b      	ldr	r3, [r7, #32]
 80105e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80105e8:	d20c      	bcs.n	8010604 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80105ea:	6a3b      	ldr	r3, [r7, #32]
 80105ec:	b29a      	uxth	r2, r3
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	60da      	str	r2, [r3, #12]
 80105f4:	e009      	b.n	801060a <UART_SetConfig+0x5ce>
 80105f6:	bf00      	nop
 80105f8:	40008000 	.word	0x40008000
 80105fc:	00f42400 	.word	0x00f42400
 8010600:	08013bb0 	.word	0x08013bb0
      }
      else
      {
        ret = HAL_ERROR;
 8010604:	2301      	movs	r3, #1
 8010606:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801060a:	697b      	ldr	r3, [r7, #20]
 801060c:	2201      	movs	r2, #1
 801060e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010612:	697b      	ldr	r3, [r7, #20]
 8010614:	2201      	movs	r2, #1
 8010616:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	2200      	movs	r2, #0
 801061e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	2200      	movs	r2, #0
 8010624:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010626:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 801062a:	4618      	mov	r0, r3
 801062c:	3730      	adds	r7, #48	@ 0x30
 801062e:	46bd      	mov	sp, r7
 8010630:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010634 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010640:	f003 0308 	and.w	r3, r3, #8
 8010644:	2b00      	cmp	r3, #0
 8010646:	d00a      	beq.n	801065e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	430a      	orrs	r2, r1
 801065c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010662:	f003 0301 	and.w	r3, r3, #1
 8010666:	2b00      	cmp	r3, #0
 8010668:	d00a      	beq.n	8010680 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	430a      	orrs	r2, r1
 801067e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010684:	f003 0302 	and.w	r3, r3, #2
 8010688:	2b00      	cmp	r3, #0
 801068a:	d00a      	beq.n	80106a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	685b      	ldr	r3, [r3, #4]
 8010692:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	430a      	orrs	r2, r1
 80106a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106a6:	f003 0304 	and.w	r3, r3, #4
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d00a      	beq.n	80106c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	430a      	orrs	r2, r1
 80106c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106c8:	f003 0310 	and.w	r3, r3, #16
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d00a      	beq.n	80106e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	689b      	ldr	r3, [r3, #8]
 80106d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	430a      	orrs	r2, r1
 80106e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80106ea:	f003 0320 	and.w	r3, r3, #32
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d00a      	beq.n	8010708 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	689b      	ldr	r3, [r3, #8]
 80106f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	430a      	orrs	r2, r1
 8010706:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801070c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010710:	2b00      	cmp	r3, #0
 8010712:	d01a      	beq.n	801074a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	685b      	ldr	r3, [r3, #4]
 801071a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	430a      	orrs	r2, r1
 8010728:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801072e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010732:	d10a      	bne.n	801074a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	430a      	orrs	r2, r1
 8010748:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801074e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010752:	2b00      	cmp	r3, #0
 8010754:	d00a      	beq.n	801076c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	430a      	orrs	r2, r1
 801076a:	605a      	str	r2, [r3, #4]
  }
}
 801076c:	bf00      	nop
 801076e:	370c      	adds	r7, #12
 8010770:	46bd      	mov	sp, r7
 8010772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010776:	4770      	bx	lr

08010778 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b098      	sub	sp, #96	@ 0x60
 801077c:	af02      	add	r7, sp, #8
 801077e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2200      	movs	r2, #0
 8010784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010788:	f7f9 faca 	bl	8009d20 <HAL_GetTick>
 801078c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	681b      	ldr	r3, [r3, #0]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f003 0308 	and.w	r3, r3, #8
 8010798:	2b08      	cmp	r3, #8
 801079a:	d12f      	bne.n	80107fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801079c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80107a0:	9300      	str	r3, [sp, #0]
 80107a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107a4:	2200      	movs	r2, #0
 80107a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80107aa:	6878      	ldr	r0, [r7, #4]
 80107ac:	f000 f88e 	bl	80108cc <UART_WaitOnFlagUntilTimeout>
 80107b0:	4603      	mov	r3, r0
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d022      	beq.n	80107fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107be:	e853 3f00 	ldrex	r3, [r3]
 80107c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80107c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80107ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	461a      	mov	r2, r3
 80107d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80107d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80107d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80107da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80107dc:	e841 2300 	strex	r3, r2, [r1]
 80107e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80107e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d1e6      	bne.n	80107b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2220      	movs	r2, #32
 80107ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	2200      	movs	r2, #0
 80107f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80107f8:	2303      	movs	r3, #3
 80107fa:	e063      	b.n	80108c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	f003 0304 	and.w	r3, r3, #4
 8010806:	2b04      	cmp	r3, #4
 8010808:	d149      	bne.n	801089e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801080a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801080e:	9300      	str	r3, [sp, #0]
 8010810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010812:	2200      	movs	r2, #0
 8010814:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f000 f857 	bl	80108cc <UART_WaitOnFlagUntilTimeout>
 801081e:	4603      	mov	r3, r0
 8010820:	2b00      	cmp	r3, #0
 8010822:	d03c      	beq.n	801089e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801082a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801082c:	e853 3f00 	ldrex	r3, [r3]
 8010830:	623b      	str	r3, [r7, #32]
   return(result);
 8010832:	6a3b      	ldr	r3, [r7, #32]
 8010834:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010838:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	461a      	mov	r2, r3
 8010840:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010842:	633b      	str	r3, [r7, #48]	@ 0x30
 8010844:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010846:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801084a:	e841 2300 	strex	r3, r2, [r1]
 801084e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010850:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010852:	2b00      	cmp	r3, #0
 8010854:	d1e6      	bne.n	8010824 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	3308      	adds	r3, #8
 801085c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	e853 3f00 	ldrex	r3, [r3]
 8010864:	60fb      	str	r3, [r7, #12]
   return(result);
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	f023 0301 	bic.w	r3, r3, #1
 801086c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	3308      	adds	r3, #8
 8010874:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010876:	61fa      	str	r2, [r7, #28]
 8010878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801087a:	69b9      	ldr	r1, [r7, #24]
 801087c:	69fa      	ldr	r2, [r7, #28]
 801087e:	e841 2300 	strex	r3, r2, [r1]
 8010882:	617b      	str	r3, [r7, #20]
   return(result);
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d1e5      	bne.n	8010856 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2220      	movs	r2, #32
 801088e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	2200      	movs	r2, #0
 8010896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801089a:	2303      	movs	r3, #3
 801089c:	e012      	b.n	80108c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2220      	movs	r2, #32
 80108a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2220      	movs	r2, #32
 80108aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	2200      	movs	r2, #0
 80108b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	2200      	movs	r2, #0
 80108b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	2200      	movs	r2, #0
 80108be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80108c2:	2300      	movs	r3, #0
}
 80108c4:	4618      	mov	r0, r3
 80108c6:	3758      	adds	r7, #88	@ 0x58
 80108c8:	46bd      	mov	sp, r7
 80108ca:	bd80      	pop	{r7, pc}

080108cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b084      	sub	sp, #16
 80108d0:	af00      	add	r7, sp, #0
 80108d2:	60f8      	str	r0, [r7, #12]
 80108d4:	60b9      	str	r1, [r7, #8]
 80108d6:	603b      	str	r3, [r7, #0]
 80108d8:	4613      	mov	r3, r2
 80108da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80108dc:	e04f      	b.n	801097e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108e4:	d04b      	beq.n	801097e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80108e6:	f7f9 fa1b 	bl	8009d20 <HAL_GetTick>
 80108ea:	4602      	mov	r2, r0
 80108ec:	683b      	ldr	r3, [r7, #0]
 80108ee:	1ad3      	subs	r3, r2, r3
 80108f0:	69ba      	ldr	r2, [r7, #24]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d302      	bcc.n	80108fc <UART_WaitOnFlagUntilTimeout+0x30>
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d101      	bne.n	8010900 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80108fc:	2303      	movs	r3, #3
 80108fe:	e04e      	b.n	801099e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f003 0304 	and.w	r3, r3, #4
 801090a:	2b00      	cmp	r3, #0
 801090c:	d037      	beq.n	801097e <UART_WaitOnFlagUntilTimeout+0xb2>
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	2b80      	cmp	r3, #128	@ 0x80
 8010912:	d034      	beq.n	801097e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010914:	68bb      	ldr	r3, [r7, #8]
 8010916:	2b40      	cmp	r3, #64	@ 0x40
 8010918:	d031      	beq.n	801097e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	69db      	ldr	r3, [r3, #28]
 8010920:	f003 0308 	and.w	r3, r3, #8
 8010924:	2b08      	cmp	r3, #8
 8010926:	d110      	bne.n	801094a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	2208      	movs	r2, #8
 801092e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010930:	68f8      	ldr	r0, [r7, #12]
 8010932:	f000 f920 	bl	8010b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2208      	movs	r2, #8
 801093a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	2200      	movs	r2, #0
 8010942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010946:	2301      	movs	r3, #1
 8010948:	e029      	b.n	801099e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	69db      	ldr	r3, [r3, #28]
 8010950:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010954:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010958:	d111      	bne.n	801097e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010962:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f000 f906 	bl	8010b76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2220      	movs	r2, #32
 801096e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2200      	movs	r2, #0
 8010976:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801097a:	2303      	movs	r3, #3
 801097c:	e00f      	b.n	801099e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	69da      	ldr	r2, [r3, #28]
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	4013      	ands	r3, r2
 8010988:	68ba      	ldr	r2, [r7, #8]
 801098a:	429a      	cmp	r2, r3
 801098c:	bf0c      	ite	eq
 801098e:	2301      	moveq	r3, #1
 8010990:	2300      	movne	r3, #0
 8010992:	b2db      	uxtb	r3, r3
 8010994:	461a      	mov	r2, r3
 8010996:	79fb      	ldrb	r3, [r7, #7]
 8010998:	429a      	cmp	r2, r3
 801099a:	d0a0      	beq.n	80108de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801099c:	2300      	movs	r3, #0
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
	...

080109a8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b096      	sub	sp, #88	@ 0x58
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	60f8      	str	r0, [r7, #12]
 80109b0:	60b9      	str	r1, [r7, #8]
 80109b2:	4613      	mov	r3, r2
 80109b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	68ba      	ldr	r2, [r7, #8]
 80109ba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	88fa      	ldrh	r2, [r7, #6]
 80109c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2200      	movs	r2, #0
 80109c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	2222      	movs	r2, #34	@ 0x22
 80109d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d02d      	beq.n	8010a3a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109e4:	4a40      	ldr	r2, [pc, #256]	@ (8010ae8 <UART_Start_Receive_DMA+0x140>)
 80109e6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109ee:	4a3f      	ldr	r2, [pc, #252]	@ (8010aec <UART_Start_Receive_DMA+0x144>)
 80109f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109f8:	4a3d      	ldr	r2, [pc, #244]	@ (8010af0 <UART_Start_Receive_DMA+0x148>)
 80109fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a02:	2200      	movs	r2, #0
 8010a04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	3324      	adds	r3, #36	@ 0x24
 8010a12:	4619      	mov	r1, r3
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010a18:	461a      	mov	r2, r3
 8010a1a:	88fb      	ldrh	r3, [r7, #6]
 8010a1c:	f7fa ffbc 	bl	800b998 <HAL_DMA_Start_IT>
 8010a20:	4603      	mov	r3, r0
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d009      	beq.n	8010a3a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	2210      	movs	r2, #16
 8010a2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2220      	movs	r2, #32
 8010a32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8010a36:	2301      	movs	r3, #1
 8010a38:	e051      	b.n	8010ade <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	691b      	ldr	r3, [r3, #16]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d018      	beq.n	8010a74 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a4a:	e853 3f00 	ldrex	r3, [r3]
 8010a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010a56:	657b      	str	r3, [r7, #84]	@ 0x54
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010a62:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a64:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010a66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010a68:	e841 2300 	strex	r3, r2, [r1]
 8010a6c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010a6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d1e6      	bne.n	8010a42 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	3308      	adds	r3, #8
 8010a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a7e:	e853 3f00 	ldrex	r3, [r3]
 8010a82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a86:	f043 0301 	orr.w	r3, r3, #1
 8010a8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	3308      	adds	r3, #8
 8010a92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010a94:	637a      	str	r2, [r7, #52]	@ 0x34
 8010a96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8010a9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010a9c:	e841 2300 	strex	r3, r2, [r1]
 8010aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8010aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d1e5      	bne.n	8010a74 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	3308      	adds	r3, #8
 8010aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ab0:	697b      	ldr	r3, [r7, #20]
 8010ab2:	e853 3f00 	ldrex	r3, [r3]
 8010ab6:	613b      	str	r3, [r7, #16]
   return(result);
 8010ab8:	693b      	ldr	r3, [r7, #16]
 8010aba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	3308      	adds	r3, #8
 8010ac6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010ac8:	623a      	str	r2, [r7, #32]
 8010aca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010acc:	69f9      	ldr	r1, [r7, #28]
 8010ace:	6a3a      	ldr	r2, [r7, #32]
 8010ad0:	e841 2300 	strex	r3, r2, [r1]
 8010ad4:	61bb      	str	r3, [r7, #24]
   return(result);
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d1e5      	bne.n	8010aa8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8010adc:	2300      	movs	r3, #0
}
 8010ade:	4618      	mov	r0, r3
 8010ae0:	3758      	adds	r7, #88	@ 0x58
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	08010c43 	.word	0x08010c43
 8010aec:	08010d77 	.word	0x08010d77
 8010af0:	08010dbd 	.word	0x08010dbd

08010af4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b08f      	sub	sp, #60	@ 0x3c
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b02:	6a3b      	ldr	r3, [r7, #32]
 8010b04:	e853 3f00 	ldrex	r3, [r3]
 8010b08:	61fb      	str	r3, [r7, #28]
   return(result);
 8010b0a:	69fb      	ldr	r3, [r7, #28]
 8010b0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8010b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	461a      	mov	r2, r3
 8010b18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010b1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010b20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010b22:	e841 2300 	strex	r3, r2, [r1]
 8010b26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d1e6      	bne.n	8010afc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	3308      	adds	r3, #8
 8010b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	e853 3f00 	ldrex	r3, [r3]
 8010b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8010b44:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	3308      	adds	r3, #8
 8010b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010b4e:	61ba      	str	r2, [r7, #24]
 8010b50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b52:	6979      	ldr	r1, [r7, #20]
 8010b54:	69ba      	ldr	r2, [r7, #24]
 8010b56:	e841 2300 	strex	r3, r2, [r1]
 8010b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8010b5c:	693b      	ldr	r3, [r7, #16]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d1e5      	bne.n	8010b2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	2220      	movs	r2, #32
 8010b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8010b6a:	bf00      	nop
 8010b6c:	373c      	adds	r7, #60	@ 0x3c
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr

08010b76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010b76:	b480      	push	{r7}
 8010b78:	b095      	sub	sp, #84	@ 0x54
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010b86:	e853 3f00 	ldrex	r3, [r3]
 8010b8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	461a      	mov	r2, r3
 8010b9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010b9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010b9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ba0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010ba2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010ba4:	e841 2300 	strex	r3, r2, [r1]
 8010ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d1e6      	bne.n	8010b7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	3308      	adds	r3, #8
 8010bb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb8:	6a3b      	ldr	r3, [r7, #32]
 8010bba:	e853 3f00 	ldrex	r3, [r3]
 8010bbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8010bc0:	69fb      	ldr	r3, [r7, #28]
 8010bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010bc6:	f023 0301 	bic.w	r3, r3, #1
 8010bca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	3308      	adds	r3, #8
 8010bd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010bd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010bda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010bdc:	e841 2300 	strex	r3, r2, [r1]
 8010be0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d1e3      	bne.n	8010bb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010bec:	2b01      	cmp	r3, #1
 8010bee:	d118      	bne.n	8010c22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	e853 3f00 	ldrex	r3, [r3]
 8010bfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	f023 0310 	bic.w	r3, r3, #16
 8010c04:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010c0e:	61bb      	str	r3, [r7, #24]
 8010c10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c12:	6979      	ldr	r1, [r7, #20]
 8010c14:	69ba      	ldr	r2, [r7, #24]
 8010c16:	e841 2300 	strex	r3, r2, [r1]
 8010c1a:	613b      	str	r3, [r7, #16]
   return(result);
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d1e6      	bne.n	8010bf0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	2220      	movs	r2, #32
 8010c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8010c36:	bf00      	nop
 8010c38:	3754      	adds	r7, #84	@ 0x54
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr

08010c42 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b09c      	sub	sp, #112	@ 0x70
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	f003 0320 	and.w	r3, r3, #32
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d171      	bne.n	8010d42 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8010c5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c60:	2200      	movs	r2, #0
 8010c62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c68:	681b      	ldr	r3, [r3, #0]
 8010c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c6e:	e853 3f00 	ldrex	r3, [r3]
 8010c72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010c74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010c76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010c7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	461a      	mov	r2, r3
 8010c82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010c84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010c86:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010c8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010c8c:	e841 2300 	strex	r3, r2, [r1]
 8010c90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d1e6      	bne.n	8010c66 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	3308      	adds	r3, #8
 8010c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ca2:	e853 3f00 	ldrex	r3, [r3]
 8010ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010caa:	f023 0301 	bic.w	r3, r3, #1
 8010cae:	667b      	str	r3, [r7, #100]	@ 0x64
 8010cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	3308      	adds	r3, #8
 8010cb6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010cb8:	647a      	str	r2, [r7, #68]	@ 0x44
 8010cba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010cc0:	e841 2300 	strex	r3, r2, [r1]
 8010cc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d1e5      	bne.n	8010c98 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	3308      	adds	r3, #8
 8010cd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cd6:	e853 3f00 	ldrex	r3, [r3]
 8010cda:	623b      	str	r3, [r7, #32]
   return(result);
 8010cdc:	6a3b      	ldr	r3, [r7, #32]
 8010cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ce2:	663b      	str	r3, [r7, #96]	@ 0x60
 8010ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	3308      	adds	r3, #8
 8010cea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010cec:	633a      	str	r2, [r7, #48]	@ 0x30
 8010cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010cf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010cf4:	e841 2300 	strex	r3, r2, [r1]
 8010cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d1e5      	bne.n	8010ccc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d02:	2220      	movs	r2, #32
 8010d04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d0c:	2b01      	cmp	r3, #1
 8010d0e:	d118      	bne.n	8010d42 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	e853 3f00 	ldrex	r3, [r3]
 8010d1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	f023 0310 	bic.w	r3, r3, #16
 8010d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010d2e:	61fb      	str	r3, [r7, #28]
 8010d30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d32:	69b9      	ldr	r1, [r7, #24]
 8010d34:	69fa      	ldr	r2, [r7, #28]
 8010d36:	e841 2300 	strex	r3, r2, [r1]
 8010d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d1e6      	bne.n	8010d10 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d44:	2200      	movs	r2, #0
 8010d46:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d4c:	2b01      	cmp	r3, #1
 8010d4e:	d109      	bne.n	8010d64 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8010d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d52:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010d56:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010d58:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010d60:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010d62:	e004      	b.n	8010d6e <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8010d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010d66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010d6a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8010d6c:	4798      	blx	r3
}
 8010d6e:	bf00      	nop
 8010d70:	3770      	adds	r7, #112	@ 0x70
 8010d72:	46bd      	mov	sp, r7
 8010d74:	bd80      	pop	{r7, pc}

08010d76 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010d76:	b580      	push	{r7, lr}
 8010d78:	b084      	sub	sp, #16
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d82:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	2201      	movs	r2, #1
 8010d88:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010d8e:	2b01      	cmp	r3, #1
 8010d90:	d10b      	bne.n	8010daa <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010d98:	68fa      	ldr	r2, [r7, #12]
 8010d9a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010d9e:	0852      	lsrs	r2, r2, #1
 8010da0:	b292      	uxth	r2, r2
 8010da2:	4611      	mov	r1, r2
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010da8:	e004      	b.n	8010db4 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010db0:	68f8      	ldr	r0, [r7, #12]
 8010db2:	4798      	blx	r3
}
 8010db4:	bf00      	nop
 8010db6:	3710      	adds	r7, #16
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b086      	sub	sp, #24
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010dc8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010dd0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010dd8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010dda:	697b      	ldr	r3, [r7, #20]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	689b      	ldr	r3, [r3, #8]
 8010de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010de4:	2b80      	cmp	r3, #128	@ 0x80
 8010de6:	d109      	bne.n	8010dfc <UART_DMAError+0x40>
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	2b21      	cmp	r3, #33	@ 0x21
 8010dec:	d106      	bne.n	8010dfc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	2200      	movs	r2, #0
 8010df2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8010df6:	6978      	ldr	r0, [r7, #20]
 8010df8:	f7ff fe7c 	bl	8010af4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010dfc:	697b      	ldr	r3, [r7, #20]
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	689b      	ldr	r3, [r3, #8]
 8010e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010e06:	2b40      	cmp	r3, #64	@ 0x40
 8010e08:	d109      	bne.n	8010e1e <UART_DMAError+0x62>
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	2b22      	cmp	r3, #34	@ 0x22
 8010e0e:	d106      	bne.n	8010e1e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	2200      	movs	r2, #0
 8010e14:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8010e18:	6978      	ldr	r0, [r7, #20]
 8010e1a:	f7ff feac 	bl	8010b76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010e24:	f043 0210 	orr.w	r2, r3, #16
 8010e28:	697b      	ldr	r3, [r7, #20]
 8010e2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010e34:	6978      	ldr	r0, [r7, #20]
 8010e36:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e38:	bf00      	nop
 8010e3a:	3718      	adds	r7, #24
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	2200      	movs	r2, #0
 8010e52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010e5c:	68f8      	ldr	r0, [r7, #12]
 8010e5e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010e60:	bf00      	nop
 8010e62:	3710      	adds	r7, #16
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b088      	sub	sp, #32
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	e853 3f00 	ldrex	r3, [r3]
 8010e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010e84:	61fb      	str	r3, [r7, #28]
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	69fb      	ldr	r3, [r7, #28]
 8010e8e:	61bb      	str	r3, [r7, #24]
 8010e90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e92:	6979      	ldr	r1, [r7, #20]
 8010e94:	69ba      	ldr	r2, [r7, #24]
 8010e96:	e841 2300 	strex	r3, r2, [r1]
 8010e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8010e9c:	693b      	ldr	r3, [r7, #16]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d1e6      	bne.n	8010e70 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2220      	movs	r2, #32
 8010ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2200      	movs	r2, #0
 8010eae:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010eba:	bf00      	nop
 8010ebc:	3720      	adds	r7, #32
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	bd80      	pop	{r7, pc}

08010ec2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010ec2:	b480      	push	{r7}
 8010ec4:	b083      	sub	sp, #12
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010eca:	bf00      	nop
 8010ecc:	370c      	adds	r7, #12
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed4:	4770      	bx	lr

08010ed6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010ed6:	b480      	push	{r7}
 8010ed8:	b083      	sub	sp, #12
 8010eda:	af00      	add	r7, sp, #0
 8010edc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010ede:	bf00      	nop
 8010ee0:	370c      	adds	r7, #12
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee8:	4770      	bx	lr

08010eea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010eea:	b480      	push	{r7}
 8010eec:	b083      	sub	sp, #12
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010ef2:	bf00      	nop
 8010ef4:	370c      	adds	r7, #12
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010efc:	4770      	bx	lr

08010efe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010efe:	b480      	push	{r7}
 8010f00:	b085      	sub	sp, #20
 8010f02:	af00      	add	r7, sp, #0
 8010f04:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d101      	bne.n	8010f14 <HAL_UARTEx_DisableFifoMode+0x16>
 8010f10:	2302      	movs	r3, #2
 8010f12:	e027      	b.n	8010f64 <HAL_UARTEx_DisableFifoMode+0x66>
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	2201      	movs	r2, #1
 8010f18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2224      	movs	r2, #36	@ 0x24
 8010f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	681a      	ldr	r2, [r3, #0]
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	f022 0201 	bic.w	r2, r2, #1
 8010f3a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8010f42:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2200      	movs	r2, #0
 8010f48:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	681b      	ldr	r3, [r3, #0]
 8010f4e:	68fa      	ldr	r2, [r7, #12]
 8010f50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	2220      	movs	r2, #32
 8010f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010f62:	2300      	movs	r3, #0
}
 8010f64:	4618      	mov	r0, r3
 8010f66:	3714      	adds	r7, #20
 8010f68:	46bd      	mov	sp, r7
 8010f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f6e:	4770      	bx	lr

08010f70 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	6078      	str	r0, [r7, #4]
 8010f78:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d101      	bne.n	8010f88 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010f84:	2302      	movs	r3, #2
 8010f86:	e02d      	b.n	8010fe4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	2224      	movs	r2, #36	@ 0x24
 8010f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f022 0201 	bic.w	r2, r2, #1
 8010fae:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	689b      	ldr	r3, [r3, #8]
 8010fb6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	683a      	ldr	r2, [r7, #0]
 8010fc0:	430a      	orrs	r2, r1
 8010fc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f000 f84f 	bl	8011068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	68fa      	ldr	r2, [r7, #12]
 8010fd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	2220      	movs	r2, #32
 8010fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	2200      	movs	r2, #0
 8010fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010fe2:	2300      	movs	r3, #0
}
 8010fe4:	4618      	mov	r0, r3
 8010fe6:	3710      	adds	r7, #16
 8010fe8:	46bd      	mov	sp, r7
 8010fea:	bd80      	pop	{r7, pc}

08010fec <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b084      	sub	sp, #16
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
 8010ff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010ffc:	2b01      	cmp	r3, #1
 8010ffe:	d101      	bne.n	8011004 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011000:	2302      	movs	r3, #2
 8011002:	e02d      	b.n	8011060 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2201      	movs	r2, #1
 8011008:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	2224      	movs	r2, #36	@ 0x24
 8011010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	681a      	ldr	r2, [r3, #0]
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	f022 0201 	bic.w	r2, r2, #1
 801102a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	689b      	ldr	r3, [r3, #8]
 8011032:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	683a      	ldr	r2, [r7, #0]
 801103c:	430a      	orrs	r2, r1
 801103e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f000 f811 	bl	8011068 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	68fa      	ldr	r2, [r7, #12]
 801104c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2220      	movs	r2, #32
 8011052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	2200      	movs	r2, #0
 801105a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801105e:	2300      	movs	r3, #0
}
 8011060:	4618      	mov	r0, r3
 8011062:	3710      	adds	r7, #16
 8011064:	46bd      	mov	sp, r7
 8011066:	bd80      	pop	{r7, pc}

08011068 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011068:	b480      	push	{r7}
 801106a:	b085      	sub	sp, #20
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011074:	2b00      	cmp	r3, #0
 8011076:	d108      	bne.n	801108a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2201      	movs	r2, #1
 801107c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2201      	movs	r2, #1
 8011084:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011088:	e031      	b.n	80110ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801108a:	2308      	movs	r3, #8
 801108c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801108e:	2308      	movs	r3, #8
 8011090:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	689b      	ldr	r3, [r3, #8]
 8011098:	0e5b      	lsrs	r3, r3, #25
 801109a:	b2db      	uxtb	r3, r3
 801109c:	f003 0307 	and.w	r3, r3, #7
 80110a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	689b      	ldr	r3, [r3, #8]
 80110a8:	0f5b      	lsrs	r3, r3, #29
 80110aa:	b2db      	uxtb	r3, r3
 80110ac:	f003 0307 	and.w	r3, r3, #7
 80110b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80110b2:	7bbb      	ldrb	r3, [r7, #14]
 80110b4:	7b3a      	ldrb	r2, [r7, #12]
 80110b6:	4911      	ldr	r1, [pc, #68]	@ (80110fc <UARTEx_SetNbDataToProcess+0x94>)
 80110b8:	5c8a      	ldrb	r2, [r1, r2]
 80110ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80110be:	7b3a      	ldrb	r2, [r7, #12]
 80110c0:	490f      	ldr	r1, [pc, #60]	@ (8011100 <UARTEx_SetNbDataToProcess+0x98>)
 80110c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80110c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80110c8:	b29a      	uxth	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80110d0:	7bfb      	ldrb	r3, [r7, #15]
 80110d2:	7b7a      	ldrb	r2, [r7, #13]
 80110d4:	4909      	ldr	r1, [pc, #36]	@ (80110fc <UARTEx_SetNbDataToProcess+0x94>)
 80110d6:	5c8a      	ldrb	r2, [r1, r2]
 80110d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80110dc:	7b7a      	ldrb	r2, [r7, #13]
 80110de:	4908      	ldr	r1, [pc, #32]	@ (8011100 <UARTEx_SetNbDataToProcess+0x98>)
 80110e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80110e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80110e6:	b29a      	uxth	r2, r3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80110ee:	bf00      	nop
 80110f0:	3714      	adds	r7, #20
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr
 80110fa:	bf00      	nop
 80110fc:	08013bc8 	.word	0x08013bc8
 8011100:	08013bd0 	.word	0x08013bd0

08011104 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011104:	b480      	push	{r7}
 8011106:	b08b      	sub	sp, #44	@ 0x2c
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8011116:	68bb      	ldr	r3, [r7, #8]
 8011118:	685b      	ldr	r3, [r3, #4]
 801111a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	685b      	ldr	r3, [r3, #4]
 8011120:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	881b      	ldrh	r3, [r3, #0]
 8011126:	461a      	mov	r2, r3
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	885b      	ldrh	r3, [r3, #2]
 801112c:	fb02 f303 	mul.w	r3, r2, r3
 8011130:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011136:	e013      	b.n	8011160 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8011138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801113a:	1d1a      	adds	r2, r3, #4
 801113c:	627a      	str	r2, [r7, #36]	@ 0x24
 801113e:	ed93 7a00 	vldr	s14, [r3]
 8011142:	6a3b      	ldr	r3, [r7, #32]
 8011144:	1d1a      	adds	r2, r3, #4
 8011146:	623a      	str	r2, [r7, #32]
 8011148:	edd3 7a00 	vldr	s15, [r3]
 801114c:	69fb      	ldr	r3, [r7, #28]
 801114e:	1d1a      	adds	r2, r3, #4
 8011150:	61fa      	str	r2, [r7, #28]
 8011152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011156:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 801115a:	69bb      	ldr	r3, [r7, #24]
 801115c:	3b01      	subs	r3, #1
 801115e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8011160:	69bb      	ldr	r3, [r7, #24]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d1e8      	bne.n	8011138 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011166:	2300      	movs	r3, #0
 8011168:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 801116a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801116e:	4618      	mov	r0, r3
 8011170:	372c      	adds	r7, #44	@ 0x2c
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr

0801117a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 801117a:	b480      	push	{r7}
 801117c:	b085      	sub	sp, #20
 801117e:	af00      	add	r7, sp, #0
 8011180:	60f8      	str	r0, [r7, #12]
 8011182:	607b      	str	r3, [r7, #4]
 8011184:	460b      	mov	r3, r1
 8011186:	817b      	strh	r3, [r7, #10]
 8011188:	4613      	mov	r3, r2
 801118a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	897a      	ldrh	r2, [r7, #10]
 8011190:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	893a      	ldrh	r2, [r7, #8]
 8011196:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	687a      	ldr	r2, [r7, #4]
 801119c:	605a      	str	r2, [r3, #4]
}
 801119e:	bf00      	nop
 80111a0:	3714      	adds	r7, #20
 80111a2:	46bd      	mov	sp, r7
 80111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a8:	4770      	bx	lr

080111aa <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80111aa:	b480      	push	{r7}
 80111ac:	b0bb      	sub	sp, #236	@ 0xec
 80111ae:	af00      	add	r7, sp, #0
 80111b0:	6078      	str	r0, [r7, #4]
 80111b2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	685b      	ldr	r3, [r3, #4]
 80111b8:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	685b      	ldr	r3, [r3, #4]
 80111be:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	881b      	ldrh	r3, [r3, #0]
 80111c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	885b      	ldrh	r3, [r3, #2]
 80111ca:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 80111cc:	f04f 0300 	mov.w	r3, #0
 80111d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80111d4:	f04f 0300 	mov.w	r3, #0
 80111d8:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 80111da:	2300      	movs	r3, #0
 80111dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 80111e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80111e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 80111e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80111e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 80111ec:	e03b      	b.n	8011266 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 80111ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80111f0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80111f4:	1ad3      	subs	r3, r2, r3
 80111f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 80111fa:	e00c      	b.n	8011216 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 80111fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011200:	1d1a      	adds	r2, r3, #4
 8011202:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011206:	f04f 0200 	mov.w	r2, #0
 801120a:	601a      	str	r2, [r3, #0]
        j--;
 801120c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011210:	3b01      	subs	r3, #1
 8011212:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011216:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801121a:	2b00      	cmp	r3, #0
 801121c:	d1ee      	bne.n	80111fc <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 801121e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8011222:	1d1a      	adds	r2, r3, #4
 8011224:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011228:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801122c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 801122e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011232:	3b01      	subs	r3, #1
 8011234:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011238:	e00c      	b.n	8011254 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 801123a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801123e:	1d1a      	adds	r2, r3, #4
 8011240:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8011244:	f04f 0200 	mov.w	r2, #0
 8011248:	601a      	str	r2, [r3, #0]
        j--;
 801124a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801124e:	3b01      	subs	r3, #1
 8011250:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8011254:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8011258:	2b00      	cmp	r3, #0
 801125a:	d1ee      	bne.n	801123a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 801125c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8011260:	3b01      	subs	r3, #1
 8011262:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8011266:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801126a:	2b00      	cmp	r3, #0
 801126c:	d1bf      	bne.n	80111ee <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 801126e:	2300      	movs	r3, #0
 8011270:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011274:	e2c7      	b.n	8011806 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8011276:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801127a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	685a      	ldr	r2, [r3, #4]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	885b      	ldrh	r3, [r3, #2]
 8011284:	3301      	adds	r3, #1
 8011286:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 801128a:	fb01 f303 	mul.w	r3, r1, r3
 801128e:	009b      	lsls	r3, r3, #2
 8011290:	4413      	add	r3, r2
 8011292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 8011296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 80112a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80112a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80112a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80112ac:	3301      	adds	r3, #1
 80112ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80112b2:	e02c      	b.n	801130e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	685a      	ldr	r2, [r3, #4]
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	885b      	ldrh	r3, [r3, #2]
 80112bc:	4619      	mov	r1, r3
 80112be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80112c2:	fb03 f101 	mul.w	r1, r3, r1
 80112c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80112ca:	440b      	add	r3, r1
 80112cc:	009b      	lsls	r3, r3, #2
 80112ce:	4413      	add	r3, r2
 80112d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 80112d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 80112dc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80112e0:	eeb0 7ae7 	vabs.f32	s14, s15
 80112e4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80112e8:	eef0 7ae7 	vabs.f32	s15, s15
 80112ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80112f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112f4:	dd06      	ble.n	8011304 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 80112f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80112fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 80112fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011300:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8011304:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011308:	3301      	adds	r3, #1
 801130a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801130e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011312:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011314:	429a      	cmp	r2, r3
 8011316:	d3cd      	bcc.n	80112b4 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8011318:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801131c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011324:	f000 809b 	beq.w	801145e <arm_mat_inverse_f32+0x2b4>
 8011328:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801132c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011330:	429a      	cmp	r2, r3
 8011332:	f000 8094 	beq.w	801145e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	885b      	ldrh	r3, [r3, #2]
 801134a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801134c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801134e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011352:	1ad3      	subs	r3, r2, r3
 8011354:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011356:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011358:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801135a:	fb03 f202 	mul.w	r2, r3, r2
 801135e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011362:	4413      	add	r3, r2
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801136a:	4413      	add	r3, r2
 801136c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8011370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011372:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011376:	fb03 f202 	mul.w	r2, r3, r2
 801137a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801137e:	4413      	add	r3, r2
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8011386:	4413      	add	r3, r2
 8011388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801138c:	2300      	movs	r3, #0
 801138e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8011392:	e018      	b.n	80113c6 <arm_mat_inverse_f32+0x21c>
 8011394:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801139c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80113a0:	1d1a      	adds	r2, r3, #4
 80113a2:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80113a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80113aa:	6812      	ldr	r2, [r2, #0]
 80113ac:	601a      	str	r2, [r3, #0]
 80113ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80113b2:	1d1a      	adds	r2, r3, #4
 80113b4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80113b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80113ba:	601a      	str	r2, [r3, #0]
 80113bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80113c0:	3301      	adds	r3, #1
 80113c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80113c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80113ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113cc:	429a      	cmp	r2, r3
 80113ce:	dbe1      	blt.n	8011394 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 80113d0:	683b      	ldr	r3, [r7, #0]
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80113d8:	683b      	ldr	r3, [r7, #0]
 80113da:	685b      	ldr	r3, [r3, #4]
 80113dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	885b      	ldrh	r3, [r3, #2]
 80113e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80113e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80113ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80113ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80113ee:	fb02 f303 	mul.w	r3, r2, r3
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80113f8:	4413      	add	r3, r2
 80113fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80113fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011400:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8011404:	fb02 f303 	mul.w	r3, r2, r3
 8011408:	009b      	lsls	r3, r3, #2
 801140a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801140e:	4413      	add	r3, r2
 8011410:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011414:	2300      	movs	r3, #0
 8011416:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801141a:	e018      	b.n	801144e <arm_mat_inverse_f32+0x2a4>
 801141c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011424:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011428:	1d1a      	adds	r2, r3, #4
 801142a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801142e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8011432:	6812      	ldr	r2, [r2, #0]
 8011434:	601a      	str	r2, [r3, #0]
 8011436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801143a:	1d1a      	adds	r2, r3, #4
 801143c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8011440:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011442:	601a      	str	r2, [r3, #0]
 8011444:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8011448:	3301      	adds	r3, #1
 801144a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801144e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8011452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011454:	429a      	cmp	r2, r3
 8011456:	dbe1      	blt.n	801141c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8011458:	2301      	movs	r3, #1
 801145a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 801145e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8011462:	2b01      	cmp	r3, #1
 8011464:	d009      	beq.n	801147a <arm_mat_inverse_f32+0x2d0>
 8011466:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801146a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011472:	d102      	bne.n	801147a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8011474:	f06f 0304 	mvn.w	r3, #4
 8011478:	e208      	b.n	801188c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 801147a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801147e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8011482:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011486:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	885b      	ldrh	r3, [r3, #2]
 8011496:	637b      	str	r3, [r7, #52]	@ 0x34
 8011498:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801149a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801149e:	1ad3      	subs	r3, r2, r3
 80114a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80114a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80114a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80114a6:	fb03 f202 	mul.w	r2, r3, r2
 80114aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80114ae:	4413      	add	r3, r2
 80114b0:	009b      	lsls	r3, r3, #2
 80114b2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80114b6:	4413      	add	r3, r2
 80114b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80114bc:	2300      	movs	r3, #0
 80114be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80114c2:	e011      	b.n	80114e8 <arm_mat_inverse_f32+0x33e>
 80114c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80114c8:	1d1a      	adds	r2, r3, #4
 80114ca:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80114ce:	ed93 7a00 	vldr	s14, [r3]
 80114d2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80114d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80114da:	edc3 7a00 	vstr	s15, [r3]
 80114de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80114e2:	3301      	adds	r3, #1
 80114e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80114e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80114ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114ee:	429a      	cmp	r2, r3
 80114f0:	dbe8      	blt.n	80114c4 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80114fa:	683b      	ldr	r3, [r7, #0]
 80114fc:	885b      	ldrh	r3, [r3, #2]
 80114fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011502:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011506:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011508:	fb02 f303 	mul.w	r3, r2, r3
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011512:	4413      	add	r3, r2
 8011514:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011518:	2300      	movs	r3, #0
 801151a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801151e:	e011      	b.n	8011544 <arm_mat_inverse_f32+0x39a>
 8011520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8011524:	1d1a      	adds	r2, r3, #4
 8011526:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 801152a:	ed93 7a00 	vldr	s14, [r3]
 801152e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011536:	edc3 7a00 	vstr	s15, [r3]
 801153a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801153e:	3301      	adds	r3, #1
 8011540:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011544:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8011548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801154a:	429a      	cmp	r2, r3
 801154c:	dbe8      	blt.n	8011520 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 801154e:	2300      	movs	r3, #0
 8011550:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8011554:	e0ae      	b.n	80116b4 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	685a      	ldr	r2, [r3, #4]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	885b      	ldrh	r3, [r3, #2]
 801155e:	4619      	mov	r1, r3
 8011560:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8011564:	fb03 f101 	mul.w	r1, r3, r1
 8011568:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801156c:	440b      	add	r3, r1
 801156e:	009b      	lsls	r3, r3, #2
 8011570:	4413      	add	r3, r2
 8011572:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8011576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	685b      	ldr	r3, [r3, #4]
 801158c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	885b      	ldrh	r3, [r3, #2]
 8011594:	617b      	str	r3, [r7, #20]
 8011596:	697a      	ldr	r2, [r7, #20]
 8011598:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801159c:	1ad3      	subs	r3, r2, r3
 801159e:	613b      	str	r3, [r7, #16]
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80115a6:	fb03 f202 	mul.w	r2, r3, r2
 80115aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80115ae:	4413      	add	r3, r2
 80115b0:	009b      	lsls	r3, r3, #2
 80115b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80115b6:	4413      	add	r3, r2
 80115b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80115c0:	fb03 f202 	mul.w	r2, r3, r2
 80115c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80115c8:	4413      	add	r3, r2
 80115ca:	009b      	lsls	r3, r3, #2
 80115cc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80115d0:	4413      	add	r3, r2
 80115d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80115d6:	2300      	movs	r3, #0
 80115d8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80115dc:	e01a      	b.n	8011614 <arm_mat_inverse_f32+0x46a>
 80115de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80115e2:	1d1a      	adds	r2, r3, #4
 80115e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80115e8:	ed93 7a00 	vldr	s14, [r3]
 80115ec:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80115f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80115f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80115f8:	1d1a      	adds	r2, r3, #4
 80115fa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80115fe:	ed93 7a00 	vldr	s14, [r3]
 8011602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011606:	edc3 7a00 	vstr	s15, [r3]
 801160a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801160e:	3301      	adds	r3, #1
 8011610:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011614:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	429a      	cmp	r2, r3
 801161c:	dbdf      	blt.n	80115de <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	685b      	ldr	r3, [r3, #4]
 8011622:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	885b      	ldrh	r3, [r3, #2]
 8011632:	60fb      	str	r3, [r7, #12]
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	60bb      	str	r3, [r7, #8]
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801163e:	fb02 f303 	mul.w	r3, r2, r3
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011648:	4413      	add	r3, r2
 801164a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011652:	fb02 f303 	mul.w	r3, r2, r3
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801165c:	4413      	add	r3, r2
 801165e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011662:	2300      	movs	r3, #0
 8011664:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011668:	e01a      	b.n	80116a0 <arm_mat_inverse_f32+0x4f6>
 801166a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801166e:	1d1a      	adds	r2, r3, #4
 8011670:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8011674:	ed93 7a00 	vldr	s14, [r3]
 8011678:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011680:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011684:	1d1a      	adds	r2, r3, #4
 8011686:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801168a:	ed93 7a00 	vldr	s14, [r3]
 801168e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011692:	edc3 7a00 	vstr	s15, [r3]
 8011696:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801169a:	3301      	adds	r3, #1
 801169c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80116a0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	dbdf      	blt.n	801166a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 80116aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80116ae:	3301      	adds	r3, #1
 80116b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80116b4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80116b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116ba:	429a      	cmp	r2, r3
 80116bc:	f4ff af4b 	bcc.w	8011556 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80116c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80116c2:	3301      	adds	r3, #1
 80116c4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80116c8:	e092      	b.n	80117f0 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	685a      	ldr	r2, [r3, #4]
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	885b      	ldrh	r3, [r3, #2]
 80116d2:	4619      	mov	r1, r3
 80116d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80116d8:	fb03 f101 	mul.w	r1, r3, r1
 80116dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80116e0:	440b      	add	r3, r1
 80116e2:	009b      	lsls	r3, r3, #2
 80116e4:	4413      	add	r3, r2
 80116e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 80116ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	685b      	ldr	r3, [r3, #4]
 80116fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	885b      	ldrh	r3, [r3, #2]
 8011704:	627b      	str	r3, [r7, #36]	@ 0x24
 8011706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011708:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801170c:	1ad3      	subs	r3, r2, r3
 801170e:	623b      	str	r3, [r7, #32]
 8011710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011712:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011716:	fb03 f202 	mul.w	r2, r3, r2
 801171a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801171e:	4413      	add	r3, r2
 8011720:	009b      	lsls	r3, r3, #2
 8011722:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011724:	4413      	add	r3, r2
 8011726:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801172a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801172c:	fb03 f202 	mul.w	r2, r3, r2
 8011730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011734:	4413      	add	r3, r2
 8011736:	009b      	lsls	r3, r3, #2
 8011738:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801173a:	4413      	add	r3, r2
 801173c:	677b      	str	r3, [r7, #116]	@ 0x74
 801173e:	2300      	movs	r3, #0
 8011740:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011742:	e014      	b.n	801176e <arm_mat_inverse_f32+0x5c4>
 8011744:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011746:	1d1a      	adds	r2, r3, #4
 8011748:	677a      	str	r2, [r7, #116]	@ 0x74
 801174a:	ed93 7a00 	vldr	s14, [r3]
 801174e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011756:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011758:	1d1a      	adds	r2, r3, #4
 801175a:	67ba      	str	r2, [r7, #120]	@ 0x78
 801175c:	ed93 7a00 	vldr	s14, [r3]
 8011760:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011764:	edc3 7a00 	vstr	s15, [r3]
 8011768:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801176a:	3301      	adds	r3, #1
 801176c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801176e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011770:	6a3b      	ldr	r3, [r7, #32]
 8011772:	429a      	cmp	r2, r3
 8011774:	dbe6      	blt.n	8011744 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	885b      	ldrh	r3, [r3, #2]
 8011786:	61fb      	str	r3, [r7, #28]
 8011788:	69fb      	ldr	r3, [r7, #28]
 801178a:	61bb      	str	r3, [r7, #24]
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8011792:	fb02 f303 	mul.w	r3, r2, r3
 8011796:	009b      	lsls	r3, r3, #2
 8011798:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801179a:	4413      	add	r3, r2
 801179c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80117a2:	fb02 f303 	mul.w	r3, r2, r3
 80117a6:	009b      	lsls	r3, r3, #2
 80117a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80117aa:	4413      	add	r3, r2
 80117ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80117ae:	2300      	movs	r3, #0
 80117b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80117b2:	e014      	b.n	80117de <arm_mat_inverse_f32+0x634>
 80117b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80117b6:	1d1a      	adds	r2, r3, #4
 80117b8:	66ba      	str	r2, [r7, #104]	@ 0x68
 80117ba:	ed93 7a00 	vldr	s14, [r3]
 80117be:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80117c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80117c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80117c8:	1d1a      	adds	r2, r3, #4
 80117ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80117cc:	ed93 7a00 	vldr	s14, [r3]
 80117d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80117d4:	edc3 7a00 	vstr	s15, [r3]
 80117d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80117da:	3301      	adds	r3, #1
 80117dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80117de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80117e0:	69bb      	ldr	r3, [r7, #24]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	dbe6      	blt.n	80117b4 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80117e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80117ea:	3301      	adds	r3, #1
 80117ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80117f0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80117f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80117f6:	429a      	cmp	r2, r3
 80117f8:	f4ff af67 	bcc.w	80116ca <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 80117fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8011800:	3301      	adds	r3, #1
 8011802:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8011806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801180a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801180c:	429a      	cmp	r2, r3
 801180e:	f4ff ad32 	bcc.w	8011276 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011812:	2300      	movs	r3, #0
 8011814:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8011818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801181c:	2b01      	cmp	r3, #1
 801181e:	d033      	beq.n	8011888 <arm_mat_inverse_f32+0x6de>
 8011820:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8011824:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801182c:	d12c      	bne.n	8011888 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	685b      	ldr	r3, [r3, #4]
 8011832:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8011834:	2300      	movs	r3, #0
 8011836:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801183a:	e010      	b.n	801185e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 801183c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011840:	009b      	lsls	r3, r3, #2
 8011842:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011844:	4413      	add	r3, r2
 8011846:	edd3 7a00 	vldr	s15, [r3]
 801184a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011852:	d10d      	bne.n	8011870 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8011854:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8011858:	3301      	adds	r3, #1
 801185a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801185e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011862:	fb02 f303 	mul.w	r3, r2, r3
 8011866:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801186a:	429a      	cmp	r2, r3
 801186c:	d3e6      	bcc.n	801183c <arm_mat_inverse_f32+0x692>
 801186e:	e000      	b.n	8011872 <arm_mat_inverse_f32+0x6c8>
            break;
 8011870:	bf00      	nop
      }

      if (i == numRows * numCols)
 8011872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011874:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011876:	fb02 f303 	mul.w	r3, r2, r3
 801187a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801187e:	429a      	cmp	r2, r3
 8011880:	d102      	bne.n	8011888 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8011882:	23fb      	movs	r3, #251	@ 0xfb
 8011884:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8011888:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 801188c:	4618      	mov	r0, r3
 801188e:	37ec      	adds	r7, #236	@ 0xec
 8011890:	46bd      	mov	sp, r7
 8011892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011896:	4770      	bx	lr

08011898 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8011898:	b480      	push	{r7}
 801189a:	b093      	sub	sp, #76	@ 0x4c
 801189c:	af00      	add	r7, sp, #0
 801189e:	60f8      	str	r0, [r7, #12]
 80118a0:	60b9      	str	r1, [r7, #8]
 80118a2:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	685b      	ldr	r3, [r3, #4]
 80118a8:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 80118aa:	68bb      	ldr	r3, [r7, #8]
 80118ac:	685b      	ldr	r3, [r3, #4]
 80118ae:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	685b      	ldr	r3, [r3, #4]
 80118ba:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	881b      	ldrh	r3, [r3, #0]
 80118c6:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	885b      	ldrh	r3, [r3, #2]
 80118cc:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	885b      	ldrh	r3, [r3, #2]
 80118d2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80118d4:	2300      	movs	r3, #0
 80118d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80118d8:	8b7b      	ldrh	r3, [r7, #26]
 80118da:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80118dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118de:	009b      	lsls	r3, r3, #2
 80118e0:	69fa      	ldr	r2, [r7, #28]
 80118e2:	4413      	add	r3, r2
 80118e4:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 80118e6:	8b3b      	ldrh	r3, [r7, #24]
 80118e8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 80118f0:	f04f 0300 	mov.w	r3, #0
 80118f4:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 80118f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118f8:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 80118fa:	8afb      	ldrh	r3, [r7, #22]
 80118fc:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 80118fe:	e017      	b.n	8011930 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8011900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011902:	1d1a      	adds	r2, r3, #4
 8011904:	647a      	str	r2, [r7, #68]	@ 0x44
 8011906:	ed93 7a00 	vldr	s14, [r3]
 801190a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801190c:	edd3 7a00 	vldr	s15, [r3]
 8011910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011914:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8011918:	ee77 7a27 	vadd.f32	s15, s14, s15
 801191c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8011920:	8b3b      	ldrh	r3, [r7, #24]
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011926:	4413      	add	r3, r2
 8011928:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 801192a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801192c:	3b01      	subs	r3, #1
 801192e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8011930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011932:	2b00      	cmp	r3, #0
 8011934:	d1e4      	bne.n	8011900 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8011936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011938:	1d1a      	adds	r2, r3, #4
 801193a:	63ba      	str	r2, [r7, #56]	@ 0x38
 801193c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801193e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8011940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011942:	3b01      	subs	r3, #1
 8011944:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8011946:	8b3a      	ldrh	r2, [r7, #24]
 8011948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801194a:	1ad3      	subs	r3, r2, r3
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	6a3a      	ldr	r2, [r7, #32]
 8011950:	4413      	add	r3, r2
 8011952:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8011954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011956:	2b00      	cmp	r3, #0
 8011958:	d1ca      	bne.n	80118f0 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 801195a:	8b3b      	ldrh	r3, [r7, #24]
 801195c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801195e:	4413      	add	r3, r2
 8011960:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8011962:	8afb      	ldrh	r3, [r7, #22]
 8011964:	009b      	lsls	r3, r3, #2
 8011966:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011968:	4413      	add	r3, r2
 801196a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 801196c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801196e:	3b01      	subs	r3, #1
 8011970:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8011972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011974:	2b00      	cmp	r3, #0
 8011976:	d1b1      	bne.n	80118dc <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011978:	2300      	movs	r3, #0
 801197a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 801197c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8011980:	4618      	mov	r0, r3
 8011982:	374c      	adds	r7, #76	@ 0x4c
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr

0801198c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 801198c:	b480      	push	{r7}
 801198e:	b08b      	sub	sp, #44	@ 0x2c
 8011990:	af00      	add	r7, sp, #0
 8011992:	60f8      	str	r0, [r7, #12]
 8011994:	ed87 0a02 	vstr	s0, [r7, #8]
 8011998:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	685b      	ldr	r3, [r3, #4]
 801199e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	685b      	ldr	r3, [r3, #4]
 80119a4:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	881b      	ldrh	r3, [r3, #0]
 80119aa:	461a      	mov	r2, r3
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	885b      	ldrh	r3, [r3, #2]
 80119b0:	fb02 f303 	mul.w	r3, r2, r3
 80119b4:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80119ba:	e010      	b.n	80119de <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80119bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119be:	1d1a      	adds	r2, r3, #4
 80119c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80119c2:	ed93 7a00 	vldr	s14, [r3]
 80119c6:	6a3b      	ldr	r3, [r7, #32]
 80119c8:	1d1a      	adds	r2, r3, #4
 80119ca:	623a      	str	r2, [r7, #32]
 80119cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80119d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119d4:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	3b01      	subs	r3, #1
 80119dc:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80119de:	69fb      	ldr	r3, [r7, #28]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d1eb      	bne.n	80119bc <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80119e4:	2300      	movs	r3, #0
 80119e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80119e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	372c      	adds	r7, #44	@ 0x2c
 80119f0:	46bd      	mov	sp, r7
 80119f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f6:	4770      	bx	lr

080119f8 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80119f8:	b480      	push	{r7}
 80119fa:	b08b      	sub	sp, #44	@ 0x2c
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	60f8      	str	r0, [r7, #12]
 8011a00:	60b9      	str	r1, [r7, #8]
 8011a02:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	685b      	ldr	r3, [r3, #4]
 8011a08:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	685b      	ldr	r3, [r3, #4]
 8011a0e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	685b      	ldr	r3, [r3, #4]
 8011a14:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	881b      	ldrh	r3, [r3, #0]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	885b      	ldrh	r3, [r3, #2]
 8011a20:	fb02 f303 	mul.w	r3, r2, r3
 8011a24:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8011a2a:	e013      	b.n	8011a54 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8011a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a2e:	1d1a      	adds	r2, r3, #4
 8011a30:	627a      	str	r2, [r7, #36]	@ 0x24
 8011a32:	ed93 7a00 	vldr	s14, [r3]
 8011a36:	6a3b      	ldr	r3, [r7, #32]
 8011a38:	1d1a      	adds	r2, r3, #4
 8011a3a:	623a      	str	r2, [r7, #32]
 8011a3c:	edd3 7a00 	vldr	s15, [r3]
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	1d1a      	adds	r2, r3, #4
 8011a44:	61fa      	str	r2, [r7, #28]
 8011a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a4a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	3b01      	subs	r3, #1
 8011a52:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8011a54:	69bb      	ldr	r3, [r7, #24]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d1e8      	bne.n	8011a2c <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8011a5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	372c      	adds	r7, #44	@ 0x2c
 8011a66:	46bd      	mov	sp, r7
 8011a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6c:	4770      	bx	lr

08011a6e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8011a6e:	b480      	push	{r7}
 8011a70:	b08b      	sub	sp, #44	@ 0x2c
 8011a72:	af00      	add	r7, sp, #0
 8011a74:	6078      	str	r0, [r7, #4]
 8011a76:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	685b      	ldr	r3, [r3, #4]
 8011a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	881b      	ldrh	r3, [r3, #0]
 8011a88:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	885b      	ldrh	r3, [r3, #2]
 8011a8e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8011a90:	89fb      	ldrh	r3, [r7, #14]
 8011a92:	61bb      	str	r3, [r7, #24]
 8011a94:	2300      	movs	r3, #0
 8011a96:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	693a      	ldr	r2, [r7, #16]
 8011a9e:	4413      	add	r3, r2
 8011aa0:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8011aa2:	89bb      	ldrh	r3, [r7, #12]
 8011aa4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8011aa6:	e00d      	b.n	8011ac4 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8011aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aaa:	1d1a      	adds	r2, r3, #4
 8011aac:	627a      	str	r2, [r7, #36]	@ 0x24
 8011aae:	681a      	ldr	r2, [r3, #0]
 8011ab0:	6a3b      	ldr	r3, [r7, #32]
 8011ab2:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8011ab4:	89fb      	ldrh	r3, [r7, #14]
 8011ab6:	009b      	lsls	r3, r3, #2
 8011ab8:	6a3a      	ldr	r2, [r7, #32]
 8011aba:	4413      	add	r3, r2
 8011abc:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	3b01      	subs	r3, #1
 8011ac2:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d1ee      	bne.n	8011aa8 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	3301      	adds	r3, #1
 8011ace:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8011ad0:	69bb      	ldr	r3, [r7, #24]
 8011ad2:	3b01      	subs	r3, #1
 8011ad4:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d1dd      	bne.n	8011a98 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8011adc:	2300      	movs	r3, #0
 8011ade:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8011ae0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	372c      	adds	r7, #44	@ 0x2c
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr

08011af0 <malloc>:
 8011af0:	4b02      	ldr	r3, [pc, #8]	@ (8011afc <malloc+0xc>)
 8011af2:	4601      	mov	r1, r0
 8011af4:	6818      	ldr	r0, [r3, #0]
 8011af6:	f000 b825 	b.w	8011b44 <_malloc_r>
 8011afa:	bf00      	nop
 8011afc:	20000144 	.word	0x20000144

08011b00 <sbrk_aligned>:
 8011b00:	b570      	push	{r4, r5, r6, lr}
 8011b02:	4e0f      	ldr	r6, [pc, #60]	@ (8011b40 <sbrk_aligned+0x40>)
 8011b04:	460c      	mov	r4, r1
 8011b06:	6831      	ldr	r1, [r6, #0]
 8011b08:	4605      	mov	r5, r0
 8011b0a:	b911      	cbnz	r1, 8011b12 <sbrk_aligned+0x12>
 8011b0c:	f000 f8ae 	bl	8011c6c <_sbrk_r>
 8011b10:	6030      	str	r0, [r6, #0]
 8011b12:	4621      	mov	r1, r4
 8011b14:	4628      	mov	r0, r5
 8011b16:	f000 f8a9 	bl	8011c6c <_sbrk_r>
 8011b1a:	1c43      	adds	r3, r0, #1
 8011b1c:	d103      	bne.n	8011b26 <sbrk_aligned+0x26>
 8011b1e:	f04f 34ff 	mov.w	r4, #4294967295
 8011b22:	4620      	mov	r0, r4
 8011b24:	bd70      	pop	{r4, r5, r6, pc}
 8011b26:	1cc4      	adds	r4, r0, #3
 8011b28:	f024 0403 	bic.w	r4, r4, #3
 8011b2c:	42a0      	cmp	r0, r4
 8011b2e:	d0f8      	beq.n	8011b22 <sbrk_aligned+0x22>
 8011b30:	1a21      	subs	r1, r4, r0
 8011b32:	4628      	mov	r0, r5
 8011b34:	f000 f89a 	bl	8011c6c <_sbrk_r>
 8011b38:	3001      	adds	r0, #1
 8011b3a:	d1f2      	bne.n	8011b22 <sbrk_aligned+0x22>
 8011b3c:	e7ef      	b.n	8011b1e <sbrk_aligned+0x1e>
 8011b3e:	bf00      	nop
 8011b40:	20002238 	.word	0x20002238

08011b44 <_malloc_r>:
 8011b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b48:	1ccd      	adds	r5, r1, #3
 8011b4a:	f025 0503 	bic.w	r5, r5, #3
 8011b4e:	3508      	adds	r5, #8
 8011b50:	2d0c      	cmp	r5, #12
 8011b52:	bf38      	it	cc
 8011b54:	250c      	movcc	r5, #12
 8011b56:	2d00      	cmp	r5, #0
 8011b58:	4606      	mov	r6, r0
 8011b5a:	db01      	blt.n	8011b60 <_malloc_r+0x1c>
 8011b5c:	42a9      	cmp	r1, r5
 8011b5e:	d904      	bls.n	8011b6a <_malloc_r+0x26>
 8011b60:	230c      	movs	r3, #12
 8011b62:	6033      	str	r3, [r6, #0]
 8011b64:	2000      	movs	r0, #0
 8011b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011c40 <_malloc_r+0xfc>
 8011b6e:	f000 f869 	bl	8011c44 <__malloc_lock>
 8011b72:	f8d8 3000 	ldr.w	r3, [r8]
 8011b76:	461c      	mov	r4, r3
 8011b78:	bb44      	cbnz	r4, 8011bcc <_malloc_r+0x88>
 8011b7a:	4629      	mov	r1, r5
 8011b7c:	4630      	mov	r0, r6
 8011b7e:	f7ff ffbf 	bl	8011b00 <sbrk_aligned>
 8011b82:	1c43      	adds	r3, r0, #1
 8011b84:	4604      	mov	r4, r0
 8011b86:	d158      	bne.n	8011c3a <_malloc_r+0xf6>
 8011b88:	f8d8 4000 	ldr.w	r4, [r8]
 8011b8c:	4627      	mov	r7, r4
 8011b8e:	2f00      	cmp	r7, #0
 8011b90:	d143      	bne.n	8011c1a <_malloc_r+0xd6>
 8011b92:	2c00      	cmp	r4, #0
 8011b94:	d04b      	beq.n	8011c2e <_malloc_r+0xea>
 8011b96:	6823      	ldr	r3, [r4, #0]
 8011b98:	4639      	mov	r1, r7
 8011b9a:	4630      	mov	r0, r6
 8011b9c:	eb04 0903 	add.w	r9, r4, r3
 8011ba0:	f000 f864 	bl	8011c6c <_sbrk_r>
 8011ba4:	4581      	cmp	r9, r0
 8011ba6:	d142      	bne.n	8011c2e <_malloc_r+0xea>
 8011ba8:	6821      	ldr	r1, [r4, #0]
 8011baa:	1a6d      	subs	r5, r5, r1
 8011bac:	4629      	mov	r1, r5
 8011bae:	4630      	mov	r0, r6
 8011bb0:	f7ff ffa6 	bl	8011b00 <sbrk_aligned>
 8011bb4:	3001      	adds	r0, #1
 8011bb6:	d03a      	beq.n	8011c2e <_malloc_r+0xea>
 8011bb8:	6823      	ldr	r3, [r4, #0]
 8011bba:	442b      	add	r3, r5
 8011bbc:	6023      	str	r3, [r4, #0]
 8011bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8011bc2:	685a      	ldr	r2, [r3, #4]
 8011bc4:	bb62      	cbnz	r2, 8011c20 <_malloc_r+0xdc>
 8011bc6:	f8c8 7000 	str.w	r7, [r8]
 8011bca:	e00f      	b.n	8011bec <_malloc_r+0xa8>
 8011bcc:	6822      	ldr	r2, [r4, #0]
 8011bce:	1b52      	subs	r2, r2, r5
 8011bd0:	d420      	bmi.n	8011c14 <_malloc_r+0xd0>
 8011bd2:	2a0b      	cmp	r2, #11
 8011bd4:	d917      	bls.n	8011c06 <_malloc_r+0xc2>
 8011bd6:	1961      	adds	r1, r4, r5
 8011bd8:	42a3      	cmp	r3, r4
 8011bda:	6025      	str	r5, [r4, #0]
 8011bdc:	bf18      	it	ne
 8011bde:	6059      	strne	r1, [r3, #4]
 8011be0:	6863      	ldr	r3, [r4, #4]
 8011be2:	bf08      	it	eq
 8011be4:	f8c8 1000 	streq.w	r1, [r8]
 8011be8:	5162      	str	r2, [r4, r5]
 8011bea:	604b      	str	r3, [r1, #4]
 8011bec:	4630      	mov	r0, r6
 8011bee:	f000 f82f 	bl	8011c50 <__malloc_unlock>
 8011bf2:	f104 000b 	add.w	r0, r4, #11
 8011bf6:	1d23      	adds	r3, r4, #4
 8011bf8:	f020 0007 	bic.w	r0, r0, #7
 8011bfc:	1ac2      	subs	r2, r0, r3
 8011bfe:	bf1c      	itt	ne
 8011c00:	1a1b      	subne	r3, r3, r0
 8011c02:	50a3      	strne	r3, [r4, r2]
 8011c04:	e7af      	b.n	8011b66 <_malloc_r+0x22>
 8011c06:	6862      	ldr	r2, [r4, #4]
 8011c08:	42a3      	cmp	r3, r4
 8011c0a:	bf0c      	ite	eq
 8011c0c:	f8c8 2000 	streq.w	r2, [r8]
 8011c10:	605a      	strne	r2, [r3, #4]
 8011c12:	e7eb      	b.n	8011bec <_malloc_r+0xa8>
 8011c14:	4623      	mov	r3, r4
 8011c16:	6864      	ldr	r4, [r4, #4]
 8011c18:	e7ae      	b.n	8011b78 <_malloc_r+0x34>
 8011c1a:	463c      	mov	r4, r7
 8011c1c:	687f      	ldr	r7, [r7, #4]
 8011c1e:	e7b6      	b.n	8011b8e <_malloc_r+0x4a>
 8011c20:	461a      	mov	r2, r3
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	42a3      	cmp	r3, r4
 8011c26:	d1fb      	bne.n	8011c20 <_malloc_r+0xdc>
 8011c28:	2300      	movs	r3, #0
 8011c2a:	6053      	str	r3, [r2, #4]
 8011c2c:	e7de      	b.n	8011bec <_malloc_r+0xa8>
 8011c2e:	230c      	movs	r3, #12
 8011c30:	6033      	str	r3, [r6, #0]
 8011c32:	4630      	mov	r0, r6
 8011c34:	f000 f80c 	bl	8011c50 <__malloc_unlock>
 8011c38:	e794      	b.n	8011b64 <_malloc_r+0x20>
 8011c3a:	6005      	str	r5, [r0, #0]
 8011c3c:	e7d6      	b.n	8011bec <_malloc_r+0xa8>
 8011c3e:	bf00      	nop
 8011c40:	2000223c 	.word	0x2000223c

08011c44 <__malloc_lock>:
 8011c44:	4801      	ldr	r0, [pc, #4]	@ (8011c4c <__malloc_lock+0x8>)
 8011c46:	f000 b84b 	b.w	8011ce0 <__retarget_lock_acquire_recursive>
 8011c4a:	bf00      	nop
 8011c4c:	2000237c 	.word	0x2000237c

08011c50 <__malloc_unlock>:
 8011c50:	4801      	ldr	r0, [pc, #4]	@ (8011c58 <__malloc_unlock+0x8>)
 8011c52:	f000 b846 	b.w	8011ce2 <__retarget_lock_release_recursive>
 8011c56:	bf00      	nop
 8011c58:	2000237c 	.word	0x2000237c

08011c5c <memset>:
 8011c5c:	4402      	add	r2, r0
 8011c5e:	4603      	mov	r3, r0
 8011c60:	4293      	cmp	r3, r2
 8011c62:	d100      	bne.n	8011c66 <memset+0xa>
 8011c64:	4770      	bx	lr
 8011c66:	f803 1b01 	strb.w	r1, [r3], #1
 8011c6a:	e7f9      	b.n	8011c60 <memset+0x4>

08011c6c <_sbrk_r>:
 8011c6c:	b538      	push	{r3, r4, r5, lr}
 8011c6e:	4d06      	ldr	r5, [pc, #24]	@ (8011c88 <_sbrk_r+0x1c>)
 8011c70:	2300      	movs	r3, #0
 8011c72:	4604      	mov	r4, r0
 8011c74:	4608      	mov	r0, r1
 8011c76:	602b      	str	r3, [r5, #0]
 8011c78:	f7f7 f926 	bl	8008ec8 <_sbrk>
 8011c7c:	1c43      	adds	r3, r0, #1
 8011c7e:	d102      	bne.n	8011c86 <_sbrk_r+0x1a>
 8011c80:	682b      	ldr	r3, [r5, #0]
 8011c82:	b103      	cbz	r3, 8011c86 <_sbrk_r+0x1a>
 8011c84:	6023      	str	r3, [r4, #0]
 8011c86:	bd38      	pop	{r3, r4, r5, pc}
 8011c88:	20002378 	.word	0x20002378

08011c8c <__errno>:
 8011c8c:	4b01      	ldr	r3, [pc, #4]	@ (8011c94 <__errno+0x8>)
 8011c8e:	6818      	ldr	r0, [r3, #0]
 8011c90:	4770      	bx	lr
 8011c92:	bf00      	nop
 8011c94:	20000144 	.word	0x20000144

08011c98 <__libc_init_array>:
 8011c98:	b570      	push	{r4, r5, r6, lr}
 8011c9a:	4d0d      	ldr	r5, [pc, #52]	@ (8011cd0 <__libc_init_array+0x38>)
 8011c9c:	4c0d      	ldr	r4, [pc, #52]	@ (8011cd4 <__libc_init_array+0x3c>)
 8011c9e:	1b64      	subs	r4, r4, r5
 8011ca0:	10a4      	asrs	r4, r4, #2
 8011ca2:	2600      	movs	r6, #0
 8011ca4:	42a6      	cmp	r6, r4
 8011ca6:	d109      	bne.n	8011cbc <__libc_init_array+0x24>
 8011ca8:	4d0b      	ldr	r5, [pc, #44]	@ (8011cd8 <__libc_init_array+0x40>)
 8011caa:	4c0c      	ldr	r4, [pc, #48]	@ (8011cdc <__libc_init_array+0x44>)
 8011cac:	f001 ff30 	bl	8013b10 <_init>
 8011cb0:	1b64      	subs	r4, r4, r5
 8011cb2:	10a4      	asrs	r4, r4, #2
 8011cb4:	2600      	movs	r6, #0
 8011cb6:	42a6      	cmp	r6, r4
 8011cb8:	d105      	bne.n	8011cc6 <__libc_init_array+0x2e>
 8011cba:	bd70      	pop	{r4, r5, r6, pc}
 8011cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cc0:	4798      	blx	r3
 8011cc2:	3601      	adds	r6, #1
 8011cc4:	e7ee      	b.n	8011ca4 <__libc_init_array+0xc>
 8011cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011cca:	4798      	blx	r3
 8011ccc:	3601      	adds	r6, #1
 8011cce:	e7f2      	b.n	8011cb6 <__libc_init_array+0x1e>
 8011cd0:	08014190 	.word	0x08014190
 8011cd4:	08014190 	.word	0x08014190
 8011cd8:	08014190 	.word	0x08014190
 8011cdc:	08014194 	.word	0x08014194

08011ce0 <__retarget_lock_acquire_recursive>:
 8011ce0:	4770      	bx	lr

08011ce2 <__retarget_lock_release_recursive>:
 8011ce2:	4770      	bx	lr

08011ce4 <memcpy>:
 8011ce4:	440a      	add	r2, r1
 8011ce6:	4291      	cmp	r1, r2
 8011ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8011cec:	d100      	bne.n	8011cf0 <memcpy+0xc>
 8011cee:	4770      	bx	lr
 8011cf0:	b510      	push	{r4, lr}
 8011cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cfa:	4291      	cmp	r1, r2
 8011cfc:	d1f9      	bne.n	8011cf2 <memcpy+0xe>
 8011cfe:	bd10      	pop	{r4, pc}

08011d00 <cos>:
 8011d00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011d02:	ec53 2b10 	vmov	r2, r3, d0
 8011d06:	4826      	ldr	r0, [pc, #152]	@ (8011da0 <cos+0xa0>)
 8011d08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011d0c:	4281      	cmp	r1, r0
 8011d0e:	d806      	bhi.n	8011d1e <cos+0x1e>
 8011d10:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011d98 <cos+0x98>
 8011d14:	b005      	add	sp, #20
 8011d16:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d1a:	f000 b9bd 	b.w	8012098 <__kernel_cos>
 8011d1e:	4821      	ldr	r0, [pc, #132]	@ (8011da4 <cos+0xa4>)
 8011d20:	4281      	cmp	r1, r0
 8011d22:	d908      	bls.n	8011d36 <cos+0x36>
 8011d24:	4610      	mov	r0, r2
 8011d26:	4619      	mov	r1, r3
 8011d28:	f7ee fa7a 	bl	8000220 <__aeabi_dsub>
 8011d2c:	ec41 0b10 	vmov	d0, r0, r1
 8011d30:	b005      	add	sp, #20
 8011d32:	f85d fb04 	ldr.w	pc, [sp], #4
 8011d36:	4668      	mov	r0, sp
 8011d38:	f000 fb32 	bl	80123a0 <__ieee754_rem_pio2>
 8011d3c:	f000 0003 	and.w	r0, r0, #3
 8011d40:	2801      	cmp	r0, #1
 8011d42:	d00b      	beq.n	8011d5c <cos+0x5c>
 8011d44:	2802      	cmp	r0, #2
 8011d46:	d015      	beq.n	8011d74 <cos+0x74>
 8011d48:	b9d8      	cbnz	r0, 8011d82 <cos+0x82>
 8011d4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011d4e:	ed9d 0b00 	vldr	d0, [sp]
 8011d52:	f000 f9a1 	bl	8012098 <__kernel_cos>
 8011d56:	ec51 0b10 	vmov	r0, r1, d0
 8011d5a:	e7e7      	b.n	8011d2c <cos+0x2c>
 8011d5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011d60:	ed9d 0b00 	vldr	d0, [sp]
 8011d64:	f000 fa60 	bl	8012228 <__kernel_sin>
 8011d68:	ec53 2b10 	vmov	r2, r3, d0
 8011d6c:	4610      	mov	r0, r2
 8011d6e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011d72:	e7db      	b.n	8011d2c <cos+0x2c>
 8011d74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011d78:	ed9d 0b00 	vldr	d0, [sp]
 8011d7c:	f000 f98c 	bl	8012098 <__kernel_cos>
 8011d80:	e7f2      	b.n	8011d68 <cos+0x68>
 8011d82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011d86:	ed9d 0b00 	vldr	d0, [sp]
 8011d8a:	2001      	movs	r0, #1
 8011d8c:	f000 fa4c 	bl	8012228 <__kernel_sin>
 8011d90:	e7e1      	b.n	8011d56 <cos+0x56>
 8011d92:	bf00      	nop
 8011d94:	f3af 8000 	nop.w
	...
 8011da0:	3fe921fb 	.word	0x3fe921fb
 8011da4:	7fefffff 	.word	0x7fefffff

08011da8 <sin>:
 8011da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011daa:	ec53 2b10 	vmov	r2, r3, d0
 8011dae:	4826      	ldr	r0, [pc, #152]	@ (8011e48 <sin+0xa0>)
 8011db0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8011db4:	4281      	cmp	r1, r0
 8011db6:	d807      	bhi.n	8011dc8 <sin+0x20>
 8011db8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8011e40 <sin+0x98>
 8011dbc:	2000      	movs	r0, #0
 8011dbe:	b005      	add	sp, #20
 8011dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011dc4:	f000 ba30 	b.w	8012228 <__kernel_sin>
 8011dc8:	4820      	ldr	r0, [pc, #128]	@ (8011e4c <sin+0xa4>)
 8011dca:	4281      	cmp	r1, r0
 8011dcc:	d908      	bls.n	8011de0 <sin+0x38>
 8011dce:	4610      	mov	r0, r2
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	f7ee fa25 	bl	8000220 <__aeabi_dsub>
 8011dd6:	ec41 0b10 	vmov	d0, r0, r1
 8011dda:	b005      	add	sp, #20
 8011ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011de0:	4668      	mov	r0, sp
 8011de2:	f000 fadd 	bl	80123a0 <__ieee754_rem_pio2>
 8011de6:	f000 0003 	and.w	r0, r0, #3
 8011dea:	2801      	cmp	r0, #1
 8011dec:	d00c      	beq.n	8011e08 <sin+0x60>
 8011dee:	2802      	cmp	r0, #2
 8011df0:	d011      	beq.n	8011e16 <sin+0x6e>
 8011df2:	b9e8      	cbnz	r0, 8011e30 <sin+0x88>
 8011df4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011df8:	ed9d 0b00 	vldr	d0, [sp]
 8011dfc:	2001      	movs	r0, #1
 8011dfe:	f000 fa13 	bl	8012228 <__kernel_sin>
 8011e02:	ec51 0b10 	vmov	r0, r1, d0
 8011e06:	e7e6      	b.n	8011dd6 <sin+0x2e>
 8011e08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e0c:	ed9d 0b00 	vldr	d0, [sp]
 8011e10:	f000 f942 	bl	8012098 <__kernel_cos>
 8011e14:	e7f5      	b.n	8011e02 <sin+0x5a>
 8011e16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e1a:	ed9d 0b00 	vldr	d0, [sp]
 8011e1e:	2001      	movs	r0, #1
 8011e20:	f000 fa02 	bl	8012228 <__kernel_sin>
 8011e24:	ec53 2b10 	vmov	r2, r3, d0
 8011e28:	4610      	mov	r0, r2
 8011e2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8011e2e:	e7d2      	b.n	8011dd6 <sin+0x2e>
 8011e30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e34:	ed9d 0b00 	vldr	d0, [sp]
 8011e38:	f000 f92e 	bl	8012098 <__kernel_cos>
 8011e3c:	e7f2      	b.n	8011e24 <sin+0x7c>
 8011e3e:	bf00      	nop
	...
 8011e48:	3fe921fb 	.word	0x3fe921fb
 8011e4c:	7fefffff 	.word	0x7fefffff

08011e50 <fmodf>:
 8011e50:	b508      	push	{r3, lr}
 8011e52:	ed2d 8b02 	vpush	{d8}
 8011e56:	eef0 8a40 	vmov.f32	s17, s0
 8011e5a:	eeb0 8a60 	vmov.f32	s16, s1
 8011e5e:	f000 fd43 	bl	80128e8 <__ieee754_fmodf>
 8011e62:	eef4 8a48 	vcmp.f32	s17, s16
 8011e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e6a:	d60c      	bvs.n	8011e86 <fmodf+0x36>
 8011e6c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011e8c <fmodf+0x3c>
 8011e70:	eeb4 8a68 	vcmp.f32	s16, s17
 8011e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e78:	d105      	bne.n	8011e86 <fmodf+0x36>
 8011e7a:	f7ff ff07 	bl	8011c8c <__errno>
 8011e7e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011e82:	2321      	movs	r3, #33	@ 0x21
 8011e84:	6003      	str	r3, [r0, #0]
 8011e86:	ecbd 8b02 	vpop	{d8}
 8011e8a:	bd08      	pop	{r3, pc}
 8011e8c:	00000000 	.word	0x00000000

08011e90 <sqrtf>:
 8011e90:	b508      	push	{r3, lr}
 8011e92:	ed2d 8b02 	vpush	{d8}
 8011e96:	eeb0 8a40 	vmov.f32	s16, s0
 8011e9a:	f000 f8f7 	bl	801208c <__ieee754_sqrtf>
 8011e9e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ea6:	d60c      	bvs.n	8011ec2 <sqrtf+0x32>
 8011ea8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8011ec8 <sqrtf+0x38>
 8011eac:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb4:	d505      	bpl.n	8011ec2 <sqrtf+0x32>
 8011eb6:	f7ff fee9 	bl	8011c8c <__errno>
 8011eba:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011ebe:	2321      	movs	r3, #33	@ 0x21
 8011ec0:	6003      	str	r3, [r0, #0]
 8011ec2:	ecbd 8b02 	vpop	{d8}
 8011ec6:	bd08      	pop	{r3, pc}
 8011ec8:	00000000 	.word	0x00000000

08011ecc <cosf>:
 8011ecc:	ee10 3a10 	vmov	r3, s0
 8011ed0:	b507      	push	{r0, r1, r2, lr}
 8011ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8011f4c <cosf+0x80>)
 8011ed4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011ed8:	4293      	cmp	r3, r2
 8011eda:	d806      	bhi.n	8011eea <cosf+0x1e>
 8011edc:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8011f50 <cosf+0x84>
 8011ee0:	b003      	add	sp, #12
 8011ee2:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ee6:	f000 bc5f 	b.w	80127a8 <__kernel_cosf>
 8011eea:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011eee:	d304      	bcc.n	8011efa <cosf+0x2e>
 8011ef0:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011ef4:	b003      	add	sp, #12
 8011ef6:	f85d fb04 	ldr.w	pc, [sp], #4
 8011efa:	4668      	mov	r0, sp
 8011efc:	f000 fd76 	bl	80129ec <__ieee754_rem_pio2f>
 8011f00:	f000 0003 	and.w	r0, r0, #3
 8011f04:	2801      	cmp	r0, #1
 8011f06:	d009      	beq.n	8011f1c <cosf+0x50>
 8011f08:	2802      	cmp	r0, #2
 8011f0a:	d010      	beq.n	8011f2e <cosf+0x62>
 8011f0c:	b9b0      	cbnz	r0, 8011f3c <cosf+0x70>
 8011f0e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011f12:	ed9d 0a00 	vldr	s0, [sp]
 8011f16:	f000 fc47 	bl	80127a8 <__kernel_cosf>
 8011f1a:	e7eb      	b.n	8011ef4 <cosf+0x28>
 8011f1c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011f20:	ed9d 0a00 	vldr	s0, [sp]
 8011f24:	f000 fc98 	bl	8012858 <__kernel_sinf>
 8011f28:	eeb1 0a40 	vneg.f32	s0, s0
 8011f2c:	e7e2      	b.n	8011ef4 <cosf+0x28>
 8011f2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8011f32:	ed9d 0a00 	vldr	s0, [sp]
 8011f36:	f000 fc37 	bl	80127a8 <__kernel_cosf>
 8011f3a:	e7f5      	b.n	8011f28 <cosf+0x5c>
 8011f3c:	eddd 0a01 	vldr	s1, [sp, #4]
 8011f40:	ed9d 0a00 	vldr	s0, [sp]
 8011f44:	2001      	movs	r0, #1
 8011f46:	f000 fc87 	bl	8012858 <__kernel_sinf>
 8011f4a:	e7d3      	b.n	8011ef4 <cosf+0x28>
 8011f4c:	3f490fd8 	.word	0x3f490fd8
 8011f50:	00000000 	.word	0x00000000

08011f54 <sinf>:
 8011f54:	ee10 3a10 	vmov	r3, s0
 8011f58:	b507      	push	{r0, r1, r2, lr}
 8011f5a:	4a1f      	ldr	r2, [pc, #124]	@ (8011fd8 <sinf+0x84>)
 8011f5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011f60:	4293      	cmp	r3, r2
 8011f62:	d807      	bhi.n	8011f74 <sinf+0x20>
 8011f64:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8011fdc <sinf+0x88>
 8011f68:	2000      	movs	r0, #0
 8011f6a:	b003      	add	sp, #12
 8011f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f70:	f000 bc72 	b.w	8012858 <__kernel_sinf>
 8011f74:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8011f78:	d304      	bcc.n	8011f84 <sinf+0x30>
 8011f7a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011f7e:	b003      	add	sp, #12
 8011f80:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f84:	4668      	mov	r0, sp
 8011f86:	f000 fd31 	bl	80129ec <__ieee754_rem_pio2f>
 8011f8a:	f000 0003 	and.w	r0, r0, #3
 8011f8e:	2801      	cmp	r0, #1
 8011f90:	d00a      	beq.n	8011fa8 <sinf+0x54>
 8011f92:	2802      	cmp	r0, #2
 8011f94:	d00f      	beq.n	8011fb6 <sinf+0x62>
 8011f96:	b9c0      	cbnz	r0, 8011fca <sinf+0x76>
 8011f98:	eddd 0a01 	vldr	s1, [sp, #4]
 8011f9c:	ed9d 0a00 	vldr	s0, [sp]
 8011fa0:	2001      	movs	r0, #1
 8011fa2:	f000 fc59 	bl	8012858 <__kernel_sinf>
 8011fa6:	e7ea      	b.n	8011f7e <sinf+0x2a>
 8011fa8:	eddd 0a01 	vldr	s1, [sp, #4]
 8011fac:	ed9d 0a00 	vldr	s0, [sp]
 8011fb0:	f000 fbfa 	bl	80127a8 <__kernel_cosf>
 8011fb4:	e7e3      	b.n	8011f7e <sinf+0x2a>
 8011fb6:	eddd 0a01 	vldr	s1, [sp, #4]
 8011fba:	ed9d 0a00 	vldr	s0, [sp]
 8011fbe:	2001      	movs	r0, #1
 8011fc0:	f000 fc4a 	bl	8012858 <__kernel_sinf>
 8011fc4:	eeb1 0a40 	vneg.f32	s0, s0
 8011fc8:	e7d9      	b.n	8011f7e <sinf+0x2a>
 8011fca:	eddd 0a01 	vldr	s1, [sp, #4]
 8011fce:	ed9d 0a00 	vldr	s0, [sp]
 8011fd2:	f000 fbe9 	bl	80127a8 <__kernel_cosf>
 8011fd6:	e7f5      	b.n	8011fc4 <sinf+0x70>
 8011fd8:	3f490fd8 	.word	0x3f490fd8
 8011fdc:	00000000 	.word	0x00000000

08011fe0 <fmaxf>:
 8011fe0:	b508      	push	{r3, lr}
 8011fe2:	ed2d 8b02 	vpush	{d8}
 8011fe6:	eeb0 8a40 	vmov.f32	s16, s0
 8011fea:	eef0 8a60 	vmov.f32	s17, s1
 8011fee:	f000 f831 	bl	8012054 <__fpclassifyf>
 8011ff2:	b930      	cbnz	r0, 8012002 <fmaxf+0x22>
 8011ff4:	eeb0 8a68 	vmov.f32	s16, s17
 8011ff8:	eeb0 0a48 	vmov.f32	s0, s16
 8011ffc:	ecbd 8b02 	vpop	{d8}
 8012000:	bd08      	pop	{r3, pc}
 8012002:	eeb0 0a68 	vmov.f32	s0, s17
 8012006:	f000 f825 	bl	8012054 <__fpclassifyf>
 801200a:	2800      	cmp	r0, #0
 801200c:	d0f4      	beq.n	8011ff8 <fmaxf+0x18>
 801200e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012016:	dded      	ble.n	8011ff4 <fmaxf+0x14>
 8012018:	e7ee      	b.n	8011ff8 <fmaxf+0x18>

0801201a <fminf>:
 801201a:	b508      	push	{r3, lr}
 801201c:	ed2d 8b02 	vpush	{d8}
 8012020:	eeb0 8a40 	vmov.f32	s16, s0
 8012024:	eef0 8a60 	vmov.f32	s17, s1
 8012028:	f000 f814 	bl	8012054 <__fpclassifyf>
 801202c:	b930      	cbnz	r0, 801203c <fminf+0x22>
 801202e:	eeb0 8a68 	vmov.f32	s16, s17
 8012032:	eeb0 0a48 	vmov.f32	s0, s16
 8012036:	ecbd 8b02 	vpop	{d8}
 801203a:	bd08      	pop	{r3, pc}
 801203c:	eeb0 0a68 	vmov.f32	s0, s17
 8012040:	f000 f808 	bl	8012054 <__fpclassifyf>
 8012044:	2800      	cmp	r0, #0
 8012046:	d0f4      	beq.n	8012032 <fminf+0x18>
 8012048:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801204c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012050:	d5ed      	bpl.n	801202e <fminf+0x14>
 8012052:	e7ee      	b.n	8012032 <fminf+0x18>

08012054 <__fpclassifyf>:
 8012054:	ee10 3a10 	vmov	r3, s0
 8012058:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801205c:	d00d      	beq.n	801207a <__fpclassifyf+0x26>
 801205e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8012062:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8012066:	d30a      	bcc.n	801207e <__fpclassifyf+0x2a>
 8012068:	4b07      	ldr	r3, [pc, #28]	@ (8012088 <__fpclassifyf+0x34>)
 801206a:	1e42      	subs	r2, r0, #1
 801206c:	429a      	cmp	r2, r3
 801206e:	d908      	bls.n	8012082 <__fpclassifyf+0x2e>
 8012070:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8012074:	4258      	negs	r0, r3
 8012076:	4158      	adcs	r0, r3
 8012078:	4770      	bx	lr
 801207a:	2002      	movs	r0, #2
 801207c:	4770      	bx	lr
 801207e:	2004      	movs	r0, #4
 8012080:	4770      	bx	lr
 8012082:	2003      	movs	r0, #3
 8012084:	4770      	bx	lr
 8012086:	bf00      	nop
 8012088:	007ffffe 	.word	0x007ffffe

0801208c <__ieee754_sqrtf>:
 801208c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012090:	4770      	bx	lr
 8012092:	0000      	movs	r0, r0
 8012094:	0000      	movs	r0, r0
	...

08012098 <__kernel_cos>:
 8012098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801209c:	ec57 6b10 	vmov	r6, r7, d0
 80120a0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80120a4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80120a8:	ed8d 1b00 	vstr	d1, [sp]
 80120ac:	d206      	bcs.n	80120bc <__kernel_cos+0x24>
 80120ae:	4630      	mov	r0, r6
 80120b0:	4639      	mov	r1, r7
 80120b2:	f7ee fd07 	bl	8000ac4 <__aeabi_d2iz>
 80120b6:	2800      	cmp	r0, #0
 80120b8:	f000 8088 	beq.w	80121cc <__kernel_cos+0x134>
 80120bc:	4632      	mov	r2, r6
 80120be:	463b      	mov	r3, r7
 80120c0:	4630      	mov	r0, r6
 80120c2:	4639      	mov	r1, r7
 80120c4:	f7ee fa64 	bl	8000590 <__aeabi_dmul>
 80120c8:	4b51      	ldr	r3, [pc, #324]	@ (8012210 <__kernel_cos+0x178>)
 80120ca:	2200      	movs	r2, #0
 80120cc:	4604      	mov	r4, r0
 80120ce:	460d      	mov	r5, r1
 80120d0:	f7ee fa5e 	bl	8000590 <__aeabi_dmul>
 80120d4:	a340      	add	r3, pc, #256	@ (adr r3, 80121d8 <__kernel_cos+0x140>)
 80120d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120da:	4682      	mov	sl, r0
 80120dc:	468b      	mov	fp, r1
 80120de:	4620      	mov	r0, r4
 80120e0:	4629      	mov	r1, r5
 80120e2:	f7ee fa55 	bl	8000590 <__aeabi_dmul>
 80120e6:	a33e      	add	r3, pc, #248	@ (adr r3, 80121e0 <__kernel_cos+0x148>)
 80120e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ec:	f7ee f89a 	bl	8000224 <__adddf3>
 80120f0:	4622      	mov	r2, r4
 80120f2:	462b      	mov	r3, r5
 80120f4:	f7ee fa4c 	bl	8000590 <__aeabi_dmul>
 80120f8:	a33b      	add	r3, pc, #236	@ (adr r3, 80121e8 <__kernel_cos+0x150>)
 80120fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fe:	f7ee f88f 	bl	8000220 <__aeabi_dsub>
 8012102:	4622      	mov	r2, r4
 8012104:	462b      	mov	r3, r5
 8012106:	f7ee fa43 	bl	8000590 <__aeabi_dmul>
 801210a:	a339      	add	r3, pc, #228	@ (adr r3, 80121f0 <__kernel_cos+0x158>)
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	f7ee f888 	bl	8000224 <__adddf3>
 8012114:	4622      	mov	r2, r4
 8012116:	462b      	mov	r3, r5
 8012118:	f7ee fa3a 	bl	8000590 <__aeabi_dmul>
 801211c:	a336      	add	r3, pc, #216	@ (adr r3, 80121f8 <__kernel_cos+0x160>)
 801211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012122:	f7ee f87d 	bl	8000220 <__aeabi_dsub>
 8012126:	4622      	mov	r2, r4
 8012128:	462b      	mov	r3, r5
 801212a:	f7ee fa31 	bl	8000590 <__aeabi_dmul>
 801212e:	a334      	add	r3, pc, #208	@ (adr r3, 8012200 <__kernel_cos+0x168>)
 8012130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012134:	f7ee f876 	bl	8000224 <__adddf3>
 8012138:	4622      	mov	r2, r4
 801213a:	462b      	mov	r3, r5
 801213c:	f7ee fa28 	bl	8000590 <__aeabi_dmul>
 8012140:	4622      	mov	r2, r4
 8012142:	462b      	mov	r3, r5
 8012144:	f7ee fa24 	bl	8000590 <__aeabi_dmul>
 8012148:	e9dd 2300 	ldrd	r2, r3, [sp]
 801214c:	4604      	mov	r4, r0
 801214e:	460d      	mov	r5, r1
 8012150:	4630      	mov	r0, r6
 8012152:	4639      	mov	r1, r7
 8012154:	f7ee fa1c 	bl	8000590 <__aeabi_dmul>
 8012158:	460b      	mov	r3, r1
 801215a:	4602      	mov	r2, r0
 801215c:	4629      	mov	r1, r5
 801215e:	4620      	mov	r0, r4
 8012160:	f7ee f85e 	bl	8000220 <__aeabi_dsub>
 8012164:	4b2b      	ldr	r3, [pc, #172]	@ (8012214 <__kernel_cos+0x17c>)
 8012166:	4598      	cmp	r8, r3
 8012168:	4606      	mov	r6, r0
 801216a:	460f      	mov	r7, r1
 801216c:	d810      	bhi.n	8012190 <__kernel_cos+0xf8>
 801216e:	4602      	mov	r2, r0
 8012170:	460b      	mov	r3, r1
 8012172:	4650      	mov	r0, sl
 8012174:	4659      	mov	r1, fp
 8012176:	f7ee f853 	bl	8000220 <__aeabi_dsub>
 801217a:	460b      	mov	r3, r1
 801217c:	4926      	ldr	r1, [pc, #152]	@ (8012218 <__kernel_cos+0x180>)
 801217e:	4602      	mov	r2, r0
 8012180:	2000      	movs	r0, #0
 8012182:	f7ee f84d 	bl	8000220 <__aeabi_dsub>
 8012186:	ec41 0b10 	vmov	d0, r0, r1
 801218a:	b003      	add	sp, #12
 801218c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012190:	4b22      	ldr	r3, [pc, #136]	@ (801221c <__kernel_cos+0x184>)
 8012192:	4921      	ldr	r1, [pc, #132]	@ (8012218 <__kernel_cos+0x180>)
 8012194:	4598      	cmp	r8, r3
 8012196:	bf8c      	ite	hi
 8012198:	4d21      	ldrhi	r5, [pc, #132]	@ (8012220 <__kernel_cos+0x188>)
 801219a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801219e:	2400      	movs	r4, #0
 80121a0:	4622      	mov	r2, r4
 80121a2:	462b      	mov	r3, r5
 80121a4:	2000      	movs	r0, #0
 80121a6:	f7ee f83b 	bl	8000220 <__aeabi_dsub>
 80121aa:	4622      	mov	r2, r4
 80121ac:	4680      	mov	r8, r0
 80121ae:	4689      	mov	r9, r1
 80121b0:	462b      	mov	r3, r5
 80121b2:	4650      	mov	r0, sl
 80121b4:	4659      	mov	r1, fp
 80121b6:	f7ee f833 	bl	8000220 <__aeabi_dsub>
 80121ba:	4632      	mov	r2, r6
 80121bc:	463b      	mov	r3, r7
 80121be:	f7ee f82f 	bl	8000220 <__aeabi_dsub>
 80121c2:	4602      	mov	r2, r0
 80121c4:	460b      	mov	r3, r1
 80121c6:	4640      	mov	r0, r8
 80121c8:	4649      	mov	r1, r9
 80121ca:	e7da      	b.n	8012182 <__kernel_cos+0xea>
 80121cc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8012208 <__kernel_cos+0x170>
 80121d0:	e7db      	b.n	801218a <__kernel_cos+0xf2>
 80121d2:	bf00      	nop
 80121d4:	f3af 8000 	nop.w
 80121d8:	be8838d4 	.word	0xbe8838d4
 80121dc:	bda8fae9 	.word	0xbda8fae9
 80121e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80121e4:	3e21ee9e 	.word	0x3e21ee9e
 80121e8:	809c52ad 	.word	0x809c52ad
 80121ec:	3e927e4f 	.word	0x3e927e4f
 80121f0:	19cb1590 	.word	0x19cb1590
 80121f4:	3efa01a0 	.word	0x3efa01a0
 80121f8:	16c15177 	.word	0x16c15177
 80121fc:	3f56c16c 	.word	0x3f56c16c
 8012200:	5555554c 	.word	0x5555554c
 8012204:	3fa55555 	.word	0x3fa55555
 8012208:	00000000 	.word	0x00000000
 801220c:	3ff00000 	.word	0x3ff00000
 8012210:	3fe00000 	.word	0x3fe00000
 8012214:	3fd33332 	.word	0x3fd33332
 8012218:	3ff00000 	.word	0x3ff00000
 801221c:	3fe90000 	.word	0x3fe90000
 8012220:	3fd20000 	.word	0x3fd20000
 8012224:	00000000 	.word	0x00000000

08012228 <__kernel_sin>:
 8012228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222c:	ec55 4b10 	vmov	r4, r5, d0
 8012230:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012234:	b085      	sub	sp, #20
 8012236:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801223a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801223e:	4680      	mov	r8, r0
 8012240:	d205      	bcs.n	801224e <__kernel_sin+0x26>
 8012242:	4620      	mov	r0, r4
 8012244:	4629      	mov	r1, r5
 8012246:	f7ee fc3d 	bl	8000ac4 <__aeabi_d2iz>
 801224a:	2800      	cmp	r0, #0
 801224c:	d052      	beq.n	80122f4 <__kernel_sin+0xcc>
 801224e:	4622      	mov	r2, r4
 8012250:	462b      	mov	r3, r5
 8012252:	4620      	mov	r0, r4
 8012254:	4629      	mov	r1, r5
 8012256:	f7ee f99b 	bl	8000590 <__aeabi_dmul>
 801225a:	4682      	mov	sl, r0
 801225c:	468b      	mov	fp, r1
 801225e:	4602      	mov	r2, r0
 8012260:	460b      	mov	r3, r1
 8012262:	4620      	mov	r0, r4
 8012264:	4629      	mov	r1, r5
 8012266:	f7ee f993 	bl	8000590 <__aeabi_dmul>
 801226a:	a342      	add	r3, pc, #264	@ (adr r3, 8012374 <__kernel_sin+0x14c>)
 801226c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012270:	e9cd 0100 	strd	r0, r1, [sp]
 8012274:	4650      	mov	r0, sl
 8012276:	4659      	mov	r1, fp
 8012278:	f7ee f98a 	bl	8000590 <__aeabi_dmul>
 801227c:	a33f      	add	r3, pc, #252	@ (adr r3, 801237c <__kernel_sin+0x154>)
 801227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012282:	f7ed ffcd 	bl	8000220 <__aeabi_dsub>
 8012286:	4652      	mov	r2, sl
 8012288:	465b      	mov	r3, fp
 801228a:	f7ee f981 	bl	8000590 <__aeabi_dmul>
 801228e:	a33d      	add	r3, pc, #244	@ (adr r3, 8012384 <__kernel_sin+0x15c>)
 8012290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012294:	f7ed ffc6 	bl	8000224 <__adddf3>
 8012298:	4652      	mov	r2, sl
 801229a:	465b      	mov	r3, fp
 801229c:	f7ee f978 	bl	8000590 <__aeabi_dmul>
 80122a0:	a33a      	add	r3, pc, #232	@ (adr r3, 801238c <__kernel_sin+0x164>)
 80122a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a6:	f7ed ffbb 	bl	8000220 <__aeabi_dsub>
 80122aa:	4652      	mov	r2, sl
 80122ac:	465b      	mov	r3, fp
 80122ae:	f7ee f96f 	bl	8000590 <__aeabi_dmul>
 80122b2:	a338      	add	r3, pc, #224	@ (adr r3, 8012394 <__kernel_sin+0x16c>)
 80122b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b8:	f7ed ffb4 	bl	8000224 <__adddf3>
 80122bc:	4606      	mov	r6, r0
 80122be:	460f      	mov	r7, r1
 80122c0:	f1b8 0f00 	cmp.w	r8, #0
 80122c4:	d11b      	bne.n	80122fe <__kernel_sin+0xd6>
 80122c6:	4602      	mov	r2, r0
 80122c8:	460b      	mov	r3, r1
 80122ca:	4650      	mov	r0, sl
 80122cc:	4659      	mov	r1, fp
 80122ce:	f7ee f95f 	bl	8000590 <__aeabi_dmul>
 80122d2:	a325      	add	r3, pc, #148	@ (adr r3, 8012368 <__kernel_sin+0x140>)
 80122d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122d8:	f7ed ffa2 	bl	8000220 <__aeabi_dsub>
 80122dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122e0:	f7ee f956 	bl	8000590 <__aeabi_dmul>
 80122e4:	4602      	mov	r2, r0
 80122e6:	460b      	mov	r3, r1
 80122e8:	4620      	mov	r0, r4
 80122ea:	4629      	mov	r1, r5
 80122ec:	f7ed ff9a 	bl	8000224 <__adddf3>
 80122f0:	4604      	mov	r4, r0
 80122f2:	460d      	mov	r5, r1
 80122f4:	ec45 4b10 	vmov	d0, r4, r5
 80122f8:	b005      	add	sp, #20
 80122fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012302:	4b1b      	ldr	r3, [pc, #108]	@ (8012370 <__kernel_sin+0x148>)
 8012304:	2200      	movs	r2, #0
 8012306:	f7ee f943 	bl	8000590 <__aeabi_dmul>
 801230a:	4632      	mov	r2, r6
 801230c:	4680      	mov	r8, r0
 801230e:	4689      	mov	r9, r1
 8012310:	463b      	mov	r3, r7
 8012312:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012316:	f7ee f93b 	bl	8000590 <__aeabi_dmul>
 801231a:	4602      	mov	r2, r0
 801231c:	460b      	mov	r3, r1
 801231e:	4640      	mov	r0, r8
 8012320:	4649      	mov	r1, r9
 8012322:	f7ed ff7d 	bl	8000220 <__aeabi_dsub>
 8012326:	4652      	mov	r2, sl
 8012328:	465b      	mov	r3, fp
 801232a:	f7ee f931 	bl	8000590 <__aeabi_dmul>
 801232e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012332:	f7ed ff75 	bl	8000220 <__aeabi_dsub>
 8012336:	a30c      	add	r3, pc, #48	@ (adr r3, 8012368 <__kernel_sin+0x140>)
 8012338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801233c:	4606      	mov	r6, r0
 801233e:	460f      	mov	r7, r1
 8012340:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012344:	f7ee f924 	bl	8000590 <__aeabi_dmul>
 8012348:	4602      	mov	r2, r0
 801234a:	460b      	mov	r3, r1
 801234c:	4630      	mov	r0, r6
 801234e:	4639      	mov	r1, r7
 8012350:	f7ed ff68 	bl	8000224 <__adddf3>
 8012354:	4602      	mov	r2, r0
 8012356:	460b      	mov	r3, r1
 8012358:	4620      	mov	r0, r4
 801235a:	4629      	mov	r1, r5
 801235c:	f7ed ff60 	bl	8000220 <__aeabi_dsub>
 8012360:	e7c6      	b.n	80122f0 <__kernel_sin+0xc8>
 8012362:	bf00      	nop
 8012364:	f3af 8000 	nop.w
 8012368:	55555549 	.word	0x55555549
 801236c:	3fc55555 	.word	0x3fc55555
 8012370:	3fe00000 	.word	0x3fe00000
 8012374:	5acfd57c 	.word	0x5acfd57c
 8012378:	3de5d93a 	.word	0x3de5d93a
 801237c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012380:	3e5ae5e6 	.word	0x3e5ae5e6
 8012384:	57b1fe7d 	.word	0x57b1fe7d
 8012388:	3ec71de3 	.word	0x3ec71de3
 801238c:	19c161d5 	.word	0x19c161d5
 8012390:	3f2a01a0 	.word	0x3f2a01a0
 8012394:	1110f8a6 	.word	0x1110f8a6
 8012398:	3f811111 	.word	0x3f811111
 801239c:	00000000 	.word	0x00000000

080123a0 <__ieee754_rem_pio2>:
 80123a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a4:	ec57 6b10 	vmov	r6, r7, d0
 80123a8:	4bc5      	ldr	r3, [pc, #788]	@ (80126c0 <__ieee754_rem_pio2+0x320>)
 80123aa:	b08d      	sub	sp, #52	@ 0x34
 80123ac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80123b0:	4598      	cmp	r8, r3
 80123b2:	4604      	mov	r4, r0
 80123b4:	9704      	str	r7, [sp, #16]
 80123b6:	d807      	bhi.n	80123c8 <__ieee754_rem_pio2+0x28>
 80123b8:	2200      	movs	r2, #0
 80123ba:	2300      	movs	r3, #0
 80123bc:	ed80 0b00 	vstr	d0, [r0]
 80123c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80123c4:	2500      	movs	r5, #0
 80123c6:	e028      	b.n	801241a <__ieee754_rem_pio2+0x7a>
 80123c8:	4bbe      	ldr	r3, [pc, #760]	@ (80126c4 <__ieee754_rem_pio2+0x324>)
 80123ca:	4598      	cmp	r8, r3
 80123cc:	d878      	bhi.n	80124c0 <__ieee754_rem_pio2+0x120>
 80123ce:	9b04      	ldr	r3, [sp, #16]
 80123d0:	4dbd      	ldr	r5, [pc, #756]	@ (80126c8 <__ieee754_rem_pio2+0x328>)
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	4630      	mov	r0, r6
 80123d6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8012688 <__ieee754_rem_pio2+0x2e8>)
 80123d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123dc:	4639      	mov	r1, r7
 80123de:	dd38      	ble.n	8012452 <__ieee754_rem_pio2+0xb2>
 80123e0:	f7ed ff1e 	bl	8000220 <__aeabi_dsub>
 80123e4:	45a8      	cmp	r8, r5
 80123e6:	4606      	mov	r6, r0
 80123e8:	460f      	mov	r7, r1
 80123ea:	d01a      	beq.n	8012422 <__ieee754_rem_pio2+0x82>
 80123ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8012690 <__ieee754_rem_pio2+0x2f0>)
 80123ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123f2:	f7ed ff15 	bl	8000220 <__aeabi_dsub>
 80123f6:	4602      	mov	r2, r0
 80123f8:	460b      	mov	r3, r1
 80123fa:	4680      	mov	r8, r0
 80123fc:	4689      	mov	r9, r1
 80123fe:	4630      	mov	r0, r6
 8012400:	4639      	mov	r1, r7
 8012402:	f7ed ff0d 	bl	8000220 <__aeabi_dsub>
 8012406:	a3a2      	add	r3, pc, #648	@ (adr r3, 8012690 <__ieee754_rem_pio2+0x2f0>)
 8012408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240c:	f7ed ff08 	bl	8000220 <__aeabi_dsub>
 8012410:	e9c4 8900 	strd	r8, r9, [r4]
 8012414:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012418:	2501      	movs	r5, #1
 801241a:	4628      	mov	r0, r5
 801241c:	b00d      	add	sp, #52	@ 0x34
 801241e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012422:	a39d      	add	r3, pc, #628	@ (adr r3, 8012698 <__ieee754_rem_pio2+0x2f8>)
 8012424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012428:	f7ed fefa 	bl	8000220 <__aeabi_dsub>
 801242c:	a39c      	add	r3, pc, #624	@ (adr r3, 80126a0 <__ieee754_rem_pio2+0x300>)
 801242e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012432:	4606      	mov	r6, r0
 8012434:	460f      	mov	r7, r1
 8012436:	f7ed fef3 	bl	8000220 <__aeabi_dsub>
 801243a:	4602      	mov	r2, r0
 801243c:	460b      	mov	r3, r1
 801243e:	4680      	mov	r8, r0
 8012440:	4689      	mov	r9, r1
 8012442:	4630      	mov	r0, r6
 8012444:	4639      	mov	r1, r7
 8012446:	f7ed feeb 	bl	8000220 <__aeabi_dsub>
 801244a:	a395      	add	r3, pc, #596	@ (adr r3, 80126a0 <__ieee754_rem_pio2+0x300>)
 801244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012450:	e7dc      	b.n	801240c <__ieee754_rem_pio2+0x6c>
 8012452:	f7ed fee7 	bl	8000224 <__adddf3>
 8012456:	45a8      	cmp	r8, r5
 8012458:	4606      	mov	r6, r0
 801245a:	460f      	mov	r7, r1
 801245c:	d018      	beq.n	8012490 <__ieee754_rem_pio2+0xf0>
 801245e:	a38c      	add	r3, pc, #560	@ (adr r3, 8012690 <__ieee754_rem_pio2+0x2f0>)
 8012460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012464:	f7ed fede 	bl	8000224 <__adddf3>
 8012468:	4602      	mov	r2, r0
 801246a:	460b      	mov	r3, r1
 801246c:	4680      	mov	r8, r0
 801246e:	4689      	mov	r9, r1
 8012470:	4630      	mov	r0, r6
 8012472:	4639      	mov	r1, r7
 8012474:	f7ed fed4 	bl	8000220 <__aeabi_dsub>
 8012478:	a385      	add	r3, pc, #532	@ (adr r3, 8012690 <__ieee754_rem_pio2+0x2f0>)
 801247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801247e:	f7ed fed1 	bl	8000224 <__adddf3>
 8012482:	f04f 35ff 	mov.w	r5, #4294967295
 8012486:	e9c4 8900 	strd	r8, r9, [r4]
 801248a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801248e:	e7c4      	b.n	801241a <__ieee754_rem_pio2+0x7a>
 8012490:	a381      	add	r3, pc, #516	@ (adr r3, 8012698 <__ieee754_rem_pio2+0x2f8>)
 8012492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012496:	f7ed fec5 	bl	8000224 <__adddf3>
 801249a:	a381      	add	r3, pc, #516	@ (adr r3, 80126a0 <__ieee754_rem_pio2+0x300>)
 801249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a0:	4606      	mov	r6, r0
 80124a2:	460f      	mov	r7, r1
 80124a4:	f7ed febe 	bl	8000224 <__adddf3>
 80124a8:	4602      	mov	r2, r0
 80124aa:	460b      	mov	r3, r1
 80124ac:	4680      	mov	r8, r0
 80124ae:	4689      	mov	r9, r1
 80124b0:	4630      	mov	r0, r6
 80124b2:	4639      	mov	r1, r7
 80124b4:	f7ed feb4 	bl	8000220 <__aeabi_dsub>
 80124b8:	a379      	add	r3, pc, #484	@ (adr r3, 80126a0 <__ieee754_rem_pio2+0x300>)
 80124ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124be:	e7de      	b.n	801247e <__ieee754_rem_pio2+0xde>
 80124c0:	4b82      	ldr	r3, [pc, #520]	@ (80126cc <__ieee754_rem_pio2+0x32c>)
 80124c2:	4598      	cmp	r8, r3
 80124c4:	f200 80d1 	bhi.w	801266a <__ieee754_rem_pio2+0x2ca>
 80124c8:	f000 f966 	bl	8012798 <fabs>
 80124cc:	ec57 6b10 	vmov	r6, r7, d0
 80124d0:	a375      	add	r3, pc, #468	@ (adr r3, 80126a8 <__ieee754_rem_pio2+0x308>)
 80124d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d6:	4630      	mov	r0, r6
 80124d8:	4639      	mov	r1, r7
 80124da:	f7ee f859 	bl	8000590 <__aeabi_dmul>
 80124de:	4b7c      	ldr	r3, [pc, #496]	@ (80126d0 <__ieee754_rem_pio2+0x330>)
 80124e0:	2200      	movs	r2, #0
 80124e2:	f7ed fe9f 	bl	8000224 <__adddf3>
 80124e6:	f7ee faed 	bl	8000ac4 <__aeabi_d2iz>
 80124ea:	4605      	mov	r5, r0
 80124ec:	f7ed ffe6 	bl	80004bc <__aeabi_i2d>
 80124f0:	4602      	mov	r2, r0
 80124f2:	460b      	mov	r3, r1
 80124f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80124f8:	a363      	add	r3, pc, #396	@ (adr r3, 8012688 <__ieee754_rem_pio2+0x2e8>)
 80124fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124fe:	f7ee f847 	bl	8000590 <__aeabi_dmul>
 8012502:	4602      	mov	r2, r0
 8012504:	460b      	mov	r3, r1
 8012506:	4630      	mov	r0, r6
 8012508:	4639      	mov	r1, r7
 801250a:	f7ed fe89 	bl	8000220 <__aeabi_dsub>
 801250e:	a360      	add	r3, pc, #384	@ (adr r3, 8012690 <__ieee754_rem_pio2+0x2f0>)
 8012510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012514:	4682      	mov	sl, r0
 8012516:	468b      	mov	fp, r1
 8012518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801251c:	f7ee f838 	bl	8000590 <__aeabi_dmul>
 8012520:	2d1f      	cmp	r5, #31
 8012522:	4606      	mov	r6, r0
 8012524:	460f      	mov	r7, r1
 8012526:	dc0c      	bgt.n	8012542 <__ieee754_rem_pio2+0x1a2>
 8012528:	4b6a      	ldr	r3, [pc, #424]	@ (80126d4 <__ieee754_rem_pio2+0x334>)
 801252a:	1e6a      	subs	r2, r5, #1
 801252c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012530:	4543      	cmp	r3, r8
 8012532:	d006      	beq.n	8012542 <__ieee754_rem_pio2+0x1a2>
 8012534:	4632      	mov	r2, r6
 8012536:	463b      	mov	r3, r7
 8012538:	4650      	mov	r0, sl
 801253a:	4659      	mov	r1, fp
 801253c:	f7ed fe70 	bl	8000220 <__aeabi_dsub>
 8012540:	e00e      	b.n	8012560 <__ieee754_rem_pio2+0x1c0>
 8012542:	463b      	mov	r3, r7
 8012544:	4632      	mov	r2, r6
 8012546:	4650      	mov	r0, sl
 8012548:	4659      	mov	r1, fp
 801254a:	f7ed fe69 	bl	8000220 <__aeabi_dsub>
 801254e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012552:	9305      	str	r3, [sp, #20]
 8012554:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012558:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801255c:	2b10      	cmp	r3, #16
 801255e:	dc02      	bgt.n	8012566 <__ieee754_rem_pio2+0x1c6>
 8012560:	e9c4 0100 	strd	r0, r1, [r4]
 8012564:	e039      	b.n	80125da <__ieee754_rem_pio2+0x23a>
 8012566:	a34c      	add	r3, pc, #304	@ (adr r3, 8012698 <__ieee754_rem_pio2+0x2f8>)
 8012568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012570:	f7ee f80e 	bl	8000590 <__aeabi_dmul>
 8012574:	4606      	mov	r6, r0
 8012576:	460f      	mov	r7, r1
 8012578:	4602      	mov	r2, r0
 801257a:	460b      	mov	r3, r1
 801257c:	4650      	mov	r0, sl
 801257e:	4659      	mov	r1, fp
 8012580:	f7ed fe4e 	bl	8000220 <__aeabi_dsub>
 8012584:	4602      	mov	r2, r0
 8012586:	460b      	mov	r3, r1
 8012588:	4680      	mov	r8, r0
 801258a:	4689      	mov	r9, r1
 801258c:	4650      	mov	r0, sl
 801258e:	4659      	mov	r1, fp
 8012590:	f7ed fe46 	bl	8000220 <__aeabi_dsub>
 8012594:	4632      	mov	r2, r6
 8012596:	463b      	mov	r3, r7
 8012598:	f7ed fe42 	bl	8000220 <__aeabi_dsub>
 801259c:	a340      	add	r3, pc, #256	@ (adr r3, 80126a0 <__ieee754_rem_pio2+0x300>)
 801259e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a2:	4606      	mov	r6, r0
 80125a4:	460f      	mov	r7, r1
 80125a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125aa:	f7ed fff1 	bl	8000590 <__aeabi_dmul>
 80125ae:	4632      	mov	r2, r6
 80125b0:	463b      	mov	r3, r7
 80125b2:	f7ed fe35 	bl	8000220 <__aeabi_dsub>
 80125b6:	4602      	mov	r2, r0
 80125b8:	460b      	mov	r3, r1
 80125ba:	4606      	mov	r6, r0
 80125bc:	460f      	mov	r7, r1
 80125be:	4640      	mov	r0, r8
 80125c0:	4649      	mov	r1, r9
 80125c2:	f7ed fe2d 	bl	8000220 <__aeabi_dsub>
 80125c6:	9a05      	ldr	r2, [sp, #20]
 80125c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80125cc:	1ad3      	subs	r3, r2, r3
 80125ce:	2b31      	cmp	r3, #49	@ 0x31
 80125d0:	dc20      	bgt.n	8012614 <__ieee754_rem_pio2+0x274>
 80125d2:	e9c4 0100 	strd	r0, r1, [r4]
 80125d6:	46c2      	mov	sl, r8
 80125d8:	46cb      	mov	fp, r9
 80125da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80125de:	4650      	mov	r0, sl
 80125e0:	4642      	mov	r2, r8
 80125e2:	464b      	mov	r3, r9
 80125e4:	4659      	mov	r1, fp
 80125e6:	f7ed fe1b 	bl	8000220 <__aeabi_dsub>
 80125ea:	463b      	mov	r3, r7
 80125ec:	4632      	mov	r2, r6
 80125ee:	f7ed fe17 	bl	8000220 <__aeabi_dsub>
 80125f2:	9b04      	ldr	r3, [sp, #16]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80125fa:	f6bf af0e 	bge.w	801241a <__ieee754_rem_pio2+0x7a>
 80125fe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8012602:	6063      	str	r3, [r4, #4]
 8012604:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012608:	f8c4 8000 	str.w	r8, [r4]
 801260c:	60a0      	str	r0, [r4, #8]
 801260e:	60e3      	str	r3, [r4, #12]
 8012610:	426d      	negs	r5, r5
 8012612:	e702      	b.n	801241a <__ieee754_rem_pio2+0x7a>
 8012614:	a326      	add	r3, pc, #152	@ (adr r3, 80126b0 <__ieee754_rem_pio2+0x310>)
 8012616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801261a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801261e:	f7ed ffb7 	bl	8000590 <__aeabi_dmul>
 8012622:	4606      	mov	r6, r0
 8012624:	460f      	mov	r7, r1
 8012626:	4602      	mov	r2, r0
 8012628:	460b      	mov	r3, r1
 801262a:	4640      	mov	r0, r8
 801262c:	4649      	mov	r1, r9
 801262e:	f7ed fdf7 	bl	8000220 <__aeabi_dsub>
 8012632:	4602      	mov	r2, r0
 8012634:	460b      	mov	r3, r1
 8012636:	4682      	mov	sl, r0
 8012638:	468b      	mov	fp, r1
 801263a:	4640      	mov	r0, r8
 801263c:	4649      	mov	r1, r9
 801263e:	f7ed fdef 	bl	8000220 <__aeabi_dsub>
 8012642:	4632      	mov	r2, r6
 8012644:	463b      	mov	r3, r7
 8012646:	f7ed fdeb 	bl	8000220 <__aeabi_dsub>
 801264a:	a31b      	add	r3, pc, #108	@ (adr r3, 80126b8 <__ieee754_rem_pio2+0x318>)
 801264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012650:	4606      	mov	r6, r0
 8012652:	460f      	mov	r7, r1
 8012654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012658:	f7ed ff9a 	bl	8000590 <__aeabi_dmul>
 801265c:	4632      	mov	r2, r6
 801265e:	463b      	mov	r3, r7
 8012660:	f7ed fdde 	bl	8000220 <__aeabi_dsub>
 8012664:	4606      	mov	r6, r0
 8012666:	460f      	mov	r7, r1
 8012668:	e764      	b.n	8012534 <__ieee754_rem_pio2+0x194>
 801266a:	4b1b      	ldr	r3, [pc, #108]	@ (80126d8 <__ieee754_rem_pio2+0x338>)
 801266c:	4598      	cmp	r8, r3
 801266e:	d935      	bls.n	80126dc <__ieee754_rem_pio2+0x33c>
 8012670:	4632      	mov	r2, r6
 8012672:	463b      	mov	r3, r7
 8012674:	4630      	mov	r0, r6
 8012676:	4639      	mov	r1, r7
 8012678:	f7ed fdd2 	bl	8000220 <__aeabi_dsub>
 801267c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012680:	e9c4 0100 	strd	r0, r1, [r4]
 8012684:	e69e      	b.n	80123c4 <__ieee754_rem_pio2+0x24>
 8012686:	bf00      	nop
 8012688:	54400000 	.word	0x54400000
 801268c:	3ff921fb 	.word	0x3ff921fb
 8012690:	1a626331 	.word	0x1a626331
 8012694:	3dd0b461 	.word	0x3dd0b461
 8012698:	1a600000 	.word	0x1a600000
 801269c:	3dd0b461 	.word	0x3dd0b461
 80126a0:	2e037073 	.word	0x2e037073
 80126a4:	3ba3198a 	.word	0x3ba3198a
 80126a8:	6dc9c883 	.word	0x6dc9c883
 80126ac:	3fe45f30 	.word	0x3fe45f30
 80126b0:	2e000000 	.word	0x2e000000
 80126b4:	3ba3198a 	.word	0x3ba3198a
 80126b8:	252049c1 	.word	0x252049c1
 80126bc:	397b839a 	.word	0x397b839a
 80126c0:	3fe921fb 	.word	0x3fe921fb
 80126c4:	4002d97b 	.word	0x4002d97b
 80126c8:	3ff921fb 	.word	0x3ff921fb
 80126cc:	413921fb 	.word	0x413921fb
 80126d0:	3fe00000 	.word	0x3fe00000
 80126d4:	08013bd8 	.word	0x08013bd8
 80126d8:	7fefffff 	.word	0x7fefffff
 80126dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80126e0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80126e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80126e8:	4630      	mov	r0, r6
 80126ea:	460f      	mov	r7, r1
 80126ec:	f7ee f9ea 	bl	8000ac4 <__aeabi_d2iz>
 80126f0:	f7ed fee4 	bl	80004bc <__aeabi_i2d>
 80126f4:	4602      	mov	r2, r0
 80126f6:	460b      	mov	r3, r1
 80126f8:	4630      	mov	r0, r6
 80126fa:	4639      	mov	r1, r7
 80126fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012700:	f7ed fd8e 	bl	8000220 <__aeabi_dsub>
 8012704:	4b22      	ldr	r3, [pc, #136]	@ (8012790 <__ieee754_rem_pio2+0x3f0>)
 8012706:	2200      	movs	r2, #0
 8012708:	f7ed ff42 	bl	8000590 <__aeabi_dmul>
 801270c:	460f      	mov	r7, r1
 801270e:	4606      	mov	r6, r0
 8012710:	f7ee f9d8 	bl	8000ac4 <__aeabi_d2iz>
 8012714:	f7ed fed2 	bl	80004bc <__aeabi_i2d>
 8012718:	4602      	mov	r2, r0
 801271a:	460b      	mov	r3, r1
 801271c:	4630      	mov	r0, r6
 801271e:	4639      	mov	r1, r7
 8012720:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012724:	f7ed fd7c 	bl	8000220 <__aeabi_dsub>
 8012728:	4b19      	ldr	r3, [pc, #100]	@ (8012790 <__ieee754_rem_pio2+0x3f0>)
 801272a:	2200      	movs	r2, #0
 801272c:	f7ed ff30 	bl	8000590 <__aeabi_dmul>
 8012730:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8012734:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8012738:	f04f 0803 	mov.w	r8, #3
 801273c:	2600      	movs	r6, #0
 801273e:	2700      	movs	r7, #0
 8012740:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012744:	4632      	mov	r2, r6
 8012746:	463b      	mov	r3, r7
 8012748:	46c2      	mov	sl, r8
 801274a:	f108 38ff 	add.w	r8, r8, #4294967295
 801274e:	f7ee f987 	bl	8000a60 <__aeabi_dcmpeq>
 8012752:	2800      	cmp	r0, #0
 8012754:	d1f4      	bne.n	8012740 <__ieee754_rem_pio2+0x3a0>
 8012756:	4b0f      	ldr	r3, [pc, #60]	@ (8012794 <__ieee754_rem_pio2+0x3f4>)
 8012758:	9301      	str	r3, [sp, #4]
 801275a:	2302      	movs	r3, #2
 801275c:	9300      	str	r3, [sp, #0]
 801275e:	462a      	mov	r2, r5
 8012760:	4653      	mov	r3, sl
 8012762:	4621      	mov	r1, r4
 8012764:	a806      	add	r0, sp, #24
 8012766:	f000 fb5b 	bl	8012e20 <__kernel_rem_pio2>
 801276a:	9b04      	ldr	r3, [sp, #16]
 801276c:	2b00      	cmp	r3, #0
 801276e:	4605      	mov	r5, r0
 8012770:	f6bf ae53 	bge.w	801241a <__ieee754_rem_pio2+0x7a>
 8012774:	e9d4 2100 	ldrd	r2, r1, [r4]
 8012778:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801277c:	e9c4 2300 	strd	r2, r3, [r4]
 8012780:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8012784:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8012788:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801278c:	e740      	b.n	8012610 <__ieee754_rem_pio2+0x270>
 801278e:	bf00      	nop
 8012790:	41700000 	.word	0x41700000
 8012794:	08013c58 	.word	0x08013c58

08012798 <fabs>:
 8012798:	ec51 0b10 	vmov	r0, r1, d0
 801279c:	4602      	mov	r2, r0
 801279e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80127a2:	ec43 2b10 	vmov	d0, r2, r3
 80127a6:	4770      	bx	lr

080127a8 <__kernel_cosf>:
 80127a8:	ee10 3a10 	vmov	r3, s0
 80127ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80127b0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80127b4:	eef0 6a40 	vmov.f32	s13, s0
 80127b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80127bc:	d204      	bcs.n	80127c8 <__kernel_cosf+0x20>
 80127be:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80127c2:	ee17 2a90 	vmov	r2, s15
 80127c6:	b342      	cbz	r2, 801281a <__kernel_cosf+0x72>
 80127c8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80127cc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8012838 <__kernel_cosf+0x90>
 80127d0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801283c <__kernel_cosf+0x94>
 80127d4:	4a1a      	ldr	r2, [pc, #104]	@ (8012840 <__kernel_cosf+0x98>)
 80127d6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80127da:	4293      	cmp	r3, r2
 80127dc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012844 <__kernel_cosf+0x9c>
 80127e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80127e4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8012848 <__kernel_cosf+0xa0>
 80127e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80127ec:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801284c <__kernel_cosf+0xa4>
 80127f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80127f4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8012850 <__kernel_cosf+0xa8>
 80127f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80127fc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8012800:	ee26 6a07 	vmul.f32	s12, s12, s14
 8012804:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012808:	eee7 0a06 	vfma.f32	s1, s14, s12
 801280c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012810:	d804      	bhi.n	801281c <__kernel_cosf+0x74>
 8012812:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8012816:	ee30 0a67 	vsub.f32	s0, s0, s15
 801281a:	4770      	bx	lr
 801281c:	4a0d      	ldr	r2, [pc, #52]	@ (8012854 <__kernel_cosf+0xac>)
 801281e:	4293      	cmp	r3, r2
 8012820:	bf9a      	itte	ls
 8012822:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8012826:	ee07 3a10 	vmovls	s14, r3
 801282a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801282e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012832:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012836:	e7ec      	b.n	8012812 <__kernel_cosf+0x6a>
 8012838:	ad47d74e 	.word	0xad47d74e
 801283c:	310f74f6 	.word	0x310f74f6
 8012840:	3e999999 	.word	0x3e999999
 8012844:	b493f27c 	.word	0xb493f27c
 8012848:	37d00d01 	.word	0x37d00d01
 801284c:	bab60b61 	.word	0xbab60b61
 8012850:	3d2aaaab 	.word	0x3d2aaaab
 8012854:	3f480000 	.word	0x3f480000

08012858 <__kernel_sinf>:
 8012858:	ee10 3a10 	vmov	r3, s0
 801285c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012860:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8012864:	d204      	bcs.n	8012870 <__kernel_sinf+0x18>
 8012866:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801286a:	ee17 3a90 	vmov	r3, s15
 801286e:	b35b      	cbz	r3, 80128c8 <__kernel_sinf+0x70>
 8012870:	ee20 7a00 	vmul.f32	s14, s0, s0
 8012874:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80128cc <__kernel_sinf+0x74>
 8012878:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80128d0 <__kernel_sinf+0x78>
 801287c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8012880:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80128d4 <__kernel_sinf+0x7c>
 8012884:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012888:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80128d8 <__kernel_sinf+0x80>
 801288c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8012890:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80128dc <__kernel_sinf+0x84>
 8012894:	ee60 6a07 	vmul.f32	s13, s0, s14
 8012898:	eee6 7a07 	vfma.f32	s15, s12, s14
 801289c:	b930      	cbnz	r0, 80128ac <__kernel_sinf+0x54>
 801289e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80128e0 <__kernel_sinf+0x88>
 80128a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80128a6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80128aa:	4770      	bx	lr
 80128ac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80128b0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80128b4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80128b8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80128bc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80128e4 <__kernel_sinf+0x8c>
 80128c0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80128c4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80128c8:	4770      	bx	lr
 80128ca:	bf00      	nop
 80128cc:	2f2ec9d3 	.word	0x2f2ec9d3
 80128d0:	b2d72f34 	.word	0xb2d72f34
 80128d4:	3638ef1b 	.word	0x3638ef1b
 80128d8:	b9500d01 	.word	0xb9500d01
 80128dc:	3c088889 	.word	0x3c088889
 80128e0:	be2aaaab 	.word	0xbe2aaaab
 80128e4:	3e2aaaab 	.word	0x3e2aaaab

080128e8 <__ieee754_fmodf>:
 80128e8:	b570      	push	{r4, r5, r6, lr}
 80128ea:	ee10 6a90 	vmov	r6, s1
 80128ee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80128f2:	1e5a      	subs	r2, r3, #1
 80128f4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80128f8:	d206      	bcs.n	8012908 <__ieee754_fmodf+0x20>
 80128fa:	ee10 4a10 	vmov	r4, s0
 80128fe:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8012902:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8012906:	d304      	bcc.n	8012912 <__ieee754_fmodf+0x2a>
 8012908:	ee60 0a20 	vmul.f32	s1, s0, s1
 801290c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8012910:	bd70      	pop	{r4, r5, r6, pc}
 8012912:	4299      	cmp	r1, r3
 8012914:	dbfc      	blt.n	8012910 <__ieee754_fmodf+0x28>
 8012916:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 801291a:	d105      	bne.n	8012928 <__ieee754_fmodf+0x40>
 801291c:	4b32      	ldr	r3, [pc, #200]	@ (80129e8 <__ieee754_fmodf+0x100>)
 801291e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8012922:	ed93 0a00 	vldr	s0, [r3]
 8012926:	e7f3      	b.n	8012910 <__ieee754_fmodf+0x28>
 8012928:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801292c:	d146      	bne.n	80129bc <__ieee754_fmodf+0xd4>
 801292e:	020a      	lsls	r2, r1, #8
 8012930:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8012934:	2a00      	cmp	r2, #0
 8012936:	dc3e      	bgt.n	80129b6 <__ieee754_fmodf+0xce>
 8012938:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801293c:	bf01      	itttt	eq
 801293e:	021a      	lsleq	r2, r3, #8
 8012940:	fab2 f282 	clzeq	r2, r2
 8012944:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8012948:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 801294c:	bf16      	itet	ne
 801294e:	15da      	asrne	r2, r3, #23
 8012950:	3282      	addeq	r2, #130	@ 0x82
 8012952:	3a7f      	subne	r2, #127	@ 0x7f
 8012954:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8012958:	bfbb      	ittet	lt
 801295a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801295e:	1a24      	sublt	r4, r4, r0
 8012960:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8012964:	40a1      	lsllt	r1, r4
 8012966:	bfa8      	it	ge
 8012968:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801296c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8012970:	bfb5      	itete	lt
 8012972:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8012976:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801297a:	1aa4      	sublt	r4, r4, r2
 801297c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8012980:	bfb8      	it	lt
 8012982:	fa03 f404 	lsllt.w	r4, r3, r4
 8012986:	1a80      	subs	r0, r0, r2
 8012988:	1b0b      	subs	r3, r1, r4
 801298a:	b9d0      	cbnz	r0, 80129c2 <__ieee754_fmodf+0xda>
 801298c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8012990:	bf28      	it	cs
 8012992:	460b      	movcs	r3, r1
 8012994:	2b00      	cmp	r3, #0
 8012996:	d0c1      	beq.n	801291c <__ieee754_fmodf+0x34>
 8012998:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801299c:	db19      	blt.n	80129d2 <__ieee754_fmodf+0xea>
 801299e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80129a2:	db19      	blt.n	80129d8 <__ieee754_fmodf+0xf0>
 80129a4:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80129a8:	327f      	adds	r2, #127	@ 0x7f
 80129aa:	432b      	orrs	r3, r5
 80129ac:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80129b0:	ee00 3a10 	vmov	s0, r3
 80129b4:	e7ac      	b.n	8012910 <__ieee754_fmodf+0x28>
 80129b6:	3801      	subs	r0, #1
 80129b8:	0052      	lsls	r2, r2, #1
 80129ba:	e7bb      	b.n	8012934 <__ieee754_fmodf+0x4c>
 80129bc:	15c8      	asrs	r0, r1, #23
 80129be:	387f      	subs	r0, #127	@ 0x7f
 80129c0:	e7ba      	b.n	8012938 <__ieee754_fmodf+0x50>
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	da02      	bge.n	80129cc <__ieee754_fmodf+0xe4>
 80129c6:	0049      	lsls	r1, r1, #1
 80129c8:	3801      	subs	r0, #1
 80129ca:	e7dd      	b.n	8012988 <__ieee754_fmodf+0xa0>
 80129cc:	d0a6      	beq.n	801291c <__ieee754_fmodf+0x34>
 80129ce:	0059      	lsls	r1, r3, #1
 80129d0:	e7fa      	b.n	80129c8 <__ieee754_fmodf+0xe0>
 80129d2:	005b      	lsls	r3, r3, #1
 80129d4:	3a01      	subs	r2, #1
 80129d6:	e7df      	b.n	8012998 <__ieee754_fmodf+0xb0>
 80129d8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80129dc:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80129e0:	3282      	adds	r2, #130	@ 0x82
 80129e2:	4113      	asrs	r3, r2
 80129e4:	432b      	orrs	r3, r5
 80129e6:	e7e3      	b.n	80129b0 <__ieee754_fmodf+0xc8>
 80129e8:	08013d60 	.word	0x08013d60

080129ec <__ieee754_rem_pio2f>:
 80129ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129ee:	ee10 6a10 	vmov	r6, s0
 80129f2:	4b88      	ldr	r3, [pc, #544]	@ (8012c14 <__ieee754_rem_pio2f+0x228>)
 80129f4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80129f8:	429d      	cmp	r5, r3
 80129fa:	b087      	sub	sp, #28
 80129fc:	4604      	mov	r4, r0
 80129fe:	d805      	bhi.n	8012a0c <__ieee754_rem_pio2f+0x20>
 8012a00:	2300      	movs	r3, #0
 8012a02:	ed80 0a00 	vstr	s0, [r0]
 8012a06:	6043      	str	r3, [r0, #4]
 8012a08:	2000      	movs	r0, #0
 8012a0a:	e022      	b.n	8012a52 <__ieee754_rem_pio2f+0x66>
 8012a0c:	4b82      	ldr	r3, [pc, #520]	@ (8012c18 <__ieee754_rem_pio2f+0x22c>)
 8012a0e:	429d      	cmp	r5, r3
 8012a10:	d83a      	bhi.n	8012a88 <__ieee754_rem_pio2f+0x9c>
 8012a12:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012a16:	2e00      	cmp	r6, #0
 8012a18:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8012c1c <__ieee754_rem_pio2f+0x230>
 8012a1c:	4a80      	ldr	r2, [pc, #512]	@ (8012c20 <__ieee754_rem_pio2f+0x234>)
 8012a1e:	f023 030f 	bic.w	r3, r3, #15
 8012a22:	dd18      	ble.n	8012a56 <__ieee754_rem_pio2f+0x6a>
 8012a24:	4293      	cmp	r3, r2
 8012a26:	ee70 7a47 	vsub.f32	s15, s0, s14
 8012a2a:	bf09      	itett	eq
 8012a2c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8012c24 <__ieee754_rem_pio2f+0x238>
 8012a30:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8012c28 <__ieee754_rem_pio2f+0x23c>
 8012a34:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8012c2c <__ieee754_rem_pio2f+0x240>
 8012a38:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8012a3c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8012a40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a44:	ed80 7a00 	vstr	s14, [r0]
 8012a48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8012a4c:	edc0 7a01 	vstr	s15, [r0, #4]
 8012a50:	2001      	movs	r0, #1
 8012a52:	b007      	add	sp, #28
 8012a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a56:	4293      	cmp	r3, r2
 8012a58:	ee70 7a07 	vadd.f32	s15, s0, s14
 8012a5c:	bf09      	itett	eq
 8012a5e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8012c24 <__ieee754_rem_pio2f+0x238>
 8012a62:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8012c28 <__ieee754_rem_pio2f+0x23c>
 8012a66:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8012c2c <__ieee754_rem_pio2f+0x240>
 8012a6a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8012a6e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8012a72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012a76:	ed80 7a00 	vstr	s14, [r0]
 8012a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a7e:	edc0 7a01 	vstr	s15, [r0, #4]
 8012a82:	f04f 30ff 	mov.w	r0, #4294967295
 8012a86:	e7e4      	b.n	8012a52 <__ieee754_rem_pio2f+0x66>
 8012a88:	4b69      	ldr	r3, [pc, #420]	@ (8012c30 <__ieee754_rem_pio2f+0x244>)
 8012a8a:	429d      	cmp	r5, r3
 8012a8c:	d873      	bhi.n	8012b76 <__ieee754_rem_pio2f+0x18a>
 8012a8e:	f000 f8dd 	bl	8012c4c <fabsf>
 8012a92:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8012c34 <__ieee754_rem_pio2f+0x248>
 8012a96:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8012a9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8012a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8012aa6:	ee17 0a90 	vmov	r0, s15
 8012aaa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012c1c <__ieee754_rem_pio2f+0x230>
 8012aae:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012ab2:	281f      	cmp	r0, #31
 8012ab4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8012c28 <__ieee754_rem_pio2f+0x23c>
 8012ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012abc:	eeb1 6a47 	vneg.f32	s12, s14
 8012ac0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8012ac4:	ee16 1a90 	vmov	r1, s13
 8012ac8:	dc09      	bgt.n	8012ade <__ieee754_rem_pio2f+0xf2>
 8012aca:	4a5b      	ldr	r2, [pc, #364]	@ (8012c38 <__ieee754_rem_pio2f+0x24c>)
 8012acc:	1e47      	subs	r7, r0, #1
 8012ace:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8012ad2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8012ad6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8012ada:	4293      	cmp	r3, r2
 8012adc:	d107      	bne.n	8012aee <__ieee754_rem_pio2f+0x102>
 8012ade:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8012ae2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8012ae6:	2a08      	cmp	r2, #8
 8012ae8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8012aec:	dc14      	bgt.n	8012b18 <__ieee754_rem_pio2f+0x12c>
 8012aee:	6021      	str	r1, [r4, #0]
 8012af0:	ed94 7a00 	vldr	s14, [r4]
 8012af4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8012af8:	2e00      	cmp	r6, #0
 8012afa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8012afe:	ed84 0a01 	vstr	s0, [r4, #4]
 8012b02:	daa6      	bge.n	8012a52 <__ieee754_rem_pio2f+0x66>
 8012b04:	eeb1 7a47 	vneg.f32	s14, s14
 8012b08:	eeb1 0a40 	vneg.f32	s0, s0
 8012b0c:	ed84 7a00 	vstr	s14, [r4]
 8012b10:	ed84 0a01 	vstr	s0, [r4, #4]
 8012b14:	4240      	negs	r0, r0
 8012b16:	e79c      	b.n	8012a52 <__ieee754_rem_pio2f+0x66>
 8012b18:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8012c24 <__ieee754_rem_pio2f+0x238>
 8012b1c:	eef0 6a40 	vmov.f32	s13, s0
 8012b20:	eee6 6a25 	vfma.f32	s13, s12, s11
 8012b24:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012b28:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012b2c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8012c2c <__ieee754_rem_pio2f+0x240>
 8012b30:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8012b34:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8012b38:	ee15 2a90 	vmov	r2, s11
 8012b3c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8012b40:	1a5b      	subs	r3, r3, r1
 8012b42:	2b19      	cmp	r3, #25
 8012b44:	dc04      	bgt.n	8012b50 <__ieee754_rem_pio2f+0x164>
 8012b46:	edc4 5a00 	vstr	s11, [r4]
 8012b4a:	eeb0 0a66 	vmov.f32	s0, s13
 8012b4e:	e7cf      	b.n	8012af0 <__ieee754_rem_pio2f+0x104>
 8012b50:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8012c3c <__ieee754_rem_pio2f+0x250>
 8012b54:	eeb0 0a66 	vmov.f32	s0, s13
 8012b58:	eea6 0a25 	vfma.f32	s0, s12, s11
 8012b5c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8012b60:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8012c40 <__ieee754_rem_pio2f+0x254>
 8012b64:	eee6 7a25 	vfma.f32	s15, s12, s11
 8012b68:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8012b6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8012b70:	ed84 7a00 	vstr	s14, [r4]
 8012b74:	e7bc      	b.n	8012af0 <__ieee754_rem_pio2f+0x104>
 8012b76:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8012b7a:	d306      	bcc.n	8012b8a <__ieee754_rem_pio2f+0x19e>
 8012b7c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8012b80:	edc0 7a01 	vstr	s15, [r0, #4]
 8012b84:	edc0 7a00 	vstr	s15, [r0]
 8012b88:	e73e      	b.n	8012a08 <__ieee754_rem_pio2f+0x1c>
 8012b8a:	15ea      	asrs	r2, r5, #23
 8012b8c:	3a86      	subs	r2, #134	@ 0x86
 8012b8e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8012b92:	ee07 3a90 	vmov	s15, r3
 8012b96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012b9a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8012c44 <__ieee754_rem_pio2f+0x258>
 8012b9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012ba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012ba6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8012baa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012bae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012bb2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012bb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012bba:	ed8d 7a04 	vstr	s14, [sp, #16]
 8012bbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012bc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bca:	edcd 7a05 	vstr	s15, [sp, #20]
 8012bce:	d11e      	bne.n	8012c0e <__ieee754_rem_pio2f+0x222>
 8012bd0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8012bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bd8:	bf0c      	ite	eq
 8012bda:	2301      	moveq	r3, #1
 8012bdc:	2302      	movne	r3, #2
 8012bde:	491a      	ldr	r1, [pc, #104]	@ (8012c48 <__ieee754_rem_pio2f+0x25c>)
 8012be0:	9101      	str	r1, [sp, #4]
 8012be2:	2102      	movs	r1, #2
 8012be4:	9100      	str	r1, [sp, #0]
 8012be6:	a803      	add	r0, sp, #12
 8012be8:	4621      	mov	r1, r4
 8012bea:	f000 fc69 	bl	80134c0 <__kernel_rem_pio2f>
 8012bee:	2e00      	cmp	r6, #0
 8012bf0:	f6bf af2f 	bge.w	8012a52 <__ieee754_rem_pio2f+0x66>
 8012bf4:	edd4 7a00 	vldr	s15, [r4]
 8012bf8:	eef1 7a67 	vneg.f32	s15, s15
 8012bfc:	edc4 7a00 	vstr	s15, [r4]
 8012c00:	edd4 7a01 	vldr	s15, [r4, #4]
 8012c04:	eef1 7a67 	vneg.f32	s15, s15
 8012c08:	edc4 7a01 	vstr	s15, [r4, #4]
 8012c0c:	e782      	b.n	8012b14 <__ieee754_rem_pio2f+0x128>
 8012c0e:	2303      	movs	r3, #3
 8012c10:	e7e5      	b.n	8012bde <__ieee754_rem_pio2f+0x1f2>
 8012c12:	bf00      	nop
 8012c14:	3f490fd8 	.word	0x3f490fd8
 8012c18:	4016cbe3 	.word	0x4016cbe3
 8012c1c:	3fc90f80 	.word	0x3fc90f80
 8012c20:	3fc90fd0 	.word	0x3fc90fd0
 8012c24:	37354400 	.word	0x37354400
 8012c28:	37354443 	.word	0x37354443
 8012c2c:	2e85a308 	.word	0x2e85a308
 8012c30:	43490f80 	.word	0x43490f80
 8012c34:	3f22f984 	.word	0x3f22f984
 8012c38:	08013d68 	.word	0x08013d68
 8012c3c:	2e85a300 	.word	0x2e85a300
 8012c40:	248d3132 	.word	0x248d3132
 8012c44:	43800000 	.word	0x43800000
 8012c48:	08013de8 	.word	0x08013de8

08012c4c <fabsf>:
 8012c4c:	ee10 3a10 	vmov	r3, s0
 8012c50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012c54:	ee00 3a10 	vmov	s0, r3
 8012c58:	4770      	bx	lr
 8012c5a:	0000      	movs	r0, r0
 8012c5c:	0000      	movs	r0, r0
	...

08012c60 <scalbn>:
 8012c60:	b570      	push	{r4, r5, r6, lr}
 8012c62:	ec55 4b10 	vmov	r4, r5, d0
 8012c66:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012c6a:	4606      	mov	r6, r0
 8012c6c:	462b      	mov	r3, r5
 8012c6e:	b991      	cbnz	r1, 8012c96 <scalbn+0x36>
 8012c70:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8012c74:	4323      	orrs	r3, r4
 8012c76:	d03b      	beq.n	8012cf0 <scalbn+0x90>
 8012c78:	4b33      	ldr	r3, [pc, #204]	@ (8012d48 <scalbn+0xe8>)
 8012c7a:	4620      	mov	r0, r4
 8012c7c:	4629      	mov	r1, r5
 8012c7e:	2200      	movs	r2, #0
 8012c80:	f7ed fc86 	bl	8000590 <__aeabi_dmul>
 8012c84:	4b31      	ldr	r3, [pc, #196]	@ (8012d4c <scalbn+0xec>)
 8012c86:	429e      	cmp	r6, r3
 8012c88:	4604      	mov	r4, r0
 8012c8a:	460d      	mov	r5, r1
 8012c8c:	da0f      	bge.n	8012cae <scalbn+0x4e>
 8012c8e:	a326      	add	r3, pc, #152	@ (adr r3, 8012d28 <scalbn+0xc8>)
 8012c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c94:	e01e      	b.n	8012cd4 <scalbn+0x74>
 8012c96:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8012c9a:	4291      	cmp	r1, r2
 8012c9c:	d10b      	bne.n	8012cb6 <scalbn+0x56>
 8012c9e:	4622      	mov	r2, r4
 8012ca0:	4620      	mov	r0, r4
 8012ca2:	4629      	mov	r1, r5
 8012ca4:	f7ed fabe 	bl	8000224 <__adddf3>
 8012ca8:	4604      	mov	r4, r0
 8012caa:	460d      	mov	r5, r1
 8012cac:	e020      	b.n	8012cf0 <scalbn+0x90>
 8012cae:	460b      	mov	r3, r1
 8012cb0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012cb4:	3936      	subs	r1, #54	@ 0x36
 8012cb6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8012cba:	4296      	cmp	r6, r2
 8012cbc:	dd0d      	ble.n	8012cda <scalbn+0x7a>
 8012cbe:	2d00      	cmp	r5, #0
 8012cc0:	a11b      	add	r1, pc, #108	@ (adr r1, 8012d30 <scalbn+0xd0>)
 8012cc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cc6:	da02      	bge.n	8012cce <scalbn+0x6e>
 8012cc8:	a11b      	add	r1, pc, #108	@ (adr r1, 8012d38 <scalbn+0xd8>)
 8012cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012cce:	a318      	add	r3, pc, #96	@ (adr r3, 8012d30 <scalbn+0xd0>)
 8012cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd4:	f7ed fc5c 	bl	8000590 <__aeabi_dmul>
 8012cd8:	e7e6      	b.n	8012ca8 <scalbn+0x48>
 8012cda:	1872      	adds	r2, r6, r1
 8012cdc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8012ce0:	428a      	cmp	r2, r1
 8012ce2:	dcec      	bgt.n	8012cbe <scalbn+0x5e>
 8012ce4:	2a00      	cmp	r2, #0
 8012ce6:	dd06      	ble.n	8012cf6 <scalbn+0x96>
 8012ce8:	f36f 531e 	bfc	r3, #20, #11
 8012cec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012cf0:	ec45 4b10 	vmov	d0, r4, r5
 8012cf4:	bd70      	pop	{r4, r5, r6, pc}
 8012cf6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8012cfa:	da08      	bge.n	8012d0e <scalbn+0xae>
 8012cfc:	2d00      	cmp	r5, #0
 8012cfe:	a10a      	add	r1, pc, #40	@ (adr r1, 8012d28 <scalbn+0xc8>)
 8012d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d04:	dac3      	bge.n	8012c8e <scalbn+0x2e>
 8012d06:	a10e      	add	r1, pc, #56	@ (adr r1, 8012d40 <scalbn+0xe0>)
 8012d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012d0c:	e7bf      	b.n	8012c8e <scalbn+0x2e>
 8012d0e:	3236      	adds	r2, #54	@ 0x36
 8012d10:	f36f 531e 	bfc	r3, #20, #11
 8012d14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012d18:	4620      	mov	r0, r4
 8012d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8012d50 <scalbn+0xf0>)
 8012d1c:	4629      	mov	r1, r5
 8012d1e:	2200      	movs	r2, #0
 8012d20:	e7d8      	b.n	8012cd4 <scalbn+0x74>
 8012d22:	bf00      	nop
 8012d24:	f3af 8000 	nop.w
 8012d28:	c2f8f359 	.word	0xc2f8f359
 8012d2c:	01a56e1f 	.word	0x01a56e1f
 8012d30:	8800759c 	.word	0x8800759c
 8012d34:	7e37e43c 	.word	0x7e37e43c
 8012d38:	8800759c 	.word	0x8800759c
 8012d3c:	fe37e43c 	.word	0xfe37e43c
 8012d40:	c2f8f359 	.word	0xc2f8f359
 8012d44:	81a56e1f 	.word	0x81a56e1f
 8012d48:	43500000 	.word	0x43500000
 8012d4c:	ffff3cb0 	.word	0xffff3cb0
 8012d50:	3c900000 	.word	0x3c900000

08012d54 <scalbnf>:
 8012d54:	ee10 3a10 	vmov	r3, s0
 8012d58:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012d5c:	d02b      	beq.n	8012db6 <scalbnf+0x62>
 8012d5e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8012d62:	d302      	bcc.n	8012d6a <scalbnf+0x16>
 8012d64:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012d68:	4770      	bx	lr
 8012d6a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8012d6e:	d123      	bne.n	8012db8 <scalbnf+0x64>
 8012d70:	4b24      	ldr	r3, [pc, #144]	@ (8012e04 <scalbnf+0xb0>)
 8012d72:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8012e08 <scalbnf+0xb4>
 8012d76:	4298      	cmp	r0, r3
 8012d78:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012d7c:	db17      	blt.n	8012dae <scalbnf+0x5a>
 8012d7e:	ee10 3a10 	vmov	r3, s0
 8012d82:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012d86:	3a19      	subs	r2, #25
 8012d88:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8012d8c:	4288      	cmp	r0, r1
 8012d8e:	dd15      	ble.n	8012dbc <scalbnf+0x68>
 8012d90:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8012e0c <scalbnf+0xb8>
 8012d94:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8012e10 <scalbnf+0xbc>
 8012d98:	ee10 3a10 	vmov	r3, s0
 8012d9c:	eeb0 7a67 	vmov.f32	s14, s15
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	bfb8      	it	lt
 8012da4:	eef0 7a66 	vmovlt.f32	s15, s13
 8012da8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8012dac:	4770      	bx	lr
 8012dae:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8012e14 <scalbnf+0xc0>
 8012db2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012db6:	4770      	bx	lr
 8012db8:	0dd2      	lsrs	r2, r2, #23
 8012dba:	e7e5      	b.n	8012d88 <scalbnf+0x34>
 8012dbc:	4410      	add	r0, r2
 8012dbe:	28fe      	cmp	r0, #254	@ 0xfe
 8012dc0:	dce6      	bgt.n	8012d90 <scalbnf+0x3c>
 8012dc2:	2800      	cmp	r0, #0
 8012dc4:	dd06      	ble.n	8012dd4 <scalbnf+0x80>
 8012dc6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012dca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012dce:	ee00 3a10 	vmov	s0, r3
 8012dd2:	4770      	bx	lr
 8012dd4:	f110 0f16 	cmn.w	r0, #22
 8012dd8:	da09      	bge.n	8012dee <scalbnf+0x9a>
 8012dda:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8012e14 <scalbnf+0xc0>
 8012dde:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8012e18 <scalbnf+0xc4>
 8012de2:	ee10 3a10 	vmov	r3, s0
 8012de6:	eeb0 7a67 	vmov.f32	s14, s15
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	e7d9      	b.n	8012da2 <scalbnf+0x4e>
 8012dee:	3019      	adds	r0, #25
 8012df0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8012df4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8012df8:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8012e1c <scalbnf+0xc8>
 8012dfc:	ee07 3a90 	vmov	s15, r3
 8012e00:	e7d7      	b.n	8012db2 <scalbnf+0x5e>
 8012e02:	bf00      	nop
 8012e04:	ffff3cb0 	.word	0xffff3cb0
 8012e08:	4c000000 	.word	0x4c000000
 8012e0c:	7149f2ca 	.word	0x7149f2ca
 8012e10:	f149f2ca 	.word	0xf149f2ca
 8012e14:	0da24260 	.word	0x0da24260
 8012e18:	8da24260 	.word	0x8da24260
 8012e1c:	33000000 	.word	0x33000000

08012e20 <__kernel_rem_pio2>:
 8012e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e24:	ed2d 8b02 	vpush	{d8}
 8012e28:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8012e2c:	f112 0f14 	cmn.w	r2, #20
 8012e30:	9306      	str	r3, [sp, #24]
 8012e32:	9104      	str	r1, [sp, #16]
 8012e34:	4bc2      	ldr	r3, [pc, #776]	@ (8013140 <__kernel_rem_pio2+0x320>)
 8012e36:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8012e38:	9008      	str	r0, [sp, #32]
 8012e3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012e3e:	9300      	str	r3, [sp, #0]
 8012e40:	9b06      	ldr	r3, [sp, #24]
 8012e42:	f103 33ff 	add.w	r3, r3, #4294967295
 8012e46:	bfa8      	it	ge
 8012e48:	1ed4      	subge	r4, r2, #3
 8012e4a:	9305      	str	r3, [sp, #20]
 8012e4c:	bfb2      	itee	lt
 8012e4e:	2400      	movlt	r4, #0
 8012e50:	2318      	movge	r3, #24
 8012e52:	fb94 f4f3 	sdivge	r4, r4, r3
 8012e56:	f06f 0317 	mvn.w	r3, #23
 8012e5a:	fb04 3303 	mla	r3, r4, r3, r3
 8012e5e:	eb03 0b02 	add.w	fp, r3, r2
 8012e62:	9b00      	ldr	r3, [sp, #0]
 8012e64:	9a05      	ldr	r2, [sp, #20]
 8012e66:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8013130 <__kernel_rem_pio2+0x310>
 8012e6a:	eb03 0802 	add.w	r8, r3, r2
 8012e6e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012e70:	1aa7      	subs	r7, r4, r2
 8012e72:	ae20      	add	r6, sp, #128	@ 0x80
 8012e74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012e78:	2500      	movs	r5, #0
 8012e7a:	4545      	cmp	r5, r8
 8012e7c:	dd12      	ble.n	8012ea4 <__kernel_rem_pio2+0x84>
 8012e7e:	9b06      	ldr	r3, [sp, #24]
 8012e80:	aa20      	add	r2, sp, #128	@ 0x80
 8012e82:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8012e86:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8012e8a:	2700      	movs	r7, #0
 8012e8c:	9b00      	ldr	r3, [sp, #0]
 8012e8e:	429f      	cmp	r7, r3
 8012e90:	dc2e      	bgt.n	8012ef0 <__kernel_rem_pio2+0xd0>
 8012e92:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8013130 <__kernel_rem_pio2+0x310>
 8012e96:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012e9a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e9e:	46a8      	mov	r8, r5
 8012ea0:	2600      	movs	r6, #0
 8012ea2:	e01b      	b.n	8012edc <__kernel_rem_pio2+0xbc>
 8012ea4:	42ef      	cmn	r7, r5
 8012ea6:	d407      	bmi.n	8012eb8 <__kernel_rem_pio2+0x98>
 8012ea8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8012eac:	f7ed fb06 	bl	80004bc <__aeabi_i2d>
 8012eb0:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012eb4:	3501      	adds	r5, #1
 8012eb6:	e7e0      	b.n	8012e7a <__kernel_rem_pio2+0x5a>
 8012eb8:	ec51 0b18 	vmov	r0, r1, d8
 8012ebc:	e7f8      	b.n	8012eb0 <__kernel_rem_pio2+0x90>
 8012ebe:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8012ec2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8012ec6:	f7ed fb63 	bl	8000590 <__aeabi_dmul>
 8012eca:	4602      	mov	r2, r0
 8012ecc:	460b      	mov	r3, r1
 8012ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012ed2:	f7ed f9a7 	bl	8000224 <__adddf3>
 8012ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012eda:	3601      	adds	r6, #1
 8012edc:	9b05      	ldr	r3, [sp, #20]
 8012ede:	429e      	cmp	r6, r3
 8012ee0:	dded      	ble.n	8012ebe <__kernel_rem_pio2+0x9e>
 8012ee2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012ee6:	3701      	adds	r7, #1
 8012ee8:	ecaa 7b02 	vstmia	sl!, {d7}
 8012eec:	3508      	adds	r5, #8
 8012eee:	e7cd      	b.n	8012e8c <__kernel_rem_pio2+0x6c>
 8012ef0:	9b00      	ldr	r3, [sp, #0]
 8012ef2:	f8dd 8000 	ldr.w	r8, [sp]
 8012ef6:	aa0c      	add	r2, sp, #48	@ 0x30
 8012ef8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012efc:	930a      	str	r3, [sp, #40]	@ 0x28
 8012efe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8012f00:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012f04:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f06:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8012f0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f0c:	ab98      	add	r3, sp, #608	@ 0x260
 8012f0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012f12:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8012f16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f1a:	ac0c      	add	r4, sp, #48	@ 0x30
 8012f1c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8012f1e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8012f22:	46a1      	mov	r9, r4
 8012f24:	46c2      	mov	sl, r8
 8012f26:	f1ba 0f00 	cmp.w	sl, #0
 8012f2a:	dc77      	bgt.n	801301c <__kernel_rem_pio2+0x1fc>
 8012f2c:	4658      	mov	r0, fp
 8012f2e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8012f32:	f7ff fe95 	bl	8012c60 <scalbn>
 8012f36:	ec57 6b10 	vmov	r6, r7, d0
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8012f40:	4630      	mov	r0, r6
 8012f42:	4639      	mov	r1, r7
 8012f44:	f7ed fb24 	bl	8000590 <__aeabi_dmul>
 8012f48:	ec41 0b10 	vmov	d0, r0, r1
 8012f4c:	f000 fd20 	bl	8013990 <floor>
 8012f50:	4b7c      	ldr	r3, [pc, #496]	@ (8013144 <__kernel_rem_pio2+0x324>)
 8012f52:	ec51 0b10 	vmov	r0, r1, d0
 8012f56:	2200      	movs	r2, #0
 8012f58:	f7ed fb1a 	bl	8000590 <__aeabi_dmul>
 8012f5c:	4602      	mov	r2, r0
 8012f5e:	460b      	mov	r3, r1
 8012f60:	4630      	mov	r0, r6
 8012f62:	4639      	mov	r1, r7
 8012f64:	f7ed f95c 	bl	8000220 <__aeabi_dsub>
 8012f68:	460f      	mov	r7, r1
 8012f6a:	4606      	mov	r6, r0
 8012f6c:	f7ed fdaa 	bl	8000ac4 <__aeabi_d2iz>
 8012f70:	9002      	str	r0, [sp, #8]
 8012f72:	f7ed faa3 	bl	80004bc <__aeabi_i2d>
 8012f76:	4602      	mov	r2, r0
 8012f78:	460b      	mov	r3, r1
 8012f7a:	4630      	mov	r0, r6
 8012f7c:	4639      	mov	r1, r7
 8012f7e:	f7ed f94f 	bl	8000220 <__aeabi_dsub>
 8012f82:	f1bb 0f00 	cmp.w	fp, #0
 8012f86:	4606      	mov	r6, r0
 8012f88:	460f      	mov	r7, r1
 8012f8a:	dd6c      	ble.n	8013066 <__kernel_rem_pio2+0x246>
 8012f8c:	f108 31ff 	add.w	r1, r8, #4294967295
 8012f90:	ab0c      	add	r3, sp, #48	@ 0x30
 8012f92:	9d02      	ldr	r5, [sp, #8]
 8012f94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012f98:	f1cb 0018 	rsb	r0, fp, #24
 8012f9c:	fa43 f200 	asr.w	r2, r3, r0
 8012fa0:	4415      	add	r5, r2
 8012fa2:	4082      	lsls	r2, r0
 8012fa4:	1a9b      	subs	r3, r3, r2
 8012fa6:	aa0c      	add	r2, sp, #48	@ 0x30
 8012fa8:	9502      	str	r5, [sp, #8]
 8012faa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012fae:	f1cb 0217 	rsb	r2, fp, #23
 8012fb2:	fa43 f902 	asr.w	r9, r3, r2
 8012fb6:	f1b9 0f00 	cmp.w	r9, #0
 8012fba:	dd64      	ble.n	8013086 <__kernel_rem_pio2+0x266>
 8012fbc:	9b02      	ldr	r3, [sp, #8]
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	9302      	str	r3, [sp, #8]
 8012fc4:	4615      	mov	r5, r2
 8012fc6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8012fca:	4590      	cmp	r8, r2
 8012fcc:	f300 80a1 	bgt.w	8013112 <__kernel_rem_pio2+0x2f2>
 8012fd0:	f1bb 0f00 	cmp.w	fp, #0
 8012fd4:	dd07      	ble.n	8012fe6 <__kernel_rem_pio2+0x1c6>
 8012fd6:	f1bb 0f01 	cmp.w	fp, #1
 8012fda:	f000 80c1 	beq.w	8013160 <__kernel_rem_pio2+0x340>
 8012fde:	f1bb 0f02 	cmp.w	fp, #2
 8012fe2:	f000 80c8 	beq.w	8013176 <__kernel_rem_pio2+0x356>
 8012fe6:	f1b9 0f02 	cmp.w	r9, #2
 8012fea:	d14c      	bne.n	8013086 <__kernel_rem_pio2+0x266>
 8012fec:	4632      	mov	r2, r6
 8012fee:	463b      	mov	r3, r7
 8012ff0:	4955      	ldr	r1, [pc, #340]	@ (8013148 <__kernel_rem_pio2+0x328>)
 8012ff2:	2000      	movs	r0, #0
 8012ff4:	f7ed f914 	bl	8000220 <__aeabi_dsub>
 8012ff8:	4606      	mov	r6, r0
 8012ffa:	460f      	mov	r7, r1
 8012ffc:	2d00      	cmp	r5, #0
 8012ffe:	d042      	beq.n	8013086 <__kernel_rem_pio2+0x266>
 8013000:	4658      	mov	r0, fp
 8013002:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8013138 <__kernel_rem_pio2+0x318>
 8013006:	f7ff fe2b 	bl	8012c60 <scalbn>
 801300a:	4630      	mov	r0, r6
 801300c:	4639      	mov	r1, r7
 801300e:	ec53 2b10 	vmov	r2, r3, d0
 8013012:	f7ed f905 	bl	8000220 <__aeabi_dsub>
 8013016:	4606      	mov	r6, r0
 8013018:	460f      	mov	r7, r1
 801301a:	e034      	b.n	8013086 <__kernel_rem_pio2+0x266>
 801301c:	4b4b      	ldr	r3, [pc, #300]	@ (801314c <__kernel_rem_pio2+0x32c>)
 801301e:	2200      	movs	r2, #0
 8013020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013024:	f7ed fab4 	bl	8000590 <__aeabi_dmul>
 8013028:	f7ed fd4c 	bl	8000ac4 <__aeabi_d2iz>
 801302c:	f7ed fa46 	bl	80004bc <__aeabi_i2d>
 8013030:	4b47      	ldr	r3, [pc, #284]	@ (8013150 <__kernel_rem_pio2+0x330>)
 8013032:	2200      	movs	r2, #0
 8013034:	4606      	mov	r6, r0
 8013036:	460f      	mov	r7, r1
 8013038:	f7ed faaa 	bl	8000590 <__aeabi_dmul>
 801303c:	4602      	mov	r2, r0
 801303e:	460b      	mov	r3, r1
 8013040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013044:	f7ed f8ec 	bl	8000220 <__aeabi_dsub>
 8013048:	f7ed fd3c 	bl	8000ac4 <__aeabi_d2iz>
 801304c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8013050:	f849 0b04 	str.w	r0, [r9], #4
 8013054:	4639      	mov	r1, r7
 8013056:	4630      	mov	r0, r6
 8013058:	f7ed f8e4 	bl	8000224 <__adddf3>
 801305c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013064:	e75f      	b.n	8012f26 <__kernel_rem_pio2+0x106>
 8013066:	d107      	bne.n	8013078 <__kernel_rem_pio2+0x258>
 8013068:	f108 33ff 	add.w	r3, r8, #4294967295
 801306c:	aa0c      	add	r2, sp, #48	@ 0x30
 801306e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013072:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8013076:	e79e      	b.n	8012fb6 <__kernel_rem_pio2+0x196>
 8013078:	4b36      	ldr	r3, [pc, #216]	@ (8013154 <__kernel_rem_pio2+0x334>)
 801307a:	2200      	movs	r2, #0
 801307c:	f7ed fd0e 	bl	8000a9c <__aeabi_dcmpge>
 8013080:	2800      	cmp	r0, #0
 8013082:	d143      	bne.n	801310c <__kernel_rem_pio2+0x2ec>
 8013084:	4681      	mov	r9, r0
 8013086:	2200      	movs	r2, #0
 8013088:	2300      	movs	r3, #0
 801308a:	4630      	mov	r0, r6
 801308c:	4639      	mov	r1, r7
 801308e:	f7ed fce7 	bl	8000a60 <__aeabi_dcmpeq>
 8013092:	2800      	cmp	r0, #0
 8013094:	f000 80c1 	beq.w	801321a <__kernel_rem_pio2+0x3fa>
 8013098:	f108 33ff 	add.w	r3, r8, #4294967295
 801309c:	2200      	movs	r2, #0
 801309e:	9900      	ldr	r1, [sp, #0]
 80130a0:	428b      	cmp	r3, r1
 80130a2:	da70      	bge.n	8013186 <__kernel_rem_pio2+0x366>
 80130a4:	2a00      	cmp	r2, #0
 80130a6:	f000 808b 	beq.w	80131c0 <__kernel_rem_pio2+0x3a0>
 80130aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80130ae:	ab0c      	add	r3, sp, #48	@ 0x30
 80130b0:	f1ab 0b18 	sub.w	fp, fp, #24
 80130b4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d0f6      	beq.n	80130aa <__kernel_rem_pio2+0x28a>
 80130bc:	4658      	mov	r0, fp
 80130be:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8013138 <__kernel_rem_pio2+0x318>
 80130c2:	f7ff fdcd 	bl	8012c60 <scalbn>
 80130c6:	f108 0301 	add.w	r3, r8, #1
 80130ca:	00da      	lsls	r2, r3, #3
 80130cc:	9205      	str	r2, [sp, #20]
 80130ce:	ec55 4b10 	vmov	r4, r5, d0
 80130d2:	aa70      	add	r2, sp, #448	@ 0x1c0
 80130d4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 801314c <__kernel_rem_pio2+0x32c>
 80130d8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80130dc:	4646      	mov	r6, r8
 80130de:	f04f 0a00 	mov.w	sl, #0
 80130e2:	2e00      	cmp	r6, #0
 80130e4:	f280 80d1 	bge.w	801328a <__kernel_rem_pio2+0x46a>
 80130e8:	4644      	mov	r4, r8
 80130ea:	2c00      	cmp	r4, #0
 80130ec:	f2c0 80ff 	blt.w	80132ee <__kernel_rem_pio2+0x4ce>
 80130f0:	4b19      	ldr	r3, [pc, #100]	@ (8013158 <__kernel_rem_pio2+0x338>)
 80130f2:	461f      	mov	r7, r3
 80130f4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80130f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80130fa:	9306      	str	r3, [sp, #24]
 80130fc:	f04f 0a00 	mov.w	sl, #0
 8013100:	f04f 0b00 	mov.w	fp, #0
 8013104:	2600      	movs	r6, #0
 8013106:	eba8 0504 	sub.w	r5, r8, r4
 801310a:	e0e4      	b.n	80132d6 <__kernel_rem_pio2+0x4b6>
 801310c:	f04f 0902 	mov.w	r9, #2
 8013110:	e754      	b.n	8012fbc <__kernel_rem_pio2+0x19c>
 8013112:	f854 3b04 	ldr.w	r3, [r4], #4
 8013116:	bb0d      	cbnz	r5, 801315c <__kernel_rem_pio2+0x33c>
 8013118:	b123      	cbz	r3, 8013124 <__kernel_rem_pio2+0x304>
 801311a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801311e:	f844 3c04 	str.w	r3, [r4, #-4]
 8013122:	2301      	movs	r3, #1
 8013124:	3201      	adds	r2, #1
 8013126:	461d      	mov	r5, r3
 8013128:	e74f      	b.n	8012fca <__kernel_rem_pio2+0x1aa>
 801312a:	bf00      	nop
 801312c:	f3af 8000 	nop.w
	...
 801313c:	3ff00000 	.word	0x3ff00000
 8013140:	08014140 	.word	0x08014140
 8013144:	40200000 	.word	0x40200000
 8013148:	3ff00000 	.word	0x3ff00000
 801314c:	3e700000 	.word	0x3e700000
 8013150:	41700000 	.word	0x41700000
 8013154:	3fe00000 	.word	0x3fe00000
 8013158:	08014100 	.word	0x08014100
 801315c:	1acb      	subs	r3, r1, r3
 801315e:	e7de      	b.n	801311e <__kernel_rem_pio2+0x2fe>
 8013160:	f108 32ff 	add.w	r2, r8, #4294967295
 8013164:	ab0c      	add	r3, sp, #48	@ 0x30
 8013166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801316a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801316e:	a90c      	add	r1, sp, #48	@ 0x30
 8013170:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013174:	e737      	b.n	8012fe6 <__kernel_rem_pio2+0x1c6>
 8013176:	f108 32ff 	add.w	r2, r8, #4294967295
 801317a:	ab0c      	add	r3, sp, #48	@ 0x30
 801317c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013180:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013184:	e7f3      	b.n	801316e <__kernel_rem_pio2+0x34e>
 8013186:	a90c      	add	r1, sp, #48	@ 0x30
 8013188:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801318c:	3b01      	subs	r3, #1
 801318e:	430a      	orrs	r2, r1
 8013190:	e785      	b.n	801309e <__kernel_rem_pio2+0x27e>
 8013192:	3401      	adds	r4, #1
 8013194:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013198:	2a00      	cmp	r2, #0
 801319a:	d0fa      	beq.n	8013192 <__kernel_rem_pio2+0x372>
 801319c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801319e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80131a2:	eb0d 0503 	add.w	r5, sp, r3
 80131a6:	9b06      	ldr	r3, [sp, #24]
 80131a8:	aa20      	add	r2, sp, #128	@ 0x80
 80131aa:	4443      	add	r3, r8
 80131ac:	f108 0701 	add.w	r7, r8, #1
 80131b0:	3d98      	subs	r5, #152	@ 0x98
 80131b2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80131b6:	4444      	add	r4, r8
 80131b8:	42bc      	cmp	r4, r7
 80131ba:	da04      	bge.n	80131c6 <__kernel_rem_pio2+0x3a6>
 80131bc:	46a0      	mov	r8, r4
 80131be:	e6a2      	b.n	8012f06 <__kernel_rem_pio2+0xe6>
 80131c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131c2:	2401      	movs	r4, #1
 80131c4:	e7e6      	b.n	8013194 <__kernel_rem_pio2+0x374>
 80131c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131c8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80131cc:	f7ed f976 	bl	80004bc <__aeabi_i2d>
 80131d0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8013490 <__kernel_rem_pio2+0x670>
 80131d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80131d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80131dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80131e0:	46b2      	mov	sl, r6
 80131e2:	f04f 0800 	mov.w	r8, #0
 80131e6:	9b05      	ldr	r3, [sp, #20]
 80131e8:	4598      	cmp	r8, r3
 80131ea:	dd05      	ble.n	80131f8 <__kernel_rem_pio2+0x3d8>
 80131ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80131f0:	3701      	adds	r7, #1
 80131f2:	eca5 7b02 	vstmia	r5!, {d7}
 80131f6:	e7df      	b.n	80131b8 <__kernel_rem_pio2+0x398>
 80131f8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80131fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013200:	f7ed f9c6 	bl	8000590 <__aeabi_dmul>
 8013204:	4602      	mov	r2, r0
 8013206:	460b      	mov	r3, r1
 8013208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801320c:	f7ed f80a 	bl	8000224 <__adddf3>
 8013210:	f108 0801 	add.w	r8, r8, #1
 8013214:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013218:	e7e5      	b.n	80131e6 <__kernel_rem_pio2+0x3c6>
 801321a:	f1cb 0000 	rsb	r0, fp, #0
 801321e:	ec47 6b10 	vmov	d0, r6, r7
 8013222:	f7ff fd1d 	bl	8012c60 <scalbn>
 8013226:	ec55 4b10 	vmov	r4, r5, d0
 801322a:	4b9b      	ldr	r3, [pc, #620]	@ (8013498 <__kernel_rem_pio2+0x678>)
 801322c:	2200      	movs	r2, #0
 801322e:	4620      	mov	r0, r4
 8013230:	4629      	mov	r1, r5
 8013232:	f7ed fc33 	bl	8000a9c <__aeabi_dcmpge>
 8013236:	b300      	cbz	r0, 801327a <__kernel_rem_pio2+0x45a>
 8013238:	4b98      	ldr	r3, [pc, #608]	@ (801349c <__kernel_rem_pio2+0x67c>)
 801323a:	2200      	movs	r2, #0
 801323c:	4620      	mov	r0, r4
 801323e:	4629      	mov	r1, r5
 8013240:	f7ed f9a6 	bl	8000590 <__aeabi_dmul>
 8013244:	f7ed fc3e 	bl	8000ac4 <__aeabi_d2iz>
 8013248:	4606      	mov	r6, r0
 801324a:	f7ed f937 	bl	80004bc <__aeabi_i2d>
 801324e:	4b92      	ldr	r3, [pc, #584]	@ (8013498 <__kernel_rem_pio2+0x678>)
 8013250:	2200      	movs	r2, #0
 8013252:	f7ed f99d 	bl	8000590 <__aeabi_dmul>
 8013256:	460b      	mov	r3, r1
 8013258:	4602      	mov	r2, r0
 801325a:	4629      	mov	r1, r5
 801325c:	4620      	mov	r0, r4
 801325e:	f7ec ffdf 	bl	8000220 <__aeabi_dsub>
 8013262:	f7ed fc2f 	bl	8000ac4 <__aeabi_d2iz>
 8013266:	ab0c      	add	r3, sp, #48	@ 0x30
 8013268:	f10b 0b18 	add.w	fp, fp, #24
 801326c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013270:	f108 0801 	add.w	r8, r8, #1
 8013274:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8013278:	e720      	b.n	80130bc <__kernel_rem_pio2+0x29c>
 801327a:	4620      	mov	r0, r4
 801327c:	4629      	mov	r1, r5
 801327e:	f7ed fc21 	bl	8000ac4 <__aeabi_d2iz>
 8013282:	ab0c      	add	r3, sp, #48	@ 0x30
 8013284:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8013288:	e718      	b.n	80130bc <__kernel_rem_pio2+0x29c>
 801328a:	ab0c      	add	r3, sp, #48	@ 0x30
 801328c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013290:	f7ed f914 	bl	80004bc <__aeabi_i2d>
 8013294:	4622      	mov	r2, r4
 8013296:	462b      	mov	r3, r5
 8013298:	f7ed f97a 	bl	8000590 <__aeabi_dmul>
 801329c:	4652      	mov	r2, sl
 801329e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80132a2:	465b      	mov	r3, fp
 80132a4:	4620      	mov	r0, r4
 80132a6:	4629      	mov	r1, r5
 80132a8:	f7ed f972 	bl	8000590 <__aeabi_dmul>
 80132ac:	3e01      	subs	r6, #1
 80132ae:	4604      	mov	r4, r0
 80132b0:	460d      	mov	r5, r1
 80132b2:	e716      	b.n	80130e2 <__kernel_rem_pio2+0x2c2>
 80132b4:	9906      	ldr	r1, [sp, #24]
 80132b6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80132ba:	9106      	str	r1, [sp, #24]
 80132bc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80132c0:	f7ed f966 	bl	8000590 <__aeabi_dmul>
 80132c4:	4602      	mov	r2, r0
 80132c6:	460b      	mov	r3, r1
 80132c8:	4650      	mov	r0, sl
 80132ca:	4659      	mov	r1, fp
 80132cc:	f7ec ffaa 	bl	8000224 <__adddf3>
 80132d0:	3601      	adds	r6, #1
 80132d2:	4682      	mov	sl, r0
 80132d4:	468b      	mov	fp, r1
 80132d6:	9b00      	ldr	r3, [sp, #0]
 80132d8:	429e      	cmp	r6, r3
 80132da:	dc01      	bgt.n	80132e0 <__kernel_rem_pio2+0x4c0>
 80132dc:	42ae      	cmp	r6, r5
 80132de:	dde9      	ble.n	80132b4 <__kernel_rem_pio2+0x494>
 80132e0:	ab48      	add	r3, sp, #288	@ 0x120
 80132e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80132e6:	e9c5 ab00 	strd	sl, fp, [r5]
 80132ea:	3c01      	subs	r4, #1
 80132ec:	e6fd      	b.n	80130ea <__kernel_rem_pio2+0x2ca>
 80132ee:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80132f0:	2b02      	cmp	r3, #2
 80132f2:	dc0b      	bgt.n	801330c <__kernel_rem_pio2+0x4ec>
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	dc35      	bgt.n	8013364 <__kernel_rem_pio2+0x544>
 80132f8:	d059      	beq.n	80133ae <__kernel_rem_pio2+0x58e>
 80132fa:	9b02      	ldr	r3, [sp, #8]
 80132fc:	f003 0007 	and.w	r0, r3, #7
 8013300:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8013304:	ecbd 8b02 	vpop	{d8}
 8013308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801330c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801330e:	2b03      	cmp	r3, #3
 8013310:	d1f3      	bne.n	80132fa <__kernel_rem_pio2+0x4da>
 8013312:	9b05      	ldr	r3, [sp, #20]
 8013314:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8013318:	eb0d 0403 	add.w	r4, sp, r3
 801331c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8013320:	4625      	mov	r5, r4
 8013322:	46c2      	mov	sl, r8
 8013324:	f1ba 0f00 	cmp.w	sl, #0
 8013328:	dc69      	bgt.n	80133fe <__kernel_rem_pio2+0x5de>
 801332a:	4645      	mov	r5, r8
 801332c:	2d01      	cmp	r5, #1
 801332e:	f300 8087 	bgt.w	8013440 <__kernel_rem_pio2+0x620>
 8013332:	9c05      	ldr	r4, [sp, #20]
 8013334:	ab48      	add	r3, sp, #288	@ 0x120
 8013336:	441c      	add	r4, r3
 8013338:	2000      	movs	r0, #0
 801333a:	2100      	movs	r1, #0
 801333c:	f1b8 0f01 	cmp.w	r8, #1
 8013340:	f300 809c 	bgt.w	801347c <__kernel_rem_pio2+0x65c>
 8013344:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8013348:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801334c:	f1b9 0f00 	cmp.w	r9, #0
 8013350:	f040 80a6 	bne.w	80134a0 <__kernel_rem_pio2+0x680>
 8013354:	9b04      	ldr	r3, [sp, #16]
 8013356:	e9c3 5600 	strd	r5, r6, [r3]
 801335a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801335e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013362:	e7ca      	b.n	80132fa <__kernel_rem_pio2+0x4da>
 8013364:	9d05      	ldr	r5, [sp, #20]
 8013366:	ab48      	add	r3, sp, #288	@ 0x120
 8013368:	441d      	add	r5, r3
 801336a:	4644      	mov	r4, r8
 801336c:	2000      	movs	r0, #0
 801336e:	2100      	movs	r1, #0
 8013370:	2c00      	cmp	r4, #0
 8013372:	da35      	bge.n	80133e0 <__kernel_rem_pio2+0x5c0>
 8013374:	f1b9 0f00 	cmp.w	r9, #0
 8013378:	d038      	beq.n	80133ec <__kernel_rem_pio2+0x5cc>
 801337a:	4602      	mov	r2, r0
 801337c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013380:	9c04      	ldr	r4, [sp, #16]
 8013382:	e9c4 2300 	strd	r2, r3, [r4]
 8013386:	4602      	mov	r2, r0
 8013388:	460b      	mov	r3, r1
 801338a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801338e:	f7ec ff47 	bl	8000220 <__aeabi_dsub>
 8013392:	ad4a      	add	r5, sp, #296	@ 0x128
 8013394:	2401      	movs	r4, #1
 8013396:	45a0      	cmp	r8, r4
 8013398:	da2b      	bge.n	80133f2 <__kernel_rem_pio2+0x5d2>
 801339a:	f1b9 0f00 	cmp.w	r9, #0
 801339e:	d002      	beq.n	80133a6 <__kernel_rem_pio2+0x586>
 80133a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80133a4:	4619      	mov	r1, r3
 80133a6:	9b04      	ldr	r3, [sp, #16]
 80133a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80133ac:	e7a5      	b.n	80132fa <__kernel_rem_pio2+0x4da>
 80133ae:	9c05      	ldr	r4, [sp, #20]
 80133b0:	ab48      	add	r3, sp, #288	@ 0x120
 80133b2:	441c      	add	r4, r3
 80133b4:	2000      	movs	r0, #0
 80133b6:	2100      	movs	r1, #0
 80133b8:	f1b8 0f00 	cmp.w	r8, #0
 80133bc:	da09      	bge.n	80133d2 <__kernel_rem_pio2+0x5b2>
 80133be:	f1b9 0f00 	cmp.w	r9, #0
 80133c2:	d002      	beq.n	80133ca <__kernel_rem_pio2+0x5aa>
 80133c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80133c8:	4619      	mov	r1, r3
 80133ca:	9b04      	ldr	r3, [sp, #16]
 80133cc:	e9c3 0100 	strd	r0, r1, [r3]
 80133d0:	e793      	b.n	80132fa <__kernel_rem_pio2+0x4da>
 80133d2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80133d6:	f7ec ff25 	bl	8000224 <__adddf3>
 80133da:	f108 38ff 	add.w	r8, r8, #4294967295
 80133de:	e7eb      	b.n	80133b8 <__kernel_rem_pio2+0x598>
 80133e0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80133e4:	f7ec ff1e 	bl	8000224 <__adddf3>
 80133e8:	3c01      	subs	r4, #1
 80133ea:	e7c1      	b.n	8013370 <__kernel_rem_pio2+0x550>
 80133ec:	4602      	mov	r2, r0
 80133ee:	460b      	mov	r3, r1
 80133f0:	e7c6      	b.n	8013380 <__kernel_rem_pio2+0x560>
 80133f2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80133f6:	f7ec ff15 	bl	8000224 <__adddf3>
 80133fa:	3401      	adds	r4, #1
 80133fc:	e7cb      	b.n	8013396 <__kernel_rem_pio2+0x576>
 80133fe:	ed35 7b02 	vldmdb	r5!, {d7}
 8013402:	ed8d 7b00 	vstr	d7, [sp]
 8013406:	ed95 7b02 	vldr	d7, [r5, #8]
 801340a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801340e:	ec53 2b17 	vmov	r2, r3, d7
 8013412:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013416:	f7ec ff05 	bl	8000224 <__adddf3>
 801341a:	4602      	mov	r2, r0
 801341c:	460b      	mov	r3, r1
 801341e:	4606      	mov	r6, r0
 8013420:	460f      	mov	r7, r1
 8013422:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013426:	f7ec fefb 	bl	8000220 <__aeabi_dsub>
 801342a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801342e:	f7ec fef9 	bl	8000224 <__adddf3>
 8013432:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013436:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801343a:	e9c5 6700 	strd	r6, r7, [r5]
 801343e:	e771      	b.n	8013324 <__kernel_rem_pio2+0x504>
 8013440:	ed34 7b02 	vldmdb	r4!, {d7}
 8013444:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8013448:	ec51 0b17 	vmov	r0, r1, d7
 801344c:	4652      	mov	r2, sl
 801344e:	465b      	mov	r3, fp
 8013450:	ed8d 7b00 	vstr	d7, [sp]
 8013454:	f7ec fee6 	bl	8000224 <__adddf3>
 8013458:	4602      	mov	r2, r0
 801345a:	460b      	mov	r3, r1
 801345c:	4606      	mov	r6, r0
 801345e:	460f      	mov	r7, r1
 8013460:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013464:	f7ec fedc 	bl	8000220 <__aeabi_dsub>
 8013468:	4652      	mov	r2, sl
 801346a:	465b      	mov	r3, fp
 801346c:	f7ec feda 	bl	8000224 <__adddf3>
 8013470:	3d01      	subs	r5, #1
 8013472:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013476:	e9c4 6700 	strd	r6, r7, [r4]
 801347a:	e757      	b.n	801332c <__kernel_rem_pio2+0x50c>
 801347c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013480:	f7ec fed0 	bl	8000224 <__adddf3>
 8013484:	f108 38ff 	add.w	r8, r8, #4294967295
 8013488:	e758      	b.n	801333c <__kernel_rem_pio2+0x51c>
 801348a:	bf00      	nop
 801348c:	f3af 8000 	nop.w
	...
 8013498:	41700000 	.word	0x41700000
 801349c:	3e700000 	.word	0x3e700000
 80134a0:	9b04      	ldr	r3, [sp, #16]
 80134a2:	9a04      	ldr	r2, [sp, #16]
 80134a4:	601d      	str	r5, [r3, #0]
 80134a6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80134aa:	605c      	str	r4, [r3, #4]
 80134ac:	609f      	str	r7, [r3, #8]
 80134ae:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80134b2:	60d3      	str	r3, [r2, #12]
 80134b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80134b8:	6110      	str	r0, [r2, #16]
 80134ba:	6153      	str	r3, [r2, #20]
 80134bc:	e71d      	b.n	80132fa <__kernel_rem_pio2+0x4da>
 80134be:	bf00      	nop

080134c0 <__kernel_rem_pio2f>:
 80134c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134c4:	ed2d 8b04 	vpush	{d8-d9}
 80134c8:	b0d9      	sub	sp, #356	@ 0x164
 80134ca:	4690      	mov	r8, r2
 80134cc:	9001      	str	r0, [sp, #4]
 80134ce:	4ab6      	ldr	r2, [pc, #728]	@ (80137a8 <__kernel_rem_pio2f+0x2e8>)
 80134d0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80134d2:	f118 0f04 	cmn.w	r8, #4
 80134d6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80134da:	460f      	mov	r7, r1
 80134dc:	f103 3bff 	add.w	fp, r3, #4294967295
 80134e0:	db26      	blt.n	8013530 <__kernel_rem_pio2f+0x70>
 80134e2:	f1b8 0203 	subs.w	r2, r8, #3
 80134e6:	bf48      	it	mi
 80134e8:	f108 0204 	addmi.w	r2, r8, #4
 80134ec:	10d2      	asrs	r2, r2, #3
 80134ee:	1c55      	adds	r5, r2, #1
 80134f0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80134f2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80137b8 <__kernel_rem_pio2f+0x2f8>
 80134f6:	00e8      	lsls	r0, r5, #3
 80134f8:	eba2 060b 	sub.w	r6, r2, fp
 80134fc:	9002      	str	r0, [sp, #8]
 80134fe:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8013502:	eb0a 0c0b 	add.w	ip, sl, fp
 8013506:	ac1c      	add	r4, sp, #112	@ 0x70
 8013508:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801350c:	2000      	movs	r0, #0
 801350e:	4560      	cmp	r0, ip
 8013510:	dd10      	ble.n	8013534 <__kernel_rem_pio2f+0x74>
 8013512:	a91c      	add	r1, sp, #112	@ 0x70
 8013514:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8013518:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801351c:	2600      	movs	r6, #0
 801351e:	4556      	cmp	r6, sl
 8013520:	dc24      	bgt.n	801356c <__kernel_rem_pio2f+0xac>
 8013522:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013526:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80137b8 <__kernel_rem_pio2f+0x2f8>
 801352a:	4684      	mov	ip, r0
 801352c:	2400      	movs	r4, #0
 801352e:	e016      	b.n	801355e <__kernel_rem_pio2f+0x9e>
 8013530:	2200      	movs	r2, #0
 8013532:	e7dc      	b.n	80134ee <__kernel_rem_pio2f+0x2e>
 8013534:	42c6      	cmn	r6, r0
 8013536:	bf5d      	ittte	pl
 8013538:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801353c:	ee07 1a90 	vmovpl	s15, r1
 8013540:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8013544:	eef0 7a47 	vmovmi.f32	s15, s14
 8013548:	ece4 7a01 	vstmia	r4!, {s15}
 801354c:	3001      	adds	r0, #1
 801354e:	e7de      	b.n	801350e <__kernel_rem_pio2f+0x4e>
 8013550:	ecfe 6a01 	vldmia	lr!, {s13}
 8013554:	ed3c 7a01 	vldmdb	ip!, {s14}
 8013558:	eee6 7a87 	vfma.f32	s15, s13, s14
 801355c:	3401      	adds	r4, #1
 801355e:	455c      	cmp	r4, fp
 8013560:	ddf6      	ble.n	8013550 <__kernel_rem_pio2f+0x90>
 8013562:	ece9 7a01 	vstmia	r9!, {s15}
 8013566:	3601      	adds	r6, #1
 8013568:	3004      	adds	r0, #4
 801356a:	e7d8      	b.n	801351e <__kernel_rem_pio2f+0x5e>
 801356c:	a908      	add	r1, sp, #32
 801356e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013572:	9104      	str	r1, [sp, #16]
 8013574:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8013576:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80137b4 <__kernel_rem_pio2f+0x2f4>
 801357a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80137b0 <__kernel_rem_pio2f+0x2f0>
 801357e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8013582:	9203      	str	r2, [sp, #12]
 8013584:	4654      	mov	r4, sl
 8013586:	00a2      	lsls	r2, r4, #2
 8013588:	9205      	str	r2, [sp, #20]
 801358a:	aa58      	add	r2, sp, #352	@ 0x160
 801358c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8013590:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8013594:	a944      	add	r1, sp, #272	@ 0x110
 8013596:	aa08      	add	r2, sp, #32
 8013598:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801359c:	4694      	mov	ip, r2
 801359e:	4626      	mov	r6, r4
 80135a0:	2e00      	cmp	r6, #0
 80135a2:	dc4c      	bgt.n	801363e <__kernel_rem_pio2f+0x17e>
 80135a4:	4628      	mov	r0, r5
 80135a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80135aa:	f7ff fbd3 	bl	8012d54 <scalbnf>
 80135ae:	eeb0 8a40 	vmov.f32	s16, s0
 80135b2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80135b6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80135ba:	f000 fa65 	bl	8013a88 <floorf>
 80135be:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80135c2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80135c6:	2d00      	cmp	r5, #0
 80135c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80135cc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80135d0:	ee17 9a90 	vmov	r9, s15
 80135d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80135d8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80135dc:	dd41      	ble.n	8013662 <__kernel_rem_pio2f+0x1a2>
 80135de:	f104 3cff 	add.w	ip, r4, #4294967295
 80135e2:	a908      	add	r1, sp, #32
 80135e4:	f1c5 0e08 	rsb	lr, r5, #8
 80135e8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80135ec:	fa46 f00e 	asr.w	r0, r6, lr
 80135f0:	4481      	add	r9, r0
 80135f2:	fa00 f00e 	lsl.w	r0, r0, lr
 80135f6:	1a36      	subs	r6, r6, r0
 80135f8:	f1c5 0007 	rsb	r0, r5, #7
 80135fc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8013600:	4106      	asrs	r6, r0
 8013602:	2e00      	cmp	r6, #0
 8013604:	dd3c      	ble.n	8013680 <__kernel_rem_pio2f+0x1c0>
 8013606:	f04f 0e00 	mov.w	lr, #0
 801360a:	f109 0901 	add.w	r9, r9, #1
 801360e:	4670      	mov	r0, lr
 8013610:	4574      	cmp	r4, lr
 8013612:	dc68      	bgt.n	80136e6 <__kernel_rem_pio2f+0x226>
 8013614:	2d00      	cmp	r5, #0
 8013616:	dd03      	ble.n	8013620 <__kernel_rem_pio2f+0x160>
 8013618:	2d01      	cmp	r5, #1
 801361a:	d074      	beq.n	8013706 <__kernel_rem_pio2f+0x246>
 801361c:	2d02      	cmp	r5, #2
 801361e:	d07d      	beq.n	801371c <__kernel_rem_pio2f+0x25c>
 8013620:	2e02      	cmp	r6, #2
 8013622:	d12d      	bne.n	8013680 <__kernel_rem_pio2f+0x1c0>
 8013624:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8013628:	ee30 8a48 	vsub.f32	s16, s0, s16
 801362c:	b340      	cbz	r0, 8013680 <__kernel_rem_pio2f+0x1c0>
 801362e:	4628      	mov	r0, r5
 8013630:	9306      	str	r3, [sp, #24]
 8013632:	f7ff fb8f 	bl	8012d54 <scalbnf>
 8013636:	9b06      	ldr	r3, [sp, #24]
 8013638:	ee38 8a40 	vsub.f32	s16, s16, s0
 801363c:	e020      	b.n	8013680 <__kernel_rem_pio2f+0x1c0>
 801363e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8013642:	3e01      	subs	r6, #1
 8013644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801364c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8013650:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013654:	ecac 0a01 	vstmia	ip!, {s0}
 8013658:	ed30 0a01 	vldmdb	r0!, {s0}
 801365c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8013660:	e79e      	b.n	80135a0 <__kernel_rem_pio2f+0xe0>
 8013662:	d105      	bne.n	8013670 <__kernel_rem_pio2f+0x1b0>
 8013664:	1e60      	subs	r0, r4, #1
 8013666:	a908      	add	r1, sp, #32
 8013668:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801366c:	11f6      	asrs	r6, r6, #7
 801366e:	e7c8      	b.n	8013602 <__kernel_rem_pio2f+0x142>
 8013670:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013674:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8013678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801367c:	da31      	bge.n	80136e2 <__kernel_rem_pio2f+0x222>
 801367e:	2600      	movs	r6, #0
 8013680:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013688:	f040 8098 	bne.w	80137bc <__kernel_rem_pio2f+0x2fc>
 801368c:	1e60      	subs	r0, r4, #1
 801368e:	2200      	movs	r2, #0
 8013690:	4550      	cmp	r0, sl
 8013692:	da4b      	bge.n	801372c <__kernel_rem_pio2f+0x26c>
 8013694:	2a00      	cmp	r2, #0
 8013696:	d065      	beq.n	8013764 <__kernel_rem_pio2f+0x2a4>
 8013698:	3c01      	subs	r4, #1
 801369a:	ab08      	add	r3, sp, #32
 801369c:	3d08      	subs	r5, #8
 801369e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d0f8      	beq.n	8013698 <__kernel_rem_pio2f+0x1d8>
 80136a6:	4628      	mov	r0, r5
 80136a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80136ac:	f7ff fb52 	bl	8012d54 <scalbnf>
 80136b0:	1c63      	adds	r3, r4, #1
 80136b2:	aa44      	add	r2, sp, #272	@ 0x110
 80136b4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80137b4 <__kernel_rem_pio2f+0x2f4>
 80136b8:	0099      	lsls	r1, r3, #2
 80136ba:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80136be:	4623      	mov	r3, r4
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	f280 80a9 	bge.w	8013818 <__kernel_rem_pio2f+0x358>
 80136c6:	4623      	mov	r3, r4
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f2c0 80c7 	blt.w	801385c <__kernel_rem_pio2f+0x39c>
 80136ce:	aa44      	add	r2, sp, #272	@ 0x110
 80136d0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80136d4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80137ac <__kernel_rem_pio2f+0x2ec>
 80136d8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80137b8 <__kernel_rem_pio2f+0x2f8>
 80136dc:	2000      	movs	r0, #0
 80136de:	1ae2      	subs	r2, r4, r3
 80136e0:	e0b1      	b.n	8013846 <__kernel_rem_pio2f+0x386>
 80136e2:	2602      	movs	r6, #2
 80136e4:	e78f      	b.n	8013606 <__kernel_rem_pio2f+0x146>
 80136e6:	f852 1b04 	ldr.w	r1, [r2], #4
 80136ea:	b948      	cbnz	r0, 8013700 <__kernel_rem_pio2f+0x240>
 80136ec:	b121      	cbz	r1, 80136f8 <__kernel_rem_pio2f+0x238>
 80136ee:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80136f2:	f842 1c04 	str.w	r1, [r2, #-4]
 80136f6:	2101      	movs	r1, #1
 80136f8:	f10e 0e01 	add.w	lr, lr, #1
 80136fc:	4608      	mov	r0, r1
 80136fe:	e787      	b.n	8013610 <__kernel_rem_pio2f+0x150>
 8013700:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8013704:	e7f5      	b.n	80136f2 <__kernel_rem_pio2f+0x232>
 8013706:	f104 3cff 	add.w	ip, r4, #4294967295
 801370a:	aa08      	add	r2, sp, #32
 801370c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013710:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8013714:	a908      	add	r1, sp, #32
 8013716:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801371a:	e781      	b.n	8013620 <__kernel_rem_pio2f+0x160>
 801371c:	f104 3cff 	add.w	ip, r4, #4294967295
 8013720:	aa08      	add	r2, sp, #32
 8013722:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8013726:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801372a:	e7f3      	b.n	8013714 <__kernel_rem_pio2f+0x254>
 801372c:	a908      	add	r1, sp, #32
 801372e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8013732:	3801      	subs	r0, #1
 8013734:	430a      	orrs	r2, r1
 8013736:	e7ab      	b.n	8013690 <__kernel_rem_pio2f+0x1d0>
 8013738:	3201      	adds	r2, #1
 801373a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801373e:	2e00      	cmp	r6, #0
 8013740:	d0fa      	beq.n	8013738 <__kernel_rem_pio2f+0x278>
 8013742:	9905      	ldr	r1, [sp, #20]
 8013744:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8013748:	eb0d 0001 	add.w	r0, sp, r1
 801374c:	18e6      	adds	r6, r4, r3
 801374e:	a91c      	add	r1, sp, #112	@ 0x70
 8013750:	f104 0c01 	add.w	ip, r4, #1
 8013754:	384c      	subs	r0, #76	@ 0x4c
 8013756:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801375a:	4422      	add	r2, r4
 801375c:	4562      	cmp	r2, ip
 801375e:	da04      	bge.n	801376a <__kernel_rem_pio2f+0x2aa>
 8013760:	4614      	mov	r4, r2
 8013762:	e710      	b.n	8013586 <__kernel_rem_pio2f+0xc6>
 8013764:	9804      	ldr	r0, [sp, #16]
 8013766:	2201      	movs	r2, #1
 8013768:	e7e7      	b.n	801373a <__kernel_rem_pio2f+0x27a>
 801376a:	9903      	ldr	r1, [sp, #12]
 801376c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8013770:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8013774:	9105      	str	r1, [sp, #20]
 8013776:	ee07 1a90 	vmov	s15, r1
 801377a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801377e:	2400      	movs	r4, #0
 8013780:	ece6 7a01 	vstmia	r6!, {s15}
 8013784:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80137b8 <__kernel_rem_pio2f+0x2f8>
 8013788:	46b1      	mov	r9, r6
 801378a:	455c      	cmp	r4, fp
 801378c:	dd04      	ble.n	8013798 <__kernel_rem_pio2f+0x2d8>
 801378e:	ece0 7a01 	vstmia	r0!, {s15}
 8013792:	f10c 0c01 	add.w	ip, ip, #1
 8013796:	e7e1      	b.n	801375c <__kernel_rem_pio2f+0x29c>
 8013798:	ecfe 6a01 	vldmia	lr!, {s13}
 801379c:	ed39 7a01 	vldmdb	r9!, {s14}
 80137a0:	3401      	adds	r4, #1
 80137a2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80137a6:	e7f0      	b.n	801378a <__kernel_rem_pio2f+0x2ca>
 80137a8:	0801417c 	.word	0x0801417c
 80137ac:	08014150 	.word	0x08014150
 80137b0:	43800000 	.word	0x43800000
 80137b4:	3b800000 	.word	0x3b800000
 80137b8:	00000000 	.word	0x00000000
 80137bc:	9b02      	ldr	r3, [sp, #8]
 80137be:	eeb0 0a48 	vmov.f32	s0, s16
 80137c2:	eba3 0008 	sub.w	r0, r3, r8
 80137c6:	f7ff fac5 	bl	8012d54 <scalbnf>
 80137ca:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80137b0 <__kernel_rem_pio2f+0x2f0>
 80137ce:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80137d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137d6:	db19      	blt.n	801380c <__kernel_rem_pio2f+0x34c>
 80137d8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80137b4 <__kernel_rem_pio2f+0x2f4>
 80137dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80137e0:	aa08      	add	r2, sp, #32
 80137e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137e6:	3508      	adds	r5, #8
 80137e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137ec:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80137f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80137f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80137f8:	ee10 3a10 	vmov	r3, s0
 80137fc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8013800:	ee17 3a90 	vmov	r3, s15
 8013804:	3401      	adds	r4, #1
 8013806:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801380a:	e74c      	b.n	80136a6 <__kernel_rem_pio2f+0x1e6>
 801380c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8013810:	aa08      	add	r2, sp, #32
 8013812:	ee10 3a10 	vmov	r3, s0
 8013816:	e7f6      	b.n	8013806 <__kernel_rem_pio2f+0x346>
 8013818:	a808      	add	r0, sp, #32
 801381a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801381e:	9001      	str	r0, [sp, #4]
 8013820:	ee07 0a90 	vmov	s15, r0
 8013824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013828:	3b01      	subs	r3, #1
 801382a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801382e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8013832:	ed62 7a01 	vstmdb	r2!, {s15}
 8013836:	e743      	b.n	80136c0 <__kernel_rem_pio2f+0x200>
 8013838:	ecfc 6a01 	vldmia	ip!, {s13}
 801383c:	ecb5 7a01 	vldmia	r5!, {s14}
 8013840:	eee6 7a87 	vfma.f32	s15, s13, s14
 8013844:	3001      	adds	r0, #1
 8013846:	4550      	cmp	r0, sl
 8013848:	dc01      	bgt.n	801384e <__kernel_rem_pio2f+0x38e>
 801384a:	4290      	cmp	r0, r2
 801384c:	ddf4      	ble.n	8013838 <__kernel_rem_pio2f+0x378>
 801384e:	a858      	add	r0, sp, #352	@ 0x160
 8013850:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8013854:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8013858:	3b01      	subs	r3, #1
 801385a:	e735      	b.n	80136c8 <__kernel_rem_pio2f+0x208>
 801385c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801385e:	2b02      	cmp	r3, #2
 8013860:	dc09      	bgt.n	8013876 <__kernel_rem_pio2f+0x3b6>
 8013862:	2b00      	cmp	r3, #0
 8013864:	dc27      	bgt.n	80138b6 <__kernel_rem_pio2f+0x3f6>
 8013866:	d040      	beq.n	80138ea <__kernel_rem_pio2f+0x42a>
 8013868:	f009 0007 	and.w	r0, r9, #7
 801386c:	b059      	add	sp, #356	@ 0x164
 801386e:	ecbd 8b04 	vpop	{d8-d9}
 8013872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013876:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8013878:	2b03      	cmp	r3, #3
 801387a:	d1f5      	bne.n	8013868 <__kernel_rem_pio2f+0x3a8>
 801387c:	aa30      	add	r2, sp, #192	@ 0xc0
 801387e:	1f0b      	subs	r3, r1, #4
 8013880:	4413      	add	r3, r2
 8013882:	461a      	mov	r2, r3
 8013884:	4620      	mov	r0, r4
 8013886:	2800      	cmp	r0, #0
 8013888:	dc50      	bgt.n	801392c <__kernel_rem_pio2f+0x46c>
 801388a:	4622      	mov	r2, r4
 801388c:	2a01      	cmp	r2, #1
 801388e:	dc5d      	bgt.n	801394c <__kernel_rem_pio2f+0x48c>
 8013890:	ab30      	add	r3, sp, #192	@ 0xc0
 8013892:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80137b8 <__kernel_rem_pio2f+0x2f8>
 8013896:	440b      	add	r3, r1
 8013898:	2c01      	cmp	r4, #1
 801389a:	dc67      	bgt.n	801396c <__kernel_rem_pio2f+0x4ac>
 801389c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80138a0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80138a4:	2e00      	cmp	r6, #0
 80138a6:	d167      	bne.n	8013978 <__kernel_rem_pio2f+0x4b8>
 80138a8:	edc7 6a00 	vstr	s13, [r7]
 80138ac:	ed87 7a01 	vstr	s14, [r7, #4]
 80138b0:	edc7 7a02 	vstr	s15, [r7, #8]
 80138b4:	e7d8      	b.n	8013868 <__kernel_rem_pio2f+0x3a8>
 80138b6:	ab30      	add	r3, sp, #192	@ 0xc0
 80138b8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80137b8 <__kernel_rem_pio2f+0x2f8>
 80138bc:	440b      	add	r3, r1
 80138be:	4622      	mov	r2, r4
 80138c0:	2a00      	cmp	r2, #0
 80138c2:	da24      	bge.n	801390e <__kernel_rem_pio2f+0x44e>
 80138c4:	b34e      	cbz	r6, 801391a <__kernel_rem_pio2f+0x45a>
 80138c6:	eef1 7a47 	vneg.f32	s15, s14
 80138ca:	edc7 7a00 	vstr	s15, [r7]
 80138ce:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80138d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80138d6:	aa31      	add	r2, sp, #196	@ 0xc4
 80138d8:	2301      	movs	r3, #1
 80138da:	429c      	cmp	r4, r3
 80138dc:	da20      	bge.n	8013920 <__kernel_rem_pio2f+0x460>
 80138de:	b10e      	cbz	r6, 80138e4 <__kernel_rem_pio2f+0x424>
 80138e0:	eef1 7a67 	vneg.f32	s15, s15
 80138e4:	edc7 7a01 	vstr	s15, [r7, #4]
 80138e8:	e7be      	b.n	8013868 <__kernel_rem_pio2f+0x3a8>
 80138ea:	ab30      	add	r3, sp, #192	@ 0xc0
 80138ec:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80137b8 <__kernel_rem_pio2f+0x2f8>
 80138f0:	440b      	add	r3, r1
 80138f2:	2c00      	cmp	r4, #0
 80138f4:	da05      	bge.n	8013902 <__kernel_rem_pio2f+0x442>
 80138f6:	b10e      	cbz	r6, 80138fc <__kernel_rem_pio2f+0x43c>
 80138f8:	eef1 7a67 	vneg.f32	s15, s15
 80138fc:	edc7 7a00 	vstr	s15, [r7]
 8013900:	e7b2      	b.n	8013868 <__kernel_rem_pio2f+0x3a8>
 8013902:	ed33 7a01 	vldmdb	r3!, {s14}
 8013906:	3c01      	subs	r4, #1
 8013908:	ee77 7a87 	vadd.f32	s15, s15, s14
 801390c:	e7f1      	b.n	80138f2 <__kernel_rem_pio2f+0x432>
 801390e:	ed73 7a01 	vldmdb	r3!, {s15}
 8013912:	3a01      	subs	r2, #1
 8013914:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013918:	e7d2      	b.n	80138c0 <__kernel_rem_pio2f+0x400>
 801391a:	eef0 7a47 	vmov.f32	s15, s14
 801391e:	e7d4      	b.n	80138ca <__kernel_rem_pio2f+0x40a>
 8013920:	ecb2 7a01 	vldmia	r2!, {s14}
 8013924:	3301      	adds	r3, #1
 8013926:	ee77 7a87 	vadd.f32	s15, s15, s14
 801392a:	e7d6      	b.n	80138da <__kernel_rem_pio2f+0x41a>
 801392c:	ed72 7a01 	vldmdb	r2!, {s15}
 8013930:	edd2 6a01 	vldr	s13, [r2, #4]
 8013934:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013938:	3801      	subs	r0, #1
 801393a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801393e:	ed82 7a00 	vstr	s14, [r2]
 8013942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013946:	edc2 7a01 	vstr	s15, [r2, #4]
 801394a:	e79c      	b.n	8013886 <__kernel_rem_pio2f+0x3c6>
 801394c:	ed73 7a01 	vldmdb	r3!, {s15}
 8013950:	edd3 6a01 	vldr	s13, [r3, #4]
 8013954:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013958:	3a01      	subs	r2, #1
 801395a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801395e:	ed83 7a00 	vstr	s14, [r3]
 8013962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013966:	edc3 7a01 	vstr	s15, [r3, #4]
 801396a:	e78f      	b.n	801388c <__kernel_rem_pio2f+0x3cc>
 801396c:	ed33 7a01 	vldmdb	r3!, {s14}
 8013970:	3c01      	subs	r4, #1
 8013972:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013976:	e78f      	b.n	8013898 <__kernel_rem_pio2f+0x3d8>
 8013978:	eef1 6a66 	vneg.f32	s13, s13
 801397c:	eeb1 7a47 	vneg.f32	s14, s14
 8013980:	edc7 6a00 	vstr	s13, [r7]
 8013984:	ed87 7a01 	vstr	s14, [r7, #4]
 8013988:	eef1 7a67 	vneg.f32	s15, s15
 801398c:	e790      	b.n	80138b0 <__kernel_rem_pio2f+0x3f0>
 801398e:	bf00      	nop

08013990 <floor>:
 8013990:	ec51 0b10 	vmov	r0, r1, d0
 8013994:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801399c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80139a0:	2e13      	cmp	r6, #19
 80139a2:	460c      	mov	r4, r1
 80139a4:	4605      	mov	r5, r0
 80139a6:	4680      	mov	r8, r0
 80139a8:	dc34      	bgt.n	8013a14 <floor+0x84>
 80139aa:	2e00      	cmp	r6, #0
 80139ac:	da17      	bge.n	80139de <floor+0x4e>
 80139ae:	a332      	add	r3, pc, #200	@ (adr r3, 8013a78 <floor+0xe8>)
 80139b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b4:	f7ec fc36 	bl	8000224 <__adddf3>
 80139b8:	2200      	movs	r2, #0
 80139ba:	2300      	movs	r3, #0
 80139bc:	f7ed f878 	bl	8000ab0 <__aeabi_dcmpgt>
 80139c0:	b150      	cbz	r0, 80139d8 <floor+0x48>
 80139c2:	2c00      	cmp	r4, #0
 80139c4:	da55      	bge.n	8013a72 <floor+0xe2>
 80139c6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80139ca:	432c      	orrs	r4, r5
 80139cc:	2500      	movs	r5, #0
 80139ce:	42ac      	cmp	r4, r5
 80139d0:	4c2b      	ldr	r4, [pc, #172]	@ (8013a80 <floor+0xf0>)
 80139d2:	bf08      	it	eq
 80139d4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80139d8:	4621      	mov	r1, r4
 80139da:	4628      	mov	r0, r5
 80139dc:	e023      	b.n	8013a26 <floor+0x96>
 80139de:	4f29      	ldr	r7, [pc, #164]	@ (8013a84 <floor+0xf4>)
 80139e0:	4137      	asrs	r7, r6
 80139e2:	ea01 0307 	and.w	r3, r1, r7
 80139e6:	4303      	orrs	r3, r0
 80139e8:	d01d      	beq.n	8013a26 <floor+0x96>
 80139ea:	a323      	add	r3, pc, #140	@ (adr r3, 8013a78 <floor+0xe8>)
 80139ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f0:	f7ec fc18 	bl	8000224 <__adddf3>
 80139f4:	2200      	movs	r2, #0
 80139f6:	2300      	movs	r3, #0
 80139f8:	f7ed f85a 	bl	8000ab0 <__aeabi_dcmpgt>
 80139fc:	2800      	cmp	r0, #0
 80139fe:	d0eb      	beq.n	80139d8 <floor+0x48>
 8013a00:	2c00      	cmp	r4, #0
 8013a02:	bfbe      	ittt	lt
 8013a04:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8013a08:	4133      	asrlt	r3, r6
 8013a0a:	18e4      	addlt	r4, r4, r3
 8013a0c:	ea24 0407 	bic.w	r4, r4, r7
 8013a10:	2500      	movs	r5, #0
 8013a12:	e7e1      	b.n	80139d8 <floor+0x48>
 8013a14:	2e33      	cmp	r6, #51	@ 0x33
 8013a16:	dd0a      	ble.n	8013a2e <floor+0x9e>
 8013a18:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8013a1c:	d103      	bne.n	8013a26 <floor+0x96>
 8013a1e:	4602      	mov	r2, r0
 8013a20:	460b      	mov	r3, r1
 8013a22:	f7ec fbff 	bl	8000224 <__adddf3>
 8013a26:	ec41 0b10 	vmov	d0, r0, r1
 8013a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a2e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8013a32:	f04f 37ff 	mov.w	r7, #4294967295
 8013a36:	40df      	lsrs	r7, r3
 8013a38:	4207      	tst	r7, r0
 8013a3a:	d0f4      	beq.n	8013a26 <floor+0x96>
 8013a3c:	a30e      	add	r3, pc, #56	@ (adr r3, 8013a78 <floor+0xe8>)
 8013a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a42:	f7ec fbef 	bl	8000224 <__adddf3>
 8013a46:	2200      	movs	r2, #0
 8013a48:	2300      	movs	r3, #0
 8013a4a:	f7ed f831 	bl	8000ab0 <__aeabi_dcmpgt>
 8013a4e:	2800      	cmp	r0, #0
 8013a50:	d0c2      	beq.n	80139d8 <floor+0x48>
 8013a52:	2c00      	cmp	r4, #0
 8013a54:	da0a      	bge.n	8013a6c <floor+0xdc>
 8013a56:	2e14      	cmp	r6, #20
 8013a58:	d101      	bne.n	8013a5e <floor+0xce>
 8013a5a:	3401      	adds	r4, #1
 8013a5c:	e006      	b.n	8013a6c <floor+0xdc>
 8013a5e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8013a62:	2301      	movs	r3, #1
 8013a64:	40b3      	lsls	r3, r6
 8013a66:	441d      	add	r5, r3
 8013a68:	4545      	cmp	r5, r8
 8013a6a:	d3f6      	bcc.n	8013a5a <floor+0xca>
 8013a6c:	ea25 0507 	bic.w	r5, r5, r7
 8013a70:	e7b2      	b.n	80139d8 <floor+0x48>
 8013a72:	2500      	movs	r5, #0
 8013a74:	462c      	mov	r4, r5
 8013a76:	e7af      	b.n	80139d8 <floor+0x48>
 8013a78:	8800759c 	.word	0x8800759c
 8013a7c:	7e37e43c 	.word	0x7e37e43c
 8013a80:	bff00000 	.word	0xbff00000
 8013a84:	000fffff 	.word	0x000fffff

08013a88 <floorf>:
 8013a88:	ee10 3a10 	vmov	r3, s0
 8013a8c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013a90:	3a7f      	subs	r2, #127	@ 0x7f
 8013a92:	2a16      	cmp	r2, #22
 8013a94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8013a98:	dc2b      	bgt.n	8013af2 <floorf+0x6a>
 8013a9a:	2a00      	cmp	r2, #0
 8013a9c:	da12      	bge.n	8013ac4 <floorf+0x3c>
 8013a9e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013b04 <floorf+0x7c>
 8013aa2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013aa6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aae:	dd06      	ble.n	8013abe <floorf+0x36>
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	da24      	bge.n	8013afe <floorf+0x76>
 8013ab4:	2900      	cmp	r1, #0
 8013ab6:	4b14      	ldr	r3, [pc, #80]	@ (8013b08 <floorf+0x80>)
 8013ab8:	bf08      	it	eq
 8013aba:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8013abe:	ee00 3a10 	vmov	s0, r3
 8013ac2:	4770      	bx	lr
 8013ac4:	4911      	ldr	r1, [pc, #68]	@ (8013b0c <floorf+0x84>)
 8013ac6:	4111      	asrs	r1, r2
 8013ac8:	420b      	tst	r3, r1
 8013aca:	d0fa      	beq.n	8013ac2 <floorf+0x3a>
 8013acc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8013b04 <floorf+0x7c>
 8013ad0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8013ad4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013adc:	ddef      	ble.n	8013abe <floorf+0x36>
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	bfbe      	ittt	lt
 8013ae2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8013ae6:	fa40 f202 	asrlt.w	r2, r0, r2
 8013aea:	189b      	addlt	r3, r3, r2
 8013aec:	ea23 0301 	bic.w	r3, r3, r1
 8013af0:	e7e5      	b.n	8013abe <floorf+0x36>
 8013af2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013af6:	d3e4      	bcc.n	8013ac2 <floorf+0x3a>
 8013af8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013afc:	4770      	bx	lr
 8013afe:	2300      	movs	r3, #0
 8013b00:	e7dd      	b.n	8013abe <floorf+0x36>
 8013b02:	bf00      	nop
 8013b04:	7149f2ca 	.word	0x7149f2ca
 8013b08:	bf800000 	.word	0xbf800000
 8013b0c:	007fffff 	.word	0x007fffff

08013b10 <_init>:
 8013b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b12:	bf00      	nop
 8013b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b16:	bc08      	pop	{r3}
 8013b18:	469e      	mov	lr, r3
 8013b1a:	4770      	bx	lr

08013b1c <_fini>:
 8013b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b1e:	bf00      	nop
 8013b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b22:	bc08      	pop	{r3}
 8013b24:	469e      	mov	lr, r3
 8013b26:	4770      	bx	lr
