
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014960  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  08014b38  08014b38  00015b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015188  08015188  00017610  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08015188  08015188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015190  08015190  00017610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015190  08015190  00016190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08015194  08015194  00016194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000610  20000000  08015198  00017000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002258  20000610  080157a8  00017610  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002868  080157a8  00017868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017610  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cb9d  00000000  00000000  00017640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055ce  00000000  00000000  000441dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  000497b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001730  00000000  00000000  0004b538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db9e  00000000  00000000  0004cc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c168  00000000  00000000  0007a806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a546  00000000  00000000  000a696e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c0eb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008680  00000000  00000000  001c0ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c9578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000610 	.word	0x20000610
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08014b20 	.word	0x08014b20

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000614 	.word	0x20000614
 8000214:	08014b20 	.word	0x08014b20

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00b f8e0 	bl	800c1a4 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f00a f9c9 	bl	800b388 <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_GetValue>:

void ADC_DMA_Stop(ADC_DMA *adc_dma) {
    HAL_ADC_Stop_DMA(adc_dma->hadc);
}

float ADC_DMA_GetValue(ADC_DMA *adc_dma, uint8_t channel_index) {
 8001000:	b480      	push	{r7}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	460b      	mov	r3, r1
 800100a:	70fb      	strb	r3, [r7, #3]
    uint32_t sum = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    uint32_t samples = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]

    // Average all samples for this channel
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e012      	b.n	8001040 <ADC_DMA_GetValue+0x40>
        sum += adc_dma->dma_buffer[j];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	4413      	add	r3, r2
 800102c:	617b      	str	r3, [r7, #20]
        samples++;
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	3301      	adds	r3, #1
 8001032:	613b      	str	r3, [r7, #16]
    for (uint32_t j = channel_index; j < adc_dma->buffer_length; j += adc_dma->num_channels) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7b1b      	ldrb	r3, [r3, #12]
 8001038:	461a      	mov	r2, r3
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	4413      	add	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e7      	bcc.n	800101a <ADC_DMA_GetValue+0x1a>
    }

    // Calculate raw ADC value
    if (samples > 0) {
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00c      	beq.n	800106a <ADC_DMA_GetValue+0x6a>
        return (float)sum / samples;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001068:	e001      	b.n	800106e <ADC_DMA_GetValue+0x6e>
    }

    return 0.0f;
 800106a:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001080 <ADC_DMA_GetValue+0x80>
}
 800106e:	eef0 7a66 	vmov.f32	s15, s13
 8001072:	eeb0 0a67 	vmov.f32	s0, s15
 8001076:	371c      	adds	r7, #28
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	00000000 	.word	0x00000000

08001084 <ADC_DMA_SetCenterPoint>:

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001090:	460b      	mov	r3, r1
 8001092:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	68ba      	ldr	r2, [r7, #8]
 8001098:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	79fa      	ldrb	r2, [r7, #7]
 800109e:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a8:	ee07 3a90 	vmov	s15, r3
 80010ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80010d4 <ADC_DMA_SetCenterPoint+0x50>
 80010b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	edd3 7a06 	vldr	s15, [r3, #24]
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	42c80000 	.word	0x42c80000

080010d8 <ADC_DMA_GetJoystickValue>:

float ADC_DMA_GetJoystickValue(ADC_DMA *adc_dma, uint8_t channel_index, float min_output, float max_output) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	460b      	mov	r3, r1
 80010e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e6:	edc7 0a00 	vstr	s1, [r7]
 80010ea:	72fb      	strb	r3, [r7, #11]
    // Get raw value
    float value = ADC_DMA_GetValue(adc_dma, channel_index);
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	4619      	mov	r1, r3
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff85 	bl	8001000 <ADC_DMA_GetValue>
 80010f6:	ed87 0a05 	vstr	s0, [r7, #20]

    // Apply threshold (dead zone) as in XYAnalog
    if (fabsf(value - adc_dma->center_point) < adc_dma->threshold) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a06 	vldr	s15, [r3, #24]
 8001100:	ed97 7a05 	vldr	s14, [r7, #20]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eeb0 7ae7 	vabs.f32	s14, s15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	d502      	bpl.n	8001122 <ADC_DMA_GetJoystickValue+0x4a>
        value = adc_dma->center_point;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	699b      	ldr	r3, [r3, #24]
 8001120:	617b      	str	r3, [r7, #20]
    }

    // Map to desired output range
    return mapf(value, 0.0f, adc_dma->adc_resolution, min_output, max_output);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	edd3 7a05 	vldr	s15, [r3, #20]
 8001128:	ed97 2a00 	vldr	s4, [r7]
 800112c:	edd7 1a01 	vldr	s3, [r7, #4]
 8001130:	eeb0 1a67 	vmov.f32	s2, s15
 8001134:	eddf 0a06 	vldr	s1, [pc, #24]	@ 8001150 <ADC_DMA_GetJoystickValue+0x78>
 8001138:	ed97 0a05 	vldr	s0, [r7, #20]
 800113c:	f000 fe71 	bl	8001e22 <mapf>
 8001140:	eef0 7a40 	vmov.f32	s15, s0
}
 8001144:	eeb0 0a67 	vmov.f32	s0, s15
 8001148:	3718      	adds	r7, #24
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	00000000 	.word	0x00000000

08001154 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	ed87 0a03 	vstr	s0, [r7, #12]
 800115e:	60b8      	str	r0, [r7, #8]
 8001160:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	ee07 3a90 	vmov	s15, r3
 8001168:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001170:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	dd01      	ble.n	800117e <PWM_Satuation+0x2a>
		return _upper_limit;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	e013      	b.n	80011a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	ed97 7a03 	vldr	s14, [r7, #12]
 800118c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001194:	d501      	bpl.n	800119a <PWM_Satuation+0x46>
		return _lower_limit;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e005      	b.n	80011a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800119a:	edd7 7a03 	vldr	s15, [r7, #12]
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80011b2:	b480      	push	{r7}
 80011b4:	b087      	sub	sp, #28
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6178      	str	r0, [r7, #20]
 80011ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80011be:	edc7 0a03 	vstr	s1, [r7, #12]
 80011c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80011c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	68ba      	ldr	r2, [r7, #8]
 80011ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f04f 0200 	mov.w	r2, #0
 800120a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800120c:	bf00      	nop
 800120e:	371c      	adds	r7, #28
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001238:	bfac      	ite	ge
 800123a:	2301      	movge	r3, #1
 800123c:	2300      	movlt	r3, #0
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f083 0301 	eor.w	r3, r3, #1
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d10e      	bne.n	8001268 <PID_CONTROLLER_Compute+0x50>
 800124a:	edd7 7a00 	vldr	s15, [r7]
 800124e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001256:	bfcc      	ite	gt
 8001258:	2301      	movgt	r3, #1
 800125a:	2300      	movle	r3, #0
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f083 0301 	eor.w	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b00      	cmp	r3, #0
 8001266:	d057      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	edd3 7a06 	vldr	s15, [r3, #24]
 8001274:	eef1 7a67 	vneg.f32	s15, s15
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	bf94      	ite	ls
 8001282:	2301      	movls	r3, #1
 8001284:	2300      	movhi	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001292:	edd7 7a00 	vldr	s15, [r7]
 8001296:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	bf4c      	ite	mi
 80012a0:	2301      	movmi	r3, #1
 80012a2:	2300      	movpl	r3, #0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f083 0301 	eor.w	r3, r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d033      	beq.n	8001318 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edd3 6a00 	vldr	s13, [r3]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a01 	vldr	s15, [r3, #4]
 80012c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80012cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80012d0:	edd7 7a00 	vldr	s15, [r7]
 80012d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	ed93 6a00 	vldr	s12, [r3]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80012e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80012f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	edd3 7a08 	vldr	s15, [r3, #32]
 8001306:	ee66 7a27 	vmul.f32	s15, s12, s15
 800130a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69da      	ldr	r2, [r3, #28]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	ee07 3a90 	vmov	s15, r3
}
 800132e:	eeb0 0a67 	vmov.f32	s0, s15
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	4613      	mov	r3, r2
 800134a:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	88fa      	ldrh	r2, [r7, #6]
 8001356:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3328      	adds	r3, #40	@ 0x28
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	68b9      	ldr	r1, [r7, #8]
 8001360:	4618      	mov	r0, r3
 8001362:	f002 faf1 	bl	8003948 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	683a      	ldr	r2, [r7, #0]
 800136a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	8b3a      	ldrh	r2, [r7, #24]
 8001370:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001390:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15f      	bne.n	800145e <MDXX_set_range+0xda>
		if (duty == 0) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d115      	bne.n	80013d8 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3310      	adds	r3, #16
 80013b0:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001530 <MDXX_set_range+0x1ac>
 80013b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 fbed 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	3328      	adds	r3, #40	@ 0x28
 80013c2:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001530 <MDXX_set_range+0x1ac>
 80013c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fbe4 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = 0;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80013d6:	e0a6      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80013dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e4:	dd1a      	ble.n	800141c <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3310      	adds	r3, #16
 80013ea:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001530 <MDXX_set_range+0x1ac>
 80013ee:	ed97 0a02 	vldr	s0, [r7, #8]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f002 fbd0 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3328      	adds	r3, #40	@ 0x28
 80013fc:	edd7 0a01 	vldr	s1, [r7, #4]
 8001400:	ed97 0a02 	vldr	s0, [r7, #8]
 8001404:	4618      	mov	r0, r3
 8001406:	f002 fbc7 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = duty;
 800140a:	edd7 7a01 	vldr	s15, [r7, #4]
 800140e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001412:	ee17 2a90 	vmov	r2, s15
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800141a:	e084      	b.n	8001526 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	3310      	adds	r3, #16
 8001420:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001534 <MDXX_set_range+0x1b0>
 8001424:	ed97 0a02 	vldr	s0, [r7, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 fbb5 	bl	8003b98 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3328      	adds	r3, #40	@ 0x28
 8001432:	edd7 7a01 	vldr	s15, [r7, #4]
 8001436:	eef0 7ae7 	vabs.f32	s15, s15
 800143a:	eef0 0a67 	vmov.f32	s1, s15
 800143e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fba8 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001448:	edd7 7a01 	vldr	s15, [r7, #4]
 800144c:	eef0 7ae7 	vabs.f32	s15, s15
 8001450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001454:	ee17 2a90 	vmov	r2, s15
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800145c:	e063      	b.n	8001526 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001464:	2b01      	cmp	r3, #1
 8001466:	d15e      	bne.n	8001526 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001474:	d115      	bne.n	80014a2 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001480:	2200      	movs	r2, #0
 8001482:	4619      	mov	r1, r3
 8001484:	f00b fdd4 	bl	800d030 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3328      	adds	r3, #40	@ 0x28
 800148c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001530 <MDXX_set_range+0x1ac>
 8001490:	ed97 0a02 	vldr	s0, [r7, #8]
 8001494:	4618      	mov	r0, r3
 8001496:	f002 fb7f 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = 0;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014a0:	e041      	b.n	8001526 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80014a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd1a      	ble.n	80014e6 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f00b fdb7 	bl	800d030 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	3328      	adds	r3, #40	@ 0x28
 80014c6:	edd7 0a01 	vldr	s1, [r7, #4]
 80014ca:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 fb62 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = duty;
 80014d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80014d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014dc:	ee17 2a90 	vmov	r2, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80014e4:	e01f      	b.n	8001526 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80014f0:	2201      	movs	r2, #1
 80014f2:	4619      	mov	r1, r3
 80014f4:	f00b fd9c 	bl	800d030 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3328      	adds	r3, #40	@ 0x28
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	eef0 7ae7 	vabs.f32	s15, s15
 8001504:	eef0 0a67 	vmov.f32	s1, s15
 8001508:	ed97 0a02 	vldr	s0, [r7, #8]
 800150c:	4618      	mov	r0, r3
 800150e:	f002 fb43 	bl	8003b98 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001512:	edd7 7a01 	vldr	s15, [r7, #4]
 8001516:	eef0 7ae7 	vabs.f32	s15, s15
 800151a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151e:	ee17 2a90 	vmov	r2, s15
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001526:	bf00      	nop
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	00000000 	.word	0x00000000
 8001534:	42c80000 	.word	0x42c80000

08001538 <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	ed2d 8b02 	vpush	{d8}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001574:	f7ff f80c 	bl	8000590 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4614      	mov	r4, r2
 800157e:	461d      	mov	r5, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001590:	f7fe fffe 	bl	8000590 <__aeabi_dmul>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4620      	mov	r0, r4
 800159a:	4629      	mov	r1, r5
 800159c:	f7fe fe42 	bl	8000224 <__adddf3>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	4610      	mov	r0, r2
 80015a6:	4619      	mov	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80015b0:	f7ff f918 	bl	80007e4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff faca 	bl	8000b54 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 80015c4:	ed97 7a00 	vldr	s14, [r7]
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d0:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	f7ff fab8 	bl	8000b54 <__aeabi_d2f>
 80015e4:	4603      	mov	r3, r0
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eeb1 8a67 	vneg.f32	s16, s15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff faab 	bl	8000b54 <__aeabi_d2f>
 80015fe:	4604      	mov	r4, r0
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f7ff faa2 	bl	8000b54 <__aeabi_d2f>
 8001610:	4603      	mov	r3, r0
 8001612:	ee07 3a90 	vmov	s15, r3
 8001616:	eef1 8a67 	vneg.f32	s17, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fa95 	bl	8000b54 <__aeabi_d2f>
 800162a:	4603      	mov	r3, r0
 800162c:	ee02 3a10 	vmov	s4, r3
 8001630:	eef0 1a68 	vmov.f32	s3, s17
 8001634:	ee01 4a10 	vmov	s2, r4
 8001638:	eef0 0a48 	vmov.f32	s1, s16
 800163c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001640:	f000 fbef 	bl	8001e22 <mapf>
 8001644:	eef0 7a40 	vmov.f32	s15, s0
}
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	ecbd 8b02 	vpop	{d8}
 8001654:	bdb0      	pop	{r4, r5, r7, pc}

08001656 <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001656:	b480      	push	{r7}
 8001658:	b085      	sub	sp, #20
 800165a:	af00      	add	r7, sp, #0
 800165c:	60f8      	str	r0, [r7, #12]
 800165e:	60b9      	str	r1, [r7, #8]
 8001660:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	68ba      	ldr	r2, [r7, #8]
 8001666:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	605a      	str	r2, [r3, #4]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 800167a:	b5b0      	push	{r4, r5, r7, lr}
 800167c:	ed2d 8b02 	vpush	{d8}
 8001680:	b088      	sub	sp, #32
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	ed87 0a02 	vstr	s0, [r7, #8]
 800168a:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	ed93 7a01 	vldr	s14, [r3, #4]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	edd3 7a00 	vldr	s15, [r3]
 800169e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a2:	ee17 0a90 	vmov	r0, s15
 80016a6:	f7fe ff1b 	bl	80004e0 <__aeabi_f2d>
 80016aa:	4604      	mov	r4, r0
 80016ac:	460d      	mov	r5, r1
 80016ae:	68b8      	ldr	r0, [r7, #8]
 80016b0:	f7fe ff16 	bl	80004e0 <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	ec43 2b10 	vmov	d0, r2, r3
 80016bc:	f011 fb7c 	bl	8012db8 <sin>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4620      	mov	r0, r4
 80016c6:	4629      	mov	r1, r5
 80016c8:	f7fe ff62 	bl	8000590 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4614      	mov	r4, r2
 80016d2:	461d      	mov	r5, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80016dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	ee17 0a90 	vmov	r0, s15
 80016e8:	f7fe fefa 	bl	80004e0 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4620      	mov	r0, r4
 80016f2:	4629      	mov	r1, r5
 80016f4:	f7fe ff4c 	bl	8000590 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa28 	bl	8000b54 <__aeabi_d2f>
 8001704:	4603      	mov	r3, r0
 8001706:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	edd3 7a00 	vldr	s15, [r3]
 8001718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800171c:	ee17 0a90 	vmov	r0, s15
 8001720:	f7fe fede 	bl	80004e0 <__aeabi_f2d>
 8001724:	4604      	mov	r4, r0
 8001726:	460d      	mov	r5, r1
 8001728:	68b8      	ldr	r0, [r7, #8]
 800172a:	f7fe fed9 	bl	80004e0 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	ec43 2b10 	vmov	d0, r2, r3
 8001736:	f011 fb3f 	bl	8012db8 <sin>
 800173a:	ec53 2b10 	vmov	r2, r3, d0
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7fe ff25 	bl	8000590 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4614      	mov	r4, r2
 800174c:	461d      	mov	r5, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fec3 	bl	80004e0 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7fe ff15 	bl	8000590 <__aeabi_dmul>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f9f1 	bl	8000b54 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001786:	f7ff f82d 	bl	80007e4 <__aeabi_ddiv>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	4610      	mov	r0, r2
 8001790:	4619      	mov	r1, r3
 8001792:	f7ff f9df 	bl	8000b54 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 800179a:	ed97 7a07 	vldr	s14, [r7, #28]
 800179e:	edd7 7a06 	vldr	s15, [r7, #24]
 80017a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff f9c9 	bl	8000b54 <__aeabi_d2f>
 80017c2:	4603      	mov	r3, r0
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eeb1 8a67 	vneg.f32	s16, s15
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff f9bc 	bl	8000b54 <__aeabi_d2f>
 80017dc:	4604      	mov	r4, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80017e6:	4610      	mov	r0, r2
 80017e8:	4619      	mov	r1, r3
 80017ea:	f7ff f9b3 	bl	8000b54 <__aeabi_d2f>
 80017ee:	4603      	mov	r3, r0
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eef1 8a67 	vneg.f32	s17, s15
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff f9a6 	bl	8000b54 <__aeabi_d2f>
 8001808:	4603      	mov	r3, r0
 800180a:	ee02 3a10 	vmov	s4, r3
 800180e:	eef0 1a68 	vmov.f32	s3, s17
 8001812:	ee01 4a10 	vmov	s2, r4
 8001816:	eef0 0a48 	vmov.f32	s1, s16
 800181a:	ed97 0a04 	vldr	s0, [r7, #16]
 800181e:	f000 fb00 	bl	8001e22 <mapf>
 8001822:	eef0 7a40 	vmov.f32	s15, s0
}
 8001826:	eeb0 0a67 	vmov.f32	s0, s15
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	ecbd 8b02 	vpop	{d8}
 8001832:	bdb0      	pop	{r4, r5, r7, pc}

08001834 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	601a      	str	r2, [r3, #0]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <PRISMATIC_MOTOR_FFD_Compute>:

float PRISMATIC_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float sd) {
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	ed2d 8b02 	vpush	{d8}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R  + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001870:	f7fe fe8e 	bl	8000590 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800188c:	f7fe fe80 	bl	8000590 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fcc4 	bl	8000224 <__adddf3>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4610      	mov	r0, r2
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ac:	f7fe ff9a 	bl	80007e4 <__aeabi_ddiv>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4610      	mov	r0, r2
 80018b6:	4619      	mov	r1, r3
 80018b8:	f7ff f94c 	bl	8000b54 <__aeabi_d2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]

    float v = sd * transfer_function;
 80018c0:	ed97 7a00 	vldr	s14, [r7]
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f7fe fe05 	bl	80004e0 <__aeabi_f2d>
 80018d6:	a326      	add	r3, pc, #152	@ (adr r3, 8001970 <PRISMATIC_MOTOR_FFD_Compute+0x120>)
 80018d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018dc:	f7fe fe58 	bl	8000590 <__aeabi_dmul>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	f7ff f934 	bl	8000b54 <__aeabi_d2f>
 80018ec:	4604      	mov	r4, r0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f92b 	bl	8000b54 <__aeabi_d2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb1 8a67 	vneg.f32	s16, s15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001910:	4610      	mov	r0, r2
 8001912:	4619      	mov	r1, r3
 8001914:	f7ff f91e 	bl	8000b54 <__aeabi_d2f>
 8001918:	4605      	mov	r5, r0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001922:	4610      	mov	r0, r2
 8001924:	4619      	mov	r1, r3
 8001926:	f7ff f915 	bl	8000b54 <__aeabi_d2f>
 800192a:	4603      	mov	r3, r0
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef1 8a67 	vneg.f32	s17, s15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f908 	bl	8000b54 <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0
 8001946:	ee02 3a10 	vmov	s4, r3
 800194a:	eef0 1a68 	vmov.f32	s3, s17
 800194e:	ee01 5a10 	vmov	s2, r5
 8001952:	eef0 0a48 	vmov.f32	s1, s16
 8001956:	ee00 4a10 	vmov	s0, r4
 800195a:	f000 fa62 	bl	8001e22 <mapf>
 800195e:	eef0 7a40 	vmov.f32	s15, s0
}
 8001962:	eeb0 0a67 	vmov.f32	s0, s15
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	ecbd 8b02 	vpop	{d8}
 800196e:	bdb0      	pop	{r4, r5, r7, pc}
 8001970:	9999999a 	.word	0x9999999a
 8001974:	3fb99999 	.word	0x3fb99999

08001978 <PRISMATIC_MOTOR_DFD_Init>:

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	605a      	str	r2, [r3, #4]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	0000      	movs	r0, r0
	...

080019a0 <PRISMATIC_MOTOR_DFD_Compute>:

float PRISMATIC_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float qd, float s){
 80019a0:	b5b0      	push	{r4, r5, r7, lr}
 80019a2:	ed2d 8b02 	vpush	{d8}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	ed87 0a02 	vstr	s0, [r7, #8]
 80019b0:	edc7 0a01 	vstr	s1, [r7, #4]
 80019b4:	ed87 1a00 	vstr	s2, [r7]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * cos(q);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	edd3 7a00 	vldr	s15, [r3]
 80019c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019cc:	ee17 0a90 	vmov	r0, s15
 80019d0:	f7fe fd86 	bl	80004e0 <__aeabi_f2d>
 80019d4:	4604      	mov	r4, r0
 80019d6:	460d      	mov	r5, r1
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f7fe fd81 	bl	80004e0 <__aeabi_f2d>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	ec43 2b10 	vmov	d0, r2, r3
 80019e6:	f011 f993 	bl	8012d10 <cos>
 80019ea:	ec53 2b10 	vmov	r2, r3, d0
 80019ee:	4620      	mov	r0, r4
 80019f0:	4629      	mov	r1, r5
 80019f2:	f7fe fdcd 	bl	8000590 <__aeabi_dmul>
 80019f6:	4602      	mov	r2, r0
 80019f8:	460b      	mov	r3, r1
 80019fa:	4610      	mov	r0, r2
 80019fc:	4619      	mov	r1, r3
 80019fe:	f7ff f8a9 	bl	8000b54 <__aeabi_d2f>
 8001a02:	4603      	mov	r3, r0
 8001a04:	61fb      	str	r3, [r7, #28]

    float centrifugal_force = motor->En->plotter_mass * qd * qd * s;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1e:	ed97 7a00 	vldr	s14, [r7]
 8001a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a26:	edc7 7a06 	vstr	s15, [r7, #24]

    float transfer_function = (motor->Mx->R * motor->En->prismatic_pulley_radius) / motor->Mx->Kt;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd51 	bl	80004e0 <__aeabi_f2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7fe fda3 	bl	8000590 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a5a:	f7fe fec3 	bl	80007e4 <__aeabi_ddiv>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f7ff f875 	bl	8000b54 <__aeabi_d2f>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter + centrifugal_force) * transfer_function;
 8001a6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a82:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v * 0.1, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001a86:	6938      	ldr	r0, [r7, #16]
 8001a88:	f7fe fd2a 	bl	80004e0 <__aeabi_f2d>
 8001a8c:	a326      	add	r3, pc, #152	@ (adr r3, 8001b28 <PRISMATIC_MOTOR_DFD_Compute+0x188>)
 8001a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a92:	f7fe fd7d 	bl	8000590 <__aeabi_dmul>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff f859 	bl	8000b54 <__aeabi_d2f>
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f850 	bl	8000b54 <__aeabi_d2f>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	ee07 3a90 	vmov	s15, r3
 8001aba:	eeb1 8a67 	vneg.f32	s16, s15
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ac6:	4610      	mov	r0, r2
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f7ff f843 	bl	8000b54 <__aeabi_d2f>
 8001ace:	4605      	mov	r5, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff f83a 	bl	8000b54 <__aeabi_d2f>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef1 8a67 	vneg.f32	s17, s15
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001af2:	4610      	mov	r0, r2
 8001af4:	4619      	mov	r1, r3
 8001af6:	f7ff f82d 	bl	8000b54 <__aeabi_d2f>
 8001afa:	4603      	mov	r3, r0
 8001afc:	ee02 3a10 	vmov	s4, r3
 8001b00:	eef0 1a68 	vmov.f32	s3, s17
 8001b04:	ee01 5a10 	vmov	s2, r5
 8001b08:	eef0 0a48 	vmov.f32	s1, s16
 8001b0c:	ee00 4a10 	vmov	s0, r4
 8001b10:	f000 f987 	bl	8001e22 <mapf>
 8001b14:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b18:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1c:	3720      	adds	r7, #32
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	ecbd 8b02 	vpop	{d8}
 8001b24:	bdb0      	pop	{r4, r5, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	9999999a 	.word	0x9999999a
 8001b2c:	3fb99999 	.word	0x3fb99999

08001b30 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	ed2d 8b02 	vpush	{d8}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b42:	edc7 0a00 	vstr	s1, [r7]
 8001b46:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 8001b48:	897b      	ldrh	r3, [r7, #10]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d102      	bne.n	8001b5a <FIR_init+0x2a>
        numTaps += 1;
 8001b54:	897b      	ldrh	r3, [r7, #10]
 8001b56:	3301      	adds	r3, #1
 8001b58:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	897a      	ldrh	r2, [r7, #10]
 8001b5e:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f010 ffc8 	bl	8012b00 <malloc>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001b78:	897b      	ldrh	r3, [r7, #10]
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f010 ffbf 	bl	8012b00 <malloc>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f000 80e0 	beq.w	8001d54 <FIR_init+0x224>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	f000 80db 	beq.w	8001d54 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001ba2:	e00a      	b.n	8001bba <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4413      	add	r3, r2
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001bb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001bba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001bbc:	897b      	ldrh	r3, [r7, #10]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3f0      	bcc.n	8001ba4 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 8001bc2:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bc6:	ed97 7a00 	vldr	s14, [r7]
 8001bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bce:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 8001bd2:	897b      	ldrh	r3, [r7, #10]
 8001bd4:	085b      	lsrs	r3, r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001bda:	2300      	movs	r3, #0
 8001bdc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001bde:	e077      	b.n	8001cd0 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001be0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001be4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d10c      	bne.n	8001c06 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c00:	edc3 7a00 	vstr	s15, [r3]
 8001c04:	e02c      	b.n	8001c60 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001c06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c08:	8afb      	ldrh	r3, [r7, #22]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001c10:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c14:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001d60 <FIR_init+0x230>
 8001c18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c1c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c20:	ee07 3a90 	vmov	s15, r3
 8001c24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c30:	f011 f998 	bl	8012f64 <sinf>
 8001c34:	eef0 6a40 	vmov.f32	s13, s0
 8001c38:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c44:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001d64 <FIR_init+0x234>
 8001c48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c5c:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	ed93 8a00 	vldr	s16, [r3]
 8001c70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001c74:	ee07 3a90 	vmov	s15, r3
 8001c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001d60 <FIR_init+0x230>
 8001c80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c84:	897b      	ldrh	r3, [r7, #10]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001c94:	eeb0 0a66 	vmov.f32	s0, s13
 8001c98:	f011 f920 	bl	8012edc <cosf>
 8001c9c:	eef0 7a40 	vmov.f32	s15, s0
 8001ca0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001d68 <FIR_init+0x238>
 8001ca4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca8:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001d6c <FIR_init+0x23c>
 8001cac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cc0:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001cc4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001cd0:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001cd4:	897b      	ldrh	r3, [r7, #10]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	db82      	blt.n	8001be0 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	83fb      	strh	r3, [r7, #30]
 8001ce4:	e00f      	b.n	8001d06 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	8bfb      	ldrh	r3, [r7, #30]
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	4413      	add	r3, r2
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfc:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001d00:	8bfb      	ldrh	r3, [r7, #30]
 8001d02:	3301      	adds	r3, #1
 8001d04:	83fb      	strh	r3, [r7, #30]
 8001d06:	8bfa      	ldrh	r2, [r7, #30]
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d3eb      	bcc.n	8001ce6 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001d0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d01b      	beq.n	8001d54 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	83bb      	strh	r3, [r7, #28]
 8001d20:	e014      	b.n	8001d4c <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	8bbb      	ldrh	r3, [r7, #28]
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	edd3 6a00 	vldr	s13, [r3]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	8bbb      	ldrh	r3, [r7, #28]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d42:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 8001d46:	8bbb      	ldrh	r3, [r7, #28]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	83bb      	strh	r3, [r7, #28]
 8001d4c:	8bba      	ldrh	r2, [r7, #28]
 8001d4e:	897b      	ldrh	r3, [r7, #10]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d3e6      	bcc.n	8001d22 <FIR_init+0x1f2>
            }
        }
    }
}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	@ 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	ecbd 8b02 	vpop	{d8}
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40c90fdb 	.word	0x40c90fdb
 8001d64:	40490fdb 	.word	0x40490fdb
 8001d68:	3eeb851f 	.word	0x3eeb851f
 8001d6c:	3f0a3d71 	.word	0x3f0a3d71

08001d70 <FIR_process>:

float FIR_process(FIR *fir, float input) {
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685a      	ldr	r2, [r3, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	895b      	ldrh	r3, [r3, #10]
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001d8c:	f04f 0300 	mov.w	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	895b      	ldrh	r3, [r3, #10]
 8001d96:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001d98:	2300      	movs	r3, #0
 8001d9a:	813b      	strh	r3, [r7, #8]
 8001d9c:	e023      	b.n	8001de6 <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	897b      	ldrh	r3, [r7, #10]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	ed93 7a00 	vldr	s14, [r3]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dbe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc6:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001dca:	897b      	ldrh	r3, [r7, #10]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d104      	bne.n	8001dda <FIR_process+0x6a>
            index = fir->numTaps - 1;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	891b      	ldrh	r3, [r3, #8]
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	817b      	strh	r3, [r7, #10]
 8001dd8:	e002      	b.n	8001de0 <FIR_process+0x70>
        } else {
            index--;
 8001dda:	897b      	ldrh	r3, [r7, #10]
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001de0:	893b      	ldrh	r3, [r7, #8]
 8001de2:	3301      	adds	r3, #1
 8001de4:	813b      	strh	r3, [r7, #8]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	891b      	ldrh	r3, [r3, #8]
 8001dea:	893a      	ldrh	r2, [r7, #8]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d3d6      	bcc.n	8001d9e <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	895b      	ldrh	r3, [r3, #10]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	895a      	ldrh	r2, [r3, #10]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	891b      	ldrh	r3, [r3, #8]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d302      	bcc.n	8001e0e <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	815a      	strh	r2, [r3, #10]
    }

    return output;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	ee07 3a90 	vmov	s15, r3
}
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 8001e22:	b480      	push	{r7}
 8001e24:	b089      	sub	sp, #36	@ 0x24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	ed87 0a05 	vstr	s0, [r7, #20]
 8001e2c:	edc7 0a04 	vstr	s1, [r7, #16]
 8001e30:	ed87 1a03 	vstr	s2, [r7, #12]
 8001e34:	edc7 1a02 	vstr	s3, [r7, #8]
 8001e38:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001e3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e44:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e48:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e58:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001e5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001e60:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e68:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e70:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e78:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	ee07 3a90 	vmov	s15, r3
}
 8001e82:	eeb0 0a67 	vmov.f32	s0, s15
 8001e86:	3724      	adds	r7, #36	@ 0x24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001e94:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001ea8:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <modbus_1t5_Timeout+0x3c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0201 	orr.w	r2, r2, #1
 8001ebe:	601a      	str	r2, [r3, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	2000062c 	.word	0x2000062c

08001ed0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001ed8:	4b04      	ldr	r3, [pc, #16]	@ (8001eec <modbus_3t5_Timeout+0x1c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	755a      	strb	r2, [r3, #21]

}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	2000062c 	.word	0x2000062c

08001ef0 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f00e ffe7 	bl	8010ecc <HAL_UART_GetError>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b20      	cmp	r3, #32
 8001f02:	d101      	bne.n	8001f08 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001f04:	f7ff ffc4 	bl	8001e90 <modbus_1t5_Timeout>

	}
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001f1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001f24:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001f2c:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001f34:	4b27      	ldr	r3, [pc, #156]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001f3c:	4b25      	ldr	r3, [pc, #148]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	7e3a      	ldrb	r2, [r7, #24]
 8001f42:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001f44:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	4a21      	ldr	r2, [pc, #132]	@ (8001fd8 <Modbus_init+0xc8>)
 8001f52:	210e      	movs	r1, #14
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00d f9dd 	bl	800f314 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2110      	movs	r1, #16
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00e ff5d 	bl	8010e20 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f00e ff74 	bl	8010e58 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a19      	ldr	r2, [pc, #100]	@ (8001fdc <Modbus_init+0xcc>)
 8001f76:	2104      	movs	r1, #4
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f00e fa1b 	bl	80103b4 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b12      	ldr	r3, [pc, #72]	@ (8001fd4 <Modbus_init+0xc4>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001f90:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001f94:	4413      	add	r3, r2
 8001f96:	3302      	adds	r3, #2
 8001f98:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f00e fb43 	bl	8010628 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10c      	bne.n	8001fcc <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001fb2:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f00c f987 	bl	800e2cc <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001fbe:	4b05      	ldr	r3, [pc, #20]	@ (8001fd4 <Modbus_init+0xc4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f00c fbd6 	bl	800e778 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000062c 	.word	0x2000062c
 8001fd8:	08001ed1 	.word	0x08001ed1
 8001fdc:	08001ef1 	.word	0x08001ef1

08001fe0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b085      	sub	sp, #20
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001fec:	23ff      	movs	r3, #255	@ 0xff
 8001fee:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001ff0:	23ff      	movs	r3, #255	@ 0xff
 8001ff2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001ff4:	e013      	b.n	800201e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	7bbb      	ldrb	r3, [r7, #14]
 8002000:	4053      	eors	r3, r2
 8002002:	b2db      	uxtb	r3, r3
 8002004:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <CRC16+0x68>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	4413      	add	r3, r2
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	4053      	eors	r3, r2
 8002012:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <CRC16+0x6c>)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4413      	add	r3, r2
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800201e:	883b      	ldrh	r3, [r7, #0]
 8002020:	1e5a      	subs	r2, r3, #1
 8002022:	803a      	strh	r2, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1e6      	bne.n	8001ff6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8002028:	7bfb      	ldrb	r3, [r7, #15]
 800202a:	b21b      	sxth	r3, r3
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b21a      	sxth	r2, r3
 8002030:	7bbb      	ldrb	r3, [r7, #14]
 8002032:	b21b      	sxth	r3, r3
 8002034:	4313      	orrs	r3, r2
 8002036:	b21b      	sxth	r3, r3
 8002038:	b29b      	uxth	r3, r3
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	20000218 	.word	0x20000218
 800204c:	20000118 	.word	0x20000118

08002050 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8002056:	4b7e      	ldr	r3, [pc, #504]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	7ddb      	ldrb	r3, [r3, #23]
 800205c:	3b01      	subs	r3, #1
 800205e:	2b03      	cmp	r3, #3
 8002060:	d80a      	bhi.n	8002078 <Modbus_Protocal_Worker+0x28>
 8002062:	a201      	add	r2, pc, #4	@ (adr r2, 8002068 <Modbus_Protocal_Worker+0x18>)
 8002064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002068:	08002083 	.word	0x08002083
 800206c:	08002217 	.word	0x08002217
 8002070:	0800210f 	.word	0x0800210f
 8002074:	08002153 	.word	0x08002153
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8002078:	4b75      	ldr	r3, [pc, #468]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2201      	movs	r2, #1
 800207e:	75da      	strb	r2, [r3, #23]
		break;
 8002080:	e0e1      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8002082:	4b73      	ldr	r3, [pc, #460]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800208a:	2b00      	cmp	r3, #0
 800208c:	d006      	beq.n	800209c <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800208e:	4b70      	ldr	r3, [pc, #448]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2202      	movs	r2, #2
 8002094:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8002096:	f000 f9cd 	bl	8002434 <Modbus_Emission>
 800209a:	e018      	b.n	80020ce <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 800209c:	4b6c      	ldr	r3, [pc, #432]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80020a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d00b      	beq.n	80020ce <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80020b6:	4b66      	ldr	r3, [pc, #408]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80020be:	4b64      	ldr	r3, [pc, #400]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2200      	movs	r2, #0
 80020c4:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80020c6:	4b62      	ldr	r3, [pc, #392]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2203      	movs	r2, #3
 80020cc:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80020ce:	4b60      	ldr	r3, [pc, #384]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020d8:	2b20      	cmp	r3, #32
 80020da:	f040 80ad 	bne.w	8002238 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80020de:	4b5c      	ldr	r3, [pc, #368]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80020e8:	4b59      	ldr	r3, [pc, #356]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80020ee:	4b58      	ldr	r3, [pc, #352]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b57      	ldr	r3, [pc, #348]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80020fa:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80020fe:	4413      	add	r3, r2
 8002100:	3302      	adds	r3, #2
 8002102:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002106:	4619      	mov	r1, r3
 8002108:	f00e fa8e 	bl	8010628 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800210c:	e094      	b.n	8002238 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800210e:	4b50      	ldr	r3, [pc, #320]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	7d1b      	ldrb	r3, [r3, #20]
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 8091 	beq.w	800223c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800211a:	4b4d      	ldr	r3, [pc, #308]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	22fe      	movs	r2, #254	@ 0xfe
 8002120:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002122:	4b4b      	ldr	r3, [pc, #300]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800212c:	4b48      	ldr	r3, [pc, #288]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800213c:	4b44      	ldr	r3, [pc, #272]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800213e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8002140:	1a8a      	subs	r2, r1, r2
 8002142:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8002144:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8002148:	4b41      	ldr	r3, [pc, #260]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2204      	movs	r2, #4
 800214e:	75da      	strb	r2, [r3, #23]
		}
		break;
 8002150:	e074      	b.n	800223c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8002152:	4b3f      	ldr	r3, [pc, #252]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f993 3016 	ldrsb.w	r3, [r3, #22]
 800215a:	f113 0f02 	cmn.w	r3, #2
 800215e:	d150      	bne.n	8002202 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8002160:	4b3b      	ldr	r3, [pc, #236]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8002168:	4b39      	ldr	r3, [pc, #228]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f203 2272 	addw	r2, r3, #626	@ 0x272
 8002170:	4b37      	ldr	r3, [pc, #220]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002178:	3b02      	subs	r3, #2
 800217a:	4619      	mov	r1, r3
 800217c:	4610      	mov	r0, r2
 800217e:	f7ff ff2f 	bl	8001fe0 <CRC16>
 8002182:	4603      	mov	r3, r0
 8002184:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8002186:	793a      	ldrb	r2, [r7, #4]
 8002188:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	4b30      	ldr	r3, [pc, #192]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8002194:	3b02      	subs	r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 800219c:	429a      	cmp	r2, r3
 800219e:	d10c      	bne.n	80021ba <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80021a0:	797a      	ldrb	r2, [r7, #5]
 80021a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021a4:	6819      	ldr	r1, [r3, #0]
 80021a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021ae:	3b01      	subs	r3, #1
 80021b0:	440b      	add	r3, r1
 80021b2:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d004      	beq.n	80021c4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80021ba:	4b25      	ldr	r3, [pc, #148]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	22ff      	movs	r2, #255	@ 0xff
 80021c0:	759a      	strb	r2, [r3, #22]
				break;
 80021c2:	e040      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80021c4:	4b22      	ldr	r3, [pc, #136]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80021cc:	4b20      	ldr	r3, [pc, #128]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d113      	bne.n	80021fe <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80021d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80021de:	4b1c      	ldr	r3, [pc, #112]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80021e6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80021e8:	4b19      	ldr	r3, [pc, #100]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80021f0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80021f2:	461a      	mov	r2, r3
 80021f4:	f010 fd7e 	bl	8012cf4 <memcpy>

			//execute command
			Modbus_frame_response();
 80021f8:	f000 f904 	bl	8002404 <Modbus_frame_response>
 80021fc:	e001      	b.n	8002202 <Modbus_Protocal_Worker+0x1b2>
				break;
 80021fe:	bf00      	nop
					}
		break;


	}
}
 8002200:	e021      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8002202:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	7d5b      	ldrb	r3, [r3, #21]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d019      	beq.n	8002240 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800220c:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	75da      	strb	r2, [r3, #23]
		break;
 8002214:	e014      	b.n	8002240 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002220:	2b20      	cmp	r3, #32
 8002222:	d10f      	bne.n	8002244 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8002224:	4b0a      	ldr	r3, [pc, #40]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800222e:	4b08      	ldr	r3, [pc, #32]	@ (8002250 <Modbus_Protocal_Worker+0x200>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2201      	movs	r2, #1
 8002234:	75da      	strb	r2, [r3, #23]
		break;
 8002236:	e005      	b.n	8002244 <Modbus_Protocal_Worker+0x1f4>
		break;
 8002238:	bf00      	nop
 800223a:	e004      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 800223c:	bf00      	nop
 800223e:	e002      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002240:	bf00      	nop
 8002242:	e000      	b.n	8002246 <Modbus_Protocal_Worker+0x1f6>
		break;
 8002244:	bf00      	nop
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	2000062c 	.word	0x2000062c

08002254 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 800225a:	4b1d      	ldr	r3, [pc, #116]	@ (80022d0 <modbusWrite1Register+0x7c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	7e5b      	ldrb	r3, [r3, #25]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b29b      	uxth	r3, r3
 8002264:	4a1a      	ldr	r2, [pc, #104]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	7e92      	ldrb	r2, [r2, #26]
 800226a:	4413      	add	r3, r2
 800226c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	4b17      	ldr	r3, [pc, #92]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	429a      	cmp	r2, r3
 8002278:	d903      	bls.n	8002282 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800227a:	2002      	movs	r0, #2
 800227c:	f000 f8a0 	bl	80023c0 <ModbusErrorReply>
			 return;
 8002280:	e023      	b.n	80022ca <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8002282:	4b13      	ldr	r3, [pc, #76]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b12      	ldr	r3, [pc, #72]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6859      	ldr	r1, [r3, #4]
 800228c:	88fb      	ldrh	r3, [r7, #6]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	440b      	add	r3, r1
 8002292:	7ed2      	ldrb	r2, [r2, #27]
 8002294:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8002296:	4b0e      	ldr	r3, [pc, #56]	@ (80022d0 <modbusWrite1Register+0x7c>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	4b0d      	ldr	r3, [pc, #52]	@ (80022d0 <modbusWrite1Register+0x7c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6859      	ldr	r1, [r3, #4]
 80022a0:	88fb      	ldrh	r3, [r7, #6]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	440b      	add	r3, r1
 80022a6:	7f12      	ldrb	r2, [r2, #28]
 80022a8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80022aa:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80022b2:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80022b8:	2208      	movs	r2, #8
 80022ba:	4619      	mov	r1, r3
 80022bc:	f010 fd1a 	bl	8012cf4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <modbusWrite1Register+0x7c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2205      	movs	r2, #5
 80022c6:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	2000062c 	.word	0x2000062c

080022d4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80022da:	4b38      	ldr	r3, [pc, #224]	@ (80023bc <modbusRead1Register+0xe8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	7edb      	ldrb	r3, [r3, #27]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4a35      	ldr	r2, [pc, #212]	@ (80023bc <modbusRead1Register+0xe8>)
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	7f12      	ldrb	r2, [r2, #28]
 80022ea:	4413      	add	r3, r2
 80022ec:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80022ee:	4b33      	ldr	r3, [pc, #204]	@ (80023bc <modbusRead1Register+0xe8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	7e5b      	ldrb	r3, [r3, #25]
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	4a30      	ldr	r2, [pc, #192]	@ (80023bc <modbusRead1Register+0xe8>)
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	7e92      	ldrb	r2, [r2, #26]
 80022fe:	4413      	add	r3, r2
 8002300:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8002302:	88fb      	ldrh	r3, [r7, #6]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d002      	beq.n	800230e <modbusRead1Register+0x3a>
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	2b7d      	cmp	r3, #125	@ 0x7d
 800230c:	d903      	bls.n	8002316 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800230e:	2003      	movs	r0, #3
 8002310:	f000 f856 	bl	80023c0 <ModbusErrorReply>
		 return;
 8002314:	e04e      	b.n	80023b4 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8002316:	88ba      	ldrh	r2, [r7, #4]
 8002318:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <modbusRead1Register+0xe8>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	429a      	cmp	r2, r3
 8002320:	d808      	bhi.n	8002334 <modbusRead1Register+0x60>
 8002322:	88ba      	ldrh	r2, [r7, #4]
 8002324:	88fb      	ldrh	r3, [r7, #6]
 8002326:	4413      	add	r3, r2
 8002328:	461a      	mov	r2, r3
 800232a:	4b24      	ldr	r3, [pc, #144]	@ (80023bc <modbusRead1Register+0xe8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	429a      	cmp	r2, r3
 8002332:	d903      	bls.n	800233c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8002334:	2002      	movs	r0, #2
 8002336:	f000 f843 	bl	80023c0 <ModbusErrorReply>
		 return;
 800233a:	e03b      	b.n	80023b4 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800233c:	4b1f      	ldr	r3, [pc, #124]	@ (80023bc <modbusRead1Register+0xe8>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <modbusRead1Register+0xe8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0052      	lsls	r2, r2, #1
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8002356:	2400      	movs	r4, #0
 8002358:	e020      	b.n	800239c <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 800235a:	4b18      	ldr	r3, [pc, #96]	@ (80023bc <modbusRead1Register+0xe8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	88bb      	ldrh	r3, [r7, #4]
 8002362:	4423      	add	r3, r4
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	18d1      	adds	r1, r2, r3
 8002368:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <modbusRead1Register+0xe8>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	1c63      	adds	r3, r4, #1
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	7849      	ldrb	r1, [r1, #1]
 8002372:	4413      	add	r3, r2
 8002374:	460a      	mov	r2, r1
 8002376:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 800237a:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <modbusRead1Register+0xe8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	88bb      	ldrh	r3, [r7, #4]
 8002382:	4423      	add	r3, r4
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	18d1      	adds	r1, r2, r3
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <modbusRead1Register+0xe8>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	0063      	lsls	r3, r4, #1
 800238e:	3303      	adds	r3, #3
 8002390:	7809      	ldrb	r1, [r1, #0]
 8002392:	4413      	add	r3, r2
 8002394:	460a      	mov	r2, r1
 8002396:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 800239a:	3401      	adds	r4, #1
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	429c      	cmp	r4, r3
 80023a0:	dbdb      	blt.n	800235a <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	3301      	adds	r3, #1
 80023a6:	b2da      	uxtb	r2, r3
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <modbusRead1Register+0xe8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0052      	lsls	r2, r2, #1
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80023b4:	370c      	adds	r7, #12
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd90      	pop	{r4, r7, pc}
 80023ba:	bf00      	nop
 80023bc:	2000062c 	.word	0x2000062c

080023c0 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80023ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002400 <ModbusErrorReply+0x40>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	7e1a      	ldrb	r2, [r3, #24]
 80023d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002400 <ModbusErrorReply+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80023de:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <ModbusErrorReply+0x40>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	79fa      	ldrb	r2, [r7, #7]
 80023e4:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <ModbusErrorReply+0x40>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	2000062c 	.word	0x2000062c

08002404 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8002408:	4b09      	ldr	r3, [pc, #36]	@ (8002430 <Modbus_frame_response+0x2c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	7e1b      	ldrb	r3, [r3, #24]
 800240e:	2b03      	cmp	r3, #3
 8002410:	d004      	beq.n	800241c <Modbus_frame_response+0x18>
 8002412:	2b06      	cmp	r3, #6
 8002414:	d105      	bne.n	8002422 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8002416:	f7ff ff1d 	bl	8002254 <modbusWrite1Register>
		break;
 800241a:	e006      	b.n	800242a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800241c:	f7ff ff5a 	bl	80022d4 <modbusRead1Register>
		break;
 8002420:	e003      	b.n	800242a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff ffcc 	bl	80023c0 <ModbusErrorReply>
		break;
 8002428:	bf00      	nop

	}
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	2000062c 	.word	0x2000062c

08002434 <Modbus_Emission>:

void Modbus_Emission()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800243a:	4b38      	ldr	r3, [pc, #224]	@ (800251c <Modbus_Emission+0xe8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002444:	2b20      	cmp	r3, #32
 8002446:	d15d      	bne.n	8002504 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8002448:	4b34      	ldr	r3, [pc, #208]	@ (800251c <Modbus_Emission+0xe8>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b33      	ldr	r3, [pc, #204]	@ (800251c <Modbus_Emission+0xe8>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	7812      	ldrb	r2, [r2, #0]
 8002452:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8002456:	4b31      	ldr	r3, [pc, #196]	@ (800251c <Modbus_Emission+0xe8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800245e:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8002460:	4b2e      	ldr	r3, [pc, #184]	@ (800251c <Modbus_Emission+0xe8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8002468:	4b2c      	ldr	r3, [pc, #176]	@ (800251c <Modbus_Emission+0xe8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8002470:	461a      	mov	r2, r3
 8002472:	f010 fc3f 	bl	8012cf4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8002476:	4b29      	ldr	r3, [pc, #164]	@ (800251c <Modbus_Emission+0xe8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800247e:	461a      	mov	r2, r3
 8002480:	4b26      	ldr	r3, [pc, #152]	@ (800251c <Modbus_Emission+0xe8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3203      	adds	r2, #3
 8002486:	b292      	uxth	r2, r2
 8002488:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800248c:	4b23      	ldr	r3, [pc, #140]	@ (800251c <Modbus_Emission+0xe8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8002494:	4b21      	ldr	r3, [pc, #132]	@ (800251c <Modbus_Emission+0xe8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800249c:	3b02      	subs	r3, #2
 800249e:	4619      	mov	r1, r3
 80024a0:	4610      	mov	r0, r2
 80024a2:	f7ff fd9d 	bl	8001fe0 <CRC16>
 80024a6:	4603      	mov	r3, r0
 80024a8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <Modbus_Emission+0xe8>)
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <Modbus_Emission+0xe8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024b6:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80024b8:	7939      	ldrb	r1, [r7, #4]
 80024ba:	4413      	add	r3, r2
 80024bc:	460a      	mov	r2, r1
 80024be:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80024c2:	4b16      	ldr	r3, [pc, #88]	@ (800251c <Modbus_Emission+0xe8>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <Modbus_Emission+0xe8>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024ce:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80024d0:	7979      	ldrb	r1, [r7, #5]
 80024d2:	4413      	add	r3, r2
 80024d4:	460a      	mov	r2, r1
 80024d6:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80024da:	4b10      	ldr	r3, [pc, #64]	@ (800251c <Modbus_Emission+0xe8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d10d      	bne.n	8002504 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <Modbus_Emission+0xe8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80024ee:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <Modbus_Emission+0xe8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80024f6:	4b09      	ldr	r3, [pc, #36]	@ (800251c <Modbus_Emission+0xe8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80024fa:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80024fe:	461a      	mov	r2, r3
 8002500:	f00e f812 	bl	8010528 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8002504:	4b05      	ldr	r3, [pc, #20]	@ (800251c <Modbus_Emission+0xe8>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2200      	movs	r2, #0
 800250a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800250c:	4b03      	ldr	r3, [pc, #12]	@ (800251c <Modbus_Emission+0xe8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2200      	movs	r2, #0
 8002512:	755a      	strb	r2, [r3, #21]

}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	2000062c 	.word	0x2000062c

08002520 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b08c      	sub	sp, #48	@ 0x30
 8002524:	af00      	add	r7, sp, #0
 8002526:	6278      	str	r0, [r7, #36]	@ 0x24
 8002528:	ed87 0a08 	vstr	s0, [r7, #32]
 800252c:	edc7 0a07 	vstr	s1, [r7, #28]
 8002530:	ed87 1a06 	vstr	s2, [r7, #24]
 8002534:	edc7 1a05 	vstr	s3, [r7, #20]
 8002538:	ed87 2a04 	vstr	s4, [r7, #16]
 800253c:	edc7 2a03 	vstr	s5, [r7, #12]
 8002540:	ed87 3a02 	vstr	s6, [r7, #8]
 8002544:	edc7 3a01 	vstr	s7, [r7, #4]
 8002548:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 800254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254e:	6a3a      	ldr	r2, [r7, #32]
 8002550:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	69fa      	ldr	r2, [r7, #28]
 8002558:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 800255c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	2210      	movs	r2, #16
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f010 fb6e 	bl	8012c6c <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	3310      	adds	r3, #16
 8002594:	2240      	movs	r2, #64	@ 0x40
 8002596:	2100      	movs	r1, #0
 8002598:	4618      	mov	r0, r3
 800259a:	f010 fb67 	bl	8012c6c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800259e:	2300      	movs	r3, #0
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025a2:	e00c      	b.n	80025be <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 80025a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025ae:	3304      	adds	r3, #4
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	4413      	add	r3, r2
 80025b4:	4a79      	ldr	r2, [pc, #484]	@ (800279c <MotorKalman_Init+0x27c>)
 80025b6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ba:	3301      	adds	r3, #1
 80025bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	ddef      	ble.n	80025a4 <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 80025ca:	2240      	movs	r2, #64	@ 0x40
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f010 fb4c 	bl	8012c6c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025d8:	e00d      	b.n	80025f6 <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 80025da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e4:	33be      	adds	r3, #190	@ 0xbe
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80025ee:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	3301      	adds	r3, #1
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	ddee      	ble.n	80025da <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fe:	33f0      	adds	r3, #240	@ 0xf0
 8002600:	2210      	movs	r2, #16
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f010 fb31 	bl	8012c6c <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 800260a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002610:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800261a:	2210      	movs	r2, #16
 800261c:	2100      	movs	r1, #0
 800261e:	4618      	mov	r0, r3
 8002620:	f010 fb24 	bl	8012c6c <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800262a:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 800262e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002632:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002634:	f000 f922 	bl	800287c <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8002638:	ed97 0a00 	vldr	s0, [r7]
 800263c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800263e:	f000 f94d 	bl	80028dc <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264a:	2201      	movs	r2, #1
 800264c:	2104      	movs	r1, #4
 800264e:	f00f fd9c 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	3310      	adds	r3, #16
 800265c:	2204      	movs	r2, #4
 800265e:	2104      	movs	r1, #4
 8002660:	f00f fd93 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8002670:	2204      	movs	r2, #4
 8002672:	2104      	movs	r1, #4
 8002674:	f00f fd89 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 800267e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002680:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8002684:	2201      	movs	r2, #1
 8002686:	2101      	movs	r1, #1
 8002688:	f00f fd7f 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 800268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268e:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8002692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002694:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8002698:	2201      	movs	r2, #1
 800269a:	2101      	movs	r1, #1
 800269c:	f00f fd75 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80026ac:	2201      	movs	r2, #1
 80026ae:	2101      	movs	r1, #1
 80026b0:	f00f fd6b 	bl	801218a <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80026c0:	2204      	movs	r2, #4
 80026c2:	2104      	movs	r1, #4
 80026c4:	f00f fd61 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 80026d4:	2201      	movs	r2, #1
 80026d6:	2104      	movs	r1, #4
 80026d8:	f00f fd57 	bl	801218a <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 80026dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026de:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026e8:	2201      	movs	r2, #1
 80026ea:	2104      	movs	r1, #4
 80026ec:	f00f fd4d 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 80026f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f2:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 80026fc:	2204      	movs	r2, #4
 80026fe:	2104      	movs	r1, #4
 8002700:	f00f fd43 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8002710:	2204      	movs	r2, #4
 8002712:	2101      	movs	r1, #1
 8002714:	f00f fd39 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8002724:	2201      	movs	r2, #1
 8002726:	2101      	movs	r1, #1
 8002728:	f00f fd2f 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8002738:	2201      	movs	r2, #1
 800273a:	2104      	movs	r1, #4
 800273c:	f00f fd25 	bl	801218a <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8002740:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002742:	f000 f82d 	bl	80027a0 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	3390      	adds	r3, #144	@ 0x90
 8002750:	2204      	movs	r2, #4
 8002752:	2104      	movs	r1, #4
 8002754:	f00f fd19 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	33e0      	adds	r3, #224	@ 0xe0
 8002762:	2201      	movs	r2, #1
 8002764:	2104      	movs	r1, #4
 8002766:	f00f fd10 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 800276a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276c:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002776:	2204      	movs	r2, #4
 8002778:	2104      	movs	r1, #4
 800277a:	f00f fd06 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 800277e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002780:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 800278a:	2201      	movs	r2, #1
 800278c:	2104      	movs	r1, #4
 800278e:	f00f fcfc 	bl	801218a <arm_mat_init_f32>
}
 8002792:	bf00      	nop
 8002794:	3730      	adds	r7, #48	@ 0x30
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	42c80000 	.word	0x42c80000

080027a0 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 80027dc:	4619      	mov	r1, r3
 80027de:	4610      	mov	r0, r2
 80027e0:	eeb0 3a64 	vmov.f32	s6, s9
 80027e4:	eef0 2a45 	vmov.f32	s5, s10
 80027e8:	eeb0 2a65 	vmov.f32	s4, s11
 80027ec:	eef0 1a46 	vmov.f32	s3, s12
 80027f0:	eeb0 1a66 	vmov.f32	s2, s13
 80027f4:	eef0 0a47 	vmov.f32	s1, s14
 80027f8:	eeb0 0a67 	vmov.f32	s0, s15
 80027fc:	f001 f83c 	bl	8003878 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002806:	2240      	movs	r2, #64	@ 0x40
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f010 fa2e 	bl	8012c6c <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002816:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002874 <MotorKalman_DiscretizeModel+0xd4>
 800281a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8002824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800283a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800284a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002878 <MotorKalman_DiscretizeModel+0xd8>
 800284e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 800285e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002874 <MotorKalman_DiscretizeModel+0xd4>
 8002862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	3c23d70a 	.word	0x3c23d70a
 8002878:	3dcccccd 	.word	0x3dcccccd

0800287c <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 800288e:	2240      	movs	r2, #64	@ 0x40
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f010 f9ea 	bl	8012c6c <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8002898:	edd7 7a00 	vldr	s15, [r7]
 800289c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 80028b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028bc:	d107      	bne.n	80028ce <MotorKalman_SetProcessNoise+0x52>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 80028c4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028cc:	d002      	beq.n	80028d4 <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ff66 	bl	80027a0 <MotorKalman_DiscretizeModel>
    }
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 80028e8:	ed97 0a00 	vldr	s0, [r7]
 80028ec:	f010 fad8 	bl	8012ea0 <sqrtf>
 80028f0:	eef0 7a40 	vmov.f32	s15, s0
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <MotorKalman_Predict>:
    filter->velocity = 0.0f;
    filter->load_torque = 0.0f;
    filter->current = 0.0f;
}

void MotorKalman_Predict(MotorKalman* filter, float32_t voltage_input) {
 800290a:	b580      	push	{r7, lr}
 800290c:	b0b2      	sub	sp, #200	@ 0xc8
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
 8002912:	ed87 0a00 	vstr	s0, [r7]
    // Store input for next step
    filter->input_data[0] = voltage_input;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec

    // 1. State prediction using simplified method (more stable in embedded systems)
    // Compute x = A*x + B*u directly without using matrix operations
    float32_t new_state[MOTOR_KALMAN_NUM_STATES] = {0};
 800291e:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	60da      	str	r2, [r3, #12]

    // Calculate A*x (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002932:	e041      	b.n	80029b8 <MotorKalman_Predict+0xae>
        new_state[i] = 0;
 8002934:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	33c8      	adds	r3, #200	@ 0xc8
 800293c:	443b      	add	r3, r7
 800293e:	3b3c      	subs	r3, #60	@ 0x3c
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002946:	2300      	movs	r3, #0
 8002948:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800294c:	e02b      	b.n	80029a6 <MotorKalman_Predict+0x9c>
            new_state[i] += filter->A_d[i * MOTOR_KALMAN_NUM_STATES + j] * filter->X[j];
 800294e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	33c8      	adds	r3, #200	@ 0xc8
 8002956:	443b      	add	r3, r7
 8002958:	3b3c      	subs	r3, #60	@ 0x3c
 800295a:	ed93 7a00 	vldr	s14, [r3]
 800295e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002962:	009a      	lsls	r2, r3, #2
 8002964:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002968:	4413      	add	r3, r2
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	3324      	adds	r3, #36	@ 0x24
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	edd3 6a00 	vldr	s13, [r3]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	edd3 7a00 	vldr	s15, [r3]
 8002984:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002988:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	33c8      	adds	r3, #200	@ 0xc8
 8002994:	443b      	add	r3, r7
 8002996:	3b3c      	subs	r3, #60	@ 0x3c
 8002998:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800299c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a0:	3301      	adds	r3, #1
 80029a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	ddcf      	ble.n	800294e <MotorKalman_Predict+0x44>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029b2:	3301      	adds	r3, #1
 80029b4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80029b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029bc:	2b03      	cmp	r3, #3
 80029be:	ddb9      	ble.n	8002934 <MotorKalman_Predict+0x2a>
        }
    }

    // Add B*u (manually)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80029c6:	e021      	b.n	8002a0c <MotorKalman_Predict+0x102>
        filter->X[i] = new_state[i] + filter->B_d[i] * voltage_input;
 80029c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	33c8      	adds	r3, #200	@ 0xc8
 80029d0:	443b      	add	r3, r7
 80029d2:	3b3c      	subs	r3, #60	@ 0x3c
 80029d4:	ed93 7a00 	vldr	s14, [r3]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029de:	3338      	adds	r3, #56	@ 0x38
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	edd3 6a00 	vldr	s13, [r3]
 80029e8:	edd7 7a00 	vldr	s15, [r7]
 80029ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a06:	3301      	adds	r3, #1
 8002a08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002a0c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	ddd9      	ble.n	80029c8 <MotorKalman_Predict+0xbe>
    }

    // 2. Covariance prediction using simplified method (Joseph form for stability)
    // Using direct matrix computation for P = A*P*A' + Q
    float32_t AP[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a14:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002a18:	2240      	movs	r2, #64	@ 0x40
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f010 f925 	bl	8012c6c <memset>
    float32_t APAT[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8002a22:	f107 030c 	add.w	r3, r7, #12
 8002a26:	2240      	movs	r2, #64	@ 0x40
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f010 f91e 	bl	8012c6c <memset>

    // Compute A*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002a30:	2300      	movs	r3, #0
 8002a32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a36:	e05f      	b.n	8002af8 <MotorKalman_Predict+0x1ee>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a3e:	e052      	b.n	8002ae6 <MotorKalman_Predict+0x1dc>
            AP[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002a40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a44:	009a      	lsls	r2, r3, #2
 8002a46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	33c8      	adds	r3, #200	@ 0xc8
 8002a50:	443b      	add	r3, r7
 8002a52:	3b7c      	subs	r3, #124	@ 0x7c
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a60:	e038      	b.n	8002ad4 <MotorKalman_Predict+0x1ca>
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002a62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a66:	009a      	lsls	r2, r3, #2
 8002a68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	33c8      	adds	r3, #200	@ 0xc8
 8002a72:	443b      	add	r3, r7
 8002a74:	3b7c      	subs	r3, #124	@ 0x7c
 8002a76:	ed93 7a00 	vldr	s14, [r3]
                    filter->A_d[i * MOTOR_KALMAN_NUM_STATES + k] * filter->P[k * MOTOR_KALMAN_NUM_STATES + j];
 8002a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002a7e:	009a      	lsls	r2, r3, #2
 8002a80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a84:	4413      	add	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	3324      	adds	r3, #36	@ 0x24
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	edd3 6a00 	vldr	s13, [r3]
 8002a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002a96:	009a      	lsls	r2, r3, #2
 8002a98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002a9c:	4413      	add	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
                AP[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002aae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ab8:	4413      	add	r3, r2
 8002aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	33c8      	adds	r3, #200	@ 0xc8
 8002ac2:	443b      	add	r3, r7
 8002ac4:	3b7c      	subs	r3, #124	@ 0x7c
 8002ac6:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002aca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ace:	3301      	adds	r3, #1
 8002ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ad4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002ad8:	2b03      	cmp	r3, #3
 8002ada:	ddc2      	ble.n	8002a62 <MotorKalman_Predict+0x158>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002adc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ae6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	dda8      	ble.n	8002a40 <MotorKalman_Predict+0x136>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002aee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002af2:	3301      	adds	r3, #1
 8002af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002af8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	dd9b      	ble.n	8002a38 <MotorKalman_Predict+0x12e>
            }
        }
    }

    // Compute (A*P)*A'
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002b06:	e05f      	b.n	8002bc8 <MotorKalman_Predict+0x2be>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002b08:	2300      	movs	r3, #0
 8002b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b0e:	e052      	b.n	8002bb6 <MotorKalman_Predict+0x2ac>
            APAT[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8002b10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b14:	009a      	lsls	r2, r3, #2
 8002b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	33c8      	adds	r3, #200	@ 0xc8
 8002b20:	443b      	add	r3, r7
 8002b22:	3bbc      	subs	r3, #188	@ 0xbc
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002b30:	e038      	b.n	8002ba4 <MotorKalman_Predict+0x29a>
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b36:	009a      	lsls	r2, r3, #2
 8002b38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	33c8      	adds	r3, #200	@ 0xc8
 8002b42:	443b      	add	r3, r7
 8002b44:	3bbc      	subs	r3, #188	@ 0xbc
 8002b46:	ed93 7a00 	vldr	s14, [r3]
                    AP[i * MOTOR_KALMAN_NUM_STATES + k] * filter->A_d[j * MOTOR_KALMAN_NUM_STATES + k];
 8002b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4e:	009a      	lsls	r2, r3, #2
 8002b50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	33c8      	adds	r3, #200	@ 0xc8
 8002b5a:	443b      	add	r3, r7
 8002b5c:	3b7c      	subs	r3, #124	@ 0x7c
 8002b5e:	edd3 6a00 	vldr	s13, [r3]
 8002b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b66:	009a      	lsls	r2, r3, #2
 8002b68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	3324      	adds	r3, #36	@ 0x24
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8002b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b82:	009a      	lsls	r2, r3, #2
 8002b84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b88:	4413      	add	r3, r2
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	33c8      	adds	r3, #200	@ 0xc8
 8002b92:	443b      	add	r3, r7
 8002b94:	3bbc      	subs	r3, #188	@ 0xbc
 8002b96:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8002b9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002ba4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	ddc2      	ble.n	8002b32 <MotorKalman_Predict+0x228>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	dda8      	ble.n	8002b10 <MotorKalman_Predict+0x206>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bbe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	dd9b      	ble.n	8002b08 <MotorKalman_Predict+0x1fe>
            }
        }
    }

    // Add Q to get P = A*P*A' + Q
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bd6:	e037      	b.n	8002c48 <MotorKalman_Predict+0x33e>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bde:	e02a      	b.n	8002c36 <MotorKalman_Predict+0x32c>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002be0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002be4:	009a      	lsls	r2, r3, #2
 8002be6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	33c8      	adds	r3, #200	@ 0xc8
 8002bf0:	443b      	add	r3, r7
 8002bf2:	3bbc      	subs	r3, #188	@ 0xbc
 8002bf4:	ed93 7a00 	vldr	s14, [r3]
 8002bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bfc:	009a      	lsls	r2, r3, #2
 8002bfe:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c02:	4413      	add	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	3354      	adds	r3, #84	@ 0x54
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c14:	009a      	lsls	r2, r3, #2
 8002c16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c1a:	4413      	add	r3, r2
                APAT[i * MOTOR_KALMAN_NUM_STATES + j] + filter->Q_d[i * MOTOR_KALMAN_NUM_STATES + j];
 8002c1c:	ee77 7a27 	vadd.f32	s15, s14, s15
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] =
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	3304      	adds	r3, #4
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002c2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c30:	3301      	adds	r3, #1
 8002c32:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002c36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	ddd0      	ble.n	8002be0 <MotorKalman_Predict+0x2d6>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c42:	3301      	adds	r3, #1
 8002c44:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	ddc3      	ble.n	8002bd8 <MotorKalman_Predict+0x2ce>
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next update step
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	2104      	movs	r1, #4
 8002c84:	f00f fa81 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	3310      	adds	r3, #16
 8002c92:	2204      	movs	r2, #4
 8002c94:	2104      	movs	r1, #4
 8002c96:	f00f fa78 	bl	801218a <arm_mat_init_f32>
}
 8002c9a:	bf00      	nop
 8002c9c:	37c8      	adds	r7, #200	@ 0xc8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <MotorKalman_Update>:

void MotorKalman_Update(MotorKalman* filter, float32_t position) {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b0d0      	sub	sp, #320	@ 0x140
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cae:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cb2:	6018      	str	r0, [r3, #0]
 8002cb4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cb8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002cbc:	ed83 0a00 	vstr	s0, [r3]
    // Store the position measurement
    filter->measurement_data[0] = position;
 8002cc0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cc4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002cce:	f5a2 72a0 	sub.w	r2, r2, #320	@ 0x140
 8002cd2:	6812      	ldr	r2, [r2, #0]
 8002cd4:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8

    // 1. Compute innovation: y - C*x (directly, no matrix operations)
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002cd8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cdc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	ed93 7a3c 	vldr	s14, [r3, #240]	@ 0xf0
 8002ce6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	edd3 7a00 	vldr	s15, [r3]
 8002cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002cfc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	edd3 6a3d 	vldr	s13, [r3, #244]	@ 0xf4
 8002d06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d0a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d18:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d20:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	edd3 6a3e 	vldr	s13, [r3, #248]	@ 0xf8
 8002d2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d3c:	ee37 7a27 	vadd.f32	s14, s14, s15
                  filter->C[2] * filter->X[2] + filter->C[3] * filter->X[3];
 8002d40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	edd3 6a3f 	vldr	s13, [r3, #252]	@ 0xfc
 8002d4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d52:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	edd3 7a03 	vldr	s15, [r3, #12]
 8002d5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float32_t Cx = filter->C[0] * filter->X[0] + filter->C[1] * filter->X[1] +
 8002d60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d64:	edc7 7a40 	vstr	s15, [r7, #256]	@ 0x100
    float32_t innovation = position - Cx;
 8002d68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002d6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002d70:	ed93 7a00 	vldr	s14, [r3]
 8002d74:	edd7 7a40 	vldr	s15, [r7, #256]	@ 0x100
 8002d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7c:	edc7 7a3f 	vstr	s15, [r7, #252]	@ 0xfc

    // 2. Compute innovation covariance: S = C*P*C' + R (directly)
    float32_t CP[MOTOR_KALMAN_NUM_STATES] = {0};
 8002d80:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	609a      	str	r2, [r3, #8]
 8002d8c:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002d94:	e04d      	b.n	8002e32 <MotorKalman_Update+0x18e>
        CP[i] = 0;
 8002d96:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002da0:	443b      	add	r3, r7
 8002da2:	3b58      	subs	r3, #88	@ 0x58
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002daa:	2300      	movs	r3, #0
 8002dac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002db0:	e036      	b.n	8002e20 <MotorKalman_Update+0x17c>
            CP[i] += filter->C[j] * filter->P[j * MOTOR_KALMAN_NUM_STATES + i];
 8002db2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002dbc:	443b      	add	r3, r7
 8002dbe:	3b58      	subs	r3, #88	@ 0x58
 8002dc0:	ed93 7a00 	vldr	s14, [r3]
 8002dc4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002dc8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002dd2:	333c      	adds	r3, #60	@ 0x3c
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	edd3 6a00 	vldr	s13, [r3]
 8002ddc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002de0:	009a      	lsls	r2, r3, #2
 8002de2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002de6:	4413      	add	r3, r2
 8002de8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002dec:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	3304      	adds	r3, #4
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e04:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e0e:	443b      	add	r3, r7
 8002e10:	3b58      	subs	r3, #88	@ 0x58
 8002e12:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002e20:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	ddc4      	ble.n	8002db2 <MotorKalman_Update+0x10e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e28:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002e32:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	ddad      	ble.n	8002d96 <MotorKalman_Update+0xf2>
        }
    }

    float32_t CPCT = 0;
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e42:	2300      	movs	r3, #0
 8002e44:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e48:	e021      	b.n	8002e8e <MotorKalman_Update+0x1ea>
        CPCT += CP[i] * filter->C[i];
 8002e4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002e54:	443b      	add	r3, r7
 8002e56:	3b58      	subs	r3, #88	@ 0x58
 8002e58:	ed93 7a00 	vldr	s14, [r3]
 8002e5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e6a:	333c      	adds	r3, #60	@ 0x3c
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e78:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e80:	edc7 7a4d 	vstr	s15, [r7, #308]	@ 0x134
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002e84:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002e8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e92:	2b03      	cmp	r3, #3
 8002e94:	ddd9      	ble.n	8002e4a <MotorKalman_Update+0x1a6>
    }

    float32_t S = CPCT + filter->R[0];
 8002e96:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e9a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	edd3 7a64 	vldr	s15, [r3, #400]	@ 0x190
 8002ea4:	ed97 7a4d 	vldr	s14, [r7, #308]	@ 0x134
 8002ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eac:	edc7 7a3e 	vstr	s15, [r7, #248]	@ 0xf8

    // 3. Compute Kalman gain: K = P*C'/S (directly)
    float32_t PC[MOTOR_KALMAN_NUM_STATES] = {0};
 8002eb0:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002ec4:	e04d      	b.n	8002f62 <MotorKalman_Update+0x2be>
        PC[i] = 0;
 8002ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002ed0:	443b      	add	r3, r7
 8002ed2:	3b68      	subs	r3, #104	@ 0x68
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002eda:	2300      	movs	r3, #0
 8002edc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002ee0:	e036      	b.n	8002f50 <MotorKalman_Update+0x2ac>
            PC[i] += filter->P[i * MOTOR_KALMAN_NUM_STATES + j] * filter->C[j];
 8002ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002eec:	443b      	add	r3, r7
 8002eee:	3b68      	subs	r3, #104	@ 0x68
 8002ef0:	ed93 7a00 	vldr	s14, [r3]
 8002ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002ef8:	009a      	lsls	r2, r3, #2
 8002efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002efe:	4413      	add	r3, r2
 8002f00:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002f04:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	edd3 6a00 	vldr	s13, [r3]
 8002f14:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002f18:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f22:	333c      	adds	r3, #60	@ 0x3c
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f3e:	443b      	add	r3, r7
 8002f40:	3b68      	subs	r3, #104	@ 0x68
 8002f42:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8002f46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002f50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	ddc4      	ble.n	8002ee2 <MotorKalman_Update+0x23e>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	ddad      	ble.n	8002ec6 <MotorKalman_Update+0x222>
        }
    }

    float32_t K[MOTOR_KALMAN_NUM_STATES] = {0};
 8002f6a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	60da      	str	r2, [r3, #12]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002f7e:	e01a      	b.n	8002fb6 <MotorKalman_Update+0x312>
        K[i] = PC[i] / S;
 8002f80:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002f8a:	443b      	add	r3, r7
 8002f8c:	3b68      	subs	r3, #104	@ 0x68
 8002f8e:	edd3 6a00 	vldr	s13, [r3]
 8002f92:	ed97 7a3e 	vldr	s14, [r7, #248]	@ 0xf8
 8002f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f9a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fa4:	443b      	add	r3, r7
 8002fa6:	3b78      	subs	r3, #120	@ 0x78
 8002fa8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fb6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	dde0      	ble.n	8002f80 <MotorKalman_Update+0x2dc>
    }

    // 4. Update state estimate: x = x + K*innovation (directly)
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002fc4:	e029      	b.n	800301a <MotorKalman_Update+0x376>
        filter->X[i] += K[i] * innovation;
 8002fc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002fca:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	ed93 7a00 	vldr	s14, [r3]
 8002fdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8002fe6:	443b      	add	r3, r7
 8002fe8:	3b78      	subs	r3, #120	@ 0x78
 8002fea:	edd3 6a00 	vldr	s13, [r3]
 8002fee:	edd7 7a3f 	vldr	s15, [r7, #252]	@ 0xfc
 8002ff2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ffa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002ffe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003010:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003014:	3301      	adds	r3, #1
 8003016:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800301a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800301e:	2b03      	cmp	r3, #3
 8003020:	ddd1      	ble.n	8002fc6 <MotorKalman_Update+0x322>
    }

    // 5. Update covariance matrix: P = (I - K*C)*P (Joseph form for better stability)
    float32_t KC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 8003022:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8003026:	2240      	movs	r2, #64	@ 0x40
 8003028:	2100      	movs	r1, #0
 800302a:	4618      	mov	r0, r3
 800302c:	f00f fe1e 	bl	8012c6c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003036:	e035      	b.n	80030a4 <MotorKalman_Update+0x400>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800303e:	e028      	b.n	8003092 <MotorKalman_Update+0x3ee>
            KC[i * MOTOR_KALMAN_NUM_STATES + j] = K[i] * filter->C[j];
 8003040:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800304a:	443b      	add	r3, r7
 800304c:	3b78      	subs	r3, #120	@ 0x78
 800304e:	ed93 7a00 	vldr	s14, [r3]
 8003052:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003056:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003060:	333c      	adds	r3, #60	@ 0x3c
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	edd3 7a00 	vldr	s15, [r3]
 800306a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800306e:	009a      	lsls	r2, r3, #2
 8003070:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003074:	4413      	add	r3, r2
 8003076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003080:	443b      	add	r3, r7
 8003082:	3bb8      	subs	r3, #184	@ 0xb8
 8003084:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003088:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800308c:	3301      	adds	r3, #1
 800308e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8003092:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8003096:	2b03      	cmp	r3, #3
 8003098:	ddd2      	ble.n	8003040 <MotorKalman_Update+0x39c>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800309a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800309e:	3301      	adds	r3, #1
 80030a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80030a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a8:	2b03      	cmp	r3, #3
 80030aa:	ddc5      	ble.n	8003038 <MotorKalman_Update+0x394>
        }
    }

    float32_t IKC[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES] = {0};
 80030ac:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030b0:	2240      	movs	r2, #64	@ 0x40
 80030b2:	2100      	movs	r1, #0
 80030b4:	4618      	mov	r0, r3
 80030b6:	f00f fdd9 	bl	8012c6c <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80030c0:	e038      	b.n	8003134 <MotorKalman_Update+0x490>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 80030c2:	2300      	movs	r3, #0
 80030c4:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80030c8:	e02b      	b.n	8003122 <MotorKalman_Update+0x47e>
            IKC[i * MOTOR_KALMAN_NUM_STATES + j] = (i == j ? 1.0f : 0.0f) - KC[i * MOTOR_KALMAN_NUM_STATES + j];
 80030ca:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80030ce:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d102      	bne.n	80030dc <MotorKalman_Update+0x438>
 80030d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80030da:	e001      	b.n	80030e0 <MotorKalman_Update+0x43c>
 80030dc:	ed9f 7a86 	vldr	s14, [pc, #536]	@ 80032f8 <MotorKalman_Update+0x654>
 80030e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e4:	009a      	lsls	r2, r3, #2
 80030e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80030f2:	443b      	add	r3, r7
 80030f4:	3bb8      	subs	r3, #184	@ 0xb8
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fe:	009a      	lsls	r2, r3, #2
 8003100:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003104:	4413      	add	r3, r2
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8003110:	443b      	add	r3, r7
 8003112:	3bf8      	subs	r3, #248	@ 0xf8
 8003114:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003118:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800311c:	3301      	adds	r3, #1
 800311e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8003122:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003126:	2b03      	cmp	r3, #3
 8003128:	ddcf      	ble.n	80030ca <MotorKalman_Update+0x426>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 800312a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312e:	3301      	adds	r3, #1
 8003130:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8003134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003138:	2b03      	cmp	r3, #3
 800313a:	ddc2      	ble.n	80030c2 <MotorKalman_Update+0x41e>
        }
    }

    // Store P temporarily
    float32_t P_temp[MOTOR_KALMAN_NUM_STATES * MOTOR_KALMAN_NUM_STATES];
    memcpy(P_temp, filter->P, sizeof(P_temp));
 800313c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003140:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f103 0110 	add.w	r1, r3, #16
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	4618      	mov	r0, r3
 8003152:	f00f fdcf 	bl	8012cf4 <memcpy>

    // Compute (I - K*C)*P
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003156:	2300      	movs	r3, #0
 8003158:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800315c:	e06e      	b.n	800323c <MotorKalman_Update+0x598>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003164:	e061      	b.n	800322a <MotorKalman_Update+0x586>
            filter->P[i * MOTOR_KALMAN_NUM_STATES + j] = 0;
 8003166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800316a:	009a      	lsls	r2, r3, #2
 800316c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003170:	4413      	add	r3, r2
 8003172:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8003176:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	3304      	adds	r3, #4
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800318e:	e043      	b.n	8003218 <MotorKalman_Update+0x574>
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 8003190:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800319a:	4413      	add	r3, r2
 800319c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031a0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80031a4:	6812      	ldr	r2, [r2, #0]
 80031a6:	3304      	adds	r3, #4
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	ed93 7a00 	vldr	s14, [r3]
                    IKC[i * MOTOR_KALMAN_NUM_STATES + k] * P_temp[k * MOTOR_KALMAN_NUM_STATES + j];
 80031b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031b4:	009a      	lsls	r2, r3, #2
 80031b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80031c2:	443b      	add	r3, r7
 80031c4:	3bf8      	subs	r3, #248	@ 0xf8
 80031c6:	edd3 6a00 	vldr	s13, [r3]
 80031ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80031ce:	009a      	lsls	r2, r3, #2
 80031d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031d4:	4413      	add	r3, r2
 80031d6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031da:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
                filter->P[i * MOTOR_KALMAN_NUM_STATES + j] +=
 80031ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80031ee:	009a      	lsls	r2, r3, #2
 80031f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80031f4:	4413      	add	r3, r2
 80031f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031fa:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80031fe:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8003202:	6812      	ldr	r2, [r2, #0]
 8003204:	3304      	adds	r3, #4
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < MOTOR_KALMAN_NUM_STATES; k++) {
 800320e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003212:	3301      	adds	r3, #1
 8003214:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800321c:	2b03      	cmp	r3, #3
 800321e:	ddb7      	ble.n	8003190 <MotorKalman_Update+0x4ec>
        for (int j = 0; j < MOTOR_KALMAN_NUM_STATES; j++) {
 8003220:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003224:	3301      	adds	r3, #1
 8003226:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800322a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800322e:	2b03      	cmp	r3, #3
 8003230:	dd99      	ble.n	8003166 <MotorKalman_Update+0x4c2>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8003232:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003236:	3301      	adds	r3, #1
 8003238:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800323c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003240:	2b03      	cmp	r3, #3
 8003242:	dd8c      	ble.n	800315e <MotorKalman_Update+0x4ba>
            }
        }
    }

    // Update state estimates for easy access
    filter->position = filter->X[0];
 8003244:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003248:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003254:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    filter->velocity = filter->X[1];
 800325e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003262:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800326e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f8c3 2360 	str.w	r2, [r3, #864]	@ 0x360
    filter->load_torque = filter->X[2];
 8003278:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800327c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003288:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f8c3 2364 	str.w	r2, [r3, #868]	@ 0x364
    filter->current = filter->X[3];
 8003292:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8003296:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f8c3 2368 	str.w	r2, [r3, #872]	@ 0x368

    // Update CMSIS DSP matrices for next time
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 80032ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032b0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 80032ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032be:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2201      	movs	r2, #1
 80032c6:	2104      	movs	r1, #4
 80032c8:	f00e ff5f 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 80032cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032d0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 80032da:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80032de:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	3310      	adds	r3, #16
 80032e6:	2204      	movs	r2, #4
 80032e8:	2104      	movs	r1, #4
 80032ea:	f00e ff4e 	bl	801218a <arm_mat_init_f32>
}
 80032ee:	bf00      	nop
 80032f0:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	00000000 	.word	0x00000000

080032fc <MotorKalman_Estimate>:

float MotorKalman_Estimate(MotorKalman* filter, float32_t voltage_input, float32_t position) {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	ed87 0a02 	vstr	s0, [r7, #8]
 8003308:	edc7 0a01 	vstr	s1, [r7, #4]
    // Execute the predict and update steps
    MotorKalman_Predict(filter, voltage_input);
 800330c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f7ff fafa 	bl	800290a <MotorKalman_Predict>
    MotorKalman_Update(filter, position);
 8003316:	ed97 0a01 	vldr	s0, [r7, #4]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f7ff fcc2 	bl	8002ca4 <MotorKalman_Update>

    return filter->velocity;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8d3 3360 	ldr.w	r3, [r3, #864]	@ 0x360
 8003326:	ee07 3a90 	vmov	s15, r3
}
 800332a:	eeb0 0a67 	vmov.f32	s0, s15
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e00c      	b.n	8003360 <matrix_copy+0x2c>
        dst[i] = src[i];
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	441a      	add	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	440b      	add	r3, r1
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	3301      	adds	r3, #1
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	429a      	cmp	r2, r3
 8003366:	dbee      	blt.n	8003346 <matrix_copy+0x12>
    }
}
 8003368:	bf00      	nop
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
	...

08003378 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8003378:	b590      	push	{r4, r7, lr}
 800337a:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 800337e:	af00      	add	r7, sp, #0
 8003380:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8003384:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8003388:	6020      	str	r0, [r4, #0]
 800338a:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 800338e:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8003392:	6001      	str	r1, [r0, #0]
 8003394:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8003398:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 800339c:	ed81 0a00 	vstr	s0, [r1]
 80033a0:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 80033a4:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 80033a8:	600a      	str	r2, [r1, #0]
 80033aa:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 80033ae:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 80033b2:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 80033b4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033b8:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 80033bc:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2204      	movs	r2, #4
 80033c4:	2104      	movs	r1, #4
 80033c6:	f00e fee0 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 80033ca:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033ce:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80033d2:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2204      	movs	r2, #4
 80033da:	2104      	movs	r1, #4
 80033dc:	f00e fed5 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 80033e0:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033e4:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 80033e8:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2201      	movs	r2, #1
 80033f0:	2104      	movs	r1, #4
 80033f2:	f00e feca 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 80033f6:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80033fa:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 80033fe:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2201      	movs	r2, #1
 8003406:	2104      	movs	r1, #4
 8003408:	f00e febf 	bl	801218a <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 800340c:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 8003410:	2240      	movs	r2, #64	@ 0x40
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f00f fc29 	bl	8012c6c <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 800341a:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 800341e:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 8003422:	2204      	movs	r2, #4
 8003424:	2104      	movs	r1, #4
 8003426:	f00e feb0 	bl	801218a <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003430:	e011      	b.n	8003456 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 8003432:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 8003442:	443b      	add	r3, r7
 8003444:	3b6c      	subs	r3, #108	@ 0x6c
 8003446:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800344a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 800344c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8003450:	3301      	adds	r3, #1
 8003452:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8003456:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800345a:	2b03      	cmp	r3, #3
 800345c:	dde9      	ble.n	8003432 <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 800345e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8003462:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 8003466:	2204      	movs	r2, #4
 8003468:	2104      	movs	r1, #4
 800346a:	f00e fe8e 	bl	801218a <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 800346e:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8003472:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003476:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800347a:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 800347e:	ed93 0a00 	vldr	s0, [r3]
 8003482:	4610      	mov	r0, r2
 8003484:	f00f fa8a 	bl	801299c <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 8003488:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800348c:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8003490:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8003494:	2210      	movs	r2, #16
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	f7ff ff4c 	bl	8003334 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 800349c:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 80034a0:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 80034a4:	2204      	movs	r2, #4
 80034a6:	2104      	movs	r1, #4
 80034a8:	f00e fe6f 	bl	801218a <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 80034ac:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 80034b0:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 80034b4:	2204      	movs	r2, #4
 80034b6:	2104      	movs	r1, #4
 80034b8:	f00e fe67 	bl	801218a <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 80034bc:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 80034c0:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80034c4:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80034c8:	4618      	mov	r0, r3
 80034ca:	f00e fe23 	bl	8012114 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 80034ce:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 80034d2:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80034d6:	2210      	movs	r2, #16
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff ff2b 	bl	8003334 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 80034de:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80034e2:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 80034e6:	2302      	movs	r3, #2
 80034e8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80034ec:	e03a      	b.n	8003564 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 80034ee:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80034f2:	ee07 3a90 	vmov	s15, r3
 80034f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fa:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8003506:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 800350a:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800350e:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 8003512:	4618      	mov	r0, r3
 8003514:	f00f f9c8 	bl	80128a8 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8003518:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 800351c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003520:	2210      	movs	r2, #16
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff ff06 	bl	8003334 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8003528:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800352c:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 8003530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003534:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8003538:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800353c:	4611      	mov	r1, r2
 800353e:	eeb0 0a47 	vmov.f32	s0, s14
 8003542:	4618      	mov	r0, r3
 8003544:	f00f fa2a 	bl	801299c <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 8003548:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 800354c:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 8003550:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 8003554:	4618      	mov	r0, r3
 8003556:	f00e fddd 	bl	8012114 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 800355a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800355e:	3301      	adds	r3, #1
 8003560:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8003564:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 8003568:	2b0a      	cmp	r3, #10
 800356a:	ddc0      	ble.n	80034ee <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 800356c:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 8003570:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003574:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003578:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 800357c:	ed93 0a00 	vldr	s0, [r3]
 8003580:	4610      	mov	r0, r2
 8003582:	f00f fa0b 	bl	801299c <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 8003586:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800358a:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 800358e:	461a      	mov	r2, r3
 8003590:	2300      	movs	r3, #0
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	6053      	str	r3, [r2, #4]
 8003596:	6093      	str	r3, [r2, #8]
 8003598:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 800359a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800359e:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 80035a2:	2201      	movs	r2, #1
 80035a4:	2104      	movs	r1, #4
 80035a6:	f00e fdf0 	bl	801218a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 80035aa:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 80035ae:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80035b2:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f00f f976 	bl	80128a8 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 80035bc:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 80035c0:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 80035c4:	2201      	movs	r2, #1
 80035c6:	2104      	movs	r1, #4
 80035c8:	f00e fddf 	bl	801218a <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 80035cc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80035d0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80035d4:	edd3 7a00 	vldr	s15, [r3]
 80035d8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035dc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80035e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80035e4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80035e8:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 80035ec:	4611      	mov	r1, r2
 80035ee:	eeb0 0a47 	vmov.f32	s0, s14
 80035f2:	4618      	mov	r0, r3
 80035f4:	f00f f9d2 	bl	801299c <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80035f8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80035fc:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003600:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003604:	4618      	mov	r0, r3
 8003606:	f00e fd85 	bl	8012114 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 800360a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800360e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003612:	4618      	mov	r0, r3
 8003614:	2340      	movs	r3, #64	@ 0x40
 8003616:	461a      	mov	r2, r3
 8003618:	2100      	movs	r1, #0
 800361a:	f00f fb27 	bl	8012c6c <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 800361e:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003622:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8003626:	2204      	movs	r2, #4
 8003628:	2104      	movs	r1, #4
 800362a:	f00e fdae 	bl	801218a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 800362e:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 8003632:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8003636:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 800363a:	4618      	mov	r0, r3
 800363c:	f00f f934 	bl	80128a8 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 8003640:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003644:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003648:	461a      	mov	r2, r3
 800364a:	2300      	movs	r3, #0
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	6053      	str	r3, [r2, #4]
 8003650:	6093      	str	r3, [r2, #8]
 8003652:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 8003654:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003658:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 800365c:	2201      	movs	r2, #1
 800365e:	2104      	movs	r1, #4
 8003660:	f00e fd93 	bl	801218a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 8003664:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 8003668:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800366c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003670:	4618      	mov	r0, r3
 8003672:	f00f f919 	bl	80128a8 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 8003676:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800367a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800367e:	edd3 7a00 	vldr	s15, [r3]
 8003682:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003686:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800368a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 800369a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800369e:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80036a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80036a6:	4611      	mov	r1, r2
 80036a8:	eeb0 0a47 	vmov.f32	s0, s14
 80036ac:	4618      	mov	r0, r3
 80036ae:	f00f f975 	bl	801299c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80036b2:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80036b6:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80036ba:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80036be:	4618      	mov	r0, r3
 80036c0:	f00e fd28 	bl	8012114 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 80036c4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036c8:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 80036cc:	4618      	mov	r0, r3
 80036ce:	2340      	movs	r3, #64	@ 0x40
 80036d0:	461a      	mov	r2, r3
 80036d2:	2100      	movs	r1, #0
 80036d4:	f00f faca 	bl	8012c6c <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 80036d8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80036dc:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80036e0:	2204      	movs	r2, #4
 80036e2:	2104      	movs	r1, #4
 80036e4:	f00e fd51 	bl	801218a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 80036e8:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 80036ec:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80036f0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80036f4:	4618      	mov	r0, r3
 80036f6:	f00f f8d7 	bl	80128a8 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 80036fa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80036fe:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8003702:	461a      	mov	r2, r3
 8003704:	2300      	movs	r3, #0
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	6053      	str	r3, [r2, #4]
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 800370e:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8003712:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8003716:	2201      	movs	r2, #1
 8003718:	2104      	movs	r1, #4
 800371a:	f00e fd36 	bl	801218a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 800371e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8003722:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8003726:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800372a:	4618      	mov	r0, r3
 800372c:	f00f f8bc 	bl	80128a8 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 8003730:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003734:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003738:	edd3 7a00 	vldr	s15, [r3]
 800373c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003740:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003744:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003750:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003754:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003760:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 8003764:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003768:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800376c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003770:	4611      	mov	r1, r2
 8003772:	eeb0 0a47 	vmov.f32	s0, s14
 8003776:	4618      	mov	r0, r3
 8003778:	f00f f910 	bl	801299c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800377c:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8003780:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8003784:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003788:	4618      	mov	r0, r3
 800378a:	f00e fcc3 	bl	8012114 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 800378e:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8003792:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8003796:	4618      	mov	r0, r3
 8003798:	2340      	movs	r3, #64	@ 0x40
 800379a:	461a      	mov	r2, r3
 800379c:	2100      	movs	r1, #0
 800379e:	f00f fa65 	bl	8012c6c <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 80037a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80037a6:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80037aa:	2204      	movs	r2, #4
 80037ac:	2104      	movs	r1, #4
 80037ae:	f00e fcec 	bl	801218a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 80037b2:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80037b6:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80037ba:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80037be:	4618      	mov	r0, r3
 80037c0:	f00f f872 	bl	80128a8 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 80037c4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037c8:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 80037cc:	461a      	mov	r2, r3
 80037ce:	2300      	movs	r3, #0
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	6053      	str	r3, [r2, #4]
 80037d4:	6093      	str	r3, [r2, #8]
 80037d6:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 80037d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037dc:	f107 001c 	add.w	r0, r7, #28
 80037e0:	2201      	movs	r2, #1
 80037e2:	2104      	movs	r1, #4
 80037e4:	f00e fcd1 	bl	801218a <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 80037e8:	f107 021c 	add.w	r2, r7, #28
 80037ec:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80037f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80037f4:	4618      	mov	r0, r3
 80037f6:	f00f f857 	bl	80128a8 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 80037fa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80037fe:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800380a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800380e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800381a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800381e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800382a:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800382e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8003874 <discretize_system_with_arm+0x4fc>
 800383e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003842:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8003846:	f107 031c 	add.w	r3, r7, #28
 800384a:	4611      	mov	r1, r2
 800384c:	eeb0 0a47 	vmov.f32	s0, s14
 8003850:	4618      	mov	r0, r3
 8003852:	f00f f8a3 	bl	801299c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8003856:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800385a:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800385e:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8003862:	4618      	mov	r0, r3
 8003864:	f00e fc56 	bl	8012114 <arm_mat_add_f32>
}
 8003868:	bf00      	nop
 800386a:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 800386e:	46bd      	mov	sp, r7
 8003870:	bd90      	pop	{r4, r7, pc}
 8003872:	bf00      	nop
 8003874:	42f00000 	.word	0x42f00000

08003878 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b09e      	sub	sp, #120	@ 0x78
 800387c:	af00      	add	r7, sp, #0
 800387e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003882:	edc7 0a08 	vstr	s1, [r7, #32]
 8003886:	ed87 1a07 	vstr	s2, [r7, #28]
 800388a:	edc7 1a06 	vstr	s3, [r7, #24]
 800388e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003892:	edc7 2a04 	vstr	s5, [r7, #16]
 8003896:	ed87 3a03 	vstr	s6, [r7, #12]
 800389a:	60b8      	str	r0, [r7, #8]
 800389c:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800389e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80038a2:	2240      	movs	r2, #64	@ 0x40
 80038a4:	2100      	movs	r1, #0
 80038a6:	4618      	mov	r0, r3
 80038a8:	f00f f9e0 	bl	8012c6c <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 80038ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	605a      	str	r2, [r3, #4]
 80038b6:	609a      	str	r2, [r3, #8]
 80038b8:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 80038ba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80038be:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 80038c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80038c4:	eef1 6a67 	vneg.f32	s13, s15
 80038c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038d0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 80038d4:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 80038d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e0:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 80038e4:	edd7 6a04 	vldr	s13, [r7, #16]
 80038e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80038ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038f0:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 80038f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80038f8:	eef1 6a67 	vneg.f32	s13, s15
 80038fc:	ed97 7a08 	vldr	s14, [r7, #32]
 8003900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003904:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8003908:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800390c:	eef1 6a67 	vneg.f32	s13, s15
 8003910:	ed97 7a08 	vldr	s14, [r7, #32]
 8003914:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003918:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 800391c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003920:	ed97 7a08 	vldr	s14, [r7, #32]
 8003924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003928:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    discretize_system_with_arm(A_c, B_c, dt, A, B);
 800392c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003930:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	ed97 0a03 	vldr	s0, [r7, #12]
 800393c:	f7ff fd1c 	bl	8003378 <discretize_system_with_arm>
}
 8003940:	bf00      	nop
 8003942:	3778      	adds	r7, #120	@ 0x78
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4a0b      	ldr	r2, [pc, #44]	@ (8003988 <PWM_init+0x40>)
 800395a:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	88fa      	ldrh	r2, [r7, #6]
 8003966:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800396e:	68b8      	ldr	r0, [r7, #8]
 8003970:	f00a fc3c 	bl	800e1ec <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	4619      	mov	r1, r3
 8003978:	68b8      	ldr	r0, [r7, #8]
 800397a:	f00a fd83 	bl	800e484 <HAL_TIM_PWM_Start>
}
 800397e:	bf00      	nop
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	0a21fe80 	.word	0x0a21fe80

0800398c <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 800398c:	b5b0      	push	{r4, r5, r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	ed87 0a02 	vstr	s0, [r7, #8]
 8003998:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 800399c:	edd7 7a02 	vldr	s15, [r7, #8]
 80039a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a8:	d137      	bne.n	8003a1a <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	889b      	ldrh	r3, [r3, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d105      	bne.n	80039be <PWM_write_duty+0x32>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2200      	movs	r2, #0
 80039ba:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 80039bc:	e0e1      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	889b      	ldrh	r3, [r3, #4]
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d105      	bne.n	80039d2 <PWM_write_duty+0x46>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	2300      	movs	r3, #0
 80039ce:	6393      	str	r3, [r2, #56]	@ 0x38
 80039d0:	e0d7      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	889b      	ldrh	r3, [r3, #4]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d105      	bne.n	80039e6 <PWM_write_duty+0x5a>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2300      	movs	r3, #0
 80039e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80039e4:	e0cd      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	889b      	ldrh	r3, [r3, #4]
 80039ea:	2b0c      	cmp	r3, #12
 80039ec:	d105      	bne.n	80039fa <PWM_write_duty+0x6e>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2300      	movs	r3, #0
 80039f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80039f8:	e0c3      	b.n	8003b82 <PWM_write_duty+0x1f6>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	889b      	ldrh	r3, [r3, #4]
 80039fe:	2b10      	cmp	r3, #16
 8003a00:	d105      	bne.n	8003a0e <PWM_write_duty+0x82>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	6493      	str	r3, [r2, #72]	@ 0x48
 8003a0c:	e0b9      	b.n	8003b82 <PWM_write_duty+0x1f6>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003a18:	e0b3      	b.n	8003b82 <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a26:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a32:	ee17 2a90 	vmov	r2, s15
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003a42:	33fe      	adds	r3, #254	@ 0xfe
 8003a44:	4a51      	ldr	r2, [pc, #324]	@ (8003b8c <PWM_write_duty+0x200>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	0bdb      	lsrs	r3, r3, #15
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	899b      	ldrh	r3, [r3, #12]
 8003a66:	3301      	adds	r3, #1
 8003a68:	ee07 3a90 	vmov	s15, r3
 8003a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a74:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a88:	ee17 3a90 	vmov	r3, s15
 8003a8c:	b29a      	uxth	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	89db      	ldrh	r3, [r3, #14]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fc fd10 	bl	80004bc <__aeabi_i2d>
 8003a9c:	4604      	mov	r4, r0
 8003a9e:	460d      	mov	r5, r1
 8003aa0:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aa4:	eef0 7ae7 	vabs.f32	s15, s15
 8003aa8:	ee17 0a90 	vmov	r0, s15
 8003aac:	f7fc fd18 	bl	80004e0 <__aeabi_f2d>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	4620      	mov	r0, r4
 8003ab6:	4629      	mov	r1, r5
 8003ab8:	f7fc fd6a 	bl	8000590 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <PWM_write_duty+0x204>)
 8003aca:	f7fc fe8b 	bl	80007e4 <__aeabi_ddiv>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f7fd f81d 	bl	8000b14 <__aeabi_d2uiz>
 8003ada:	4603      	mov	r3, r0
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	899a      	ldrh	r2, [r3, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	89da      	ldrh	r2, [r3, #14]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	89da      	ldrh	r2, [r3, #14]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	889b      	ldrh	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <PWM_write_duty+0x190>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	6952      	ldr	r2, [r2, #20]
 8003b18:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003b1a:	e032      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	889b      	ldrh	r3, [r3, #4]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d106      	bne.n	8003b32 <PWM_write_duty+0x1a6>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003b30:	e027      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	889b      	ldrh	r3, [r3, #4]
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d106      	bne.n	8003b48 <PWM_write_duty+0x1bc>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003b46:	e01c      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	889b      	ldrh	r3, [r3, #4]
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d106      	bne.n	8003b5e <PWM_write_duty+0x1d2>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003b5c:	e011      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	889b      	ldrh	r3, [r3, #4]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d106      	bne.n	8003b74 <PWM_write_duty+0x1e8>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003b72:	e006      	b.n	8003b82 <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003b80:	e7ff      	b.n	8003b82 <PWM_write_duty+0x1f6>
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	80008001 	.word	0x80008001
 8003b90:	40590000 	.word	0x40590000
 8003b94:	00000000 	.word	0x00000000

08003b98 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8003b98:	b5b0      	push	{r4, r5, r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba4:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8003ba8:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb4:	d137      	bne.n	8003c26 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	889b      	ldrh	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d105      	bne.n	8003bca <PWM_write_range+0x32>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8003bc8:	e0e1      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	889b      	ldrh	r3, [r3, #4]
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d105      	bne.n	8003bde <PWM_write_range+0x46>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	2300      	movs	r3, #0
 8003bda:	6393      	str	r3, [r2, #56]	@ 0x38
 8003bdc:	e0d7      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	889b      	ldrh	r3, [r3, #4]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d105      	bne.n	8003bf2 <PWM_write_range+0x5a>
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8003bf0:	e0cd      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	889b      	ldrh	r3, [r3, #4]
 8003bf6:	2b0c      	cmp	r3, #12
 8003bf8:	d105      	bne.n	8003c06 <PWM_write_range+0x6e>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2300      	movs	r3, #0
 8003c02:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c04:	e0c3      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	889b      	ldrh	r3, [r3, #4]
 8003c0a:	2b10      	cmp	r3, #16
 8003c0c:	d105      	bne.n	8003c1a <PWM_write_range+0x82>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	6493      	str	r3, [r2, #72]	@ 0x48
 8003c18:	e0b9      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2300      	movs	r3, #0
 8003c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003c24:	e0b3      	b.n	8003d8e <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c32:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c3e:	ee17 2a90 	vmov	r2, s15
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8003c4e:	33fe      	adds	r3, #254	@ 0xfe
 8003c50:	4a53      	ldr	r2, [pc, #332]	@ (8003da0 <PWM_write_range+0x208>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	0bdb      	lsrs	r3, r3, #15
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	899b      	ldrh	r3, [r3, #12]
 8003c72:	3301      	adds	r3, #1
 8003c74:	ee07 3a90 	vmov	s15, r3
 8003c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c7c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c80:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c94:	ee17 3a90 	vmov	r3, s15
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	89db      	ldrh	r3, [r3, #14]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fc fc0a 	bl	80004bc <__aeabi_i2d>
 8003ca8:	4604      	mov	r4, r0
 8003caa:	460d      	mov	r5, r1
 8003cac:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cb0:	eef0 7ae7 	vabs.f32	s15, s15
 8003cb4:	ee17 0a90 	vmov	r0, s15
 8003cb8:	f7fc fc12 	bl	80004e0 <__aeabi_f2d>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4620      	mov	r0, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	f7fc fc64 	bl	8000590 <__aeabi_dmul>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	a331      	add	r3, pc, #196	@ (adr r3, 8003d98 <PWM_write_range+0x200>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f7fc fd85 	bl	80007e4 <__aeabi_ddiv>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	f7fc ff17 	bl	8000b14 <__aeabi_d2uiz>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	899a      	ldrh	r2, [r3, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	89da      	ldrh	r2, [r3, #14]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	89da      	ldrh	r2, [r3, #14]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	889b      	ldrh	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d106      	bne.n	8003d28 <PWM_write_range+0x190>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	6952      	ldr	r2, [r2, #20]
 8003d24:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003d26:	e032      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	889b      	ldrh	r3, [r3, #4]
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d106      	bne.n	8003d3e <PWM_write_range+0x1a6>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003d3c:	e027      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	889b      	ldrh	r3, [r3, #4]
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d106      	bne.n	8003d54 <PWM_write_range+0x1bc>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8003d52:	e01c      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	889b      	ldrh	r3, [r3, #4]
 8003d58:	2b0c      	cmp	r3, #12
 8003d5a:	d106      	bne.n	8003d6a <PWM_write_range+0x1d2>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8003d68:	e011      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	889b      	ldrh	r3, [r3, #4]
 8003d6e:	2b10      	cmp	r3, #16
 8003d70:	d106      	bne.n	8003d80 <PWM_write_range+0x1e8>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8003d7e:	e006      	b.n	8003d8e <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8003d8c:	e7ff      	b.n	8003d8e <PWM_write_range+0x1f6>
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bdb0      	pop	{r4, r5, r7, pc}
 8003d96:	bf00      	nop
 8003d98:	00000000 	.word	0x00000000
 8003d9c:	40efffe0 	.word	0x40efffe0
 8003da0:	80008001 	.word	0x80008001

08003da4 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6178      	str	r0, [r7, #20]
 8003dac:	6139      	str	r1, [r7, #16]
 8003dae:	60fa      	str	r2, [r7, #12]
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	ed87 0a01 	vstr	s0, [r7, #4]
 8003db6:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8003e04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	fb93 f2f2 	sdiv	r2, r3, r2
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	fb01 f202 	mul.w	r2, r1, r2
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	2200      	movs	r2, #0
 8003e28:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f04f 0200 	mov.w	r2, #0
 8003e68:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8003e72:	213c      	movs	r1, #60	@ 0x3c
 8003e74:	6938      	ldr	r0, [r7, #16]
 8003e76:	f00a fdc1 	bl	800e9fc <HAL_TIM_Encoder_Start>
}
 8003e7a:	bf00      	nop
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	0000      	movs	r0, r0
 8003e84:	0000      	movs	r0, r0
	...

08003e88 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8003e88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	0fda      	lsrs	r2, r3, #31
 8003eb0:	4413      	add	r3, r2
 8003eb2:	105b      	asrs	r3, r3, #1
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	dd05      	ble.n	8003ec8 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	e00e      	b.n	8003ee6 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	0fda      	lsrs	r2, r3, #31
 8003ece:	4413      	add	r3, r2
 8003ed0:	105b      	asrs	r3, r3, #1
 8003ed2:	425b      	negs	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	da04      	bge.n	8003ee6 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	441a      	add	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	ee07 3a90 	vmov	s15, r3
 8003f08:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	ee07 3a90 	vmov	s15, r3
 8003f14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f18:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8003f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fc fad3 	bl	80004e0 <__aeabi_f2d>
 8003f3a:	4604      	mov	r4, r0
 8003f3c:	460d      	mov	r5, r1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	ee07 3a90 	vmov	s15, r3
 8003f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f5e:	ee17 0a90 	vmov	r0, s15
 8003f62:	f7fc fabd 	bl	80004e0 <__aeabi_f2d>
 8003f66:	a33c      	add	r3, pc, #240	@ (adr r3, 8004058 <QEI_get_diff_count+0x1d0>)
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f7fc fb10 	bl	8000590 <__aeabi_dmul>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4690      	mov	r8, r2
 8003f76:	4699      	mov	r9, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7fc faaf 	bl	80004e0 <__aeabi_f2d>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4640      	mov	r0, r8
 8003f88:	4649      	mov	r1, r9
 8003f8a:	f7fc fb01 	bl	8000590 <__aeabi_dmul>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
 8003f92:	4620      	mov	r0, r4
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7fc f945 	bl	8000224 <__adddf3>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	f7fc fdd7 	bl	8000b54 <__aeabi_d2f>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fc fa95 	bl	80004e0 <__aeabi_f2d>
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	460d      	mov	r5, r1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbe:	ee07 3a90 	vmov	s15, r3
 8003fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003fd6:	ee16 0a90 	vmov	r0, s13
 8003fda:	f7fc fa81 	bl	80004e0 <__aeabi_f2d>
 8003fde:	a31e      	add	r3, pc, #120	@ (adr r3, 8004058 <QEI_get_diff_count+0x1d0>)
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f7fc fad4 	bl	8000590 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4690      	mov	r8, r2
 8003fee:	4699      	mov	r9, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc fa73 	bl	80004e0 <__aeabi_f2d>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4640      	mov	r0, r8
 8004000:	4649      	mov	r1, r9
 8004002:	f7fc fac5 	bl	8000590 <__aeabi_dmul>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4690      	mov	r8, r2
 800400c:	4699      	mov	r9, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc fa64 	bl	80004e0 <__aeabi_f2d>
 8004018:	4602      	mov	r2, r0
 800401a:	460b      	mov	r3, r1
 800401c:	4640      	mov	r0, r8
 800401e:	4649      	mov	r1, r9
 8004020:	f7fc fab6 	bl	8000590 <__aeabi_dmul>
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4620      	mov	r0, r4
 800402a:	4629      	mov	r1, r5
 800402c:	f7fc f8fa 	bl	8000224 <__adddf3>
 8004030:	4602      	mov	r2, r0
 8004032:	460b      	mov	r3, r1
 8004034:	4610      	mov	r0, r2
 8004036:	4619      	mov	r1, r3
 8004038:	f7fc fd8c 	bl	8000b54 <__aeabi_d2f>
 800403c:	4602      	mov	r2, r0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	605a      	str	r2, [r3, #4]
}
 800404a:	bf00      	nop
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004054:	f3af 8000 	nop.w
 8004058:	54442d18 	.word	0x54442d18
 800405c:	400921fb 	.word	0x400921fb

08004060 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8004060:	b5b0      	push	{r4, r5, r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004070:	fb02 f303 	mul.w	r3, r2, r3
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc fa2a 	bl	80004e0 <__aeabi_f2d>
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	4b83      	ldr	r3, [pc, #524]	@ (80042a0 <QEI_compute_data+0x240>)
 8004092:	f7fc fa7d 	bl	8000590 <__aeabi_dmul>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4614      	mov	r4, r2
 800409c:	461d      	mov	r5, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040aa:	ee17 0a90 	vmov	r0, s15
 80040ae:	f7fc fa17 	bl	80004e0 <__aeabi_f2d>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4620      	mov	r0, r4
 80040b8:	4629      	mov	r1, r5
 80040ba:	f7fc fb93 	bl	80007e4 <__aeabi_ddiv>
 80040be:	4602      	mov	r2, r0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4614      	mov	r4, r2
 80040c4:	461d      	mov	r5, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fc fa08 	bl	80004e0 <__aeabi_f2d>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4620      	mov	r0, r4
 80040d6:	4629      	mov	r1, r5
 80040d8:	f7fc fa5a 	bl	8000590 <__aeabi_dmul>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f7fc fd36 	bl	8000b54 <__aeabi_d2f>
 80040e8:	4602      	mov	r2, r0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80040f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040f8:	ee17 0a90 	vmov	r0, s15
 80040fc:	f7fc f9f0 	bl	80004e0 <__aeabi_f2d>
 8004100:	a365      	add	r3, pc, #404	@ (adr r3, 8004298 <QEI_compute_data+0x238>)
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f7fc fa43 	bl	8000590 <__aeabi_dmul>
 800410a:	4602      	mov	r2, r0
 800410c:	460b      	mov	r3, r1
 800410e:	4614      	mov	r4, r2
 8004110:	461d      	mov	r5, r3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800411e:	ee17 0a90 	vmov	r0, s15
 8004122:	f7fc f9dd 	bl	80004e0 <__aeabi_f2d>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4620      	mov	r0, r4
 800412c:	4629      	mov	r1, r5
 800412e:	f7fc fb59 	bl	80007e4 <__aeabi_ddiv>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4614      	mov	r4, r2
 8004138:	461d      	mov	r5, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413e:	4618      	mov	r0, r3
 8004140:	f7fc f9ce 	bl	80004e0 <__aeabi_f2d>
 8004144:	4602      	mov	r2, r0
 8004146:	460b      	mov	r3, r1
 8004148:	4620      	mov	r0, r4
 800414a:	4629      	mov	r1, r5
 800414c:	f7fc fa20 	bl	8000590 <__aeabi_dmul>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4610      	mov	r0, r2
 8004156:	4619      	mov	r1, r3
 8004158:	f7fc fcfc 	bl	8000b54 <__aeabi_d2f>
 800415c:	4602      	mov	r2, r0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	4618      	mov	r0, r3
 8004168:	f7fc f9ba 	bl	80004e0 <__aeabi_f2d>
 800416c:	a34a      	add	r3, pc, #296	@ (adr r3, 8004298 <QEI_compute_data+0x238>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f7fc fa0d 	bl	8000590 <__aeabi_dmul>
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	4614      	mov	r4, r2
 800417c:	461d      	mov	r5, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004182:	4618      	mov	r0, r3
 8004184:	f7fc f9ac 	bl	80004e0 <__aeabi_f2d>
 8004188:	4602      	mov	r2, r0
 800418a:	460b      	mov	r3, r1
 800418c:	4620      	mov	r0, r4
 800418e:	4629      	mov	r1, r5
 8004190:	f7fc f9fe 	bl	8000590 <__aeabi_dmul>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	4614      	mov	r4, r2
 800419a:	461d      	mov	r5, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	ee07 3a90 	vmov	s15, r3
 80041a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041a8:	ee17 0a90 	vmov	r0, s15
 80041ac:	f7fc f998 	bl	80004e0 <__aeabi_f2d>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	4620      	mov	r0, r4
 80041b6:	4629      	mov	r1, r5
 80041b8:	f7fc fb14 	bl	80007e4 <__aeabi_ddiv>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4614      	mov	r4, r2
 80041c2:	461d      	mov	r5, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fc f989 	bl	80004e0 <__aeabi_f2d>
 80041ce:	4602      	mov	r2, r0
 80041d0:	460b      	mov	r3, r1
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc f9db 	bl	8000590 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4610      	mov	r0, r2
 80041e0:	4619      	mov	r1, r3
 80041e2:	f7fc fcb7 	bl	8000b54 <__aeabi_d2f>
 80041e6:	4602      	mov	r2, r0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	edd3 7a03 	vldr	s15, [r3, #12]
 8004208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800420c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8004210:	edd7 7a03 	vldr	s15, [r7, #12]
 8004214:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800421c:	d00a      	beq.n	8004234 <QEI_compute_data+0x1d4>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800422a:	edd7 7a03 	vldr	s15, [r7, #12]
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	e001      	b.n	8004238 <QEI_compute_data+0x1d8>
 8004234:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 80042a4 <QEI_compute_data+0x244>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	ed93 7a04 	vldr	s14, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	edd3 7a05 	vldr	s15, [r3, #20]
 800424a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800424e:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8004252:	edd7 7a02 	vldr	s15, [r7, #8]
 8004256:	eef5 7a40 	vcmp.f32	s15, #0.0
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	d00a      	beq.n	8004276 <QEI_compute_data+0x216>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	ee07 3a90 	vmov	s15, r3
 8004268:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800426c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004274:	e001      	b.n	800427a <QEI_compute_data+0x21a>
 8004276:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80042a4 <QEI_compute_data+0x244>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	615a      	str	r2, [r3, #20]
}
 8004290:	bf00      	nop
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bdb0      	pop	{r4, r5, r7, pc}
 8004298:	54442d18 	.word	0x54442d18
 800429c:	400921fb 	.word	0x400921fb
 80042a0:	404e0000 	.word	0x404e0000
 80042a4:	00000000 	.word	0x00000000

080042a8 <QEI_reset>:

void QEI_reset(QEI *qei) {
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f04f 0200 	mov.w	r2, #0
 80042e6:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	615a      	str	r2, [r3, #20]
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8004314:	b580      	push	{r7, lr}
 8004316:	b08e      	sub	sp, #56	@ 0x38
 8004318:	af00      	add	r7, sp, #0
 800431a:	6178      	str	r0, [r7, #20]
 800431c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004320:	edc7 0a03 	vstr	s1, [r7, #12]
 8004324:	ed87 1a02 	vstr	s2, [r7, #8]
 8004328:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2200      	movs	r2, #0
 8004330:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8004352:	ed97 7a03 	vldr	s14, [r7, #12]
 8004356:	edd7 7a04 	vldr	s15, [r7, #16]
 800435a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800435e:	eef0 7ae7 	vabs.f32	s15, s15
 8004362:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8004366:	ed97 7a03 	vldr	s14, [r7, #12]
 800436a:	edd7 7a04 	vldr	s15, [r7, #16]
 800436e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	d503      	bpl.n	8004384 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	22ff      	movs	r2, #255	@ 0xff
 8004380:	741a      	strb	r2, [r3, #16]
 8004382:	e002      	b.n	800438a <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2201      	movs	r2, #1
 8004388:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 800438a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800438e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004396:	d006      	beq.n	80043a6 <Trapezoidal_Generator+0x92>
 8004398:	edd7 7a01 	vldr	s15, [r7, #4]
 800439c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80043a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a4:	d104      	bne.n	80043b0 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	60da      	str	r2, [r3, #12]
        return;
 80043ae:	e06f      	b.n	8004490 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 80043b0:	edd7 6a02 	vldr	s13, [r7, #8]
 80043b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80043b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043bc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 80043c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80043c4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80043c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80043cc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80043d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80043d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043dc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 80043e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 80043e4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80043e8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 80043f4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80043f8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80043fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004404:	db27      	blt.n	8004456 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8004406:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800440a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800440e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004412:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8004416:	edd7 6a07 	vldr	s13, [r7, #28]
 800441a:	ed97 7a02 	vldr	s14, [r7, #8]
 800441e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004422:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800442a:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 800442c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8004430:	edd7 7a06 	vldr	s15, [r7, #24]
 8004434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 800443e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004442:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004446:	edd7 7a06 	vldr	s15, [r7, #24]
 800444a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	edc3 7a02 	vstr	s15, [r3, #8]
 8004454:	e018      	b.n	8004488 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8004456:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800445a:	edd7 7a01 	vldr	s15, [r7, #4]
 800445e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004462:	eeb0 0a66 	vmov.f32	s0, s13
 8004466:	f00e fd1b 	bl	8012ea0 <sqrtf>
 800446a:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	6a3a      	ldr	r2, [r7, #32]
 8004478:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 800447a:	edd7 7a08 	vldr	s15, [r7, #32]
 800447e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	60da      	str	r2, [r3, #12]
}
 8004490:	3738      	adds	r7, #56	@ 0x38
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8004498:	b480      	push	{r7}
 800449a:	b08d      	sub	sp, #52	@ 0x34
 800449c:	af00      	add	r7, sp, #0
 800449e:	6178      	str	r0, [r7, #20]
 80044a0:	6139      	str	r1, [r7, #16]
 80044a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80044a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80044aa:	ed87 1a01 	vstr	s2, [r7, #4]
 80044ae:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80044b8:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800473c <Trapezoidal_Evaluated+0x2a4>
 80044bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	ed93 7a03 	vldr	s14, [r3, #12]
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80044d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044da:	f200 811b 	bhi.w	8004714 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2200      	movs	r2, #0
 80044e2:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	7c1b      	ldrb	r3, [r3, #16]
 80044e8:	b25b      	sxtb	r3, r3
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044f2:	ed97 7a00 	vldr	s14, [r7]
 80044f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	ed93 7a00 	vldr	s14, [r3]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	edd3 7a01 	vldr	s15, [r3, #4]
 800450a:	eeb4 7a67 	vcmp.f32	s14, s15
 800450e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004512:	d109      	bne.n	8004528 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	edd3 7a00 	vldr	s15, [r3]
 800451a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800451e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004522:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8004526:	e00c      	b.n	8004542 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	7c1b      	ldrb	r3, [r3, #16]
 800452c:	b25b      	sxtb	r3, r3
 800452e:	ee07 3a90 	vmov	s15, r3
 8004532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004536:	ed97 7a01 	vldr	s14, [r7, #4]
 800453a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800453e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	ed93 7a03 	vldr	s14, [r3, #12]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004556:	d824      	bhi.n	80045a2 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8004558:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800455c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004560:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	edd3 7a03 	vldr	s15, [r3, #12]
 800456a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	edd3 7a03 	vldr	s15, [r3, #12]
 8004574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004578:	edd7 7a03 	vldr	s15, [r7, #12]
 800457c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	ed93 7a03 	vldr	s14, [r3, #12]
 800458c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459e:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 80045a0:	e0c6      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80045ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b6:	d830      	bhi.n	800461a <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80045b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80045bc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80045c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	edd3 7a00 	vldr	s15, [r3]
 80045ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80045dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045e0:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	edd3 7a00 	vldr	s15, [r3]
 80045f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80045f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800460e:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f04f 0200 	mov.w	r2, #0
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	e08a      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	ed93 7a03 	vldr	s14, [r3, #12]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	edd3 7a02 	vldr	s15, [r3, #8]
 8004626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800462a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462e:	d900      	bls.n	8004632 <Trapezoidal_Evaluated+0x19a>
}
 8004630:	e07e      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8004632:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004636:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800463a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	edd3 7a00 	vldr	s15, [r3]
 8004644:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004652:	ed97 7a03 	vldr	s14, [r7, #12]
 8004656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800465a:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 800465e:	6a3b      	ldr	r3, [r7, #32]
 8004660:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	ed93 7a01 	vldr	s14, [r3, #4]
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	edd3 7a00 	vldr	s15, [r3]
 800466e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004676:	dd11      	ble.n	800469c <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	ed93 7a01 	vldr	s14, [r3, #4]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004688:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800468c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004690:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8004694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004698:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	ed93 7a03 	vldr	s14, [r3, #12]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80046a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ac:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 80046b0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80046b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046bc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80046c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80046c4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80046c8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80046cc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80046d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80046d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80046d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80046dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 80046ea:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80046ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80046fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8004704:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004708:	eef1 7a67 	vneg.f32	s15, s15
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8004712:	e00d      	b.n	8004730 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	2201      	movs	r2, #1
 8004718:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	609a      	str	r2, [r3, #8]
}
 8004730:	bf00      	nop
 8004732:	3734      	adds	r7, #52	@ 0x34
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	3a83126f 	.word	0x3a83126f

08004740 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	ed87 0a01 	vstr	s0, [r7, #4]
 800474a:	4603      	mov	r3, r0
 800474c:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 800474e:	78fb      	ldrb	r3, [r7, #3]
 8004750:	2b1a      	cmp	r3, #26
 8004752:	d018      	beq.n	8004786 <temperature_to_base+0x46>
 8004754:	2b1a      	cmp	r3, #26
 8004756:	dc1d      	bgt.n	8004794 <temperature_to_base+0x54>
 8004758:	2b18      	cmp	r3, #24
 800475a:	d002      	beq.n	8004762 <temperature_to_base+0x22>
 800475c:	2b19      	cmp	r3, #25
 800475e:	d003      	beq.n	8004768 <temperature_to_base+0x28>
 8004760:	e018      	b.n	8004794 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8004762:	edd7 7a01 	vldr	s15, [r7, #4]
 8004766:	e017      	b.n	8004798 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 8004768:	edd7 7a01 	vldr	s15, [r7, #4]
 800476c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80047a8 <temperature_to_base+0x68>
 8004770:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004774:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004778:	ee27 7a87 	vmul.f32	s14, s15, s14
 800477c:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 8004780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004784:	e008      	b.n	8004798 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 8004786:	edd7 7a01 	vldr	s15, [r7, #4]
 800478a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80047ac <temperature_to_base+0x6c>
 800478e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004792:	e001      	b.n	8004798 <temperature_to_base+0x58>
        default:
            return value;
 8004794:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004798:	eeb0 0a67 	vmov.f32	s0, s15
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	42000000 	.word	0x42000000
 80047ac:	43889333 	.word	0x43889333

080047b0 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80047ba:	4603      	mov	r3, r0
 80047bc:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	2b1a      	cmp	r3, #26
 80047c2:	d018      	beq.n	80047f6 <temperature_from_base+0x46>
 80047c4:	2b1a      	cmp	r3, #26
 80047c6:	dc1d      	bgt.n	8004804 <temperature_from_base+0x54>
 80047c8:	2b18      	cmp	r3, #24
 80047ca:	d002      	beq.n	80047d2 <temperature_from_base+0x22>
 80047cc:	2b19      	cmp	r3, #25
 80047ce:	d003      	beq.n	80047d8 <temperature_from_base+0x28>
 80047d0:	e018      	b.n	8004804 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80047d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80047d6:	e017      	b.n	8004808 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 80047d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80047dc:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 80047e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80047e4:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 80047e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047ec:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8004818 <temperature_from_base+0x68>
 80047f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047f4:	e008      	b.n	8004808 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 80047f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80047fa:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800481c <temperature_from_base+0x6c>
 80047fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004802:	e001      	b.n	8004808 <temperature_from_base+0x58>
        default:
            return value;
 8004804:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8004808:	eeb0 0a67 	vmov.f32	s0, s15
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	42000000 	.word	0x42000000
 800481c:	43889333 	.word	0x43889333

08004820 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2202      	movs	r2, #2
 8004832:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004834:	2300      	movs	r3, #0
 8004836:	60fb      	str	r3, [r7, #12]
 8004838:	e00a      	b.n	8004850 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	3304      	adds	r3, #4
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	3301      	adds	r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b1a      	cmp	r3, #26
 8004854:	ddf1      	ble.n	800483a <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a11      	ldr	r2, [pc, #68]	@ (80048a0 <init_length_converter+0x80>)
 800485a:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a11      	ldr	r2, [pc, #68]	@ (80048a4 <init_length_converter+0x84>)
 8004860:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004868:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a0e      	ldr	r2, [pc, #56]	@ (80048a8 <init_length_converter+0x88>)
 800486e:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a0e      	ldr	r2, [pc, #56]	@ (80048ac <init_length_converter+0x8c>)
 8004874:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a0d      	ldr	r2, [pc, #52]	@ (80048b0 <init_length_converter+0x90>)
 800487a:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a0d      	ldr	r2, [pc, #52]	@ (80048b4 <init_length_converter+0x94>)
 8004880:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a0c      	ldr	r2, [pc, #48]	@ (80048b8 <init_length_converter+0x98>)
 8004886:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004894:	bf00      	nop
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	3a83126f 	.word	0x3a83126f
 80048a4:	3c23d70a 	.word	0x3c23d70a
 80048a8:	447a0000 	.word	0x447a0000
 80048ac:	3cd013a9 	.word	0x3cd013a9
 80048b0:	3e9c0ebf 	.word	0x3e9c0ebf
 80048b4:	3f6a161e 	.word	0x3f6a161e
 80048b8:	44c92b02 	.word	0x44c92b02

080048bc <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	220a      	movs	r2, #10
 80048ce:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	e00a      	b.n	80048ec <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	3304      	adds	r3, #4
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2b1a      	cmp	r3, #26
 80048f0:	ddf1      	ble.n	80048d6 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a0e      	ldr	r2, [pc, #56]	@ (8004930 <init_mass_converter+0x74>)
 80048f6:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004934 <init_mass_converter+0x78>)
 80048fc:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004904:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a0b      	ldr	r2, [pc, #44]	@ (8004938 <init_mass_converter+0x7c>)
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a0b      	ldr	r2, [pc, #44]	@ (800493c <init_mass_converter+0x80>)
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a0a      	ldr	r2, [pc, #40]	@ (8004940 <init_mass_converter+0x84>)
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	358637bd 	.word	0x358637bd
 8004934:	3a83126f 	.word	0x3a83126f
 8004938:	447a0000 	.word	0x447a0000
 800493c:	3ce83d36 	.word	0x3ce83d36
 8004940:	3ee83d36 	.word	0x3ee83d36

08004944 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	220f      	movs	r2, #15
 8004956:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e00a      	b.n	8004974 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	3304      	adds	r3, #4
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3301      	adds	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b1a      	cmp	r3, #26
 8004978:	ddf1      	ble.n	800495e <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a0a      	ldr	r2, [pc, #40]	@ (80049a8 <init_angle_converter+0x64>)
 800497e:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004986:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a08      	ldr	r2, [pc, #32]	@ (80049ac <init_angle_converter+0x68>)
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	3c8efa35 	.word	0x3c8efa35
 80049ac:	3c80adfd 	.word	0x3c80adfd

080049b0 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2203      	movs	r2, #3
 80049bc:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2214      	movs	r2, #20
 80049c2:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e00a      	b.n	80049e0 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3301      	adds	r3, #1
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b1a      	cmp	r3, #26
 80049e4:	ddf1      	ble.n	80049ca <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a10      	ldr	r2, [pc, #64]	@ (8004a2c <init_time_converter+0x7c>)
 80049ea:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a10      	ldr	r2, [pc, #64]	@ (8004a30 <init_time_converter+0x80>)
 80049f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004a34 <init_time_converter+0x84>)
 80049f6:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80049fe:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a0d      	ldr	r2, [pc, #52]	@ (8004a38 <init_time_converter+0x88>)
 8004a04:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a0c      	ldr	r2, [pc, #48]	@ (8004a3c <init_time_converter+0x8c>)
 8004a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a40 <init_time_converter+0x90>)
 8004a10:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	3089705f 	.word	0x3089705f
 8004a30:	358637bd 	.word	0x358637bd
 8004a34:	3a83126f 	.word	0x3a83126f
 8004a38:	42700000 	.word	0x42700000
 8004a3c:	45610000 	.word	0x45610000
 8004a40:	47a8c000 	.word	0x47a8c000

08004a44 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2204      	movs	r2, #4
 8004a50:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2218      	movs	r2, #24
 8004a56:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e00a      	b.n	8004a74 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	3304      	adds	r3, #4
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3301      	adds	r3, #1
 8004a72:	60fb      	str	r3, [r7, #12]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b1a      	cmp	r3, #26
 8004a78:	ddf1      	ble.n	8004a5e <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a05      	ldr	r2, [pc, #20]	@ (8004a94 <init_temperature_converter+0x50>)
 8004a7e:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a05      	ldr	r2, [pc, #20]	@ (8004a98 <init_temperature_converter+0x54>)
 8004a84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004a86:	bf00      	nop
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	08004741 	.word	0x08004741
 8004a98:	080047b1 	.word	0x080047b1

08004a9c <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff feba 	bl	8004820 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3378      	adds	r3, #120	@ 0x78
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff ff03 	bl	80048bc <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	33f0      	adds	r3, #240	@ 0xf0
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7ff ff42 	bl	8004944 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff ff72 	bl	80049b0 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff ffb6 	bl	8004a44 <init_temperature_converter>
}
 8004ad8:	bf00      	nop
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 8004aea:	79fb      	ldrb	r3, [r7, #7]
 8004aec:	2b1a      	cmp	r3, #26
 8004aee:	d803      	bhi.n	8004af8 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	4a05      	ldr	r2, [pc, #20]	@ (8004b08 <UnitConverter_get_unit_type+0x28>)
 8004af4:	5cd3      	ldrb	r3, [r2, r3]
 8004af6:	e000      	b.n	8004afa <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20000318 	.word	0x20000318

08004b0c <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	ed87 0a02 	vstr	s0, [r7, #8]
 8004b18:	460b      	mov	r3, r1
 8004b1a:	71fb      	strb	r3, [r7, #7]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff ffdc 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 8004b2c:	79bb      	ldrb	r3, [r7, #6]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff ffd6 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004b34:	4603      	mov	r3, r0
 8004b36:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8004b38:	7efa      	ldrb	r2, [r7, #27]
 8004b3a:	7ebb      	ldrb	r3, [r7, #26]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d002      	beq.n	8004b46 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 8004b40:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b44:	e03b      	b.n	8004bbe <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 8004b46:	7efa      	ldrb	r2, [r7, #27]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	1a9b      	subs	r3, r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b62:	79fa      	ldrb	r2, [r7, #7]
 8004b64:	4610      	mov	r0, r2
 8004b66:	ed97 0a02 	vldr	s0, [r7, #8]
 8004b6a:	4798      	blx	r3
 8004b6c:	ed87 0a07 	vstr	s0, [r7, #28]
 8004b70:	e00c      	b.n	8004b8c <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	edd3 7a00 	vldr	s15, [r3]
 8004b80:	ed97 7a02 	vldr	s14, [r7, #8]
 8004b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b88:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b98:	79ba      	ldrb	r2, [r7, #6]
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	ed97 0a07 	vldr	s0, [r7, #28]
 8004ba0:	4798      	blx	r3
 8004ba2:	eef0 7a40 	vmov.f32	s15, s0
 8004ba6:	e00a      	b.n	8004bbe <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8004ba8:	79bb      	ldrb	r3, [r7, #6]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4413      	add	r3, r2
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	ed93 7a00 	vldr	s14, [r3]
 8004bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 8004bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8004bc2:	3720      	adds	r7, #32
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	71fb      	strb	r3, [r7, #7]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff ff7e 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d111      	bne.n	8004c0e <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 8004bea:	79bb      	ldrb	r3, [r7, #6]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff77 	bl	8004ae0 <UnitConverter_get_unit_type>
 8004bf2:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d10a      	bne.n	8004c0e <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8004bf8:	79ba      	ldrb	r2, [r7, #6]
 8004bfa:	79fb      	ldrb	r3, [r7, #7]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	ed97 0a02 	vldr	s0, [r7, #8]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f7ff ff82 	bl	8004b0c <UnitConverter_convert>
 8004c08:	eef0 7a40 	vmov.f32	s15, s0
 8004c0c:	e001      	b.n	8004c12 <UnitConverter_angle+0x4a>
    }
    return value;
 8004c0e:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8004c12:	eeb0 0a67 	vmov.f32	s0, s15
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08c      	sub	sp, #48	@ 0x30
 8004c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c26:	2200      	movs	r2, #0
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004c2e:	1d3b      	adds	r3, r7, #4
 8004c30:	2220      	movs	r2, #32
 8004c32:	2100      	movs	r1, #0
 8004c34:	4618      	mov	r0, r3
 8004c36:	f00e f819 	bl	8012c6c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004c3a:	4b39      	ldr	r3, [pc, #228]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c3c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004c40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004c42:	4b37      	ldr	r3, [pc, #220]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c44:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004c48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004c4a:	4b35      	ldr	r3, [pc, #212]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004c50:	4b33      	ldr	r3, [pc, #204]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004c56:	4b32      	ldr	r3, [pc, #200]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004c5c:	4b30      	ldr	r3, [pc, #192]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004c62:	4b2f      	ldr	r3, [pc, #188]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c64:	2204      	movs	r2, #4
 8004c66:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004c68:	4b2d      	ldr	r3, [pc, #180]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8004c74:	4b2a      	ldr	r3, [pc, #168]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c76:	2202      	movs	r2, #2
 8004c78:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004c7a:	4b29      	ldr	r3, [pc, #164]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004c82:	4b27      	ldr	r3, [pc, #156]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004c88:	4b25      	ldr	r3, [pc, #148]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004c8e:	4b24      	ldr	r3, [pc, #144]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004c96:	4b22      	ldr	r3, [pc, #136]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004c9c:	4b20      	ldr	r3, [pc, #128]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004ca4:	481e      	ldr	r0, [pc, #120]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004ca6:	f006 f9b3 	bl	800b010 <HAL_ADC_Init>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8004cb0:	f004 f9dc 	bl	800906c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4818      	ldr	r0, [pc, #96]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004cc0:	f007 fad2 	bl	800c268 <HAL_ADCEx_MultiModeConfigChannel>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8004cca:	f004 f9cf 	bl	800906c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004cce:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <MX_ADC1_Init+0x108>)
 8004cd0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004cd2:	2306      	movs	r3, #6
 8004cd4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004cd6:	2307      	movs	r3, #7
 8004cd8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004cda:	237f      	movs	r3, #127	@ 0x7f
 8004cdc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004cde:	2304      	movs	r3, #4
 8004ce0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004ce6:	1d3b      	adds	r3, r7, #4
 8004ce8:	4619      	mov	r1, r3
 8004cea:	480d      	ldr	r0, [pc, #52]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004cec:	f006 fc3e 	bl	800b56c <HAL_ADC_ConfigChannel>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8004cf6:	f004 f9b9 	bl	800906c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8004cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004d28 <MX_ADC1_Init+0x10c>)
 8004cfc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004cfe:	230c      	movs	r3, #12
 8004d00:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004d02:	1d3b      	adds	r3, r7, #4
 8004d04:	4619      	mov	r1, r3
 8004d06:	4806      	ldr	r0, [pc, #24]	@ (8004d20 <MX_ADC1_Init+0x104>)
 8004d08:	f006 fc30 	bl	800b56c <HAL_ADC_ConfigChannel>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8004d12:	f004 f9ab 	bl	800906c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004d16:	bf00      	nop
 8004d18:	3730      	adds	r7, #48	@ 0x30
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000630 	.word	0x20000630
 8004d24:	19200040 	.word	0x19200040
 8004d28:	1d500080 	.word	0x1d500080

08004d2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b09e      	sub	sp, #120	@ 0x78
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	605a      	str	r2, [r3, #4]
 8004d3e:	609a      	str	r2, [r3, #8]
 8004d40:	60da      	str	r2, [r3, #12]
 8004d42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d44:	f107 0310 	add.w	r3, r7, #16
 8004d48:	2254      	movs	r2, #84	@ 0x54
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f00d ff8d 	bl	8012c6c <memset>
  if(adcHandle->Instance==ADC1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d5a:	d15e      	bne.n	8004e1a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004d5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004d62:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004d66:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d68:	f107 0310 	add.w	r3, r7, #16
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f008 ff8b 	bl	800dc88 <HAL_RCCEx_PeriphCLKConfig>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004d78:	f004 f978 	bl	800906c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004d7c:	4b29      	ldr	r3, [pc, #164]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d80:	4a28      	ldr	r2, [pc, #160]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d82:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004d88:	4b26      	ldr	r3, [pc, #152]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d94:	4b23      	ldr	r3, [pc, #140]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d98:	4a22      	ldr	r2, [pc, #136]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004da0:	4b20      	ldr	r3, [pc, #128]	@ (8004e24 <HAL_ADC_MspInit+0xf8>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004dac:	2303      	movs	r3, #3
 8004dae:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004db0:	2303      	movs	r3, #3
 8004db2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db4:	2300      	movs	r3, #0
 8004db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004db8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	481a      	ldr	r0, [pc, #104]	@ (8004e28 <HAL_ADC_MspInit+0xfc>)
 8004dc0:	f007 ff9c 	bl	800ccfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004dc4:	4b19      	ldr	r3, [pc, #100]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dc6:	4a1a      	ldr	r2, [pc, #104]	@ (8004e30 <HAL_ADC_MspInit+0x104>)
 8004dc8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004dca:	4b18      	ldr	r3, [pc, #96]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dcc:	2205      	movs	r2, #5
 8004dce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dd0:	4b16      	ldr	r3, [pc, #88]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dd6:	4b15      	ldr	r3, [pc, #84]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ddc:	4b13      	ldr	r3, [pc, #76]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dde:	2280      	movs	r2, #128	@ 0x80
 8004de0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004de2:	4b12      	ldr	r3, [pc, #72]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004de4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004de8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004dea:	4b10      	ldr	r3, [pc, #64]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004df0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004df2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004df4:	2220      	movs	r2, #32
 8004df6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004df8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004dfe:	480b      	ldr	r0, [pc, #44]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e00:	f007 fc4a 	bl	800c698 <HAL_DMA_Init>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8004e0a:	f004 f92f 	bl	800906c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a06      	ldr	r2, [pc, #24]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e12:	655a      	str	r2, [r3, #84]	@ 0x54
 8004e14:	4a05      	ldr	r2, [pc, #20]	@ (8004e2c <HAL_ADC_MspInit+0x100>)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004e1a:	bf00      	nop
 8004e1c:	3778      	adds	r7, #120	@ 0x78
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
 8004e28:	48000800 	.word	0x48000800
 8004e2c:	2000069c 	.word	0x2000069c
 8004e30:	40020008 	.word	0x40020008

08004e34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004e3a:	4b22      	ldr	r3, [pc, #136]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e3e:	4a21      	ldr	r2, [pc, #132]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e40:	f043 0304 	orr.w	r3, r3, #4
 8004e44:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e46:	4b1f      	ldr	r3, [pc, #124]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e52:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e56:	4a1b      	ldr	r2, [pc, #108]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e5e:	4b19      	ldr	r3, [pc, #100]	@ (8004ec4 <MX_DMA_Init+0x90>)
 8004e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	2100      	movs	r1, #0
 8004e6e:	200b      	movs	r0, #11
 8004e70:	f007 fbdd 	bl	800c62e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004e74:	200b      	movs	r0, #11
 8004e76:	f007 fbf4 	bl	800c662 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	200c      	movs	r0, #12
 8004e80:	f007 fbd5 	bl	800c62e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004e84:	200c      	movs	r0, #12
 8004e86:	f007 fbec 	bl	800c662 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	200d      	movs	r0, #13
 8004e90:	f007 fbcd 	bl	800c62e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004e94:	200d      	movs	r0, #13
 8004e96:	f007 fbe4 	bl	800c662 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	200e      	movs	r0, #14
 8004ea0:	f007 fbc5 	bl	800c62e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8004ea4:	200e      	movs	r0, #14
 8004ea6:	f007 fbdc 	bl	800c662 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2100      	movs	r1, #0
 8004eae:	200f      	movs	r0, #15
 8004eb0:	f007 fbbd 	bl	800c62e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004eb4:	200f      	movs	r0, #15
 8004eb6:	f007 fbd4 	bl	800c662 <HAL_NVIC_EnableIRQ>

}
 8004eba:	bf00      	nop
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	40021000 	.word	0x40021000

08004ec8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ece:	f107 0314 	add.w	r3, r7, #20
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
 8004ed8:	609a      	str	r2, [r3, #8]
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ede:	4b75      	ldr	r3, [pc, #468]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee2:	4a74      	ldr	r2, [pc, #464]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004ee4:	f043 0304 	orr.w	r3, r3, #4
 8004ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004eea:	4b72      	ldr	r3, [pc, #456]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ef6:	4b6f      	ldr	r3, [pc, #444]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004efa:	4a6e      	ldr	r2, [pc, #440]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004efc:	f043 0320 	orr.w	r3, r3, #32
 8004f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f02:	4b6c      	ldr	r3, [pc, #432]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f06:	f003 0320 	and.w	r3, r3, #32
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f0e:	4b69      	ldr	r3, [pc, #420]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f12:	4a68      	ldr	r2, [pc, #416]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004f14:	f043 0301 	orr.w	r3, r3, #1
 8004f18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f1a:	4b66      	ldr	r3, [pc, #408]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f1e:	f003 0301 	and.w	r3, r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
 8004f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f26:	4b63      	ldr	r3, [pc, #396]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f2a:	4a62      	ldr	r2, [pc, #392]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004f2c:	f043 0302 	orr.w	r3, r3, #2
 8004f30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f32:	4b60      	ldr	r3, [pc, #384]	@ (80050b4 <MX_GPIO_Init+0x1ec>)
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	607b      	str	r3, [r7, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8004f44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f48:	f008 f872 	bl	800d030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f52:	4859      	ldr	r0, [pc, #356]	@ (80050b8 <MX_GPIO_Init+0x1f0>)
 8004f54:	f008 f86c 	bl	800d030 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004f5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f5e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f64:	2300      	movs	r3, #0
 8004f66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	4619      	mov	r1, r3
 8004f6e:	4852      	ldr	r0, [pc, #328]	@ (80050b8 <MX_GPIO_Init+0x1f0>)
 8004f70:	f007 fec4 	bl	800ccfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8004f74:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8004f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f82:	2300      	movs	r3, #0
 8004f84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f90:	f007 feb4 	bl	800ccfc <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 8004f94:	f241 0301 	movw	r3, #4097	@ 0x1001
 8004f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004f9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4844      	ldr	r0, [pc, #272]	@ (80050bc <MX_GPIO_Init+0x1f4>)
 8004fac:	f007 fea6 	bl	800ccfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8004fb0:	2306      	movs	r3, #6
 8004fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004fb8:	2302      	movs	r3, #2
 8004fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	483e      	ldr	r0, [pc, #248]	@ (80050bc <MX_GPIO_Init+0x1f4>)
 8004fc4:	f007 fe9a 	bl	800ccfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fda:	f107 0314 	add.w	r3, r7, #20
 8004fde:	4619      	mov	r1, r3
 8004fe0:	4835      	ldr	r0, [pc, #212]	@ (80050b8 <MX_GPIO_Init+0x1f0>)
 8004fe2:	f007 fe8b 	bl	800ccfc <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8004fe6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004fec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ff6:	f107 0314 	add.w	r3, r7, #20
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	482e      	ldr	r0, [pc, #184]	@ (80050b8 <MX_GPIO_Init+0x1f0>)
 8004ffe:	f007 fe7d 	bl	800ccfc <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8005002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005008:	2300      	movs	r3, #0
 800500a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800500c:	2302      	movs	r3, #2
 800500e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8005010:	f107 0314 	add.w	r3, r7, #20
 8005014:	4619      	mov	r1, r3
 8005016:	4828      	ldr	r0, [pc, #160]	@ (80050b8 <MX_GPIO_Init+0x1f0>)
 8005018:	f007 fe70 	bl	800ccfc <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 800501c:	2310      	movs	r3, #16
 800501e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005020:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 800502a:	f107 0314 	add.w	r3, r7, #20
 800502e:	4619      	mov	r1, r3
 8005030:	4822      	ldr	r0, [pc, #136]	@ (80050bc <MX_GPIO_Init+0x1f4>)
 8005032:	f007 fe63 	bl	800ccfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8005036:	2340      	movs	r3, #64	@ 0x40
 8005038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800503a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800503e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005040:	2301      	movs	r3, #1
 8005042:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 8005044:	f107 0314 	add.w	r3, r7, #20
 8005048:	4619      	mov	r1, r3
 800504a:	481c      	ldr	r0, [pc, #112]	@ (80050bc <MX_GPIO_Init+0x1f4>)
 800504c:	f007 fe56 	bl	800ccfc <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8005050:	2380      	movs	r3, #128	@ 0x80
 8005052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005054:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005058:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800505a:	2302      	movs	r3, #2
 800505c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 800505e:	f107 0314 	add.w	r3, r7, #20
 8005062:	4619      	mov	r1, r3
 8005064:	4815      	ldr	r0, [pc, #84]	@ (80050bc <MX_GPIO_Init+0x1f4>)
 8005066:	f007 fe49 	bl	800ccfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800506a:	2200      	movs	r2, #0
 800506c:	2100      	movs	r1, #0
 800506e:	2006      	movs	r0, #6
 8005070:	f007 fadd 	bl	800c62e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005074:	2006      	movs	r0, #6
 8005076:	f007 faf4 	bl	800c662 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800507a:	2200      	movs	r2, #0
 800507c:	2100      	movs	r1, #0
 800507e:	200a      	movs	r0, #10
 8005080:	f007 fad5 	bl	800c62e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8005084:	200a      	movs	r0, #10
 8005086:	f007 faec 	bl	800c662 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800508a:	2200      	movs	r2, #0
 800508c:	2100      	movs	r1, #0
 800508e:	2017      	movs	r0, #23
 8005090:	f007 facd 	bl	800c62e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8005094:	2017      	movs	r0, #23
 8005096:	f007 fae4 	bl	800c662 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800509a:	2200      	movs	r2, #0
 800509c:	2100      	movs	r1, #0
 800509e:	2028      	movs	r0, #40	@ 0x28
 80050a0:	f007 fac5 	bl	800c62e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80050a4:	2028      	movs	r0, #40	@ 0x28
 80050a6:	f007 fadc 	bl	800c662 <HAL_NVIC_EnableIRQ>

}
 80050aa:	bf00      	nop
 80050ac:	3728      	adds	r7, #40	@ 0x28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40021000 	.word	0x40021000
 80050b8:	48000800 	.word	0x48000800
 80050bc:	48000400 	.word	0x48000400

080050c0 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b096      	sub	sp, #88	@ 0x58
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80050cc:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 80050d6:	1d3b      	adds	r3, r7, #4
 80050d8:	2201      	movs	r2, #1
 80050da:	2101      	movs	r1, #1
 80050dc:	f00d f855 	bl	801218a <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f00d fcc5 	bl	8012a7e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f00d fcbb 	bl	8012a7e <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8005114:	4619      	mov	r1, r3
 8005116:	4610      	mov	r0, r2
 8005118:	f00d fcb1 	bl	8012a7e <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8005128:	4619      	mov	r1, r3
 800512a:	ed97 0a02 	vldr	s0, [r7, #8]
 800512e:	4610      	mov	r0, r2
 8005130:	f00d fc34 	bl	801299c <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8005146:	461a      	mov	r2, r3
 8005148:	f00d fbae 	bl	80128a8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 800515e:	461a      	mov	r2, r3
 8005160:	f00c ffd8 	bl	8012114 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8005176:	461a      	mov	r2, r3
 8005178:	f00d fb96 	bl	80128a8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 800518e:	461a      	mov	r2, r3
 8005190:	f00d fb8a 	bl	80128a8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 80051a6:	461a      	mov	r2, r3
 80051a8:	f00d fb7e 	bl	80128a8 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 80051be:	4619      	mov	r1, r3
 80051c0:	eeb0 0a67 	vmov.f32	s0, s15
 80051c4:	4610      	mov	r0, r2
 80051c6:	f00d fbe9 	bl	801299c <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80051dc:	461a      	mov	r2, r3
 80051de:	f00c ff99 	bl	8012114 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 80051f4:	461a      	mov	r2, r3
 80051f6:	f00d fb57 	bl	80128a8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 800520c:	461a      	mov	r2, r3
 800520e:	f00d fb4b 	bl	80128a8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8005224:	461a      	mov	r2, r3
 8005226:	f00c ff75 	bl	8012114 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f00c ffbe 	bl	80121ba <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8005250:	461a      	mov	r2, r3
 8005252:	f00d fb29 	bl	80128a8 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8005268:	461a      	mov	r2, r3
 800526a:	f00d fb1d 	bl	80128a8 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8005280:	461a      	mov	r2, r3
 8005282:	f00d fb11 	bl	80128a8 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8005298:	461a      	mov	r2, r3
 800529a:	f00d fbb5 	bl	8012a08 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 80052b0:	461a      	mov	r2, r3
 80052b2:	f00d faf9 	bl	80128a8 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 80052c8:	461a      	mov	r2, r3
 80052ca:	f00c ff23 	bl	8012114 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 80052e0:	461a      	mov	r2, r3
 80052e2:	f00d fae1 	bl	80128a8 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 80052e6:	f107 0310 	add.w	r3, r7, #16
 80052ea:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80052ee:	2204      	movs	r2, #4
 80052f0:	2104      	movs	r1, #4
 80052f2:	f00c ff4a 	bl	801218a <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8005302:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8005306:	4619      	mov	r1, r3
 8005308:	f00d face 	bl	80128a8 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8005312:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8005316:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800531a:	4618      	mov	r0, r3
 800531c:	f00d fb74 	bl	8012a08 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 800532c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005330:	4618      	mov	r0, r3
 8005332:	f00d fab9 	bl	80128a8 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8005346:	ee07 3a90 	vmov	s15, r3
}
 800534a:	eeb0 0a67 	vmov.f32	s0, s15
 800534e:	3758      	adds	r7, #88	@ 0x58
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8005354:	b5b0      	push	{r4, r5, r7, lr}
 8005356:	b0a4      	sub	sp, #144	@ 0x90
 8005358:	af00      	add	r7, sp, #0
 800535a:	6178      	str	r0, [r7, #20]
 800535c:	6139      	str	r1, [r7, #16]
 800535e:	60fa      	str	r2, [r7, #12]
 8005360:	ed87 0a02 	vstr	s0, [r7, #8]
 8005364:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	68ba      	ldr	r2, [r7, #8]
 800536c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8005378:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800537c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005386:	f04f 0300 	mov.w	r3, #0
 800538a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800539c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80053a0:	673b      	str	r3, [r7, #112]	@ 0x70
 80053a2:	f04f 0300 	mov.w	r3, #0
 80053a6:	677b      	str	r3, [r7, #116]	@ 0x74
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 80053ae:	4bc6      	ldr	r3, [pc, #792]	@ (80056c8 <Kalman_Start+0x374>)
 80053b0:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 80053b4:	461d      	mov	r5, r3
 80053b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053c2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80053c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 80053ca:	f107 031c 	add.w	r3, r7, #28
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]
 80053d2:	605a      	str	r2, [r3, #4]
 80053d4:	609a      	str	r2, [r3, #8]
 80053d6:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80053e8:	e028      	b.n	800543c <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 80053ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4413      	add	r3, r2
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	6979      	ldr	r1, [r7, #20]
 80053f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053fc:	3314      	adds	r3, #20
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8005404:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	3390      	adds	r3, #144	@ 0x90
 800540c:	443b      	add	r3, r7
 800540e:	3b64      	subs	r3, #100	@ 0x64
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	6979      	ldr	r1, [r7, #20]
 8005414:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005418:	3398      	adds	r3, #152	@ 0x98
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	440b      	add	r3, r1
 800541e:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005426:	3304      	adds	r3, #4
 8005428:	009b      	lsls	r3, r3, #2
 800542a:	4413      	add	r3, r2
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8005432:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005436:	3301      	adds	r3, #1
 8005438:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800543c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005440:	2b0f      	cmp	r3, #15
 8005442:	ddd2      	ble.n	80053ea <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8005444:	2300      	movs	r3, #0
 8005446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800544a:	e03a      	b.n	80054c2 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 800544c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	3390      	adds	r3, #144	@ 0x90
 8005454:	443b      	add	r3, r7
 8005456:	3b74      	subs	r3, #116	@ 0x74
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	6979      	ldr	r1, [r7, #20]
 800545c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8005466:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	6979      	ldr	r1, [r7, #20]
 8005474:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005478:	3324      	adds	r3, #36	@ 0x24
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	440b      	add	r3, r1
 800547e:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8005480:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	3390      	adds	r3, #144	@ 0x90
 8005488:	443b      	add	r3, r7
 800548a:	3b14      	subs	r3, #20
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	6979      	ldr	r1, [r7, #20]
 8005490:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005494:	3328      	adds	r3, #40	@ 0x28
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 800549c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	3390      	adds	r3, #144	@ 0x90
 80054a4:	443b      	add	r3, r7
 80054a6:	3b24      	subs	r3, #36	@ 0x24
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	6979      	ldr	r1, [r7, #20]
 80054ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054b0:	332c      	adds	r3, #44	@ 0x2c
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	440b      	add	r3, r1
 80054b6:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 80054b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054bc:	3301      	adds	r3, #1
 80054be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80054c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	ddc0      	ble.n	800544c <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2201      	movs	r2, #1
 80054d4:	2104      	movs	r1, #4
 80054d6:	f00c fe58 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	3310      	adds	r3, #16
 80054e4:	2204      	movs	r2, #4
 80054e6:	2104      	movs	r1, #4
 80054e8:	f00c fe4f 	bl	801218a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	3350      	adds	r3, #80	@ 0x50
 80054f6:	2204      	movs	r2, #4
 80054f8:	2104      	movs	r1, #4
 80054fa:	f00c fe46 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	3390      	adds	r3, #144	@ 0x90
 8005508:	2201      	movs	r2, #1
 800550a:	2104      	movs	r1, #4
 800550c:	f00c fe3d 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	33a0      	adds	r3, #160	@ 0xa0
 800551a:	2204      	movs	r2, #4
 800551c:	2101      	movs	r1, #1
 800551e:	f00c fe34 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	33b0      	adds	r3, #176	@ 0xb0
 800552c:	2201      	movs	r2, #1
 800552e:	2104      	movs	r1, #4
 8005530:	f00c fe2b 	bl	801218a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	33c8      	adds	r3, #200	@ 0xc8
 800553e:	2204      	movs	r2, #4
 8005540:	2104      	movs	r1, #4
 8005542:	f00c fe22 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005552:	2201      	movs	r2, #1
 8005554:	2104      	movs	r1, #4
 8005556:	f00c fe18 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8005566:	2204      	movs	r2, #4
 8005568:	2101      	movs	r1, #1
 800556a:	f00c fe0e 	bl	801218a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800557a:	2204      	movs	r2, #4
 800557c:	2104      	movs	r1, #4
 800557e:	f00c fe04 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800558e:	2204      	movs	r2, #4
 8005590:	2104      	movs	r1, #4
 8005592:	f00c fdfa 	bl	801218a <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80055a2:	2201      	movs	r2, #1
 80055a4:	2104      	movs	r1, #4
 80055a6:	f00c fdf0 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 80055b6:	2201      	movs	r2, #1
 80055b8:	2104      	movs	r1, #4
 80055ba:	f00c fde6 	bl	801218a <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 80055ca:	2204      	movs	r2, #4
 80055cc:	2101      	movs	r1, #1
 80055ce:	f00c fddc 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 80055de:	2201      	movs	r2, #1
 80055e0:	2101      	movs	r1, #1
 80055e2:	f00c fdd2 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 80055f2:	2201      	movs	r2, #1
 80055f4:	2101      	movs	r1, #1
 80055f6:	f00c fdc8 	bl	801218a <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8005606:	2201      	movs	r2, #1
 8005608:	2104      	movs	r1, #4
 800560a:	f00c fdbe 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800561a:	2201      	movs	r2, #1
 800561c:	2104      	movs	r1, #4
 800561e:	f00c fdb4 	bl	801218a <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800562e:	2201      	movs	r2, #1
 8005630:	2101      	movs	r1, #1
 8005632:	f00c fdaa 	bl	801218a <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8005642:	2201      	movs	r2, #1
 8005644:	2101      	movs	r1, #1
 8005646:	f00c fda0 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8005656:	2201      	movs	r2, #1
 8005658:	2101      	movs	r1, #1
 800565a:	f00c fd96 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 800566a:	2201      	movs	r2, #1
 800566c:	2104      	movs	r1, #4
 800566e:	f00c fd8c 	bl	801218a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800567e:	2201      	movs	r2, #1
 8005680:	2101      	movs	r1, #1
 8005682:	f00c fd82 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005692:	2204      	movs	r2, #4
 8005694:	2104      	movs	r1, #4
 8005696:	f00c fd78 	bl	801218a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	33c4      	adds	r3, #196	@ 0xc4
 80056a4:	2201      	movs	r2, #1
 80056a6:	2101      	movs	r1, #1
 80056a8:	f00c fd6f 	bl	801218a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 80056b8:	2201      	movs	r2, #1
 80056ba:	2101      	movs	r1, #1
 80056bc:	f00c fd65 	bl	801218a <arm_mat_init_f32>
}
 80056c0:	bf00      	nop
 80056c2:	3790      	adds	r7, #144	@ 0x90
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bdb0      	pop	{r4, r5, r7, pc}
 80056c8:	08014b38 	.word	0x08014b38

080056cc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80056d0:	f3bf 8f4f 	dsb	sy
}
 80056d4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80056d6:	4b06      	ldr	r3, [pc, #24]	@ (80056f0 <__NVIC_SystemReset+0x24>)
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80056de:	4904      	ldr	r1, [pc, #16]	@ (80056f0 <__NVIC_SystemReset+0x24>)
 80056e0:	4b04      	ldr	r3, [pc, #16]	@ (80056f4 <__NVIC_SystemReset+0x28>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80056e6:	f3bf 8f4f 	dsb	sy
}
 80056ea:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80056ec:	bf00      	nop
 80056ee:	e7fd      	b.n	80056ec <__NVIC_SystemReset+0x20>
 80056f0:	e000ed00 	.word	0xe000ed00
 80056f4:	05fa0004 	.word	0x05fa0004

080056f8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80056fe:	f005 f9d2 	bl	800aaa6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005702:	f000 f88d 	bl	8005820 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8005706:	f7ff fbdf 	bl	8004ec8 <MX_GPIO_Init>
	MX_DMA_Init();
 800570a:	f7ff fb93 	bl	8004e34 <MX_DMA_Init>
	MX_ADC1_Init();
 800570e:	f7ff fa85 	bl	8004c1c <MX_ADC1_Init>
	MX_TIM2_Init();
 8005712:	f004 fbdd 	bl	8009ed0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8005716:	f004 fc29 	bl	8009f6c <MX_TIM3_Init>
	MX_TIM4_Init();
 800571a:	f004 fc7d 	bl	800a018 <MX_TIM4_Init>
	MX_TIM5_Init();
 800571e:	f004 fcd1 	bl	800a0c4 <MX_TIM5_Init>
	MX_TIM8_Init();
 8005722:	f004 fd25 	bl	800a170 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8005726:	f004 ffe7 	bl	800a6f8 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 800572a:	f004 fddf 	bl	800a2ec <MX_TIM16_Init>
	MX_TIM1_Init();
 800572e:	f004 fb3b 	bl	8009da8 <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8005732:	f004 ff97 	bl	800a664 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8005736:	f003 fc9f 	bl	8009078 <plotter_begin>

	prismatic_axis.position = prismatic_encoder.mm;
 800573a:	4b28      	ldr	r3, [pc, #160]	@ (80057dc <main+0xe4>)
 800573c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800573e:	4a28      	ldr	r2, [pc, #160]	@ (80057e0 <main+0xe8>)
 8005740:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8005742:	4b28      	ldr	r3, [pc, #160]	@ (80057e4 <main+0xec>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	4a28      	ldr	r2, [pc, #160]	@ (80057e8 <main+0xf0>)
 8005748:	6013      	str	r3, [r2, #0]

	safety_state = SAFETY_NORMAL;
 800574a:	4b28      	ldr	r3, [pc, #160]	@ (80057ec <main+0xf4>)
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8005750:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <main+0xf8>)
 8005752:	2200      	movs	r2, #0
 8005754:	701a      	strb	r2, [r3, #0]
	pilot_light_state = false;
 8005756:	4b27      	ldr	r3, [pc, #156]	@ (80057f4 <main+0xfc>)
 8005758:	2200      	movs	r2, #0
 800575a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 800575c:	4b26      	ldr	r3, [pc, #152]	@ (80057f8 <main+0x100>)
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
	position_control_tick = 0;
 8005762:	4b26      	ldr	r3, [pc, #152]	@ (80057fc <main+0x104>)
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]

	if (first_startup) {
 8005768:	4b25      	ldr	r3, [pc, #148]	@ (8005800 <main+0x108>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d032      	beq.n	80057d6 <main+0xde>
		// Check if already at home position
		bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8005770:	2101      	movs	r1, #1
 8005772:	4824      	ldr	r0, [pc, #144]	@ (8005804 <main+0x10c>)
 8005774:	f007 fc44 	bl	800d000 <HAL_GPIO_ReadPin>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	bf14      	ite	ne
 800577e:	2301      	movne	r3, #1
 8005780:	2300      	moveq	r3, #0
 8005782:	71fb      	strb	r3, [r7, #7]
		UPPER_PHOTO_Pin);
		bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005784:	2140      	movs	r1, #64	@ 0x40
 8005786:	481f      	ldr	r0, [pc, #124]	@ (8005804 <main+0x10c>)
 8005788:	f007 fc3a 	bl	800d000 <HAL_GPIO_ReadPin>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	bf14      	ite	ne
 8005792:	2301      	movne	r3, #1
 8005794:	2300      	moveq	r3, #0
 8005796:	71bb      	strb	r3, [r7, #6]

		if (up_photo_detected && prox_detected) {
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d018      	beq.n	80057d0 <main+0xd8>
 800579e:	79bb      	ldrb	r3, [r7, #6]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d015      	beq.n	80057d0 <main+0xd8>
			// Already at home position - no need to home
			first_startup = false;
 80057a4:	4b16      	ldr	r3, [pc, #88]	@ (8005800 <main+0x108>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	701a      	strb	r2, [r3, #0]
			homing_active = false;
 80057aa:	4b17      	ldr	r3, [pc, #92]	@ (8005808 <main+0x110>)
 80057ac:	2200      	movs	r2, #0
 80057ae:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 80057b0:	4b16      	ldr	r3, [pc, #88]	@ (800580c <main+0x114>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	701a      	strb	r2, [r3, #0]

			// Clear any sensor flags
			up_photo = false;
 80057b6:	4b16      	ldr	r3, [pc, #88]	@ (8005810 <main+0x118>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80057bc:	4b15      	ldr	r3, [pc, #84]	@ (8005814 <main+0x11c>)
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80057c2:	4b15      	ldr	r3, [pc, #84]	@ (8005818 <main+0x120>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 80057c8:	4b14      	ldr	r3, [pc, #80]	@ (800581c <main+0x124>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
 80057ce:	e002      	b.n	80057d6 <main+0xde>

		} else {
			start_homing_sequence(true);
 80057d0:	2001      	movs	r0, #1
 80057d2:	f000 f871 	bl	80058b8 <start_homing_sequence>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		handle_b2_button_polling();
 80057d6:	f002 fe75 	bl	80084c4 <handle_b2_button_polling>
 80057da:	e7fc      	b.n	80057d6 <main+0xde>
 80057dc:	2000097c 	.word	0x2000097c
 80057e0:	200006fc 	.word	0x200006fc
 80057e4:	200009d8 	.word	0x200009d8
 80057e8:	20000740 	.word	0x20000740
 80057ec:	200007e4 	.word	0x200007e4
 80057f0:	200007ed 	.word	0x200007ed
 80057f4:	200007ec 	.word	0x200007ec
 80057f8:	200007e8 	.word	0x200007e8
 80057fc:	200007f0 	.word	0x200007f0
 8005800:	20000333 	.word	0x20000333
 8005804:	48000400 	.word	0x48000400
 8005808:	200007e3 	.word	0x200007e3
 800580c:	200007e2 	.word	0x200007e2
 8005810:	200007e0 	.word	0x200007e0
 8005814:	200007e1 	.word	0x200007e1
 8005818:	200007dc 	.word	0x200007dc
 800581c:	20000784 	.word	0x20000784

08005820 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b094      	sub	sp, #80	@ 0x50
 8005824:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005826:	f107 0318 	add.w	r3, r7, #24
 800582a:	2238      	movs	r2, #56	@ 0x38
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f00d fa1c 	bl	8012c6c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005834:	1d3b      	adds	r3, r7, #4
 8005836:	2200      	movs	r2, #0
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	605a      	str	r2, [r3, #4]
 800583c:	609a      	str	r2, [r3, #8]
 800583e:	60da      	str	r2, [r3, #12]
 8005840:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8005842:	2000      	movs	r0, #0
 8005844:	f007 fc3e 	bl	800d0c4 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005848:	2302      	movs	r3, #2
 800584a:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800584c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005852:	2340      	movs	r3, #64	@ 0x40
 8005854:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005856:	2302      	movs	r3, #2
 8005858:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800585a:	2302      	movs	r3, #2
 800585c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800585e:	2304      	movs	r3, #4
 8005860:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8005862:	2355      	movs	r3, #85	@ 0x55
 8005864:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005866:	2302      	movs	r3, #2
 8005868:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800586a:	2302      	movs	r3, #2
 800586c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800586e:	2302      	movs	r3, #2
 8005870:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005872:	f107 0318 	add.w	r3, r7, #24
 8005876:	4618      	mov	r0, r3
 8005878:	f007 fcd8 	bl	800d22c <HAL_RCC_OscConfig>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <SystemClock_Config+0x66>
		Error_Handler();
 8005882:	f003 fbf3 	bl	800906c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005886:	230f      	movs	r3, #15
 8005888:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800588a:	2303      	movs	r3, #3
 800588c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005892:	2300      	movs	r3, #0
 8005894:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800589a:	1d3b      	adds	r3, r7, #4
 800589c:	2104      	movs	r1, #4
 800589e:	4618      	mov	r0, r3
 80058a0:	f007 ffd6 	bl	800d850 <HAL_RCC_ClockConfig>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <SystemClock_Config+0x8e>
		Error_Handler();
 80058aa:	f003 fbdf 	bl	800906c <Error_Handler>
	}
}
 80058ae:	bf00      	nop
 80058b0:	3750      	adds	r7, #80	@ 0x50
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <start_homing_sequence>:

/* USER CODE BEGIN 4 */
void start_homing_sequence(bool is_startup) {
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	4603      	mov	r3, r0
 80058c0:	71fb      	strb	r3, [r7, #7]
	//modbus set home state
	registerFrame[R_Theta_Status].U16 = 1;
 80058c2:	4b52      	ldr	r3, [pc, #328]	@ (8005a0c <start_homing_sequence+0x154>)
 80058c4:	2201      	movs	r2, #1
 80058c6:	841a      	strh	r2, [r3, #32]
	if (homing_active)
 80058c8:	4b51      	ldr	r3, [pc, #324]	@ (8005a10 <start_homing_sequence+0x158>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f040 8098 	bne.w	8005a02 <start_homing_sequence+0x14a>
		return;

	// Check current sensor states
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 80058d2:	2101      	movs	r1, #1
 80058d4:	484f      	ldr	r0, [pc, #316]	@ (8005a14 <start_homing_sequence+0x15c>)
 80058d6:	f007 fb93 	bl	800d000 <HAL_GPIO_ReadPin>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bf14      	ite	ne
 80058e0:	2301      	movne	r3, #1
 80058e2:	2300      	moveq	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
	UPPER_PHOTO_Pin);
	bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 80058e6:	2140      	movs	r1, #64	@ 0x40
 80058e8:	484a      	ldr	r0, [pc, #296]	@ (8005a14 <start_homing_sequence+0x15c>)
 80058ea:	f007 fb89 	bl	800d000 <HAL_GPIO_ReadPin>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	bf14      	ite	ne
 80058f4:	2301      	movne	r3, #1
 80058f6:	2300      	moveq	r3, #0
 80058f8:	73bb      	strb	r3, [r7, #14]

	// Different logic for startup vs manual homing
	if (is_startup || first_startup) {
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d103      	bne.n	8005908 <start_homing_sequence+0x50>
 8005900:	4b45      	ldr	r3, [pc, #276]	@ (8005a18 <start_homing_sequence+0x160>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d02e      	beq.n	8005966 <start_homing_sequence+0xae>
		// STARTUP LOGIC: Skip homing if already at home position
		if (up_photo_detected && prox_detected) {
 8005908:	7bfb      	ldrb	r3, [r7, #15]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d018      	beq.n	8005940 <start_homing_sequence+0x88>
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d015      	beq.n	8005940 <start_homing_sequence+0x88>
			// Already at home position - no need to home
			homing_active = false;
 8005914:	4b3e      	ldr	r3, [pc, #248]	@ (8005a10 <start_homing_sequence+0x158>)
 8005916:	2200      	movs	r2, #0
 8005918:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 800591a:	4b40      	ldr	r3, [pc, #256]	@ (8005a1c <start_homing_sequence+0x164>)
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
			first_startup = false;
 8005920:	4b3d      	ldr	r3, [pc, #244]	@ (8005a18 <start_homing_sequence+0x160>)
 8005922:	2200      	movs	r2, #0
 8005924:	701a      	strb	r2, [r3, #0]

			// Clear sensor flags
			up_photo = false;
 8005926:	4b3e      	ldr	r3, [pc, #248]	@ (8005a20 <start_homing_sequence+0x168>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800592c:	4b3d      	ldr	r3, [pc, #244]	@ (8005a24 <start_homing_sequence+0x16c>)
 800592e:	2200      	movs	r2, #0
 8005930:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005932:	4b3d      	ldr	r3, [pc, #244]	@ (8005a28 <start_homing_sequence+0x170>)
 8005934:	2200      	movs	r2, #0
 8005936:	601a      	str	r2, [r3, #0]

			// Set motion to idle
			motion_sequence_state = MOTION_IDLE;
 8005938:	4b3c      	ldr	r3, [pc, #240]	@ (8005a2c <start_homing_sequence+0x174>)
 800593a:	2200      	movs	r2, #0
 800593c:	701a      	strb	r2, [r3, #0]
			return;
 800593e:	e061      	b.n	8005a04 <start_homing_sequence+0x14c>
		}

		// Not at home - start startup homing sequence (skip zero degrees)
		homing_active = true;
 8005940:	4b33      	ldr	r3, [pc, #204]	@ (8005a10 <start_homing_sequence+0x158>)
 8005942:	2201      	movs	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 8005946:	4b39      	ldr	r3, [pc, #228]	@ (8005a2c <start_homing_sequence+0x174>)
 8005948:	2200      	movs	r2, #0
 800594a:	701a      	strb	r2, [r3, #0]
		prox_count = 0;
 800594c:	4b36      	ldr	r3, [pc, #216]	@ (8005a28 <start_homing_sequence+0x170>)
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
		up_photo = false;
 8005952:	4b33      	ldr	r3, [pc, #204]	@ (8005a20 <start_homing_sequence+0x168>)
 8005954:	2200      	movs	r2, #0
 8005956:	701a      	strb	r2, [r3, #0]
		low_photo = false;
 8005958:	4b32      	ldr	r3, [pc, #200]	@ (8005a24 <start_homing_sequence+0x16c>)
 800595a:	2200      	movs	r2, #0
 800595c:	701a      	strb	r2, [r3, #0]
		homing_state = HOMING_PEN_UP;
 800595e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a1c <start_homing_sequence+0x164>)
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	e04e      	b.n	8005a04 <start_homing_sequence+0x14c>

	} else {
		// MANUAL HOMING LOGIC: More sophisticated behavior
		if (up_photo_detected && prox_detected) {
 8005966:	7bfb      	ldrb	r3, [r7, #15]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d018      	beq.n	800599e <start_homing_sequence+0xe6>
 800596c:	7bbb      	ldrb	r3, [r7, #14]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d015      	beq.n	800599e <start_homing_sequence+0xe6>
			// Already perfectly homed - skip homing completely
			homing_active = false;
 8005972:	4b27      	ldr	r3, [pc, #156]	@ (8005a10 <start_homing_sequence+0x158>)
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_IDLE;
 8005978:	4b28      	ldr	r3, [pc, #160]	@ (8005a1c <start_homing_sequence+0x164>)
 800597a:	2200      	movs	r2, #0
 800597c:	701a      	strb	r2, [r3, #0]
			first_startup = false;  // ← ADDED THIS LINE
 800597e:	4b26      	ldr	r3, [pc, #152]	@ (8005a18 <start_homing_sequence+0x160>)
 8005980:	2200      	movs	r2, #0
 8005982:	701a      	strb	r2, [r3, #0]
			up_photo = false;
 8005984:	4b26      	ldr	r3, [pc, #152]	@ (8005a20 <start_homing_sequence+0x168>)
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 800598a:	4b26      	ldr	r3, [pc, #152]	@ (8005a24 <start_homing_sequence+0x16c>)
 800598c:	2200      	movs	r2, #0
 800598e:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 8005990:	4b25      	ldr	r3, [pc, #148]	@ (8005a28 <start_homing_sequence+0x170>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 8005996:	4b25      	ldr	r3, [pc, #148]	@ (8005a2c <start_homing_sequence+0x174>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
			return;
 800599c:	e032      	b.n	8005a04 <start_homing_sequence+0x14c>
			 up_photo = false;
			 low_photo = false;
			 homing_state = HOMING_REV_TO_ZERO_DEG;
			 rev_to_zero_trajectory_started = false;
			 */
		} else if (up_photo_detected && !prox_detected) {
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <start_homing_sequence+0x124>
 80059a4:	7bbb      	ldrb	r3, [r7, #14]
 80059a6:	f083 0301 	eor.w	r3, r3, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d015      	beq.n	80059dc <start_homing_sequence+0x124>
			// At up photo but not at prox - go to zero degrees first
			homing_active = true;
 80059b0:	4b17      	ldr	r3, [pc, #92]	@ (8005a10 <start_homing_sequence+0x158>)
 80059b2:	2201      	movs	r2, #1
 80059b4:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059b6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <start_homing_sequence+0x174>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059bc:	4b1a      	ldr	r3, [pc, #104]	@ (8005a28 <start_homing_sequence+0x170>)
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80059c2:	4b17      	ldr	r3, [pc, #92]	@ (8005a20 <start_homing_sequence+0x168>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059c8:	4b16      	ldr	r3, [pc, #88]	@ (8005a24 <start_homing_sequence+0x16c>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_REV_TO_ZERO_DEG;
 80059ce:	4b13      	ldr	r3, [pc, #76]	@ (8005a1c <start_homing_sequence+0x164>)
 80059d0:	2207      	movs	r2, #7
 80059d2:	701a      	strb	r2, [r3, #0]
			rev_to_zero_trajectory_started = false;
 80059d4:	4b16      	ldr	r3, [pc, #88]	@ (8005a30 <start_homing_sequence+0x178>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	e013      	b.n	8005a04 <start_homing_sequence+0x14c>
		} else {
			// Not at up photo - start full homing sequence
			homing_active = true;
 80059dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005a10 <start_homing_sequence+0x158>)
 80059de:	2201      	movs	r2, #1
 80059e0:	701a      	strb	r2, [r3, #0]
			motion_sequence_state = MOTION_IDLE;
 80059e2:	4b12      	ldr	r3, [pc, #72]	@ (8005a2c <start_homing_sequence+0x174>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
			prox_count = 0;
 80059e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005a28 <start_homing_sequence+0x170>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
			up_photo = false;
 80059ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005a20 <start_homing_sequence+0x168>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	701a      	strb	r2, [r3, #0]
			low_photo = false;
 80059f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a24 <start_homing_sequence+0x16c>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	701a      	strb	r2, [r3, #0]
			homing_state = HOMING_PEN_UP;
 80059fa:	4b08      	ldr	r3, [pc, #32]	@ (8005a1c <start_homing_sequence+0x164>)
 80059fc:	2201      	movs	r2, #1
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	e000      	b.n	8005a04 <start_homing_sequence+0x14c>
		return;
 8005a02:	bf00      	nop
		}
	}
}
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20001580 	.word	0x20001580
 8005a10:	200007e3 	.word	0x200007e3
 8005a14:	48000400 	.word	0x48000400
 8005a18:	20000333 	.word	0x20000333
 8005a1c:	200007e2 	.word	0x200007e2
 8005a20:	200007e0 	.word	0x200007e0
 8005a24:	200007e1 	.word	0x200007e1
 8005a28:	200007dc 	.word	0x200007dc
 8005a2c:	20000784 	.word	0x20000784
 8005a30:	200007ee 	.word	0x200007ee

08005a34 <update_homing_sequence>:

void update_homing_sequence(void) {
 8005a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a38:	ed2d 8b02 	vpush	{d8}
 8005a3c:	b08b      	sub	sp, #44	@ 0x2c
 8005a3e:	af00      	add	r7, sp, #0
	if (!homing_active)
 8005a40:	4b95      	ldr	r3, [pc, #596]	@ (8005c98 <update_homing_sequence+0x264>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f083 0301 	eor.w	r3, r3, #1
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f040 8361 	bne.w	8006112 <update_homing_sequence+0x6de>
		return;

	switch (homing_state) {
 8005a50:	4b92      	ldr	r3, [pc, #584]	@ (8005c9c <update_homing_sequence+0x268>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	2b0a      	cmp	r3, #10
 8005a58:	f200 835d 	bhi.w	8006116 <update_homing_sequence+0x6e2>
 8005a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a64 <update_homing_sequence+0x30>)
 8005a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a62:	bf00      	nop
 8005a64:	08005a91 	.word	0x08005a91
 8005a68:	08005ab3 	.word	0x08005ab3
 8005a6c:	08005b1f 	.word	0x08005b1f
 8005a70:	08005c6b 	.word	0x08005c6b
 8005a74:	08005cdd 	.word	0x08005cdd
 8005a78:	08005e21 	.word	0x08005e21
 8005a7c:	08005e99 	.word	0x08005e99
 8005a80:	08005f2b 	.word	0x08005f2b
 8005a84:	08005fdd 	.word	0x08005fdd
 8005a88:	080060e3 	.word	0x080060e3
 8005a8c:	0800610f 	.word	0x0800610f
	case HOMING_PEN_UP:
		// Ensure pen is up
		plotter_pen_up();
 8005a90:	f003 ff76 	bl	8009980 <plotter_pen_up>
		prismatic_axis.command_pos = 0.0f;
 8005a94:	4b82      	ldr	r3, [pc, #520]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005a96:	f04f 0200 	mov.w	r2, #0
 8005a9a:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005a9c:	4b81      	ldr	r3, [pc, #516]	@ (8005ca4 <update_homing_sequence+0x270>)
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer = 0;
 8005aa4:	4b80      	ldr	r3, [pc, #512]	@ (8005ca8 <update_homing_sequence+0x274>)
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
		homing_state = HOMING_DELAY_AFTER_PEN_UP;
 8005aaa:	4b7c      	ldr	r3, [pc, #496]	@ (8005c9c <update_homing_sequence+0x268>)
 8005aac:	2202      	movs	r2, #2
 8005aae:	701a      	strb	r2, [r3, #0]
		break;
 8005ab0:	e344      	b.n	800613c <update_homing_sequence+0x708>

	case HOMING_DELAY_AFTER_PEN_UP:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005ab4:	f04f 0200 	mov.w	r2, #0
 8005ab8:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005aba:	4b7a      	ldr	r3, [pc, #488]	@ (8005ca4 <update_homing_sequence+0x270>)
 8005abc:	f04f 0200 	mov.w	r2, #0
 8005ac0:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005ac2:	4b79      	ldr	r3, [pc, #484]	@ (8005ca8 <update_homing_sequence+0x274>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	4a77      	ldr	r2, [pc, #476]	@ (8005ca8 <update_homing_sequence+0x274>)
 8005aca:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005acc:	4b76      	ldr	r3, [pc, #472]	@ (8005ca8 <update_homing_sequence+0x274>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005ad4:	f0c0 8321 	bcc.w	800611a <update_homing_sequence+0x6e6>
			// Check if already at low photo sensor
			low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8005ad8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005adc:	4873      	ldr	r0, [pc, #460]	@ (8005cac <update_homing_sequence+0x278>)
 8005ade:	f007 fa8f 	bl	800d000 <HAL_GPIO_ReadPin>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	bf14      	ite	ne
 8005ae8:	2301      	movne	r3, #1
 8005aea:	2300      	moveq	r3, #0
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	4b70      	ldr	r3, [pc, #448]	@ (8005cb0 <update_homing_sequence+0x27c>)
 8005af0:	701a      	strb	r2, [r3, #0]
			LOWER_PHOTO_Pin);

			if (low_photo) {
 8005af2:	4b6f      	ldr	r3, [pc, #444]	@ (8005cb0 <update_homing_sequence+0x27c>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00c      	beq.n	8005b16 <update_homing_sequence+0xe2>
				// Already at low photo, skip moving down and go directly to delay
				motion_delay_timer = 0;
 8005afc:	4b6a      	ldr	r3, [pc, #424]	@ (8005ca8 <update_homing_sequence+0x274>)
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005b02:	4b66      	ldr	r3, [pc, #408]	@ (8005c9c <update_homing_sequence+0x268>)
 8005b04:	2204      	movs	r2, #4
 8005b06:	701a      	strb	r2, [r3, #0]
				low_photo = false; // Reset flag
 8005b08:	4b69      	ldr	r3, [pc, #420]	@ (8005cb0 <update_homing_sequence+0x27c>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	701a      	strb	r2, [r3, #0]
				up_photo = false;  // Reset for next detection
 8005b0e:	4b69      	ldr	r3, [pc, #420]	@ (8005cb4 <update_homing_sequence+0x280>)
 8005b10:	2200      	movs	r2, #0
 8005b12:	701a      	strb	r2, [r3, #0]
			} else {
				// Not at low photo, need to move down
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
			}
		}
		break;
 8005b14:	e301      	b.n	800611a <update_homing_sequence+0x6e6>
				homing_state = HOMING_PRIS_DOWN_TO_LOW_PHOTO;
 8005b16:	4b61      	ldr	r3, [pc, #388]	@ (8005c9c <update_homing_sequence+0x268>)
 8005b18:	2203      	movs	r2, #3
 8005b1a:	701a      	strb	r2, [r3, #0]
		break;
 8005b1c:	e2fd      	b.n	800611a <update_homing_sequence+0x6e6>

	case HOMING_PRIS_DOWN_TO_LOW_PHOTO:
		// Move prismatic down at constant velocity
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005b1e:	4b60      	ldr	r3, [pc, #384]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005b20:	edd3 7a07 	vldr	s15, [r3, #28]
 8005b24:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8005cb8 <update_homing_sequence+0x284>
 8005b28:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = HOMING_PRIS_VELOCITY
 8005b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005b2e:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b32:	4b5b      	ldr	r3, [pc, #364]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005b34:	edd3 7a06 	vldr	s15, [r3, #24]
 8005b38:	eeb0 0a67 	vmov.f32	s0, s15
 8005b3c:	485f      	ldr	r0, [pc, #380]	@ (8005cbc <update_homing_sequence+0x288>)
 8005b3e:	f7fb fb6b 	bl	8001218 <PID_CONTROLLER_Compute>
 8005b42:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005b46:	4b5e      	ldr	r3, [pc, #376]	@ (8005cc0 <update_homing_sequence+0x28c>)
 8005b48:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	f7fa ffb8 	bl	8000ac4 <__aeabi_d2iz>
 8005b54:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005b56:	4b5a      	ldr	r3, [pc, #360]	@ (8005cc0 <update_homing_sequence+0x28c>)
 8005b58:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005b5c:	613a      	str	r2, [r7, #16]
 8005b5e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005b62:	617b      	str	r3, [r7, #20]
		prismatic_axis.command_pos = PWM_Satuation(
 8005b64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b68:	f7fa ffac 	bl	8000ac4 <__aeabi_d2iz>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4620      	mov	r0, r4
 8005b72:	eeb0 0a48 	vmov.f32	s0, s16
 8005b76:	f7fb faed 	bl	8001154 <PWM_Satuation>
 8005b7a:	ee07 0a90 	vmov	s15, r0
 8005b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b82:	4b47      	ldr	r3, [pc, #284]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005b84:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005b88:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8005b8c:	484d      	ldr	r0, [pc, #308]	@ (8005cc4 <update_homing_sequence+0x290>)
 8005b8e:	f7fb fe5f 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005b92:	eef0 7a40 	vmov.f32	s15, s0
 8005b96:	4b42      	ldr	r3, [pc, #264]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005b98:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005b9c:	4b4a      	ldr	r3, [pc, #296]	@ (8005cc8 <update_homing_sequence+0x294>)
 8005b9e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005ba2:	4b4a      	ldr	r3, [pc, #296]	@ (8005ccc <update_homing_sequence+0x298>)
 8005ba4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005ba8:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 8005cd0 <update_homing_sequence+0x29c>
 8005bac:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005bb0:	eeb0 1a66 	vmov.f32	s2, s13
 8005bb4:	eddf 0a47 	vldr	s1, [pc, #284]	@ 8005cd4 <update_homing_sequence+0x2a0>
 8005bb8:	eeb0 0a47 	vmov.f32	s0, s14
 8005bbc:	4846      	ldr	r0, [pc, #280]	@ (8005cd8 <update_homing_sequence+0x2a4>)
 8005bbe:	f7fb feef 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8005bc2:	eef0 7a40 	vmov.f32	s15, s0
 8005bc6:	4b36      	ldr	r3, [pc, #216]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005bc8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005bcc:	4b34      	ldr	r3, [pc, #208]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005bce:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005bd2:	4b33      	ldr	r3, [pc, #204]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005bd4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005bd8:	4b31      	ldr	r3, [pc, #196]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005bda:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be6:	4b2e      	ldr	r3, [pc, #184]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005be8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005bec:	4b2c      	ldr	r3, [pc, #176]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005bee:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005bf2:	4b33      	ldr	r3, [pc, #204]	@ (8005cc0 <update_homing_sequence+0x28c>)
 8005bf4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	f7fa ff62 	bl	8000ac4 <__aeabi_d2iz>
 8005c00:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005c02:	4b2f      	ldr	r3, [pc, #188]	@ (8005cc0 <update_homing_sequence+0x28c>)
 8005c04:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005c08:	60ba      	str	r2, [r7, #8]
 8005c0a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005c0e:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005c10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c14:	f7fa ff56 	bl	8000ac4 <__aeabi_d2iz>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	eeb0 0a48 	vmov.f32	s0, s16
 8005c22:	f7fb fa97 	bl	8001154 <PWM_Satuation>
 8005c26:	ee07 0a90 	vmov	s15, r0
 8005c2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005c30:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (low_photo) {
 8005c34:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb0 <update_homing_sequence+0x27c>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	f000 826f 	beq.w	800611e <update_homing_sequence+0x6ea>
			// Found low photo, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 8005c40:	4b17      	ldr	r3, [pc, #92]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005c42:	f04f 0200 	mov.w	r2, #0
 8005c46:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005c48:	4b16      	ldr	r3, [pc, #88]	@ (8005ca4 <update_homing_sequence+0x270>)
 8005c4a:	f04f 0200 	mov.w	r2, #0
 8005c4e:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005c50:	4b15      	ldr	r3, [pc, #84]	@ (8005ca8 <update_homing_sequence+0x274>)
 8005c52:	2200      	movs	r2, #0
 8005c54:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_LOW_PHOTO;
 8005c56:	4b11      	ldr	r3, [pc, #68]	@ (8005c9c <update_homing_sequence+0x268>)
 8005c58:	2204      	movs	r2, #4
 8005c5a:	701a      	strb	r2, [r3, #0]
			low_photo = false; // Reset flag after use
 8005c5c:	4b14      	ldr	r3, [pc, #80]	@ (8005cb0 <update_homing_sequence+0x27c>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	701a      	strb	r2, [r3, #0]
			up_photo = false;  // Reset for next detection
 8005c62:	4b14      	ldr	r3, [pc, #80]	@ (8005cb4 <update_homing_sequence+0x280>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005c68:	e259      	b.n	800611e <update_homing_sequence+0x6ea>

	case HOMING_DELAY_AFTER_LOW_PHOTO:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ca0 <update_homing_sequence+0x26c>)
 8005c6c:	f04f 0200 	mov.w	r2, #0
 8005c70:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005c72:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca4 <update_homing_sequence+0x270>)
 8005c74:	f04f 0200 	mov.w	r2, #0
 8005c78:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca8 <update_homing_sequence+0x274>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	4a09      	ldr	r2, [pc, #36]	@ (8005ca8 <update_homing_sequence+0x274>)
 8005c82:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005c84:	4b08      	ldr	r3, [pc, #32]	@ (8005ca8 <update_homing_sequence+0x274>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005c8c:	f0c0 8249 	bcc.w	8006122 <update_homing_sequence+0x6ee>
			homing_state = HOMING_PRIS_UP_TO_UP_PHOTO;
 8005c90:	4b02      	ldr	r3, [pc, #8]	@ (8005c9c <update_homing_sequence+0x268>)
 8005c92:	2205      	movs	r2, #5
 8005c94:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005c96:	e244      	b.n	8006122 <update_homing_sequence+0x6ee>
 8005c98:	200007e3 	.word	0x200007e3
 8005c9c:	200007e2 	.word	0x200007e2
 8005ca0:	200006fc 	.word	0x200006fc
 8005ca4:	20000740 	.word	0x20000740
 8005ca8:	200007d8 	.word	0x200007d8
 8005cac:	48000400 	.word	0x48000400
 8005cb0:	200007e1 	.word	0x200007e1
 8005cb4:	200007e0 	.word	0x200007e0
 8005cb8:	437a0000 	.word	0x437a0000
 8005cbc:	20000a5c 	.word	0x20000a5c
 8005cc0:	20000080 	.word	0x20000080
 8005cc4:	20000afc 	.word	0x20000afc
 8005cc8:	200009d8 	.word	0x200009d8
 8005ccc:	2000097c 	.word	0x2000097c
 8005cd0:	447a0000 	.word	0x447a0000
 8005cd4:	00000000 	.word	0x00000000
 8005cd8:	20000b00 	.word	0x20000b00

	case HOMING_PRIS_UP_TO_UP_PHOTO:
		// Move prismatic up at constant velocity
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
				- prismatic_axis.kalman_velocity;
 8005cdc:	4ba8      	ldr	r3, [pc, #672]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005cde:	edd3 7a07 	vldr	s15, [r3, #28]
 8005ce2:	ed9f 7aa8 	vldr	s14, [pc, #672]	@ 8005f84 <update_homing_sequence+0x550>
 8005ce6:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = -HOMING_PRIS_VELOCITY
 8005cea:	4ba5      	ldr	r3, [pc, #660]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005cec:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8005cf0:	4ba3      	ldr	r3, [pc, #652]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005cf2:	edd3 7a06 	vldr	s15, [r3, #24]
 8005cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8005cfa:	48a3      	ldr	r0, [pc, #652]	@ (8005f88 <update_homing_sequence+0x554>)
 8005cfc:	f7fb fa8c 	bl	8001218 <PID_CONTROLLER_Compute>
 8005d00:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8005d04:	4ba1      	ldr	r3, [pc, #644]	@ (8005f8c <update_homing_sequence+0x558>)
 8005d06:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f7fa fed9 	bl	8000ac4 <__aeabi_d2iz>
 8005d12:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005d14:	4b9d      	ldr	r3, [pc, #628]	@ (8005f8c <update_homing_sequence+0x558>)
 8005d16:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005d1a:	603a      	str	r2, [r7, #0]
 8005d1c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005d20:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_pos = PWM_Satuation(
 8005d22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d26:	f7fa fecd 	bl	8000ac4 <__aeabi_d2iz>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4620      	mov	r0, r4
 8005d30:	eeb0 0a48 	vmov.f32	s0, s16
 8005d34:	f7fb fa0e 	bl	8001154 <PWM_Satuation>
 8005d38:	ee07 0a90 	vmov	s15, r0
 8005d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d40:	4b8f      	ldr	r3, [pc, #572]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005d42:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8005d46:	eebd 0a00 	vmov.f32	s0, #208	@ 0xbe800000 -0.250
 8005d4a:	4891      	ldr	r0, [pc, #580]	@ (8005f90 <update_homing_sequence+0x55c>)
 8005d4c:	f7fb fd80 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8005d50:	eef0 7a40 	vmov.f32	s15, s0
 8005d54:	4b8a      	ldr	r3, [pc, #552]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005d56:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_PRIS_VELOCITY / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005d5a:	4b8e      	ldr	r3, [pc, #568]	@ (8005f94 <update_homing_sequence+0x560>)
 8005d5c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8005d60:	4b8d      	ldr	r3, [pc, #564]	@ (8005f98 <update_homing_sequence+0x564>)
 8005d62:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8005d66:	ed9f 6a8d 	vldr	s12, [pc, #564]	@ 8005f9c <update_homing_sequence+0x568>
 8005d6a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8005d6e:	eeb0 1a66 	vmov.f32	s2, s13
 8005d72:	eddf 0a8b 	vldr	s1, [pc, #556]	@ 8005fa0 <update_homing_sequence+0x56c>
 8005d76:	eeb0 0a47 	vmov.f32	s0, s14
 8005d7a:	488a      	ldr	r0, [pc, #552]	@ (8005fa4 <update_homing_sequence+0x570>)
 8005d7c:	f7fb fe10 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8005d80:	eef0 7a40 	vmov.f32	s15, s0
 8005d84:	4b7e      	ldr	r3, [pc, #504]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005d86:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8005d8a:	4b7d      	ldr	r3, [pc, #500]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005d8c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005d90:	4b7b      	ldr	r3, [pc, #492]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005d92:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8005d96:	4b7a      	ldr	r3, [pc, #488]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005d98:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005d9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005da4:	4b76      	ldr	r3, [pc, #472]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005da6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005daa:	4b75      	ldr	r3, [pc, #468]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005dac:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_400RPM_Constant.U_max,
 8005db0:	4b76      	ldr	r3, [pc, #472]	@ (8005f8c <update_homing_sequence+0x558>)
 8005db2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005db6:	4610      	mov	r0, r2
 8005db8:	4619      	mov	r1, r3
 8005dba:	f7fa fe83 	bl	8000ac4 <__aeabi_d2iz>
 8005dbe:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8005dc0:	4b72      	ldr	r3, [pc, #456]	@ (8005f8c <update_homing_sequence+0x558>)
 8005dc2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8005dc6:	4692      	mov	sl, r2
 8005dc8:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8005dcc:	4650      	mov	r0, sl
 8005dce:	4659      	mov	r1, fp
 8005dd0:	f7fa fe78 	bl	8000ac4 <__aeabi_d2iz>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4620      	mov	r0, r4
 8005dda:	eeb0 0a48 	vmov.f32	s0, s16
 8005dde:	f7fb f9b9 	bl	8001154 <PWM_Satuation>
 8005de2:	ee07 0a90 	vmov	s15, r0
 8005de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dea:	4b65      	ldr	r3, [pc, #404]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005dec:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (up_photo) {
 8005df0:	4b6d      	ldr	r3, [pc, #436]	@ (8005fa8 <update_homing_sequence+0x574>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8195 	beq.w	8006126 <update_homing_sequence+0x6f2>
			// Found up photo, stop and start delay before backup
			prismatic_axis.command_pos = 0.0f;
 8005dfc:	4b60      	ldr	r3, [pc, #384]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005dfe:	f04f 0200 	mov.w	r2, #0
 8005e02:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 8005e04:	4b69      	ldr	r3, [pc, #420]	@ (8005fac <update_homing_sequence+0x578>)
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 8005e0c:	4b68      	ldr	r3, [pc, #416]	@ (8005fb0 <update_homing_sequence+0x57c>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_UP_PHOTO;
 8005e12:	4b68      	ldr	r3, [pc, #416]	@ (8005fb4 <update_homing_sequence+0x580>)
 8005e14:	2206      	movs	r2, #6
 8005e16:	701a      	strb	r2, [r3, #0]
			up_photo = false; // Reset flag after use
 8005e18:	4b63      	ldr	r3, [pc, #396]	@ (8005fa8 <update_homing_sequence+0x574>)
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005e1e:	e182      	b.n	8006126 <update_homing_sequence+0x6f2>

	case HOMING_DELAY_AFTER_UP_PHOTO:
		// Stop motors and wait before starting backup procedure
		prismatic_axis.command_pos = 0.0f;
 8005e20:	4b57      	ldr	r3, [pc, #348]	@ (8005f80 <update_homing_sequence+0x54c>)
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 8005e28:	4b60      	ldr	r3, [pc, #384]	@ (8005fac <update_homing_sequence+0x578>)
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 8005e30:	4b5f      	ldr	r3, [pc, #380]	@ (8005fb0 <update_homing_sequence+0x57c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	3301      	adds	r3, #1
 8005e36:	4a5e      	ldr	r2, [pc, #376]	@ (8005fb0 <update_homing_sequence+0x57c>)
 8005e38:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8005fb0 <update_homing_sequence+0x57c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005e42:	f0c0 8172 	bcc.w	800612a <update_homing_sequence+0x6f6>
			if (first_startup) {
 8005e46:	4b5c      	ldr	r3, [pc, #368]	@ (8005fb8 <update_homing_sequence+0x584>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01d      	beq.n	8005e8a <update_homing_sequence+0x456>
				// STARTUP: Check if prox is already detected before searching
				bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005e4e:	2140      	movs	r1, #64	@ 0x40
 8005e50:	485a      	ldr	r0, [pc, #360]	@ (8005fbc <update_homing_sequence+0x588>)
 8005e52:	f007 f8d5 	bl	800d000 <HAL_GPIO_ReadPin>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	bf14      	ite	ne
 8005e5c:	2301      	movne	r3, #1
 8005e5e:	2300      	moveq	r3, #0
 8005e60:	76fb      	strb	r3, [r7, #27]

				if (prox_detected) {
 8005e62:	7efb      	ldrb	r3, [r7, #27]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d009      	beq.n	8005e7c <update_homing_sequence+0x448>
					// Already at prox - skip search and go to completion
					motion_delay_timer = 0;
 8005e68:	4b51      	ldr	r3, [pc, #324]	@ (8005fb0 <update_homing_sequence+0x57c>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
					homing_state = HOMING_DELAY_AFTER_PROX;
 8005e6e:	4b51      	ldr	r3, [pc, #324]	@ (8005fb4 <update_homing_sequence+0x580>)
 8005e70:	220a      	movs	r2, #10
 8005e72:	701a      	strb	r2, [r3, #0]
					prox_count = 1; // Set count to indicate prox found
 8005e74:	4b52      	ldr	r3, [pc, #328]	@ (8005fc0 <update_homing_sequence+0x58c>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_REV_TO_ZERO_DEG;
				// Initialize trajectory variables for zero degree movement
				rev_to_zero_trajectory_started = false;
			}
		}
		break;
 8005e7a:	e156      	b.n	800612a <update_homing_sequence+0x6f6>
					homing_state = HOMING_REV_CW_TO_PROX1;
 8005e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8005fb4 <update_homing_sequence+0x580>)
 8005e7e:	2209      	movs	r2, #9
 8005e80:	701a      	strb	r2, [r3, #0]
					prox_count = 0; // Reset prox counter
 8005e82:	4b4f      	ldr	r3, [pc, #316]	@ (8005fc0 <update_homing_sequence+0x58c>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]
		break;
 8005e88:	e14f      	b.n	800612a <update_homing_sequence+0x6f6>
				homing_state = HOMING_REV_TO_ZERO_DEG;
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb4 <update_homing_sequence+0x580>)
 8005e8c:	2207      	movs	r2, #7
 8005e8e:	701a      	strb	r2, [r3, #0]
				rev_to_zero_trajectory_started = false;
 8005e90:	4b4c      	ldr	r3, [pc, #304]	@ (8005fc4 <update_homing_sequence+0x590>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
		break;
 8005e96:	e148      	b.n	800612a <update_homing_sequence+0x6f6>

	case HOMING_REV_TO_ZERO_DEG:
		if (!rev_to_zero_trajectory_started) {
 8005e98:	4b4a      	ldr	r3, [pc, #296]	@ (8005fc4 <update_homing_sequence+0x590>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f083 0301 	eor.w	r3, r3, #1
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d02f      	beq.n	8005f06 <update_homing_sequence+0x4d2>
			// Get current prismatic position (keep it where it is)
			float current_pris_pos = prismatic_encoder.mm;
 8005ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8005f98 <update_homing_sequence+0x564>)
 8005ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eaa:	623b      	str	r3, [r7, #32]
			float current_rev_deg = normalize_angle(revolute_encoder.rads)
 8005eac:	4b39      	ldr	r3, [pc, #228]	@ (8005f94 <update_homing_sequence+0x560>)
 8005eae:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005eb2:	eeb0 0a67 	vmov.f32	s0, s15
 8005eb6:	f000 f957 	bl	8006168 <normalize_angle>
 8005eba:	eef0 7a40 	vmov.f32	s15, s0
					* 180.0f / PI;
 8005ebe:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8005fc8 <update_homing_sequence+0x594>
 8005ec2:	ee27 7a87 	vmul.f32	s14, s15, s14
			float current_rev_deg = normalize_angle(revolute_encoder.rads)
 8005ec6:	eddf 6a41 	vldr	s13, [pc, #260]	@ 8005fcc <update_homing_sequence+0x598>
 8005eca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ece:	edc7 7a07 	vstr	s15, [r7, #28]

			check[0] = (int) current_rev_deg;
 8005ed2:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005eda:	ee17 2a90 	vmov	r2, s15
 8005ede:	4b3c      	ldr	r3, [pc, #240]	@ (8005fd0 <update_homing_sequence+0x59c>)
 8005ee0:	601a      	str	r2, [r3, #0]
			check[1] = (int) movement_deg;
 8005ee2:	4b3c      	ldr	r3, [pc, #240]	@ (8005fd4 <update_homing_sequence+0x5a0>)
 8005ee4:	edd3 7a00 	vldr	s15, [r3]
 8005ee8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005eec:	ee17 2a90 	vmov	r2, s15
 8005ef0:	4b37      	ldr	r3, [pc, #220]	@ (8005fd0 <update_homing_sequence+0x59c>)
 8005ef2:	605a      	str	r2, [r3, #4]

			// Start combined trajectory to move revolute to 0° while keeping prismatic position
			start_combined_trajectory(0.0, 0.0);
 8005ef4:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8005fa0 <update_homing_sequence+0x56c>
 8005ef8:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8005fa0 <update_homing_sequence+0x56c>
 8005efc:	f000 fa1e 	bl	800633c <start_combined_trajectory>

			rev_to_zero_trajectory_started = true;
 8005f00:	4b30      	ldr	r3, [pc, #192]	@ (8005fc4 <update_homing_sequence+0x590>)
 8005f02:	2201      	movs	r2, #1
 8005f04:	701a      	strb	r2, [r3, #0]
		}

		// Wait for trajectory to complete
		if (motion_sequence_state == MOTION_IDLE) {
 8005f06:	4b34      	ldr	r3, [pc, #208]	@ (8005fd8 <update_homing_sequence+0x5a4>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f040 810f 	bne.w	800612e <update_homing_sequence+0x6fa>
			// Trajectory completed, move to next homing state
			motion_delay_timer = 0;
 8005f10:	4b27      	ldr	r3, [pc, #156]	@ (8005fb0 <update_homing_sequence+0x57c>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_ZERO_DEG;
 8005f16:	4b27      	ldr	r3, [pc, #156]	@ (8005fb4 <update_homing_sequence+0x580>)
 8005f18:	2208      	movs	r2, #8
 8005f1a:	701a      	strb	r2, [r3, #0]
			prox_count = 0; // Reset prox counter for next stage
 8005f1c:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <update_homing_sequence+0x58c>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
			rev_to_zero_trajectory_started = false; // Reset for next time
 8005f22:	4b28      	ldr	r3, [pc, #160]	@ (8005fc4 <update_homing_sequence+0x590>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
		}
		break;
 8005f28:	e101      	b.n	800612e <update_homing_sequence+0x6fa>

	case HOMING_DELAY_AFTER_ZERO_DEG:
		// Stop motors and wait - let normal control handle this
		motion_delay_timer++;
 8005f2a:	4b21      	ldr	r3, [pc, #132]	@ (8005fb0 <update_homing_sequence+0x57c>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb0 <update_homing_sequence+0x57c>)
 8005f32:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 8005f34:	4b1e      	ldr	r3, [pc, #120]	@ (8005fb0 <update_homing_sequence+0x57c>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005f3c:	f0c0 80f9 	bcc.w	8006132 <update_homing_sequence+0x6fe>
			// CHECK IF PROX IS ALREADY DETECTED BEFORE STARTING SEARCH
			bool prox_detected = HAL_GPIO_ReadPin(PROX_GPIO_Port, PROX_Pin);
 8005f40:	2140      	movs	r1, #64	@ 0x40
 8005f42:	481e      	ldr	r0, [pc, #120]	@ (8005fbc <update_homing_sequence+0x588>)
 8005f44:	f007 f85c 	bl	800d000 <HAL_GPIO_ReadPin>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf14      	ite	ne
 8005f4e:	2301      	movne	r3, #1
 8005f50:	2300      	moveq	r3, #0
 8005f52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			if (prox_detected) {
 8005f56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d009      	beq.n	8005f72 <update_homing_sequence+0x53e>
				// Already at proximity sensor - skip search and go directly to completion
				motion_delay_timer = 0;
 8005f5e:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <update_homing_sequence+0x57c>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	601a      	str	r2, [r3, #0]
				homing_state = HOMING_DELAY_AFTER_PROX;
 8005f64:	4b13      	ldr	r3, [pc, #76]	@ (8005fb4 <update_homing_sequence+0x580>)
 8005f66:	220a      	movs	r2, #10
 8005f68:	701a      	strb	r2, [r3, #0]
				prox_count = 1; // Set count to indicate prox found
 8005f6a:	4b15      	ldr	r3, [pc, #84]	@ (8005fc0 <update_homing_sequence+0x58c>)
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]
				// Not at prox - need to search for it
				homing_state = HOMING_REV_CW_TO_PROX1;
				prox_count = 0; // Reset counter for search
			}
		}
		break;
 8005f70:	e0df      	b.n	8006132 <update_homing_sequence+0x6fe>
				homing_state = HOMING_REV_CW_TO_PROX1;
 8005f72:	4b10      	ldr	r3, [pc, #64]	@ (8005fb4 <update_homing_sequence+0x580>)
 8005f74:	2209      	movs	r2, #9
 8005f76:	701a      	strb	r2, [r3, #0]
				prox_count = 0; // Reset counter for search
 8005f78:	4b11      	ldr	r3, [pc, #68]	@ (8005fc0 <update_homing_sequence+0x58c>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
		break;
 8005f7e:	e0d8      	b.n	8006132 <update_homing_sequence+0x6fe>
 8005f80:	200006fc 	.word	0x200006fc
 8005f84:	c37a0000 	.word	0xc37a0000
 8005f88:	20000a5c 	.word	0x20000a5c
 8005f8c:	20000080 	.word	0x20000080
 8005f90:	20000afc 	.word	0x20000afc
 8005f94:	200009d8 	.word	0x200009d8
 8005f98:	2000097c 	.word	0x2000097c
 8005f9c:	447a0000 	.word	0x447a0000
 8005fa0:	00000000 	.word	0x00000000
 8005fa4:	20000b00 	.word	0x20000b00
 8005fa8:	200007e0 	.word	0x200007e0
 8005fac:	20000740 	.word	0x20000740
 8005fb0:	200007d8 	.word	0x200007d8
 8005fb4:	200007e2 	.word	0x200007e2
 8005fb8:	20000333 	.word	0x20000333
 8005fbc:	48000400 	.word	0x48000400
 8005fc0:	200007dc 	.word	0x200007dc
 8005fc4:	200007ee 	.word	0x200007ee
 8005fc8:	43340000 	.word	0x43340000
 8005fcc:	40490fdb 	.word	0x40490fdb
 8005fd0:	20000864 	.word	0x20000864
 8005fd4:	200007f8 	.word	0x200007f8
 8005fd8:	20000784 	.word	0x20000784

	case HOMING_REV_CW_TO_PROX1:
		// Move revolute clockwise with velocity control until prox count = 1
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
				- revolute_axis.kalman_velocity;
 8005fdc:	4b5a      	ldr	r3, [pc, #360]	@ (8006148 <update_homing_sequence+0x714>)
 8005fde:	edd3 7a07 	vldr	s15, [r3, #28]
 8005fe2:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8005fe6:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = -HOMING_REV_VELOCITY
 8005fea:	4b57      	ldr	r3, [pc, #348]	@ (8006148 <update_homing_sequence+0x714>)
 8005fec:	edc3 7a06 	vstr	s15, [r3, #24]
		revolute_axis.command_pos = PWM_Satuation(
 8005ff0:	4b55      	ldr	r3, [pc, #340]	@ (8006148 <update_homing_sequence+0x714>)
 8005ff2:	edd3 7a06 	vldr	s15, [r3, #24]
 8005ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8005ffa:	4854      	ldr	r0, [pc, #336]	@ (800614c <update_homing_sequence+0x718>)
 8005ffc:	f7fb f90c 	bl	8001218 <PID_CONTROLLER_Compute>
 8006000:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&revolute_velocity_pid,
						revolute_axis.vel_error),
				ZGX45RGG_150RPM_Constant.U_max,
 8006004:	4b52      	ldr	r3, [pc, #328]	@ (8006150 <update_homing_sequence+0x71c>)
 8006006:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(
 800600a:	4610      	mov	r0, r2
 800600c:	4619      	mov	r1, r3
 800600e:	f7fa fd59 	bl	8000ac4 <__aeabi_d2iz>
 8006012:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 8006014:	4b4e      	ldr	r3, [pc, #312]	@ (8006150 <update_homing_sequence+0x71c>)
 8006016:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800601a:	4690      	mov	r8, r2
 800601c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(
 8006020:	4640      	mov	r0, r8
 8006022:	4649      	mov	r1, r9
 8006024:	f7fa fd4e 	bl	8000ac4 <__aeabi_d2iz>
 8006028:	4603      	mov	r3, r0
 800602a:	4619      	mov	r1, r3
 800602c:	4630      	mov	r0, r6
 800602e:	eeb0 0a48 	vmov.f32	s0, s16
 8006032:	f7fb f88f 	bl	8001154 <PWM_Satuation>
 8006036:	ee07 0a90 	vmov	s15, r0
 800603a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800603e:	4b42      	ldr	r3, [pc, #264]	@ (8006148 <update_homing_sequence+0x714>)
 8006040:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward compensation during homing
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006044:	eeb8 0a00 	vmov.f32	s0, #128	@ 0xc0000000 -2.0
 8006048:	4842      	ldr	r0, [pc, #264]	@ (8006154 <update_homing_sequence+0x720>)
 800604a:	f7fb fa83 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 800604e:	eef0 7a40 	vmov.f32	s15, s0
 8006052:	4b3d      	ldr	r3, [pc, #244]	@ (8006148 <update_homing_sequence+0x714>)
 8006054:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				-HOMING_REV_VELOCITY);
		revolute_axis.dfd = 0.0;
 8006058:	4b3b      	ldr	r3, [pc, #236]	@ (8006148 <update_homing_sequence+0x714>)
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	62da      	str	r2, [r3, #44]	@ 0x2c

		revolute_axis.command_pos += revolute_axis.ffd;
 8006060:	4b39      	ldr	r3, [pc, #228]	@ (8006148 <update_homing_sequence+0x714>)
 8006062:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006066:	4b38      	ldr	r3, [pc, #224]	@ (8006148 <update_homing_sequence+0x714>)
 8006068:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800606c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006070:	4b35      	ldr	r3, [pc, #212]	@ (8006148 <update_homing_sequence+0x714>)
 8006072:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006076:	4b34      	ldr	r3, [pc, #208]	@ (8006148 <update_homing_sequence+0x714>)
 8006078:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
				ZGX45RGG_150RPM_Constant.U_max,
 800607c:	4b34      	ldr	r3, [pc, #208]	@ (8006150 <update_homing_sequence+0x71c>)
 800607e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006082:	4610      	mov	r0, r2
 8006084:	4619      	mov	r1, r3
 8006086:	f7fa fd1d 	bl	8000ac4 <__aeabi_d2iz>
 800608a:	4606      	mov	r6, r0
				-ZGX45RGG_150RPM_Constant.U_max);
 800608c:	4b30      	ldr	r3, [pc, #192]	@ (8006150 <update_homing_sequence+0x71c>)
 800608e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006092:	4614      	mov	r4, r2
 8006094:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
		revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006098:	4620      	mov	r0, r4
 800609a:	4629      	mov	r1, r5
 800609c:	f7fa fd12 	bl	8000ac4 <__aeabi_d2iz>
 80060a0:	4603      	mov	r3, r0
 80060a2:	4619      	mov	r1, r3
 80060a4:	4630      	mov	r0, r6
 80060a6:	eeb0 0a48 	vmov.f32	s0, s16
 80060aa:	f7fb f853 	bl	8001154 <PWM_Satuation>
 80060ae:	ee07 0a90 	vmov	s15, r0
 80060b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060b6:	4b24      	ldr	r3, [pc, #144]	@ (8006148 <update_homing_sequence+0x714>)
 80060b8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		if (prox_count >= 1) {
 80060bc:	4b26      	ldr	r3, [pc, #152]	@ (8006158 <update_homing_sequence+0x724>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d038      	beq.n	8006136 <update_homing_sequence+0x702>
			// Found prox sensor, stop and start delay
			prismatic_axis.command_pos = 0.0f;
 80060c4:	4b25      	ldr	r3, [pc, #148]	@ (800615c <update_homing_sequence+0x728>)
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	625a      	str	r2, [r3, #36]	@ 0x24
			revolute_axis.command_pos = 0.0f;
 80060cc:	4b1e      	ldr	r3, [pc, #120]	@ (8006148 <update_homing_sequence+0x714>)
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	625a      	str	r2, [r3, #36]	@ 0x24
			motion_delay_timer = 0;
 80060d4:	4b22      	ldr	r3, [pc, #136]	@ (8006160 <update_homing_sequence+0x72c>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	601a      	str	r2, [r3, #0]
			homing_state = HOMING_DELAY_AFTER_PROX;
 80060da:	4b22      	ldr	r3, [pc, #136]	@ (8006164 <update_homing_sequence+0x730>)
 80060dc:	220a      	movs	r2, #10
 80060de:	701a      	strb	r2, [r3, #0]
		}
		break;
 80060e0:	e029      	b.n	8006136 <update_homing_sequence+0x702>

	case HOMING_DELAY_AFTER_PROX:
		// Stop motors and wait
		prismatic_axis.command_pos = 0.0f;
 80060e2:	4b1e      	ldr	r3, [pc, #120]	@ (800615c <update_homing_sequence+0x728>)
 80060e4:	f04f 0200 	mov.w	r2, #0
 80060e8:	625a      	str	r2, [r3, #36]	@ 0x24
		revolute_axis.command_pos = 0.0f;
 80060ea:	4b17      	ldr	r3, [pc, #92]	@ (8006148 <update_homing_sequence+0x714>)
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	625a      	str	r2, [r3, #36]	@ 0x24
		motion_delay_timer++;
 80060f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006160 <update_homing_sequence+0x72c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	3301      	adds	r3, #1
 80060f8:	4a19      	ldr	r2, [pc, #100]	@ (8006160 <update_homing_sequence+0x72c>)
 80060fa:	6013      	str	r3, [r2, #0]
		if (motion_delay_timer >= 500) {
 80060fc:	4b18      	ldr	r3, [pc, #96]	@ (8006160 <update_homing_sequence+0x72c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006104:	d319      	bcc.n	800613a <update_homing_sequence+0x706>
			homing_state = HOMING_COMPLETE;
 8006106:	4b17      	ldr	r3, [pc, #92]	@ (8006164 <update_homing_sequence+0x730>)
 8006108:	220b      	movs	r2, #11
 800610a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800610c:	e015      	b.n	800613a <update_homing_sequence+0x706>

	case HOMING_COMPLETE:
		NVIC_SystemReset();
 800610e:	f7ff fadd 	bl	80056cc <__NVIC_SystemReset>
		return;
 8006112:	bf00      	nop
 8006114:	e012      	b.n	800613c <update_homing_sequence+0x708>
		break;

	case HOMING_IDLE:
	default:
		break;
 8006116:	bf00      	nop
 8006118:	e010      	b.n	800613c <update_homing_sequence+0x708>
		break;
 800611a:	bf00      	nop
 800611c:	e00e      	b.n	800613c <update_homing_sequence+0x708>
		break;
 800611e:	bf00      	nop
 8006120:	e00c      	b.n	800613c <update_homing_sequence+0x708>
		break;
 8006122:	bf00      	nop
 8006124:	e00a      	b.n	800613c <update_homing_sequence+0x708>
		break;
 8006126:	bf00      	nop
 8006128:	e008      	b.n	800613c <update_homing_sequence+0x708>
		break;
 800612a:	bf00      	nop
 800612c:	e006      	b.n	800613c <update_homing_sequence+0x708>
		break;
 800612e:	bf00      	nop
 8006130:	e004      	b.n	800613c <update_homing_sequence+0x708>
		break;
 8006132:	bf00      	nop
 8006134:	e002      	b.n	800613c <update_homing_sequence+0x708>
		break;
 8006136:	bf00      	nop
 8006138:	e000      	b.n	800613c <update_homing_sequence+0x708>
		break;
 800613a:	bf00      	nop
	}
}
 800613c:	372c      	adds	r7, #44	@ 0x2c
 800613e:	46bd      	mov	sp, r7
 8006140:	ecbd 8b02 	vpop	{d8}
 8006144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006148:	20000740 	.word	0x20000740
 800614c:	20000aac 	.word	0x20000aac
 8006150:	20000000 	.word	0x20000000
 8006154:	20000b08 	.word	0x20000b08
 8006158:	200007dc 	.word	0x200007dc
 800615c:	200006fc 	.word	0x200006fc
 8006160:	200007d8 	.word	0x200007d8
 8006164:	200007e2 	.word	0x200007e2

08006168 <normalize_angle>:

float normalize_angle(float angle_rad) {
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 8006172:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80061b0 <normalize_angle+0x48>
 8006176:	ed97 0a01 	vldr	s0, [r7, #4]
 800617a:	f00c fe71 	bl	8012e60 <fmodf>
 800617e:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 8006182:	edd7 7a03 	vldr	s15, [r7, #12]
 8006186:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800618a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800618e:	d507      	bpl.n	80061a0 <normalize_angle+0x38>
		result += 2.0f * PI;
 8006190:	edd7 7a03 	vldr	s15, [r7, #12]
 8006194:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80061b0 <normalize_angle+0x48>
 8006198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800619c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	ee07 3a90 	vmov	s15, r3
}
 80061a6:	eeb0 0a67 	vmov.f32	s0, s15
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	40c90fdb 	.word	0x40c90fdb

080061b4 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80061be:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 80061c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80061cc:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8006330 <calculate_movement_deg+0x17c>
 80061d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061d8:	d508      	bpl.n	80061ec <calculate_movement_deg+0x38>
 80061da:	edd7 7a00 	vldr	s15, [r7]
 80061de:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8006330 <calculate_movement_deg+0x17c>
 80061e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ea:	d411      	bmi.n	8006210 <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 80061ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80061f0:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8006330 <calculate_movement_deg+0x17c>
 80061f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061fc:	db33      	blt.n	8006266 <calculate_movement_deg+0xb2>
 80061fe:	edd7 7a00 	vldr	s15, [r7]
 8006202:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8006330 <calculate_movement_deg+0x17c>
 8006206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800620a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800620e:	db2a      	blt.n	8006266 <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 8006210:	ed97 7a00 	vldr	s14, [r7]
 8006214:	edd7 7a01 	vldr	s15, [r7, #4]
 8006218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800621c:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 8006220:	edd7 7a03 	vldr	s15, [r7, #12]
 8006224:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006330 <calculate_movement_deg+0x17c>
 8006228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800622c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006230:	dd07      	ble.n	8006242 <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 8006232:	edd7 7a03 	vldr	s15, [r7, #12]
 8006236:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006334 <calculate_movement_deg+0x180>
 800623a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800623e:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006242:	edd7 7a03 	vldr	s15, [r7, #12]
 8006246:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8006338 <calculate_movement_deg+0x184>
 800624a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800624e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006252:	d562      	bpl.n	800631a <calculate_movement_deg+0x166>
			movement += 360.0f;
 8006254:	edd7 7a03 	vldr	s15, [r7, #12]
 8006258:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8006334 <calculate_movement_deg+0x180>
 800625c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006260:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8006264:	e059      	b.n	800631a <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		// If we need to cross the 180° boundary
		if (current_deg < 180.0f) {
 8006266:	edd7 7a01 	vldr	s15, [r7, #4]
 800626a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8006330 <calculate_movement_deg+0x17c>
 800626e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006276:	d52a      	bpl.n	80062ce <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8006278:	edd7 7a00 	vldr	s15, [r7]
 800627c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006330 <calculate_movement_deg+0x17c>
 8006280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006284:	ed97 7a01 	vldr	s14, [r7, #4]
 8006288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800628c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006290:	d50e      	bpl.n	80062b0 <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 8006292:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8006334 <calculate_movement_deg+0x180>
 8006296:	edd7 7a00 	vldr	s15, [r7]
 800629a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800629e:	edd7 7a01 	vldr	s15, [r7, #4]
 80062a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062a6:	eef1 7a67 	vneg.f32	s15, s15
 80062aa:	edc7 7a03 	vstr	s15, [r7, #12]
 80062ae:	e034      	b.n	800631a <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 80062b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80062b4:	edd7 7a00 	vldr	s15, [r7]
 80062b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062bc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006334 <calculate_movement_deg+0x180>
 80062c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062c4:	eef1 7a67 	vneg.f32	s15, s15
 80062c8:	edc7 7a03 	vstr	s15, [r7, #12]
 80062cc:	e025      	b.n	800631a <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 80062ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80062d2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006330 <calculate_movement_deg+0x17c>
 80062d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062da:	ed97 7a00 	vldr	s14, [r7]
 80062de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e6:	d50c      	bpl.n	8006302 <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 80062e8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8006334 <calculate_movement_deg+0x180>
 80062ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80062f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f4:	ed97 7a00 	vldr	s14, [r7]
 80062f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062fc:	edc7 7a03 	vstr	s15, [r7, #12]
 8006300:	e00b      	b.n	800631a <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 8006302:	ed97 7a00 	vldr	s14, [r7]
 8006306:	edd7 7a01 	vldr	s15, [r7, #4]
 800630a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800630e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006334 <calculate_movement_deg+0x180>
 8006312:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006316:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	ee07 3a90 	vmov	s15, r3
}
 8006320:	eeb0 0a67 	vmov.f32	s0, s15
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	43340000 	.word	0x43340000
 8006334:	43b40000 	.word	0x43b40000
 8006338:	c3340000 	.word	0xc3340000

0800633c <start_combined_trajectory>:

void start_combined_trajectory(float prismatic_target_mm,
		float revolute_target_deg) {
 800633c:	b590      	push	{r4, r7, lr}
 800633e:	ed2d 8b02 	vpush	{d8}
 8006342:	b08f      	sub	sp, #60	@ 0x3c
 8006344:	af00      	add	r7, sp, #0
 8006346:	ed87 0a01 	vstr	s0, [r7, #4]
 800634a:	edc7 0a00 	vstr	s1, [r7]
	bool allow_during_homing = (homing_active
 800634e:	4b6d      	ldr	r3, [pc, #436]	@ (8006504 <start_combined_trajectory+0x1c8>)
 8006350:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 8006352:	2b00      	cmp	r3, #0
 8006354:	d005      	beq.n	8006362 <start_combined_trajectory+0x26>
 8006356:	4b6c      	ldr	r3, [pc, #432]	@ (8006508 <start_combined_trajectory+0x1cc>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b07      	cmp	r3, #7
 800635c:	d101      	bne.n	8006362 <start_combined_trajectory+0x26>
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <start_combined_trajectory+0x28>
 8006362:	2300      	movs	r3, #0
	bool allow_during_homing = (homing_active
 8006364:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006368:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (is_emergency_active() || (homing_active && !allow_during_homing)) {
 8006374:	f001 f934 	bl	80075e0 <is_emergency_active>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	f040 81c8 	bne.w	8006710 <start_combined_trajectory+0x3d4>
 8006380:	4b60      	ldr	r3, [pc, #384]	@ (8006504 <start_combined_trajectory+0x1c8>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d007      	beq.n	8006398 <start_combined_trajectory+0x5c>
 8006388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800638c:	f083 0301 	eor.w	r3, r3, #1
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	f040 81bc 	bne.w	8006710 <start_combined_trajectory+0x3d4>
		return;
	}

	float pris_current = prismatic_encoder.mm;
 8006398:	4b5c      	ldr	r3, [pc, #368]	@ (800650c <start_combined_trajectory+0x1d0>)
 800639a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800639c:	62bb      	str	r3, [r7, #40]	@ 0x28
	float rev_current = revolute_encoder.rads;
 800639e:	4b5c      	ldr	r3, [pc, #368]	@ (8006510 <start_combined_trajectory+0x1d4>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a2:	627b      	str	r3, [r7, #36]	@ 0x24

	prisEva.t = 0.0f;
 80063a4:	4b5b      	ldr	r3, [pc, #364]	@ (8006514 <start_combined_trajectory+0x1d8>)
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	60da      	str	r2, [r3, #12]
	prisEva.isFinised = false;
 80063ac:	4b59      	ldr	r3, [pc, #356]	@ (8006514 <start_combined_trajectory+0x1d8>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	741a      	strb	r2, [r3, #16]
	revEva.t = 0.0f;
 80063b2:	4b59      	ldr	r3, [pc, #356]	@ (8006518 <start_combined_trajectory+0x1dc>)
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 80063ba:	4b57      	ldr	r3, [pc, #348]	@ (8006518 <start_combined_trajectory+0x1dc>)
 80063bc:	2200      	movs	r2, #0
 80063be:	741a      	strb	r2, [r3, #16]

	prismatic_axis.initial_pos = pris_current;
 80063c0:	4a56      	ldr	r2, [pc, #344]	@ (800651c <start_combined_trajectory+0x1e0>)
 80063c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c4:	60d3      	str	r3, [r2, #12]
	revolute_axis.initial_pos = rev_current;
 80063c6:	4a56      	ldr	r2, [pc, #344]	@ (8006520 <start_combined_trajectory+0x1e4>)
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	60d3      	str	r3, [r2, #12]

	prismatic_axis.target_pos = fminf(
 80063cc:	eddf 0a55 	vldr	s1, [pc, #340]	@ 8006524 <start_combined_trajectory+0x1e8>
 80063d0:	ed97 0a01 	vldr	s0, [r7, #4]
 80063d4:	f00c fe0c 	bl	8012ff0 <fmaxf>
 80063d8:	eef0 7a40 	vmov.f32	s15, s0
 80063dc:	eddf 0a52 	vldr	s1, [pc, #328]	@ 8006528 <start_combined_trajectory+0x1ec>
 80063e0:	eeb0 0a67 	vmov.f32	s0, s15
 80063e4:	f00c fe21 	bl	801302a <fminf>
 80063e8:	eef0 7a40 	vmov.f32	s15, s0
 80063ec:	4b4b      	ldr	r3, [pc, #300]	@ (800651c <start_combined_trajectory+0x1e0>)
 80063ee:	edc3 7a04 	vstr	s15, [r3, #16]
			fmaxf(prismatic_target_mm, PRISMATIC_MIN_POS), PRISMATIC_MAX_POS);

	float normalized_current = normalize_angle(rev_current);
 80063f2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80063f6:	f7ff feb7 	bl	8006168 <normalize_angle>
 80063fa:	ed87 0a08 	vstr	s0, [r7, #32]
	float current_deg = normalized_current * 180.0f / PI;
 80063fe:	edd7 7a08 	vldr	s15, [r7, #32]
 8006402:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 800652c <start_combined_trajectory+0x1f0>
 8006406:	ee27 7a87 	vmul.f32	s14, s15, s14
 800640a:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8006530 <start_combined_trajectory+0x1f4>
 800640e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006412:	edc7 7a07 	vstr	s15, [r7, #28]
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8006416:	edd7 0a00 	vldr	s1, [r7]
 800641a:	ed97 0a07 	vldr	s0, [r7, #28]
 800641e:	f7ff fec9 	bl	80061b4 <calculate_movement_deg>
 8006422:	eef0 7a40 	vmov.f32	s15, s0
 8006426:	4b43      	ldr	r3, [pc, #268]	@ (8006534 <start_combined_trajectory+0x1f8>)
 8006428:	edc3 7a00 	vstr	s15, [r3]
	float movement_rad = movement_deg * PI / 180.0f;
 800642c:	4b41      	ldr	r3, [pc, #260]	@ (8006534 <start_combined_trajectory+0x1f8>)
 800642e:	edd3 7a00 	vldr	s15, [r3]
 8006432:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006530 <start_combined_trajectory+0x1f4>
 8006436:	ee27 7a87 	vmul.f32	s14, s15, s14
 800643a:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 800652c <start_combined_trajectory+0x1f0>
 800643e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006442:	edc7 7a06 	vstr	s15, [r7, #24]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8006446:	4b36      	ldr	r3, [pc, #216]	@ (8006520 <start_combined_trajectory+0x1e4>)
 8006448:	ed93 7a03 	vldr	s14, [r3, #12]
 800644c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006454:	4b32      	ldr	r3, [pc, #200]	@ (8006520 <start_combined_trajectory+0x1e4>)
 8006456:	edc3 7a04 	vstr	s15, [r3, #16]

	// Check if we're in HOMING_REV_TO_ZERO_DEG mode
	bool is_homing_zero_deg = (homing_active
 800645a:	4b2a      	ldr	r3, [pc, #168]	@ (8006504 <start_combined_trajectory+0x1c8>)
 800645c:	781b      	ldrb	r3, [r3, #0]
			&& homing_state == HOMING_REV_TO_ZERO_DEG);
 800645e:	2b00      	cmp	r3, #0
 8006460:	d005      	beq.n	800646e <start_combined_trajectory+0x132>
 8006462:	4b29      	ldr	r3, [pc, #164]	@ (8006508 <start_combined_trajectory+0x1cc>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	2b07      	cmp	r3, #7
 8006468:	d101      	bne.n	800646e <start_combined_trajectory+0x132>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <start_combined_trajectory+0x134>
 800646e:	2300      	movs	r3, #0
	bool is_homing_zero_deg = (homing_active
 8006470:	75fb      	strb	r3, [r7, #23]
 8006472:	7dfb      	ldrb	r3, [r7, #23]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	75fb      	strb	r3, [r7, #23]

	if (is_homing_zero_deg) {
 800647a:	7dfb      	ldrb	r3, [r7, #23]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d067      	beq.n	8006550 <start_combined_trajectory+0x214>
		// HOMING_REV_TO_ZERO_DEG: Only generate revolute trajectory

		check[2]++;
 8006480:	4b2d      	ldr	r3, [pc, #180]	@ (8006538 <start_combined_trajectory+0x1fc>)
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	3301      	adds	r3, #1
 8006486:	4a2c      	ldr	r2, [pc, #176]	@ (8006538 <start_combined_trajectory+0x1fc>)
 8006488:	6093      	str	r3, [r2, #8]

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800648a:	4b25      	ldr	r3, [pc, #148]	@ (8006520 <start_combined_trajectory+0x1e4>)
 800648c:	ed93 8a03 	vldr	s16, [r3, #12]
 8006490:	4b23      	ldr	r3, [pc, #140]	@ (8006520 <start_combined_trajectory+0x1e4>)
 8006492:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 8006496:	4b29      	ldr	r3, [pc, #164]	@ (800653c <start_combined_trajectory+0x200>)
 8006498:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800649c:	4610      	mov	r0, r2
 800649e:	4619      	mov	r1, r3
 80064a0:	f7fa fb58 	bl	8000b54 <__aeabi_d2f>
 80064a4:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80064a6:	4b25      	ldr	r3, [pc, #148]	@ (800653c <start_combined_trajectory+0x200>)
 80064a8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80064ac:	4610      	mov	r0, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	f7fa fb50 	bl	8000b54 <__aeabi_d2f>
 80064b4:	4603      	mov	r3, r0
 80064b6:	ee01 3a90 	vmov	s3, r3
 80064ba:	ee01 4a10 	vmov	s2, r4
 80064be:	eef0 0a68 	vmov.f32	s1, s17
 80064c2:	eeb0 0a48 	vmov.f32	s0, s16
 80064c6:	481e      	ldr	r0, [pc, #120]	@ (8006540 <start_combined_trajectory+0x204>)
 80064c8:	f7fd ff24 	bl	8004314 <Trapezoidal_Generator>

		sync_motion_active = false;
 80064cc:	4b1d      	ldr	r3, [pc, #116]	@ (8006544 <start_combined_trajectory+0x208>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 80064d2:	4b12      	ldr	r3, [pc, #72]	@ (800651c <start_combined_trajectory+0x1e0>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		prismatic_axis.position = pris_current;
 80064da:	4a10      	ldr	r2, [pc, #64]	@ (800651c <start_combined_trajectory+0x1e0>)
 80064dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064de:	6013      	str	r3, [r2, #0]
		prismatic_axis.velocity = 0.0f;
 80064e0:	4b0e      	ldr	r3, [pc, #56]	@ (800651c <start_combined_trajectory+0x1e0>)
 80064e2:	f04f 0200 	mov.w	r2, #0
 80064e6:	605a      	str	r2, [r3, #4]

		revolute_axis.trajectory_active = true;
 80064e8:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <start_combined_trajectory+0x1e4>)
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		plotter_pen_up();
 80064f0:	f003 fa46 	bl	8009980 <plotter_pen_up>
		motion_delay_timer = 0;
 80064f4:	4b14      	ldr	r3, [pc, #80]	@ (8006548 <start_combined_trajectory+0x20c>)
 80064f6:	2200      	movs	r2, #0
 80064f8:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 80064fa:	4b14      	ldr	r3, [pc, #80]	@ (800654c <start_combined_trajectory+0x210>)
 80064fc:	2201      	movs	r2, #1
 80064fe:	701a      	strb	r2, [r3, #0]
 8006500:	e107      	b.n	8006712 <start_combined_trajectory+0x3d6>
 8006502:	bf00      	nop
 8006504:	200007e3 	.word	0x200007e3
 8006508:	200007e2 	.word	0x200007e2
 800650c:	2000097c 	.word	0x2000097c
 8006510:	200009d8 	.word	0x200009d8
 8006514:	200007b0 	.word	0x200007b0
 8006518:	200007c4 	.word	0x200007c4
 800651c:	200006fc 	.word	0x200006fc
 8006520:	20000740 	.word	0x20000740
 8006524:	00000000 	.word	0x00000000
 8006528:	43960000 	.word	0x43960000
 800652c:	43340000 	.word	0x43340000
 8006530:	40490fdb 	.word	0x40490fdb
 8006534:	200007f8 	.word	0x200007f8
 8006538:	20000864 	.word	0x20000864
 800653c:	20000000 	.word	0x20000000
 8006540:	2000079c 	.word	0x2000079c
 8006544:	200008a4 	.word	0x200008a4
 8006548:	200007d8 	.word	0x200007d8
 800654c:	20000784 	.word	0x20000784

	} else {
		// NORMAL TRAJECTORY: Use time-synchronized motion
		check[3]++;
 8006550:	4b72      	ldr	r3, [pc, #456]	@ (800671c <start_combined_trajectory+0x3e0>)
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	3301      	adds	r3, #1
 8006556:	4a71      	ldr	r2, [pc, #452]	@ (800671c <start_combined_trajectory+0x3e0>)
 8006558:	60d3      	str	r3, [r2, #12]
		// Calculate distances
		float pris_distance = fabsf(
				prismatic_axis.target_pos - prismatic_axis.initial_pos);
 800655a:	4b71      	ldr	r3, [pc, #452]	@ (8006720 <start_combined_trajectory+0x3e4>)
 800655c:	ed93 7a04 	vldr	s14, [r3, #16]
 8006560:	4b6f      	ldr	r3, [pc, #444]	@ (8006720 <start_combined_trajectory+0x3e4>)
 8006562:	edd3 7a03 	vldr	s15, [r3, #12]
 8006566:	ee77 7a67 	vsub.f32	s15, s14, s15
		float pris_distance = fabsf(
 800656a:	eef0 7ae7 	vabs.f32	s15, s15
 800656e:	edc7 7a04 	vstr	s15, [r7, #16]
		float rev_distance = fabsf(
				revolute_axis.target_pos - revolute_axis.initial_pos);
 8006572:	4b6c      	ldr	r3, [pc, #432]	@ (8006724 <start_combined_trajectory+0x3e8>)
 8006574:	ed93 7a04 	vldr	s14, [r3, #16]
 8006578:	4b6a      	ldr	r3, [pc, #424]	@ (8006724 <start_combined_trajectory+0x3e8>)
 800657a:	edd3 7a03 	vldr	s15, [r3, #12]
 800657e:	ee77 7a67 	vsub.f32	s15, s14, s15
		float rev_distance = fabsf(
 8006582:	eef0 7ae7 	vabs.f32	s15, s15
 8006586:	edc7 7a03 	vstr	s15, [r7, #12]

		// Calculate time needed for each axis at their max speeds
		float pris_time_needed = 0.0f;
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	637b      	str	r3, [r7, #52]	@ 0x34
		float rev_time_needed = 0.0f;
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	633b      	str	r3, [r7, #48]	@ 0x30

		if (pris_distance > 0.1f) {
 8006596:	edd7 7a04 	vldr	s15, [r7, #16]
 800659a:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8006728 <start_combined_trajectory+0x3ec>
 800659e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a6:	dd18      	ble.n	80065da <start_combined_trajectory+0x29e>
			// Time = distance / max_velocity, factor in acceleration/deceleration
			pris_time_needed = (pris_distance
					/ ZGX45RGG_400RPM_Constant.traject_sd_max) * 2.5f;
 80065a8:	6938      	ldr	r0, [r7, #16]
 80065aa:	f7f9 ff99 	bl	80004e0 <__aeabi_f2d>
 80065ae:	4b5f      	ldr	r3, [pc, #380]	@ (800672c <start_combined_trajectory+0x3f0>)
 80065b0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80065b4:	f7fa f916 	bl	80007e4 <__aeabi_ddiv>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4610      	mov	r0, r2
 80065be:	4619      	mov	r1, r3
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	4b5a      	ldr	r3, [pc, #360]	@ (8006730 <start_combined_trajectory+0x3f4>)
 80065c6:	f7f9 ffe3 	bl	8000590 <__aeabi_dmul>
 80065ca:	4602      	mov	r2, r0
 80065cc:	460b      	mov	r3, r1
			pris_time_needed = (pris_distance
 80065ce:	4610      	mov	r0, r2
 80065d0:	4619      	mov	r1, r3
 80065d2:	f7fa fabf 	bl	8000b54 <__aeabi_d2f>
 80065d6:	4603      	mov	r3, r0
 80065d8:	637b      	str	r3, [r7, #52]	@ 0x34
		}

		if (rev_distance > 0.01f) {
 80065da:	edd7 7a03 	vldr	s15, [r7, #12]
 80065de:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006734 <start_combined_trajectory+0x3f8>
 80065e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ea:	dd18      	ble.n	800661e <start_combined_trajectory+0x2e2>
			rev_time_needed = (rev_distance
					/ ZGX45RGG_150RPM_Constant.traject_qd_max) * 2.5f;
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7f9 ff77 	bl	80004e0 <__aeabi_f2d>
 80065f2:	4b51      	ldr	r3, [pc, #324]	@ (8006738 <start_combined_trajectory+0x3fc>)
 80065f4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80065f8:	f7fa f8f4 	bl	80007e4 <__aeabi_ddiv>
 80065fc:	4602      	mov	r2, r0
 80065fe:	460b      	mov	r3, r1
 8006600:	4610      	mov	r0, r2
 8006602:	4619      	mov	r1, r3
 8006604:	f04f 0200 	mov.w	r2, #0
 8006608:	4b49      	ldr	r3, [pc, #292]	@ (8006730 <start_combined_trajectory+0x3f4>)
 800660a:	f7f9 ffc1 	bl	8000590 <__aeabi_dmul>
 800660e:	4602      	mov	r2, r0
 8006610:	460b      	mov	r3, r1
			rev_time_needed = (rev_distance
 8006612:	4610      	mov	r0, r2
 8006614:	4619      	mov	r1, r3
 8006616:	f7fa fa9d 	bl	8000b54 <__aeabi_d2f>
 800661a:	4603      	mov	r3, r0
 800661c:	633b      	str	r3, [r7, #48]	@ 0x30
		}

		// Use the longer time, with minimum time
		sync_total_time = fmaxf(pris_time_needed, rev_time_needed);
 800661e:	edd7 0a0c 	vldr	s1, [r7, #48]	@ 0x30
 8006622:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8006626:	f00c fce3 	bl	8012ff0 <fmaxf>
 800662a:	eef0 7a40 	vmov.f32	s15, s0
 800662e:	4b43      	ldr	r3, [pc, #268]	@ (800673c <start_combined_trajectory+0x400>)
 8006630:	edc3 7a00 	vstr	s15, [r3]
		if (sync_total_time < 1.0f)
 8006634:	4b41      	ldr	r3, [pc, #260]	@ (800673c <start_combined_trajectory+0x400>)
 8006636:	edd3 7a00 	vldr	s15, [r3]
 800663a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800663e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006646:	d503      	bpl.n	8006650 <start_combined_trajectory+0x314>
			sync_total_time = 1.0f; // Minimum 1 second
 8006648:	4b3c      	ldr	r3, [pc, #240]	@ (800673c <start_combined_trajectory+0x400>)
 800664a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800664e:	601a      	str	r2, [r3, #0]

		// Generate individual trajectories (we'll interpolate based on sync_total_time)
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006650:	4b33      	ldr	r3, [pc, #204]	@ (8006720 <start_combined_trajectory+0x3e4>)
 8006652:	ed93 8a03 	vldr	s16, [r3, #12]
 8006656:	4b32      	ldr	r3, [pc, #200]	@ (8006720 <start_combined_trajectory+0x3e4>)
 8006658:	edd3 8a04 	vldr	s17, [r3, #16]
				prismatic_axis.target_pos,
				ZGX45RGG_400RPM_Constant.traject_sd_max,
 800665c:	4b33      	ldr	r3, [pc, #204]	@ (800672c <start_combined_trajectory+0x3f0>)
 800665e:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	f7fa fa75 	bl	8000b54 <__aeabi_d2f>
 800666a:	4604      	mov	r4, r0
				ZGX45RGG_400RPM_Constant.traject_sdd_max);
 800666c:	4b2f      	ldr	r3, [pc, #188]	@ (800672c <start_combined_trajectory+0x3f0>)
 800666e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
		Trapezoidal_Generator(&prisGen, prismatic_axis.initial_pos,
 8006672:	4610      	mov	r0, r2
 8006674:	4619      	mov	r1, r3
 8006676:	f7fa fa6d 	bl	8000b54 <__aeabi_d2f>
 800667a:	4603      	mov	r3, r0
 800667c:	ee01 3a90 	vmov	s3, r3
 8006680:	ee01 4a10 	vmov	s2, r4
 8006684:	eef0 0a68 	vmov.f32	s1, s17
 8006688:	eeb0 0a48 	vmov.f32	s0, s16
 800668c:	482c      	ldr	r0, [pc, #176]	@ (8006740 <start_combined_trajectory+0x404>)
 800668e:	f7fd fe41 	bl	8004314 <Trapezoidal_Generator>

		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8006692:	4b24      	ldr	r3, [pc, #144]	@ (8006724 <start_combined_trajectory+0x3e8>)
 8006694:	ed93 8a03 	vldr	s16, [r3, #12]
 8006698:	4b22      	ldr	r3, [pc, #136]	@ (8006724 <start_combined_trajectory+0x3e8>)
 800669a:	edd3 8a04 	vldr	s17, [r3, #16]
				revolute_axis.target_pos,
				ZGX45RGG_150RPM_Constant.traject_qd_max,
 800669e:	4b26      	ldr	r3, [pc, #152]	@ (8006738 <start_combined_trajectory+0x3fc>)
 80066a0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80066a4:	4610      	mov	r0, r2
 80066a6:	4619      	mov	r1, r3
 80066a8:	f7fa fa54 	bl	8000b54 <__aeabi_d2f>
 80066ac:	4604      	mov	r4, r0
				ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80066ae:	4b22      	ldr	r3, [pc, #136]	@ (8006738 <start_combined_trajectory+0x3fc>)
 80066b0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
		Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80066b4:	4610      	mov	r0, r2
 80066b6:	4619      	mov	r1, r3
 80066b8:	f7fa fa4c 	bl	8000b54 <__aeabi_d2f>
 80066bc:	4603      	mov	r3, r0
 80066be:	ee01 3a90 	vmov	s3, r3
 80066c2:	ee01 4a10 	vmov	s2, r4
 80066c6:	eef0 0a68 	vmov.f32	s1, s17
 80066ca:	eeb0 0a48 	vmov.f32	s0, s16
 80066ce:	481d      	ldr	r0, [pc, #116]	@ (8006744 <start_combined_trajectory+0x408>)
 80066d0:	f7fd fe20 	bl	8004314 <Trapezoidal_Generator>

		// Initialize synchronized motion
		sync_motion_active = true;
 80066d4:	4b1c      	ldr	r3, [pc, #112]	@ (8006748 <start_combined_trajectory+0x40c>)
 80066d6:	2201      	movs	r2, #1
 80066d8:	701a      	strb	r2, [r3, #0]
		sync_start_time = 0.0f;
 80066da:	4b1c      	ldr	r3, [pc, #112]	@ (800674c <start_combined_trajectory+0x410>)
 80066dc:	f04f 0200 	mov.w	r2, #0
 80066e0:	601a      	str	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 80066e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006720 <start_combined_trajectory+0x3e4>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 80066ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006724 <start_combined_trajectory+0x3e8>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		plotter_pen_up();
 80066f2:	f003 f945 	bl	8009980 <plotter_pen_up>
		motion_delay_timer = 0;
 80066f6:	4b16      	ldr	r3, [pc, #88]	@ (8006750 <start_combined_trajectory+0x414>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
		motion_sequence_state = MOTION_PEN_UP_DELAY;
 80066fc:	4b15      	ldr	r3, [pc, #84]	@ (8006754 <start_combined_trajectory+0x418>)
 80066fe:	2201      	movs	r2, #1
 8006700:	701a      	strb	r2, [r3, #0]

		//modbus reset state
		registerFrame[BaseSystem_Status].U16 = 0;
 8006702:	4b15      	ldr	r3, [pc, #84]	@ (8006758 <start_combined_trajectory+0x41c>)
 8006704:	2200      	movs	r2, #0
 8006706:	805a      	strh	r2, [r3, #2]
		registerFrame[R_Theta_Status].U16 = 0;
 8006708:	4b13      	ldr	r3, [pc, #76]	@ (8006758 <start_combined_trajectory+0x41c>)
 800670a:	2200      	movs	r2, #0
 800670c:	841a      	strh	r2, [r3, #32]
 800670e:	e000      	b.n	8006712 <start_combined_trajectory+0x3d6>
		return;
 8006710:	bf00      	nop
	}
}
 8006712:	373c      	adds	r7, #60	@ 0x3c
 8006714:	46bd      	mov	sp, r7
 8006716:	ecbd 8b02 	vpop	{d8}
 800671a:	bd90      	pop	{r4, r7, pc}
 800671c:	20000864 	.word	0x20000864
 8006720:	200006fc 	.word	0x200006fc
 8006724:	20000740 	.word	0x20000740
 8006728:	3dcccccd 	.word	0x3dcccccd
 800672c:	20000080 	.word	0x20000080
 8006730:	40040000 	.word	0x40040000
 8006734:	3c23d70a 	.word	0x3c23d70a
 8006738:	20000000 	.word	0x20000000
 800673c:	200008a0 	.word	0x200008a0
 8006740:	20000788 	.word	0x20000788
 8006744:	2000079c 	.word	0x2000079c
 8006748:	200008a4 	.word	0x200008a4
 800674c:	2000089c 	.word	0x2000089c
 8006750:	200007d8 	.word	0x200007d8
 8006754:	20000784 	.word	0x20000784
 8006758:	20001580 	.word	0x20001580

0800675c <update_position_control>:
void update_position_control(void) {
 800675c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006760:	ed2d 8b02 	vpush	{d8}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
	prismatic_axis.pos_error = prismatic_axis.position - prismatic_encoder.mm;
 8006768:	4b50      	ldr	r3, [pc, #320]	@ (80068ac <update_position_control+0x150>)
 800676a:	ed93 7a00 	vldr	s14, [r3]
 800676e:	4b50      	ldr	r3, [pc, #320]	@ (80068b0 <update_position_control+0x154>)
 8006770:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8006774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006778:	4b4c      	ldr	r3, [pc, #304]	@ (80068ac <update_position_control+0x150>)
 800677a:	edc3 7a05 	vstr	s15, [r3, #20]
	prismatic_axis.command_vel = PWM_Satuation(
 800677e:	4b4b      	ldr	r3, [pc, #300]	@ (80068ac <update_position_control+0x150>)
 8006780:	edd3 7a05 	vldr	s15, [r3, #20]
 8006784:	eeb0 0a67 	vmov.f32	s0, s15
 8006788:	484a      	ldr	r0, [pc, #296]	@ (80068b4 <update_position_control+0x158>)
 800678a:	f7fa fd45 	bl	8001218 <PID_CONTROLLER_Compute>
 800678e:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_position_pid,
					prismatic_axis.pos_error), ZGX45RGG_400RPM_Constant.sd_max,
 8006792:	4b49      	ldr	r3, [pc, #292]	@ (80068b8 <update_position_control+0x15c>)
 8006794:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	prismatic_axis.command_vel = PWM_Satuation(
 8006798:	4610      	mov	r0, r2
 800679a:	4619      	mov	r1, r3
 800679c:	f7fa f992 	bl	8000ac4 <__aeabi_d2iz>
 80067a0:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.sd_max);
 80067a2:	4b45      	ldr	r3, [pc, #276]	@ (80068b8 <update_position_control+0x15c>)
 80067a4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80067a8:	4690      	mov	r8, r2
 80067aa:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_vel = PWM_Satuation(
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	f7fa f987 	bl	8000ac4 <__aeabi_d2iz>
 80067b6:	4603      	mov	r3, r0
 80067b8:	4619      	mov	r1, r3
 80067ba:	4630      	mov	r0, r6
 80067bc:	eeb0 0a48 	vmov.f32	s0, s16
 80067c0:	f7fa fcc8 	bl	8001154 <PWM_Satuation>
 80067c4:	ee07 0a90 	vmov	s15, r0
 80067c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067cc:	4b37      	ldr	r3, [pc, #220]	@ (80068ac <update_position_control+0x150>)
 80067ce:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

	float normalized_position = normalize_angle(revolute_encoder.rads);
 80067d2:	4b3a      	ldr	r3, [pc, #232]	@ (80068bc <update_position_control+0x160>)
 80067d4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80067d8:	eeb0 0a67 	vmov.f32	s0, s15
 80067dc:	f7ff fcc4 	bl	8006168 <normalize_angle>
 80067e0:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 80067e4:	4b36      	ldr	r3, [pc, #216]	@ (80068c0 <update_position_control+0x164>)
 80067e6:	ed93 7a00 	vldr	s14, [r3]
 80067ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80067ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067f2:	4b33      	ldr	r3, [pc, #204]	@ (80068c0 <update_position_control+0x164>)
 80067f4:	edc3 7a05 	vstr	s15, [r3, #20]

	if (revolute_axis.pos_error > PI)
 80067f8:	4b31      	ldr	r3, [pc, #196]	@ (80068c0 <update_position_control+0x164>)
 80067fa:	edd3 7a05 	vldr	s15, [r3, #20]
 80067fe:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80068c4 <update_position_control+0x168>
 8006802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800680a:	dd09      	ble.n	8006820 <update_position_control+0xc4>
		revolute_axis.pos_error -= 2.0f * PI;
 800680c:	4b2c      	ldr	r3, [pc, #176]	@ (80068c0 <update_position_control+0x164>)
 800680e:	edd3 7a05 	vldr	s15, [r3, #20]
 8006812:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80068c8 <update_position_control+0x16c>
 8006816:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800681a:	4b29      	ldr	r3, [pc, #164]	@ (80068c0 <update_position_control+0x164>)
 800681c:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8006820:	4b27      	ldr	r3, [pc, #156]	@ (80068c0 <update_position_control+0x164>)
 8006822:	edd3 7a05 	vldr	s15, [r3, #20]
 8006826:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80068cc <update_position_control+0x170>
 800682a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800682e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006832:	d509      	bpl.n	8006848 <update_position_control+0xec>
		revolute_axis.pos_error += 2.0f * PI;
 8006834:	4b22      	ldr	r3, [pc, #136]	@ (80068c0 <update_position_control+0x164>)
 8006836:	edd3 7a05 	vldr	s15, [r3, #20]
 800683a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80068c8 <update_position_control+0x16c>
 800683e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006842:	4b1f      	ldr	r3, [pc, #124]	@ (80068c0 <update_position_control+0x164>)
 8006844:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8006848:	4b1d      	ldr	r3, [pc, #116]	@ (80068c0 <update_position_control+0x164>)
 800684a:	edd3 7a05 	vldr	s15, [r3, #20]
 800684e:	eeb0 0a67 	vmov.f32	s0, s15
 8006852:	481f      	ldr	r0, [pc, #124]	@ (80068d0 <update_position_control+0x174>)
 8006854:	f7fa fce0 	bl	8001218 <PID_CONTROLLER_Compute>
 8006858:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 800685c:	4b1d      	ldr	r3, [pc, #116]	@ (80068d4 <update_position_control+0x178>)
 800685e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	f7fa f92d 	bl	8000ac4 <__aeabi_d2iz>
 800686a:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 800686c:	4b19      	ldr	r3, [pc, #100]	@ (80068d4 <update_position_control+0x178>)
 800686e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8006872:	4614      	mov	r4, r2
 8006874:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 8006878:	4620      	mov	r0, r4
 800687a:	4629      	mov	r1, r5
 800687c:	f7fa f922 	bl	8000ac4 <__aeabi_d2iz>
 8006880:	4603      	mov	r3, r0
 8006882:	4619      	mov	r1, r3
 8006884:	4630      	mov	r0, r6
 8006886:	eeb0 0a48 	vmov.f32	s0, s16
 800688a:	f7fa fc63 	bl	8001154 <PWM_Satuation>
 800688e:	ee07 0a90 	vmov	s15, r0
 8006892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006896:	4b0a      	ldr	r3, [pc, #40]	@ (80068c0 <update_position_control+0x164>)
 8006898:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	ecbd 8b02 	vpop	{d8}
 80068a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068aa:	bf00      	nop
 80068ac:	200006fc 	.word	0x200006fc
 80068b0:	2000097c 	.word	0x2000097c
 80068b4:	20000a34 	.word	0x20000a34
 80068b8:	20000080 	.word	0x20000080
 80068bc:	200009d8 	.word	0x200009d8
 80068c0:	20000740 	.word	0x20000740
 80068c4:	40490fdb 	.word	0x40490fdb
 80068c8:	40c90fdb 	.word	0x40c90fdb
 80068cc:	c0490fdb 	.word	0xc0490fdb
 80068d0:	20000a84 	.word	0x20000a84
 80068d4:	20000000 	.word	0x20000000

080068d8 <update_velocity_control>:

void update_velocity_control(void) {
 80068d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	ed2d 8b02 	vpush	{d8}
 80068e0:	b083      	sub	sp, #12
 80068e2:	af00      	add	r7, sp, #0

	if (prismatic_axis.trajectory_active) {
 80068e4:	4b96      	ldr	r3, [pc, #600]	@ (8006b40 <update_velocity_control+0x268>)
 80068e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d010      	beq.n	8006910 <update_velocity_control+0x38>
		prismatic_axis.vel_error = prismatic_axis.command_vel
 80068ee:	4b94      	ldr	r3, [pc, #592]	@ (8006b40 <update_velocity_control+0x268>)
 80068f0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ prismatic_axis.velocity - prismatic_axis.kalman_velocity;
 80068f4:	4b92      	ldr	r3, [pc, #584]	@ (8006b40 <update_velocity_control+0x268>)
 80068f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80068fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068fe:	4b90      	ldr	r3, [pc, #576]	@ (8006b40 <update_velocity_control+0x268>)
 8006900:	edd3 7a07 	vldr	s15, [r3, #28]
 8006904:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006908:	4b8d      	ldr	r3, [pc, #564]	@ (8006b40 <update_velocity_control+0x268>)
 800690a:	edc3 7a06 	vstr	s15, [r3, #24]
 800690e:	e00a      	b.n	8006926 <update_velocity_control+0x4e>
	} else {
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006910:	4b8b      	ldr	r3, [pc, #556]	@ (8006b40 <update_velocity_control+0x268>)
 8006912:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8006916:	4b8a      	ldr	r3, [pc, #552]	@ (8006b40 <update_velocity_control+0x268>)
 8006918:	edd3 7a07 	vldr	s15, [r3, #28]
 800691c:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8006920:	4b87      	ldr	r3, [pc, #540]	@ (8006b40 <update_velocity_control+0x268>)
 8006922:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	prismatic_axis.command_pos = PWM_Satuation(
 8006926:	4b86      	ldr	r3, [pc, #536]	@ (8006b40 <update_velocity_control+0x268>)
 8006928:	edd3 7a06 	vldr	s15, [r3, #24]
 800692c:	eeb0 0a67 	vmov.f32	s0, s15
 8006930:	4884      	ldr	r0, [pc, #528]	@ (8006b44 <update_velocity_control+0x26c>)
 8006932:	f7fa fc71 	bl	8001218 <PID_CONTROLLER_Compute>
 8006936:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&prismatic_velocity_pid,
					prismatic_axis.vel_error), ZGX45RGG_400RPM_Constant.U_max,
 800693a:	4b83      	ldr	r3, [pc, #524]	@ (8006b48 <update_velocity_control+0x270>)
 800693c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(
 8006940:	4610      	mov	r0, r2
 8006942:	4619      	mov	r1, r3
 8006944:	f7fa f8be 	bl	8000ac4 <__aeabi_d2iz>
 8006948:	4606      	mov	r6, r0
			-ZGX45RGG_400RPM_Constant.U_max);
 800694a:	4b7f      	ldr	r3, [pc, #508]	@ (8006b48 <update_velocity_control+0x270>)
 800694c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006950:	603a      	str	r2, [r7, #0]
 8006952:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006956:	607b      	str	r3, [r7, #4]
	prismatic_axis.command_pos = PWM_Satuation(
 8006958:	e9d7 0100 	ldrd	r0, r1, [r7]
 800695c:	f7fa f8b2 	bl	8000ac4 <__aeabi_d2iz>
 8006960:	4603      	mov	r3, r0
 8006962:	4619      	mov	r1, r3
 8006964:	4630      	mov	r0, r6
 8006966:	eeb0 0a48 	vmov.f32	s0, s16
 800696a:	f7fa fbf3 	bl	8001154 <PWM_Satuation>
 800696e:	ee07 0a90 	vmov	s15, r0
 8006972:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006976:	4b72      	ldr	r3, [pc, #456]	@ (8006b40 <update_velocity_control+0x268>)
 8006978:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (prismatic_axis.trajectory_active) {
 800697c:	4b70      	ldr	r3, [pc, #448]	@ (8006b40 <update_velocity_control+0x268>)
 800697e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006982:	2b00      	cmp	r3, #0
 8006984:	d02c      	beq.n	80069e0 <update_velocity_control+0x108>
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
				prismatic_axis.velocity / 1000.0f);
 8006986:	4b6e      	ldr	r3, [pc, #440]	@ (8006b40 <update_velocity_control+0x268>)
 8006988:	edd3 7a01 	vldr	s15, [r3, #4]
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 800698c:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b4c <update_velocity_control+0x274>
 8006990:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006994:	eeb0 0a47 	vmov.f32	s0, s14
 8006998:	486d      	ldr	r0, [pc, #436]	@ (8006b50 <update_velocity_control+0x278>)
 800699a:	f7fa ff59 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 800699e:	eef0 7a40 	vmov.f32	s15, s0
 80069a2:	4b67      	ldr	r3, [pc, #412]	@ (8006b40 <update_velocity_control+0x268>)
 80069a4:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80069a8:	4b6a      	ldr	r3, [pc, #424]	@ (8006b54 <update_velocity_control+0x27c>)
 80069aa:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80069ae:	4b6a      	ldr	r3, [pc, #424]	@ (8006b58 <update_velocity_control+0x280>)
 80069b0:	edd3 6a01 	vldr	s13, [r3, #4]
				revolute_encoder.rads, revolute_axis.velocity,
				prismatic_encoder.mm / 1000.0f);
 80069b4:	4b69      	ldr	r3, [pc, #420]	@ (8006b5c <update_velocity_control+0x284>)
 80069b6:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 80069ba:	eddf 5a64 	vldr	s11, [pc, #400]	@ 8006b4c <update_velocity_control+0x274>
 80069be:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80069c2:	eeb0 1a46 	vmov.f32	s2, s12
 80069c6:	eef0 0a66 	vmov.f32	s1, s13
 80069ca:	eeb0 0a47 	vmov.f32	s0, s14
 80069ce:	4864      	ldr	r0, [pc, #400]	@ (8006b60 <update_velocity_control+0x288>)
 80069d0:	f7fa ffe6 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 80069d4:	eef0 7a40 	vmov.f32	s15, s0
 80069d8:	4b59      	ldr	r3, [pc, #356]	@ (8006b40 <update_velocity_control+0x268>)
 80069da:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80069de:	e007      	b.n	80069f0 <update_velocity_control+0x118>
	} else {
		prismatic_axis.ffd = 0.0f;
 80069e0:	4b57      	ldr	r3, [pc, #348]	@ (8006b40 <update_velocity_control+0x268>)
 80069e2:	f04f 0200 	mov.w	r2, #0
 80069e6:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 80069e8:	4b55      	ldr	r3, [pc, #340]	@ (8006b40 <update_velocity_control+0x268>)
 80069ea:	f04f 0200 	mov.w	r2, #0
 80069ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 80069f0:	4b53      	ldr	r3, [pc, #332]	@ (8006b40 <update_velocity_control+0x268>)
 80069f2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80069f6:	4b52      	ldr	r3, [pc, #328]	@ (8006b40 <update_velocity_control+0x268>)
 80069f8:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80069fc:	4b50      	ldr	r3, [pc, #320]	@ (8006b40 <update_velocity_control+0x268>)
 80069fe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8006b40 <update_velocity_control+0x268>)
 8006a0c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006a10:	4b4b      	ldr	r3, [pc, #300]	@ (8006b40 <update_velocity_control+0x268>)
 8006a12:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006a16:	4b4c      	ldr	r3, [pc, #304]	@ (8006b48 <update_velocity_control+0x270>)
 8006a18:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006a1c:	4610      	mov	r0, r2
 8006a1e:	4619      	mov	r1, r3
 8006a20:	f7fa f850 	bl	8000ac4 <__aeabi_d2iz>
 8006a24:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8006a26:	4b48      	ldr	r3, [pc, #288]	@ (8006b48 <update_velocity_control+0x270>)
 8006a28:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006a2c:	4692      	mov	sl, r2
 8006a2e:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8006a32:	4650      	mov	r0, sl
 8006a34:	4659      	mov	r1, fp
 8006a36:	f7fa f845 	bl	8000ac4 <__aeabi_d2iz>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	4630      	mov	r0, r6
 8006a40:	eeb0 0a48 	vmov.f32	s0, s16
 8006a44:	f7fa fb86 	bl	8001154 <PWM_Satuation>
 8006a48:	ee07 0a90 	vmov	s15, r0
 8006a4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a50:	4b3b      	ldr	r3, [pc, #236]	@ (8006b40 <update_velocity_control+0x268>)
 8006a52:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006a56:	4b40      	ldr	r3, [pc, #256]	@ (8006b58 <update_velocity_control+0x280>)
 8006a58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d010      	beq.n	8006a82 <update_velocity_control+0x1aa>
		revolute_axis.vel_error = revolute_axis.command_vel
 8006a60:	4b3d      	ldr	r3, [pc, #244]	@ (8006b58 <update_velocity_control+0x280>)
 8006a62:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8006a66:	4b3c      	ldr	r3, [pc, #240]	@ (8006b58 <update_velocity_control+0x280>)
 8006a68:	edd3 7a01 	vldr	s15, [r3, #4]
 8006a6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a70:	4b39      	ldr	r3, [pc, #228]	@ (8006b58 <update_velocity_control+0x280>)
 8006a72:	edd3 7a07 	vldr	s15, [r3, #28]
 8006a76:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006a7a:	4b37      	ldr	r3, [pc, #220]	@ (8006b58 <update_velocity_control+0x280>)
 8006a7c:	edc3 7a06 	vstr	s15, [r3, #24]
 8006a80:	e00a      	b.n	8006a98 <update_velocity_control+0x1c0>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 8006a82:	4b35      	ldr	r3, [pc, #212]	@ (8006b58 <update_velocity_control+0x280>)
 8006a84:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8006a88:	4b33      	ldr	r3, [pc, #204]	@ (8006b58 <update_velocity_control+0x280>)
 8006a8a:	edd3 7a07 	vldr	s15, [r3, #28]
 8006a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8006a92:	4b31      	ldr	r3, [pc, #196]	@ (8006b58 <update_velocity_control+0x280>)
 8006a94:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8006a98:	4b2f      	ldr	r3, [pc, #188]	@ (8006b58 <update_velocity_control+0x280>)
 8006a9a:	edd3 7a06 	vldr	s15, [r3, #24]
 8006a9e:	eeb0 0a67 	vmov.f32	s0, s15
 8006aa2:	4830      	ldr	r0, [pc, #192]	@ (8006b64 <update_velocity_control+0x28c>)
 8006aa4:	f7fa fbb8 	bl	8001218 <PID_CONTROLLER_Compute>
 8006aa8:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid,
					revolute_axis.vel_error), ZGX45RGG_150RPM_Constant.U_max,
 8006aac:	4b2e      	ldr	r3, [pc, #184]	@ (8006b68 <update_velocity_control+0x290>)
 8006aae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	f7fa f805 	bl	8000ac4 <__aeabi_d2iz>
 8006aba:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.U_max);
 8006abc:	4b2a      	ldr	r3, [pc, #168]	@ (8006b68 <update_velocity_control+0x290>)
 8006abe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006ac2:	4690      	mov	r8, r2
 8006ac4:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8006ac8:	4640      	mov	r0, r8
 8006aca:	4649      	mov	r1, r9
 8006acc:	f7f9 fffa 	bl	8000ac4 <__aeabi_d2iz>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	eeb0 0a48 	vmov.f32	s0, s16
 8006ada:	f7fa fb3b 	bl	8001154 <PWM_Satuation>
 8006ade:	ee07 0a90 	vmov	s15, r0
 8006ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8006b58 <update_velocity_control+0x280>)
 8006ae8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 8006aec:	4b1a      	ldr	r3, [pc, #104]	@ (8006b58 <update_velocity_control+0x280>)
 8006aee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d03e      	beq.n	8006b74 <update_velocity_control+0x29c>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8006af6:	4b18      	ldr	r3, [pc, #96]	@ (8006b58 <update_velocity_control+0x280>)
 8006af8:	edd3 7a01 	vldr	s15, [r3, #4]
 8006afc:	eeb0 0a67 	vmov.f32	s0, s15
 8006b00:	481a      	ldr	r0, [pc, #104]	@ (8006b6c <update_velocity_control+0x294>)
 8006b02:	f7fa fd27 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 8006b06:	eef0 7a40 	vmov.f32	s15, s0
 8006b0a:	4b13      	ldr	r3, [pc, #76]	@ (8006b58 <update_velocity_control+0x280>)
 8006b0c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b10:	4b10      	ldr	r3, [pc, #64]	@ (8006b54 <update_velocity_control+0x27c>)
 8006b12:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006b16:	4b11      	ldr	r3, [pc, #68]	@ (8006b5c <update_velocity_control+0x284>)
 8006b18:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b1c:	ed9f 6a0b 	vldr	s12, [pc, #44]	@ 8006b4c <update_velocity_control+0x274>
 8006b20:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006b24:	eef0 0a66 	vmov.f32	s1, s13
 8006b28:	eeb0 0a47 	vmov.f32	s0, s14
 8006b2c:	4810      	ldr	r0, [pc, #64]	@ (8006b70 <update_velocity_control+0x298>)
 8006b2e:	f7fa fda4 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8006b32:	eef0 7a40 	vmov.f32	s15, s0
 8006b36:	4b08      	ldr	r3, [pc, #32]	@ (8006b58 <update_velocity_control+0x280>)
 8006b38:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8006b3c:	e034      	b.n	8006ba8 <update_velocity_control+0x2d0>
 8006b3e:	bf00      	nop
 8006b40:	200006fc 	.word	0x200006fc
 8006b44:	20000a5c 	.word	0x20000a5c
 8006b48:	20000080 	.word	0x20000080
 8006b4c:	447a0000 	.word	0x447a0000
 8006b50:	20000afc 	.word	0x20000afc
 8006b54:	200009d8 	.word	0x200009d8
 8006b58:	20000740 	.word	0x20000740
 8006b5c:	2000097c 	.word	0x2000097c
 8006b60:	20000b00 	.word	0x20000b00
 8006b64:	20000aac 	.word	0x20000aac
 8006b68:	20000000 	.word	0x20000000
 8006b6c:	20000b08 	.word	0x20000b08
 8006b70:	20000b0c 	.word	0x20000b0c
	} else {
		revolute_axis.ffd = 0.0f;
 8006b74:	4b54      	ldr	r3, [pc, #336]	@ (8006cc8 <update_velocity_control+0x3f0>)
 8006b76:	f04f 0200 	mov.w	r2, #0
 8006b7a:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b7c:	4b53      	ldr	r3, [pc, #332]	@ (8006ccc <update_velocity_control+0x3f4>)
 8006b7e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8006b82:	4b53      	ldr	r3, [pc, #332]	@ (8006cd0 <update_velocity_control+0x3f8>)
 8006b84:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8006b88:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8006cd4 <update_velocity_control+0x3fc>
 8006b8c:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8006b90:	eef0 0a66 	vmov.f32	s1, s13
 8006b94:	eeb0 0a47 	vmov.f32	s0, s14
 8006b98:	484f      	ldr	r0, [pc, #316]	@ (8006cd8 <update_velocity_control+0x400>)
 8006b9a:	f7fa fd6e 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8006b9e:	eef0 7a40 	vmov.f32	s15, s0
 8006ba2:	4b49      	ldr	r3, [pc, #292]	@ (8006cc8 <update_velocity_control+0x3f0>)
 8006ba4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8006ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8006cdc <update_velocity_control+0x404>)
 8006baa:	edd3 7a00 	vldr	s15, [r3]
 8006bae:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8006ce0 <update_velocity_control+0x408>
 8006bb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bb6:	4b44      	ldr	r3, [pc, #272]	@ (8006cc8 <update_velocity_control+0x3f0>)
 8006bb8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8006bbc:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8006ce4 <update_velocity_control+0x40c>
 8006bc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bc8:	4b44      	ldr	r3, [pc, #272]	@ (8006cdc <update_velocity_control+0x404>)
 8006bca:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8006bce:	4b46      	ldr	r3, [pc, #280]	@ (8006ce8 <update_velocity_control+0x410>)
 8006bd0:	edd3 7a00 	vldr	s15, [r3]
 8006bd4:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8006ce0 <update_velocity_control+0x408>
 8006bd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8006cc8 <update_velocity_control+0x3f0>)
 8006bde:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8006be2:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8006ce4 <update_velocity_control+0x40c>
 8006be6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006bea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bee:	4b3e      	ldr	r3, [pc, #248]	@ (8006ce8 <update_velocity_control+0x410>)
 8006bf0:	edc3 7a00 	vstr	s15, [r3]

	revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 8006bf4:	4b34      	ldr	r3, [pc, #208]	@ (8006cc8 <update_velocity_control+0x3f0>)
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7f9 fc71 	bl	80004e0 <__aeabi_f2d>
 8006bfe:	4680      	mov	r8, r0
 8006c00:	4689      	mov	r9, r1
 8006c02:	4b39      	ldr	r3, [pc, #228]	@ (8006ce8 <update_velocity_control+0x410>)
 8006c04:	ed93 7a00 	vldr	s14, [r3]
 8006c08:	4b34      	ldr	r3, [pc, #208]	@ (8006cdc <update_velocity_control+0x404>)
 8006c0a:	edd3 7a00 	vldr	s15, [r3]
 8006c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c12:	ee17 0a90 	vmov	r0, s15
 8006c16:	f7f9 fc63 	bl	80004e0 <__aeabi_f2d>
 8006c1a:	a329      	add	r3, pc, #164	@ (adr r3, 8006cc0 <update_velocity_control+0x3e8>)
 8006c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c20:	f7f9 fcb6 	bl	8000590 <__aeabi_dmul>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4640      	mov	r0, r8
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	f7f9 fafa 	bl	8000224 <__adddf3>
 8006c30:	4602      	mov	r2, r0
 8006c32:	460b      	mov	r3, r1
 8006c34:	4610      	mov	r0, r2
 8006c36:	4619      	mov	r1, r3
 8006c38:	f7f9 ff8c 	bl	8000b54 <__aeabi_d2f>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	4a22      	ldr	r2, [pc, #136]	@ (8006cc8 <update_velocity_control+0x3f0>)
 8006c40:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006c42:	4b21      	ldr	r3, [pc, #132]	@ (8006cc8 <update_velocity_control+0x3f0>)
 8006c44:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006c48:	4b28      	ldr	r3, [pc, #160]	@ (8006cec <update_velocity_control+0x414>)
 8006c4a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4619      	mov	r1, r3
 8006c52:	f7f9 ff37 	bl	8000ac4 <__aeabi_d2iz>
 8006c56:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8006c58:	4b24      	ldr	r3, [pc, #144]	@ (8006cec <update_velocity_control+0x414>)
 8006c5a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8006c5e:	4614      	mov	r4, r2
 8006c60:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	f7f9 ff2c 	bl	8000ac4 <__aeabi_d2iz>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	4619      	mov	r1, r3
 8006c70:	4630      	mov	r0, r6
 8006c72:	eeb0 0a48 	vmov.f32	s0, s16
 8006c76:	f7fa fa6d 	bl	8001154 <PWM_Satuation>
 8006c7a:	ee07 0a90 	vmov	s15, r0
 8006c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c82:	4b11      	ldr	r3, [pc, #68]	@ (8006cc8 <update_velocity_control+0x3f0>)
 8006c84:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006c88:	4b19      	ldr	r3, [pc, #100]	@ (8006cf0 <update_velocity_control+0x418>)
 8006c8a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006c8e:	eef0 0a67 	vmov.f32	s1, s15
 8006c92:	ed9f 0a18 	vldr	s0, [pc, #96]	@ 8006cf4 <update_velocity_control+0x41c>
 8006c96:	4818      	ldr	r0, [pc, #96]	@ (8006cf8 <update_velocity_control+0x420>)
 8006c98:	f7fa fb74 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc8 <update_velocity_control+0x3f0>)
 8006c9e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006ca2:	eef0 0a67 	vmov.f32	s1, s15
 8006ca6:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8006cf4 <update_velocity_control+0x41c>
 8006caa:	4814      	ldr	r0, [pc, #80]	@ (8006cfc <update_velocity_control+0x424>)
 8006cac:	f7fa fb6a 	bl	8001384 <MDXX_set_range>
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	ecbd 8b02 	vpop	{d8}
 8006cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbe:	bf00      	nop
 8006cc0:	47ae147b 	.word	0x47ae147b
 8006cc4:	3f847ae1 	.word	0x3f847ae1
 8006cc8:	20000740 	.word	0x20000740
 8006ccc:	200009d8 	.word	0x200009d8
 8006cd0:	2000097c 	.word	0x2000097c
 8006cd4:	447a0000 	.word	0x447a0000
 8006cd8:	20000b0c 	.word	0x20000b0c
 8006cdc:	200008c0 	.word	0x200008c0
 8006ce0:	3f4ccccd 	.word	0x3f4ccccd
 8006ce4:	3e4ccccd 	.word	0x3e4ccccd
 8006ce8:	200008c4 	.word	0x200008c4
 8006cec:	20000000 	.word	0x20000000
 8006cf0:	200006fc 	.word	0x200006fc
 8006cf4:	44fa0000 	.word	0x44fa0000
 8006cf8:	200008e4 	.word	0x200008e4
 8006cfc:	20000930 	.word	0x20000930

08006d00 <update_control_loops>:

void update_control_loops(void) {
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	ed2d 8b02 	vpush	{d8}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 8006d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ec0 <update_control_loops+0x1c0>)
 8006d0c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006d10:	eeb0 0a67 	vmov.f32	s0, s15
 8006d14:	f7ff fa28 	bl	8006168 <normalize_angle>
 8006d18:	eef0 7a40 	vmov.f32	s15, s0
 8006d1c:	4b69      	ldr	r3, [pc, #420]	@ (8006ec4 <update_control_loops+0x1c4>)
 8006d1e:	edc3 7a00 	vstr	s15, [r3]

	if (is_emergency_active()) {
 8006d22:	f000 fc5d 	bl	80075e0 <is_emergency_active>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d015      	beq.n	8006d58 <update_control_loops+0x58>
		emergency_stop_all_motors();
 8006d2c:	f000 fba8 	bl	8007480 <emergency_stop_all_motors>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006d30:	4b65      	ldr	r3, [pc, #404]	@ (8006ec8 <update_control_loops+0x1c8>)
 8006d32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d34:	4a65      	ldr	r2, [pc, #404]	@ (8006ecc <update_control_loops+0x1cc>)
 8006d36:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006d38:	4b62      	ldr	r3, [pc, #392]	@ (8006ec4 <update_control_loops+0x1c4>)
 8006d3a:	edd3 7a00 	vldr	s15, [r3]
 8006d3e:	220e      	movs	r2, #14
 8006d40:	210f      	movs	r1, #15
 8006d42:	eeb0 0a67 	vmov.f32	s0, s15
 8006d46:	4862      	ldr	r0, [pc, #392]	@ (8006ed0 <update_control_loops+0x1d0>)
 8006d48:	f7fd ff3e 	bl	8004bc8 <UnitConverter_angle>
 8006d4c:	eef0 7a40 	vmov.f32	s15, s0
 8006d50:	4b60      	ldr	r3, [pc, #384]	@ (8006ed4 <update_control_loops+0x1d4>)
 8006d52:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006d56:	e288      	b.n	800726a <update_control_loops+0x56a>
	}

	// Handle all homing states except HOMING_REV_TO_ZERO_DEG with direct motor control
	if (homing_active && homing_state != HOMING_REV_TO_ZERO_DEG) {
 8006d58:	4b5f      	ldr	r3, [pc, #380]	@ (8006ed8 <update_control_loops+0x1d8>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d02d      	beq.n	8006dbc <update_control_loops+0xbc>
 8006d60:	4b5e      	ldr	r3, [pc, #376]	@ (8006edc <update_control_loops+0x1dc>)
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	2b07      	cmp	r3, #7
 8006d66:	d029      	beq.n	8006dbc <update_control_loops+0xbc>
		update_homing_sequence();
 8006d68:	f7fe fe64 	bl	8005a34 <update_homing_sequence>
		MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8006d6c:	4b57      	ldr	r3, [pc, #348]	@ (8006ecc <update_control_loops+0x1cc>)
 8006d6e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006d72:	eef0 0a67 	vmov.f32	s1, s15
 8006d76:	ed9f 0a5a 	vldr	s0, [pc, #360]	@ 8006ee0 <update_control_loops+0x1e0>
 8006d7a:	485a      	ldr	r0, [pc, #360]	@ (8006ee4 <update_control_loops+0x1e4>)
 8006d7c:	f7fa fb02 	bl	8001384 <MDXX_set_range>
		MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8006d80:	4b54      	ldr	r3, [pc, #336]	@ (8006ed4 <update_control_loops+0x1d4>)
 8006d82:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8006d86:	eef0 0a67 	vmov.f32	s1, s15
 8006d8a:	ed9f 0a55 	vldr	s0, [pc, #340]	@ 8006ee0 <update_control_loops+0x1e0>
 8006d8e:	4856      	ldr	r0, [pc, #344]	@ (8006ee8 <update_control_loops+0x1e8>)
 8006d90:	f7fa faf8 	bl	8001384 <MDXX_set_range>
		prismatic_axis.mm = prismatic_encoder.mm;
 8006d94:	4b4c      	ldr	r3, [pc, #304]	@ (8006ec8 <update_control_loops+0x1c8>)
 8006d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d98:	4a4c      	ldr	r2, [pc, #304]	@ (8006ecc <update_control_loops+0x1cc>)
 8006d9a:	6393      	str	r3, [r2, #56]	@ 0x38
		revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006d9c:	4b49      	ldr	r3, [pc, #292]	@ (8006ec4 <update_control_loops+0x1c4>)
 8006d9e:	edd3 7a00 	vldr	s15, [r3]
 8006da2:	220e      	movs	r2, #14
 8006da4:	210f      	movs	r1, #15
 8006da6:	eeb0 0a67 	vmov.f32	s0, s15
 8006daa:	4849      	ldr	r0, [pc, #292]	@ (8006ed0 <update_control_loops+0x1d0>)
 8006dac:	f7fd ff0c 	bl	8004bc8 <UnitConverter_angle>
 8006db0:	eef0 7a40 	vmov.f32	s15, s0
 8006db4:	4b47      	ldr	r3, [pc, #284]	@ (8006ed4 <update_control_loops+0x1d4>)
 8006db6:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
				normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		return;
 8006dba:	e256      	b.n	800726a <update_control_loops+0x56a>
	}

	// Handle HOMING_REV_TO_ZERO_DEG: use trajectory system + check completion
	if (homing_active && homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006dbc:	4b46      	ldr	r3, [pc, #280]	@ (8006ed8 <update_control_loops+0x1d8>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01d      	beq.n	8006e00 <update_control_loops+0x100>
 8006dc4:	4b45      	ldr	r3, [pc, #276]	@ (8006edc <update_control_loops+0x1dc>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b07      	cmp	r3, #7
 8006dca:	d119      	bne.n	8006e00 <update_control_loops+0x100>
		// First, update the homing sequence to handle trajectory start/completion
		update_homing_sequence();
 8006dcc:	f7fe fe32 	bl	8005a34 <update_homing_sequence>

		// If still in HOMING_REV_TO_ZERO_DEG after update, continue with trajectory control
		if (homing_state == HOMING_REV_TO_ZERO_DEG) {
 8006dd0:	4b42      	ldr	r3, [pc, #264]	@ (8006edc <update_control_loops+0x1dc>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b07      	cmp	r3, #7
 8006dd6:	d013      	beq.n	8006e00 <update_control_loops+0x100>
			// Let the trajectory system handle the motion
			// Fall through to the switch statement below
		} else {
			// Homing sequence advanced to next state, return
			prismatic_axis.mm = prismatic_encoder.mm;
 8006dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ec8 <update_control_loops+0x1c8>)
 8006dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ddc:	4a3b      	ldr	r2, [pc, #236]	@ (8006ecc <update_control_loops+0x1cc>)
 8006dde:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 8006de0:	4b38      	ldr	r3, [pc, #224]	@ (8006ec4 <update_control_loops+0x1c4>)
 8006de2:	edd3 7a00 	vldr	s15, [r3]
 8006de6:	220e      	movs	r2, #14
 8006de8:	210f      	movs	r1, #15
 8006dea:	eeb0 0a67 	vmov.f32	s0, s15
 8006dee:	4838      	ldr	r0, [pc, #224]	@ (8006ed0 <update_control_loops+0x1d0>)
 8006df0:	f7fd feea 	bl	8004bc8 <UnitConverter_angle>
 8006df4:	eef0 7a40 	vmov.f32	s15, s0
 8006df8:	4b36      	ldr	r3, [pc, #216]	@ (8006ed4 <update_control_loops+0x1d4>)
 8006dfa:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
			return;
 8006dfe:	e234      	b.n	800726a <update_control_loops+0x56a>
		}
	}
	//100 point
	if (j1_active && motion_sequence_state == MOTION_IDLE) {
 8006e00:	4b3a      	ldr	r3, [pc, #232]	@ (8006eec <update_control_loops+0x1ec>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d02f      	beq.n	8006e68 <update_control_loops+0x168>
 8006e08:	4b39      	ldr	r3, [pc, #228]	@ (8006ef0 <update_control_loops+0x1f0>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d12b      	bne.n	8006e68 <update_control_loops+0x168>
		if (j1_going_to_target) {
 8006e10:	4b38      	ldr	r3, [pc, #224]	@ (8006ef4 <update_control_loops+0x1f4>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d009      	beq.n	8006e2c <update_control_loops+0x12c>

			// check if finish goto target then goto 0
			j1_going_to_target = false;
 8006e18:	4b36      	ldr	r3, [pc, #216]	@ (8006ef4 <update_control_loops+0x1f4>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
			start_combined_trajectory(0.0f, 0.0f);
 8006e1e:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8006ef8 <update_control_loops+0x1f8>
 8006e22:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 8006ef8 <update_control_loops+0x1f8>
 8006e26:	f7ff fa89 	bl	800633c <start_combined_trajectory>
 8006e2a:	e01d      	b.n	8006e68 <update_control_loops+0x168>
		} else {

			j1_cycle_count++;
 8006e2c:	4b33      	ldr	r3, [pc, #204]	@ (8006efc <update_control_loops+0x1fc>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	3301      	adds	r3, #1
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	4b31      	ldr	r3, [pc, #196]	@ (8006efc <update_control_loops+0x1fc>)
 8006e36:	701a      	strb	r2, [r3, #0]

			if (j1_cycle_count >= 100) {
 8006e38:	4b30      	ldr	r3, [pc, #192]	@ (8006efc <update_control_loops+0x1fc>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b63      	cmp	r3, #99	@ 0x63
 8006e3e:	d906      	bls.n	8006e4e <update_control_loops+0x14e>
				//finish 100
				j1_active = false;
 8006e40:	4b2a      	ldr	r3, [pc, #168]	@ (8006eec <update_control_loops+0x1ec>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 8006e46:	4b2d      	ldr	r3, [pc, #180]	@ (8006efc <update_control_loops+0x1fc>)
 8006e48:	2200      	movs	r2, #0
 8006e4a:	701a      	strb	r2, [r3, #0]
 8006e4c:	e00c      	b.n	8006e68 <update_control_loops+0x168>
			} else {
				// start again
				j1_going_to_target = true;
 8006e4e:	4b29      	ldr	r3, [pc, #164]	@ (8006ef4 <update_control_loops+0x1f4>)
 8006e50:	2201      	movs	r2, #1
 8006e52:	701a      	strb	r2, [r3, #0]
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8006e54:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8006f00 <update_control_loops+0x200>
 8006e58:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8006f04 <update_control_loops+0x204>
 8006e5c:	eef0 0a47 	vmov.f32	s1, s14
 8006e60:	eeb0 0a67 	vmov.f32	s0, s15
 8006e64:	f7ff fa6a 	bl	800633c <start_combined_trajectory>
			}
		}
	}

	// Motion sequence handling
	switch (motion_sequence_state) {
 8006e68:	4b21      	ldr	r3, [pc, #132]	@ (8006ef0 <update_control_loops+0x1f0>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	2b05      	cmp	r3, #5
 8006e70:	f200 81e1 	bhi.w	8007236 <update_control_loops+0x536>
 8006e74:	a201      	add	r2, pc, #4	@ (adr r2, 8006e7c <update_control_loops+0x17c>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006e95 	.word	0x08006e95
 8006e80:	08007237 	.word	0x08007237
 8006e84:	08007237 	.word	0x08007237
 8006e88:	08006f0d 	.word	0x08006f0d
 8006e8c:	08007211 	.word	0x08007211
 8006e90:	0800722f 	.word	0x0800722f
	case MOTION_PEN_UP_DELAY:
		if (++motion_delay_timer >= 1500) {
 8006e94:	4b1c      	ldr	r3, [pc, #112]	@ (8006f08 <update_control_loops+0x208>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006f08 <update_control_loops+0x208>)
 8006e9c:	6013      	str	r3, [r2, #0]
 8006e9e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	f240 81c9 	bls.w	800723a <update_control_loops+0x53a>
			// ใช้ sync motion สำหรับทุกกรณี รวมถึง homing
			prismatic_axis.trajectory_active = true;
 8006ea8:	4b08      	ldr	r3, [pc, #32]	@ (8006ecc <update_control_loops+0x1cc>)
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			revolute_axis.trajectory_active = true;
 8006eb0:	4b08      	ldr	r3, [pc, #32]	@ (8006ed4 <update_control_loops+0x1d4>)
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			motion_sequence_state = MOTION_BOTH_AXES_ACTIVE;
 8006eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef0 <update_control_loops+0x1f0>)
 8006eba:	2204      	movs	r2, #4
 8006ebc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8006ebe:	e1bc      	b.n	800723a <update_control_loops+0x53a>
 8006ec0:	200009d8 	.word	0x200009d8
 8006ec4:	200007f4 	.word	0x200007f4
 8006ec8:	2000097c 	.word	0x2000097c
 8006ecc:	200006fc 	.word	0x200006fc
 8006ed0:	20000d70 	.word	0x20000d70
 8006ed4:	20000740 	.word	0x20000740
 8006ed8:	200007e3 	.word	0x200007e3
 8006edc:	200007e2 	.word	0x200007e2
 8006ee0:	44fa0000 	.word	0x44fa0000
 8006ee4:	200008e4 	.word	0x200008e4
 8006ee8:	20000930 	.word	0x20000930
 8006eec:	2000088d 	.word	0x2000088d
 8006ef0:	20000784 	.word	0x20000784
 8006ef4:	20000335 	.word	0x20000335
 8006ef8:	00000000 	.word	0x00000000
 8006efc:	2000088c 	.word	0x2000088c
 8006f00:	43480000 	.word	0x43480000
 8006f04:	42b40000 	.word	0x42b40000
 8006f08:	200007d8 	.word	0x200007d8

	case MOTION_BOTH_AXES_ACTIVE: {
		bool motion_finished = false;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]

		if (sync_motion_active) {
 8006f10:	4bad      	ldr	r3, [pc, #692]	@ (80071c8 <update_control_loops+0x4c8>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 80a9 	beq.w	800706c <update_control_loops+0x36c>
			// Time-synchronized motion
			sync_start_time += 0.001f; // Assuming 1ms control loop
 8006f1a:	4bac      	ldr	r3, [pc, #688]	@ (80071cc <update_control_loops+0x4cc>)
 8006f1c:	edd3 7a00 	vldr	s15, [r3]
 8006f20:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80071d0 <update_control_loops+0x4d0>
 8006f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f28:	4ba8      	ldr	r3, [pc, #672]	@ (80071cc <update_control_loops+0x4cc>)
 8006f2a:	edc3 7a00 	vstr	s15, [r3]

			float progress = sync_start_time / sync_total_time;
 8006f2e:	4ba7      	ldr	r3, [pc, #668]	@ (80071cc <update_control_loops+0x4cc>)
 8006f30:	edd3 6a00 	vldr	s13, [r3]
 8006f34:	4ba7      	ldr	r3, [pc, #668]	@ (80071d4 <update_control_loops+0x4d4>)
 8006f36:	ed93 7a00 	vldr	s14, [r3]
 8006f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f3e:	edc7 7a02 	vstr	s15, [r7, #8]
			if (progress >= 1.0f) {
 8006f42:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f52:	db04      	blt.n	8006f5e <update_control_loops+0x25e>
				progress = 1.0f;
 8006f54:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8006f58:	60bb      	str	r3, [r7, #8]
				motion_finished = true;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	73fb      	strb	r3, [r7, #15]
			}

			// Apply smooth S-curve to progress for better motion profile
			float smooth_progress = progress * progress
 8006f5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f62:	ee27 7aa7 	vmul.f32	s14, s15, s15
					* (3.0f - 2.0f * progress); // Smoothstep function
 8006f66:	edd7 7a02 	vldr	s15, [r7, #8]
 8006f6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006f6e:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8006f72:	ee76 7ae7 	vsub.f32	s15, s13, s15
			float smooth_progress = progress * progress
 8006f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7a:	edc7 7a00 	vstr	s15, [r7]

			// Calculate synchronized positions
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 8006f7e:	4b96      	ldr	r3, [pc, #600]	@ (80071d8 <update_control_loops+0x4d8>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	f083 0301 	eor.w	r3, r3, #1
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d103      	bne.n	8006f94 <update_control_loops+0x294>
 8006f8c:	4b93      	ldr	r3, [pc, #588]	@ (80071dc <update_control_loops+0x4dc>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b07      	cmp	r3, #7
 8006f92:	d026      	beq.n	8006fe2 <update_control_loops+0x2e2>
				// Prismatic axis synchronized position
				prismatic_axis.position = prismatic_axis.initial_pos
 8006f94:	4b92      	ldr	r3, [pc, #584]	@ (80071e0 <update_control_loops+0x4e0>)
 8006f96:	ed93 7a03 	vldr	s14, [r3, #12]
						+ (prismatic_axis.target_pos
 8006f9a:	4b91      	ldr	r3, [pc, #580]	@ (80071e0 <update_control_loops+0x4e0>)
 8006f9c:	edd3 6a04 	vldr	s13, [r3, #16]
								- prismatic_axis.initial_pos) * smooth_progress;
 8006fa0:	4b8f      	ldr	r3, [pc, #572]	@ (80071e0 <update_control_loops+0x4e0>)
 8006fa2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006fa6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006faa:	edd7 7a00 	vldr	s15, [r7]
 8006fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
						+ (prismatic_axis.target_pos
 8006fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
				prismatic_axis.position = prismatic_axis.initial_pos
 8006fb6:	4b8a      	ldr	r3, [pc, #552]	@ (80071e0 <update_control_loops+0x4e0>)
 8006fb8:	edc3 7a00 	vstr	s15, [r3]

				// Calculate velocity (derivative of position)
				static float last_pris_pos = 0.0f;
				prismatic_axis.velocity = (prismatic_axis.position
 8006fbc:	4b88      	ldr	r3, [pc, #544]	@ (80071e0 <update_control_loops+0x4e0>)
 8006fbe:	ed93 7a00 	vldr	s14, [r3]
						- last_pris_pos) / 0.001f; // mm/s
 8006fc2:	4b88      	ldr	r3, [pc, #544]	@ (80071e4 <update_control_loops+0x4e4>)
 8006fc4:	edd3 7a00 	vldr	s15, [r3]
 8006fc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006fcc:	eddf 6a80 	vldr	s13, [pc, #512]	@ 80071d0 <update_control_loops+0x4d0>
 8006fd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
				prismatic_axis.velocity = (prismatic_axis.position
 8006fd4:	4b82      	ldr	r3, [pc, #520]	@ (80071e0 <update_control_loops+0x4e0>)
 8006fd6:	edc3 7a01 	vstr	s15, [r3, #4]
				last_pris_pos = prismatic_axis.position;
 8006fda:	4b81      	ldr	r3, [pc, #516]	@ (80071e0 <update_control_loops+0x4e0>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a81      	ldr	r2, [pc, #516]	@ (80071e4 <update_control_loops+0x4e4>)
 8006fe0:	6013      	str	r3, [r2, #0]
			}

			// Revolute axis synchronized position
			revolute_axis.position = revolute_axis.initial_pos
 8006fe2:	4b81      	ldr	r3, [pc, #516]	@ (80071e8 <update_control_loops+0x4e8>)
 8006fe4:	ed93 7a03 	vldr	s14, [r3, #12]
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 8006fe8:	4b7f      	ldr	r3, [pc, #508]	@ (80071e8 <update_control_loops+0x4e8>)
 8006fea:	edd3 6a04 	vldr	s13, [r3, #16]
 8006fee:	4b7e      	ldr	r3, [pc, #504]	@ (80071e8 <update_control_loops+0x4e8>)
 8006ff0:	edd3 7a03 	vldr	s15, [r3, #12]
 8006ff4:	ee76 6ae7 	vsub.f32	s13, s13, s15
							* smooth_progress;
 8006ff8:	edd7 7a00 	vldr	s15, [r7]
 8006ffc:	ee66 7aa7 	vmul.f32	s15, s13, s15
					+ (revolute_axis.target_pos - revolute_axis.initial_pos)
 8007000:	ee77 7a27 	vadd.f32	s15, s14, s15
			revolute_axis.position = revolute_axis.initial_pos
 8007004:	4b78      	ldr	r3, [pc, #480]	@ (80071e8 <update_control_loops+0x4e8>)
 8007006:	edc3 7a00 	vstr	s15, [r3]

			// Calculate velocity (derivative of position)
			static float last_rev_pos = 0.0f;
			revolute_axis.velocity = (revolute_axis.position - last_rev_pos)
 800700a:	4b77      	ldr	r3, [pc, #476]	@ (80071e8 <update_control_loops+0x4e8>)
 800700c:	ed93 7a00 	vldr	s14, [r3]
 8007010:	4b76      	ldr	r3, [pc, #472]	@ (80071ec <update_control_loops+0x4ec>)
 8007012:	edd3 7a00 	vldr	s15, [r3]
 8007016:	ee37 7a67 	vsub.f32	s14, s14, s15
					/ 0.001f; // rad/s
 800701a:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 80071d0 <update_control_loops+0x4d0>
 800701e:	eec7 7a26 	vdiv.f32	s15, s14, s13
			revolute_axis.velocity = (revolute_axis.position - last_rev_pos)
 8007022:	4b71      	ldr	r3, [pc, #452]	@ (80071e8 <update_control_loops+0x4e8>)
 8007024:	edc3 7a01 	vstr	s15, [r3, #4]
			last_rev_pos = revolute_axis.position;
 8007028:	4b6f      	ldr	r3, [pc, #444]	@ (80071e8 <update_control_loops+0x4e8>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a6f      	ldr	r2, [pc, #444]	@ (80071ec <update_control_loops+0x4ec>)
 800702e:	6013      	str	r3, [r2, #0]

			if (motion_finished) {
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8103 	beq.w	800723e <update_control_loops+0x53e>
				// Motion completed
				prismatic_axis.position = prismatic_axis.target_pos;
 8007038:	4b69      	ldr	r3, [pc, #420]	@ (80071e0 <update_control_loops+0x4e0>)
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	4a68      	ldr	r2, [pc, #416]	@ (80071e0 <update_control_loops+0x4e0>)
 800703e:	6013      	str	r3, [r2, #0]
				revolute_axis.position = revolute_axis.target_pos;
 8007040:	4b69      	ldr	r3, [pc, #420]	@ (80071e8 <update_control_loops+0x4e8>)
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	4a68      	ldr	r2, [pc, #416]	@ (80071e8 <update_control_loops+0x4e8>)
 8007046:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = 0.0f;
 8007048:	4b65      	ldr	r3, [pc, #404]	@ (80071e0 <update_control_loops+0x4e0>)
 800704a:	f04f 0200 	mov.w	r2, #0
 800704e:	605a      	str	r2, [r3, #4]
				revolute_axis.velocity = 0.0f;
 8007050:	4b65      	ldr	r3, [pc, #404]	@ (80071e8 <update_control_loops+0x4e8>)
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	605a      	str	r2, [r3, #4]

				sync_motion_active = false;
 8007058:	4b5b      	ldr	r3, [pc, #364]	@ (80071c8 <update_control_loops+0x4c8>)
 800705a:	2200      	movs	r2, #0
 800705c:	701a      	strb	r2, [r3, #0]
				motion_delay_timer = 0;
 800705e:	4b64      	ldr	r3, [pc, #400]	@ (80071f0 <update_control_loops+0x4f0>)
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 8007064:	4b63      	ldr	r3, [pc, #396]	@ (80071f4 <update_control_loops+0x4f4>)
 8007066:	2205      	movs	r2, #5
 8007068:	701a      	strb	r2, [r3, #0]
				motion_delay_timer = 0;
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
			}
		}
	}
		break;
 800706a:	e0e8      	b.n	800723e <update_control_loops+0x53e>
			bool pris_finished = true;  // Default to true for homing case
 800706c:	2301      	movs	r3, #1
 800706e:	71fb      	strb	r3, [r7, #7]
			bool rev_finished = false;
 8007070:	2300      	movs	r3, #0
 8007072:	71bb      	strb	r3, [r7, #6]
			if (!(homing_active && homing_state == HOMING_REV_TO_ZERO_DEG)) {
 8007074:	4b58      	ldr	r3, [pc, #352]	@ (80071d8 <update_control_loops+0x4d8>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	f083 0301 	eor.w	r3, r3, #1
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d103      	bne.n	800708a <update_control_loops+0x38a>
 8007082:	4b56      	ldr	r3, [pc, #344]	@ (80071dc <update_control_loops+0x4dc>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	2b07      	cmp	r3, #7
 8007088:	d048      	beq.n	800711c <update_control_loops+0x41c>
				if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 800708a:	4b55      	ldr	r3, [pc, #340]	@ (80071e0 <update_control_loops+0x4e0>)
 800708c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007090:	2b00      	cmp	r3, #0
 8007092:	d043      	beq.n	800711c <update_control_loops+0x41c>
 8007094:	4b58      	ldr	r3, [pc, #352]	@ (80071f8 <update_control_loops+0x4f8>)
 8007096:	7c1b      	ldrb	r3, [r3, #16]
 8007098:	f083 0301 	eor.w	r3, r3, #1
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d03c      	beq.n	800711c <update_control_loops+0x41c>
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 80070a2:	4b4f      	ldr	r3, [pc, #316]	@ (80071e0 <update_control_loops+0x4e0>)
 80070a4:	ed93 8a03 	vldr	s16, [r3, #12]
 80070a8:	4b4d      	ldr	r3, [pc, #308]	@ (80071e0 <update_control_loops+0x4e0>)
 80070aa:	edd3 8a04 	vldr	s17, [r3, #16]
							ZGX45RGG_400RPM_Constant.traject_sd_max,
 80070ae:	4b53      	ldr	r3, [pc, #332]	@ (80071fc <update_control_loops+0x4fc>)
 80070b0:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 80070b4:	4610      	mov	r0, r2
 80070b6:	4619      	mov	r1, r3
 80070b8:	f7f9 fd4c 	bl	8000b54 <__aeabi_d2f>
 80070bc:	4604      	mov	r4, r0
							ZGX45RGG_400RPM_Constant.traject_sdd_max);
 80070be:	4b4f      	ldr	r3, [pc, #316]	@ (80071fc <update_control_loops+0x4fc>)
 80070c0:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
					Trapezoidal_Evaluated(&prisGen, &prisEva,
 80070c4:	4610      	mov	r0, r2
 80070c6:	4619      	mov	r1, r3
 80070c8:	f7f9 fd44 	bl	8000b54 <__aeabi_d2f>
 80070cc:	4603      	mov	r3, r0
 80070ce:	ee01 3a90 	vmov	s3, r3
 80070d2:	ee01 4a10 	vmov	s2, r4
 80070d6:	eef0 0a68 	vmov.f32	s1, s17
 80070da:	eeb0 0a48 	vmov.f32	s0, s16
 80070de:	4946      	ldr	r1, [pc, #280]	@ (80071f8 <update_control_loops+0x4f8>)
 80070e0:	4847      	ldr	r0, [pc, #284]	@ (8007200 <update_control_loops+0x500>)
 80070e2:	f7fd f9d9 	bl	8004498 <Trapezoidal_Evaluated>
					prismatic_axis.position = prisEva.setposition;
 80070e6:	4b44      	ldr	r3, [pc, #272]	@ (80071f8 <update_control_loops+0x4f8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a3d      	ldr	r2, [pc, #244]	@ (80071e0 <update_control_loops+0x4e0>)
 80070ec:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = prisEva.setvelocity;
 80070ee:	4b42      	ldr	r3, [pc, #264]	@ (80071f8 <update_control_loops+0x4f8>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	4a3b      	ldr	r2, [pc, #236]	@ (80071e0 <update_control_loops+0x4e0>)
 80070f4:	6053      	str	r3, [r2, #4]
					pris_finished = prisEva.isFinised;
 80070f6:	4b40      	ldr	r3, [pc, #256]	@ (80071f8 <update_control_loops+0x4f8>)
 80070f8:	7c1b      	ldrb	r3, [r3, #16]
 80070fa:	71fb      	strb	r3, [r7, #7]
					if (prisEva.isFinised) {
 80070fc:	4b3e      	ldr	r3, [pc, #248]	@ (80071f8 <update_control_loops+0x4f8>)
 80070fe:	7c1b      	ldrb	r3, [r3, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <update_control_loops+0x41c>
						prismatic_axis.trajectory_active = false;
 8007104:	4b36      	ldr	r3, [pc, #216]	@ (80071e0 <update_control_loops+0x4e0>)
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
						prismatic_axis.position = prisEva.setposition;
 800710c:	4b3a      	ldr	r3, [pc, #232]	@ (80071f8 <update_control_loops+0x4f8>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a33      	ldr	r2, [pc, #204]	@ (80071e0 <update_control_loops+0x4e0>)
 8007112:	6013      	str	r3, [r2, #0]
						prismatic_axis.velocity = 0.0f;
 8007114:	4b32      	ldr	r3, [pc, #200]	@ (80071e0 <update_control_loops+0x4e0>)
 8007116:	f04f 0200 	mov.w	r2, #0
 800711a:	605a      	str	r2, [r3, #4]
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 800711c:	4b32      	ldr	r3, [pc, #200]	@ (80071e8 <update_control_loops+0x4e8>)
 800711e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007122:	2b00      	cmp	r3, #0
 8007124:	d043      	beq.n	80071ae <update_control_loops+0x4ae>
 8007126:	4b37      	ldr	r3, [pc, #220]	@ (8007204 <update_control_loops+0x504>)
 8007128:	7c1b      	ldrb	r3, [r3, #16]
 800712a:	f083 0301 	eor.w	r3, r3, #1
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d03c      	beq.n	80071ae <update_control_loops+0x4ae>
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007134:	4b2c      	ldr	r3, [pc, #176]	@ (80071e8 <update_control_loops+0x4e8>)
 8007136:	ed93 8a03 	vldr	s16, [r3, #12]
 800713a:	4b2b      	ldr	r3, [pc, #172]	@ (80071e8 <update_control_loops+0x4e8>)
 800713c:	edd3 8a04 	vldr	s17, [r3, #16]
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 8007140:	4b31      	ldr	r3, [pc, #196]	@ (8007208 <update_control_loops+0x508>)
 8007142:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007146:	4610      	mov	r0, r2
 8007148:	4619      	mov	r1, r3
 800714a:	f7f9 fd03 	bl	8000b54 <__aeabi_d2f>
 800714e:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 8007150:	4b2d      	ldr	r3, [pc, #180]	@ (8007208 <update_control_loops+0x508>)
 8007152:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 8007156:	4610      	mov	r0, r2
 8007158:	4619      	mov	r1, r3
 800715a:	f7f9 fcfb 	bl	8000b54 <__aeabi_d2f>
 800715e:	4603      	mov	r3, r0
 8007160:	ee01 3a90 	vmov	s3, r3
 8007164:	ee01 4a10 	vmov	s2, r4
 8007168:	eef0 0a68 	vmov.f32	s1, s17
 800716c:	eeb0 0a48 	vmov.f32	s0, s16
 8007170:	4924      	ldr	r1, [pc, #144]	@ (8007204 <update_control_loops+0x504>)
 8007172:	4826      	ldr	r0, [pc, #152]	@ (800720c <update_control_loops+0x50c>)
 8007174:	f7fd f990 	bl	8004498 <Trapezoidal_Evaluated>
				revolute_axis.position = revEva.setposition;
 8007178:	4b22      	ldr	r3, [pc, #136]	@ (8007204 <update_control_loops+0x504>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a1a      	ldr	r2, [pc, #104]	@ (80071e8 <update_control_loops+0x4e8>)
 800717e:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 8007180:	4b20      	ldr	r3, [pc, #128]	@ (8007204 <update_control_loops+0x504>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	4a18      	ldr	r2, [pc, #96]	@ (80071e8 <update_control_loops+0x4e8>)
 8007186:	6053      	str	r3, [r2, #4]
				rev_finished = revEva.isFinised;
 8007188:	4b1e      	ldr	r3, [pc, #120]	@ (8007204 <update_control_loops+0x504>)
 800718a:	7c1b      	ldrb	r3, [r3, #16]
 800718c:	71bb      	strb	r3, [r7, #6]
				if (revEva.isFinised) {
 800718e:	4b1d      	ldr	r3, [pc, #116]	@ (8007204 <update_control_loops+0x504>)
 8007190:	7c1b      	ldrb	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00b      	beq.n	80071ae <update_control_loops+0x4ae>
					revolute_axis.trajectory_active = false;
 8007196:	4b14      	ldr	r3, [pc, #80]	@ (80071e8 <update_control_loops+0x4e8>)
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 800719e:	4b19      	ldr	r3, [pc, #100]	@ (8007204 <update_control_loops+0x504>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a11      	ldr	r2, [pc, #68]	@ (80071e8 <update_control_loops+0x4e8>)
 80071a4:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 80071a6:	4b10      	ldr	r3, [pc, #64]	@ (80071e8 <update_control_loops+0x4e8>)
 80071a8:	f04f 0200 	mov.w	r2, #0
 80071ac:	605a      	str	r2, [r3, #4]
			if (pris_finished && rev_finished) {
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d044      	beq.n	800723e <update_control_loops+0x53e>
 80071b4:	79bb      	ldrb	r3, [r7, #6]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d041      	beq.n	800723e <update_control_loops+0x53e>
				motion_delay_timer = 0;
 80071ba:	4b0d      	ldr	r3, [pc, #52]	@ (80071f0 <update_control_loops+0x4f0>)
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
				motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 80071c0:	4b0c      	ldr	r3, [pc, #48]	@ (80071f4 <update_control_loops+0x4f4>)
 80071c2:	2205      	movs	r2, #5
 80071c4:	701a      	strb	r2, [r3, #0]
		break;
 80071c6:	e03a      	b.n	800723e <update_control_loops+0x53e>
 80071c8:	200008a4 	.word	0x200008a4
 80071cc:	2000089c 	.word	0x2000089c
 80071d0:	3a83126f 	.word	0x3a83126f
 80071d4:	200008a0 	.word	0x200008a0
 80071d8:	200007e3 	.word	0x200007e3
 80071dc:	200007e2 	.word	0x200007e2
 80071e0:	200006fc 	.word	0x200006fc
 80071e4:	200008c8 	.word	0x200008c8
 80071e8:	20000740 	.word	0x20000740
 80071ec:	200008cc 	.word	0x200008cc
 80071f0:	200007d8 	.word	0x200007d8
 80071f4:	20000784 	.word	0x20000784
 80071f8:	200007b0 	.word	0x200007b0
 80071fc:	20000080 	.word	0x20000080
 8007200:	20000788 	.word	0x20000788
 8007204:	200007c4 	.word	0x200007c4
 8007208:	20000000 	.word	0x20000000
 800720c:	2000079c 	.word	0x2000079c

	case MOTION_PEN_DOWN_DELAY:
		if (++motion_delay_timer >= 1500) {
 8007210:	4b18      	ldr	r3, [pc, #96]	@ (8007274 <update_control_loops+0x574>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3301      	adds	r3, #1
 8007216:	4a17      	ldr	r2, [pc, #92]	@ (8007274 <update_control_loops+0x574>)
 8007218:	6013      	str	r3, [r2, #0]
 800721a:	f240 52db 	movw	r2, #1499	@ 0x5db
 800721e:	4293      	cmp	r3, r2
 8007220:	d90f      	bls.n	8007242 <update_control_loops+0x542>
			plotter_pen_down();
 8007222:	f002 fbbd 	bl	80099a0 <plotter_pen_down>
			motion_sequence_state = MOTION_COMPLETE;
 8007226:	4b14      	ldr	r3, [pc, #80]	@ (8007278 <update_control_loops+0x578>)
 8007228:	2206      	movs	r2, #6
 800722a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800722c:	e009      	b.n	8007242 <update_control_loops+0x542>

	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
 800722e:	4b12      	ldr	r3, [pc, #72]	@ (8007278 <update_control_loops+0x578>)
 8007230:	2200      	movs	r2, #0
 8007232:	701a      	strb	r2, [r3, #0]
		break;
 8007234:	e006      	b.n	8007244 <update_control_loops+0x544>

	default:
		break;
 8007236:	bf00      	nop
 8007238:	e004      	b.n	8007244 <update_control_loops+0x544>
		break;
 800723a:	bf00      	nop
 800723c:	e002      	b.n	8007244 <update_control_loops+0x544>
		break;
 800723e:	bf00      	nop
 8007240:	e000      	b.n	8007244 <update_control_loops+0x544>
		break;
 8007242:	bf00      	nop
	}

	prismatic_axis.mm = prismatic_encoder.mm;
 8007244:	4b0d      	ldr	r3, [pc, #52]	@ (800727c <update_control_loops+0x57c>)
 8007246:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007248:	4a0d      	ldr	r2, [pc, #52]	@ (8007280 <update_control_loops+0x580>)
 800724a:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 800724c:	4b0d      	ldr	r3, [pc, #52]	@ (8007284 <update_control_loops+0x584>)
 800724e:	edd3 7a00 	vldr	s15, [r3]
 8007252:	220e      	movs	r2, #14
 8007254:	210f      	movs	r1, #15
 8007256:	eeb0 0a67 	vmov.f32	s0, s15
 800725a:	480b      	ldr	r0, [pc, #44]	@ (8007288 <update_control_loops+0x588>)
 800725c:	f7fd fcb4 	bl	8004bc8 <UnitConverter_angle>
 8007260:	eef0 7a40 	vmov.f32	s15, s0
 8007264:	4b09      	ldr	r3, [pc, #36]	@ (800728c <update_control_loops+0x58c>)
 8007266:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 800726a:	3714      	adds	r7, #20
 800726c:	46bd      	mov	sp, r7
 800726e:	ecbd 8b02 	vpop	{d8}
 8007272:	bd90      	pop	{r4, r7, pc}
 8007274:	200007d8 	.word	0x200007d8
 8007278:	20000784 	.word	0x20000784
 800727c:	2000097c 	.word	0x2000097c
 8007280:	200006fc 	.word	0x200006fc
 8007284:	200007f4 	.word	0x200007f4
 8007288:	20000d70 	.word	0x20000d70
 800728c:	20000740 	.word	0x20000740

08007290 <check_emergency_button>:

void check_emergency_button(void) {
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
	// Read current state of emergency button
	bool emer_pressed = HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin);
 8007296:	2110      	movs	r1, #16
 8007298:	480c      	ldr	r0, [pc, #48]	@ (80072cc <check_emergency_button+0x3c>)
 800729a:	f005 feb1 	bl	800d000 <HAL_GPIO_ReadPin>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bf14      	ite	ne
 80072a4:	2301      	movne	r3, #1
 80072a6:	2300      	moveq	r3, #0
 80072a8:	71fb      	strb	r3, [r7, #7]
	// If emergency button is pressed (assuming active high)
	// Adjust the logic based on your hardware:
	// - If button is active HIGH when pressed: use == GPIO_PIN_SET
	// - If button is active LOW when pressed: use == GPIO_PIN_RESET

	if (emer_pressed == GPIO_PIN_RESET) {  // Assuming active high
 80072aa:	79fb      	ldrb	r3, [r7, #7]
 80072ac:	f083 0301 	eor.w	r3, r3, #1
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <check_emergency_button+0x32>
		// Emergency button is pressed - trigger hardware emergency
		if (safety_state != SAFETY_HARDWARE_EMERGENCY) {
 80072b6:	4b06      	ldr	r3, [pc, #24]	@ (80072d0 <check_emergency_button+0x40>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	d001      	beq.n	80072c2 <check_emergency_button+0x32>
			trigger_hardware_emergency();
 80072be:	f000 f877 	bl	80073b0 <trigger_hardware_emergency>
	 // Auto-clear emergency when button released (NOT RECOMMENDED)
	 // clear_emergency_state();
	 }
	 }
	 */
}
 80072c2:	bf00      	nop
 80072c4:	3708      	adds	r7, #8
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
 80072ca:	bf00      	nop
 80072cc:	48000400 	.word	0x48000400
 80072d0:	200007e4 	.word	0x200007e4

080072d4 <check_safety_conditions>:

void check_safety_conditions(void) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	af00      	add	r7, sp, #0
	if (tuning_mode || safety_state != SAFETY_NORMAL || homing_active)
 80072d8:	4b16      	ldr	r3, [pc, #88]	@ (8007334 <check_safety_conditions+0x60>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d127      	bne.n	8007330 <check_safety_conditions+0x5c>
 80072e0:	4b15      	ldr	r3, [pc, #84]	@ (8007338 <check_safety_conditions+0x64>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d123      	bne.n	8007330 <check_safety_conditions+0x5c>
 80072e8:	4b14      	ldr	r3, [pc, #80]	@ (800733c <check_safety_conditions+0x68>)
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d11f      	bne.n	8007330 <check_safety_conditions+0x5c>
		return;

	if (up_photo && prismatic_axis.command_pos < 0.0f) {
 80072f0:	4b13      	ldr	r3, [pc, #76]	@ (8007340 <check_safety_conditions+0x6c>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00a      	beq.n	8007310 <check_safety_conditions+0x3c>
 80072fa:	4b12      	ldr	r3, [pc, #72]	@ (8007344 <check_safety_conditions+0x70>)
 80072fc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007300:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007308:	d502      	bpl.n	8007310 <check_safety_conditions+0x3c>
		trigger_software_emergency();
 800730a:	f000 f81f 	bl	800734c <trigger_software_emergency>
		return;
 800730e:	e010      	b.n	8007332 <check_safety_conditions+0x5e>
	}

	if (low_photo && prismatic_axis.command_pos > 0.0f) {
 8007310:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <check_safety_conditions+0x74>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00b      	beq.n	8007332 <check_safety_conditions+0x5e>
 800731a:	4b0a      	ldr	r3, [pc, #40]	@ (8007344 <check_safety_conditions+0x70>)
 800731c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007320:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007328:	dd03      	ble.n	8007332 <check_safety_conditions+0x5e>
		trigger_software_emergency();
 800732a:	f000 f80f 	bl	800734c <trigger_software_emergency>
		return;
 800732e:	e000      	b.n	8007332 <check_safety_conditions+0x5e>
		return;
 8007330:	bf00      	nop
	}
}
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20000334 	.word	0x20000334
 8007338:	200007e4 	.word	0x200007e4
 800733c:	200007e3 	.word	0x200007e3
 8007340:	200007e0 	.word	0x200007e0
 8007344:	200006fc 	.word	0x200006fc
 8007348:	200007e1 	.word	0x200007e1

0800734c <trigger_software_emergency>:

void trigger_software_emergency(void) {
 800734c:	b580      	push	{r7, lr}
 800734e:	af00      	add	r7, sp, #0
	if (safety_state == SAFETY_NORMAL) {
 8007350:	4b10      	ldr	r3, [pc, #64]	@ (8007394 <trigger_software_emergency+0x48>)
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d11b      	bne.n	8007390 <trigger_software_emergency+0x44>
		safety_state = SAFETY_SOFTWARE_EMERGENCY;
 8007358:	4b0e      	ldr	r3, [pc, #56]	@ (8007394 <trigger_software_emergency+0x48>)
 800735a:	2201      	movs	r2, #1
 800735c:	701a      	strb	r2, [r3, #0]
		emergency_stop_all_motors();
 800735e:	f000 f88f 	bl	8007480 <emergency_stop_all_motors>
		safety_toggle_timer = 0;
 8007362:	4b0d      	ldr	r3, [pc, #52]	@ (8007398 <trigger_software_emergency+0x4c>)
 8007364:	2200      	movs	r2, #0
 8007366:	601a      	str	r2, [r3, #0]
		pilot_light_state = false;
 8007368:	4b0c      	ldr	r3, [pc, #48]	@ (800739c <trigger_software_emergency+0x50>)
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
		motion_sequence_state = MOTION_IDLE;
 800736e:	4b0c      	ldr	r3, [pc, #48]	@ (80073a0 <trigger_software_emergency+0x54>)
 8007370:	2200      	movs	r2, #0
 8007372:	701a      	strb	r2, [r3, #0]
		prismatic_axis.trajectory_active = false;
 8007374:	4b0b      	ldr	r3, [pc, #44]	@ (80073a4 <trigger_software_emergency+0x58>)
 8007376:	2200      	movs	r2, #0
 8007378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		revolute_axis.trajectory_active = false;
 800737c:	4b0a      	ldr	r3, [pc, #40]	@ (80073a8 <trigger_software_emergency+0x5c>)
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

		// Exit joy mode if active
		if (joy_mode_active) {
 8007384:	4b09      	ldr	r3, [pc, #36]	@ (80073ac <trigger_software_emergency+0x60>)
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d001      	beq.n	8007390 <trigger_software_emergency+0x44>
			exit_joy_mode();
 800738c:	f000 f996 	bl	80076bc <exit_joy_mode>
		}
	}
}
 8007390:	bf00      	nop
 8007392:	bd80      	pop	{r7, pc}
 8007394:	200007e4 	.word	0x200007e4
 8007398:	200007e8 	.word	0x200007e8
 800739c:	200007ec 	.word	0x200007ec
 80073a0:	20000784 	.word	0x20000784
 80073a4:	200006fc 	.word	0x200006fc
 80073a8:	20000740 	.word	0x20000740
 80073ac:	200007fd 	.word	0x200007fd

080073b0 <trigger_hardware_emergency>:

void trigger_hardware_emergency(void) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
	safety_state = SAFETY_HARDWARE_EMERGENCY;
 80073b4:	4b13      	ldr	r3, [pc, #76]	@ (8007404 <trigger_hardware_emergency+0x54>)
 80073b6:	2202      	movs	r2, #2
 80073b8:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = true;
 80073ba:	4b13      	ldr	r3, [pc, #76]	@ (8007408 <trigger_hardware_emergency+0x58>)
 80073bc:	2201      	movs	r2, #1
 80073be:	701a      	strb	r2, [r3, #0]
	emergency_stop_all_motors();
 80073c0:	f000 f85e 	bl	8007480 <emergency_stop_all_motors>
	safety_toggle_timer = 0;
 80073c4:	4b11      	ldr	r3, [pc, #68]	@ (800740c <trigger_hardware_emergency+0x5c>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 80073ca:	4b11      	ldr	r3, [pc, #68]	@ (8007410 <trigger_hardware_emergency+0x60>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]
	homing_active = false;
 80073d0:	4b10      	ldr	r3, [pc, #64]	@ (8007414 <trigger_hardware_emergency+0x64>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	701a      	strb	r2, [r3, #0]
	homing_state = HOMING_IDLE;
 80073d6:	4b10      	ldr	r3, [pc, #64]	@ (8007418 <trigger_hardware_emergency+0x68>)
 80073d8:	2200      	movs	r2, #0
 80073da:	701a      	strb	r2, [r3, #0]
	motion_sequence_state = MOTION_IDLE;
 80073dc:	4b0f      	ldr	r3, [pc, #60]	@ (800741c <trigger_hardware_emergency+0x6c>)
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 80073e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007420 <trigger_hardware_emergency+0x70>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 80073ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007424 <trigger_hardware_emergency+0x74>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Exit joy mode if active
	if (joy_mode_active) {
 80073f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007428 <trigger_hardware_emergency+0x78>)
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <trigger_hardware_emergency+0x4e>
		exit_joy_mode();
 80073fa:	f000 f95f 	bl	80076bc <exit_joy_mode>
	}
}
 80073fe:	bf00      	nop
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	200007e4 	.word	0x200007e4
 8007408:	200007ed 	.word	0x200007ed
 800740c:	200007e8 	.word	0x200007e8
 8007410:	200007ec 	.word	0x200007ec
 8007414:	200007e3 	.word	0x200007e3
 8007418:	200007e2 	.word	0x200007e2
 800741c:	20000784 	.word	0x20000784
 8007420:	200006fc 	.word	0x200006fc
 8007424:	20000740 	.word	0x20000740
 8007428:	200007fd 	.word	0x200007fd

0800742c <clear_emergency_state>:

void clear_emergency_state(void) {
 800742c:	b580      	push	{r7, lr}
 800742e:	af00      	add	r7, sp, #0
	safety_state = SAFETY_NORMAL;
 8007430:	4b0d      	ldr	r3, [pc, #52]	@ (8007468 <clear_emergency_state+0x3c>)
 8007432:	2200      	movs	r2, #0
 8007434:	701a      	strb	r2, [r3, #0]
	hardware_emergency_triggered = false;
 8007436:	4b0d      	ldr	r3, [pc, #52]	@ (800746c <clear_emergency_state+0x40>)
 8007438:	2200      	movs	r2, #0
 800743a:	701a      	strb	r2, [r3, #0]
	safety_toggle_timer = 0;
 800743c:	4b0c      	ldr	r3, [pc, #48]	@ (8007470 <clear_emergency_state+0x44>)
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
	pilot_light_state = false;
 8007442:	4b0c      	ldr	r3, [pc, #48]	@ (8007474 <clear_emergency_state+0x48>)
 8007444:	2200      	movs	r2, #0
 8007446:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007448:	2200      	movs	r2, #0
 800744a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800744e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007452:	f005 fded 	bl	800d030 <HAL_GPIO_WritePin>
	up_photo = false;
 8007456:	4b08      	ldr	r3, [pc, #32]	@ (8007478 <clear_emergency_state+0x4c>)
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
	low_photo = false;
 800745c:	4b07      	ldr	r3, [pc, #28]	@ (800747c <clear_emergency_state+0x50>)
 800745e:	2200      	movs	r2, #0
 8007460:	701a      	strb	r2, [r3, #0]
}
 8007462:	bf00      	nop
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	200007e4 	.word	0x200007e4
 800746c:	200007ed 	.word	0x200007ed
 8007470:	200007e8 	.word	0x200007e8
 8007474:	200007ec 	.word	0x200007ec
 8007478:	200007e0 	.word	0x200007e0
 800747c:	200007e1 	.word	0x200007e1

08007480 <emergency_stop_all_motors>:

void emergency_stop_all_motors(void) {
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
	MDXX_set_range(&prismatic_motor, 2000, 0);
 8007484:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80074c4 <emergency_stop_all_motors+0x44>
 8007488:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80074c8 <emergency_stop_all_motors+0x48>
 800748c:	480f      	ldr	r0, [pc, #60]	@ (80074cc <emergency_stop_all_motors+0x4c>)
 800748e:	f7f9 ff79 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8007492:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80074c4 <emergency_stop_all_motors+0x44>
 8007496:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80074c8 <emergency_stop_all_motors+0x48>
 800749a:	480d      	ldr	r0, [pc, #52]	@ (80074d0 <emergency_stop_all_motors+0x50>)
 800749c:	f7f9 ff72 	bl	8001384 <MDXX_set_range>

	prismatic_axis.command_pos = 0.0f;
 80074a0:	4b0c      	ldr	r3, [pc, #48]	@ (80074d4 <emergency_stop_all_motors+0x54>)
 80074a2:	f04f 0200 	mov.w	r2, #0
 80074a6:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 80074a8:	4b0b      	ldr	r3, [pc, #44]	@ (80074d8 <emergency_stop_all_motors+0x58>)
 80074aa:	f04f 0200 	mov.w	r2, #0
 80074ae:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 80074b0:	4b08      	ldr	r3, [pc, #32]	@ (80074d4 <emergency_stop_all_motors+0x54>)
 80074b2:	f04f 0200 	mov.w	r2, #0
 80074b6:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 80074b8:	4b07      	ldr	r3, [pc, #28]	@ (80074d8 <emergency_stop_all_motors+0x58>)
 80074ba:	f04f 0200 	mov.w	r2, #0
 80074be:	629a      	str	r2, [r3, #40]	@ 0x28
//	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);

}
 80074c0:	bf00      	nop
 80074c2:	bd80      	pop	{r7, pc}
 80074c4:	00000000 	.word	0x00000000
 80074c8:	44fa0000 	.word	0x44fa0000
 80074cc:	200008e4 	.word	0x200008e4
 80074d0:	20000930 	.word	0x20000930
 80074d4:	200006fc 	.word	0x200006fc
 80074d8:	20000740 	.word	0x20000740

080074dc <update_safety_system>:

void update_safety_system(void) {
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
	// Don't control pilot light if joy mode is active
	if (joy_mode_active) {
 80074e0:	4b3a      	ldr	r3, [pc, #232]	@ (80075cc <update_safety_system+0xf0>)
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d16e      	bne.n	80075c6 <update_safety_system+0xea>
		return; // Let joy mode handle pilot light
	}

	if (safety_state == SAFETY_SOFTWARE_EMERGENCY) {
 80074e8:	4b39      	ldr	r3, [pc, #228]	@ (80075d0 <update_safety_system+0xf4>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d11f      	bne.n	8007530 <update_safety_system+0x54>
		if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 80074f0:	4b38      	ldr	r3, [pc, #224]	@ (80075d4 <update_safety_system+0xf8>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3301      	adds	r3, #1
 80074f6:	4a37      	ldr	r2, [pc, #220]	@ (80075d4 <update_safety_system+0xf8>)
 80074f8:	6013      	str	r3, [r2, #0]
 80074fa:	2bf9      	cmp	r3, #249	@ 0xf9
 80074fc:	d918      	bls.n	8007530 <update_safety_system+0x54>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80074fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007506:	f005 fdab 	bl	800d060 <HAL_GPIO_TogglePin>
			pilot_light_state = !pilot_light_state;
 800750a:	4b33      	ldr	r3, [pc, #204]	@ (80075d8 <update_safety_system+0xfc>)
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	2b00      	cmp	r3, #0
 8007512:	bf14      	ite	ne
 8007514:	2301      	movne	r3, #1
 8007516:	2300      	moveq	r3, #0
 8007518:	b2db      	uxtb	r3, r3
 800751a:	f083 0301 	eor.w	r3, r3, #1
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f003 0301 	and.w	r3, r3, #1
 8007524:	b2da      	uxtb	r2, r3
 8007526:	4b2c      	ldr	r3, [pc, #176]	@ (80075d8 <update_safety_system+0xfc>)
 8007528:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 800752a:	4b2a      	ldr	r3, [pc, #168]	@ (80075d4 <update_safety_system+0xf8>)
 800752c:	2200      	movs	r2, #0
 800752e:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_HARDWARE_EMERGENCY) {
 8007530:	4b27      	ldr	r3, [pc, #156]	@ (80075d0 <update_safety_system+0xf4>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	2b02      	cmp	r3, #2
 8007536:	d134      	bne.n	80075a2 <update_safety_system+0xc6>
		if (HAL_GPIO_ReadPin(EMER_GPIO_Port, EMER_Pin) == GPIO_PIN_SET) {
 8007538:	2110      	movs	r1, #16
 800753a:	4828      	ldr	r0, [pc, #160]	@ (80075dc <update_safety_system+0x100>)
 800753c:	f005 fd60 	bl	800d000 <HAL_GPIO_ReadPin>
 8007540:	4603      	mov	r3, r0
 8007542:	2b01      	cmp	r3, #1
 8007544:	d120      	bne.n	8007588 <update_safety_system+0xac>
			if (++safety_toggle_timer >= SAFETY_TOGGLE_PERIOD) {
 8007546:	4b23      	ldr	r3, [pc, #140]	@ (80075d4 <update_safety_system+0xf8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3301      	adds	r3, #1
 800754c:	4a21      	ldr	r2, [pc, #132]	@ (80075d4 <update_safety_system+0xf8>)
 800754e:	6013      	str	r3, [r2, #0]
 8007550:	2bf9      	cmp	r3, #249	@ 0xf9
 8007552:	d926      	bls.n	80075a2 <update_safety_system+0xc6>
				HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 8007554:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007558:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800755c:	f005 fd80 	bl	800d060 <HAL_GPIO_TogglePin>
				pilot_light_state = !pilot_light_state;
 8007560:	4b1d      	ldr	r3, [pc, #116]	@ (80075d8 <update_safety_system+0xfc>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	b2db      	uxtb	r3, r3
 8007566:	2b00      	cmp	r3, #0
 8007568:	bf14      	ite	ne
 800756a:	2301      	movne	r3, #1
 800756c:	2300      	moveq	r3, #0
 800756e:	b2db      	uxtb	r3, r3
 8007570:	f083 0301 	eor.w	r3, r3, #1
 8007574:	b2db      	uxtb	r3, r3
 8007576:	f003 0301 	and.w	r3, r3, #1
 800757a:	b2da      	uxtb	r2, r3
 800757c:	4b16      	ldr	r3, [pc, #88]	@ (80075d8 <update_safety_system+0xfc>)
 800757e:	701a      	strb	r2, [r3, #0]
				safety_toggle_timer = 0;
 8007580:	4b14      	ldr	r3, [pc, #80]	@ (80075d4 <update_safety_system+0xf8>)
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
 8007586:	e00c      	b.n	80075a2 <update_safety_system+0xc6>
			}
		} else {
			HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 8007588:	2200      	movs	r2, #0
 800758a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800758e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007592:	f005 fd4d 	bl	800d030 <HAL_GPIO_WritePin>
			pilot_light_state = false;
 8007596:	4b10      	ldr	r3, [pc, #64]	@ (80075d8 <update_safety_system+0xfc>)
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
			safety_toggle_timer = 0;
 800759c:	4b0d      	ldr	r3, [pc, #52]	@ (80075d4 <update_safety_system+0xf8>)
 800759e:	2200      	movs	r2, #0
 80075a0:	601a      	str	r2, [r3, #0]
		}
	}

	if (safety_state == SAFETY_NORMAL) {
 80075a2:	4b0b      	ldr	r3, [pc, #44]	@ (80075d0 <update_safety_system+0xf4>)
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10e      	bne.n	80075c8 <update_safety_system+0xec>
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80075aa:	2200      	movs	r2, #0
 80075ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80075b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80075b4:	f005 fd3c 	bl	800d030 <HAL_GPIO_WritePin>
		pilot_light_state = false;
 80075b8:	4b07      	ldr	r3, [pc, #28]	@ (80075d8 <update_safety_system+0xfc>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
		safety_toggle_timer = 0;
 80075be:	4b05      	ldr	r3, [pc, #20]	@ (80075d4 <update_safety_system+0xf8>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	e000      	b.n	80075c8 <update_safety_system+0xec>
		return; // Let joy mode handle pilot light
 80075c6:	bf00      	nop
	}
}
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	200007fd 	.word	0x200007fd
 80075d0:	200007e4 	.word	0x200007e4
 80075d4:	200007e8 	.word	0x200007e8
 80075d8:	200007ec 	.word	0x200007ec
 80075dc:	48000400 	.word	0x48000400

080075e0 <is_emergency_active>:

bool is_emergency_active(void) {
 80075e0:	b480      	push	{r7}
 80075e2:	af00      	add	r7, sp, #0
	return (safety_state != SAFETY_NORMAL);
 80075e4:	4b05      	ldr	r3, [pc, #20]	@ (80075fc <is_emergency_active+0x1c>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bf14      	ite	ne
 80075ec:	2301      	movne	r3, #1
 80075ee:	2300      	moveq	r3, #0
 80075f0:	b2db      	uxtb	r3, r3
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	200007e4 	.word	0x200007e4

08007600 <enter_joy_mode>:

void enter_joy_mode(void) {
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8007604:	f7ff ffec 	bl	80075e0 <is_emergency_active>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d140      	bne.n	8007690 <enter_joy_mode+0x90>
 800760e:	4b21      	ldr	r3, [pc, #132]	@ (8007694 <enter_joy_mode+0x94>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d13c      	bne.n	8007690 <enter_joy_mode+0x90>
 8007616:	4b20      	ldr	r3, [pc, #128]	@ (8007698 <enter_joy_mode+0x98>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d138      	bne.n	8007690 <enter_joy_mode+0x90>
		return;
	}

	joy_mode_active = true;
 800761e:	4b1e      	ldr	r3, [pc, #120]	@ (8007698 <enter_joy_mode+0x98>)
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_INITIAL_CONTROL; // Start in initial control state
 8007624:	4b1d      	ldr	r3, [pc, #116]	@ (800769c <enter_joy_mode+0x9c>)
 8007626:	2201      	movs	r2, #1
 8007628:	701a      	strb	r2, [r3, #0]

	// Reset all joy mode data
	reset_joy_mode_data();
 800762a:	f000 f9b9 	bl	80079a0 <reset_joy_mode_data>

	// Turn on pilot light to indicate joy mode
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 800762e:	2201      	movs	r2, #1
 8007630:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8007638:	f005 fcfa 	bl	800d030 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = true;
 800763c:	4b18      	ldr	r3, [pc, #96]	@ (80076a0 <enter_joy_mode+0xa0>)
 800763e:	2201      	movs	r2, #1
 8007640:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 8007642:	4b18      	ldr	r3, [pc, #96]	@ (80076a4 <enter_joy_mode+0xa4>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]

	// Stop any current motion
	motion_sequence_state = MOTION_IDLE;
 8007648:	4b17      	ldr	r3, [pc, #92]	@ (80076a8 <enter_joy_mode+0xa8>)
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 800764e:	4b17      	ldr	r3, [pc, #92]	@ (80076ac <enter_joy_mode+0xac>)
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 8007656:	4b16      	ldr	r3, [pc, #88]	@ (80076b0 <enter_joy_mode+0xb0>)
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Initialize position holding at current positions
	prismatic_axis.position = prismatic_encoder.mm;
 800765e:	4b15      	ldr	r3, [pc, #84]	@ (80076b4 <enter_joy_mode+0xb4>)
 8007660:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007662:	4a12      	ldr	r2, [pc, #72]	@ (80076ac <enter_joy_mode+0xac>)
 8007664:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 8007666:	4b14      	ldr	r3, [pc, #80]	@ (80076b8 <enter_joy_mode+0xb8>)
 8007668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766a:	4a11      	ldr	r2, [pc, #68]	@ (80076b0 <enter_joy_mode+0xb0>)
 800766c:	6013      	str	r3, [r2, #0]

	// Reset motor commands
	prismatic_axis.command_pos = 0.0f;
 800766e:	4b0f      	ldr	r3, [pc, #60]	@ (80076ac <enter_joy_mode+0xac>)
 8007670:	f04f 0200 	mov.w	r2, #0
 8007674:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_axis.command_pos = 0.0f;
 8007676:	4b0e      	ldr	r3, [pc, #56]	@ (80076b0 <enter_joy_mode+0xb0>)
 8007678:	f04f 0200 	mov.w	r2, #0
 800767c:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_axis.command_vel = 0.0f;
 800767e:	4b0b      	ldr	r3, [pc, #44]	@ (80076ac <enter_joy_mode+0xac>)
 8007680:	f04f 0200 	mov.w	r2, #0
 8007684:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007686:	4b0a      	ldr	r3, [pc, #40]	@ (80076b0 <enter_joy_mode+0xb0>)
 8007688:	f04f 0200 	mov.w	r2, #0
 800768c:	629a      	str	r2, [r3, #40]	@ 0x28
 800768e:	e000      	b.n	8007692 <enter_joy_mode+0x92>
		return;
 8007690:	bf00      	nop
	// Reset PID controllers
//	PID_CONTROLLER_Reset(&prismatic_position_pid);
//	PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
}
 8007692:	bd80      	pop	{r7, pc}
 8007694:	200007e3 	.word	0x200007e3
 8007698:	200007fd 	.word	0x200007fd
 800769c:	200007fc 	.word	0x200007fc
 80076a0:	20000858 	.word	0x20000858
 80076a4:	20000854 	.word	0x20000854
 80076a8:	20000784 	.word	0x20000784
 80076ac:	200006fc 	.word	0x200006fc
 80076b0:	20000740 	.word	0x20000740
 80076b4:	2000097c 	.word	0x2000097c
 80076b8:	200009d8 	.word	0x200009d8

080076bc <exit_joy_mode>:

/* Updated exit joy mode to handle cleanup properly */
void exit_joy_mode(void) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
	joy_mode_active = false;
 80076c0:	4b2c      	ldr	r3, [pc, #176]	@ (8007774 <exit_joy_mode+0xb8>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	701a      	strb	r2, [r3, #0]
	joy_mode_state = JOY_MODE_IDLE;
 80076c6:	4b2c      	ldr	r3, [pc, #176]	@ (8007778 <exit_joy_mode+0xbc>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	701a      	strb	r2, [r3, #0]

	// Reset all data
	reset_joy_mode_data();
 80076cc:	f000 f968 	bl	80079a0 <reset_joy_mode_data>

	// Turn off pilot light
	HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_RESET);
 80076d0:	2200      	movs	r2, #0
 80076d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80076d6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80076da:	f005 fca9 	bl	800d030 <HAL_GPIO_WritePin>
	joy_mode_pilot_state = false;
 80076de:	4b27      	ldr	r3, [pc, #156]	@ (800777c <exit_joy_mode+0xc0>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	701a      	strb	r2, [r3, #0]
	joy_mode_pilot_timer = 0;
 80076e4:	4b26      	ldr	r3, [pc, #152]	@ (8007780 <exit_joy_mode+0xc4>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]

	// DON'T stop motors - hold current position
	// Set current positions as target positions for holding
	prismatic_axis.position = prismatic_encoder.mm;
 80076ea:	4b26      	ldr	r3, [pc, #152]	@ (8007784 <exit_joy_mode+0xc8>)
 80076ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ee:	4a26      	ldr	r2, [pc, #152]	@ (8007788 <exit_joy_mode+0xcc>)
 80076f0:	6013      	str	r3, [r2, #0]
	revolute_axis.position = revolute_encoder.rads;
 80076f2:	4b26      	ldr	r3, [pc, #152]	@ (800778c <exit_joy_mode+0xd0>)
 80076f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f6:	4a26      	ldr	r2, [pc, #152]	@ (8007790 <exit_joy_mode+0xd4>)
 80076f8:	6013      	str	r3, [r2, #0]

	// Reset velocities and feedforward terms
	prismatic_axis.command_vel = 0.0f;
 80076fa:	4b23      	ldr	r3, [pc, #140]	@ (8007788 <exit_joy_mode+0xcc>)
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	629a      	str	r2, [r3, #40]	@ 0x28
	revolute_axis.command_vel = 0.0f;
 8007702:	4b23      	ldr	r3, [pc, #140]	@ (8007790 <exit_joy_mode+0xd4>)
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	629a      	str	r2, [r3, #40]	@ 0x28
	prismatic_axis.ffd = 0.0f;
 800770a:	4b1f      	ldr	r3, [pc, #124]	@ (8007788 <exit_joy_mode+0xcc>)
 800770c:	f04f 0200 	mov.w	r2, #0
 8007710:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_axis.dfd = 0.0f;
 8007712:	4b1d      	ldr	r3, [pc, #116]	@ (8007788 <exit_joy_mode+0xcc>)
 8007714:	f04f 0200 	mov.w	r2, #0
 8007718:	62da      	str	r2, [r3, #44]	@ 0x2c
	revolute_axis.ffd = 0.0f;
 800771a:	4b1d      	ldr	r3, [pc, #116]	@ (8007790 <exit_joy_mode+0xd4>)
 800771c:	f04f 0200 	mov.w	r2, #0
 8007720:	631a      	str	r2, [r3, #48]	@ 0x30

	// Keep DFD for revolute axis (gravity compensation)
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007722:	4b1a      	ldr	r3, [pc, #104]	@ (800778c <exit_joy_mode+0xd0>)
 8007724:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007728:	4b16      	ldr	r3, [pc, #88]	@ (8007784 <exit_joy_mode+0xc8>)
 800772a:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 800772e:	ed9f 6a19 	vldr	s12, [pc, #100]	@ 8007794 <exit_joy_mode+0xd8>
 8007732:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007736:	eef0 0a66 	vmov.f32	s1, s13
 800773a:	eeb0 0a47 	vmov.f32	s0, s14
 800773e:	4816      	ldr	r0, [pc, #88]	@ (8007798 <exit_joy_mode+0xdc>)
 8007740:	f7f9 ff9b 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8007744:	eef0 7a40 	vmov.f32	s15, s0
 8007748:	4b11      	ldr	r3, [pc, #68]	@ (8007790 <exit_joy_mode+0xd4>)
 800774a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
//	PID_CONTROLLER_Reset(&revolute_position_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);
//	PID_CONTROLLER_Reset(&revolute_velocity_pid);

	// Reset motion state
	motion_sequence_state = MOTION_IDLE;
 800774e:	4b13      	ldr	r3, [pc, #76]	@ (800779c <exit_joy_mode+0xe0>)
 8007750:	2200      	movs	r2, #0
 8007752:	701a      	strb	r2, [r3, #0]
	prismatic_axis.trajectory_active = false;
 8007754:	4b0c      	ldr	r3, [pc, #48]	@ (8007788 <exit_joy_mode+0xcc>)
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	revolute_axis.trajectory_active = false;
 800775c:	4b0c      	ldr	r3, [pc, #48]	@ (8007790 <exit_joy_mode+0xd4>)
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	//modbus reset state
	registerFrame[BaseSystem_Status].U16 = 0;
 8007764:	4b0e      	ldr	r3, [pc, #56]	@ (80077a0 <exit_joy_mode+0xe4>)
 8007766:	2200      	movs	r2, #0
 8007768:	805a      	strh	r2, [r3, #2]
	registerFrame[R_Theta_Status].U16 = 0;
 800776a:	4b0d      	ldr	r3, [pc, #52]	@ (80077a0 <exit_joy_mode+0xe4>)
 800776c:	2200      	movs	r2, #0
 800776e:	841a      	strh	r2, [r3, #32]
}
 8007770:	bf00      	nop
 8007772:	bd80      	pop	{r7, pc}
 8007774:	200007fd 	.word	0x200007fd
 8007778:	200007fc 	.word	0x200007fc
 800777c:	20000858 	.word	0x20000858
 8007780:	20000854 	.word	0x20000854
 8007784:	2000097c 	.word	0x2000097c
 8007788:	200006fc 	.word	0x200006fc
 800778c:	200009d8 	.word	0x200009d8
 8007790:	20000740 	.word	0x20000740
 8007794:	447a0000 	.word	0x447a0000
 8007798:	20000b0c 	.word	0x20000b0c
 800779c:	20000784 	.word	0x20000784
 80077a0:	20001580 	.word	0x20001580

080077a4 <save_current_position>:

void save_current_position(void) {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
	if (saved_position_count < JOY_MODE_MAX_POSITIONS) {
 80077aa:	4b50      	ldr	r3, [pc, #320]	@ (80078ec <save_current_position+0x148>)
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b09      	cmp	r3, #9
 80077b0:	f200 8098 	bhi.w	80078e4 <save_current_position+0x140>
		float current_pris = prismatic_encoder.mm;
 80077b4:	4b4e      	ldr	r3, [pc, #312]	@ (80078f0 <save_current_position+0x14c>)
 80077b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077b8:	61fb      	str	r3, [r7, #28]
		float current_rev = revolute_encoder.rads;
 80077ba:	4b4e      	ldr	r3, [pc, #312]	@ (80078f4 <save_current_position+0x150>)
 80077bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077be:	61bb      	str	r3, [r7, #24]

		bool too_similar = false;
 80077c0:	2300      	movs	r3, #0
 80077c2:	75fb      	strb	r3, [r7, #23]
		if (saved_position_count > 0) {
 80077c4:	4b49      	ldr	r3, [pc, #292]	@ (80078ec <save_current_position+0x148>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d031      	beq.n	8007830 <save_current_position+0x8c>
			float last_pris =
					saved_positions[saved_position_count - 1].prismatic_pos;
 80077cc:	4b47      	ldr	r3, [pc, #284]	@ (80078ec <save_current_position+0x148>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	3b01      	subs	r3, #1
			float last_pris =
 80077d2:	4a49      	ldr	r2, [pc, #292]	@ (80078f8 <save_current_position+0x154>)
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4413      	add	r3, r2
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	613b      	str	r3, [r7, #16]
			float last_rev =
					saved_positions[saved_position_count - 1].revolute_pos;
 80077dc:	4b43      	ldr	r3, [pc, #268]	@ (80078ec <save_current_position+0x148>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	3b01      	subs	r3, #1
			float last_rev =
 80077e2:	4a45      	ldr	r2, [pc, #276]	@ (80078f8 <save_current_position+0x154>)
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	4413      	add	r3, r2
 80077e8:	3304      	adds	r3, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	60fb      	str	r3, [r7, #12]

			if (fabsf(current_pris - last_pris) < 5.0f
 80077ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80077f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80077f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077fa:	eef0 7ae7 	vabs.f32	s15, s15
 80077fe:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8007802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780a:	d511      	bpl.n	8007830 <save_current_position+0x8c>
					&& fabsf(current_rev - last_rev) < 0.1f) {
 800780c:	ed97 7a06 	vldr	s14, [r7, #24]
 8007810:	edd7 7a03 	vldr	s15, [r7, #12]
 8007814:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007818:	eef0 7ae7 	vabs.f32	s15, s15
 800781c:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80078fc <save_current_position+0x158>
 8007820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007828:	d502      	bpl.n	8007830 <save_current_position+0x8c>
				too_similar = true;
 800782a:	2301      	movs	r3, #1
 800782c:	75fb      	strb	r3, [r7, #23]
				// DEBUG: Position too similar, not saving
				return;// Exit early if too similar
 800782e:	e059      	b.n	80078e4 <save_current_position+0x140>
			}
		}

		// Only reach here if position should be saved
		saved_positions[saved_position_count].prismatic_pos = current_pris;
 8007830:	4b2e      	ldr	r3, [pc, #184]	@ (80078ec <save_current_position+0x148>)
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	4a30      	ldr	r2, [pc, #192]	@ (80078f8 <save_current_position+0x154>)
 8007836:	00db      	lsls	r3, r3, #3
 8007838:	4413      	add	r3, r2
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	601a      	str	r2, [r3, #0]
		saved_positions[saved_position_count].revolute_pos = current_rev;
 800783e:	4b2b      	ldr	r3, [pc, #172]	@ (80078ec <save_current_position+0x148>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	4a2d      	ldr	r2, [pc, #180]	@ (80078f8 <save_current_position+0x154>)
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	4413      	add	r3, r2
 8007848:	3304      	adds	r3, #4
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	601a      	str	r2, [r3, #0]

		uint8_t r_addr = 0x20 + saved_position_count * 2;
 800784e:	4b27      	ldr	r3, [pc, #156]	@ (80078ec <save_current_position+0x148>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	3310      	adds	r3, #16
 8007854:	b2db      	uxtb	r3, r3
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	72fb      	strb	r3, [r7, #11]
		uint8_t t_addr = r_addr + 1;
 800785a:	7afb      	ldrb	r3, [r7, #11]
 800785c:	3301      	adds	r3, #1
 800785e:	72bb      	strb	r3, [r7, #10]

		if (r_addr <= 0x38 && t_addr <= 0x39) {
 8007860:	7afb      	ldrb	r3, [r7, #11]
 8007862:	2b38      	cmp	r3, #56	@ 0x38
 8007864:	d82e      	bhi.n	80078c4 <save_current_position+0x120>
 8007866:	7abb      	ldrb	r3, [r7, #10]
 8007868:	2b39      	cmp	r3, #57	@ 0x39
 800786a:	d82b      	bhi.n	80078c4 <save_current_position+0x120>
			int16_t r_mm_fixed = (int16_t) (current_pris * 10.0);
 800786c:	69f8      	ldr	r0, [r7, #28]
 800786e:	f7f8 fe37 	bl	80004e0 <__aeabi_f2d>
 8007872:	f04f 0200 	mov.w	r2, #0
 8007876:	4b22      	ldr	r3, [pc, #136]	@ (8007900 <save_current_position+0x15c>)
 8007878:	f7f8 fe8a 	bl	8000590 <__aeabi_dmul>
 800787c:	4602      	mov	r2, r0
 800787e:	460b      	mov	r3, r1
 8007880:	4610      	mov	r0, r2
 8007882:	4619      	mov	r1, r3
 8007884:	f7f9 f91e 	bl	8000ac4 <__aeabi_d2iz>
 8007888:	4603      	mov	r3, r0
 800788a:	813b      	strh	r3, [r7, #8]
			int16_t t_deg_fixed = (int16_t) (revolute_axis.deg * 10.0);
 800788c:	4b1d      	ldr	r3, [pc, #116]	@ (8007904 <save_current_position+0x160>)
 800788e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007890:	4618      	mov	r0, r3
 8007892:	f7f8 fe25 	bl	80004e0 <__aeabi_f2d>
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	4b19      	ldr	r3, [pc, #100]	@ (8007900 <save_current_position+0x15c>)
 800789c:	f7f8 fe78 	bl	8000590 <__aeabi_dmul>
 80078a0:	4602      	mov	r2, r0
 80078a2:	460b      	mov	r3, r1
 80078a4:	4610      	mov	r0, r2
 80078a6:	4619      	mov	r1, r3
 80078a8:	f7f9 f90c 	bl	8000ac4 <__aeabi_d2iz>
 80078ac:	4603      	mov	r3, r0
 80078ae:	80fb      	strh	r3, [r7, #6]

			registerFrame[r_addr].U16 = r_mm_fixed;
 80078b0:	7afb      	ldrb	r3, [r7, #11]
 80078b2:	8939      	ldrh	r1, [r7, #8]
 80078b4:	4a14      	ldr	r2, [pc, #80]	@ (8007908 <save_current_position+0x164>)
 80078b6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			registerFrame[t_addr].U16 = t_deg_fixed;
 80078ba:	7abb      	ldrb	r3, [r7, #10]
 80078bc:	88f9      	ldrh	r1, [r7, #6]
 80078be:	4a12      	ldr	r2, [pc, #72]	@ (8007908 <save_current_position+0x164>)
 80078c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		saved_position_count++;
 80078c4:	4b09      	ldr	r3, [pc, #36]	@ (80078ec <save_current_position+0x148>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	3301      	adds	r3, #1
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	4b07      	ldr	r3, [pc, #28]	@ (80078ec <save_current_position+0x148>)
 80078ce:	701a      	strb	r2, [r3, #0]

		if (saved_position_count >= JOY_MODE_MAX_POSITIONS) {
 80078d0:	4b06      	ldr	r3, [pc, #24]	@ (80078ec <save_current_position+0x148>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	d905      	bls.n	80078e4 <save_current_position+0x140>
			joy_mode_state = JOY_MODE_POSITION_SAVED;
 80078d8:	4b0c      	ldr	r3, [pc, #48]	@ (800790c <save_current_position+0x168>)
 80078da:	2203      	movs	r2, #3
 80078dc:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 80078de:	4b0c      	ldr	r3, [pc, #48]	@ (8007910 <save_current_position+0x16c>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80078e4:	3720      	adds	r7, #32
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20000850 	.word	0x20000850
 80078f0:	2000097c 	.word	0x2000097c
 80078f4:	200009d8 	.word	0x200009d8
 80078f8:	20000800 	.word	0x20000800
 80078fc:	3dcccccd 	.word	0x3dcccccd
 8007900:	40240000 	.word	0x40240000
 8007904:	20000740 	.word	0x20000740
 8007908:	20001580 	.word	0x20001580
 800790c:	200007fc 	.word	0x200007fc
 8007910:	20000854 	.word	0x20000854

08007914 <start_position_playback>:

void start_position_playback(void) {
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0

	if (saved_position_count > 0) {
 800791a:	4b19      	ldr	r3, [pc, #100]	@ (8007980 <start_position_playback+0x6c>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d02a      	beq.n	8007978 <start_position_playback+0x64>
		playback_position_index = 0;
 8007922:	4b18      	ldr	r3, [pc, #96]	@ (8007984 <start_position_playback+0x70>)
 8007924:	2200      	movs	r2, #0
 8007926:	701a      	strb	r2, [r3, #0]
		joy_mode_playback_timer = 0;
 8007928:	4b17      	ldr	r3, [pc, #92]	@ (8007988 <start_position_playback+0x74>)
 800792a:	2200      	movs	r2, #0
 800792c:	601a      	str	r2, [r3, #0]
		joy_mode_state = JOY_MODE_PLAYBACK;
 800792e:	4b17      	ldr	r3, [pc, #92]	@ (800798c <start_position_playback+0x78>)
 8007930:	2204      	movs	r2, #4
 8007932:	701a      	strb	r2, [r3, #0]
		// Keep pilot light ON during playback (don't turn it off)
		HAL_GPIO_WritePin(PILOT_GPIO_Port, PILOT_Pin, GPIO_PIN_SET);
 8007934:	2201      	movs	r2, #1
 8007936:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800793a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800793e:	f005 fb77 	bl	800d030 <HAL_GPIO_WritePin>
		joy_mode_pilot_state = true;
 8007942:	4b13      	ldr	r3, [pc, #76]	@ (8007990 <start_position_playback+0x7c>)
 8007944:	2201      	movs	r2, #1
 8007946:	701a      	strb	r2, [r3, #0]

		// Start first trajectory
		float target_pris = saved_positions[0].prismatic_pos;
 8007948:	4b12      	ldr	r3, [pc, #72]	@ (8007994 <start_position_playback+0x80>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	60fb      	str	r3, [r7, #12]
		float target_rev_rad = saved_positions[0].revolute_pos;
 800794e:	4b11      	ldr	r3, [pc, #68]	@ (8007994 <start_position_playback+0x80>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	60bb      	str	r3, [r7, #8]
		float target_rev_deg = target_rev_rad * 180.0f / PI;
 8007954:	edd7 7a02 	vldr	s15, [r7, #8]
 8007958:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007998 <start_position_playback+0x84>
 800795c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007960:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800799c <start_position_playback+0x88>
 8007964:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007968:	edc7 7a01 	vstr	s15, [r7, #4]

		start_combined_trajectory(target_pris, target_rev_deg);
 800796c:	edd7 0a01 	vldr	s1, [r7, #4]
 8007970:	ed97 0a03 	vldr	s0, [r7, #12]
 8007974:	f7fe fce2 	bl	800633c <start_combined_trajectory>

	}
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	20000850 	.word	0x20000850
 8007984:	20000851 	.word	0x20000851
 8007988:	2000085c 	.word	0x2000085c
 800798c:	200007fc 	.word	0x200007fc
 8007990:	20000858 	.word	0x20000858
 8007994:	20000800 	.word	0x20000800
 8007998:	43340000 	.word	0x43340000
 800799c:	40490fdb 	.word	0x40490fdb

080079a0 <reset_joy_mode_data>:

void reset_joy_mode_data(void) {
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
	// Reset saved position count
	saved_position_count = 0;
 80079a6:	4b19      	ldr	r3, [pc, #100]	@ (8007a0c <reset_joy_mode_data+0x6c>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	701a      	strb	r2, [r3, #0]

	// Reset playback index
	playback_position_index = 0;
 80079ac:	4b18      	ldr	r3, [pc, #96]	@ (8007a10 <reset_joy_mode_data+0x70>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	701a      	strb	r2, [r3, #0]

	// Clear all saved positions
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 80079b2:	2300      	movs	r3, #0
 80079b4:	607b      	str	r3, [r7, #4]
 80079b6:	e011      	b.n	80079dc <reset_joy_mode_data+0x3c>
		saved_positions[i].prismatic_pos = 0.0f;
 80079b8:	4a16      	ldr	r2, [pc, #88]	@ (8007a14 <reset_joy_mode_data+0x74>)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	4413      	add	r3, r2
 80079c0:	f04f 0200 	mov.w	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]
		saved_positions[i].revolute_pos = 0.0f;
 80079c6:	4a13      	ldr	r2, [pc, #76]	@ (8007a14 <reset_joy_mode_data+0x74>)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	4413      	add	r3, r2
 80079ce:	3304      	adds	r3, #4
 80079d0:	f04f 0200 	mov.w	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < JOY_MODE_MAX_POSITIONS; i++) {
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3301      	adds	r3, #1
 80079da:	607b      	str	r3, [r7, #4]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b09      	cmp	r3, #9
 80079e0:	ddea      	ble.n	80079b8 <reset_joy_mode_data+0x18>
	}

	// Reset pilot light timers
	joy_mode_pilot_timer = 0;
 80079e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007a18 <reset_joy_mode_data+0x78>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	601a      	str	r2, [r3, #0]
	joy_mode_pilot_state = false;
 80079e8:	4b0c      	ldr	r3, [pc, #48]	@ (8007a1c <reset_joy_mode_data+0x7c>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	701a      	strb	r2, [r3, #0]

	// Reset playback timer
	joy_mode_playback_timer = 0;
 80079ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007a20 <reset_joy_mode_data+0x80>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]

	// Reset button states
	joy_mode_b2_pressed = false;
 80079f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <reset_joy_mode_data+0x84>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	701a      	strb	r2, [r3, #0]
	joy_mode_b2_last_state = false;
 80079fa:	4b0b      	ldr	r3, [pc, #44]	@ (8007a28 <reset_joy_mode_data+0x88>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	701a      	strb	r2, [r3, #0]
}
 8007a00:	bf00      	nop
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	20000850 	.word	0x20000850
 8007a10:	20000851 	.word	0x20000851
 8007a14:	20000800 	.word	0x20000800
 8007a18:	20000854 	.word	0x20000854
 8007a1c:	20000858 	.word	0x20000858
 8007a20:	2000085c 	.word	0x2000085c
 8007a24:	20000860 	.word	0x20000860
 8007a28:	20000861 	.word	0x20000861
 8007a2c:	00000000 	.word	0x00000000

08007a30 <update_joy_mode_velocity_control>:

void update_joy_mode_velocity_control(void) {
 8007a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a34:	ed2d 8b02 	vpush	{d8}
 8007a38:	b08d      	sub	sp, #52	@ 0x34
 8007a3a:	af00      	add	r7, sp, #0
	// Read current photo sensor states directly
	bool up_photo_detected = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port,
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	48a7      	ldr	r0, [pc, #668]	@ (8007cdc <update_joy_mode_velocity_control+0x2ac>)
 8007a40:	f005 fade 	bl	800d000 <HAL_GPIO_ReadPin>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bf14      	ite	ne
 8007a4a:	2301      	movne	r3, #1
 8007a4c:	2300      	moveq	r3, #0
 8007a4e:	76fb      	strb	r3, [r7, #27]
	UPPER_PHOTO_Pin);
	bool low_photo_detected = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port,
 8007a50:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007a54:	48a1      	ldr	r0, [pc, #644]	@ (8007cdc <update_joy_mode_velocity_control+0x2ac>)
 8007a56:	f005 fad3 	bl	800d000 <HAL_GPIO_ReadPin>
 8007a5a:	4603      	mov	r3, r0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	bf14      	ite	ne
 8007a60:	2301      	movne	r3, #1
 8007a62:	2300      	moveq	r3, #0
 8007a64:	76bb      	strb	r3, [r7, #26]
	LOWER_PHOTO_Pin);

	// Prismatic axis control based on joystick_x
	float pris_command_vel = 0.0f;
 8007a66:	f04f 0300 	mov.w	r3, #0
 8007a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	bool pris_moving = false;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	static bool pris_was_moving = false; // Track previous moving state

	// Process prismatic axis joystick control (FIXED LOGIC)
	if (up_photo_detected && joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007a72:	7efb      	ldrb	r3, [r7, #27]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00d      	beq.n	8007a94 <update_joy_mode_velocity_control+0x64>
 8007a78:	4b99      	ldr	r3, [pc, #612]	@ (8007ce0 <update_joy_mode_velocity_control+0x2b0>)
 8007a7a:	edd3 7a00 	vldr	s15, [r3]
 8007a7e:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8007ce4 <update_joy_mode_velocity_control+0x2b4>
 8007a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a8a:	dd03      	ble.n	8007a94 <update_joy_mode_velocity_control+0x64>
		// At up photo and trying to go up (negative direction) - block movement
		pris_command_vel = 0.0f;
 8007a8c:	f04f 0300 	mov.w	r3, #0
 8007a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a92:	e048      	b.n	8007b26 <update_joy_mode_velocity_control+0xf6>
	} else if (low_photo_detected && joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007a94:	7ebb      	ldrb	r3, [r7, #26]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00d      	beq.n	8007ab6 <update_joy_mode_velocity_control+0x86>
 8007a9a:	4b91      	ldr	r3, [pc, #580]	@ (8007ce0 <update_joy_mode_velocity_control+0x2b0>)
 8007a9c:	edd3 7a00 	vldr	s15, [r3]
 8007aa0:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8007ce8 <update_joy_mode_velocity_control+0x2b8>
 8007aa4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aac:	d503      	bpl.n	8007ab6 <update_joy_mode_velocity_control+0x86>
		// At low photo and trying to go down (positive direction) - block movement
		pris_command_vel = 0.0f;
 8007aae:	f04f 0300 	mov.w	r3, #0
 8007ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ab4:	e037      	b.n	8007b26 <update_joy_mode_velocity_control+0xf6>
	} else if (joystick_x < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007ab6:	4b8a      	ldr	r3, [pc, #552]	@ (8007ce0 <update_joy_mode_velocity_control+0x2b0>)
 8007ab8:	edd3 7a00 	vldr	s15, [r3]
 8007abc:	ed9f 7a8a 	vldr	s14, [pc, #552]	@ 8007ce8 <update_joy_mode_velocity_control+0x2b8>
 8007ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ac8:	d50e      	bpl.n	8007ae8 <update_joy_mode_velocity_control+0xb8>
		// Moving down (positive direction)
		pris_command_vel = JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007aca:	4b88      	ldr	r3, [pc, #544]	@ (8007cec <update_joy_mode_velocity_control+0x2bc>)
 8007acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!low_photo_detected) {
 8007ad4:	7ebb      	ldrb	r3, [r7, #26]
 8007ad6:	f083 0301 	eor.w	r3, r3, #1
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d022      	beq.n	8007b26 <update_joy_mode_velocity_control+0xf6>
			up_photo = false;
 8007ae0:	4b83      	ldr	r3, [pc, #524]	@ (8007cf0 <update_joy_mode_velocity_control+0x2c0>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	e01e      	b.n	8007b26 <update_joy_mode_velocity_control+0xf6>
		}
	} else if (joystick_x > JOY_MODE_VELOCITY_THRESHOLD) {
 8007ae8:	4b7d      	ldr	r3, [pc, #500]	@ (8007ce0 <update_joy_mode_velocity_control+0x2b0>)
 8007aea:	edd3 7a00 	vldr	s15, [r3]
 8007aee:	ed9f 7a7d 	vldr	s14, [pc, #500]	@ 8007ce4 <update_joy_mode_velocity_control+0x2b4>
 8007af2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007afa:	dd0e      	ble.n	8007b1a <update_joy_mode_velocity_control+0xea>
		// Moving up (negative direction)
		pris_command_vel = -JOY_MODE_CONSTANT_VELOCITY_PRIS;
 8007afc:	4b7d      	ldr	r3, [pc, #500]	@ (8007cf4 <update_joy_mode_velocity_control+0x2c4>)
 8007afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = true;
 8007b00:	2301      	movs	r3, #1
 8007b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		// Clear flags when moving away from sensors
		if (!up_photo_detected) {
 8007b06:	7efb      	ldrb	r3, [r7, #27]
 8007b08:	f083 0301 	eor.w	r3, r3, #1
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d009      	beq.n	8007b26 <update_joy_mode_velocity_control+0xf6>
			low_photo = false;
 8007b12:	4b79      	ldr	r3, [pc, #484]	@ (8007cf8 <update_joy_mode_velocity_control+0x2c8>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	701a      	strb	r2, [r3, #0]
 8007b18:	e005      	b.n	8007b26 <update_joy_mode_velocity_control+0xf6>
		}
	} else {
		// Joystick in deadband - hold position
		pris_command_vel = 0.0f;
 8007b1a:	f04f 0300 	mov.w	r3, #0
 8007b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		pris_moving = false;
 8007b20:	2300      	movs	r3, #0
 8007b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	}

	// Revolute axis control based on joystick_y
	float rev_command_vel = 0.0f;
 8007b26:	f04f 0300 	mov.w	r3, #0
 8007b2a:	627b      	str	r3, [r7, #36]	@ 0x24
	bool rev_moving = false;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

	// Get current revolute position in degrees for limit checking
	float revolute_deg = UnitConverter_angle(&converter_system,
 8007b32:	4b72      	ldr	r3, [pc, #456]	@ (8007cfc <update_joy_mode_velocity_control+0x2cc>)
 8007b34:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8007b38:	220e      	movs	r2, #14
 8007b3a:	210f      	movs	r1, #15
 8007b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8007b40:	486f      	ldr	r0, [pc, #444]	@ (8007d00 <update_joy_mode_velocity_control+0x2d0>)
 8007b42:	f7fd f841 	bl	8004bc8 <UnitConverter_angle>
 8007b46:	ed87 0a05 	vstr	s0, [r7, #20]
			revolute_encoder.rads, UNIT_RADIAN, UNIT_DEGREE);

	// Process revolute axis joystick control with limits
	if ((revolute_deg > 175.0f && joystick_y > JOY_MODE_VELOCITY_THRESHOLD)
 8007b4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8007b4e:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8007d04 <update_joy_mode_velocity_control+0x2d4>
 8007b52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b5a:	dd09      	ble.n	8007b70 <update_joy_mode_velocity_control+0x140>
 8007b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8007d08 <update_joy_mode_velocity_control+0x2d8>)
 8007b5e:	edd3 7a00 	vldr	s15, [r3]
 8007b62:	ed9f 7a60 	vldr	s14, [pc, #384]	@ 8007ce4 <update_joy_mode_velocity_control+0x2b4>
 8007b66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6e:	dc12      	bgt.n	8007b96 <update_joy_mode_velocity_control+0x166>
			|| (revolute_deg < -175.0f
 8007b70:	edd7 7a05 	vldr	s15, [r7, #20]
 8007b74:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8007d0c <update_joy_mode_velocity_control+0x2dc>
 8007b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b80:	d510      	bpl.n	8007ba4 <update_joy_mode_velocity_control+0x174>
					&& joystick_y < -JOY_MODE_VELOCITY_THRESHOLD)) {
 8007b82:	4b61      	ldr	r3, [pc, #388]	@ (8007d08 <update_joy_mode_velocity_control+0x2d8>)
 8007b84:	edd3 7a00 	vldr	s15, [r3]
 8007b88:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8007ce8 <update_joy_mode_velocity_control+0x2b8>
 8007b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b94:	d506      	bpl.n	8007ba4 <update_joy_mode_velocity_control+0x174>
		// At revolute limits - block movement
		rev_command_vel = 0.0f;
 8007b96:	f04f 0300 	mov.w	r3, #0
 8007b9a:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ba2:	e025      	b.n	8007bf0 <update_joy_mode_velocity_control+0x1c0>
	} else if (joystick_y > JOY_MODE_VELOCITY_THRESHOLD) {
 8007ba4:	4b58      	ldr	r3, [pc, #352]	@ (8007d08 <update_joy_mode_velocity_control+0x2d8>)
 8007ba6:	edd3 7a00 	vldr	s15, [r3]
 8007baa:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8007ce4 <update_joy_mode_velocity_control+0x2b4>
 8007bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bb6:	dd05      	ble.n	8007bc4 <update_joy_mode_velocity_control+0x194>
		rev_command_vel = JOY_MODE_CONSTANT_VELOCITY_REV;
 8007bb8:	4b55      	ldr	r3, [pc, #340]	@ (8007d10 <update_joy_mode_velocity_control+0x2e0>)
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bc2:	e015      	b.n	8007bf0 <update_joy_mode_velocity_control+0x1c0>
	} else if (joystick_y < -JOY_MODE_VELOCITY_THRESHOLD) {
 8007bc4:	4b50      	ldr	r3, [pc, #320]	@ (8007d08 <update_joy_mode_velocity_control+0x2d8>)
 8007bc6:	edd3 7a00 	vldr	s15, [r3]
 8007bca:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8007ce8 <update_joy_mode_velocity_control+0x2b8>
 8007bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd6:	d505      	bpl.n	8007be4 <update_joy_mode_velocity_control+0x1b4>
		rev_command_vel = -JOY_MODE_CONSTANT_VELOCITY_REV;
 8007bd8:	4b4e      	ldr	r3, [pc, #312]	@ (8007d14 <update_joy_mode_velocity_control+0x2e4>)
 8007bda:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = true;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007be2:	e005      	b.n	8007bf0 <update_joy_mode_velocity_control+0x1c0>
	} else {
		// Joystick in deadband - hold position
		rev_command_vel = 0.0f;
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	627b      	str	r3, [r7, #36]	@ 0x24
		rev_moving = false;
 8007bea:	2300      	movs	r3, #0
 8007bec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	}

	/* PRISMATIC AXIS CONTROL - Keep existing PID-based control */
	// Detect transition from moving to stopped
	if (pris_was_moving && !pris_moving) {
 8007bf0:	4b49      	ldr	r3, [pc, #292]	@ (8007d18 <update_joy_mode_velocity_control+0x2e8>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <update_joy_mode_velocity_control+0x1de>
 8007bf8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bfc:	f083 0301 	eor.w	r3, r3, #1
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <update_joy_mode_velocity_control+0x1de>
		// Just stopped moving - capture current position as target
		prismatic_axis.position = prismatic_encoder.mm;
 8007c06:	4b45      	ldr	r3, [pc, #276]	@ (8007d1c <update_joy_mode_velocity_control+0x2ec>)
 8007c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c0a:	4a45      	ldr	r2, [pc, #276]	@ (8007d20 <update_joy_mode_velocity_control+0x2f0>)
 8007c0c:	6013      	str	r3, [r2, #0]
	}

	if (pris_moving) {
 8007c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 8092 	beq.w	8007d3c <update_joy_mode_velocity_control+0x30c>
		// Moving - use velocity control
		prismatic_axis.vel_error = pris_command_vel
				- prismatic_axis.kalman_velocity;
 8007c18:	4b41      	ldr	r3, [pc, #260]	@ (8007d20 <update_joy_mode_velocity_control+0x2f0>)
 8007c1a:	edd3 7a07 	vldr	s15, [r3, #28]
 8007c1e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8007c22:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = pris_command_vel
 8007c26:	4b3e      	ldr	r3, [pc, #248]	@ (8007d20 <update_joy_mode_velocity_control+0x2f0>)
 8007c28:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007c2c:	4b3c      	ldr	r3, [pc, #240]	@ (8007d20 <update_joy_mode_velocity_control+0x2f0>)
 8007c2e:	edd3 7a06 	vldr	s15, [r3, #24]
 8007c32:	eeb0 0a67 	vmov.f32	s0, s15
 8007c36:	483b      	ldr	r0, [pc, #236]	@ (8007d24 <update_joy_mode_velocity_control+0x2f4>)
 8007c38:	f7f9 faee 	bl	8001218 <PID_CONTROLLER_Compute>
 8007c3c:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007c40:	4b39      	ldr	r3, [pc, #228]	@ (8007d28 <update_joy_mode_velocity_control+0x2f8>)
 8007c42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007c46:	4610      	mov	r0, r2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	f7f8 ff3b 	bl	8000ac4 <__aeabi_d2iz>
 8007c4e:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007c50:	4b35      	ldr	r3, [pc, #212]	@ (8007d28 <update_joy_mode_velocity_control+0x2f8>)
 8007c52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007c56:	60ba      	str	r2, [r7, #8]
 8007c58:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007c5c:	60fb      	str	r3, [r7, #12]
		prismatic_axis.command_pos = PWM_Satuation(
 8007c5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c62:	f7f8 ff2f 	bl	8000ac4 <__aeabi_d2iz>
 8007c66:	4603      	mov	r3, r0
 8007c68:	4619      	mov	r1, r3
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	eeb0 0a48 	vmov.f32	s0, s16
 8007c70:	f7f9 fa70 	bl	8001154 <PWM_Satuation>
 8007c74:	ee07 0a90 	vmov	s15, r0
 8007c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007c7c:	4b28      	ldr	r3, [pc, #160]	@ (8007d20 <update_joy_mode_velocity_control+0x2f0>)
 8007c7e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Add feedforward for moving
		prismatic_axis.ffd = PRISMATIC_MOTOR_FFD_Compute(&prismatic_motor_ffd,
 8007c82:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8007c86:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8007d2c <update_joy_mode_velocity_control+0x2fc>
 8007c8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007c8e:	eeb0 0a47 	vmov.f32	s0, s14
 8007c92:	4827      	ldr	r0, [pc, #156]	@ (8007d30 <update_joy_mode_velocity_control+0x300>)
 8007c94:	f7f9 fddc 	bl	8001850 <PRISMATIC_MOTOR_FFD_Compute>
 8007c98:	eef0 7a40 	vmov.f32	s15, s0
 8007c9c:	4b20      	ldr	r3, [pc, #128]	@ (8007d20 <update_joy_mode_velocity_control+0x2f0>)
 8007c9e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				pris_command_vel / 1000.0f);
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007ca2:	4b16      	ldr	r3, [pc, #88]	@ (8007cfc <update_joy_mode_velocity_control+0x2cc>)
 8007ca4:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
				revolute_encoder.rads, 0.0f, prismatic_encoder.mm / 1000.0f);
 8007ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8007d1c <update_joy_mode_velocity_control+0x2ec>)
 8007caa:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
		prismatic_axis.dfd = PRISMATIC_MOTOR_DFD_Compute(&prismatic_motor_dfd,
 8007cae:	ed9f 6a1f 	vldr	s12, [pc, #124]	@ 8007d2c <update_joy_mode_velocity_control+0x2fc>
 8007cb2:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007cb6:	eeb0 1a66 	vmov.f32	s2, s13
 8007cba:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8007d34 <update_joy_mode_velocity_control+0x304>
 8007cbe:	eeb0 0a47 	vmov.f32	s0, s14
 8007cc2:	481d      	ldr	r0, [pc, #116]	@ (8007d38 <update_joy_mode_velocity_control+0x308>)
 8007cc4:	f7f9 fe6c 	bl	80019a0 <PRISMATIC_MOTOR_DFD_Compute>
 8007cc8:	eef0 7a40 	vmov.f32	s15, s0
 8007ccc:	4b14      	ldr	r3, [pc, #80]	@ (8007d20 <update_joy_mode_velocity_control+0x2f0>)
 8007cce:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

		// Continuously update target position while moving
		prismatic_axis.position = prismatic_encoder.mm;
 8007cd2:	4b12      	ldr	r3, [pc, #72]	@ (8007d1c <update_joy_mode_velocity_control+0x2ec>)
 8007cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cd6:	4a12      	ldr	r2, [pc, #72]	@ (8007d20 <update_joy_mode_velocity_control+0x2f0>)
 8007cd8:	6013      	str	r3, [r2, #0]
 8007cda:	e0a2      	b.n	8007e22 <update_joy_mode_velocity_control+0x3f2>
 8007cdc:	48000400 	.word	0x48000400
 8007ce0:	20001e4c 	.word	0x20001e4c
 8007ce4:	42200000 	.word	0x42200000
 8007ce8:	c2200000 	.word	0xc2200000
 8007cec:	43160000 	.word	0x43160000
 8007cf0:	200007e0 	.word	0x200007e0
 8007cf4:	c3160000 	.word	0xc3160000
 8007cf8:	200007e1 	.word	0x200007e1
 8007cfc:	200009d8 	.word	0x200009d8
 8007d00:	20000d70 	.word	0x20000d70
 8007d04:	432f0000 	.word	0x432f0000
 8007d08:	20001e50 	.word	0x20001e50
 8007d0c:	c32f0000 	.word	0xc32f0000
 8007d10:	40400000 	.word	0x40400000
 8007d14:	c0400000 	.word	0xc0400000
 8007d18:	200008d0 	.word	0x200008d0
 8007d1c:	2000097c 	.word	0x2000097c
 8007d20:	200006fc 	.word	0x200006fc
 8007d24:	20000a5c 	.word	0x20000a5c
 8007d28:	20000080 	.word	0x20000080
 8007d2c:	447a0000 	.word	0x447a0000
 8007d30:	20000afc 	.word	0x20000afc
 8007d34:	00000000 	.word	0x00000000
 8007d38:	20000b00 	.word	0x20000b00
	} else {
		// Not moving - hold target position with position control
		prismatic_axis.pos_error = prismatic_axis.position
 8007d3c:	4bbc      	ldr	r3, [pc, #752]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007d3e:	ed93 7a00 	vldr	s14, [r3]
				- prismatic_encoder.mm;
 8007d42:	4bbc      	ldr	r3, [pc, #752]	@ (8008034 <update_joy_mode_velocity_control+0x604>)
 8007d44:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8007d48:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.pos_error = prismatic_axis.position
 8007d4c:	4bb8      	ldr	r3, [pc, #736]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007d4e:	edc3 7a05 	vstr	s15, [r3, #20]
		prismatic_axis.command_vel = PWM_Satuation(
 8007d52:	4bb7      	ldr	r3, [pc, #732]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007d54:	edd3 7a05 	vldr	s15, [r3, #20]
 8007d58:	eeb0 0a67 	vmov.f32	s0, s15
 8007d5c:	48b6      	ldr	r0, [pc, #728]	@ (8008038 <update_joy_mode_velocity_control+0x608>)
 8007d5e:	f7f9 fa5b 	bl	8001218 <PID_CONTROLLER_Compute>
 8007d62:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_position_pid,
						prismatic_axis.pos_error),
				ZGX45RGG_400RPM_Constant.sd_max,
 8007d66:	4bb5      	ldr	r3, [pc, #724]	@ (800803c <update_joy_mode_velocity_control+0x60c>)
 8007d68:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
		prismatic_axis.command_vel = PWM_Satuation(
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4619      	mov	r1, r3
 8007d70:	f7f8 fea8 	bl	8000ac4 <__aeabi_d2iz>
 8007d74:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.sd_max);
 8007d76:	4bb1      	ldr	r3, [pc, #708]	@ (800803c <update_joy_mode_velocity_control+0x60c>)
 8007d78:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8007d7c:	603a      	str	r2, [r7, #0]
 8007d7e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8007d82:	607b      	str	r3, [r7, #4]
		prismatic_axis.command_vel = PWM_Satuation(
 8007d84:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d88:	f7f8 fe9c 	bl	8000ac4 <__aeabi_d2iz>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	4619      	mov	r1, r3
 8007d90:	4620      	mov	r0, r4
 8007d92:	eeb0 0a48 	vmov.f32	s0, s16
 8007d96:	f7f9 f9dd 	bl	8001154 <PWM_Satuation>
 8007d9a:	ee07 0a90 	vmov	s15, r0
 8007d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007da2:	4ba3      	ldr	r3, [pc, #652]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007da4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007da8:	4ba1      	ldr	r3, [pc, #644]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007daa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- prismatic_axis.kalman_velocity;
 8007dae:	4ba0      	ldr	r3, [pc, #640]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007db0:	edd3 7a07 	vldr	s15, [r3, #28]
 8007db4:	ee77 7a67 	vsub.f32	s15, s14, s15
		prismatic_axis.vel_error = prismatic_axis.command_vel
 8007db8:	4b9d      	ldr	r3, [pc, #628]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007dba:	edc3 7a06 	vstr	s15, [r3, #24]
		prismatic_axis.command_pos = PWM_Satuation(
 8007dbe:	4b9c      	ldr	r3, [pc, #624]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007dc0:	edd3 7a06 	vldr	s15, [r3, #24]
 8007dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8007dc8:	489d      	ldr	r0, [pc, #628]	@ (8008040 <update_joy_mode_velocity_control+0x610>)
 8007dca:	f7f9 fa25 	bl	8001218 <PID_CONTROLLER_Compute>
 8007dce:	eeb0 8a40 	vmov.f32	s16, s0
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						prismatic_axis.vel_error),
				ZGX45RGG_400RPM_Constant.U_max,
 8007dd2:	4b9a      	ldr	r3, [pc, #616]	@ (800803c <update_joy_mode_velocity_control+0x60c>)
 8007dd4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
		prismatic_axis.command_pos = PWM_Satuation(
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4619      	mov	r1, r3
 8007ddc:	f7f8 fe72 	bl	8000ac4 <__aeabi_d2iz>
 8007de0:	4604      	mov	r4, r0
				-ZGX45RGG_400RPM_Constant.U_max);
 8007de2:	4b96      	ldr	r3, [pc, #600]	@ (800803c <update_joy_mode_velocity_control+0x60c>)
 8007de4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007de8:	4615      	mov	r5, r2
 8007dea:	f083 4600 	eor.w	r6, r3, #2147483648	@ 0x80000000
		prismatic_axis.command_pos = PWM_Satuation(
 8007dee:	4628      	mov	r0, r5
 8007df0:	4631      	mov	r1, r6
 8007df2:	f7f8 fe67 	bl	8000ac4 <__aeabi_d2iz>
 8007df6:	4603      	mov	r3, r0
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	eeb0 0a48 	vmov.f32	s0, s16
 8007e00:	f7f9 f9a8 	bl	8001154 <PWM_Satuation>
 8007e04:	ee07 0a90 	vmov	s15, r0
 8007e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e0c:	4b88      	ldr	r3, [pc, #544]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007e0e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// No feedforward when holding position
		prismatic_axis.ffd = 0.0f;
 8007e12:	4b87      	ldr	r3, [pc, #540]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	631a      	str	r2, [r3, #48]	@ 0x30
		prismatic_axis.dfd = 0.0f;
 8007e1a:	4b85      	ldr	r3, [pc, #532]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Update previous state for next iteration
	pris_was_moving = pris_moving;
 8007e22:	4a88      	ldr	r2, [pc, #544]	@ (8008044 <update_joy_mode_velocity_control+0x614>)
 8007e24:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e28:	7013      	strb	r3, [r2, #0]

	prismatic_axis.command_pos += prismatic_axis.ffd + prismatic_axis.dfd;
 8007e2a:	4b81      	ldr	r3, [pc, #516]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007e2c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8007e30:	4b7f      	ldr	r3, [pc, #508]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007e32:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8007e36:	4b7e      	ldr	r3, [pc, #504]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007e38:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007e3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e44:	4b7a      	ldr	r3, [pc, #488]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007e46:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007e4a:	4b79      	ldr	r3, [pc, #484]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007e4c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007e50:	4b7a      	ldr	r3, [pc, #488]	@ (800803c <update_joy_mode_velocity_control+0x60c>)
 8007e52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007e56:	4610      	mov	r0, r2
 8007e58:	4619      	mov	r1, r3
 8007e5a:	f7f8 fe33 	bl	8000ac4 <__aeabi_d2iz>
 8007e5e:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.U_max, -ZGX45RGG_400RPM_Constant.U_max);
 8007e60:	4b76      	ldr	r3, [pc, #472]	@ (800803c <update_joy_mode_velocity_control+0x60c>)
 8007e62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007e66:	4692      	mov	sl, r2
 8007e68:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
	prismatic_axis.command_pos = PWM_Satuation(prismatic_axis.command_pos,
 8007e6c:	4650      	mov	r0, sl
 8007e6e:	4659      	mov	r1, fp
 8007e70:	f7f8 fe28 	bl	8000ac4 <__aeabi_d2iz>
 8007e74:	4603      	mov	r3, r0
 8007e76:	4619      	mov	r1, r3
 8007e78:	4620      	mov	r0, r4
 8007e7a:	eeb0 0a48 	vmov.f32	s0, s16
 8007e7e:	f7f9 f969 	bl	8001154 <PWM_Satuation>
 8007e82:	ee07 0a90 	vmov	s15, r0
 8007e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e8a:	4b69      	ldr	r3, [pc, #420]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007e8c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	/* REVOLUTE AXIS CONTROL - SIMPLIFIED PURE PWM WITH FFD + DFD */
	float base_pwm = 0.0f;
 8007e90:	f04f 0300 	mov.w	r3, #0
 8007e94:	61fb      	str	r3, [r7, #28]

	if (rev_moving) {
 8007e96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d02e      	beq.n	8007efc <update_joy_mode_velocity_control+0x4cc>
		// Calculate base PWM proportional to joystick input
		// Scale joystick input (-50 to +50) to PWM range
		float joystick_normalized = joystick_y / 50.0f; // -1.0 to +1.0
 8007e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8008048 <update_joy_mode_velocity_control+0x618>)
 8007ea0:	ed93 7a00 	vldr	s14, [r3]
 8007ea4:	eddf 6a69 	vldr	s13, [pc, #420]	@ 800804c <update_joy_mode_velocity_control+0x61c>
 8007ea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007eac:	edc7 7a04 	vstr	s15, [r7, #16]
		base_pwm = joystick_normalized
				* (ZGX45RGG_150RPM_Constant.U_max * 0.3f); // Limit to 30% max PWM for safety
 8007eb0:	6938      	ldr	r0, [r7, #16]
 8007eb2:	f7f8 fb15 	bl	80004e0 <__aeabi_f2d>
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	460d      	mov	r5, r1
 8007eba:	4b65      	ldr	r3, [pc, #404]	@ (8008050 <update_joy_mode_velocity_control+0x620>)
 8007ebc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8007ec0:	a359      	add	r3, pc, #356	@ (adr r3, 8008028 <update_joy_mode_velocity_control+0x5f8>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 fb63 	bl	8000590 <__aeabi_dmul>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	460b      	mov	r3, r1
 8007ece:	4620      	mov	r0, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7f8 fb5d 	bl	8000590 <__aeabi_dmul>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
		base_pwm = joystick_normalized
 8007eda:	4610      	mov	r0, r2
 8007edc:	4619      	mov	r1, r3
 8007ede:	f7f8 fe39 	bl	8000b54 <__aeabi_d2f>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	61fb      	str	r3, [r7, #28]

		// Add velocity feedforward
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 8007ee6:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8007eea:	485a      	ldr	r0, [pc, #360]	@ (8008054 <update_joy_mode_velocity_control+0x624>)
 8007eec:	f7f9 fb32 	bl	8001554 <REVOLUTE_MOTOR_FFD_Compute>
 8007ef0:	eef0 7a40 	vmov.f32	s15, s0
 8007ef4:	4b58      	ldr	r3, [pc, #352]	@ (8008058 <update_joy_mode_velocity_control+0x628>)
 8007ef6:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 8007efa:	e006      	b.n	8007f0a <update_joy_mode_velocity_control+0x4da>
				rev_command_vel);
	} else {
		// Joystick released - no base PWM, only compensation
		base_pwm = 0.0f;
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	61fb      	str	r3, [r7, #28]
		revolute_axis.ffd = 0.0f;
 8007f02:	4b55      	ldr	r3, [pc, #340]	@ (8008058 <update_joy_mode_velocity_control+0x628>)
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	631a      	str	r2, [r3, #48]	@ 0x30
	}

	// Always add gravity/disturbance compensation
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007f0a:	4b54      	ldr	r3, [pc, #336]	@ (800805c <update_joy_mode_velocity_control+0x62c>)
 8007f0c:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
			revolute_encoder.rads, prismatic_encoder.mm / 1000.0f);
 8007f10:	4b48      	ldr	r3, [pc, #288]	@ (8008034 <update_joy_mode_velocity_control+0x604>)
 8007f12:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 8007f16:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8008060 <update_joy_mode_velocity_control+0x630>
 8007f1a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007f1e:	eef0 0a66 	vmov.f32	s1, s13
 8007f22:	eeb0 0a47 	vmov.f32	s0, s14
 8007f26:	484f      	ldr	r0, [pc, #316]	@ (8008064 <update_joy_mode_velocity_control+0x634>)
 8007f28:	f7f9 fba7 	bl	800167a <REVOLUTE_MOTOR_DFD_Compute>
 8007f2c:	eef0 7a40 	vmov.f32	s15, s0
 8007f30:	4b49      	ldr	r3, [pc, #292]	@ (8008058 <update_joy_mode_velocity_control+0x628>)
 8007f32:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// Apply filtering to feedforward terms for stability
	static float ffd_filtered = 0.0f;
	static float dfd_filtered = 0.0f;

	ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8007f36:	4b4c      	ldr	r3, [pc, #304]	@ (8008068 <update_joy_mode_velocity_control+0x638>)
 8007f38:	edd3 7a00 	vldr	s15, [r3]
 8007f3c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800806c <update_joy_mode_velocity_control+0x63c>
 8007f40:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007f44:	4b44      	ldr	r3, [pc, #272]	@ (8008058 <update_joy_mode_velocity_control+0x628>)
 8007f46:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8007f4a:	eddf 6a49 	vldr	s13, [pc, #292]	@ 8008070 <update_joy_mode_velocity_control+0x640>
 8007f4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f56:	4b44      	ldr	r3, [pc, #272]	@ (8008068 <update_joy_mode_velocity_control+0x638>)
 8007f58:	edc3 7a00 	vstr	s15, [r3]
	dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8007f5c:	4b45      	ldr	r3, [pc, #276]	@ (8008074 <update_joy_mode_velocity_control+0x644>)
 8007f5e:	edd3 7a00 	vldr	s15, [r3]
 8007f62:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 800806c <update_joy_mode_velocity_control+0x63c>
 8007f66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8008058 <update_joy_mode_velocity_control+0x628>)
 8007f6c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8007f70:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8008070 <update_joy_mode_velocity_control+0x640>
 8007f74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8008074 <update_joy_mode_velocity_control+0x644>)
 8007f7e:	edc3 7a00 	vstr	s15, [r3]

	// Combine base PWM with feedforward compensation
	revolute_axis.command_pos = base_pwm
			+ 0.01f * (ffd_filtered + dfd_filtered);
 8007f82:	4b39      	ldr	r3, [pc, #228]	@ (8008068 <update_joy_mode_velocity_control+0x638>)
 8007f84:	ed93 7a00 	vldr	s14, [r3]
 8007f88:	4b3a      	ldr	r3, [pc, #232]	@ (8008074 <update_joy_mode_velocity_control+0x644>)
 8007f8a:	edd3 7a00 	vldr	s15, [r3]
 8007f8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007f92:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8008078 <update_joy_mode_velocity_control+0x648>
 8007f96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007f9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8007f9e:	ee77 7a27 	vadd.f32	s15, s14, s15
	revolute_axis.command_pos = base_pwm
 8007fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8008058 <update_joy_mode_velocity_control+0x628>)
 8007fa4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Saturate final command
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007fa8:	4b2b      	ldr	r3, [pc, #172]	@ (8008058 <update_joy_mode_velocity_control+0x628>)
 8007faa:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007fae:	4b28      	ldr	r3, [pc, #160]	@ (8008050 <update_joy_mode_velocity_control+0x620>)
 8007fb0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	f7f8 fd84 	bl	8000ac4 <__aeabi_d2iz>
 8007fbc:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8007fbe:	4b24      	ldr	r3, [pc, #144]	@ (8008050 <update_joy_mode_velocity_control+0x620>)
 8007fc0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007fc4:	4690      	mov	r8, r2
 8007fc6:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 8007fca:	4640      	mov	r0, r8
 8007fcc:	4649      	mov	r1, r9
 8007fce:	f7f8 fd79 	bl	8000ac4 <__aeabi_d2iz>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	4620      	mov	r0, r4
 8007fd8:	eeb0 0a48 	vmov.f32	s0, s16
 8007fdc:	f7f9 f8ba 	bl	8001154 <PWM_Satuation>
 8007fe0:	ee07 0a90 	vmov	s15, r0
 8007fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007fe8:	4b1b      	ldr	r3, [pc, #108]	@ (8008058 <update_joy_mode_velocity_control+0x628>)
 8007fea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	// Apply motor commands
	MDXX_set_range(&prismatic_motor, 2000, prismatic_axis.command_pos);
 8007fee:	4b10      	ldr	r3, [pc, #64]	@ (8008030 <update_joy_mode_velocity_control+0x600>)
 8007ff0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8007ff4:	eef0 0a67 	vmov.f32	s1, s15
 8007ff8:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 800807c <update_joy_mode_velocity_control+0x64c>
 8007ffc:	4820      	ldr	r0, [pc, #128]	@ (8008080 <update_joy_mode_velocity_control+0x650>)
 8007ffe:	f7f9 f9c1 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8008002:	4b15      	ldr	r3, [pc, #84]	@ (8008058 <update_joy_mode_velocity_control+0x628>)
 8008004:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008008:	eef0 0a67 	vmov.f32	s1, s15
 800800c:	ed9f 0a1b 	vldr	s0, [pc, #108]	@ 800807c <update_joy_mode_velocity_control+0x64c>
 8008010:	481c      	ldr	r0, [pc, #112]	@ (8008084 <update_joy_mode_velocity_control+0x654>)
 8008012:	f7f9 f9b7 	bl	8001384 <MDXX_set_range>
}
 8008016:	bf00      	nop
 8008018:	3734      	adds	r7, #52	@ 0x34
 800801a:	46bd      	mov	sp, r7
 800801c:	ecbd 8b02 	vpop	{d8}
 8008020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008024:	f3af 8000 	nop.w
 8008028:	40000000 	.word	0x40000000
 800802c:	3fd33333 	.word	0x3fd33333
 8008030:	200006fc 	.word	0x200006fc
 8008034:	2000097c 	.word	0x2000097c
 8008038:	20000a34 	.word	0x20000a34
 800803c:	20000080 	.word	0x20000080
 8008040:	20000a5c 	.word	0x20000a5c
 8008044:	200008d0 	.word	0x200008d0
 8008048:	20001e50 	.word	0x20001e50
 800804c:	42480000 	.word	0x42480000
 8008050:	20000000 	.word	0x20000000
 8008054:	20000b08 	.word	0x20000b08
 8008058:	20000740 	.word	0x20000740
 800805c:	200009d8 	.word	0x200009d8
 8008060:	447a0000 	.word	0x447a0000
 8008064:	20000b0c 	.word	0x20000b0c
 8008068:	200008d4 	.word	0x200008d4
 800806c:	3f4ccccd 	.word	0x3f4ccccd
 8008070:	3e4ccccd 	.word	0x3e4ccccd
 8008074:	200008d8 	.word	0x200008d8
 8008078:	3c23d70a 	.word	0x3c23d70a
 800807c:	44fa0000 	.word	0x44fa0000
 8008080:	200008e4 	.word	0x200008e4
 8008084:	20000930 	.word	0x20000930

08008088 <update_joy_mode_pilot_light>:

void update_joy_mode_pilot_light(void) {
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
	if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 800808c:	4b14      	ldr	r3, [pc, #80]	@ (80080e0 <update_joy_mode_pilot_light+0x58>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	2b03      	cmp	r3, #3
 8008092:	d122      	bne.n	80080da <update_joy_mode_pilot_light+0x52>
		// Toggle pilot light every 1 second when 10 positions are saved
		joy_mode_pilot_timer++;
 8008094:	4b13      	ldr	r3, [pc, #76]	@ (80080e4 <update_joy_mode_pilot_light+0x5c>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3301      	adds	r3, #1
 800809a:	4a12      	ldr	r2, [pc, #72]	@ (80080e4 <update_joy_mode_pilot_light+0x5c>)
 800809c:	6013      	str	r3, [r2, #0]
		if (joy_mode_pilot_timer >= JOY_MODE_PILOT_TOGGLE_PERIOD) {
 800809e:	4b11      	ldr	r3, [pc, #68]	@ (80080e4 <update_joy_mode_pilot_light+0x5c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080a6:	d318      	bcc.n	80080da <update_joy_mode_pilot_light+0x52>
			HAL_GPIO_TogglePin(PILOT_GPIO_Port, PILOT_Pin);
 80080a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80080ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80080b0:	f004 ffd6 	bl	800d060 <HAL_GPIO_TogglePin>
			joy_mode_pilot_state = !joy_mode_pilot_state;
 80080b4:	4b0c      	ldr	r3, [pc, #48]	@ (80080e8 <update_joy_mode_pilot_light+0x60>)
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	bf14      	ite	ne
 80080be:	2301      	movne	r3, #1
 80080c0:	2300      	moveq	r3, #0
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	f083 0301 	eor.w	r3, r3, #1
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	4b05      	ldr	r3, [pc, #20]	@ (80080e8 <update_joy_mode_pilot_light+0x60>)
 80080d2:	701a      	strb	r2, [r3, #0]
			joy_mode_pilot_timer = 0;
 80080d4:	4b03      	ldr	r3, [pc, #12]	@ (80080e4 <update_joy_mode_pilot_light+0x5c>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]
		}
	}
}
 80080da:	bf00      	nop
 80080dc:	bd80      	pop	{r7, pc}
 80080de:	bf00      	nop
 80080e0:	200007fc 	.word	0x200007fc
 80080e4:	20000854 	.word	0x20000854
 80080e8:	20000858 	.word	0x20000858

080080ec <update_joy_mode>:

void update_joy_mode(void) {
 80080ec:	b590      	push	{r4, r7, lr}
 80080ee:	ed2d 8b02 	vpush	{d8}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
	if (!joy_mode_active) {
 80080f6:	4b93      	ldr	r3, [pc, #588]	@ (8008344 <update_joy_mode+0x258>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	f083 0301 	eor.w	r3, r3, #1
 80080fe:	b2db      	uxtb	r3, r3
 8008100:	2b00      	cmp	r3, #0
 8008102:	f040 81c6 	bne.w	8008492 <update_joy_mode+0x3a6>
		return;
	}

	// ALWAYS update position display values when in joy mode
	normalized_position = normalize_angle(revolute_encoder.rads);
 8008106:	4b90      	ldr	r3, [pc, #576]	@ (8008348 <update_joy_mode+0x25c>)
 8008108:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800810c:	eeb0 0a67 	vmov.f32	s0, s15
 8008110:	f7fe f82a 	bl	8006168 <normalize_angle>
 8008114:	eef0 7a40 	vmov.f32	s15, s0
 8008118:	4b8c      	ldr	r3, [pc, #560]	@ (800834c <update_joy_mode+0x260>)
 800811a:	edc3 7a00 	vstr	s15, [r3]
	prismatic_axis.mm = prismatic_encoder.mm;
 800811e:	4b8c      	ldr	r3, [pc, #560]	@ (8008350 <update_joy_mode+0x264>)
 8008120:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008122:	4a8c      	ldr	r2, [pc, #560]	@ (8008354 <update_joy_mode+0x268>)
 8008124:	6393      	str	r3, [r2, #56]	@ 0x38
	revolute_axis.deg = UnitConverter_angle(&converter_system,
 8008126:	4b89      	ldr	r3, [pc, #548]	@ (800834c <update_joy_mode+0x260>)
 8008128:	edd3 7a00 	vldr	s15, [r3]
 800812c:	220e      	movs	r2, #14
 800812e:	210f      	movs	r1, #15
 8008130:	eeb0 0a67 	vmov.f32	s0, s15
 8008134:	4888      	ldr	r0, [pc, #544]	@ (8008358 <update_joy_mode+0x26c>)
 8008136:	f7fc fd47 	bl	8004bc8 <UnitConverter_angle>
 800813a:	eef0 7a40 	vmov.f32	s15, s0
 800813e:	4b87      	ldr	r3, [pc, #540]	@ (800835c <update_joy_mode+0x270>)
 8008140:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);

	switch (joy_mode_state) {
 8008144:	4b86      	ldr	r3, [pc, #536]	@ (8008360 <update_joy_mode+0x274>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	3b01      	subs	r3, #1
 800814a:	2b04      	cmp	r3, #4
 800814c:	f200 81a3 	bhi.w	8008496 <update_joy_mode+0x3aa>
 8008150:	a201      	add	r2, pc, #4	@ (adr r2, 8008158 <update_joy_mode+0x6c>)
 8008152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008156:	bf00      	nop
 8008158:	0800816d 	.word	0x0800816d
 800815c:	08008173 	.word	0x08008173
 8008160:	08008179 	.word	0x08008179
 8008164:	08008187 	.word	0x08008187
 8008168:	0800848d 	.word	0x0800848d
	case JOY_MODE_INITIAL_CONTROL:
		// Initial manual joystick control - no position saving yet
		update_joy_mode_velocity_control();
 800816c:	f7ff fc60 	bl	8007a30 <update_joy_mode_velocity_control>
		break;
 8008170:	e194      	b.n	800849c <update_joy_mode+0x3b0>

	case JOY_MODE_MANUAL_CONTROL:
		// Manual joystick control with position saving enabled
		update_joy_mode_velocity_control();
 8008172:	f7ff fc5d 	bl	8007a30 <update_joy_mode_velocity_control>
		break;
 8008176:	e191      	b.n	800849c <update_joy_mode+0x3b0>

	case JOY_MODE_POSITION_SAVED:
		revolute_axis.position = revolute_encoder.rads;
 8008178:	4b73      	ldr	r3, [pc, #460]	@ (8008348 <update_joy_mode+0x25c>)
 800817a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800817c:	4a77      	ldr	r2, [pc, #476]	@ (800835c <update_joy_mode+0x270>)
 800817e:	6013      	str	r3, [r2, #0]
		// 10 positions saved, pilot light toggling, waiting for B2 to start playback
		update_joy_mode_pilot_light();
 8008180:	f7ff ff82 	bl	8008088 <update_joy_mode_pilot_light>
		break;
 8008184:	e18a      	b.n	800849c <update_joy_mode+0x3b0>

	case JOY_MODE_PLAYBACK:
//		revolute_axis.position = revolute_encoder.rads;
		// Playing back saved positions - PILOT LIGHT STAYS ON
		// Handle trajectory sequence states for joy mode playback
		switch (motion_sequence_state) {
 8008186:	4b77      	ldr	r3, [pc, #476]	@ (8008364 <update_joy_mode+0x278>)
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b06      	cmp	r3, #6
 800818c:	f200 8166 	bhi.w	800845c <update_joy_mode+0x370>
 8008190:	a201      	add	r2, pc, #4	@ (adr r2, 8008198 <update_joy_mode+0xac>)
 8008192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008196:	bf00      	nop
 8008198:	080081b5 	.word	0x080081b5
 800819c:	0800823d 	.word	0x0800823d
 80081a0:	08008261 	.word	0x08008261
 80081a4:	0800839d 	.word	0x0800839d
 80081a8:	0800845d 	.word	0x0800845d
 80081ac:	08008437 	.word	0x08008437
 80081b0:	08008455 	.word	0x08008455
		case MOTION_IDLE:
			// Current trajectory finished, wait before starting next

			joy_mode_playback_timer++;
 80081b4:	4b6c      	ldr	r3, [pc, #432]	@ (8008368 <update_joy_mode+0x27c>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	3301      	adds	r3, #1
 80081ba:	4a6b      	ldr	r2, [pc, #428]	@ (8008368 <update_joy_mode+0x27c>)
 80081bc:	6013      	str	r3, [r2, #0]
			if (joy_mode_playback_timer >= JOY_MODE_PLAYBACK_DELAY) {
 80081be:	4b6a      	ldr	r3, [pc, #424]	@ (8008368 <update_joy_mode+0x27c>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80081c6:	f0c0 814b 	bcc.w	8008460 <update_joy_mode+0x374>
				playback_position_index++;
 80081ca:	4b68      	ldr	r3, [pc, #416]	@ (800836c <update_joy_mode+0x280>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	3301      	adds	r3, #1
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	4b66      	ldr	r3, [pc, #408]	@ (800836c <update_joy_mode+0x280>)
 80081d4:	701a      	strb	r2, [r3, #0]
				if (playback_position_index < saved_position_count) {
 80081d6:	4b65      	ldr	r3, [pc, #404]	@ (800836c <update_joy_mode+0x280>)
 80081d8:	781a      	ldrb	r2, [r3, #0]
 80081da:	4b65      	ldr	r3, [pc, #404]	@ (8008370 <update_joy_mode+0x284>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d229      	bcs.n	8008236 <update_joy_mode+0x14a>
					// Start next trajectory
					float target_pris =
							saved_positions[playback_position_index].prismatic_pos;
 80081e2:	4b62      	ldr	r3, [pc, #392]	@ (800836c <update_joy_mode+0x280>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
					float target_pris =
 80081e6:	4a63      	ldr	r2, [pc, #396]	@ (8008374 <update_joy_mode+0x288>)
 80081e8:	00db      	lsls	r3, r3, #3
 80081ea:	4413      	add	r3, r2
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60fb      	str	r3, [r7, #12]
					float target_rev_rad =
							saved_positions[playback_position_index].revolute_pos;
 80081f0:	4b5e      	ldr	r3, [pc, #376]	@ (800836c <update_joy_mode+0x280>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
					float target_rev_rad =
 80081f4:	4a5f      	ldr	r2, [pc, #380]	@ (8008374 <update_joy_mode+0x288>)
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	4413      	add	r3, r2
 80081fa:	3304      	adds	r3, #4
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	60bb      	str	r3, [r7, #8]
					float target_rev_deg = target_rev_rad * 180.0f / PI;
 8008200:	edd7 7a02 	vldr	s15, [r7, #8]
 8008204:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8008378 <update_joy_mode+0x28c>
 8008208:	ee27 7a87 	vmul.f32	s14, s15, s14
 800820c:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 800837c <update_joy_mode+0x290>
 8008210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008214:	edc7 7a01 	vstr	s15, [r7, #4]
					check[1]++;
 8008218:	4b59      	ldr	r3, [pc, #356]	@ (8008380 <update_joy_mode+0x294>)
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	3301      	adds	r3, #1
 800821e:	4a58      	ldr	r2, [pc, #352]	@ (8008380 <update_joy_mode+0x294>)
 8008220:	6053      	str	r3, [r2, #4]
					start_combined_trajectory(target_pris, target_rev_deg);
 8008222:	edd7 0a01 	vldr	s1, [r7, #4]
 8008226:	ed97 0a03 	vldr	s0, [r7, #12]
 800822a:	f7fe f887 	bl	800633c <start_combined_trajectory>
					joy_mode_playback_timer = 0;
 800822e:	4b4e      	ldr	r3, [pc, #312]	@ (8008368 <update_joy_mode+0x27c>)
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]

					// Optional: Add some indication that playback is complete
					// You could flash the pilot light or set a status flag here
				}
			}
			break;
 8008234:	e114      	b.n	8008460 <update_joy_mode+0x374>
					exit_joy_mode();
 8008236:	f7ff fa41 	bl	80076bc <exit_joy_mode>
			break;
 800823a:	e111      	b.n	8008460 <update_joy_mode+0x374>

		case MOTION_PEN_UP_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 800823c:	4b51      	ldr	r3, [pc, #324]	@ (8008384 <update_joy_mode+0x298>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	4a50      	ldr	r2, [pc, #320]	@ (8008384 <update_joy_mode+0x298>)
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	f240 52db 	movw	r2, #1499	@ 0x5db
 800824a:	4293      	cmp	r3, r2
 800824c:	f240 810a 	bls.w	8008464 <update_joy_mode+0x378>
				prismatic_axis.trajectory_active = true;
 8008250:	4b40      	ldr	r3, [pc, #256]	@ (8008354 <update_joy_mode+0x268>)
 8008252:	2201      	movs	r2, #1
 8008254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				motion_sequence_state = MOTION_PRISMATIC_ACTIVE;
 8008258:	4b42      	ldr	r3, [pc, #264]	@ (8008364 <update_joy_mode+0x278>)
 800825a:	2202      	movs	r2, #2
 800825c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800825e:	e101      	b.n	8008464 <update_joy_mode+0x378>

		case MOTION_PRISMATIC_ACTIVE:

			if (prismatic_axis.trajectory_active && !prisEva.isFinised) {
 8008260:	4b3c      	ldr	r3, [pc, #240]	@ (8008354 <update_joy_mode+0x268>)
 8008262:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 80fe 	beq.w	8008468 <update_joy_mode+0x37c>
 800826c:	4b46      	ldr	r3, [pc, #280]	@ (8008388 <update_joy_mode+0x29c>)
 800826e:	7c1b      	ldrb	r3, [r3, #16]
 8008270:	f083 0301 	eor.w	r3, r3, #1
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	f000 80f6 	beq.w	8008468 <update_joy_mode+0x37c>
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 800827c:	4b35      	ldr	r3, [pc, #212]	@ (8008354 <update_joy_mode+0x268>)
 800827e:	ed93 8a03 	vldr	s16, [r3, #12]
 8008282:	4b34      	ldr	r3, [pc, #208]	@ (8008354 <update_joy_mode+0x268>)
 8008284:	edd3 8a04 	vldr	s17, [r3, #16]
						prismatic_axis.initial_pos, prismatic_axis.target_pos,
						ZGX45RGG_400RPM_Constant.traject_sd_max,
 8008288:	4b40      	ldr	r3, [pc, #256]	@ (800838c <update_joy_mode+0x2a0>)
 800828a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 800828e:	4610      	mov	r0, r2
 8008290:	4619      	mov	r1, r3
 8008292:	f7f8 fc5f 	bl	8000b54 <__aeabi_d2f>
 8008296:	4604      	mov	r4, r0
						ZGX45RGG_400RPM_Constant.traject_sdd_max);
 8008298:	4b3c      	ldr	r3, [pc, #240]	@ (800838c <update_joy_mode+0x2a0>)
 800829a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
				Trapezoidal_Evaluated(&prisGen, &prisEva,
 800829e:	4610      	mov	r0, r2
 80082a0:	4619      	mov	r1, r3
 80082a2:	f7f8 fc57 	bl	8000b54 <__aeabi_d2f>
 80082a6:	4603      	mov	r3, r0
 80082a8:	ee01 3a90 	vmov	s3, r3
 80082ac:	ee01 4a10 	vmov	s2, r4
 80082b0:	eef0 0a68 	vmov.f32	s1, s17
 80082b4:	eeb0 0a48 	vmov.f32	s0, s16
 80082b8:	4933      	ldr	r1, [pc, #204]	@ (8008388 <update_joy_mode+0x29c>)
 80082ba:	4835      	ldr	r0, [pc, #212]	@ (8008390 <update_joy_mode+0x2a4>)
 80082bc:	f7fc f8ec 	bl	8004498 <Trapezoidal_Evaluated>

				prismatic_axis.position = prisEva.setposition;
 80082c0:	4b31      	ldr	r3, [pc, #196]	@ (8008388 <update_joy_mode+0x29c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a23      	ldr	r2, [pc, #140]	@ (8008354 <update_joy_mode+0x268>)
 80082c6:	6013      	str	r3, [r2, #0]
				prismatic_axis.velocity = prisEva.setvelocity;
 80082c8:	4b2f      	ldr	r3, [pc, #188]	@ (8008388 <update_joy_mode+0x29c>)
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	4a21      	ldr	r2, [pc, #132]	@ (8008354 <update_joy_mode+0x268>)
 80082ce:	6053      	str	r3, [r2, #4]

				if (prisEva.isFinised) {
 80082d0:	4b2d      	ldr	r3, [pc, #180]	@ (8008388 <update_joy_mode+0x29c>)
 80082d2:	7c1b      	ldrb	r3, [r3, #16]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	f000 80c7 	beq.w	8008468 <update_joy_mode+0x37c>
					prismatic_axis.trajectory_active = false;
 80082da:	4b1e      	ldr	r3, [pc, #120]	@ (8008354 <update_joy_mode+0x268>)
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					prismatic_axis.position = prisEva.setposition;
 80082e2:	4b29      	ldr	r3, [pc, #164]	@ (8008388 <update_joy_mode+0x29c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008354 <update_joy_mode+0x268>)
 80082e8:	6013      	str	r3, [r2, #0]
					prismatic_axis.velocity = 0.0f;
 80082ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008354 <update_joy_mode+0x268>)
 80082ec:	f04f 0200 	mov.w	r2, #0
 80082f0:	605a      	str	r2, [r3, #4]

					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80082f2:	4b1a      	ldr	r3, [pc, #104]	@ (800835c <update_joy_mode+0x270>)
 80082f4:	ed93 8a03 	vldr	s16, [r3, #12]
 80082f8:	4b18      	ldr	r3, [pc, #96]	@ (800835c <update_joy_mode+0x270>)
 80082fa:	edd3 8a04 	vldr	s17, [r3, #16]
							revolute_axis.target_pos,
							ZGX45RGG_150RPM_Constant.traject_qd_max,
 80082fe:	4b25      	ldr	r3, [pc, #148]	@ (8008394 <update_joy_mode+0x2a8>)
 8008300:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8008304:	4610      	mov	r0, r2
 8008306:	4619      	mov	r1, r3
 8008308:	f7f8 fc24 	bl	8000b54 <__aeabi_d2f>
 800830c:	4604      	mov	r4, r0
							ZGX45RGG_150RPM_Constant.traject_qdd_max);
 800830e:	4b21      	ldr	r3, [pc, #132]	@ (8008394 <update_joy_mode+0x2a8>)
 8008310:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
					Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8008314:	4610      	mov	r0, r2
 8008316:	4619      	mov	r1, r3
 8008318:	f7f8 fc1c 	bl	8000b54 <__aeabi_d2f>
 800831c:	4603      	mov	r3, r0
 800831e:	ee01 3a90 	vmov	s3, r3
 8008322:	ee01 4a10 	vmov	s2, r4
 8008326:	eef0 0a68 	vmov.f32	s1, s17
 800832a:	eeb0 0a48 	vmov.f32	s0, s16
 800832e:	481a      	ldr	r0, [pc, #104]	@ (8008398 <update_joy_mode+0x2ac>)
 8008330:	f7fb fff0 	bl	8004314 <Trapezoidal_Generator>

					revolute_axis.trajectory_active = true;
 8008334:	4b09      	ldr	r3, [pc, #36]	@ (800835c <update_joy_mode+0x270>)
 8008336:	2201      	movs	r2, #1
 8008338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 800833c:	4b09      	ldr	r3, [pc, #36]	@ (8008364 <update_joy_mode+0x278>)
 800833e:	2203      	movs	r2, #3
 8008340:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8008342:	e091      	b.n	8008468 <update_joy_mode+0x37c>
 8008344:	200007fd 	.word	0x200007fd
 8008348:	200009d8 	.word	0x200009d8
 800834c:	200007f4 	.word	0x200007f4
 8008350:	2000097c 	.word	0x2000097c
 8008354:	200006fc 	.word	0x200006fc
 8008358:	20000d70 	.word	0x20000d70
 800835c:	20000740 	.word	0x20000740
 8008360:	200007fc 	.word	0x200007fc
 8008364:	20000784 	.word	0x20000784
 8008368:	2000085c 	.word	0x2000085c
 800836c:	20000851 	.word	0x20000851
 8008370:	20000850 	.word	0x20000850
 8008374:	20000800 	.word	0x20000800
 8008378:	43340000 	.word	0x43340000
 800837c:	40490fdb 	.word	0x40490fdb
 8008380:	20000864 	.word	0x20000864
 8008384:	200007d8 	.word	0x200007d8
 8008388:	200007b0 	.word	0x200007b0
 800838c:	20000080 	.word	0x20000080
 8008390:	20000788 	.word	0x20000788
 8008394:	20000000 	.word	0x20000000
 8008398:	2000079c 	.word	0x2000079c

		case MOTION_REVOLUTE_ACTIVE:
			if (revolute_axis.trajectory_active && !revEva.isFinised) {
 800839c:	4b42      	ldr	r3, [pc, #264]	@ (80084a8 <update_joy_mode+0x3bc>)
 800839e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d062      	beq.n	800846c <update_joy_mode+0x380>
 80083a6:	4b41      	ldr	r3, [pc, #260]	@ (80084ac <update_joy_mode+0x3c0>)
 80083a8:	7c1b      	ldrb	r3, [r3, #16]
 80083aa:	f083 0301 	eor.w	r3, r3, #1
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d05b      	beq.n	800846c <update_joy_mode+0x380>
				Trapezoidal_Evaluated(&revGen, &revEva,
 80083b4:	4b3c      	ldr	r3, [pc, #240]	@ (80084a8 <update_joy_mode+0x3bc>)
 80083b6:	ed93 8a03 	vldr	s16, [r3, #12]
 80083ba:	4b3b      	ldr	r3, [pc, #236]	@ (80084a8 <update_joy_mode+0x3bc>)
 80083bc:	edd3 8a04 	vldr	s17, [r3, #16]
						revolute_axis.initial_pos, revolute_axis.target_pos,
						ZGX45RGG_150RPM_Constant.traject_qd_max,
 80083c0:	4b3b      	ldr	r3, [pc, #236]	@ (80084b0 <update_joy_mode+0x3c4>)
 80083c2:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
				Trapezoidal_Evaluated(&revGen, &revEva,
 80083c6:	4610      	mov	r0, r2
 80083c8:	4619      	mov	r1, r3
 80083ca:	f7f8 fbc3 	bl	8000b54 <__aeabi_d2f>
 80083ce:	4604      	mov	r4, r0
						ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80083d0:	4b37      	ldr	r3, [pc, #220]	@ (80084b0 <update_joy_mode+0x3c4>)
 80083d2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
				Trapezoidal_Evaluated(&revGen, &revEva,
 80083d6:	4610      	mov	r0, r2
 80083d8:	4619      	mov	r1, r3
 80083da:	f7f8 fbbb 	bl	8000b54 <__aeabi_d2f>
 80083de:	4603      	mov	r3, r0
 80083e0:	ee01 3a90 	vmov	s3, r3
 80083e4:	ee01 4a10 	vmov	s2, r4
 80083e8:	eef0 0a68 	vmov.f32	s1, s17
 80083ec:	eeb0 0a48 	vmov.f32	s0, s16
 80083f0:	492e      	ldr	r1, [pc, #184]	@ (80084ac <update_joy_mode+0x3c0>)
 80083f2:	4830      	ldr	r0, [pc, #192]	@ (80084b4 <update_joy_mode+0x3c8>)
 80083f4:	f7fc f850 	bl	8004498 <Trapezoidal_Evaluated>

				revolute_axis.position = revEva.setposition;
 80083f8:	4b2c      	ldr	r3, [pc, #176]	@ (80084ac <update_joy_mode+0x3c0>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a2a      	ldr	r2, [pc, #168]	@ (80084a8 <update_joy_mode+0x3bc>)
 80083fe:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = revEva.setvelocity;
 8008400:	4b2a      	ldr	r3, [pc, #168]	@ (80084ac <update_joy_mode+0x3c0>)
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	4a28      	ldr	r2, [pc, #160]	@ (80084a8 <update_joy_mode+0x3bc>)
 8008406:	6053      	str	r3, [r2, #4]

				if (revEva.isFinised) {
 8008408:	4b28      	ldr	r3, [pc, #160]	@ (80084ac <update_joy_mode+0x3c0>)
 800840a:	7c1b      	ldrb	r3, [r3, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d02d      	beq.n	800846c <update_joy_mode+0x380>
					revolute_axis.trajectory_active = false;
 8008410:	4b25      	ldr	r3, [pc, #148]	@ (80084a8 <update_joy_mode+0x3bc>)
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
					revolute_axis.position = revEva.setposition;
 8008418:	4b24      	ldr	r3, [pc, #144]	@ (80084ac <update_joy_mode+0x3c0>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a22      	ldr	r2, [pc, #136]	@ (80084a8 <update_joy_mode+0x3bc>)
 800841e:	6013      	str	r3, [r2, #0]
					revolute_axis.velocity = 0.0f;
 8008420:	4b21      	ldr	r3, [pc, #132]	@ (80084a8 <update_joy_mode+0x3bc>)
 8008422:	f04f 0200 	mov.w	r2, #0
 8008426:	605a      	str	r2, [r3, #4]

//					PID_CONTROLLER_Reset(&revolute_position_pid);
//					PID_CONTROLLER_Reset(&revolute_velocity_pid);

					motion_delay_timer = 0;
 8008428:	4b23      	ldr	r3, [pc, #140]	@ (80084b8 <update_joy_mode+0x3cc>)
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
					motion_sequence_state = MOTION_PEN_DOWN_DELAY;
 800842e:	4b23      	ldr	r3, [pc, #140]	@ (80084bc <update_joy_mode+0x3d0>)
 8008430:	2205      	movs	r2, #5
 8008432:	701a      	strb	r2, [r3, #0]
				}
			}
			break;
 8008434:	e01a      	b.n	800846c <update_joy_mode+0x380>

		case MOTION_PEN_DOWN_DELAY:
			// INCREMENT motion_delay_timer here for joy mode
			if (++motion_delay_timer >= 1500) {
 8008436:	4b20      	ldr	r3, [pc, #128]	@ (80084b8 <update_joy_mode+0x3cc>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3301      	adds	r3, #1
 800843c:	4a1e      	ldr	r2, [pc, #120]	@ (80084b8 <update_joy_mode+0x3cc>)
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	f240 52db 	movw	r2, #1499	@ 0x5db
 8008444:	4293      	cmp	r3, r2
 8008446:	d913      	bls.n	8008470 <update_joy_mode+0x384>
				plotter_pen_down();
 8008448:	f001 faaa 	bl	80099a0 <plotter_pen_down>
				motion_sequence_state = MOTION_COMPLETE;
 800844c:	4b1b      	ldr	r3, [pc, #108]	@ (80084bc <update_joy_mode+0x3d0>)
 800844e:	2206      	movs	r2, #6
 8008450:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008452:	e00d      	b.n	8008470 <update_joy_mode+0x384>

		case MOTION_COMPLETE:
			motion_sequence_state = MOTION_IDLE;
 8008454:	4b19      	ldr	r3, [pc, #100]	@ (80084bc <update_joy_mode+0x3d0>)
 8008456:	2200      	movs	r2, #0
 8008458:	701a      	strb	r2, [r3, #0]
			break;
 800845a:	e00a      	b.n	8008472 <update_joy_mode+0x386>

		default:
			break;
 800845c:	bf00      	nop
 800845e:	e008      	b.n	8008472 <update_joy_mode+0x386>
			break;
 8008460:	bf00      	nop
 8008462:	e006      	b.n	8008472 <update_joy_mode+0x386>
			break;
 8008464:	bf00      	nop
 8008466:	e004      	b.n	8008472 <update_joy_mode+0x386>
			break;
 8008468:	bf00      	nop
 800846a:	e002      	b.n	8008472 <update_joy_mode+0x386>
			break;
 800846c:	bf00      	nop
 800846e:	e000      	b.n	8008472 <update_joy_mode+0x386>
			break;
 8008470:	bf00      	nop
		}

		// Update position/velocity control for trajectory playback
		if (motion_sequence_state != MOTION_IDLE) {
 8008472:	4b12      	ldr	r3, [pc, #72]	@ (80084bc <update_joy_mode+0x3d0>)
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00f      	beq.n	800849a <update_joy_mode+0x3ae>
			// Run position control if not in manual control
			if (position_control_tick >= POSITION_CONTROL_DIVIDER) {
 800847a:	4b11      	ldr	r3, [pc, #68]	@ (80084c0 <update_joy_mode+0x3d4>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2b09      	cmp	r3, #9
 8008480:	d901      	bls.n	8008486 <update_joy_mode+0x39a>
				update_position_control();
 8008482:	f7fe f96b 	bl	800675c <update_position_control>
			}
			// Always run velocity control during trajectory
			update_velocity_control();
 8008486:	f7fe fa27 	bl	80068d8 <update_velocity_control>
		}
		break;
 800848a:	e006      	b.n	800849a <update_joy_mode+0x3ae>

	case JOY_MODE_COMPLETE:
		exit_joy_mode();
 800848c:	f7ff f916 	bl	80076bc <exit_joy_mode>
		break;
 8008490:	e004      	b.n	800849c <update_joy_mode+0x3b0>
		return;
 8008492:	bf00      	nop
 8008494:	e002      	b.n	800849c <update_joy_mode+0x3b0>

	default:
		break;
 8008496:	bf00      	nop
 8008498:	e000      	b.n	800849c <update_joy_mode+0x3b0>
		break;
 800849a:	bf00      	nop
	}
}
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	ecbd 8b02 	vpop	{d8}
 80084a4:	bd90      	pop	{r4, r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000740 	.word	0x20000740
 80084ac:	200007c4 	.word	0x200007c4
 80084b0:	20000000 	.word	0x20000000
 80084b4:	2000079c 	.word	0x2000079c
 80084b8:	200007d8 	.word	0x200007d8
 80084bc:	20000784 	.word	0x20000784
 80084c0:	200007f0 	.word	0x200007f0

080084c4 <handle_b2_button_polling>:

void handle_b2_button_polling(void) {
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
	// Read current B2 button state (assuming active low like other buttons)
	bool b2_current_state = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 80084ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80084ce:	4835      	ldr	r0, [pc, #212]	@ (80085a4 <handle_b2_button_polling+0xe0>)
 80084d0:	f004 fd96 	bl	800d000 <HAL_GPIO_ReadPin>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	bf0c      	ite	eq
 80084da:	2301      	moveq	r3, #1
 80084dc:	2300      	movne	r3, #0
 80084de:	71fb      	strb	r3, [r7, #7]

//	b2S[0] = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
	static uint32_t last_press_time = 0;
	static uint32_t press_counter = 0;
	const uint32_t DEBOUNCE_TIME = 200; // 200ms debounce time
 80084e0:	23c8      	movs	r3, #200	@ 0xc8
 80084e2:	603b      	str	r3, [r7, #0]

	press_counter++; // Increment every timer tick (assuming 1ms timer)
 80084e4:	4b30      	ldr	r3, [pc, #192]	@ (80085a8 <handle_b2_button_polling+0xe4>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	3301      	adds	r3, #1
 80084ea:	4a2f      	ldr	r2, [pc, #188]	@ (80085a8 <handle_b2_button_polling+0xe4>)
 80084ec:	6013      	str	r3, [r2, #0]

//	 Edge detection with debouncing
	if (b2_current_state && !joy_mode_b2_last_state) {
 80084ee:	79fb      	ldrb	r3, [r7, #7]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d047      	beq.n	8008584 <handle_b2_button_polling+0xc0>
 80084f4:	4b2d      	ldr	r3, [pc, #180]	@ (80085ac <handle_b2_button_polling+0xe8>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f083 0301 	eor.w	r3, r3, #1
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d040      	beq.n	8008584 <handle_b2_button_polling+0xc0>
//	 Button just pressed - check if enough time has passed since last press
		if ((press_counter - last_press_time) >= DEBOUNCE_TIME) {
 8008502:	4b29      	ldr	r3, [pc, #164]	@ (80085a8 <handle_b2_button_polling+0xe4>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b2a      	ldr	r3, [pc, #168]	@ (80085b0 <handle_b2_button_polling+0xec>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	1ad3      	subs	r3, r2, r3
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d838      	bhi.n	8008584 <handle_b2_button_polling+0xc0>
			// Button press is valid - trigger action
			joy_mode_b2_pressed = true;
 8008512:	4b28      	ldr	r3, [pc, #160]	@ (80085b4 <handle_b2_button_polling+0xf0>)
 8008514:	2201      	movs	r2, #1
 8008516:	701a      	strb	r2, [r3, #0]
			last_press_time = press_counter;
 8008518:	4b23      	ldr	r3, [pc, #140]	@ (80085a8 <handle_b2_button_polling+0xe4>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a24      	ldr	r2, [pc, #144]	@ (80085b0 <handle_b2_button_polling+0xec>)
 800851e:	6013      	str	r3, [r2, #0]

//	if (b2S[0] != b2S[1] && b2S[0] == 1) {
			// Handle B2 button press logic
			if (!is_emergency_active() && !homing_active
 8008520:	f7ff f85e 	bl	80075e0 <is_emergency_active>
 8008524:	4603      	mov	r3, r0
 8008526:	f083 0301 	eor.w	r3, r3, #1
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	d029      	beq.n	8008584 <handle_b2_button_polling+0xc0>
 8008530:	4b21      	ldr	r3, [pc, #132]	@ (80085b8 <handle_b2_button_polling+0xf4>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	f083 0301 	eor.w	r3, r3, #1
 8008538:	b2db      	uxtb	r3, r3
 800853a:	2b00      	cmp	r3, #0
 800853c:	d022      	beq.n	8008584 <handle_b2_button_polling+0xc0>
					&& motion_sequence_state == MOTION_IDLE) {
 800853e:	4b1f      	ldr	r3, [pc, #124]	@ (80085bc <handle_b2_button_polling+0xf8>)
 8008540:	781b      	ldrb	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d11e      	bne.n	8008584 <handle_b2_button_polling+0xc0>
				if (!joy_mode_active) {
 8008546:	4b1e      	ldr	r3, [pc, #120]	@ (80085c0 <handle_b2_button_polling+0xfc>)
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	f083 0301 	eor.w	r3, r3, #1
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d002      	beq.n	800855a <handle_b2_button_polling+0x96>
					// Enter joy mode (starts in JOY_MODE_INITIAL_CONTROL)
					enter_joy_mode();
 8008554:	f7ff f854 	bl	8007600 <enter_joy_mode>
 8008558:	e014      	b.n	8008584 <handle_b2_button_polling+0xc0>
				} else {
					// Joy mode is active, handle button press based on current state
					if (joy_mode_state == JOY_MODE_INITIAL_CONTROL) {
 800855a:	4b1a      	ldr	r3, [pc, #104]	@ (80085c4 <handle_b2_button_polling+0x100>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d103      	bne.n	800856a <handle_b2_button_polling+0xa6>
						// First B2 press in joy mode - start position saving mode
						joy_mode_state = JOY_MODE_MANUAL_CONTROL;
 8008562:	4b18      	ldr	r3, [pc, #96]	@ (80085c4 <handle_b2_button_polling+0x100>)
 8008564:	2202      	movs	r2, #2
 8008566:	701a      	strb	r2, [r3, #0]
 8008568:	e00c      	b.n	8008584 <handle_b2_button_polling+0xc0>
					} else if (joy_mode_state == JOY_MODE_MANUAL_CONTROL) {
 800856a:	4b16      	ldr	r3, [pc, #88]	@ (80085c4 <handle_b2_button_polling+0x100>)
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b02      	cmp	r3, #2
 8008570:	d102      	bne.n	8008578 <handle_b2_button_polling+0xb4>

						save_current_position();
 8008572:	f7ff f917 	bl	80077a4 <save_current_position>
 8008576:	e005      	b.n	8008584 <handle_b2_button_polling+0xc0>

						// Save current position
					} else if (joy_mode_state == JOY_MODE_POSITION_SAVED) {
 8008578:	4b12      	ldr	r3, [pc, #72]	@ (80085c4 <handle_b2_button_polling+0x100>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	2b03      	cmp	r3, #3
 800857e:	d101      	bne.n	8008584 <handle_b2_button_polling+0xc0>
						start_position_playback();
 8008580:	f7ff f9c8 	bl	8007914 <start_position_playback>
//	b2S[1] = b2S[0];
		// If not enough time has passed, ignore this button press
	}

// Update last state
	joy_mode_b2_last_state = b2_current_state;
 8008584:	4a09      	ldr	r2, [pc, #36]	@ (80085ac <handle_b2_button_polling+0xe8>)
 8008586:	79fb      	ldrb	r3, [r7, #7]
 8008588:	7013      	strb	r3, [r2, #0]
//
//// Reset pressed flag when button is released
	if (!b2_current_state) {
 800858a:	79fb      	ldrb	r3, [r7, #7]
 800858c:	f083 0301 	eor.w	r3, r3, #1
 8008590:	b2db      	uxtb	r3, r3
 8008592:	2b00      	cmp	r3, #0
 8008594:	d002      	beq.n	800859c <handle_b2_button_polling+0xd8>
		joy_mode_b2_pressed = false;
 8008596:	4b07      	ldr	r3, [pc, #28]	@ (80085b4 <handle_b2_button_polling+0xf0>)
 8008598:	2200      	movs	r2, #0
 800859a:	701a      	strb	r2, [r3, #0]
	}
}
 800859c:	bf00      	nop
 800859e:	3708      	adds	r7, #8
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	48000800 	.word	0x48000800
 80085a8:	200008dc 	.word	0x200008dc
 80085ac:	20000861 	.word	0x20000861
 80085b0:	200008e0 	.word	0x200008e0
 80085b4:	20000860 	.word	0x20000860
 80085b8:	200007e3 	.word	0x200007e3
 80085bc:	20000784 	.word	0x20000784
 80085c0:	200007fd 	.word	0x200007fd
 80085c4:	200007fc 	.word	0x200007fc

080085c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == PROX_Pin) {
 80085d2:	88fb      	ldrh	r3, [r7, #6]
 80085d4:	2b40      	cmp	r3, #64	@ 0x40
 80085d6:	d105      	bne.n	80085e4 <HAL_GPIO_EXTI_Callback+0x1c>
		prox_count++;
 80085d8:	4b62      	ldr	r3, [pc, #392]	@ (8008764 <HAL_GPIO_EXTI_Callback+0x19c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3301      	adds	r3, #1
 80085de:	4a61      	ldr	r2, [pc, #388]	@ (8008764 <HAL_GPIO_EXTI_Callback+0x19c>)
 80085e0:	6013      	str	r3, [r2, #0]
		return;
 80085e2:	e0bc      	b.n	800875e <HAL_GPIO_EXTI_Callback+0x196>
	}

	if (GPIO_Pin == UPPER_PHOTO_Pin) {
 80085e4:	88fb      	ldrh	r3, [r7, #6]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d103      	bne.n	80085f2 <HAL_GPIO_EXTI_Callback+0x2a>
		up_photo = true;
 80085ea:	4b5f      	ldr	r3, [pc, #380]	@ (8008768 <HAL_GPIO_EXTI_Callback+0x1a0>)
 80085ec:	2201      	movs	r2, #1
 80085ee:	701a      	strb	r2, [r3, #0]
		return;
 80085f0:	e0b5      	b.n	800875e <HAL_GPIO_EXTI_Callback+0x196>
	}

	if (GPIO_Pin == LOWER_PHOTO_Pin) {
 80085f2:	88fb      	ldrh	r3, [r7, #6]
 80085f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085f8:	d103      	bne.n	8008602 <HAL_GPIO_EXTI_Callback+0x3a>
		low_photo = true;
 80085fa:	4b5c      	ldr	r3, [pc, #368]	@ (800876c <HAL_GPIO_EXTI_Callback+0x1a4>)
 80085fc:	2201      	movs	r2, #1
 80085fe:	701a      	strb	r2, [r3, #0]
		return;
 8008600:	e0ad      	b.n	800875e <HAL_GPIO_EXTI_Callback+0x196>
	}

	if (GPIO_Pin == EMER_Pin) {
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	2b10      	cmp	r3, #16
 8008606:	d102      	bne.n	800860e <HAL_GPIO_EXTI_Callback+0x46>
		trigger_hardware_emergency();
 8008608:	f7fe fed2 	bl	80073b0 <trigger_hardware_emergency>
		return;
 800860c:	e0a7      	b.n	800875e <HAL_GPIO_EXTI_Callback+0x196>
	}

	if (GPIO_Pin == J1_Pin) {
 800860e:	88fb      	ldrh	r3, [r7, #6]
 8008610:	2b80      	cmp	r3, #128	@ 0x80
 8008612:	d14a      	bne.n	80086aa <HAL_GPIO_EXTI_Callback+0xe2>

		uint32_t current_time = HAL_GetTick();
 8008614:	f002 faac 	bl	800ab70 <HAL_GetTick>
 8008618:	60f8      	str	r0, [r7, #12]
		if ((current_time - j1_interrupt_last_time) < 200) {
 800861a:	4b55      	ldr	r3, [pc, #340]	@ (8008770 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68fa      	ldr	r2, [r7, #12]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	2bc7      	cmp	r3, #199	@ 0xc7
 8008624:	f240 8096 	bls.w	8008754 <HAL_GPIO_EXTI_Callback+0x18c>
			return; // ignore ถ้ายังไม่ครบ 200ms
		}
		j1_interrupt_last_time = current_time;
 8008628:	4a51      	ldr	r2, [pc, #324]	@ (8008770 <HAL_GPIO_EXTI_Callback+0x1a8>)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	6013      	str	r3, [r2, #0]

		if (!is_emergency_active() && !homing_active && !joy_mode_active
 800862e:	f7fe ffd7 	bl	80075e0 <is_emergency_active>
 8008632:	4603      	mov	r3, r0
 8008634:	f083 0301 	eor.w	r3, r3, #1
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b00      	cmp	r3, #0
 800863c:	d035      	beq.n	80086aa <HAL_GPIO_EXTI_Callback+0xe2>
 800863e:	4b4d      	ldr	r3, [pc, #308]	@ (8008774 <HAL_GPIO_EXTI_Callback+0x1ac>)
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	f083 0301 	eor.w	r3, r3, #1
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b00      	cmp	r3, #0
 800864a:	d02e      	beq.n	80086aa <HAL_GPIO_EXTI_Callback+0xe2>
 800864c:	4b4a      	ldr	r3, [pc, #296]	@ (8008778 <HAL_GPIO_EXTI_Callback+0x1b0>)
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	f083 0301 	eor.w	r3, r3, #1
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d027      	beq.n	80086aa <HAL_GPIO_EXTI_Callback+0xe2>
				&& !first_startup) {
 800865a:	4b48      	ldr	r3, [pc, #288]	@ (800877c <HAL_GPIO_EXTI_Callback+0x1b4>)
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	f083 0301 	eor.w	r3, r3, #1
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d020      	beq.n	80086aa <HAL_GPIO_EXTI_Callback+0xe2>
			if (!j1_active) {
 8008668:	4b45      	ldr	r3, [pc, #276]	@ (8008780 <HAL_GPIO_EXTI_Callback+0x1b8>)
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	f083 0301 	eor.w	r3, r3, #1
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b00      	cmp	r3, #0
 8008674:	d013      	beq.n	800869e <HAL_GPIO_EXTI_Callback+0xd6>
				// start Again
				j1_active = true;
 8008676:	4b42      	ldr	r3, [pc, #264]	@ (8008780 <HAL_GPIO_EXTI_Callback+0x1b8>)
 8008678:	2201      	movs	r2, #1
 800867a:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 800867c:	4b41      	ldr	r3, [pc, #260]	@ (8008784 <HAL_GPIO_EXTI_Callback+0x1bc>)
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]
				j1_going_to_target = true;
 8008682:	4b41      	ldr	r3, [pc, #260]	@ (8008788 <HAL_GPIO_EXTI_Callback+0x1c0>)
 8008684:	2201      	movs	r2, #1
 8008686:	701a      	strb	r2, [r3, #0]

				// go to target
				start_combined_trajectory(J1_TARGET_PRIS, J1_TARGET_REV);
 8008688:	eddf 7a40 	vldr	s15, [pc, #256]	@ 800878c <HAL_GPIO_EXTI_Callback+0x1c4>
 800868c:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 8008790 <HAL_GPIO_EXTI_Callback+0x1c8>
 8008690:	eef0 0a47 	vmov.f32	s1, s14
 8008694:	eeb0 0a67 	vmov.f32	s0, s15
 8008698:	f7fd fe50 	bl	800633c <start_combined_trajectory>
 800869c:	e005      	b.n	80086aa <HAL_GPIO_EXTI_Callback+0xe2>
			} else {
				// stop

				j1_active = false;
 800869e:	4b38      	ldr	r3, [pc, #224]	@ (8008780 <HAL_GPIO_EXTI_Callback+0x1b8>)
 80086a0:	2200      	movs	r2, #0
 80086a2:	701a      	strb	r2, [r3, #0]
				j1_cycle_count = 0;
 80086a4:	4b37      	ldr	r3, [pc, #220]	@ (8008784 <HAL_GPIO_EXTI_Callback+0x1bc>)
 80086a6:	2200      	movs	r2, #0
 80086a8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
// J2 is NOT handled here anymore - it's polled in the main loop

	if (GPIO_Pin == J3_Pin) {
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086b0:	d13a      	bne.n	8008728 <HAL_GPIO_EXTI_Callback+0x160>
		uint32_t current_time = HAL_GetTick();
 80086b2:	f002 fa5d 	bl	800ab70 <HAL_GetTick>
 80086b6:	60b8      	str	r0, [r7, #8]

		// Reset counter if timeout exceeded
		if ((current_time - j3_last_press_time) > J3_PRESS_TIMEOUT) {
 80086b8:	4b36      	ldr	r3, [pc, #216]	@ (8008794 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68ba      	ldr	r2, [r7, #8]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d902      	bls.n	80086ce <HAL_GPIO_EXTI_Callback+0x106>
			j3_press_count = 0;
 80086c8:	4b33      	ldr	r3, [pc, #204]	@ (8008798 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80086ca:	2200      	movs	r2, #0
 80086cc:	701a      	strb	r2, [r3, #0]
		}

		j3_last_press_time = current_time;
 80086ce:	4a31      	ldr	r2, [pc, #196]	@ (8008794 <HAL_GPIO_EXTI_Callback+0x1cc>)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	6013      	str	r3, [r2, #0]
		j3_press_count++;
 80086d4:	4b30      	ldr	r3, [pc, #192]	@ (8008798 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	3301      	adds	r3, #1
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	4b2e      	ldr	r3, [pc, #184]	@ (8008798 <HAL_GPIO_EXTI_Callback+0x1d0>)
 80086de:	701a      	strb	r2, [r3, #0]

		if (!is_emergency_active() && !joy_mode_active
 80086e0:	f7fe ff7e 	bl	80075e0 <is_emergency_active>
 80086e4:	4603      	mov	r3, r0
 80086e6:	f083 0301 	eor.w	r3, r3, #1
 80086ea:	b2db      	uxtb	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d033      	beq.n	8008758 <HAL_GPIO_EXTI_Callback+0x190>
 80086f0:	4b21      	ldr	r3, [pc, #132]	@ (8008778 <HAL_GPIO_EXTI_Callback+0x1b0>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	f083 0301 	eor.w	r3, r3, #1
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d02c      	beq.n	8008758 <HAL_GPIO_EXTI_Callback+0x190>
				&& motion_sequence_state == MOTION_IDLE) {
 80086fe:	4b27      	ldr	r3, [pc, #156]	@ (800879c <HAL_GPIO_EXTI_Callback+0x1d4>)
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d128      	bne.n	8008758 <HAL_GPIO_EXTI_Callback+0x190>
			switch (j3_press_count) {
 8008706:	4b24      	ldr	r3, [pc, #144]	@ (8008798 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8008708:	781b      	ldrb	r3, [r3, #0]
 800870a:	2b01      	cmp	r3, #1
 800870c:	d105      	bne.n	800871a <HAL_GPIO_EXTI_Callback+0x152>
			case 1:
				// กดครั้งแรก: วาดคำ FIBO_G01
				start_word_FIBO_G01();
 800870e:	f000 fbed 	bl	8008eec <start_word_FIBO_G01>
				j3_press_count = 0; // Reset counter
 8008712:	4b21      	ldr	r3, [pc, #132]	@ (8008798 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8008714:	2200      	movs	r2, #0
 8008716:	701a      	strb	r2, [r3, #0]
				break;
 8008718:	e005      	b.n	8008726 <HAL_GPIO_EXTI_Callback+0x15e>

			default:
				// Reset if pressed too many times
				stop_character_drawing();
 800871a:	f000 fbc3 	bl	8008ea4 <stop_character_drawing>
				j3_press_count = 0;
 800871e:	4b1e      	ldr	r3, [pc, #120]	@ (8008798 <HAL_GPIO_EXTI_Callback+0x1d0>)
 8008720:	2200      	movs	r2, #0
 8008722:	701a      	strb	r2, [r3, #0]
				break;
 8008724:	bf00      	nop
			}
		}
		return;
 8008726:	e017      	b.n	8008758 <HAL_GPIO_EXTI_Callback+0x190>

	}

// Modified J4 button handler for joy mode exit
	if (GPIO_Pin == J4_Pin) {
 8008728:	88fb      	ldrh	r3, [r7, #6]
 800872a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800872e:	d116      	bne.n	800875e <HAL_GPIO_EXTI_Callback+0x196>
		if (joy_mode_active) {
 8008730:	4b11      	ldr	r3, [pc, #68]	@ (8008778 <HAL_GPIO_EXTI_Callback+0x1b0>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d002      	beq.n	800873e <HAL_GPIO_EXTI_Callback+0x176>
			// Exit joy mode and hold current position (don't move)
			exit_joy_mode();
 8008738:	f7fe ffc0 	bl	80076bc <exit_joy_mode>
		} else if (is_emergency_active()) {
			clear_emergency_state();
			start_homing_sequence(true);
		}
		return;
 800873c:	e00e      	b.n	800875c <HAL_GPIO_EXTI_Callback+0x194>
		} else if (is_emergency_active()) {
 800873e:	f7fe ff4f 	bl	80075e0 <is_emergency_active>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d009      	beq.n	800875c <HAL_GPIO_EXTI_Callback+0x194>
			clear_emergency_state();
 8008748:	f7fe fe70 	bl	800742c <clear_emergency_state>
			start_homing_sequence(true);
 800874c:	2001      	movs	r0, #1
 800874e:	f7fd f8b3 	bl	80058b8 <start_homing_sequence>
		return;
 8008752:	e003      	b.n	800875c <HAL_GPIO_EXTI_Callback+0x194>
			return; // ignore ถ้ายังไม่ครบ 200ms
 8008754:	bf00      	nop
 8008756:	e002      	b.n	800875e <HAL_GPIO_EXTI_Callback+0x196>
		return;
 8008758:	bf00      	nop
 800875a:	e000      	b.n	800875e <HAL_GPIO_EXTI_Callback+0x196>
		return;
 800875c:	bf00      	nop
	}
}
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	200007dc 	.word	0x200007dc
 8008768:	200007e0 	.word	0x200007e0
 800876c:	200007e1 	.word	0x200007e1
 8008770:	20000890 	.word	0x20000890
 8008774:	200007e3 	.word	0x200007e3
 8008778:	200007fd 	.word	0x200007fd
 800877c:	20000333 	.word	0x20000333
 8008780:	2000088d 	.word	0x2000088d
 8008784:	2000088c 	.word	0x2000088c
 8008788:	20000335 	.word	0x20000335
 800878c:	43480000 	.word	0x43480000
 8008790:	42b40000 	.word	0x42b40000
 8008794:	20000898 	.word	0x20000898
 8008798:	20000894 	.word	0x20000894
 800879c:	20000784 	.word	0x20000784

080087a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4aa5      	ldr	r2, [pc, #660]	@ (8008a40 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	f040 8143 	bne.w	8008a38 <HAL_TIM_PeriodElapsedCallback+0x298>
		Modbus_Protocal_Worker();
 80087b2:	f7f9 fc4d 	bl	8002050 <Modbus_Protocal_Worker>
		modbus_working();
 80087b6:	f000 f96d 	bl	8008a94 <modbus_working>

		plotter_update_sensors();
 80087ba:	f001 f83b 	bl	8009834 <plotter_update_sensors>
		check_emergency_button();
 80087be:	f7fe fd67 	bl	8007290 <check_emergency_button>

		QEI_get_diff_count(&prismatic_encoder);
 80087c2:	48a0      	ldr	r0, [pc, #640]	@ (8008a44 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80087c4:	f7fb fb60 	bl	8003e88 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 80087c8:	489e      	ldr	r0, [pc, #632]	@ (8008a44 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80087ca:	f7fb fc49 	bl	8004060 <QEI_compute_data>
		QEI_get_diff_count(&revolute_encoder);
 80087ce:	489e      	ldr	r0, [pc, #632]	@ (8008a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80087d0:	f7fb fb5a 	bl	8003e88 <QEI_get_diff_count>
		QEI_compute_data(&revolute_encoder);
 80087d4:	489c      	ldr	r0, [pc, #624]	@ (8008a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80087d6:	f7fb fc43 	bl	8004060 <QEI_compute_data>

		revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 80087da:	4b9c      	ldr	r3, [pc, #624]	@ (8008a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80087dc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80087e0:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 80087e4:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 80087e8:	ed9f 1a99 	vldr	s2, [pc, #612]	@ 8008a50 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 80087ec:	eddf 0a99 	vldr	s1, [pc, #612]	@ 8008a54 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 80087f0:	eeb0 0a67 	vmov.f32	s0, s15
 80087f4:	f7f9 fb15 	bl	8001e22 <mapf>
 80087f8:	eef0 7a40 	vmov.f32	s15, s0
 80087fc:	4b93      	ldr	r3, [pc, #588]	@ (8008a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80087fe:	edc3 7a08 	vstr	s15, [r3, #32]
				65535.0f, -12.0f, 12.0f);
		revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8008802:	4b92      	ldr	r3, [pc, #584]	@ (8008a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008804:	edd3 7a08 	vldr	s15, [r3, #32]
 8008808:	4b8f      	ldr	r3, [pc, #572]	@ (8008a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 800880a:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800880e:	eef0 0a47 	vmov.f32	s1, s14
 8008812:	eeb0 0a67 	vmov.f32	s0, s15
 8008816:	4890      	ldr	r0, [pc, #576]	@ (8008a58 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8008818:	f7fc fc52 	bl	80050c0 <SteadyStateKalmanFilter>
 800881c:	eef0 7a40 	vmov.f32	s15, s0
 8008820:	4b8a      	ldr	r3, [pc, #552]	@ (8008a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008822:	edc3 7a07 	vstr	s15, [r3, #28]
				&revolute_kalman, revolute_axis.input_voltage,
				revolute_encoder.rads);

		if (isnan(revolute_axis.kalman_velocity)) {
 8008826:	4b89      	ldr	r3, [pc, #548]	@ (8008a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008828:	edd3 7a07 	vldr	s15, [r3, #28]
 800882c:	eef4 7a67 	vcmp.f32	s15, s15
 8008830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008834:	d703      	bvc.n	800883e <HAL_TIM_PeriodElapsedCallback+0x9e>
			revolute_axis.kalman_velocity = 0.0f;
 8008836:	4b85      	ldr	r3, [pc, #532]	@ (8008a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008838:	f04f 0200 	mov.w	r2, #0
 800883c:	61da      	str	r2, [r3, #28]
		}

		prismatic_axis.input_voltage = mapf(prismatic_axis.command_pos,
 800883e:	4b87      	ldr	r3, [pc, #540]	@ (8008a5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008840:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8008844:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8008848:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 800884c:	ed9f 1a80 	vldr	s2, [pc, #512]	@ 8008a50 <HAL_TIM_PeriodElapsedCallback+0x2b0>
 8008850:	eddf 0a80 	vldr	s1, [pc, #512]	@ 8008a54 <HAL_TIM_PeriodElapsedCallback+0x2b4>
 8008854:	eeb0 0a67 	vmov.f32	s0, s15
 8008858:	f7f9 fae3 	bl	8001e22 <mapf>
 800885c:	eef0 7a40 	vmov.f32	s15, s0
 8008860:	4b7e      	ldr	r3, [pc, #504]	@ (8008a5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008862:	edc3 7a08 	vstr	s15, [r3, #32]
				-65535.0f, 65535.0f, -12.0f, 12.0f);
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008866:	4b7d      	ldr	r3, [pc, #500]	@ (8008a5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008868:	edd3 7a08 	vldr	s15, [r3, #32]
 800886c:	4b75      	ldr	r3, [pc, #468]	@ (8008a44 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 800886e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8008872:	eef0 0a47 	vmov.f32	s1, s14
 8008876:	eeb0 0a67 	vmov.f32	s0, s15
 800887a:	4879      	ldr	r0, [pc, #484]	@ (8008a60 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 800887c:	f7fa fd3e 	bl	80032fc <MotorKalman_Estimate>
 8008880:	eeb0 7a40 	vmov.f32	s14, s0
				prismatic_axis.input_voltage, prismatic_encoder.rads)
				* Disturbance_Constant.prismatic_pulley_radius * 1000.0f;
 8008884:	4b77      	ldr	r3, [pc, #476]	@ (8008a64 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8008886:	edd3 7a04 	vldr	s15, [r3, #16]
 800888a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888e:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 8008a68 <HAL_TIM_PeriodElapsedCallback+0x2c8>
 8008892:	ee67 7a87 	vmul.f32	s15, s15, s14
		prismatic_axis.kalman_velocity = MotorKalman_Estimate(&prismatic_kalman,
 8008896:	4b71      	ldr	r3, [pc, #452]	@ (8008a5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008898:	edc3 7a07 	vstr	s15, [r3, #28]

		if (isnan(prismatic_axis.kalman_velocity)) {
 800889c:	4b6f      	ldr	r3, [pc, #444]	@ (8008a5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 800889e:	edd3 7a07 	vldr	s15, [r3, #28]
 80088a2:	eef4 7a67 	vcmp.f32	s15, s15
 80088a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088aa:	d703      	bvc.n	80088b4 <HAL_TIM_PeriodElapsedCallback+0x114>
			prismatic_axis.kalman_velocity = 0.0f;
 80088ac:	4b6b      	ldr	r3, [pc, #428]	@ (8008a5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80088ae:	f04f 0200 	mov.w	r2, #0
 80088b2:	61da      	str	r2, [r3, #28]
		}

		// Position control update - Allow during HOMING_REV_TO_ZERO_DEG
		if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 80088b4:	4b6d      	ldr	r3, [pc, #436]	@ (8008a6c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	3301      	adds	r3, #1
 80088ba:	4a6c      	ldr	r2, [pc, #432]	@ (8008a6c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	2b09      	cmp	r3, #9
 80088c0:	d92e      	bls.n	8008920 <HAL_TIM_PeriodElapsedCallback+0x180>
			position_control_tick = 0;
 80088c2:	4b6a      	ldr	r3, [pc, #424]	@ (8008a6c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	601a      	str	r2, [r3, #0]

			if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 80088c8:	4b69      	ldr	r3, [pc, #420]	@ (8008a70 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f083 0301 	eor.w	r3, r3, #1
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d103      	bne.n	80088de <HAL_TIM_PeriodElapsedCallback+0x13e>
 80088d6:	4b67      	ldr	r3, [pc, #412]	@ (8008a74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b07      	cmp	r3, #7
 80088dc:	d120      	bne.n	8008920 <HAL_TIM_PeriodElapsedCallback+0x180>
					&& (!joy_mode_active
 80088de:	4b66      	ldr	r3, [pc, #408]	@ (8008a78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	f083 0301 	eor.w	r3, r3, #1
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d10b      	bne.n	8008904 <HAL_TIM_PeriodElapsedCallback+0x164>
							|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 80088ec:	4b63      	ldr	r3, [pc, #396]	@ (8008a7c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	2b02      	cmp	r3, #2
 80088f2:	d015      	beq.n	8008920 <HAL_TIM_PeriodElapsedCallback+0x180>
									&& joy_mode_state
											!= JOY_MODE_INITIAL_CONTROL
 80088f4:	4b61      	ldr	r3, [pc, #388]	@ (8008a7c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
									&& joy_mode_state
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d011      	beq.n	8008920 <HAL_TIM_PeriodElapsedCallback+0x180>
									&& joy_mode_state != JOY_MODE_POSITION_SAVED))
 80088fc:	4b5f      	ldr	r3, [pc, #380]	@ (8008a7c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b03      	cmp	r3, #3
 8008902:	d00d      	beq.n	8008920 <HAL_TIM_PeriodElapsedCallback+0x180>
					&& (!is_emergency_active() || tuning_mode)) {
 8008904:	f7fe fe6c 	bl	80075e0 <is_emergency_active>
 8008908:	4603      	mov	r3, r0
 800890a:	f083 0301 	eor.w	r3, r3, #1
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d103      	bne.n	800891c <HAL_TIM_PeriodElapsedCallback+0x17c>
 8008914:	4b5a      	ldr	r3, [pc, #360]	@ (8008a80 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <HAL_TIM_PeriodElapsedCallback+0x180>
				update_position_control();
 800891c:	f7fd ff1e 	bl	800675c <update_position_control>
			}
		}

		// Velocity control update - Allow during HOMING_REV_TO_ZERO_DEG
		if ((!homing_active || homing_state == HOMING_REV_TO_ZERO_DEG) // ← FIXED
 8008920:	4b53      	ldr	r3, [pc, #332]	@ (8008a70 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f083 0301 	eor.w	r3, r3, #1
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d103      	bne.n	8008936 <HAL_TIM_PeriodElapsedCallback+0x196>
 800892e:	4b51      	ldr	r3, [pc, #324]	@ (8008a74 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b07      	cmp	r3, #7
 8008934:	d120      	bne.n	8008978 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				&& (!joy_mode_active
 8008936:	4b50      	ldr	r3, [pc, #320]	@ (8008a78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	f083 0301 	eor.w	r3, r3, #1
 800893e:	b2db      	uxtb	r3, r3
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10b      	bne.n	800895c <HAL_TIM_PeriodElapsedCallback+0x1bc>
						|| (joy_mode_state != JOY_MODE_MANUAL_CONTROL
 8008944:	4b4d      	ldr	r3, [pc, #308]	@ (8008a7c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b02      	cmp	r3, #2
 800894a:	d015      	beq.n	8008978 <HAL_TIM_PeriodElapsedCallback+0x1d8>
								&& joy_mode_state != JOY_MODE_INITIAL_CONTROL
 800894c:	4b4b      	ldr	r3, [pc, #300]	@ (8008a7c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d011      	beq.n	8008978 <HAL_TIM_PeriodElapsedCallback+0x1d8>
								&& joy_mode_state != JOY_MODE_POSITION_SAVED))
 8008954:	4b49      	ldr	r3, [pc, #292]	@ (8008a7c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b03      	cmp	r3, #3
 800895a:	d00d      	beq.n	8008978 <HAL_TIM_PeriodElapsedCallback+0x1d8>
				&& (!is_emergency_active() || tuning_mode)) {
 800895c:	f7fe fe40 	bl	80075e0 <is_emergency_active>
 8008960:	4603      	mov	r3, r0
 8008962:	f083 0301 	eor.w	r3, r3, #1
 8008966:	b2db      	uxtb	r3, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	d103      	bne.n	8008974 <HAL_TIM_PeriodElapsedCallback+0x1d4>
 800896c:	4b44      	ldr	r3, [pc, #272]	@ (8008a80 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <HAL_TIM_PeriodElapsedCallback+0x1d8>
			update_velocity_control();
 8008974:	f7fd ffb0 	bl	80068d8 <update_velocity_control>
		}

		update_safety_system();
 8008978:	f7fe fdb0 	bl	80074dc <update_safety_system>

		if (!is_emergency_active() || tuning_mode) {
 800897c:	f7fe fe30 	bl	80075e0 <is_emergency_active>
 8008980:	4603      	mov	r3, r0
 8008982:	f083 0301 	eor.w	r3, r3, #1
 8008986:	b2db      	uxtb	r3, r3
 8008988:	2b00      	cmp	r3, #0
 800898a:	d103      	bne.n	8008994 <HAL_TIM_PeriodElapsedCallback+0x1f4>
 800898c:	4b3c      	ldr	r3, [pc, #240]	@ (8008a80 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d001      	beq.n	8008998 <HAL_TIM_PeriodElapsedCallback+0x1f8>
			check_safety_conditions();
 8008994:	f7fe fc9e 	bl	80072d4 <check_safety_conditions>
		}

		// Control loops - joy mode handles its own control
		if (!joy_mode_active) {
 8008998:	4b37      	ldr	r3, [pc, #220]	@ (8008a78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f083 0301 	eor.w	r3, r3, #1
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d002      	beq.n	80089ac <HAL_TIM_PeriodElapsedCallback+0x20c>
			update_control_loops();
 80089a6:	f7fe f9ab 	bl	8006d00 <update_control_loops>
 80089aa:	e001      	b.n	80089b0 <HAL_TIM_PeriodElapsedCallback+0x210>
		} else {
			update_joy_mode();
 80089ac:	f7ff fb9e 	bl	80080ec <update_joy_mode>
		}

		// ALWAYS update display values
		if (!joy_mode_active) {
 80089b0:	4b31      	ldr	r3, [pc, #196]	@ (8008a78 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f083 0301 	eor.w	r3, r3, #1
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d01e      	beq.n	80089fc <HAL_TIM_PeriodElapsedCallback+0x25c>
			// Update display values for normal operation
			normalized_position = normalize_angle(revolute_encoder.rads);
 80089be:	4b22      	ldr	r3, [pc, #136]	@ (8008a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80089c0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80089c4:	eeb0 0a67 	vmov.f32	s0, s15
 80089c8:	f7fd fbce 	bl	8006168 <normalize_angle>
 80089cc:	eef0 7a40 	vmov.f32	s15, s0
 80089d0:	4b2c      	ldr	r3, [pc, #176]	@ (8008a84 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80089d2:	edc3 7a00 	vstr	s15, [r3]
			prismatic_axis.mm = prismatic_encoder.mm;
 80089d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008a44 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80089d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089da:	4a20      	ldr	r2, [pc, #128]	@ (8008a5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 80089dc:	6393      	str	r3, [r2, #56]	@ 0x38
			revolute_axis.deg = UnitConverter_angle(&converter_system,
 80089de:	4b29      	ldr	r3, [pc, #164]	@ (8008a84 <HAL_TIM_PeriodElapsedCallback+0x2e4>)
 80089e0:	edd3 7a00 	vldr	s15, [r3]
 80089e4:	220e      	movs	r2, #14
 80089e6:	210f      	movs	r1, #15
 80089e8:	eeb0 0a67 	vmov.f32	s0, s15
 80089ec:	4826      	ldr	r0, [pc, #152]	@ (8008a88 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80089ee:	f7fc f8eb 	bl	8004bc8 <UnitConverter_angle>
 80089f2:	eef0 7a40 	vmov.f32	s15, s0
 80089f6:	4b15      	ldr	r3, [pc, #84]	@ (8008a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 80089f8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
					normalized_position, UNIT_RADIAN, UNIT_DEGREE);
		}
		// Note: joy mode updates its own display values in update_joy_mode()

		prismatic_axis.accel_show = FIR_process(&prismatic_lp_accel,
 80089fc:	4b11      	ldr	r3, [pc, #68]	@ (8008a44 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80089fe:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008a02:	eeb0 0a67 	vmov.f32	s0, s15
 8008a06:	4821      	ldr	r0, [pc, #132]	@ (8008a8c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8008a08:	f7f9 f9b2 	bl	8001d70 <FIR_process>
 8008a0c:	eef0 7a40 	vmov.f32	s15, s0
 8008a10:	4b12      	ldr	r3, [pc, #72]	@ (8008a5c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8008a12:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				prismatic_encoder.mmpss);
		revolute_axis.accel_show = FIR_process(&revolute_lp_accel,
 8008a16:	4b0c      	ldr	r3, [pc, #48]	@ (8008a48 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8008a18:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8008a20:	481b      	ldr	r0, [pc, #108]	@ (8008a90 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8008a22:	f7f9 f9a5 	bl	8001d70 <FIR_process>
 8008a26:	eef0 7a40 	vmov.f32	s15, s0
 8008a2a:	4b08      	ldr	r3, [pc, #32]	@ (8008a4c <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8008a2c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
				revolute_encoder.radpss);

		update_character_drawing();
 8008a30:	f000 f9b6 	bl	8008da0 <update_character_drawing>
		draw_word_FIBO_G01();
 8008a34:	f000 fa80 	bl	8008f38 <draw_word_FIBO_G01>
	}
}
 8008a38:	bf00      	nop
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	20001f3c 	.word	0x20001f3c
 8008a44:	2000097c 	.word	0x2000097c
 8008a48:	200009d8 	.word	0x200009d8
 8008a4c:	20000740 	.word	0x20000740
 8008a50:	477fff00 	.word	0x477fff00
 8008a54:	c77fff00 	.word	0xc77fff00
 8008a58:	20001a7c 	.word	0x20001a7c
 8008a5c:	200006fc 	.word	0x200006fc
 8008a60:	20001710 	.word	0x20001710
 8008a64:	20000100 	.word	0x20000100
 8008a68:	447a0000 	.word	0x447a0000
 8008a6c:	200007f0 	.word	0x200007f0
 8008a70:	200007e3 	.word	0x200007e3
 8008a74:	200007e2 	.word	0x200007e2
 8008a78:	200007fd 	.word	0x200007fd
 8008a7c:	200007fc 	.word	0x200007fc
 8008a80:	20000334 	.word	0x20000334
 8008a84:	200007f4 	.word	0x200007f4
 8008a88:	20000d70 	.word	0x20000d70
 8008a8c:	20000fc8 	.word	0x20000fc8
 8008a90:	20000fd4 	.word	0x20000fd4

08008a94 <modbus_working>:

//modbus
void modbus_working(void) {
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b086      	sub	sp, #24
 8008a98:	af00      	add	r7, sp, #0

	uint16_t limit_switch_status = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	82fb      	strh	r3, [r7, #22]
//heartbeat
	registerFrame[Heartbeat_Protocol].U16 = 22881;
 8008a9e:	4b75      	ldr	r3, [pc, #468]	@ (8008c74 <modbus_working+0x1e0>)
 8008aa0:	f645 1261 	movw	r2, #22881	@ 0x5961
 8008aa4:	801a      	strh	r2, [r3, #0]
//servo write
	if (registerFrame[Servo_UP].U16 == 1) {
 8008aa6:	4b73      	ldr	r3, [pc, #460]	@ (8008c74 <modbus_working+0x1e0>)
 8008aa8:	891b      	ldrh	r3, [r3, #8]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d102      	bne.n	8008ab4 <modbus_working+0x20>
		plotter_pen_up();
 8008aae:	f000 ff67 	bl	8009980 <plotter_pen_up>
 8008ab2:	e005      	b.n	8008ac0 <modbus_working+0x2c>
	} else if (registerFrame[Servo_Down].U16 == 1) {
 8008ab4:	4b6f      	ldr	r3, [pc, #444]	@ (8008c74 <modbus_working+0x1e0>)
 8008ab6:	895b      	ldrh	r3, [r3, #10]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d101      	bne.n	8008ac0 <modbus_working+0x2c>
		plotter_pen_down();
 8008abc:	f000 ff70 	bl	80099a0 <plotter_pen_down>
	}

//limitSW
	if (up_lim == 1) {
 8008ac0:	4b6d      	ldr	r3, [pc, #436]	@ (8008c78 <modbus_working+0x1e4>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d103      	bne.n	8008ad0 <modbus_working+0x3c>
		limit_switch_status |= 0x02;  // Bit 1 = Limit UP
 8008ac8:	8afb      	ldrh	r3, [r7, #22]
 8008aca:	f043 0302 	orr.w	r3, r3, #2
 8008ace:	82fb      	strh	r3, [r7, #22]
	}
	if (low_lim == 1) {
 8008ad0:	4b6a      	ldr	r3, [pc, #424]	@ (8008c7c <modbus_working+0x1e8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2b01      	cmp	r3, #1
 8008ad6:	d103      	bne.n	8008ae0 <modbus_working+0x4c>
		limit_switch_status |= 0x01;  // Bit 0 = Limit DOWN
 8008ad8:	8afb      	ldrh	r3, [r7, #22]
 8008ada:	f043 0301 	orr.w	r3, r3, #1
 8008ade:	82fb      	strh	r3, [r7, #22]
	}
	registerFrame[LimitSwitch_Status].U16 = limit_switch_status;
 8008ae0:	4a64      	ldr	r2, [pc, #400]	@ (8008c74 <modbus_working+0x1e0>)
 8008ae2:	8afb      	ldrh	r3, [r7, #22]
 8008ae4:	80d3      	strh	r3, [r2, #6]

	if (registerFrame[BaseSystem_Status].U16 == 1) {
 8008ae6:	4b63      	ldr	r3, [pc, #396]	@ (8008c74 <modbus_working+0x1e0>)
 8008ae8:	885b      	ldrh	r3, [r3, #2]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d10e      	bne.n	8008b0c <modbus_working+0x78>
		exit_joy_mode();
 8008aee:	f7fe fde5 	bl	80076bc <exit_joy_mode>
		check[5] = 1;
 8008af2:	4b63      	ldr	r3, [pc, #396]	@ (8008c80 <modbus_working+0x1ec>)
 8008af4:	2201      	movs	r2, #1
 8008af6:	615a      	str	r2, [r3, #20]
		registerFrame[R_Theta_Status].U16 = 1;
 8008af8:	4b5e      	ldr	r3, [pc, #376]	@ (8008c74 <modbus_working+0x1e0>)
 8008afa:	2201      	movs	r2, #1
 8008afc:	841a      	strh	r2, [r3, #32]
		start_combined_trajectory(0.0, 0.0);
 8008afe:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8008c84 <modbus_working+0x1f0>
 8008b02:	ed9f 0a60 	vldr	s0, [pc, #384]	@ 8008c84 <modbus_working+0x1f0>
 8008b06:	f7fd fc19 	bl	800633c <start_combined_trajectory>
 8008b0a:	e03b      	b.n	8008b84 <modbus_working+0xf0>
//		PID_CONTROLLER_Reset(&prismatic_velocity_pid);
//		PID_CONTROLLER_Reset(&revolute_position_pid);
//		PID_CONTROLLER_Reset(&revolute_velocity_pid);
//		PID_CONTROLLER_Reset(&revolute_velocity_pid);

	} else if (registerFrame[BaseSystem_Status].U16 == 2) {
 8008b0c:	4b59      	ldr	r3, [pc, #356]	@ (8008c74 <modbus_working+0x1e0>)
 8008b0e:	885b      	ldrh	r3, [r3, #2]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d105      	bne.n	8008b20 <modbus_working+0x8c>
		registerFrame[R_Theta_Status].U16 = 2;
 8008b14:	4b57      	ldr	r3, [pc, #348]	@ (8008c74 <modbus_working+0x1e0>)
 8008b16:	2202      	movs	r2, #2
 8008b18:	841a      	strh	r2, [r3, #32]
		enter_joy_mode();
 8008b1a:	f7fe fd71 	bl	8007600 <enter_joy_mode>
 8008b1e:	e031      	b.n	8008b84 <modbus_working+0xf0>
	} else if (registerFrame[BaseSystem_Status].U16 == 4) {
 8008b20:	4b54      	ldr	r3, [pc, #336]	@ (8008c74 <modbus_working+0x1e0>)
 8008b22:	885b      	ldrh	r3, [r3, #2]
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d102      	bne.n	8008b2e <modbus_working+0x9a>
		exit_joy_mode();
 8008b28:	f7fe fdc8 	bl	80076bc <exit_joy_mode>
 8008b2c:	e02a      	b.n	8008b84 <modbus_working+0xf0>
	} else if (registerFrame[BaseSystem_Status].U16 == 8) {
 8008b2e:	4b51      	ldr	r3, [pc, #324]	@ (8008c74 <modbus_working+0x1e0>)
 8008b30:	885b      	ldrh	r3, [r3, #2]
 8008b32:	2b08      	cmp	r3, #8
 8008b34:	d126      	bne.n	8008b84 <modbus_working+0xf0>
		registerFrame[R_Theta_Status].U16 = 8;
 8008b36:	4b4f      	ldr	r3, [pc, #316]	@ (8008c74 <modbus_working+0x1e0>)
 8008b38:	2208      	movs	r2, #8
 8008b3a:	841a      	strh	r2, [r3, #32]
		exit_joy_mode();
 8008b3c:	f7fe fdbe 	bl	80076bc <exit_joy_mode>
		float goal_r_mm = (float) (int16_t) registerFrame[Goal_R].U16 / 10.0;
 8008b40:	4b4c      	ldr	r3, [pc, #304]	@ (8008c74 <modbus_working+0x1e0>)
 8008b42:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8008b46:	b21b      	sxth	r3, r3
 8008b48:	ee07 3a90 	vmov	s15, r3
 8008b4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b50:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008b54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b58:	edc7 7a04 	vstr	s15, [r7, #16]
		float goal_theta_deg = (float) (int16_t) registerFrame[Goal_Theta].U16
 8008b5c:	4b45      	ldr	r3, [pc, #276]	@ (8008c74 <modbus_working+0x1e0>)
 8008b5e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8008b62:	b21b      	sxth	r3, r3
 8008b64:	ee07 3a90 	vmov	s15, r3
 8008b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b6c:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8008b70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b74:	edc7 7a03 	vstr	s15, [r7, #12]
				/ 10.0;

		start_combined_trajectory(goal_r_mm, goal_theta_deg);
 8008b78:	edd7 0a03 	vldr	s1, [r7, #12]
 8008b7c:	ed97 0a04 	vldr	s0, [r7, #16]
 8008b80:	f7fd fbdc 	bl	800633c <start_combined_trajectory>
	}

	registerFrame[R_Axis_Actual_Position].U16 = prismatic_encoder.mm * 10.0f;
 8008b84:	4b40      	ldr	r3, [pc, #256]	@ (8008c88 <modbus_working+0x1f4>)
 8008b86:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8008b8a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b96:	ee17 3a90 	vmov	r3, s15
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	4b35      	ldr	r3, [pc, #212]	@ (8008c74 <modbus_working+0x1e0>)
 8008b9e:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008ba0:	4b3a      	ldr	r3, [pc, #232]	@ (8008c8c <modbus_working+0x1f8>)
 8008ba2:	edd3 7a07 	vldr	s15, [r3, #28]
			* 10.0f;
 8008ba6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008baa:	ee67 7a87 	vmul.f32	s15, s15, s14
	registerFrame[R_Axis_Actual_Speed].U16 = prismatic_axis.kalman_velocity
 8008bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bb2:	ee17 3a90 	vmov	r3, s15
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8008c74 <modbus_working+0x1e0>)
 8008bba:	84da      	strh	r2, [r3, #38]	@ 0x26

	float pris_accel = FIR_process(&prismatic_lp_accel,
 8008bbc:	4b32      	ldr	r3, [pc, #200]	@ (8008c88 <modbus_working+0x1f4>)
 8008bbe:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8008bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8008bc6:	4832      	ldr	r0, [pc, #200]	@ (8008c90 <modbus_working+0x1fc>)
 8008bc8:	f7f9 f8d2 	bl	8001d70 <FIR_process>
 8008bcc:	ed87 0a02 	vstr	s0, [r7, #8]
			prismatic_encoder.mmpss);
	registerFrame[R_Axis_Acceleration].U16 = pris_accel * 10.0f;
 8008bd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8008bd4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008be0:	ee17 3a90 	vmov	r3, s15
 8008be4:	b29a      	uxth	r2, r3
 8008be6:	4b23      	ldr	r3, [pc, #140]	@ (8008c74 <modbus_working+0x1e0>)
 8008be8:	855a      	strh	r2, [r3, #42]	@ 0x2a

	registerFrame[Theta_Axis_Actual_Position].U16 = revolute_axis.deg * 10.0f;
 8008bea:	4b2a      	ldr	r3, [pc, #168]	@ (8008c94 <modbus_working+0x200>)
 8008bec:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8008bf0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008bf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bfc:	ee17 3a90 	vmov	r3, s15
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	4b1c      	ldr	r3, [pc, #112]	@ (8008c74 <modbus_working+0x1e0>)
 8008c04:	849a      	strh	r2, [r3, #36]	@ 0x24

	float rev_theta_vel = UnitConverter_angle(&converter_system,
 8008c06:	4b23      	ldr	r3, [pc, #140]	@ (8008c94 <modbus_working+0x200>)
 8008c08:	edd3 7a07 	vldr	s15, [r3, #28]
 8008c0c:	220e      	movs	r2, #14
 8008c0e:	210f      	movs	r1, #15
 8008c10:	eeb0 0a67 	vmov.f32	s0, s15
 8008c14:	4820      	ldr	r0, [pc, #128]	@ (8008c98 <modbus_working+0x204>)
 8008c16:	f7fb ffd7 	bl	8004bc8 <UnitConverter_angle>
 8008c1a:	ed87 0a01 	vstr	s0, [r7, #4]
			revolute_axis.kalman_velocity, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Actual_Speed].U16 = rev_theta_vel * 10.0f;
 8008c1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008c22:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c2e:	ee17 3a90 	vmov	r3, s15
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	4b0f      	ldr	r3, [pc, #60]	@ (8008c74 <modbus_working+0x1e0>)
 8008c36:	851a      	strh	r2, [r3, #40]	@ 0x28

	float rev_theta_accel = UnitConverter_angle(&converter_system,
 8008c38:	4b18      	ldr	r3, [pc, #96]	@ (8008c9c <modbus_working+0x208>)
 8008c3a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8008c3e:	220e      	movs	r2, #14
 8008c40:	210f      	movs	r1, #15
 8008c42:	eeb0 0a67 	vmov.f32	s0, s15
 8008c46:	4814      	ldr	r0, [pc, #80]	@ (8008c98 <modbus_working+0x204>)
 8008c48:	f7fb ffbe 	bl	8004bc8 <UnitConverter_angle>
 8008c4c:	ed87 0a00 	vstr	s0, [r7]
			revolute_encoder.radpss, UNIT_RADIAN, UNIT_DEGREE);
	registerFrame[Theta_Axis_Acceleration].U16 = rev_theta_accel * 10.0f;
 8008c50:	edd7 7a00 	vldr	s15, [r7]
 8008c54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8008c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008c5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c60:	ee17 3a90 	vmov	r3, s15
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	4b03      	ldr	r3, [pc, #12]	@ (8008c74 <modbus_working+0x1e0>)
 8008c68:	859a      	strh	r2, [r3, #44]	@ 0x2c

}
 8008c6a:	bf00      	nop
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20001580 	.word	0x20001580
 8008c78:	20001e54 	.word	0x20001e54
 8008c7c:	20001e58 	.word	0x20001e58
 8008c80:	20000864 	.word	0x20000864
 8008c84:	00000000 	.word	0x00000000
 8008c88:	2000097c 	.word	0x2000097c
 8008c8c:	200006fc 	.word	0x200006fc
 8008c90:	20000fc8 	.word	0x20000fc8
 8008c94:	20000740 	.word	0x20000740
 8008c98:	20000d70 	.word	0x20000d70
 8008c9c:	200009d8 	.word	0x200009d8

08008ca0 <start_character_drawing>:

void start_character_drawing(DrawingPoint_t *points, uint8_t num_points,
		const char *character_name) {
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b084      	sub	sp, #16
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	60f8      	str	r0, [r7, #12]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	607a      	str	r2, [r7, #4]
 8008cac:	72fb      	strb	r3, [r7, #11]
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8008cae:	f7fe fc97 	bl	80075e0 <is_emergency_active>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d120      	bne.n	8008cfa <start_character_drawing+0x5a>
 8008cb8:	4b12      	ldr	r3, [pc, #72]	@ (8008d04 <start_character_drawing+0x64>)
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d11c      	bne.n	8008cfa <start_character_drawing+0x5a>
 8008cc0:	4b11      	ldr	r3, [pc, #68]	@ (8008d08 <start_character_drawing+0x68>)
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d118      	bne.n	8008cfa <start_character_drawing+0x5a>
		return;
	}

	// หยุดการวาดปัจจุบัน (ถ้ามี)
	current_drawing_sequence.sequence_active = false;
 8008cc8:	4b10      	ldr	r3, [pc, #64]	@ (8008d0c <start_character_drawing+0x6c>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	719a      	strb	r2, [r3, #6]

	// ตั้งค่าลำดับการวาดใหม่
	current_drawing_sequence.points = points;
 8008cce:	4a0f      	ldr	r2, [pc, #60]	@ (8008d0c <start_character_drawing+0x6c>)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6013      	str	r3, [r2, #0]
	current_drawing_sequence.num_points = num_points;
 8008cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8008d0c <start_character_drawing+0x6c>)
 8008cd6:	7afb      	ldrb	r3, [r7, #11]
 8008cd8:	7113      	strb	r3, [r2, #4]
	current_drawing_sequence.current_point = 0;
 8008cda:	4b0c      	ldr	r3, [pc, #48]	@ (8008d0c <start_character_drawing+0x6c>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	715a      	strb	r2, [r3, #5]
	current_drawing_sequence.sequence_active = true;
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8008d0c <start_character_drawing+0x6c>)
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	719a      	strb	r2, [r3, #6]
	current_drawing_sequence.character_name = character_name;
 8008ce6:	4a09      	ldr	r2, [pc, #36]	@ (8008d0c <start_character_drawing+0x6c>)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6093      	str	r3, [r2, #8]

	// รอให้ motion หยุดก่อนเริ่มใหม่
	if (motion_sequence_state == MOTION_IDLE) {
 8008cec:	4b08      	ldr	r3, [pc, #32]	@ (8008d10 <start_character_drawing+0x70>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d103      	bne.n	8008cfc <start_character_drawing+0x5c>
		execute_next_drawing_point();
 8008cf4:	f000 f80e 	bl	8008d14 <execute_next_drawing_point>
 8008cf8:	e000      	b.n	8008cfc <start_character_drawing+0x5c>
		return;
 8008cfa:	bf00      	nop
	}
}
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	200007e3 	.word	0x200007e3
 8008d08:	200007fd 	.word	0x200007fd
 8008d0c:	200008a8 	.word	0x200008a8
 8008d10:	20000784 	.word	0x20000784

08008d14 <execute_next_drawing_point>:

void execute_next_drawing_point(void) {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
	if (!current_drawing_sequence.sequence_active) {
 8008d1a:	4b20      	ldr	r3, [pc, #128]	@ (8008d9c <execute_next_drawing_point+0x88>)
 8008d1c:	799b      	ldrb	r3, [r3, #6]
 8008d1e:	f083 0301 	eor.w	r3, r3, #1
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d135      	bne.n	8008d94 <execute_next_drawing_point+0x80>
		return;
	}

	if (current_drawing_sequence.current_point
 8008d28:	4b1c      	ldr	r3, [pc, #112]	@ (8008d9c <execute_next_drawing_point+0x88>)
 8008d2a:	795a      	ldrb	r2, [r3, #5]
			< current_drawing_sequence.num_points) {
 8008d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8008d9c <execute_next_drawing_point+0x88>)
 8008d2e:	791b      	ldrb	r3, [r3, #4]
	if (current_drawing_sequence.current_point
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d226      	bcs.n	8008d82 <execute_next_drawing_point+0x6e>
		DrawingPoint_t current_point =
				current_drawing_sequence.points[current_drawing_sequence.current_point];
 8008d34:	4b19      	ldr	r3, [pc, #100]	@ (8008d9c <execute_next_drawing_point+0x88>)
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	4b18      	ldr	r3, [pc, #96]	@ (8008d9c <execute_next_drawing_point+0x88>)
 8008d3a:	795b      	ldrb	r3, [r3, #5]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	460b      	mov	r3, r1
 8008d40:	005b      	lsls	r3, r3, #1
 8008d42:	440b      	add	r3, r1
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	441a      	add	r2, r3
		DrawingPoint_t current_point =
 8008d48:	1d3b      	adds	r3, r7, #4
 8008d4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

		// ตั้งค่าปากกาก่อนเคลื่อนที่
		if (current_point.pen_down) {
 8008d50:	7b3b      	ldrb	r3, [r7, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <execute_next_drawing_point+0x48>
			plotter_pen_down();
 8008d56:	f000 fe23 	bl	80099a0 <plotter_pen_down>
 8008d5a:	e001      	b.n	8008d60 <execute_next_drawing_point+0x4c>
		} else {
			plotter_pen_up();
 8008d5c:	f000 fe10 	bl	8009980 <plotter_pen_up>
		}

		// เริ่มการเคลื่อนที่ไปจุดถัดไป
		start_combined_trajectory(current_point.r_mm, current_point.theta_deg);
 8008d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8008d64:	ed97 7a02 	vldr	s14, [r7, #8]
 8008d68:	eef0 0a47 	vmov.f32	s1, s14
 8008d6c:	eeb0 0a67 	vmov.f32	s0, s15
 8008d70:	f7fd fae4 	bl	800633c <start_combined_trajectory>
		current_drawing_sequence.current_point++;
 8008d74:	4b09      	ldr	r3, [pc, #36]	@ (8008d9c <execute_next_drawing_point+0x88>)
 8008d76:	795b      	ldrb	r3, [r3, #5]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	b2da      	uxtb	r2, r3
 8008d7c:	4b07      	ldr	r3, [pc, #28]	@ (8008d9c <execute_next_drawing_point+0x88>)
 8008d7e:	715a      	strb	r2, [r3, #5]
 8008d80:	e009      	b.n	8008d96 <execute_next_drawing_point+0x82>

	} else {
		// เสร็จสิ้นการวาดตัวอักษรนี้
		current_drawing_sequence.sequence_active = false;
 8008d82:	4b06      	ldr	r3, [pc, #24]	@ (8008d9c <execute_next_drawing_point+0x88>)
 8008d84:	2200      	movs	r2, #0
 8008d86:	719a      	strb	r2, [r3, #6]
		current_drawing_sequence.current_point = 0;
 8008d88:	4b04      	ldr	r3, [pc, #16]	@ (8008d9c <execute_next_drawing_point+0x88>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	715a      	strb	r2, [r3, #5]

		// ยกปากกาเมื่อเสร็จ
		plotter_pen_up();
 8008d8e:	f000 fdf7 	bl	8009980 <plotter_pen_up>
 8008d92:	e000      	b.n	8008d96 <execute_next_drawing_point+0x82>
		return;
 8008d94:	bf00      	nop
	}
}
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}
 8008d9c:	200008a8 	.word	0x200008a8

08008da0 <update_character_drawing>:

void update_character_drawing(void) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
	// ถ้ามีลำดับการวาดที่กำลังทำงานและ motion เสร็จแล้ว
	if (current_drawing_sequence.sequence_active
 8008da4:	4b05      	ldr	r3, [pc, #20]	@ (8008dbc <update_character_drawing+0x1c>)
 8008da6:	799b      	ldrb	r3, [r3, #6]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <update_character_drawing+0x18>
			&& motion_sequence_state == MOTION_IDLE) {
 8008dac:	4b04      	ldr	r3, [pc, #16]	@ (8008dc0 <update_character_drawing+0x20>)
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <update_character_drawing+0x18>
		execute_next_drawing_point();
 8008db4:	f7ff ffae 	bl	8008d14 <execute_next_drawing_point>
	}
}
 8008db8:	bf00      	nop
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	200008a8 	.word	0x200008a8
 8008dc0:	20000784 	.word	0x20000784

08008dc4 <draw_letter_F>:

void draw_letter_F(void) {
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	af00      	add	r7, sp, #0
	start_character_drawing(letter_F, sizeof(letter_F) / sizeof(DrawingPoint_t),
 8008dc8:	4a03      	ldr	r2, [pc, #12]	@ (8008dd8 <draw_letter_F+0x14>)
 8008dca:	2108      	movs	r1, #8
 8008dcc:	4803      	ldr	r0, [pc, #12]	@ (8008ddc <draw_letter_F+0x18>)
 8008dce:	f7ff ff67 	bl	8008ca0 <start_character_drawing>
			"F");
}
 8008dd2:	bf00      	nop
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	08014b78 	.word	0x08014b78
 8008ddc:	20000338 	.word	0x20000338

08008de0 <draw_letter_I>:

void draw_letter_I(void) {
 8008de0:	b580      	push	{r7, lr}
 8008de2:	af00      	add	r7, sp, #0
	start_character_drawing(letter_I, sizeof(letter_I) / sizeof(DrawingPoint_t),
 8008de4:	4a03      	ldr	r2, [pc, #12]	@ (8008df4 <draw_letter_I+0x14>)
 8008de6:	2104      	movs	r1, #4
 8008de8:	4803      	ldr	r0, [pc, #12]	@ (8008df8 <draw_letter_I+0x18>)
 8008dea:	f7ff ff59 	bl	8008ca0 <start_character_drawing>
			"I");
}
 8008dee:	bf00      	nop
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop
 8008df4:	08014b7c 	.word	0x08014b7c
 8008df8:	20000398 	.word	0x20000398

08008dfc <draw_letter_B>:

void draw_letter_B(void) {
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	af00      	add	r7, sp, #0
	start_character_drawing(letter_B, sizeof(letter_B) / sizeof(DrawingPoint_t),
 8008e00:	4a03      	ldr	r2, [pc, #12]	@ (8008e10 <draw_letter_B+0x14>)
 8008e02:	210a      	movs	r1, #10
 8008e04:	4803      	ldr	r0, [pc, #12]	@ (8008e14 <draw_letter_B+0x18>)
 8008e06:	f7ff ff4b 	bl	8008ca0 <start_character_drawing>
			"B");
}
 8008e0a:	bf00      	nop
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	08014b80 	.word	0x08014b80
 8008e14:	200003c8 	.word	0x200003c8

08008e18 <draw_letter_O>:

void draw_letter_O(void) {
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	af00      	add	r7, sp, #0
	start_character_drawing(letter_O, sizeof(letter_O) / sizeof(DrawingPoint_t),
 8008e1c:	4a03      	ldr	r2, [pc, #12]	@ (8008e2c <draw_letter_O+0x14>)
 8008e1e:	2107      	movs	r1, #7
 8008e20:	4803      	ldr	r0, [pc, #12]	@ (8008e30 <draw_letter_O+0x18>)
 8008e22:	f7ff ff3d 	bl	8008ca0 <start_character_drawing>
			"O");
}
 8008e26:	bf00      	nop
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	08014b84 	.word	0x08014b84
 8008e30:	20000440 	.word	0x20000440

08008e34 <draw_underscore>:

void draw_underscore(void) {
 8008e34:	b580      	push	{r7, lr}
 8008e36:	af00      	add	r7, sp, #0
	start_character_drawing(letter_underscore,
 8008e38:	4a03      	ldr	r2, [pc, #12]	@ (8008e48 <draw_underscore+0x14>)
 8008e3a:	2104      	movs	r1, #4
 8008e3c:	4803      	ldr	r0, [pc, #12]	@ (8008e4c <draw_underscore+0x18>)
 8008e3e:	f7ff ff2f 	bl	8008ca0 <start_character_drawing>
			sizeof(letter_underscore) / sizeof(DrawingPoint_t), "_");
}
 8008e42:	bf00      	nop
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	08014b88 	.word	0x08014b88
 8008e4c:	20000494 	.word	0x20000494

08008e50 <draw_letter_G>:

void draw_letter_G(void) {
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
	start_character_drawing(letter_G, sizeof(letter_G) / sizeof(DrawingPoint_t),
 8008e54:	4a03      	ldr	r2, [pc, #12]	@ (8008e64 <draw_letter_G+0x14>)
 8008e56:	2108      	movs	r1, #8
 8008e58:	4803      	ldr	r0, [pc, #12]	@ (8008e68 <draw_letter_G+0x18>)
 8008e5a:	f7ff ff21 	bl	8008ca0 <start_character_drawing>
			"G");
}
 8008e5e:	bf00      	nop
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	08014b8c 	.word	0x08014b8c
 8008e68:	200004c4 	.word	0x200004c4

08008e6c <draw_number_0>:

void draw_number_0(void) {
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
	start_character_drawing(number_0, sizeof(number_0) / sizeof(DrawingPoint_t),
 8008e70:	4a03      	ldr	r2, [pc, #12]	@ (8008e80 <draw_number_0+0x14>)
 8008e72:	2107      	movs	r1, #7
 8008e74:	4803      	ldr	r0, [pc, #12]	@ (8008e84 <draw_number_0+0x18>)
 8008e76:	f7ff ff13 	bl	8008ca0 <start_character_drawing>
			"0");
}
 8008e7a:	bf00      	nop
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	08014b90 	.word	0x08014b90
 8008e84:	20000524 	.word	0x20000524

08008e88 <draw_number_1>:

void draw_number_1(void) {
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
	start_character_drawing(number_1, sizeof(number_1) / sizeof(DrawingPoint_t),
 8008e8c:	4a03      	ldr	r2, [pc, #12]	@ (8008e9c <draw_number_1+0x14>)
 8008e8e:	2105      	movs	r1, #5
 8008e90:	4803      	ldr	r0, [pc, #12]	@ (8008ea0 <draw_number_1+0x18>)
 8008e92:	f7ff ff05 	bl	8008ca0 <start_character_drawing>
			"1");
}
 8008e96:	bf00      	nop
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	08014b94 	.word	0x08014b94
 8008ea0:	20000578 	.word	0x20000578

08008ea4 <stop_character_drawing>:

void stop_character_drawing(void) {
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	af00      	add	r7, sp, #0
	current_drawing_sequence.sequence_active = false;
 8008ea8:	4b07      	ldr	r3, [pc, #28]	@ (8008ec8 <stop_character_drawing+0x24>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	719a      	strb	r2, [r3, #6]
	current_drawing_sequence.current_point = 0;
 8008eae:	4b06      	ldr	r3, [pc, #24]	@ (8008ec8 <stop_character_drawing+0x24>)
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	715a      	strb	r2, [r3, #5]
	word_drawing_active = false;
 8008eb4:	4b05      	ldr	r3, [pc, #20]	@ (8008ecc <stop_character_drawing+0x28>)
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	701a      	strb	r2, [r3, #0]
	word_progress = 0;
 8008eba:	4b05      	ldr	r3, [pc, #20]	@ (8008ed0 <stop_character_drawing+0x2c>)
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	701a      	strb	r2, [r3, #0]
	plotter_pen_up();
 8008ec0:	f000 fd5e 	bl	8009980 <plotter_pen_up>
}
 8008ec4:	bf00      	nop
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	200008a8 	.word	0x200008a8
 8008ecc:	200008bc 	.word	0x200008bc
 8008ed0:	200008b4 	.word	0x200008b4

08008ed4 <is_drawing_active>:

bool is_drawing_active(void) {
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
	return current_drawing_sequence.sequence_active;
 8008ed8:	4b03      	ldr	r3, [pc, #12]	@ (8008ee8 <is_drawing_active+0x14>)
 8008eda:	799b      	ldrb	r3, [r3, #6]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	200008a8 	.word	0x200008a8

08008eec <start_word_FIBO_G01>:

void start_word_FIBO_G01(void) {
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
	if (is_emergency_active() || homing_active || joy_mode_active) {
 8008ef0:	f7fe fb76 	bl	80075e0 <is_emergency_active>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d111      	bne.n	8008f1e <start_word_FIBO_G01+0x32>
 8008efa:	4b0a      	ldr	r3, [pc, #40]	@ (8008f24 <start_word_FIBO_G01+0x38>)
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10d      	bne.n	8008f1e <start_word_FIBO_G01+0x32>
 8008f02:	4b09      	ldr	r3, [pc, #36]	@ (8008f28 <start_word_FIBO_G01+0x3c>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d109      	bne.n	8008f1e <start_word_FIBO_G01+0x32>
		return;
	}

//	stop_character_drawing();
//
	word_drawing_active = true;
 8008f0a:	4b08      	ldr	r3, [pc, #32]	@ (8008f2c <start_word_FIBO_G01+0x40>)
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	701a      	strb	r2, [r3, #0]
	word_progress = 0;
 8008f10:	4b07      	ldr	r3, [pc, #28]	@ (8008f30 <start_word_FIBO_G01+0x44>)
 8008f12:	2200      	movs	r2, #0
 8008f14:	701a      	strb	r2, [r3, #0]
	word_delay_timer = 0;
 8008f16:	4b07      	ldr	r3, [pc, #28]	@ (8008f34 <start_word_FIBO_G01+0x48>)
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]
 8008f1c:	e000      	b.n	8008f20 <start_word_FIBO_G01+0x34>
		return;
 8008f1e:	bf00      	nop

}
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	200007e3 	.word	0x200007e3
 8008f28:	200007fd 	.word	0x200007fd
 8008f2c:	200008bc 	.word	0x200008bc
 8008f30:	200008b4 	.word	0x200008b4
 8008f34:	200008b8 	.word	0x200008b8

08008f38 <draw_word_FIBO_G01>:

void draw_word_FIBO_G01(void) {
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
	const uint32_t LETTER_DELAY = 3000; // หน่วงเวลา 3 วินาทีระหว่างตัวอักษร
 8008f3e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008f42:	607b      	str	r3, [r7, #4]

	if (!word_drawing_active) {
 8008f44:	4b45      	ldr	r3, [pc, #276]	@ (800905c <draw_word_FIBO_G01+0x124>)
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	f083 0301 	eor.w	r3, r3, #1
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d17f      	bne.n	8009052 <draw_word_FIBO_G01+0x11a>
		return;
	}

	if (!is_drawing_active() && motion_sequence_state == MOTION_IDLE) {
 8008f52:	f7ff ffbf 	bl	8008ed4 <is_drawing_active>
 8008f56:	4603      	mov	r3, r0
 8008f58:	f083 0301 	eor.w	r3, r3, #1
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d078      	beq.n	8009054 <draw_word_FIBO_G01+0x11c>
 8008f62:	4b3f      	ldr	r3, [pc, #252]	@ (8009060 <draw_word_FIBO_G01+0x128>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d174      	bne.n	8009054 <draw_word_FIBO_G01+0x11c>
		word_delay_timer++;
 8008f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8009064 <draw_word_FIBO_G01+0x12c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	4a3c      	ldr	r2, [pc, #240]	@ (8009064 <draw_word_FIBO_G01+0x12c>)
 8008f72:	6013      	str	r3, [r2, #0]

		if (word_delay_timer >= LETTER_DELAY) {
 8008f74:	4b3b      	ldr	r3, [pc, #236]	@ (8009064 <draw_word_FIBO_G01+0x12c>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d86a      	bhi.n	8009054 <draw_word_FIBO_G01+0x11c>
			word_delay_timer = 0;
 8008f7e:	4b39      	ldr	r3, [pc, #228]	@ (8009064 <draw_word_FIBO_G01+0x12c>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	601a      	str	r2, [r3, #0]

			switch (word_progress) {
 8008f84:	4b38      	ldr	r3, [pc, #224]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	2b07      	cmp	r3, #7
 8008f8a:	d85b      	bhi.n	8009044 <draw_word_FIBO_G01+0x10c>
 8008f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f94 <draw_word_FIBO_G01+0x5c>)
 8008f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f92:	bf00      	nop
 8008f94:	08008fb5 	.word	0x08008fb5
 8008f98:	08008fc7 	.word	0x08008fc7
 8008f9c:	08008fd9 	.word	0x08008fd9
 8008fa0:	08008feb 	.word	0x08008feb
 8008fa4:	08008ffd 	.word	0x08008ffd
 8008fa8:	0800900f 	.word	0x0800900f
 8008fac:	08009021 	.word	0x08009021
 8008fb0:	08009033 	.word	0x08009033
			case 0:
				draw_letter_F();
 8008fb4:	f7ff ff06 	bl	8008dc4 <draw_letter_F>
				word_progress++;
 8008fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	b2da      	uxtb	r2, r3
 8008fc0:	4b29      	ldr	r3, [pc, #164]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8008fc2:	701a      	strb	r2, [r3, #0]
				break;
 8008fc4:	e046      	b.n	8009054 <draw_word_FIBO_G01+0x11c>
			case 1:
				draw_letter_I();
 8008fc6:	f7ff ff0b 	bl	8008de0 <draw_letter_I>
				word_progress++;
 8008fca:	4b27      	ldr	r3, [pc, #156]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	4b25      	ldr	r3, [pc, #148]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8008fd4:	701a      	strb	r2, [r3, #0]
				break;
 8008fd6:	e03d      	b.n	8009054 <draw_word_FIBO_G01+0x11c>
			case 2:
				draw_letter_B();
 8008fd8:	f7ff ff10 	bl	8008dfc <draw_letter_B>
				word_progress++;
 8008fdc:	4b22      	ldr	r3, [pc, #136]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	b2da      	uxtb	r2, r3
 8008fe4:	4b20      	ldr	r3, [pc, #128]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8008fe6:	701a      	strb	r2, [r3, #0]
				break;
 8008fe8:	e034      	b.n	8009054 <draw_word_FIBO_G01+0x11c>
			case 3:
				draw_letter_O();
 8008fea:	f7ff ff15 	bl	8008e18 <draw_letter_O>
				word_progress++;
 8008fee:	4b1e      	ldr	r3, [pc, #120]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	b2da      	uxtb	r2, r3
 8008ff6:	4b1c      	ldr	r3, [pc, #112]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8008ff8:	701a      	strb	r2, [r3, #0]
				break;
 8008ffa:	e02b      	b.n	8009054 <draw_word_FIBO_G01+0x11c>
			case 4:
				draw_underscore();
 8008ffc:	f7ff ff1a 	bl	8008e34 <draw_underscore>
				word_progress++;
 8009000:	4b19      	ldr	r3, [pc, #100]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	3301      	adds	r3, #1
 8009006:	b2da      	uxtb	r2, r3
 8009008:	4b17      	ldr	r3, [pc, #92]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 800900a:	701a      	strb	r2, [r3, #0]
				break;
 800900c:	e022      	b.n	8009054 <draw_word_FIBO_G01+0x11c>
			case 5:
				draw_letter_G();
 800900e:	f7ff ff1f 	bl	8008e50 <draw_letter_G>
				word_progress++;
 8009012:	4b15      	ldr	r3, [pc, #84]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	3301      	adds	r3, #1
 8009018:	b2da      	uxtb	r2, r3
 800901a:	4b13      	ldr	r3, [pc, #76]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 800901c:	701a      	strb	r2, [r3, #0]
				break;
 800901e:	e019      	b.n	8009054 <draw_word_FIBO_G01+0x11c>
			case 6:
				draw_number_0();
 8009020:	f7ff ff24 	bl	8008e6c <draw_number_0>
				word_progress++;
 8009024:	4b10      	ldr	r3, [pc, #64]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	3301      	adds	r3, #1
 800902a:	b2da      	uxtb	r2, r3
 800902c:	4b0e      	ldr	r3, [pc, #56]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 800902e:	701a      	strb	r2, [r3, #0]
				break;
 8009030:	e010      	b.n	8009054 <draw_word_FIBO_G01+0x11c>
			case 7:
				draw_number_1();
 8009032:	f7ff ff29 	bl	8008e88 <draw_number_1>
				word_progress++;
 8009036:	4b0c      	ldr	r3, [pc, #48]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	3301      	adds	r3, #1
 800903c:	b2da      	uxtb	r2, r3
 800903e:	4b0a      	ldr	r3, [pc, #40]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 8009040:	701a      	strb	r2, [r3, #0]
				break;
 8009042:	e007      	b.n	8009054 <draw_word_FIBO_G01+0x11c>
			default:
				// เสร็จสิ้นการวาดคำทั้งหมด
				word_drawing_active = false;
 8009044:	4b05      	ldr	r3, [pc, #20]	@ (800905c <draw_word_FIBO_G01+0x124>)
 8009046:	2200      	movs	r2, #0
 8009048:	701a      	strb	r2, [r3, #0]
				word_progress = 0;
 800904a:	4b07      	ldr	r3, [pc, #28]	@ (8009068 <draw_word_FIBO_G01+0x130>)
 800904c:	2200      	movs	r2, #0
 800904e:	701a      	strb	r2, [r3, #0]
				break;
 8009050:	e000      	b.n	8009054 <draw_word_FIBO_G01+0x11c>
		return;
 8009052:	bf00      	nop
			}
		}
	}
}
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	200008bc 	.word	0x200008bc
 8009060:	20000784 	.word	0x20000784
 8009064:	200008b8 	.word	0x200008b8
 8009068:	200008b4 	.word	0x200008b4

0800906c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800906c:	b480      	push	{r7}
 800906e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8009070:	b672      	cpsid	i
}
 8009072:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8009074:	bf00      	nop
 8009076:	e7fd      	b.n	8009074 <Error_Handler+0x8>

08009078 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8009078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800907c:	ed2d 8b02 	vpush	{d8}
 8009080:	b083      	sub	sp, #12
 8009082:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8009084:	4bc4      	ldr	r3, [pc, #784]	@ (8009398 <plotter_begin+0x320>)
 8009086:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 800908a:	4bc4      	ldr	r3, [pc, #784]	@ (800939c <plotter_begin+0x324>)
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	4618      	mov	r0, r3
 8009090:	f7f7 fa26 	bl	80004e0 <__aeabi_f2d>
 8009094:	4602      	mov	r2, r0
 8009096:	460b      	mov	r3, r1
 8009098:	4620      	mov	r0, r4
 800909a:	4629      	mov	r1, r5
 800909c:	f7f7 fa78 	bl	8000590 <__aeabi_dmul>
 80090a0:	4602      	mov	r2, r0
 80090a2:	460b      	mov	r3, r1
 80090a4:	4610      	mov	r0, r2
 80090a6:	4619      	mov	r1, r3
 80090a8:	f04f 0200 	mov.w	r2, #0
 80090ac:	4bbc      	ldr	r3, [pc, #752]	@ (80093a0 <plotter_begin+0x328>)
 80090ae:	f7f7 fa6f 	bl	8000590 <__aeabi_dmul>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 80090b6:	49b8      	ldr	r1, [pc, #736]	@ (8009398 <plotter_begin+0x320>)
 80090b8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 80090bc:	4bb6      	ldr	r3, [pc, #728]	@ (8009398 <plotter_begin+0x320>)
 80090be:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	f7f7 f8ad 	bl	8000224 <__adddf3>
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	49b2      	ldr	r1, [pc, #712]	@ (8009398 <plotter_begin+0x320>)
 80090d0:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 80090d4:	49b0      	ldr	r1, [pc, #704]	@ (8009398 <plotter_begin+0x320>)
 80090d6:	f04f 0200 	mov.w	r2, #0
 80090da:	4bb2      	ldr	r3, [pc, #712]	@ (80093a4 <plotter_begin+0x32c>)
 80090dc:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 80090e0:	49ad      	ldr	r1, [pc, #692]	@ (8009398 <plotter_begin+0x320>)
 80090e2:	f04f 0200 	mov.w	r2, #0
 80090e6:	4bae      	ldr	r3, [pc, #696]	@ (80093a0 <plotter_begin+0x328>)
 80090e8:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 80090ec:	4bae      	ldr	r3, [pc, #696]	@ (80093a8 <plotter_begin+0x330>)
 80090ee:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 80090f2:	a3a7      	add	r3, pc, #668	@ (adr r3, 8009390 <plotter_begin+0x318>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	f7f7 fa4a 	bl	8000590 <__aeabi_dmul>
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8009100:	49a9      	ldr	r1, [pc, #676]	@ (80093a8 <plotter_begin+0x330>)
 8009102:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 4.0;
 8009106:	49a8      	ldr	r1, [pc, #672]	@ (80093a8 <plotter_begin+0x330>)
 8009108:	f04f 0200 	mov.w	r2, #0
 800910c:	4ba7      	ldr	r3, [pc, #668]	@ (80093ac <plotter_begin+0x334>)
 800910e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 1.0;
 8009112:	49a5      	ldr	r1, [pc, #660]	@ (80093a8 <plotter_begin+0x330>)
 8009114:	f04f 0200 	mov.w	r2, #0
 8009118:	4ba5      	ldr	r3, [pc, #660]	@ (80093b0 <plotter_begin+0x338>)
 800911a:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 800911e:	2100      	movs	r1, #0
 8009120:	48a4      	ldr	r0, [pc, #656]	@ (80093b4 <plotter_begin+0x33c>)
 8009122:	f000 fc4d 	bl	80099c0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8009126:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 80093b8 <plotter_begin+0x340>
 800912a:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 80093bc <plotter_begin+0x344>
 800912e:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 80093f4 <plotter_begin+0x37c>
 8009132:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 80093f4 <plotter_begin+0x37c>
 8009136:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 80093c0 <plotter_begin+0x348>
 800913a:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 80093b8 <plotter_begin+0x340>
 800913e:	489d      	ldr	r0, [pc, #628]	@ (80093b4 <plotter_begin+0x33c>)
 8009140:	f000 fc9c 	bl	8009a7c <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8009144:	2102      	movs	r1, #2
 8009146:	489f      	ldr	r0, [pc, #636]	@ (80093c4 <plotter_begin+0x34c>)
 8009148:	f000 fc3a 	bl	80099c0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 800914c:	ed9f 3a9a 	vldr	s6, [pc, #616]	@ 80093b8 <plotter_begin+0x340>
 8009150:	eddf 2a9a 	vldr	s5, [pc, #616]	@ 80093bc <plotter_begin+0x344>
 8009154:	ed9f 2aa7 	vldr	s4, [pc, #668]	@ 80093f4 <plotter_begin+0x37c>
 8009158:	eddf 1aa6 	vldr	s3, [pc, #664]	@ 80093f4 <plotter_begin+0x37c>
 800915c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009160:	eddf 0a97 	vldr	s1, [pc, #604]	@ 80093c0 <plotter_begin+0x348>
 8009164:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 80093b8 <plotter_begin+0x340>
 8009168:	4896      	ldr	r0, [pc, #600]	@ (80093c4 <plotter_begin+0x34c>)
 800916a:	f000 fcb2 	bl	8009ad2 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 800916e:	2100      	movs	r1, #0
 8009170:	4895      	ldr	r0, [pc, #596]	@ (80093c8 <plotter_begin+0x350>)
 8009172:	f000 fc25 	bl	80099c0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8009176:	eddf 2a95 	vldr	s5, [pc, #596]	@ 80093cc <plotter_begin+0x354>
 800917a:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 80093d0 <plotter_begin+0x358>
 800917e:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 80093f4 <plotter_begin+0x37c>
 8009182:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 80093f4 <plotter_begin+0x37c>
 8009186:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 80093c0 <plotter_begin+0x348>
 800918a:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 80093cc <plotter_begin+0x354>
 800918e:	488e      	ldr	r0, [pc, #568]	@ (80093c8 <plotter_begin+0x350>)
 8009190:	f000 fc74 	bl	8009a7c <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8009194:	2102      	movs	r1, #2
 8009196:	488f      	ldr	r0, [pc, #572]	@ (80093d4 <plotter_begin+0x35c>)
 8009198:	f000 fc12 	bl	80099c0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 800919c:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 80091a0:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 80091a4:	ed9f 2a93 	vldr	s4, [pc, #588]	@ 80093f4 <plotter_begin+0x37c>
 80091a8:	eddf 1a92 	vldr	s3, [pc, #584]	@ 80093f4 <plotter_begin+0x37c>
 80091ac:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 80091b0:	eddf 0a83 	vldr	s1, [pc, #524]	@ 80093c0 <plotter_begin+0x348>
 80091b4:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80091b8:	4886      	ldr	r0, [pc, #536]	@ (80093d4 <plotter_begin+0x35c>)
 80091ba:	f000 fc8a 	bl	8009ad2 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 80091be:	2100      	movs	r1, #0
 80091c0:	4885      	ldr	r0, [pc, #532]	@ (80093d8 <plotter_begin+0x360>)
 80091c2:	f000 fbfd 	bl	80099c0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80091c6:	4b74      	ldr	r3, [pc, #464]	@ (8009398 <plotter_begin+0x320>)
 80091c8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80091cc:	4610      	mov	r0, r2
 80091ce:	4619      	mov	r1, r3
 80091d0:	f7f7 fcc0 	bl	8000b54 <__aeabi_d2f>
 80091d4:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 80091d6:	4b70      	ldr	r3, [pc, #448]	@ (8009398 <plotter_begin+0x320>)
 80091d8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80091dc:	4610      	mov	r0, r2
 80091de:	4619      	mov	r1, r3
 80091e0:	f7f7 fcb8 	bl	8000b54 <__aeabi_d2f>
 80091e4:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 80091ee:	4b6a      	ldr	r3, [pc, #424]	@ (8009398 <plotter_begin+0x320>)
 80091f0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 80091f4:	4610      	mov	r0, r2
 80091f6:	4619      	mov	r1, r3
 80091f8:	f7f7 fcac 	bl	8000b54 <__aeabi_d2f>
 80091fc:	4603      	mov	r3, r0
 80091fe:	ee02 3a90 	vmov	s5, r3
 8009202:	eeb0 2a48 	vmov.f32	s4, s16
 8009206:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 80093f4 <plotter_begin+0x37c>
 800920a:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 80093f4 <plotter_begin+0x37c>
 800920e:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 80093c0 <plotter_begin+0x348>
 8009212:	ee00 4a10 	vmov	s0, r4
 8009216:	4870      	ldr	r0, [pc, #448]	@ (80093d8 <plotter_begin+0x360>)
 8009218:	f000 fc30 	bl	8009a7c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 800921c:	2102      	movs	r1, #2
 800921e:	486f      	ldr	r0, [pc, #444]	@ (80093dc <plotter_begin+0x364>)
 8009220:	f000 fbce 	bl	80099c0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8009224:	4b5c      	ldr	r3, [pc, #368]	@ (8009398 <plotter_begin+0x320>)
 8009226:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800922a:	4610      	mov	r0, r2
 800922c:	4619      	mov	r1, r3
 800922e:	f7f7 fc91 	bl	8000b54 <__aeabi_d2f>
 8009232:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8009234:	4b58      	ldr	r3, [pc, #352]	@ (8009398 <plotter_begin+0x320>)
 8009236:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800923a:	4610      	mov	r0, r2
 800923c:	4619      	mov	r1, r3
 800923e:	f7f7 fc89 	bl	8000b54 <__aeabi_d2f>
 8009242:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8009244:	ee07 3a90 	vmov	s15, r3
 8009248:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 800924c:	4b52      	ldr	r3, [pc, #328]	@ (8009398 <plotter_begin+0x320>)
 800924e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8009252:	4610      	mov	r0, r2
 8009254:	4619      	mov	r1, r3
 8009256:	f7f7 fc7d 	bl	8000b54 <__aeabi_d2f>
 800925a:	4603      	mov	r3, r0
 800925c:	ee03 3a10 	vmov	s6, r3
 8009260:	eef0 2a48 	vmov.f32	s5, s16
 8009264:	ed9f 2a63 	vldr	s4, [pc, #396]	@ 80093f4 <plotter_begin+0x37c>
 8009268:	eddf 1a62 	vldr	s3, [pc, #392]	@ 80093f4 <plotter_begin+0x37c>
 800926c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009270:	eddf 0a53 	vldr	s1, [pc, #332]	@ 80093c0 <plotter_begin+0x348>
 8009274:	ee00 4a10 	vmov	s0, r4
 8009278:	4858      	ldr	r0, [pc, #352]	@ (80093dc <plotter_begin+0x364>)
 800927a:	f000 fc2a 	bl	8009ad2 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 800927e:	2100      	movs	r1, #0
 8009280:	4857      	ldr	r0, [pc, #348]	@ (80093e0 <plotter_begin+0x368>)
 8009282:	f000 fb9d 	bl	80099c0 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8009286:	4b48      	ldr	r3, [pc, #288]	@ (80093a8 <plotter_begin+0x330>)
 8009288:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800928c:	4610      	mov	r0, r2
 800928e:	4619      	mov	r1, r3
 8009290:	f7f7 fc60 	bl	8000b54 <__aeabi_d2f>
 8009294:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8009296:	4b44      	ldr	r3, [pc, #272]	@ (80093a8 <plotter_begin+0x330>)
 8009298:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 800929c:	4610      	mov	r0, r2
 800929e:	4619      	mov	r1, r3
 80092a0:	f7f7 fc58 	bl	8000b54 <__aeabi_d2f>
 80092a4:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80092a6:	ee07 3a90 	vmov	s15, r3
 80092aa:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 80092ae:	4b3e      	ldr	r3, [pc, #248]	@ (80093a8 <plotter_begin+0x330>)
 80092b0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80092b4:	4610      	mov	r0, r2
 80092b6:	4619      	mov	r1, r3
 80092b8:	f7f7 fc4c 	bl	8000b54 <__aeabi_d2f>
 80092bc:	4603      	mov	r3, r0
 80092be:	ee02 3a90 	vmov	s5, r3
 80092c2:	eeb0 2a48 	vmov.f32	s4, s16
 80092c6:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 80093f4 <plotter_begin+0x37c>
 80092ca:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 80093f4 <plotter_begin+0x37c>
 80092ce:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 80093c0 <plotter_begin+0x348>
 80092d2:	ee00 4a10 	vmov	s0, r4
 80092d6:	4842      	ldr	r0, [pc, #264]	@ (80093e0 <plotter_begin+0x368>)
 80092d8:	f000 fbd0 	bl	8009a7c <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 80092dc:	2102      	movs	r1, #2
 80092de:	4841      	ldr	r0, [pc, #260]	@ (80093e4 <plotter_begin+0x36c>)
 80092e0:	f000 fb6e 	bl	80099c0 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 80092e4:	4b30      	ldr	r3, [pc, #192]	@ (80093a8 <plotter_begin+0x330>)
 80092e6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80092ea:	4610      	mov	r0, r2
 80092ec:	4619      	mov	r1, r3
 80092ee:	f7f7 fc31 	bl	8000b54 <__aeabi_d2f>
 80092f2:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 80092f4:	4b2c      	ldr	r3, [pc, #176]	@ (80093a8 <plotter_begin+0x330>)
 80092f6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80092fa:	4610      	mov	r0, r2
 80092fc:	4619      	mov	r1, r3
 80092fe:	f7f7 fc29 	bl	8000b54 <__aeabi_d2f>
 8009302:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8009304:	ee07 3a90 	vmov	s15, r3
 8009308:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 800930c:	4b26      	ldr	r3, [pc, #152]	@ (80093a8 <plotter_begin+0x330>)
 800930e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8009312:	4610      	mov	r0, r2
 8009314:	4619      	mov	r1, r3
 8009316:	f7f7 fc1d 	bl	8000b54 <__aeabi_d2f>
 800931a:	4603      	mov	r3, r0
 800931c:	ee03 3a10 	vmov	s6, r3
 8009320:	eef0 2a48 	vmov.f32	s5, s16
 8009324:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 80093f4 <plotter_begin+0x37c>
 8009328:	eddf 1a32 	vldr	s3, [pc, #200]	@ 80093f4 <plotter_begin+0x37c>
 800932c:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8009330:	eddf 0a23 	vldr	s1, [pc, #140]	@ 80093c0 <plotter_begin+0x348>
 8009334:	ee00 4a10 	vmov	s0, r4
 8009338:	482a      	ldr	r0, [pc, #168]	@ (80093e4 <plotter_begin+0x36c>)
 800933a:	f000 fbca 	bl	8009ad2 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 800933e:	482a      	ldr	r0, [pc, #168]	@ (80093e8 <plotter_begin+0x370>)
 8009340:	f7fb fbac 	bl	8004a9c <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8009344:	4b15      	ldr	r3, [pc, #84]	@ (800939c <plotter_begin+0x324>)
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	4618      	mov	r0, r3
 800934a:	f7f7 f8c9 	bl	80004e0 <__aeabi_f2d>
 800934e:	4602      	mov	r2, r0
 8009350:	460b      	mov	r3, r1
 8009352:	f7f6 ff67 	bl	8000224 <__adddf3>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4610      	mov	r0, r2
 800935c:	4619      	mov	r1, r3
 800935e:	f04f 0200 	mov.w	r2, #0
 8009362:	4b0f      	ldr	r3, [pc, #60]	@ (80093a0 <plotter_begin+0x328>)
 8009364:	f7f7 f914 	bl	8000590 <__aeabi_dmul>
 8009368:	4602      	mov	r2, r0
 800936a:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 800936c:	4610      	mov	r0, r2
 800936e:	4619      	mov	r1, r3
 8009370:	f7f7 fbf0 	bl	8000b54 <__aeabi_d2f>
 8009374:	4603      	mov	r3, r0
 8009376:	ee00 3a90 	vmov	s1, r3
 800937a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800937e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009382:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009386:	4919      	ldr	r1, [pc, #100]	@ (80093ec <plotter_begin+0x374>)
 8009388:	4819      	ldr	r0, [pc, #100]	@ (80093f0 <plotter_begin+0x378>)
 800938a:	f7fa fd0b 	bl	8003da4 <QEI_init>
 800938e:	e033      	b.n	80093f8 <plotter_begin+0x380>
 8009390:	55555555 	.word	0x55555555
 8009394:	3fe55555 	.word	0x3fe55555
 8009398:	20000080 	.word	0x20000080
 800939c:	20000100 	.word	0x20000100
 80093a0:	408f4000 	.word	0x408f4000
 80093a4:	407f4000 	.word	0x407f4000
 80093a8:	20000000 	.word	0x20000000
 80093ac:	40100000 	.word	0x40100000
 80093b0:	3ff00000 	.word	0x3ff00000
 80093b4:	20000b50 	.word	0x20000b50
 80093b8:	477fff00 	.word	0x477fff00
 80093bc:	c77fff00 	.word	0xc77fff00
 80093c0:	3dcccccd 	.word	0x3dcccccd
 80093c4:	20000b94 	.word	0x20000b94
 80093c8:	20000bd8 	.word	0x20000bd8
 80093cc:	43480000 	.word	0x43480000
 80093d0:	c3480000 	.word	0xc3480000
 80093d4:	20000c1c 	.word	0x20000c1c
 80093d8:	20000c60 	.word	0x20000c60
 80093dc:	20000ca4 	.word	0x20000ca4
 80093e0:	20000ce8 	.word	0x20000ce8
 80093e4:	20000d2c 	.word	0x20000d2c
 80093e8:	20000d70 	.word	0x20000d70
 80093ec:	200021a0 	.word	0x200021a0
 80093f0:	2000097c 	.word	0x2000097c
 80093f4:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 80093f8:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 80093f4 <plotter_begin+0x37c>
 80093fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8009400:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009404:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009408:	49b9      	ldr	r1, [pc, #740]	@ (80096f0 <plotter_begin+0x678>)
 800940a:	48ba      	ldr	r0, [pc, #744]	@ (80096f4 <plotter_begin+0x67c>)
 800940c:	f7fa fcca 	bl	8003da4 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8009410:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009414:	9300      	str	r3, [sp, #0]
 8009416:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800941a:	2204      	movs	r2, #4
 800941c:	49b6      	ldr	r1, [pc, #728]	@ (80096f8 <plotter_begin+0x680>)
 800941e:	48b7      	ldr	r0, [pc, #732]	@ (80096fc <plotter_begin+0x684>)
 8009420:	f7f7 ff8c 	bl	800133c <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8009424:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	4bb5      	ldr	r3, [pc, #724]	@ (8009700 <plotter_begin+0x688>)
 800942c:	2200      	movs	r2, #0
 800942e:	49b2      	ldr	r1, [pc, #712]	@ (80096f8 <plotter_begin+0x680>)
 8009430:	48b4      	ldr	r0, [pc, #720]	@ (8009704 <plotter_begin+0x68c>)
 8009432:	f7f7 ff83 	bl	800133c <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8009436:	220c      	movs	r2, #12
 8009438:	49b3      	ldr	r1, [pc, #716]	@ (8009708 <plotter_begin+0x690>)
 800943a:	48b4      	ldr	r0, [pc, #720]	@ (800970c <plotter_begin+0x694>)
 800943c:	f7fa fa84 	bl	8003948 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8009440:	eddf 0ab3 	vldr	s1, [pc, #716]	@ 8009710 <plotter_begin+0x698>
 8009444:	ed9f 0ab3 	vldr	s0, [pc, #716]	@ 8009714 <plotter_begin+0x69c>
 8009448:	48ac      	ldr	r0, [pc, #688]	@ (80096fc <plotter_begin+0x684>)
 800944a:	f7f7 ff9b 	bl	8001384 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 800944e:	eddf 0ab0 	vldr	s1, [pc, #704]	@ 8009710 <plotter_begin+0x698>
 8009452:	ed9f 0ab0 	vldr	s0, [pc, #704]	@ 8009714 <plotter_begin+0x69c>
 8009456:	48ab      	ldr	r0, [pc, #684]	@ (8009704 <plotter_begin+0x68c>)
 8009458:	f7f7 ff94 	bl	8001384 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 100,
			ZGX45RGG_400RPM_Constant.sd_max);
 800945c:	4bae      	ldr	r3, [pc, #696]	@ (8009718 <plotter_begin+0x6a0>)
 800945e:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 100,
 8009462:	4610      	mov	r0, r2
 8009464:	4619      	mov	r1, r3
 8009466:	f7f7 fb75 	bl	8000b54 <__aeabi_d2f>
 800946a:	4603      	mov	r3, r0
 800946c:	ee01 3a90 	vmov	s3, r3
 8009470:	ed9f 1aaa 	vldr	s2, [pc, #680]	@ 800971c <plotter_begin+0x6a4>
 8009474:	eddf 0aaa 	vldr	s1, [pc, #680]	@ 8009720 <plotter_begin+0x6a8>
 8009478:	ed9f 0aaa 	vldr	s0, [pc, #680]	@ 8009724 <plotter_begin+0x6ac>
 800947c:	48aa      	ldr	r0, [pc, #680]	@ (8009728 <plotter_begin+0x6b0>)
 800947e:	f7f7 fe98 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8009482:	4ba5      	ldr	r3, [pc, #660]	@ (8009718 <plotter_begin+0x6a0>)
 8009484:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8009488:	4610      	mov	r0, r2
 800948a:	4619      	mov	r1, r3
 800948c:	f7f7 fb62 	bl	8000b54 <__aeabi_d2f>
 8009490:	4603      	mov	r3, r0
 8009492:	ee01 3a90 	vmov	s3, r3
 8009496:	ed9f 1a9e 	vldr	s2, [pc, #632]	@ 8009710 <plotter_begin+0x698>
 800949a:	eddf 0aa4 	vldr	s1, [pc, #656]	@ 800972c <plotter_begin+0x6b4>
 800949e:	ed9f 0aa4 	vldr	s0, [pc, #656]	@ 8009730 <plotter_begin+0x6b8>
 80094a2:	48a4      	ldr	r0, [pc, #656]	@ (8009734 <plotter_begin+0x6bc>)
 80094a4:	f7f7 fe85 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.001, 700,
			ZGX45RGG_150RPM_Constant.qd_max);
 80094a8:	4ba3      	ldr	r3, [pc, #652]	@ (8009738 <plotter_begin+0x6c0>)
 80094aa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 250, 0.001, 700,
 80094ae:	4610      	mov	r0, r2
 80094b0:	4619      	mov	r1, r3
 80094b2:	f7f7 fb4f 	bl	8000b54 <__aeabi_d2f>
 80094b6:	4603      	mov	r3, r0
 80094b8:	ee01 3a90 	vmov	s3, r3
 80094bc:	ed9f 1a9f 	vldr	s2, [pc, #636]	@ 800973c <plotter_begin+0x6c4>
 80094c0:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 8009740 <plotter_begin+0x6c8>
 80094c4:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8009744 <plotter_begin+0x6cc>
 80094c8:	489f      	ldr	r0, [pc, #636]	@ (8009748 <plotter_begin+0x6d0>)
 80094ca:	f7f7 fe72 	bl	80011b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 25, 3000,
			ZGX45RGG_150RPM_Constant.U_max);
 80094ce:	4b9a      	ldr	r3, [pc, #616]	@ (8009738 <plotter_begin+0x6c0>)
 80094d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2275, 25, 3000,
 80094d4:	4610      	mov	r0, r2
 80094d6:	4619      	mov	r1, r3
 80094d8:	f7f7 fb3c 	bl	8000b54 <__aeabi_d2f>
 80094dc:	4603      	mov	r3, r0
 80094de:	ee01 3a90 	vmov	s3, r3
 80094e2:	ed9f 1a9a 	vldr	s2, [pc, #616]	@ 800974c <plotter_begin+0x6d4>
 80094e6:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 80094ea:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 8009750 <plotter_begin+0x6d8>
 80094ee:	4899      	ldr	r0, [pc, #612]	@ (8009754 <plotter_begin+0x6dc>)
 80094f0:	f7f7 fe5f 	bl	80011b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
			ZGX45RGG_150RPM_Constant.U_max);
 80094f4:	4b90      	ldr	r3, [pc, #576]	@ (8009738 <plotter_begin+0x6c0>)
 80094f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_joy_pid, 7500, 100, 2000,
 80094fa:	4610      	mov	r0, r2
 80094fc:	4619      	mov	r1, r3
 80094fe:	f7f7 fb29 	bl	8000b54 <__aeabi_d2f>
 8009502:	4603      	mov	r3, r0
 8009504:	ee01 3a90 	vmov	s3, r3
 8009508:	ed9f 1a82 	vldr	s2, [pc, #520]	@ 8009714 <plotter_begin+0x69c>
 800950c:	eddf 0a83 	vldr	s1, [pc, #524]	@ 800971c <plotter_begin+0x6a4>
 8009510:	ed9f 0a91 	vldr	s0, [pc, #580]	@ 8009758 <plotter_begin+0x6e0>
 8009514:	4891      	ldr	r0, [pc, #580]	@ (800975c <plotter_begin+0x6e4>)
 8009516:	f7f7 fe4c 	bl	80011b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 800951a:	4987      	ldr	r1, [pc, #540]	@ (8009738 <plotter_begin+0x6c0>)
 800951c:	4890      	ldr	r0, [pc, #576]	@ (8009760 <plotter_begin+0x6e8>)
 800951e:	f7f8 f80b 	bl	8001538 <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8009522:	497d      	ldr	r1, [pc, #500]	@ (8009718 <plotter_begin+0x6a0>)
 8009524:	488f      	ldr	r0, [pc, #572]	@ (8009764 <plotter_begin+0x6ec>)
 8009526:	f7f8 f985 	bl	8001834 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 800952a:	4a8f      	ldr	r2, [pc, #572]	@ (8009768 <plotter_begin+0x6f0>)
 800952c:	4982      	ldr	r1, [pc, #520]	@ (8009738 <plotter_begin+0x6c0>)
 800952e:	488f      	ldr	r0, [pc, #572]	@ (800976c <plotter_begin+0x6f4>)
 8009530:	f7f8 f891 	bl	8001656 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8009534:	4a8c      	ldr	r2, [pc, #560]	@ (8009768 <plotter_begin+0x6f0>)
 8009536:	4978      	ldr	r1, [pc, #480]	@ (8009718 <plotter_begin+0x6a0>)
 8009538:	488d      	ldr	r0, [pc, #564]	@ (8009770 <plotter_begin+0x6f8>)
 800953a:	f7f8 fa1d 	bl	8001978 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 800953e:	2302      	movs	r3, #2
 8009540:	9300      	str	r3, [sp, #0]
 8009542:	eddf 0a8c 	vldr	s1, [pc, #560]	@ 8009774 <plotter_begin+0x6fc>
 8009546:	ed9f 0a8c 	vldr	s0, [pc, #560]	@ 8009778 <plotter_begin+0x700>
 800954a:	2364      	movs	r3, #100	@ 0x64
 800954c:	4a8b      	ldr	r2, [pc, #556]	@ (800977c <plotter_begin+0x704>)
 800954e:	498c      	ldr	r1, [pc, #560]	@ (8009780 <plotter_begin+0x708>)
 8009550:	488c      	ldr	r0, [pc, #560]	@ (8009784 <plotter_begin+0x70c>)
 8009552:	f7f7 fce5 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8009556:	2105      	movs	r1, #5
 8009558:	ed9f 0a8b 	vldr	s0, [pc, #556]	@ 8009788 <plotter_begin+0x710>
 800955c:	4889      	ldr	r0, [pc, #548]	@ (8009784 <plotter_begin+0x70c>)
 800955e:	f7f7 fd91 	bl	8001084 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8009562:	4888      	ldr	r0, [pc, #544]	@ (8009784 <plotter_begin+0x70c>)
 8009564:	f7f7 fd34 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8009568:	eddf 0a88 	vldr	s1, [pc, #544]	@ 800978c <plotter_begin+0x714>
 800956c:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009570:	211f      	movs	r1, #31
 8009572:	4887      	ldr	r0, [pc, #540]	@ (8009790 <plotter_begin+0x718>)
 8009574:	f7f8 fadc 	bl	8001b30 <FIR_init>
	FIR_init(&revolute_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8009578:	eddf 0a84 	vldr	s1, [pc, #528]	@ 800978c <plotter_begin+0x714>
 800957c:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009580:	211f      	movs	r1, #31
 8009582:	4884      	ldr	r0, [pc, #528]	@ (8009794 <plotter_begin+0x71c>)
 8009584:	f7f8 fad4 	bl	8001b30 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8009588:	4b63      	ldr	r3, [pc, #396]	@ (8009718 <plotter_begin+0x6a0>)
 800958a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800958e:	4610      	mov	r0, r2
 8009590:	4619      	mov	r1, r3
 8009592:	f7f7 fadf 	bl	8000b54 <__aeabi_d2f>
 8009596:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8009598:	4b5f      	ldr	r3, [pc, #380]	@ (8009718 <plotter_begin+0x6a0>)
 800959a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800959e:	4610      	mov	r0, r2
 80095a0:	4619      	mov	r1, r3
 80095a2:	f7f7 fad7 	bl	8000b54 <__aeabi_d2f>
 80095a6:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 80095a8:	4b5b      	ldr	r3, [pc, #364]	@ (8009718 <plotter_begin+0x6a0>)
 80095aa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80095ae:	4610      	mov	r0, r2
 80095b0:	4619      	mov	r1, r3
 80095b2:	f7f7 facf 	bl	8000b54 <__aeabi_d2f>
 80095b6:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80095b8:	4b57      	ldr	r3, [pc, #348]	@ (8009718 <plotter_begin+0x6a0>)
 80095ba:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80095be:	4610      	mov	r0, r2
 80095c0:	4619      	mov	r1, r3
 80095c2:	f7f7 fac7 	bl	8000b54 <__aeabi_d2f>
 80095c6:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 80095c8:	4b53      	ldr	r3, [pc, #332]	@ (8009718 <plotter_begin+0x6a0>)
 80095ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80095ce:	4610      	mov	r0, r2
 80095d0:	4619      	mov	r1, r3
 80095d2:	f7f7 fabf 	bl	8000b54 <__aeabi_d2f>
 80095d6:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 80095d8:	4b4f      	ldr	r3, [pc, #316]	@ (8009718 <plotter_begin+0x6a0>)
 80095da:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 80095de:	4610      	mov	r0, r2
 80095e0:	4619      	mov	r1, r3
 80095e2:	f7f7 fab7 	bl	8000b54 <__aeabi_d2f>
 80095e6:	4603      	mov	r3, r0
 80095e8:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 80095ec:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 80095f0:	ee03 3a10 	vmov	s6, r3
 80095f4:	ee02 9a90 	vmov	s5, r9
 80095f8:	ee02 8a10 	vmov	s4, r8
 80095fc:	ee01 6a90 	vmov	s3, r6
 8009600:	ee01 5a10 	vmov	s2, r5
 8009604:	ee00 4a90 	vmov	s1, r4
 8009608:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8009740 <plotter_begin+0x6c8>
 800960c:	4862      	ldr	r0, [pc, #392]	@ (8009798 <plotter_begin+0x720>)
 800960e:	f7f8 ff87 	bl	8002520 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009612:	4b49      	ldr	r3, [pc, #292]	@ (8009738 <plotter_begin+0x6c0>)
 8009614:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8009618:	4610      	mov	r0, r2
 800961a:	4619      	mov	r1, r3
 800961c:	f7f7 fa9a 	bl	8000b54 <__aeabi_d2f>
 8009620:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8009622:	4b45      	ldr	r3, [pc, #276]	@ (8009738 <plotter_begin+0x6c0>)
 8009624:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009628:	4610      	mov	r0, r2
 800962a:	4619      	mov	r1, r3
 800962c:	f7f7 fa92 	bl	8000b54 <__aeabi_d2f>
 8009630:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8009632:	4b41      	ldr	r3, [pc, #260]	@ (8009738 <plotter_begin+0x6c0>)
 8009634:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009638:	4610      	mov	r0, r2
 800963a:	4619      	mov	r1, r3
 800963c:	f7f7 fa8a 	bl	8000b54 <__aeabi_d2f>
 8009640:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8009642:	4b3d      	ldr	r3, [pc, #244]	@ (8009738 <plotter_begin+0x6c0>)
 8009644:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8009648:	a327      	add	r3, pc, #156	@ (adr r3, 80096e8 <plotter_begin+0x670>)
 800964a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964e:	f7f6 ff9f 	bl	8000590 <__aeabi_dmul>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009656:	4610      	mov	r0, r2
 8009658:	4619      	mov	r1, r3
 800965a:	f7f7 fa7b 	bl	8000b54 <__aeabi_d2f>
 800965e:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8009660:	4b35      	ldr	r3, [pc, #212]	@ (8009738 <plotter_begin+0x6c0>)
 8009662:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009666:	4610      	mov	r0, r2
 8009668:	4619      	mov	r1, r3
 800966a:	f7f7 fa73 	bl	8000b54 <__aeabi_d2f>
 800966e:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 8009670:	4b31      	ldr	r3, [pc, #196]	@ (8009738 <plotter_begin+0x6c0>)
 8009672:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8009676:	4610      	mov	r0, r2
 8009678:	4619      	mov	r1, r3
 800967a:	f7f7 fa6b 	bl	8000b54 <__aeabi_d2f>
 800967e:	4603      	mov	r3, r0
 8009680:	4946      	ldr	r1, [pc, #280]	@ (800979c <plotter_begin+0x724>)
 8009682:	4847      	ldr	r0, [pc, #284]	@ (80097a0 <plotter_begin+0x728>)
 8009684:	ed9f 3a2e 	vldr	s6, [pc, #184]	@ 8009740 <plotter_begin+0x6c8>
 8009688:	ee02 3a90 	vmov	s5, r3
 800968c:	ee02 9a10 	vmov	s4, r9
 8009690:	ee01 8a90 	vmov	s3, r8
 8009694:	ee01 6a10 	vmov	s2, r6
 8009698:	ee00 5a90 	vmov	s1, r5
 800969c:	ee00 4a10 	vmov	s0, r4
 80096a0:	f7fa f8ea 	bl	8003878 <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 80096a4:	eddf 0a3f 	vldr	s1, [pc, #252]	@ 80097a4 <plotter_begin+0x72c>
 80096a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80096ac:	4a3b      	ldr	r2, [pc, #236]	@ (800979c <plotter_begin+0x724>)
 80096ae:	493c      	ldr	r1, [pc, #240]	@ (80097a0 <plotter_begin+0x728>)
 80096b0:	483d      	ldr	r0, [pc, #244]	@ (80097a8 <plotter_begin+0x730>)
 80096b2:	f7fb fe4f 	bl	8005354 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80096b6:	23c8      	movs	r3, #200	@ 0xc8
 80096b8:	9301      	str	r3, [sp, #4]
 80096ba:	2315      	movs	r3, #21
 80096bc:	9300      	str	r3, [sp, #0]
 80096be:	4b3b      	ldr	r3, [pc, #236]	@ (80097ac <plotter_begin+0x734>)
 80096c0:	4a3b      	ldr	r2, [pc, #236]	@ (80097b0 <plotter_begin+0x738>)
 80096c2:	493c      	ldr	r1, [pc, #240]	@ (80097b4 <plotter_begin+0x73c>)
 80096c4:	483c      	ldr	r0, [pc, #240]	@ (80097b8 <plotter_begin+0x740>)
 80096c6:	f7f8 fc23 	bl	8001f10 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80096ca:	483c      	ldr	r0, [pc, #240]	@ (80097bc <plotter_begin+0x744>)
 80096cc:	f004 fdfe 	bl	800e2cc <HAL_TIM_Base_Start_IT>

	plotter_reset();
 80096d0:	f000 f876 	bl	80097c0 <plotter_reset>
}
 80096d4:	bf00      	nop
 80096d6:	3704      	adds	r7, #4
 80096d8:	46bd      	mov	sp, r7
 80096da:	ecbd 8b02 	vpop	{d8}
 80096de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096e2:	bf00      	nop
 80096e4:	f3af 8000 	nop.w
 80096e8:	9999999a 	.word	0x9999999a
 80096ec:	40019999 	.word	0x40019999
 80096f0:	200020d4 	.word	0x200020d4
 80096f4:	200009d8 	.word	0x200009d8
 80096f8:	2000226c 	.word	0x2000226c
 80096fc:	200008e4 	.word	0x200008e4
 8009700:	48000800 	.word	0x48000800
 8009704:	20000930 	.word	0x20000930
 8009708:	20001e70 	.word	0x20001e70
 800970c:	20000b14 	.word	0x20000b14
 8009710:	00000000 	.word	0x00000000
 8009714:	44fa0000 	.word	0x44fa0000
 8009718:	20000080 	.word	0x20000080
 800971c:	42c80000 	.word	0x42c80000
 8009720:	2edbe6ff 	.word	0x2edbe6ff
 8009724:	42960000 	.word	0x42960000
 8009728:	20000a34 	.word	0x20000a34
 800972c:	3727c5ac 	.word	0x3727c5ac
 8009730:	43160000 	.word	0x43160000
 8009734:	20000a5c 	.word	0x20000a5c
 8009738:	20000000 	.word	0x20000000
 800973c:	442f0000 	.word	0x442f0000
 8009740:	3a83126f 	.word	0x3a83126f
 8009744:	437a0000 	.word	0x437a0000
 8009748:	20000a84 	.word	0x20000a84
 800974c:	453b8000 	.word	0x453b8000
 8009750:	450e3000 	.word	0x450e3000
 8009754:	20000aac 	.word	0x20000aac
 8009758:	45ea6000 	.word	0x45ea6000
 800975c:	20000ad4 	.word	0x20000ad4
 8009760:	20000b08 	.word	0x20000b08
 8009764:	20000afc 	.word	0x20000afc
 8009768:	20000100 	.word	0x20000100
 800976c:	20000b0c 	.word	0x20000b0c
 8009770:	20000b00 	.word	0x20000b00
 8009774:	457ff000 	.word	0x457ff000
 8009778:	40533333 	.word	0x40533333
 800977c:	20000fe0 	.word	0x20000fe0
 8009780:	20000630 	.word	0x20000630
 8009784:	20000b2c 	.word	0x20000b2c
 8009788:	45000000 	.word	0x45000000
 800978c:	447a0000 	.word	0x447a0000
 8009790:	20000fc8 	.word	0x20000fc8
 8009794:	20000fd4 	.word	0x20000fd4
 8009798:	20001710 	.word	0x20001710
 800979c:	20001e3c 	.word	0x20001e3c
 80097a0:	20001dfc 	.word	0x20001dfc
 80097a4:	3d4ccccd 	.word	0x3d4ccccd
 80097a8:	20001a7c 	.word	0x20001a7c
 80097ac:	20001580 	.word	0x20001580
 80097b0:	20002338 	.word	0x20002338
 80097b4:	200024d0 	.word	0x200024d0
 80097b8:	200010a8 	.word	0x200010a8
 80097bc:	20001f3c 	.word	0x20001f3c

080097c0 <plotter_reset>:

void plotter_reset() {
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 80097c4:	4819      	ldr	r0, [pc, #100]	@ (800982c <plotter_reset+0x6c>)
 80097c6:	f7fa fd6f 	bl	80042a8 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 80097ca:	4818      	ldr	r0, [pc, #96]	@ (800982c <plotter_reset+0x6c>)
 80097cc:	f7fa fd6c 	bl	80042a8 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 80097d0:	4b16      	ldr	r3, [pc, #88]	@ (800982c <plotter_reset+0x6c>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 80097d6:	4b15      	ldr	r3, [pc, #84]	@ (800982c <plotter_reset+0x6c>)
 80097d8:	f04f 0200 	mov.w	r2, #0
 80097dc:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 80097de:	4b13      	ldr	r3, [pc, #76]	@ (800982c <plotter_reset+0x6c>)
 80097e0:	2200      	movs	r2, #0
 80097e2:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 80097e4:	4b11      	ldr	r3, [pc, #68]	@ (800982c <plotter_reset+0x6c>)
 80097e6:	f04f 0200 	mov.w	r2, #0
 80097ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 80097ec:	4b0f      	ldr	r3, [pc, #60]	@ (800982c <plotter_reset+0x6c>)
 80097ee:	f04f 0200 	mov.w	r2, #0
 80097f2:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 80097f4:	4b0d      	ldr	r3, [pc, #52]	@ (800982c <plotter_reset+0x6c>)
 80097f6:	f04f 0200 	mov.w	r2, #0
 80097fa:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 80097fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009830 <plotter_reset+0x70>)
 80097fe:	2200      	movs	r2, #0
 8009800:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 8009802:	4b0b      	ldr	r3, [pc, #44]	@ (8009830 <plotter_reset+0x70>)
 8009804:	f04f 0200 	mov.w	r2, #0
 8009808:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 800980a:	4b09      	ldr	r3, [pc, #36]	@ (8009830 <plotter_reset+0x70>)
 800980c:	2200      	movs	r2, #0
 800980e:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8009810:	4b07      	ldr	r3, [pc, #28]	@ (8009830 <plotter_reset+0x70>)
 8009812:	f04f 0200 	mov.w	r2, #0
 8009816:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8009818:	4b05      	ldr	r3, [pc, #20]	@ (8009830 <plotter_reset+0x70>)
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 8009820:	4b03      	ldr	r3, [pc, #12]	@ (8009830 <plotter_reset+0x70>)
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8009828:	bf00      	nop
 800982a:	bd80      	pop	{r7, pc}
 800982c:	2000097c 	.word	0x2000097c
 8009830:	200009d8 	.word	0x200009d8

08009834 <plotter_update_sensors>:

void plotter_update_sensors() {
 8009834:	b580      	push	{r7, lr}
 8009836:	af00      	add	r7, sp, #0
	joystick_x = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_X_CHANNEL, -50,
 8009838:	eddf 0a41 	vldr	s1, [pc, #260]	@ 8009940 <plotter_update_sensors+0x10c>
 800983c:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8009944 <plotter_update_sensors+0x110>
 8009840:	2106      	movs	r1, #6
 8009842:	4841      	ldr	r0, [pc, #260]	@ (8009948 <plotter_update_sensors+0x114>)
 8009844:	f7f7 fc48 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009848:	eef0 7a40 	vmov.f32	s15, s0
 800984c:	4b3f      	ldr	r3, [pc, #252]	@ (800994c <plotter_update_sensors+0x118>)
 800984e:	edc3 7a00 	vstr	s15, [r3]
			50);
	joystick_y = ADC_DMA_GetJoystickValue(&joystick, JOYSTICK_Y_CHANNEL, -50,
 8009852:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8009940 <plotter_update_sensors+0x10c>
 8009856:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8009944 <plotter_update_sensors+0x110>
 800985a:	2107      	movs	r1, #7
 800985c:	483a      	ldr	r0, [pc, #232]	@ (8009948 <plotter_update_sensors+0x114>)
 800985e:	f7f7 fc3b 	bl	80010d8 <ADC_DMA_GetJoystickValue>
 8009862:	eef0 7a40 	vmov.f32	s15, s0
 8009866:	4b3a      	ldr	r3, [pc, #232]	@ (8009950 <plotter_update_sensors+0x11c>)
 8009868:	edc3 7a00 	vstr	s15, [r3]
			50);

	b1 = !HAL_GPIO_ReadPin(J1_GPIO_Port, J1_Pin);
 800986c:	2180      	movs	r1, #128	@ 0x80
 800986e:	4839      	ldr	r0, [pc, #228]	@ (8009954 <plotter_update_sensors+0x120>)
 8009870:	f003 fbc6 	bl	800d000 <HAL_GPIO_ReadPin>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	bf0c      	ite	eq
 800987a:	2301      	moveq	r3, #1
 800987c:	2300      	movne	r3, #0
 800987e:	b2db      	uxtb	r3, r3
 8009880:	461a      	mov	r2, r3
 8009882:	4b35      	ldr	r3, [pc, #212]	@ (8009958 <plotter_update_sensors+0x124>)
 8009884:	601a      	str	r2, [r3, #0]
	b2 = !HAL_GPIO_ReadPin(J2_GPIO_Port, J2_Pin);
 8009886:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800988a:	4834      	ldr	r0, [pc, #208]	@ (800995c <plotter_update_sensors+0x128>)
 800988c:	f003 fbb8 	bl	800d000 <HAL_GPIO_ReadPin>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	bf0c      	ite	eq
 8009896:	2301      	moveq	r3, #1
 8009898:	2300      	movne	r3, #0
 800989a:	b2db      	uxtb	r3, r3
 800989c:	461a      	mov	r2, r3
 800989e:	4b30      	ldr	r3, [pc, #192]	@ (8009960 <plotter_update_sensors+0x12c>)
 80098a0:	601a      	str	r2, [r3, #0]
	b3 = !HAL_GPIO_ReadPin(J3_GPIO_Port, J3_Pin);
 80098a2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80098a6:	482d      	ldr	r0, [pc, #180]	@ (800995c <plotter_update_sensors+0x128>)
 80098a8:	f003 fbaa 	bl	800d000 <HAL_GPIO_ReadPin>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	bf0c      	ite	eq
 80098b2:	2301      	moveq	r3, #1
 80098b4:	2300      	movne	r3, #0
 80098b6:	b2db      	uxtb	r3, r3
 80098b8:	461a      	mov	r2, r3
 80098ba:	4b2a      	ldr	r3, [pc, #168]	@ (8009964 <plotter_update_sensors+0x130>)
 80098bc:	601a      	str	r2, [r3, #0]
	b4 = !HAL_GPIO_ReadPin(J4_GPIO_Port, J4_Pin);
 80098be:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80098c2:	4826      	ldr	r0, [pc, #152]	@ (800995c <plotter_update_sensors+0x128>)
 80098c4:	f003 fb9c 	bl	800d000 <HAL_GPIO_ReadPin>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	bf0c      	ite	eq
 80098ce:	2301      	moveq	r3, #1
 80098d0:	2300      	movne	r3, #0
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	461a      	mov	r2, r3
 80098d6:	4b24      	ldr	r3, [pc, #144]	@ (8009968 <plotter_update_sensors+0x134>)
 80098d8:	601a      	str	r2, [r3, #0]

	up_lim = HAL_GPIO_ReadPin(UPPER_LIM_GPIO_Port, UPPER_LIM_Pin);
 80098da:	2104      	movs	r1, #4
 80098dc:	481d      	ldr	r0, [pc, #116]	@ (8009954 <plotter_update_sensors+0x120>)
 80098de:	f003 fb8f 	bl	800d000 <HAL_GPIO_ReadPin>
 80098e2:	4603      	mov	r3, r0
 80098e4:	461a      	mov	r2, r3
 80098e6:	4b21      	ldr	r3, [pc, #132]	@ (800996c <plotter_update_sensors+0x138>)
 80098e8:	601a      	str	r2, [r3, #0]
	low_lim = HAL_GPIO_ReadPin(LOWER_LIM_GPIO_Port, LOWER_LIM_Pin);
 80098ea:	2102      	movs	r1, #2
 80098ec:	4819      	ldr	r0, [pc, #100]	@ (8009954 <plotter_update_sensors+0x120>)
 80098ee:	f003 fb87 	bl	800d000 <HAL_GPIO_ReadPin>
 80098f2:	4603      	mov	r3, r0
 80098f4:	461a      	mov	r2, r3
 80098f6:	4b1e      	ldr	r3, [pc, #120]	@ (8009970 <plotter_update_sensors+0x13c>)
 80098f8:	601a      	str	r2, [r3, #0]

	extern bool homing_active;
	if (!homing_active) {
 80098fa:	4b1e      	ldr	r3, [pc, #120]	@ (8009974 <plotter_update_sensors+0x140>)
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f083 0301 	eor.w	r3, r3, #1
 8009902:	b2db      	uxtb	r3, r3
 8009904:	2b00      	cmp	r3, #0
 8009906:	d018      	beq.n	800993a <plotter_update_sensors+0x106>
		extern volatile bool up_photo, low_photo;
		up_photo = HAL_GPIO_ReadPin(UPPER_PHOTO_GPIO_Port, UPPER_PHOTO_Pin);
 8009908:	2101      	movs	r1, #1
 800990a:	4812      	ldr	r0, [pc, #72]	@ (8009954 <plotter_update_sensors+0x120>)
 800990c:	f003 fb78 	bl	800d000 <HAL_GPIO_ReadPin>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	bf14      	ite	ne
 8009916:	2301      	movne	r3, #1
 8009918:	2300      	moveq	r3, #0
 800991a:	b2da      	uxtb	r2, r3
 800991c:	4b16      	ldr	r3, [pc, #88]	@ (8009978 <plotter_update_sensors+0x144>)
 800991e:	701a      	strb	r2, [r3, #0]
		low_photo = HAL_GPIO_ReadPin(LOWER_PHOTO_GPIO_Port, LOWER_PHOTO_Pin);
 8009920:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009924:	480b      	ldr	r0, [pc, #44]	@ (8009954 <plotter_update_sensors+0x120>)
 8009926:	f003 fb6b 	bl	800d000 <HAL_GPIO_ReadPin>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	bf14      	ite	ne
 8009930:	2301      	movne	r3, #1
 8009932:	2300      	moveq	r3, #0
 8009934:	b2da      	uxtb	r2, r3
 8009936:	4b11      	ldr	r3, [pc, #68]	@ (800997c <plotter_update_sensors+0x148>)
 8009938:	701a      	strb	r2, [r3, #0]
	}
}
 800993a:	bf00      	nop
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	42480000 	.word	0x42480000
 8009944:	c2480000 	.word	0xc2480000
 8009948:	20000b2c 	.word	0x20000b2c
 800994c:	20001e4c 	.word	0x20001e4c
 8009950:	20001e50 	.word	0x20001e50
 8009954:	48000400 	.word	0x48000400
 8009958:	20001e5c 	.word	0x20001e5c
 800995c:	48000800 	.word	0x48000800
 8009960:	20001e60 	.word	0x20001e60
 8009964:	20001e64 	.word	0x20001e64
 8009968:	20001e68 	.word	0x20001e68
 800996c:	20001e54 	.word	0x20001e54
 8009970:	20001e58 	.word	0x20001e58
 8009974:	200007e3 	.word	0x200007e3
 8009978:	200007e0 	.word	0x200007e0
 800997c:	200007e1 	.word	0x200007e1

08009980 <plotter_pen_up>:

void plotter_pen_up() {
 8009980:	b580      	push	{r7, lr}
 8009982:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8009984:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8009988:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8009998 <plotter_pen_up+0x18>
 800998c:	4803      	ldr	r0, [pc, #12]	@ (800999c <plotter_pen_up+0x1c>)
 800998e:	f7f9 fffd 	bl	800398c <PWM_write_duty>
}
 8009992:	bf00      	nop
 8009994:	bd80      	pop	{r7, pc}
 8009996:	bf00      	nop
 8009998:	42480000 	.word	0x42480000
 800999c:	20000b14 	.word	0x20000b14

080099a0 <plotter_pen_down>:

void plotter_pen_down() {
 80099a0:	b580      	push	{r7, lr}
 80099a2:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 10);
 80099a4:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80099a8:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 80099b8 <plotter_pen_down+0x18>
 80099ac:	4803      	ldr	r0, [pc, #12]	@ (80099bc <plotter_pen_down+0x1c>)
 80099ae:	f7f9 ffed 	bl	800398c <PWM_write_duty>
}
 80099b2:	bf00      	nop
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	42480000 	.word	0x42480000
 80099bc:	20000b14 	.word	0x20000b14

080099c0 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	78fa      	ldrb	r2, [r7, #3]
 80099d0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80099d8:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80099e0:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f04f 0200 	mov.w	r2, #0
 80099e8:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f04f 0200 	mov.w	r2, #0
 80099f0:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f04f 0200 	mov.w	r2, #0
 80099f8:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f04f 0200 	mov.w	r2, #0
 8009a00:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a1b      	ldr	r2, [pc, #108]	@ (8009a74 <SIGNAL_init+0xb4>)
 8009a06:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009a0e:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	2b03      	cmp	r3, #3
 8009a14:	d828      	bhi.n	8009a68 <SIGNAL_init+0xa8>
 8009a16:	a201      	add	r2, pc, #4	@ (adr r2, 8009a1c <SIGNAL_init+0x5c>)
 8009a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a1c:	08009a67 	.word	0x08009a67
 8009a20:	08009a2d 	.word	0x08009a2d
 8009a24:	08009a4b 	.word	0x08009a4b
 8009a28:	08009a55 	.word	0x08009a55
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009a38:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8009a78 <SIGNAL_init+0xb8>)
 8009a3e:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009a46:	621a      	str	r2, [r3, #32]
            break;
 8009a48:	e00e      	b.n	8009a68 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8009a50:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 8009a52:	e009      	b.n	8009a68 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f04f 0200 	mov.w	r2, #0
 8009a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8009a62:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8009a64:	e000      	b.n	8009a68 <SIGNAL_init+0xa8>
            break;
 8009a66:	bf00      	nop
    }
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	bf800000 	.word	0xbf800000
 8009a78:	41200000 	.word	0x41200000

08009a7c <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8009a7c:	b480      	push	{r7}
 8009a7e:	b089      	sub	sp, #36	@ 0x24
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	61f8      	str	r0, [r7, #28]
 8009a84:	ed87 0a06 	vstr	s0, [r7, #24]
 8009a88:	edc7 0a05 	vstr	s1, [r7, #20]
 8009a8c:	ed87 1a04 	vstr	s2, [r7, #16]
 8009a90:	edc7 1a03 	vstr	s3, [r7, #12]
 8009a94:	ed87 2a02 	vstr	s4, [r7, #8]
 8009a98:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	69ba      	ldr	r2, [r7, #24]
 8009aa6:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	697a      	ldr	r2, [r7, #20]
 8009aac:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	68fa      	ldr	r2, [r7, #12]
 8009ab8:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009ac6:	bf00      	nop
 8009ac8:	3724      	adds	r7, #36	@ 0x24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad0:	4770      	bx	lr

08009ad2 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8009ad2:	b480      	push	{r7}
 8009ad4:	b089      	sub	sp, #36	@ 0x24
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	61f8      	str	r0, [r7, #28]
 8009ada:	ed87 0a06 	vstr	s0, [r7, #24]
 8009ade:	edc7 0a05 	vstr	s1, [r7, #20]
 8009ae2:	ed87 1a04 	vstr	s2, [r7, #16]
 8009ae6:	edc7 1a03 	vstr	s3, [r7, #12]
 8009aea:	ed87 2a02 	vstr	s4, [r7, #8]
 8009aee:	edc7 2a01 	vstr	s5, [r7, #4]
 8009af2:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	2202      	movs	r2, #2
 8009afa:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	69ba      	ldr	r2, [r7, #24]
 8009b00:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	68fa      	ldr	r2, [r7, #12]
 8009b12:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8009b26:	bf00      	nop
 8009b28:	3724      	adds	r7, #36	@ 0x24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr
	...

08009b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8009b78 <HAL_MspInit+0x44>)
 8009b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8009b78 <HAL_MspInit+0x44>)
 8009b40:	f043 0301 	orr.w	r3, r3, #1
 8009b44:	6613      	str	r3, [r2, #96]	@ 0x60
 8009b46:	4b0c      	ldr	r3, [pc, #48]	@ (8009b78 <HAL_MspInit+0x44>)
 8009b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	607b      	str	r3, [r7, #4]
 8009b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009b52:	4b09      	ldr	r3, [pc, #36]	@ (8009b78 <HAL_MspInit+0x44>)
 8009b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b56:	4a08      	ldr	r2, [pc, #32]	@ (8009b78 <HAL_MspInit+0x44>)
 8009b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b5e:	4b06      	ldr	r3, [pc, #24]	@ (8009b78 <HAL_MspInit+0x44>)
 8009b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b66:	603b      	str	r3, [r7, #0]
 8009b68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8009b6a:	f003 fb4f 	bl	800d20c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009b6e:	bf00      	nop
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	40021000 	.word	0x40021000

08009b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009b80:	bf00      	nop
 8009b82:	e7fd      	b.n	8009b80 <NMI_Handler+0x4>

08009b84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009b84:	b480      	push	{r7}
 8009b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009b88:	bf00      	nop
 8009b8a:	e7fd      	b.n	8009b88 <HardFault_Handler+0x4>

08009b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009b90:	bf00      	nop
 8009b92:	e7fd      	b.n	8009b90 <MemManage_Handler+0x4>

08009b94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009b94:	b480      	push	{r7}
 8009b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009b98:	bf00      	nop
 8009b9a:	e7fd      	b.n	8009b98 <BusFault_Handler+0x4>

08009b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009ba0:	bf00      	nop
 8009ba2:	e7fd      	b.n	8009ba0 <UsageFault_Handler+0x4>

08009ba4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009ba8:	bf00      	nop
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr

08009bb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009bb6:	bf00      	nop
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009bc4:	bf00      	nop
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009bd2:	f000 ffbb 	bl	800ab4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009bd6:	bf00      	nop
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8009bde:	2001      	movs	r0, #1
 8009be0:	f003 fa58 	bl	800d094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8009be4:	bf00      	nop
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8009bec:	2010      	movs	r0, #16
 8009bee:	f003 fa51 	bl	800d094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8009bf2:	bf00      	nop
 8009bf4:	bd80      	pop	{r7, pc}
	...

08009bf8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8009bfc:	4802      	ldr	r0, [pc, #8]	@ (8009c08 <DMA1_Channel1_IRQHandler+0x10>)
 8009bfe:	f002 ff2e 	bl	800ca5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8009c02:	bf00      	nop
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	2000069c 	.word	0x2000069c

08009c0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009c10:	4802      	ldr	r0, [pc, #8]	@ (8009c1c <DMA1_Channel2_IRQHandler+0x10>)
 8009c12:	f002 ff24 	bl	800ca5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8009c16:	bf00      	nop
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	2000265c 	.word	0x2000265c

08009c20 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8009c24:	4802      	ldr	r0, [pc, #8]	@ (8009c30 <DMA1_Channel3_IRQHandler+0x10>)
 8009c26:	f002 ff1a 	bl	800ca5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8009c2a:	bf00      	nop
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	200026bc 	.word	0x200026bc

08009c34 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8009c38:	4802      	ldr	r0, [pc, #8]	@ (8009c44 <DMA1_Channel4_IRQHandler+0x10>)
 8009c3a:	f002 ff10 	bl	800ca5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8009c3e:	bf00      	nop
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	2000259c 	.word	0x2000259c

08009c48 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8009c4c:	4802      	ldr	r0, [pc, #8]	@ (8009c58 <DMA1_Channel5_IRQHandler+0x10>)
 8009c4e:	f002 ff06 	bl	800ca5e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8009c52:	bf00      	nop
 8009c54:	bd80      	pop	{r7, pc}
 8009c56:	bf00      	nop
 8009c58:	200025fc 	.word	0x200025fc

08009c5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8009c60:	2040      	movs	r0, #64	@ 0x40
 8009c62:	f003 fa17 	bl	800d094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 8009c66:	2080      	movs	r0, #128	@ 0x80
 8009c68:	f003 fa14 	bl	800d094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8009c6c:	bf00      	nop
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009c74:	4803      	ldr	r0, [pc, #12]	@ (8009c84 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8009c76:	f004 ff4f 	bl	800eb18 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8009c7a:	4803      	ldr	r0, [pc, #12]	@ (8009c88 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8009c7c:	f004 ff4c 	bl	800eb18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8009c80:	bf00      	nop
 8009c82:	bd80      	pop	{r7, pc}
 8009c84:	20001e70 	.word	0x20001e70
 8009c88:	20002338 	.word	0x20002338

08009c8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8009c90:	4802      	ldr	r0, [pc, #8]	@ (8009c9c <TIM2_IRQHandler+0x10>)
 8009c92:	f004 ff41 	bl	800eb18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8009c96:	bf00      	nop
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20001f3c 	.word	0x20001f3c

08009ca0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8009ca4:	4802      	ldr	r0, [pc, #8]	@ (8009cb0 <TIM3_IRQHandler+0x10>)
 8009ca6:	f004 ff37 	bl	800eb18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8009caa:	bf00      	nop
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	20002008 	.word	0x20002008

08009cb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009cb8:	4802      	ldr	r0, [pc, #8]	@ (8009cc4 <TIM4_IRQHandler+0x10>)
 8009cba:	f004 ff2d 	bl	800eb18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009cbe:	bf00      	nop
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	200020d4 	.word	0x200020d4

08009cc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009ccc:	4802      	ldr	r0, [pc, #8]	@ (8009cd8 <USART2_IRQHandler+0x10>)
 8009cce:	f006 fcf7 	bl	80106c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009cd2:	bf00      	nop
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	200024d0 	.word	0x200024d0

08009cdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8009ce0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009ce4:	f003 f9d6 	bl	800d094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 8009ce8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009cec:	f003 f9d2 	bl	800d094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8009cf0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009cf4:	f003 f9ce 	bl	800d094 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8009cf8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8009cfc:	f003 f9ca 	bl	800d094 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8009d00:	bf00      	nop
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8009d08:	4802      	ldr	r0, [pc, #8]	@ (8009d14 <LPUART1_IRQHandler+0x10>)
 8009d0a:	f006 fcd9 	bl	80106c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8009d0e:	bf00      	nop
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20002404 	.word	0x20002404

08009d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b086      	sub	sp, #24
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009d20:	4a14      	ldr	r2, [pc, #80]	@ (8009d74 <_sbrk+0x5c>)
 8009d22:	4b15      	ldr	r3, [pc, #84]	@ (8009d78 <_sbrk+0x60>)
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009d2c:	4b13      	ldr	r3, [pc, #76]	@ (8009d7c <_sbrk+0x64>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d102      	bne.n	8009d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009d34:	4b11      	ldr	r3, [pc, #68]	@ (8009d7c <_sbrk+0x64>)
 8009d36:	4a12      	ldr	r2, [pc, #72]	@ (8009d80 <_sbrk+0x68>)
 8009d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009d3a:	4b10      	ldr	r3, [pc, #64]	@ (8009d7c <_sbrk+0x64>)
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4413      	add	r3, r2
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d207      	bcs.n	8009d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009d48:	f008 ffa8 	bl	8012c9c <__errno>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	220c      	movs	r2, #12
 8009d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009d52:	f04f 33ff 	mov.w	r3, #4294967295
 8009d56:	e009      	b.n	8009d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009d58:	4b08      	ldr	r3, [pc, #32]	@ (8009d7c <_sbrk+0x64>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009d5e:	4b07      	ldr	r3, [pc, #28]	@ (8009d7c <_sbrk+0x64>)
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	4413      	add	r3, r2
 8009d66:	4a05      	ldr	r2, [pc, #20]	@ (8009d7c <_sbrk+0x64>)
 8009d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3718      	adds	r7, #24
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	20020000 	.word	0x20020000
 8009d78:	00000400 	.word	0x00000400
 8009d7c:	20001e6c 	.word	0x20001e6c
 8009d80:	20002868 	.word	0x20002868

08009d84 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8009d88:	4b06      	ldr	r3, [pc, #24]	@ (8009da4 <SystemInit+0x20>)
 8009d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d8e:	4a05      	ldr	r2, [pc, #20]	@ (8009da4 <SystemInit+0x20>)
 8009d90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009d94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009d98:	bf00      	nop
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	e000ed00 	.word	0xe000ed00

08009da8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b098      	sub	sp, #96	@ 0x60
 8009dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009dae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009db2:	2200      	movs	r2, #0
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	605a      	str	r2, [r3, #4]
 8009db8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009dba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	605a      	str	r2, [r3, #4]
 8009dc4:	609a      	str	r2, [r3, #8]
 8009dc6:	60da      	str	r2, [r3, #12]
 8009dc8:	611a      	str	r2, [r3, #16]
 8009dca:	615a      	str	r2, [r3, #20]
 8009dcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009dce:	1d3b      	adds	r3, r7, #4
 8009dd0:	2234      	movs	r2, #52	@ 0x34
 8009dd2:	2100      	movs	r1, #0
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f008 ff49 	bl	8012c6c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009dda:	4b3b      	ldr	r3, [pc, #236]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009ddc:	4a3b      	ldr	r2, [pc, #236]	@ (8009ecc <MX_TIM1_Init+0x124>)
 8009dde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009de0:	4b39      	ldr	r3, [pc, #228]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009de2:	2200      	movs	r2, #0
 8009de4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009de6:	4b38      	ldr	r3, [pc, #224]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8009dec:	4b36      	ldr	r3, [pc, #216]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009dee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009df2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009df4:	4b34      	ldr	r3, [pc, #208]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009dfa:	4b33      	ldr	r3, [pc, #204]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e00:	4b31      	ldr	r3, [pc, #196]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009e06:	4830      	ldr	r0, [pc, #192]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009e08:	f004 fad8 	bl	800e3bc <HAL_TIM_PWM_Init>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8009e12:	f7ff f92b 	bl	800906c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e16:	2300      	movs	r3, #0
 8009e18:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009e22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009e26:	4619      	mov	r1, r3
 8009e28:	4827      	ldr	r0, [pc, #156]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009e2a:	f006 f8e9 	bl	8010000 <HAL_TIMEx_MasterConfigSynchronization>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8009e34:	f7ff f91a 	bl	800906c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009e38:	2360      	movs	r3, #96	@ 0x60
 8009e3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009e40:	2300      	movs	r3, #0
 8009e42:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009e44:	2300      	movs	r3, #0
 8009e46:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009e50:	2300      	movs	r3, #0
 8009e52:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009e54:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8009e58:	220c      	movs	r2, #12
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	481a      	ldr	r0, [pc, #104]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009e5e:	f004 ffd5 	bl	800ee0c <HAL_TIM_PWM_ConfigChannel>
 8009e62:	4603      	mov	r3, r0
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d001      	beq.n	8009e6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8009e68:	f7ff f900 	bl	800906c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009e74:	2300      	movs	r3, #0
 8009e76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009e80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009e84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8009e86:	2300      	movs	r3, #0
 8009e88:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8009e92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009ea4:	1d3b      	adds	r3, r7, #4
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4807      	ldr	r0, [pc, #28]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009eaa:	f006 f93f 	bl	801012c <HAL_TIMEx_ConfigBreakDeadTime>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8009eb4:	f7ff f8da 	bl	800906c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009eb8:	4803      	ldr	r0, [pc, #12]	@ (8009ec8 <MX_TIM1_Init+0x120>)
 8009eba:	f000 fb77 	bl	800a5ac <HAL_TIM_MspPostInit>

}
 8009ebe:	bf00      	nop
 8009ec0:	3760      	adds	r7, #96	@ 0x60
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	20001e70 	.word	0x20001e70
 8009ecc:	40012c00 	.word	0x40012c00

08009ed0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b088      	sub	sp, #32
 8009ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009ed6:	f107 0310 	add.w	r3, r7, #16
 8009eda:	2200      	movs	r2, #0
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	605a      	str	r2, [r3, #4]
 8009ee0:	609a      	str	r2, [r3, #8]
 8009ee2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ee4:	1d3b      	adds	r3, r7, #4
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	605a      	str	r2, [r3, #4]
 8009eec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009eee:	4b1e      	ldr	r3, [pc, #120]	@ (8009f68 <MX_TIM2_Init+0x98>)
 8009ef0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009ef4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8009ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8009f68 <MX_TIM2_Init+0x98>)
 8009ef8:	22a9      	movs	r2, #169	@ 0xa9
 8009efa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009efc:	4b1a      	ldr	r3, [pc, #104]	@ (8009f68 <MX_TIM2_Init+0x98>)
 8009efe:	2200      	movs	r2, #0
 8009f00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8009f02:	4b19      	ldr	r3, [pc, #100]	@ (8009f68 <MX_TIM2_Init+0x98>)
 8009f04:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009f08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f0a:	4b17      	ldr	r3, [pc, #92]	@ (8009f68 <MX_TIM2_Init+0x98>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f10:	4b15      	ldr	r3, [pc, #84]	@ (8009f68 <MX_TIM2_Init+0x98>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009f16:	4814      	ldr	r0, [pc, #80]	@ (8009f68 <MX_TIM2_Init+0x98>)
 8009f18:	f004 f904 	bl	800e124 <HAL_TIM_Base_Init>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8009f22:	f7ff f8a3 	bl	800906c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009f2c:	f107 0310 	add.w	r3, r7, #16
 8009f30:	4619      	mov	r1, r3
 8009f32:	480d      	ldr	r0, [pc, #52]	@ (8009f68 <MX_TIM2_Init+0x98>)
 8009f34:	f005 f87e 	bl	800f034 <HAL_TIM_ConfigClockSource>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8009f3e:	f7ff f895 	bl	800906c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f42:	2300      	movs	r3, #0
 8009f44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f46:	2300      	movs	r3, #0
 8009f48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009f4a:	1d3b      	adds	r3, r7, #4
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	4806      	ldr	r0, [pc, #24]	@ (8009f68 <MX_TIM2_Init+0x98>)
 8009f50:	f006 f856 	bl	8010000 <HAL_TIMEx_MasterConfigSynchronization>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8009f5a:	f7ff f887 	bl	800906c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009f5e:	bf00      	nop
 8009f60:	3720      	adds	r7, #32
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	20001f3c 	.word	0x20001f3c

08009f6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b08c      	sub	sp, #48	@ 0x30
 8009f70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009f72:	f107 030c 	add.w	r3, r7, #12
 8009f76:	2224      	movs	r2, #36	@ 0x24
 8009f78:	2100      	movs	r1, #0
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f008 fe76 	bl	8012c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009f80:	463b      	mov	r3, r7
 8009f82:	2200      	movs	r2, #0
 8009f84:	601a      	str	r2, [r3, #0]
 8009f86:	605a      	str	r2, [r3, #4]
 8009f88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009f8a:	4b21      	ldr	r3, [pc, #132]	@ (800a010 <MX_TIM3_Init+0xa4>)
 8009f8c:	4a21      	ldr	r2, [pc, #132]	@ (800a014 <MX_TIM3_Init+0xa8>)
 8009f8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009f90:	4b1f      	ldr	r3, [pc, #124]	@ (800a010 <MX_TIM3_Init+0xa4>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009f96:	4b1e      	ldr	r3, [pc, #120]	@ (800a010 <MX_TIM3_Init+0xa4>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8009f9c:	4b1c      	ldr	r3, [pc, #112]	@ (800a010 <MX_TIM3_Init+0xa4>)
 8009f9e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009fa2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009fa4:	4b1a      	ldr	r3, [pc, #104]	@ (800a010 <MX_TIM3_Init+0xa4>)
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009faa:	4b19      	ldr	r3, [pc, #100]	@ (800a010 <MX_TIM3_Init+0xa4>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009fb0:	2303      	movs	r3, #3
 8009fb2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009fd4:	f107 030c 	add.w	r3, r7, #12
 8009fd8:	4619      	mov	r1, r3
 8009fda:	480d      	ldr	r0, [pc, #52]	@ (800a010 <MX_TIM3_Init+0xa4>)
 8009fdc:	f004 fc5a 	bl	800e894 <HAL_TIM_Encoder_Init>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d001      	beq.n	8009fea <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8009fe6:	f7ff f841 	bl	800906c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009fea:	2300      	movs	r3, #0
 8009fec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009ff2:	463b      	mov	r3, r7
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4806      	ldr	r0, [pc, #24]	@ (800a010 <MX_TIM3_Init+0xa4>)
 8009ff8:	f006 f802 	bl	8010000 <HAL_TIMEx_MasterConfigSynchronization>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800a002:	f7ff f833 	bl	800906c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a006:	bf00      	nop
 800a008:	3730      	adds	r7, #48	@ 0x30
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	20002008 	.word	0x20002008
 800a014:	40000400 	.word	0x40000400

0800a018 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08c      	sub	sp, #48	@ 0x30
 800a01c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a01e:	f107 030c 	add.w	r3, r7, #12
 800a022:	2224      	movs	r2, #36	@ 0x24
 800a024:	2100      	movs	r1, #0
 800a026:	4618      	mov	r0, r3
 800a028:	f008 fe20 	bl	8012c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a02c:	463b      	mov	r3, r7
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]
 800a032:	605a      	str	r2, [r3, #4]
 800a034:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a036:	4b21      	ldr	r3, [pc, #132]	@ (800a0bc <MX_TIM4_Init+0xa4>)
 800a038:	4a21      	ldr	r2, [pc, #132]	@ (800a0c0 <MX_TIM4_Init+0xa8>)
 800a03a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800a03c:	4b1f      	ldr	r3, [pc, #124]	@ (800a0bc <MX_TIM4_Init+0xa4>)
 800a03e:	2200      	movs	r2, #0
 800a040:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a042:	4b1e      	ldr	r3, [pc, #120]	@ (800a0bc <MX_TIM4_Init+0xa4>)
 800a044:	2200      	movs	r2, #0
 800a046:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800a048:	4b1c      	ldr	r3, [pc, #112]	@ (800a0bc <MX_TIM4_Init+0xa4>)
 800a04a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a04e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a050:	4b1a      	ldr	r3, [pc, #104]	@ (800a0bc <MX_TIM4_Init+0xa4>)
 800a052:	2200      	movs	r2, #0
 800a054:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a056:	4b19      	ldr	r3, [pc, #100]	@ (800a0bc <MX_TIM4_Init+0xa4>)
 800a058:	2200      	movs	r2, #0
 800a05a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a05c:	2303      	movs	r3, #3
 800a05e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a060:	2300      	movs	r3, #0
 800a062:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a064:	2301      	movs	r3, #1
 800a066:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a068:	2300      	movs	r3, #0
 800a06a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a06c:	2300      	movs	r3, #0
 800a06e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a070:	2300      	movs	r3, #0
 800a072:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a074:	2301      	movs	r3, #1
 800a076:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a078:	2300      	movs	r3, #0
 800a07a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800a080:	f107 030c 	add.w	r3, r7, #12
 800a084:	4619      	mov	r1, r3
 800a086:	480d      	ldr	r0, [pc, #52]	@ (800a0bc <MX_TIM4_Init+0xa4>)
 800a088:	f004 fc04 	bl	800e894 <HAL_TIM_Encoder_Init>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d001      	beq.n	800a096 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800a092:	f7fe ffeb 	bl	800906c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a096:	2300      	movs	r3, #0
 800a098:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a09a:	2300      	movs	r3, #0
 800a09c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a09e:	463b      	mov	r3, r7
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4806      	ldr	r0, [pc, #24]	@ (800a0bc <MX_TIM4_Init+0xa4>)
 800a0a4:	f005 ffac 	bl	8010000 <HAL_TIMEx_MasterConfigSynchronization>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800a0ae:	f7fe ffdd 	bl	800906c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800a0b2:	bf00      	nop
 800a0b4:	3730      	adds	r7, #48	@ 0x30
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	200020d4 	.word	0x200020d4
 800a0c0:	40000800 	.word	0x40000800

0800a0c4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08c      	sub	sp, #48	@ 0x30
 800a0c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a0ca:	f107 030c 	add.w	r3, r7, #12
 800a0ce:	2224      	movs	r2, #36	@ 0x24
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f008 fdca 	bl	8012c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a0d8:	463b      	mov	r3, r7
 800a0da:	2200      	movs	r2, #0
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	605a      	str	r2, [r3, #4]
 800a0e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a0e2:	4b21      	ldr	r3, [pc, #132]	@ (800a168 <MX_TIM5_Init+0xa4>)
 800a0e4:	4a21      	ldr	r2, [pc, #132]	@ (800a16c <MX_TIM5_Init+0xa8>)
 800a0e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800a0e8:	4b1f      	ldr	r3, [pc, #124]	@ (800a168 <MX_TIM5_Init+0xa4>)
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0ee:	4b1e      	ldr	r3, [pc, #120]	@ (800a168 <MX_TIM5_Init+0xa4>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800a0f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a168 <MX_TIM5_Init+0xa4>)
 800a0f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a0fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a168 <MX_TIM5_Init+0xa4>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a102:	4b19      	ldr	r3, [pc, #100]	@ (800a168 <MX_TIM5_Init+0xa4>)
 800a104:	2200      	movs	r2, #0
 800a106:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a108:	2303      	movs	r3, #3
 800a10a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a10c:	2300      	movs	r3, #0
 800a10e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a110:	2301      	movs	r3, #1
 800a112:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a114:	2300      	movs	r3, #0
 800a116:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a118:	2300      	movs	r3, #0
 800a11a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a11c:	2300      	movs	r3, #0
 800a11e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a120:	2301      	movs	r3, #1
 800a122:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a124:	2300      	movs	r3, #0
 800a126:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800a128:	2300      	movs	r3, #0
 800a12a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800a12c:	f107 030c 	add.w	r3, r7, #12
 800a130:	4619      	mov	r1, r3
 800a132:	480d      	ldr	r0, [pc, #52]	@ (800a168 <MX_TIM5_Init+0xa4>)
 800a134:	f004 fbae 	bl	800e894 <HAL_TIM_Encoder_Init>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d001      	beq.n	800a142 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800a13e:	f7fe ff95 	bl	800906c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a142:	2300      	movs	r3, #0
 800a144:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a146:	2300      	movs	r3, #0
 800a148:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a14a:	463b      	mov	r3, r7
 800a14c:	4619      	mov	r1, r3
 800a14e:	4806      	ldr	r0, [pc, #24]	@ (800a168 <MX_TIM5_Init+0xa4>)
 800a150:	f005 ff56 	bl	8010000 <HAL_TIMEx_MasterConfigSynchronization>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800a15a:	f7fe ff87 	bl	800906c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800a15e:	bf00      	nop
 800a160:	3730      	adds	r7, #48	@ 0x30
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	200021a0 	.word	0x200021a0
 800a16c:	40000c00 	.word	0x40000c00

0800a170 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b09c      	sub	sp, #112	@ 0x70
 800a174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a176:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	605a      	str	r2, [r3, #4]
 800a180:	609a      	str	r2, [r3, #8]
 800a182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a184:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	605a      	str	r2, [r3, #4]
 800a18e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a190:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	605a      	str	r2, [r3, #4]
 800a19a:	609a      	str	r2, [r3, #8]
 800a19c:	60da      	str	r2, [r3, #12]
 800a19e:	611a      	str	r2, [r3, #16]
 800a1a0:	615a      	str	r2, [r3, #20]
 800a1a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a1a4:	1d3b      	adds	r3, r7, #4
 800a1a6:	2234      	movs	r2, #52	@ 0x34
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f008 fd5e 	bl	8012c6c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a1b0:	4b4c      	ldr	r3, [pc, #304]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a1b2:	4a4d      	ldr	r2, [pc, #308]	@ (800a2e8 <MX_TIM8_Init+0x178>)
 800a1b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a1b6:	4b4b      	ldr	r3, [pc, #300]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1bc:	4b49      	ldr	r3, [pc, #292]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800a1c2:	4b48      	ldr	r3, [pc, #288]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a1c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a1c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800a1ca:	4b46      	ldr	r3, [pc, #280]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a1cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1d0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a1d2:	4b44      	ldr	r3, [pc, #272]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1d8:	4b42      	ldr	r3, [pc, #264]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800a1de:	4841      	ldr	r0, [pc, #260]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a1e0:	f003 ffa0 	bl	800e124 <HAL_TIM_Base_Init>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d001      	beq.n	800a1ee <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 800a1ea:	f7fe ff3f 	bl	800906c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a1ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1f2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800a1f4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	483a      	ldr	r0, [pc, #232]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a1fc:	f004 ff1a 	bl	800f034 <HAL_TIM_ConfigClockSource>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 800a206:	f7fe ff31 	bl	800906c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a20a:	4836      	ldr	r0, [pc, #216]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a20c:	f004 f8d6 	bl	800e3bc <HAL_TIM_PWM_Init>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 800a216:	f7fe ff29 	bl	800906c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a21a:	2300      	movs	r3, #0
 800a21c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a21e:	2300      	movs	r3, #0
 800a220:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a222:	2300      	movs	r3, #0
 800a224:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a226:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800a22a:	4619      	mov	r1, r3
 800a22c:	482d      	ldr	r0, [pc, #180]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a22e:	f005 fee7 	bl	8010000 <HAL_TIMEx_MasterConfigSynchronization>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 800a238:	f7fe ff18 	bl	800906c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a23c:	2360      	movs	r3, #96	@ 0x60
 800a23e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a244:	2300      	movs	r3, #0
 800a246:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a248:	2300      	movs	r3, #0
 800a24a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a24c:	2300      	movs	r3, #0
 800a24e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a250:	2300      	movs	r3, #0
 800a252:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a254:	2300      	movs	r3, #0
 800a256:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a258:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a25c:	2200      	movs	r2, #0
 800a25e:	4619      	mov	r1, r3
 800a260:	4820      	ldr	r0, [pc, #128]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a262:	f004 fdd3 	bl	800ee0c <HAL_TIM_PWM_ConfigChannel>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 800a26c:	f7fe fefe 	bl	800906c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a270:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800a274:	2204      	movs	r2, #4
 800a276:	4619      	mov	r1, r3
 800a278:	481a      	ldr	r0, [pc, #104]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a27a:	f004 fdc7 	bl	800ee0c <HAL_TIM_PWM_ConfigChannel>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d001      	beq.n	800a288 <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 800a284:	f7fe fef2 	bl	800906c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a288:	2300      	movs	r3, #0
 800a28a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a290:	2300      	movs	r3, #0
 800a292:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a298:	2300      	movs	r3, #0
 800a29a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a29c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a2a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a2ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a2b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a2c0:	1d3b      	adds	r3, r7, #4
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	4807      	ldr	r0, [pc, #28]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a2c6:	f005 ff31 	bl	801012c <HAL_TIMEx_ConfigBreakDeadTime>
 800a2ca:	4603      	mov	r3, r0
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d001      	beq.n	800a2d4 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 800a2d0:	f7fe fecc 	bl	800906c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a2d4:	4803      	ldr	r0, [pc, #12]	@ (800a2e4 <MX_TIM8_Init+0x174>)
 800a2d6:	f000 f969 	bl	800a5ac <HAL_TIM_MspPostInit>

}
 800a2da:	bf00      	nop
 800a2dc:	3770      	adds	r7, #112	@ 0x70
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	2000226c 	.word	0x2000226c
 800a2e8:	40013400 	.word	0x40013400

0800a2ec <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800a2f0:	4b14      	ldr	r3, [pc, #80]	@ (800a344 <MX_TIM16_Init+0x58>)
 800a2f2:	4a15      	ldr	r2, [pc, #84]	@ (800a348 <MX_TIM16_Init+0x5c>)
 800a2f4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800a2f6:	4b13      	ldr	r3, [pc, #76]	@ (800a344 <MX_TIM16_Init+0x58>)
 800a2f8:	22a9      	movs	r2, #169	@ 0xa9
 800a2fa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a2fc:	4b11      	ldr	r3, [pc, #68]	@ (800a344 <MX_TIM16_Init+0x58>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800a302:	4b10      	ldr	r3, [pc, #64]	@ (800a344 <MX_TIM16_Init+0x58>)
 800a304:	f240 4279 	movw	r2, #1145	@ 0x479
 800a308:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a30a:	4b0e      	ldr	r3, [pc, #56]	@ (800a344 <MX_TIM16_Init+0x58>)
 800a30c:	2200      	movs	r2, #0
 800a30e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800a310:	4b0c      	ldr	r3, [pc, #48]	@ (800a344 <MX_TIM16_Init+0x58>)
 800a312:	2200      	movs	r2, #0
 800a314:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a316:	4b0b      	ldr	r3, [pc, #44]	@ (800a344 <MX_TIM16_Init+0x58>)
 800a318:	2200      	movs	r2, #0
 800a31a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800a31c:	4809      	ldr	r0, [pc, #36]	@ (800a344 <MX_TIM16_Init+0x58>)
 800a31e:	f003 ff01 	bl	800e124 <HAL_TIM_Base_Init>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800a328:	f7fe fea0 	bl	800906c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800a32c:	2108      	movs	r1, #8
 800a32e:	4805      	ldr	r0, [pc, #20]	@ (800a344 <MX_TIM16_Init+0x58>)
 800a330:	f004 f9ba 	bl	800e6a8 <HAL_TIM_OnePulse_Init>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800a33a:	f7fe fe97 	bl	800906c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800a33e:	bf00      	nop
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	20002338 	.word	0x20002338
 800a348:	40014400 	.word	0x40014400

0800a34c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a0d      	ldr	r2, [pc, #52]	@ (800a390 <HAL_TIM_PWM_MspInit+0x44>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d113      	bne.n	800a386 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a35e:	4b0d      	ldr	r3, [pc, #52]	@ (800a394 <HAL_TIM_PWM_MspInit+0x48>)
 800a360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a362:	4a0c      	ldr	r2, [pc, #48]	@ (800a394 <HAL_TIM_PWM_MspInit+0x48>)
 800a364:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a368:	6613      	str	r3, [r2, #96]	@ 0x60
 800a36a:	4b0a      	ldr	r3, [pc, #40]	@ (800a394 <HAL_TIM_PWM_MspInit+0x48>)
 800a36c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a36e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a372:	60fb      	str	r3, [r7, #12]
 800a374:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a376:	2200      	movs	r2, #0
 800a378:	2100      	movs	r1, #0
 800a37a:	2019      	movs	r0, #25
 800a37c:	f002 f957 	bl	800c62e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a380:	2019      	movs	r0, #25
 800a382:	f002 f96e 	bl	800c662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800a386:	bf00      	nop
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	40012c00 	.word	0x40012c00
 800a394:	40021000 	.word	0x40021000

0800a398 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b086      	sub	sp, #24
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3a8:	d114      	bne.n	800a3d4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a3aa:	4b22      	ldr	r3, [pc, #136]	@ (800a434 <HAL_TIM_Base_MspInit+0x9c>)
 800a3ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3ae:	4a21      	ldr	r2, [pc, #132]	@ (800a434 <HAL_TIM_Base_MspInit+0x9c>)
 800a3b0:	f043 0301 	orr.w	r3, r3, #1
 800a3b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800a3b6:	4b1f      	ldr	r3, [pc, #124]	@ (800a434 <HAL_TIM_Base_MspInit+0x9c>)
 800a3b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	617b      	str	r3, [r7, #20]
 800a3c0:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	201c      	movs	r0, #28
 800a3c8:	f002 f931 	bl	800c62e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800a3cc:	201c      	movs	r0, #28
 800a3ce:	f002 f948 	bl	800c662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800a3d2:	e02a      	b.n	800a42a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a17      	ldr	r2, [pc, #92]	@ (800a438 <HAL_TIM_Base_MspInit+0xa0>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d10c      	bne.n	800a3f8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a3de:	4b15      	ldr	r3, [pc, #84]	@ (800a434 <HAL_TIM_Base_MspInit+0x9c>)
 800a3e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3e2:	4a14      	ldr	r2, [pc, #80]	@ (800a434 <HAL_TIM_Base_MspInit+0x9c>)
 800a3e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800a3e8:	6613      	str	r3, [r2, #96]	@ 0x60
 800a3ea:	4b12      	ldr	r3, [pc, #72]	@ (800a434 <HAL_TIM_Base_MspInit+0x9c>)
 800a3ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a3f2:	613b      	str	r3, [r7, #16]
 800a3f4:	693b      	ldr	r3, [r7, #16]
}
 800a3f6:	e018      	b.n	800a42a <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a0f      	ldr	r2, [pc, #60]	@ (800a43c <HAL_TIM_Base_MspInit+0xa4>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d113      	bne.n	800a42a <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a402:	4b0c      	ldr	r3, [pc, #48]	@ (800a434 <HAL_TIM_Base_MspInit+0x9c>)
 800a404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a406:	4a0b      	ldr	r2, [pc, #44]	@ (800a434 <HAL_TIM_Base_MspInit+0x9c>)
 800a408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a40c:	6613      	str	r3, [r2, #96]	@ 0x60
 800a40e:	4b09      	ldr	r3, [pc, #36]	@ (800a434 <HAL_TIM_Base_MspInit+0x9c>)
 800a410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800a41a:	2200      	movs	r2, #0
 800a41c:	2100      	movs	r1, #0
 800a41e:	2019      	movs	r0, #25
 800a420:	f002 f905 	bl	800c62e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800a424:	2019      	movs	r0, #25
 800a426:	f002 f91c 	bl	800c662 <HAL_NVIC_EnableIRQ>
}
 800a42a:	bf00      	nop
 800a42c:	3718      	adds	r7, #24
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	40021000 	.word	0x40021000
 800a438:	40013400 	.word	0x40013400
 800a43c:	40014400 	.word	0x40014400

0800a440 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08e      	sub	sp, #56	@ 0x38
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	609a      	str	r2, [r3, #8]
 800a454:	60da      	str	r2, [r3, #12]
 800a456:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a4f      	ldr	r2, [pc, #316]	@ (800a59c <HAL_TIM_Encoder_MspInit+0x15c>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d131      	bne.n	800a4c6 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800a462:	4b4f      	ldr	r3, [pc, #316]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a466:	4a4e      	ldr	r2, [pc, #312]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a468:	f043 0302 	orr.w	r3, r3, #2
 800a46c:	6593      	str	r3, [r2, #88]	@ 0x58
 800a46e:	4b4c      	ldr	r3, [pc, #304]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a472:	f003 0302 	and.w	r3, r3, #2
 800a476:	623b      	str	r3, [r7, #32]
 800a478:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a47a:	4b49      	ldr	r3, [pc, #292]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a47c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a47e:	4a48      	ldr	r2, [pc, #288]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a480:	f043 0301 	orr.w	r3, r3, #1
 800a484:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a486:	4b46      	ldr	r3, [pc, #280]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a488:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	61fb      	str	r3, [r7, #28]
 800a490:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a492:	23c0      	movs	r3, #192	@ 0xc0
 800a494:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a496:	2302      	movs	r3, #2
 800a498:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a49a:	2300      	movs	r3, #0
 800a49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800a4a2:	2302      	movs	r3, #2
 800a4a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4aa:	4619      	mov	r1, r3
 800a4ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a4b0:	f002 fc24 	bl	800ccfc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	2100      	movs	r1, #0
 800a4b8:	201d      	movs	r0, #29
 800a4ba:	f002 f8b8 	bl	800c62e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800a4be:	201d      	movs	r0, #29
 800a4c0:	f002 f8cf 	bl	800c662 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800a4c4:	e065      	b.n	800a592 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a36      	ldr	r2, [pc, #216]	@ (800a5a4 <HAL_TIM_Encoder_MspInit+0x164>)
 800a4cc:	4293      	cmp	r3, r2
 800a4ce:	d132      	bne.n	800a536 <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a4d0:	4b33      	ldr	r3, [pc, #204]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a4d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4d4:	4a32      	ldr	r2, [pc, #200]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a4d6:	f043 0304 	orr.w	r3, r3, #4
 800a4da:	6593      	str	r3, [r2, #88]	@ 0x58
 800a4dc:	4b30      	ldr	r3, [pc, #192]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a4de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4e0:	f003 0304 	and.w	r3, r3, #4
 800a4e4:	61bb      	str	r3, [r7, #24]
 800a4e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4e8:	4b2d      	ldr	r3, [pc, #180]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a4ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4ec:	4a2c      	ldr	r2, [pc, #176]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a4ee:	f043 0301 	orr.w	r3, r3, #1
 800a4f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a4f4:	4b2a      	ldr	r3, [pc, #168]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a4f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4f8:	f003 0301 	and.w	r3, r3, #1
 800a4fc:	617b      	str	r3, [r7, #20]
 800a4fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a500:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800a504:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a506:	2302      	movs	r3, #2
 800a508:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a50a:	2300      	movs	r3, #0
 800a50c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a50e:	2300      	movs	r3, #0
 800a510:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800a512:	230a      	movs	r3, #10
 800a514:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a516:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a51a:	4619      	mov	r1, r3
 800a51c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a520:	f002 fbec 	bl	800ccfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800a524:	2200      	movs	r2, #0
 800a526:	2100      	movs	r1, #0
 800a528:	201e      	movs	r0, #30
 800a52a:	f002 f880 	bl	800c62e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a52e:	201e      	movs	r0, #30
 800a530:	f002 f897 	bl	800c662 <HAL_NVIC_EnableIRQ>
}
 800a534:	e02d      	b.n	800a592 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a8 <HAL_TIM_Encoder_MspInit+0x168>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d128      	bne.n	800a592 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800a540:	4b17      	ldr	r3, [pc, #92]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a544:	4a16      	ldr	r2, [pc, #88]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a546:	f043 0308 	orr.w	r3, r3, #8
 800a54a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a54c:	4b14      	ldr	r3, [pc, #80]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a54e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a550:	f003 0308 	and.w	r3, r3, #8
 800a554:	613b      	str	r3, [r7, #16]
 800a556:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a558:	4b11      	ldr	r3, [pc, #68]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a55a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a55c:	4a10      	ldr	r2, [pc, #64]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a55e:	f043 0301 	orr.w	r3, r3, #1
 800a562:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a564:	4b0e      	ldr	r3, [pc, #56]	@ (800a5a0 <HAL_TIM_Encoder_MspInit+0x160>)
 800a566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a568:	f003 0301 	and.w	r3, r3, #1
 800a56c:	60fb      	str	r3, [r7, #12]
 800a56e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800a570:	2303      	movs	r3, #3
 800a572:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a574:	2302      	movs	r3, #2
 800a576:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a578:	2300      	movs	r3, #0
 800a57a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a57c:	2300      	movs	r3, #0
 800a57e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800a580:	2302      	movs	r3, #2
 800a582:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a584:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a588:	4619      	mov	r1, r3
 800a58a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a58e:	f002 fbb5 	bl	800ccfc <HAL_GPIO_Init>
}
 800a592:	bf00      	nop
 800a594:	3738      	adds	r7, #56	@ 0x38
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	40000400 	.word	0x40000400
 800a5a0:	40021000 	.word	0x40021000
 800a5a4:	40000800 	.word	0x40000800
 800a5a8:	40000c00 	.word	0x40000c00

0800a5ac <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08a      	sub	sp, #40	@ 0x28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5b4:	f107 0314 	add.w	r3, r7, #20
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	605a      	str	r2, [r3, #4]
 800a5be:	609a      	str	r2, [r3, #8]
 800a5c0:	60da      	str	r2, [r3, #12]
 800a5c2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	4a22      	ldr	r2, [pc, #136]	@ (800a654 <HAL_TIM_MspPostInit+0xa8>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d11c      	bne.n	800a608 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5ce:	4b22      	ldr	r3, [pc, #136]	@ (800a658 <HAL_TIM_MspPostInit+0xac>)
 800a5d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5d2:	4a21      	ldr	r2, [pc, #132]	@ (800a658 <HAL_TIM_MspPostInit+0xac>)
 800a5d4:	f043 0304 	orr.w	r3, r3, #4
 800a5d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a5da:	4b1f      	ldr	r3, [pc, #124]	@ (800a658 <HAL_TIM_MspPostInit+0xac>)
 800a5dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5de:	f003 0304 	and.w	r3, r3, #4
 800a5e2:	613b      	str	r3, [r7, #16]
 800a5e4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a5e6:	2308      	movs	r3, #8
 800a5e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5fa:	f107 0314 	add.w	r3, r7, #20
 800a5fe:	4619      	mov	r1, r3
 800a600:	4816      	ldr	r0, [pc, #88]	@ (800a65c <HAL_TIM_MspPostInit+0xb0>)
 800a602:	f002 fb7b 	bl	800ccfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800a606:	e020      	b.n	800a64a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	4a14      	ldr	r2, [pc, #80]	@ (800a660 <HAL_TIM_MspPostInit+0xb4>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d11b      	bne.n	800a64a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a612:	4b11      	ldr	r3, [pc, #68]	@ (800a658 <HAL_TIM_MspPostInit+0xac>)
 800a614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a616:	4a10      	ldr	r2, [pc, #64]	@ (800a658 <HAL_TIM_MspPostInit+0xac>)
 800a618:	f043 0304 	orr.w	r3, r3, #4
 800a61c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a61e:	4b0e      	ldr	r3, [pc, #56]	@ (800a658 <HAL_TIM_MspPostInit+0xac>)
 800a620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a622:	f003 0304 	and.w	r3, r3, #4
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a62a:	23c0      	movs	r3, #192	@ 0xc0
 800a62c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a62e:	2302      	movs	r3, #2
 800a630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a632:	2300      	movs	r3, #0
 800a634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a636:	2300      	movs	r3, #0
 800a638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800a63a:	2304      	movs	r3, #4
 800a63c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a63e:	f107 0314 	add.w	r3, r7, #20
 800a642:	4619      	mov	r1, r3
 800a644:	4805      	ldr	r0, [pc, #20]	@ (800a65c <HAL_TIM_MspPostInit+0xb0>)
 800a646:	f002 fb59 	bl	800ccfc <HAL_GPIO_Init>
}
 800a64a:	bf00      	nop
 800a64c:	3728      	adds	r7, #40	@ 0x28
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	40012c00 	.word	0x40012c00
 800a658:	40021000 	.word	0x40021000
 800a65c:	48000800 	.word	0x48000800
 800a660:	40013400 	.word	0x40013400

0800a664 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800a668:	4b20      	ldr	r3, [pc, #128]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a66a:	4a21      	ldr	r2, [pc, #132]	@ (800a6f0 <MX_LPUART1_UART_Init+0x8c>)
 800a66c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 800a66e:	4b1f      	ldr	r3, [pc, #124]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a670:	4a20      	ldr	r2, [pc, #128]	@ (800a6f4 <MX_LPUART1_UART_Init+0x90>)
 800a672:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a674:	4b1d      	ldr	r3, [pc, #116]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a676:	2200      	movs	r2, #0
 800a678:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800a67a:	4b1c      	ldr	r3, [pc, #112]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800a680:	4b1a      	ldr	r3, [pc, #104]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a682:	2200      	movs	r2, #0
 800a684:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800a686:	4b19      	ldr	r3, [pc, #100]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a688:	220c      	movs	r2, #12
 800a68a:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a68c:	4b17      	ldr	r3, [pc, #92]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a68e:	2200      	movs	r2, #0
 800a690:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a692:	4b16      	ldr	r3, [pc, #88]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a694:	2200      	movs	r2, #0
 800a696:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a698:	4b14      	ldr	r3, [pc, #80]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a69e:	4b13      	ldr	r3, [pc, #76]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800a6a4:	4811      	ldr	r0, [pc, #68]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a6a6:	f005 fe25 	bl	80102f4 <HAL_UART_Init>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d001      	beq.n	800a6b4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800a6b0:	f7fe fcdc 	bl	800906c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	480d      	ldr	r0, [pc, #52]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a6b8:	f007 fc61 	bl	8011f7e <HAL_UARTEx_SetTxFifoThreshold>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800a6c2:	f7fe fcd3 	bl	800906c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	4808      	ldr	r0, [pc, #32]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a6ca:	f007 fc96 	bl	8011ffa <HAL_UARTEx_SetRxFifoThreshold>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800a6d4:	f7fe fcca 	bl	800906c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800a6d8:	4804      	ldr	r0, [pc, #16]	@ (800a6ec <MX_LPUART1_UART_Init+0x88>)
 800a6da:	f007 fc17 	bl	8011f0c <HAL_UARTEx_DisableFifoMode>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800a6e4:	f7fe fcc2 	bl	800906c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800a6e8:	bf00      	nop
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	20002404 	.word	0x20002404
 800a6f0:	40008000 	.word	0x40008000
 800a6f4:	001e8480 	.word	0x001e8480

0800a6f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a6fc:	4b23      	ldr	r3, [pc, #140]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a6fe:	4a24      	ldr	r2, [pc, #144]	@ (800a790 <MX_USART2_UART_Init+0x98>)
 800a700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a702:	4b22      	ldr	r3, [pc, #136]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a704:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800a70a:	4b20      	ldr	r3, [pc, #128]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a70c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a710:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a712:	4b1e      	ldr	r3, [pc, #120]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a714:	2200      	movs	r2, #0
 800a716:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800a718:	4b1c      	ldr	r3, [pc, #112]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a71a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a71e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a720:	4b1a      	ldr	r3, [pc, #104]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a722:	220c      	movs	r2, #12
 800a724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a726:	4b19      	ldr	r3, [pc, #100]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a728:	2200      	movs	r2, #0
 800a72a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a72c:	4b17      	ldr	r3, [pc, #92]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a72e:	2200      	movs	r2, #0
 800a730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a732:	4b16      	ldr	r3, [pc, #88]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a734:	2200      	movs	r2, #0
 800a736:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a738:	4b14      	ldr	r3, [pc, #80]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a73e:	4b13      	ldr	r3, [pc, #76]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a740:	2200      	movs	r2, #0
 800a742:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a744:	4811      	ldr	r0, [pc, #68]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a746:	f005 fdd5 	bl	80102f4 <HAL_UART_Init>
 800a74a:	4603      	mov	r3, r0
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800a750:	f7fe fc8c 	bl	800906c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a754:	2100      	movs	r1, #0
 800a756:	480d      	ldr	r0, [pc, #52]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a758:	f007 fc11 	bl	8011f7e <HAL_UARTEx_SetTxFifoThreshold>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800a762:	f7fe fc83 	bl	800906c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a766:	2100      	movs	r1, #0
 800a768:	4808      	ldr	r0, [pc, #32]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a76a:	f007 fc46 	bl	8011ffa <HAL_UARTEx_SetRxFifoThreshold>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 800a774:	f7fe fc7a 	bl	800906c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800a778:	4804      	ldr	r0, [pc, #16]	@ (800a78c <MX_USART2_UART_Init+0x94>)
 800a77a:	f007 fbc7 	bl	8011f0c <HAL_UARTEx_DisableFifoMode>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d001      	beq.n	800a788 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 800a784:	f7fe fc72 	bl	800906c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a788:	bf00      	nop
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	200024d0 	.word	0x200024d0
 800a790:	40004400 	.word	0x40004400

0800a794 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b0a0      	sub	sp, #128	@ 0x80
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a79c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	605a      	str	r2, [r3, #4]
 800a7a6:	609a      	str	r2, [r3, #8]
 800a7a8:	60da      	str	r2, [r3, #12]
 800a7aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a7ac:	f107 0318 	add.w	r3, r7, #24
 800a7b0:	2254      	movs	r2, #84	@ 0x54
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f008 fa59 	bl	8012c6c <memset>
  if(uartHandle->Instance==LPUART1)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4a99      	ldr	r2, [pc, #612]	@ (800aa24 <HAL_UART_MspInit+0x290>)
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	f040 8093 	bne.w	800a8ec <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800a7c6:	2320      	movs	r3, #32
 800a7c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a7ce:	f107 0318 	add.w	r3, r7, #24
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f003 fa58 	bl	800dc88 <HAL_RCCEx_PeriphCLKConfig>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800a7de:	f7fe fc45 	bl	800906c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800a7e2:	4b91      	ldr	r3, [pc, #580]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a7e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7e6:	4a90      	ldr	r2, [pc, #576]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a7e8:	f043 0301 	orr.w	r3, r3, #1
 800a7ec:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800a7ee:	4b8e      	ldr	r3, [pc, #568]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a7f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a7f2:	f003 0301 	and.w	r3, r3, #1
 800a7f6:	617b      	str	r3, [r7, #20]
 800a7f8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a7fa:	4b8b      	ldr	r3, [pc, #556]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a7fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7fe:	4a8a      	ldr	r2, [pc, #552]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a800:	f043 0302 	orr.w	r3, r3, #2
 800a804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a806:	4b88      	ldr	r3, [pc, #544]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	613b      	str	r3, [r7, #16]
 800a810:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a812:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a816:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a818:	2302      	movs	r3, #2
 800a81a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a81c:	2300      	movs	r3, #0
 800a81e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a820:	2300      	movs	r3, #0
 800a822:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800a824:	2308      	movs	r3, #8
 800a826:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a828:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a82c:	4619      	mov	r1, r3
 800a82e:	487f      	ldr	r0, [pc, #508]	@ (800aa2c <HAL_UART_MspInit+0x298>)
 800a830:	f002 fa64 	bl	800ccfc <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 800a834:	4b7e      	ldr	r3, [pc, #504]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a836:	4a7f      	ldr	r2, [pc, #508]	@ (800aa34 <HAL_UART_MspInit+0x2a0>)
 800a838:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 800a83a:	4b7d      	ldr	r3, [pc, #500]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a83c:	2222      	movs	r2, #34	@ 0x22
 800a83e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a840:	4b7b      	ldr	r3, [pc, #492]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a842:	2200      	movs	r2, #0
 800a844:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a846:	4b7a      	ldr	r3, [pc, #488]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a848:	2200      	movs	r2, #0
 800a84a:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a84c:	4b78      	ldr	r3, [pc, #480]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a84e:	2280      	movs	r2, #128	@ 0x80
 800a850:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a852:	4b77      	ldr	r3, [pc, #476]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a854:	2200      	movs	r2, #0
 800a856:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a858:	4b75      	ldr	r3, [pc, #468]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 800a85e:	4b74      	ldr	r3, [pc, #464]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a860:	2200      	movs	r2, #0
 800a862:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a864:	4b72      	ldr	r3, [pc, #456]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a866:	2200      	movs	r2, #0
 800a868:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800a86a:	4871      	ldr	r0, [pc, #452]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a86c:	f001 ff14 	bl	800c698 <HAL_DMA_Init>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800a876:	f7fe fbf9 	bl	800906c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a6c      	ldr	r2, [pc, #432]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a87e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a882:	4a6b      	ldr	r2, [pc, #428]	@ (800aa30 <HAL_UART_MspInit+0x29c>)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 800a888:	4b6b      	ldr	r3, [pc, #428]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a88a:	4a6c      	ldr	r2, [pc, #432]	@ (800aa3c <HAL_UART_MspInit+0x2a8>)
 800a88c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800a88e:	4b6a      	ldr	r3, [pc, #424]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a890:	2223      	movs	r2, #35	@ 0x23
 800a892:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a894:	4b68      	ldr	r3, [pc, #416]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a896:	2210      	movs	r2, #16
 800a898:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a89a:	4b67      	ldr	r3, [pc, #412]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a89c:	2200      	movs	r2, #0
 800a89e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a8a0:	4b65      	ldr	r3, [pc, #404]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a8a2:	2280      	movs	r2, #128	@ 0x80
 800a8a4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a8a6:	4b64      	ldr	r3, [pc, #400]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a8ac:	4b62      	ldr	r3, [pc, #392]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 800a8b2:	4b61      	ldr	r3, [pc, #388]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a8b8:	4b5f      	ldr	r3, [pc, #380]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800a8be:	485e      	ldr	r0, [pc, #376]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a8c0:	f001 feea 	bl	800c698 <HAL_DMA_Init>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d001      	beq.n	800a8ce <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800a8ca:	f7fe fbcf 	bl	800906c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a59      	ldr	r2, [pc, #356]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a8d2:	67da      	str	r2, [r3, #124]	@ 0x7c
 800a8d4:	4a58      	ldr	r2, [pc, #352]	@ (800aa38 <HAL_UART_MspInit+0x2a4>)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2100      	movs	r1, #0
 800a8de:	205b      	movs	r0, #91	@ 0x5b
 800a8e0:	f001 fea5 	bl	800c62e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800a8e4:	205b      	movs	r0, #91	@ 0x5b
 800a8e6:	f001 febc 	bl	800c662 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800a8ea:	e097      	b.n	800aa1c <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a53      	ldr	r2, [pc, #332]	@ (800aa40 <HAL_UART_MspInit+0x2ac>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	f040 8092 	bne.w	800aa1c <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a900:	f107 0318 	add.w	r3, r7, #24
 800a904:	4618      	mov	r0, r3
 800a906:	f003 f9bf 	bl	800dc88 <HAL_RCCEx_PeriphCLKConfig>
 800a90a:	4603      	mov	r3, r0
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <HAL_UART_MspInit+0x180>
      Error_Handler();
 800a910:	f7fe fbac 	bl	800906c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a914:	4b44      	ldr	r3, [pc, #272]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a916:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a918:	4a43      	ldr	r2, [pc, #268]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a91a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a91e:	6593      	str	r3, [r2, #88]	@ 0x58
 800a920:	4b41      	ldr	r3, [pc, #260]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a924:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a928:	60fb      	str	r3, [r7, #12]
 800a92a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a92c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a92e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a930:	4a3d      	ldr	r2, [pc, #244]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a932:	f043 0301 	orr.w	r3, r3, #1
 800a936:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a938:	4b3b      	ldr	r3, [pc, #236]	@ (800aa28 <HAL_UART_MspInit+0x294>)
 800a93a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a93c:	f003 0301 	and.w	r3, r3, #1
 800a940:	60bb      	str	r3, [r7, #8]
 800a942:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800a944:	230c      	movs	r3, #12
 800a946:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a948:	2302      	movs	r3, #2
 800a94a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a94c:	2300      	movs	r3, #0
 800a94e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a950:	2300      	movs	r3, #0
 800a952:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a954:	2307      	movs	r3, #7
 800a956:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a958:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800a95c:	4619      	mov	r1, r3
 800a95e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800a962:	f002 f9cb 	bl	800ccfc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800a966:	4b37      	ldr	r3, [pc, #220]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a968:	4a37      	ldr	r2, [pc, #220]	@ (800aa48 <HAL_UART_MspInit+0x2b4>)
 800a96a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800a96c:	4b35      	ldr	r3, [pc, #212]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a96e:	221a      	movs	r2, #26
 800a970:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a972:	4b34      	ldr	r3, [pc, #208]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a974:	2200      	movs	r2, #0
 800a976:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a978:	4b32      	ldr	r3, [pc, #200]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a97a:	2200      	movs	r2, #0
 800a97c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a97e:	4b31      	ldr	r3, [pc, #196]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a980:	2280      	movs	r2, #128	@ 0x80
 800a982:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a984:	4b2f      	ldr	r3, [pc, #188]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a986:	2200      	movs	r2, #0
 800a988:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a98a:	4b2e      	ldr	r3, [pc, #184]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800a990:	4b2c      	ldr	r3, [pc, #176]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a992:	2200      	movs	r2, #0
 800a994:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a996:	4b2b      	ldr	r3, [pc, #172]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a998:	2200      	movs	r2, #0
 800a99a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a99c:	4829      	ldr	r0, [pc, #164]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a99e:	f001 fe7b 	bl	800c698 <HAL_DMA_Init>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d001      	beq.n	800a9ac <HAL_UART_MspInit+0x218>
      Error_Handler();
 800a9a8:	f7fe fb60 	bl	800906c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4a25      	ldr	r2, [pc, #148]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a9b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800a9b4:	4a23      	ldr	r2, [pc, #140]	@ (800aa44 <HAL_UART_MspInit+0x2b0>)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800a9ba:	4b24      	ldr	r3, [pc, #144]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800a9bc:	4a24      	ldr	r2, [pc, #144]	@ (800aa50 <HAL_UART_MspInit+0x2bc>)
 800a9be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800a9c0:	4b22      	ldr	r3, [pc, #136]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800a9c2:	221b      	movs	r2, #27
 800a9c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a9c6:	4b21      	ldr	r3, [pc, #132]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800a9c8:	2210      	movs	r2, #16
 800a9ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a9cc:	4b1f      	ldr	r3, [pc, #124]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a9d2:	4b1e      	ldr	r3, [pc, #120]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800a9d4:	2280      	movs	r2, #128	@ 0x80
 800a9d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a9d8:	4b1c      	ldr	r3, [pc, #112]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800a9da:	2200      	movs	r2, #0
 800a9dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a9de:	4b1b      	ldr	r3, [pc, #108]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800a9e4:	4b19      	ldr	r3, [pc, #100]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a9ea:	4b18      	ldr	r3, [pc, #96]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800a9f0:	4816      	ldr	r0, [pc, #88]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800a9f2:	f001 fe51 	bl	800c698 <HAL_DMA_Init>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d001      	beq.n	800aa00 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 800a9fc:	f7fe fb36 	bl	800906c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a12      	ldr	r2, [pc, #72]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800aa04:	67da      	str	r2, [r3, #124]	@ 0x7c
 800aa06:	4a11      	ldr	r2, [pc, #68]	@ (800aa4c <HAL_UART_MspInit+0x2b8>)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	2100      	movs	r1, #0
 800aa10:	2026      	movs	r0, #38	@ 0x26
 800aa12:	f001 fe0c 	bl	800c62e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800aa16:	2026      	movs	r0, #38	@ 0x26
 800aa18:	f001 fe23 	bl	800c662 <HAL_NVIC_EnableIRQ>
}
 800aa1c:	bf00      	nop
 800aa1e:	3780      	adds	r7, #128	@ 0x80
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}
 800aa24:	40008000 	.word	0x40008000
 800aa28:	40021000 	.word	0x40021000
 800aa2c:	48000400 	.word	0x48000400
 800aa30:	2000259c 	.word	0x2000259c
 800aa34:	40020044 	.word	0x40020044
 800aa38:	200025fc 	.word	0x200025fc
 800aa3c:	40020058 	.word	0x40020058
 800aa40:	40004400 	.word	0x40004400
 800aa44:	2000265c 	.word	0x2000265c
 800aa48:	4002001c 	.word	0x4002001c
 800aa4c:	200026bc 	.word	0x200026bc
 800aa50:	40020030 	.word	0x40020030

0800aa54 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 800aa54:	480d      	ldr	r0, [pc, #52]	@ (800aa8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800aa56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 800aa58:	f7ff f994 	bl	8009d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800aa5c:	480c      	ldr	r0, [pc, #48]	@ (800aa90 <LoopForever+0x6>)
  ldr r1, =_edata
 800aa5e:	490d      	ldr	r1, [pc, #52]	@ (800aa94 <LoopForever+0xa>)
  ldr r2, =_sidata
 800aa60:	4a0d      	ldr	r2, [pc, #52]	@ (800aa98 <LoopForever+0xe>)
  movs r3, #0
 800aa62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800aa64:	e002      	b.n	800aa6c <LoopCopyDataInit>

0800aa66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aa66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aa68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aa6a:	3304      	adds	r3, #4

0800aa6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aa6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aa6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aa70:	d3f9      	bcc.n	800aa66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aa72:	4a0a      	ldr	r2, [pc, #40]	@ (800aa9c <LoopForever+0x12>)
  ldr r4, =_ebss
 800aa74:	4c0a      	ldr	r4, [pc, #40]	@ (800aaa0 <LoopForever+0x16>)
  movs r3, #0
 800aa76:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aa78:	e001      	b.n	800aa7e <LoopFillZerobss>

0800aa7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aa7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aa7c:	3204      	adds	r2, #4

0800aa7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aa7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aa80:	d3fb      	bcc.n	800aa7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800aa82:	f008 f911 	bl	8012ca8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800aa86:	f7fa fe37 	bl	80056f8 <main>

0800aa8a <LoopForever>:

LoopForever:
    b LoopForever
 800aa8a:	e7fe      	b.n	800aa8a <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 800aa8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800aa90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800aa94:	20000610 	.word	0x20000610
  ldr r2, =_sidata
 800aa98:	08015198 	.word	0x08015198
  ldr r2, =_sbss
 800aa9c:	20000610 	.word	0x20000610
  ldr r4, =_ebss
 800aaa0:	20002868 	.word	0x20002868

0800aaa4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800aaa4:	e7fe      	b.n	800aaa4 <ADC1_2_IRQHandler>

0800aaa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800aab0:	2003      	movs	r0, #3
 800aab2:	f001 fdb1 	bl	800c618 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800aab6:	2000      	movs	r0, #0
 800aab8:	f000 f80e 	bl	800aad8 <HAL_InitTick>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d002      	beq.n	800aac8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	71fb      	strb	r3, [r7, #7]
 800aac6:	e001      	b.n	800aacc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800aac8:	f7ff f834 	bl	8009b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800aacc:	79fb      	ldrb	r3, [r7, #7]

}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}
	...

0800aad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800aae4:	4b16      	ldr	r3, [pc, #88]	@ (800ab40 <HAL_InitTick+0x68>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d022      	beq.n	800ab32 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800aaec:	4b15      	ldr	r3, [pc, #84]	@ (800ab44 <HAL_InitTick+0x6c>)
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	4b13      	ldr	r3, [pc, #76]	@ (800ab40 <HAL_InitTick+0x68>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800aaf8:	fbb1 f3f3 	udiv	r3, r1, r3
 800aafc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab00:	4618      	mov	r0, r3
 800ab02:	f001 fdbc 	bl	800c67e <HAL_SYSTICK_Config>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d10f      	bne.n	800ab2c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2b0f      	cmp	r3, #15
 800ab10:	d809      	bhi.n	800ab26 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ab12:	2200      	movs	r2, #0
 800ab14:	6879      	ldr	r1, [r7, #4]
 800ab16:	f04f 30ff 	mov.w	r0, #4294967295
 800ab1a:	f001 fd88 	bl	800c62e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ab1e:	4a0a      	ldr	r2, [pc, #40]	@ (800ab48 <HAL_InitTick+0x70>)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6013      	str	r3, [r2, #0]
 800ab24:	e007      	b.n	800ab36 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	73fb      	strb	r3, [r7, #15]
 800ab2a:	e004      	b.n	800ab36 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	73fb      	strb	r3, [r7, #15]
 800ab30:	e001      	b.n	800ab36 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	200005bc 	.word	0x200005bc
 800ab44:	200005b4 	.word	0x200005b4
 800ab48:	200005b8 	.word	0x200005b8

0800ab4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ab50:	4b05      	ldr	r3, [pc, #20]	@ (800ab68 <HAL_IncTick+0x1c>)
 800ab52:	681a      	ldr	r2, [r3, #0]
 800ab54:	4b05      	ldr	r3, [pc, #20]	@ (800ab6c <HAL_IncTick+0x20>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	4413      	add	r3, r2
 800ab5a:	4a03      	ldr	r2, [pc, #12]	@ (800ab68 <HAL_IncTick+0x1c>)
 800ab5c:	6013      	str	r3, [r2, #0]
}
 800ab5e:	bf00      	nop
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr
 800ab68:	2000271c 	.word	0x2000271c
 800ab6c:	200005bc 	.word	0x200005bc

0800ab70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ab70:	b480      	push	{r7}
 800ab72:	af00      	add	r7, sp, #0
  return uwTick;
 800ab74:	4b03      	ldr	r3, [pc, #12]	@ (800ab84 <HAL_GetTick+0x14>)
 800ab76:	681b      	ldr	r3, [r3, #0]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
 800ab82:	bf00      	nop
 800ab84:	2000271c 	.word	0x2000271c

0800ab88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b083      	sub	sp, #12
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	431a      	orrs	r2, r3
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	609a      	str	r2, [r3, #8]
}
 800aba2:	bf00      	nop
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr

0800abae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
 800abb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	431a      	orrs	r2, r3
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	609a      	str	r2, [r3, #8]
}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	370c      	adds	r7, #12
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
 800abfc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	3360      	adds	r3, #96	@ 0x60
 800ac02:	461a      	mov	r2, r3
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	4413      	add	r3, r2
 800ac0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	4b08      	ldr	r3, [pc, #32]	@ (800ac34 <LL_ADC_SetOffset+0x44>)
 800ac12:	4013      	ands	r3, r2
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800ac28:	bf00      	nop
 800ac2a:	371c      	adds	r7, #28
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac32:	4770      	bx	lr
 800ac34:	03fff000 	.word	0x03fff000

0800ac38 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b085      	sub	sp, #20
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
 800ac40:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	3360      	adds	r3, #96	@ 0x60
 800ac46:	461a      	mov	r2, r3
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3714      	adds	r7, #20
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b087      	sub	sp, #28
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	60f8      	str	r0, [r7, #12]
 800ac6c:	60b9      	str	r1, [r7, #8]
 800ac6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	3360      	adds	r3, #96	@ 0x60
 800ac74:	461a      	mov	r2, r3
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	431a      	orrs	r2, r3
 800ac8a:	697b      	ldr	r3, [r7, #20]
 800ac8c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800ac8e:	bf00      	nop
 800ac90:	371c      	adds	r7, #28
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr

0800ac9a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800ac9a:	b480      	push	{r7}
 800ac9c:	b087      	sub	sp, #28
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	60b9      	str	r1, [r7, #8]
 800aca4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	3360      	adds	r3, #96	@ 0x60
 800acaa:	461a      	mov	r2, r3
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	431a      	orrs	r2, r3
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800acc4:	bf00      	nop
 800acc6:	371c      	adds	r7, #28
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	3360      	adds	r3, #96	@ 0x60
 800ace0:	461a      	mov	r2, r3
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	4413      	add	r3, r2
 800ace8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	431a      	orrs	r2, r3
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800acfa:	bf00      	nop
 800acfc:	371c      	adds	r7, #28
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b083      	sub	sp, #12
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
 800ad0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	695b      	ldr	r3, [r3, #20]
 800ad14:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	431a      	orrs	r2, r3
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	615a      	str	r2, [r3, #20]
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800ad40:	2301      	movs	r3, #1
 800ad42:	e000      	b.n	800ad46 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr

0800ad52 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b087      	sub	sp, #28
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	60f8      	str	r0, [r7, #12]
 800ad5a:	60b9      	str	r1, [r7, #8]
 800ad5c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	3330      	adds	r3, #48	@ 0x30
 800ad62:	461a      	mov	r2, r3
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	0a1b      	lsrs	r3, r3, #8
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	f003 030c 	and.w	r3, r3, #12
 800ad6e:	4413      	add	r3, r2
 800ad70:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800ad72:	697b      	ldr	r3, [r7, #20]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	f003 031f 	and.w	r3, r3, #31
 800ad7c:	211f      	movs	r1, #31
 800ad7e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad82:	43db      	mvns	r3, r3
 800ad84:	401a      	ands	r2, r3
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	0e9b      	lsrs	r3, r3, #26
 800ad8a:	f003 011f 	and.w	r1, r3, #31
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	f003 031f 	and.w	r3, r3, #31
 800ad94:	fa01 f303 	lsl.w	r3, r1, r3
 800ad98:	431a      	orrs	r2, r3
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800ad9e:	bf00      	nop
 800ada0:	371c      	adds	r7, #28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr

0800adaa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800adaa:	b480      	push	{r7}
 800adac:	b087      	sub	sp, #28
 800adae:	af00      	add	r7, sp, #0
 800adb0:	60f8      	str	r0, [r7, #12]
 800adb2:	60b9      	str	r1, [r7, #8]
 800adb4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	3314      	adds	r3, #20
 800adba:	461a      	mov	r2, r3
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	0e5b      	lsrs	r3, r3, #25
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	f003 0304 	and.w	r3, r3, #4
 800adc6:	4413      	add	r3, r2
 800adc8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	681a      	ldr	r2, [r3, #0]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	0d1b      	lsrs	r3, r3, #20
 800add2:	f003 031f 	and.w	r3, r3, #31
 800add6:	2107      	movs	r1, #7
 800add8:	fa01 f303 	lsl.w	r3, r1, r3
 800addc:	43db      	mvns	r3, r3
 800adde:	401a      	ands	r2, r3
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	0d1b      	lsrs	r3, r3, #20
 800ade4:	f003 031f 	and.w	r3, r3, #31
 800ade8:	6879      	ldr	r1, [r7, #4]
 800adea:	fa01 f303 	lsl.w	r3, r1, r3
 800adee:	431a      	orrs	r2, r3
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800adf4:	bf00      	nop
 800adf6:	371c      	adds	r7, #28
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b085      	sub	sp, #20
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	60f8      	str	r0, [r7, #12]
 800ae08:	60b9      	str	r1, [r7, #8]
 800ae0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae18:	43db      	mvns	r3, r3
 800ae1a:	401a      	ands	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f003 0318 	and.w	r3, r3, #24
 800ae22:	4908      	ldr	r1, [pc, #32]	@ (800ae44 <LL_ADC_SetChannelSingleDiff+0x44>)
 800ae24:	40d9      	lsrs	r1, r3
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	400b      	ands	r3, r1
 800ae2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae2e:	431a      	orrs	r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800ae36:	bf00      	nop
 800ae38:	3714      	adds	r7, #20
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
 800ae42:	bf00      	nop
 800ae44:	0007ffff 	.word	0x0007ffff

0800ae48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	f003 031f 	and.w	r3, r3, #31
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	689b      	ldr	r3, [r3, #8]
 800ae70:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800ae74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	6093      	str	r3, [r2, #8]
}
 800ae7c:	bf00      	nop
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae9c:	d101      	bne.n	800aea2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	e000      	b.n	800aea4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800aec0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800aec4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aee8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aeec:	d101      	bne.n	800aef2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800aeee:	2301      	movs	r3, #1
 800aef0:	e000      	b.n	800aef4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800af14:	f043 0201 	orr.w	r2, r3, #1
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800af3c:	f043 0202 	orr.w	r2, r3, #2
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800af44:	bf00      	nop
 800af46:	370c      	adds	r7, #12
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	f003 0301 	and.w	r3, r3, #1
 800af60:	2b01      	cmp	r3, #1
 800af62:	d101      	bne.n	800af68 <LL_ADC_IsEnabled+0x18>
 800af64:	2301      	movs	r3, #1
 800af66:	e000      	b.n	800af6a <LL_ADC_IsEnabled+0x1a>
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800af76:	b480      	push	{r7}
 800af78:	b083      	sub	sp, #12
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	f003 0302 	and.w	r3, r3, #2
 800af86:	2b02      	cmp	r3, #2
 800af88:	d101      	bne.n	800af8e <LL_ADC_IsDisableOngoing+0x18>
 800af8a:	2301      	movs	r3, #1
 800af8c:	e000      	b.n	800af90 <LL_ADC_IsDisableOngoing+0x1a>
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	689b      	ldr	r3, [r3, #8]
 800afa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800afac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800afb0:	f043 0204 	orr.w	r2, r3, #4
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	f003 0304 	and.w	r3, r3, #4
 800afd4:	2b04      	cmp	r3, #4
 800afd6:	d101      	bne.n	800afdc <LL_ADC_REG_IsConversionOngoing+0x18>
 800afd8:	2301      	movs	r3, #1
 800afda:	e000      	b.n	800afde <LL_ADC_REG_IsConversionOngoing+0x1a>
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	370c      	adds	r7, #12
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800afea:	b480      	push	{r7}
 800afec:	b083      	sub	sp, #12
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	f003 0308 	and.w	r3, r3, #8
 800affa:	2b08      	cmp	r3, #8
 800affc:	d101      	bne.n	800b002 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800affe:	2301      	movs	r3, #1
 800b000:	e000      	b.n	800b004 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b010:	b590      	push	{r4, r7, lr}
 800b012:	b089      	sub	sp, #36	@ 0x24
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b018:	2300      	movs	r3, #0
 800b01a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800b01c:	2300      	movs	r3, #0
 800b01e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b026:	2301      	movs	r3, #1
 800b028:	e1a9      	b.n	800b37e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	695b      	ldr	r3, [r3, #20]
 800b02e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b034:	2b00      	cmp	r3, #0
 800b036:	d109      	bne.n	800b04c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f7f9 fe77 	bl	8004d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4618      	mov	r0, r3
 800b052:	f7ff ff19 	bl	800ae88 <LL_ADC_IsDeepPowerDownEnabled>
 800b056:	4603      	mov	r3, r0
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d004      	beq.n	800b066 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4618      	mov	r0, r3
 800b062:	f7ff feff 	bl	800ae64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff ff34 	bl	800aed8 <LL_ADC_IsInternalRegulatorEnabled>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d115      	bne.n	800b0a2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff ff18 	bl	800aeb0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b080:	4b9c      	ldr	r3, [pc, #624]	@ (800b2f4 <HAL_ADC_Init+0x2e4>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	099b      	lsrs	r3, r3, #6
 800b086:	4a9c      	ldr	r2, [pc, #624]	@ (800b2f8 <HAL_ADC_Init+0x2e8>)
 800b088:	fba2 2303 	umull	r2, r3, r2, r3
 800b08c:	099b      	lsrs	r3, r3, #6
 800b08e:	3301      	adds	r3, #1
 800b090:	005b      	lsls	r3, r3, #1
 800b092:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b094:	e002      	b.n	800b09c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	3b01      	subs	r3, #1
 800b09a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d1f9      	bne.n	800b096 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f7ff ff16 	bl	800aed8 <LL_ADC_IsInternalRegulatorEnabled>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d10d      	bne.n	800b0ce <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0b6:	f043 0210 	orr.w	r2, r3, #16
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b0c2:	f043 0201 	orr.w	r2, r3, #1
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7ff ff76 	bl	800afc4 <LL_ADC_REG_IsConversionOngoing>
 800b0d8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0de:	f003 0310 	and.w	r3, r3, #16
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f040 8142 	bne.w	800b36c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	f040 813e 	bne.w	800b36c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b0f4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800b0f8:	f043 0202 	orr.w	r2, r3, #2
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff ff23 	bl	800af50 <LL_ADC_IsEnabled>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d141      	bne.n	800b194 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b118:	d004      	beq.n	800b124 <HAL_ADC_Init+0x114>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a77      	ldr	r2, [pc, #476]	@ (800b2fc <HAL_ADC_Init+0x2ec>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d10f      	bne.n	800b144 <HAL_ADC_Init+0x134>
 800b124:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800b128:	f7ff ff12 	bl	800af50 <LL_ADC_IsEnabled>
 800b12c:	4604      	mov	r4, r0
 800b12e:	4873      	ldr	r0, [pc, #460]	@ (800b2fc <HAL_ADC_Init+0x2ec>)
 800b130:	f7ff ff0e 	bl	800af50 <LL_ADC_IsEnabled>
 800b134:	4603      	mov	r3, r0
 800b136:	4323      	orrs	r3, r4
 800b138:	2b00      	cmp	r3, #0
 800b13a:	bf0c      	ite	eq
 800b13c:	2301      	moveq	r3, #1
 800b13e:	2300      	movne	r3, #0
 800b140:	b2db      	uxtb	r3, r3
 800b142:	e012      	b.n	800b16a <HAL_ADC_Init+0x15a>
 800b144:	486e      	ldr	r0, [pc, #440]	@ (800b300 <HAL_ADC_Init+0x2f0>)
 800b146:	f7ff ff03 	bl	800af50 <LL_ADC_IsEnabled>
 800b14a:	4604      	mov	r4, r0
 800b14c:	486d      	ldr	r0, [pc, #436]	@ (800b304 <HAL_ADC_Init+0x2f4>)
 800b14e:	f7ff feff 	bl	800af50 <LL_ADC_IsEnabled>
 800b152:	4603      	mov	r3, r0
 800b154:	431c      	orrs	r4, r3
 800b156:	486c      	ldr	r0, [pc, #432]	@ (800b308 <HAL_ADC_Init+0x2f8>)
 800b158:	f7ff fefa 	bl	800af50 <LL_ADC_IsEnabled>
 800b15c:	4603      	mov	r3, r0
 800b15e:	4323      	orrs	r3, r4
 800b160:	2b00      	cmp	r3, #0
 800b162:	bf0c      	ite	eq
 800b164:	2301      	moveq	r3, #1
 800b166:	2300      	movne	r3, #0
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d012      	beq.n	800b194 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b176:	d004      	beq.n	800b182 <HAL_ADC_Init+0x172>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	4a5f      	ldr	r2, [pc, #380]	@ (800b2fc <HAL_ADC_Init+0x2ec>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d101      	bne.n	800b186 <HAL_ADC_Init+0x176>
 800b182:	4a62      	ldr	r2, [pc, #392]	@ (800b30c <HAL_ADC_Init+0x2fc>)
 800b184:	e000      	b.n	800b188 <HAL_ADC_Init+0x178>
 800b186:	4a62      	ldr	r2, [pc, #392]	@ (800b310 <HAL_ADC_Init+0x300>)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	4619      	mov	r1, r3
 800b18e:	4610      	mov	r0, r2
 800b190:	f7ff fcfa 	bl	800ab88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	7f5b      	ldrb	r3, [r3, #29]
 800b198:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b19e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800b1a4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800b1aa:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b1b2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800b1be:	2b01      	cmp	r3, #1
 800b1c0:	d106      	bne.n	800b1d0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1c6:	3b01      	subs	r3, #1
 800b1c8:	045b      	lsls	r3, r3, #17
 800b1ca:	69ba      	ldr	r2, [r7, #24]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d009      	beq.n	800b1ec <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1dc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1e4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b1e6:	69ba      	ldr	r2, [r7, #24]
 800b1e8:	4313      	orrs	r3, r2
 800b1ea:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68da      	ldr	r2, [r3, #12]
 800b1f2:	4b48      	ldr	r3, [pc, #288]	@ (800b314 <HAL_ADC_Init+0x304>)
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	6812      	ldr	r2, [r2, #0]
 800b1fa:	69b9      	ldr	r1, [r7, #24]
 800b1fc:	430b      	orrs	r3, r1
 800b1fe:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	691b      	ldr	r3, [r3, #16]
 800b206:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	430a      	orrs	r2, r1
 800b214:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff fee5 	bl	800afea <LL_ADC_INJ_IsConversionOngoing>
 800b220:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d17f      	bne.n	800b328 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d17c      	bne.n	800b328 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b232:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b23a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800b23c:	4313      	orrs	r3, r2
 800b23e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b24a:	f023 0302 	bic.w	r3, r3, #2
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	6812      	ldr	r2, [r2, #0]
 800b252:	69b9      	ldr	r1, [r7, #24]
 800b254:	430b      	orrs	r3, r1
 800b256:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d017      	beq.n	800b290 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	691a      	ldr	r2, [r3, #16]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800b26e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b278:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b27c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b280:	687a      	ldr	r2, [r7, #4]
 800b282:	6911      	ldr	r1, [r2, #16]
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	6812      	ldr	r2, [r2, #0]
 800b288:	430b      	orrs	r3, r1
 800b28a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800b28e:	e013      	b.n	800b2b8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691a      	ldr	r2, [r3, #16]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800b29e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	6812      	ldr	r2, [r2, #0]
 800b2ac:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800b2b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800b2b4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d12a      	bne.n	800b318 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	691b      	ldr	r3, [r3, #16]
 800b2c8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b2cc:	f023 0304 	bic.w	r3, r3, #4
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b2d8:	4311      	orrs	r1, r2
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800b2de:	4311      	orrs	r1, r2
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b2e4:	430a      	orrs	r2, r1
 800b2e6:	431a      	orrs	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f042 0201 	orr.w	r2, r2, #1
 800b2f0:	611a      	str	r2, [r3, #16]
 800b2f2:	e019      	b.n	800b328 <HAL_ADC_Init+0x318>
 800b2f4:	200005b4 	.word	0x200005b4
 800b2f8:	053e2d63 	.word	0x053e2d63
 800b2fc:	50000100 	.word	0x50000100
 800b300:	50000400 	.word	0x50000400
 800b304:	50000500 	.word	0x50000500
 800b308:	50000600 	.word	0x50000600
 800b30c:	50000300 	.word	0x50000300
 800b310:	50000700 	.word	0x50000700
 800b314:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	691a      	ldr	r2, [r3, #16]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f022 0201 	bic.w	r2, r2, #1
 800b326:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	695b      	ldr	r3, [r3, #20]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d10c      	bne.n	800b34a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b336:	f023 010f 	bic.w	r1, r3, #15
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6a1b      	ldr	r3, [r3, #32]
 800b33e:	1e5a      	subs	r2, r3, #1
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	430a      	orrs	r2, r1
 800b346:	631a      	str	r2, [r3, #48]	@ 0x30
 800b348:	e007      	b.n	800b35a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f022 020f 	bic.w	r2, r2, #15
 800b358:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b35e:	f023 0303 	bic.w	r3, r3, #3
 800b362:	f043 0201 	orr.w	r2, r3, #1
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b36a:	e007      	b.n	800b37c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b370:	f043 0210 	orr.w	r2, r3, #16
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800b378:	2301      	movs	r3, #1
 800b37a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b37c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3724      	adds	r7, #36	@ 0x24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd90      	pop	{r4, r7, pc}
 800b386:	bf00      	nop

0800b388 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b086      	sub	sp, #24
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	60f8      	str	r0, [r7, #12]
 800b390:	60b9      	str	r1, [r7, #8]
 800b392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b39c:	d004      	beq.n	800b3a8 <HAL_ADC_Start_DMA+0x20>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a5a      	ldr	r2, [pc, #360]	@ (800b50c <HAL_ADC_Start_DMA+0x184>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d101      	bne.n	800b3ac <HAL_ADC_Start_DMA+0x24>
 800b3a8:	4b59      	ldr	r3, [pc, #356]	@ (800b510 <HAL_ADC_Start_DMA+0x188>)
 800b3aa:	e000      	b.n	800b3ae <HAL_ADC_Start_DMA+0x26>
 800b3ac:	4b59      	ldr	r3, [pc, #356]	@ (800b514 <HAL_ADC_Start_DMA+0x18c>)
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff fd4a 	bl	800ae48 <LL_ADC_GetMultimode>
 800b3b4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7ff fe02 	bl	800afc4 <LL_ADC_REG_IsConversionOngoing>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f040 809b 	bne.w	800b4fe <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d101      	bne.n	800b3d6 <HAL_ADC_Start_DMA+0x4e>
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	e096      	b.n	800b504 <HAL_ADC_Start_DMA+0x17c>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2201      	movs	r2, #1
 800b3da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a4d      	ldr	r2, [pc, #308]	@ (800b518 <HAL_ADC_Start_DMA+0x190>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d008      	beq.n	800b3fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d005      	beq.n	800b3fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	2b05      	cmp	r3, #5
 800b3f2:	d002      	beq.n	800b3fa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	2b09      	cmp	r3, #9
 800b3f8:	d17a      	bne.n	800b4f0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b3fa:	68f8      	ldr	r0, [r7, #12]
 800b3fc:	f000 fcf6 	bl	800bdec <ADC_Enable>
 800b400:	4603      	mov	r3, r0
 800b402:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b404:	7dfb      	ldrb	r3, [r7, #23]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d16d      	bne.n	800b4e6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b40e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b412:	f023 0301 	bic.w	r3, r3, #1
 800b416:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a3a      	ldr	r2, [pc, #232]	@ (800b50c <HAL_ADC_Start_DMA+0x184>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d009      	beq.n	800b43c <HAL_ADC_Start_DMA+0xb4>
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a3b      	ldr	r2, [pc, #236]	@ (800b51c <HAL_ADC_Start_DMA+0x194>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d002      	beq.n	800b438 <HAL_ADC_Start_DMA+0xb0>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	e003      	b.n	800b440 <HAL_ADC_Start_DMA+0xb8>
 800b438:	4b39      	ldr	r3, [pc, #228]	@ (800b520 <HAL_ADC_Start_DMA+0x198>)
 800b43a:	e001      	b.n	800b440 <HAL_ADC_Start_DMA+0xb8>
 800b43c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	6812      	ldr	r2, [r2, #0]
 800b444:	4293      	cmp	r3, r2
 800b446:	d002      	beq.n	800b44e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d105      	bne.n	800b45a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b452:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b45e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b462:	2b00      	cmp	r3, #0
 800b464:	d006      	beq.n	800b474 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b46a:	f023 0206 	bic.w	r2, r3, #6
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	661a      	str	r2, [r3, #96]	@ 0x60
 800b472:	e002      	b.n	800b47a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b47e:	4a29      	ldr	r2, [pc, #164]	@ (800b524 <HAL_ADC_Start_DMA+0x19c>)
 800b480:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b486:	4a28      	ldr	r2, [pc, #160]	@ (800b528 <HAL_ADC_Start_DMA+0x1a0>)
 800b488:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b48e:	4a27      	ldr	r2, [pc, #156]	@ (800b52c <HAL_ADC_Start_DMA+0x1a4>)
 800b490:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	221c      	movs	r2, #28
 800b498:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	685a      	ldr	r2, [r3, #4]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	f042 0210 	orr.w	r2, r2, #16
 800b4b0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	68da      	ldr	r2, [r3, #12]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f042 0201 	orr.w	r2, r2, #1
 800b4c0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	3340      	adds	r3, #64	@ 0x40
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f001 f989 	bl	800c7e8 <HAL_DMA_Start_IT>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7ff fd5c 	bl	800af9c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800b4e4:	e00d      	b.n	800b502 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800b4ee:	e008      	b.n	800b502 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800b4fc:	e001      	b.n	800b502 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b4fe:	2302      	movs	r3, #2
 800b500:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b502:	7dfb      	ldrb	r3, [r7, #23]
}
 800b504:	4618      	mov	r0, r3
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	50000100 	.word	0x50000100
 800b510:	50000300 	.word	0x50000300
 800b514:	50000700 	.word	0x50000700
 800b518:	50000600 	.word	0x50000600
 800b51c:	50000500 	.word	0x50000500
 800b520:	50000400 	.word	0x50000400
 800b524:	0800bfd7 	.word	0x0800bfd7
 800b528:	0800c0af 	.word	0x0800c0af
 800b52c:	0800c0cb 	.word	0x0800c0cb

0800b530 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b530:	b480      	push	{r7}
 800b532:	b083      	sub	sp, #12
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800b560:	bf00      	nop
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b0b6      	sub	sp, #216	@ 0xd8
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b576:	2300      	movs	r3, #0
 800b578:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800b57c:	2300      	movs	r3, #0
 800b57e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800b586:	2b01      	cmp	r3, #1
 800b588:	d102      	bne.n	800b590 <HAL_ADC_ConfigChannel+0x24>
 800b58a:	2302      	movs	r3, #2
 800b58c:	f000 bc13 	b.w	800bdb6 <HAL_ADC_ConfigChannel+0x84a>
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	4618      	mov	r0, r3
 800b59e:	f7ff fd11 	bl	800afc4 <LL_ADC_REG_IsConversionOngoing>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f040 83f3 	bne.w	800bd90 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6818      	ldr	r0, [r3, #0]
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	6859      	ldr	r1, [r3, #4]
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	f7ff fbcb 	bl	800ad52 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7ff fcff 	bl	800afc4 <LL_ADC_REG_IsConversionOngoing>
 800b5c6:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	f7ff fd0b 	bl	800afea <LL_ADC_INJ_IsConversionOngoing>
 800b5d4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b5d8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f040 81d9 	bne.w	800b994 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b5e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	f040 81d4 	bne.w	800b994 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	689b      	ldr	r3, [r3, #8]
 800b5f0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5f4:	d10f      	bne.n	800b616 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6818      	ldr	r0, [r3, #0]
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2200      	movs	r2, #0
 800b600:	4619      	mov	r1, r3
 800b602:	f7ff fbd2 	bl	800adaa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800b60e:	4618      	mov	r0, r3
 800b610:	f7ff fb79 	bl	800ad06 <LL_ADC_SetSamplingTimeCommonConfig>
 800b614:	e00e      	b.n	800b634 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6818      	ldr	r0, [r3, #0]
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	6819      	ldr	r1, [r3, #0]
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	689b      	ldr	r3, [r3, #8]
 800b622:	461a      	mov	r2, r3
 800b624:	f7ff fbc1 	bl	800adaa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2100      	movs	r1, #0
 800b62e:	4618      	mov	r0, r3
 800b630:	f7ff fb69 	bl	800ad06 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	695a      	ldr	r2, [r3, #20]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	08db      	lsrs	r3, r3, #3
 800b640:	f003 0303 	and.w	r3, r3, #3
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	fa02 f303 	lsl.w	r3, r2, r3
 800b64a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	2b04      	cmp	r3, #4
 800b654:	d022      	beq.n	800b69c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6818      	ldr	r0, [r3, #0]
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	6919      	ldr	r1, [r3, #16]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b666:	f7ff fac3 	bl	800abf0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6818      	ldr	r0, [r3, #0]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	6919      	ldr	r1, [r3, #16]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	699b      	ldr	r3, [r3, #24]
 800b676:	461a      	mov	r2, r3
 800b678:	f7ff fb0f 	bl	800ac9a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6818      	ldr	r0, [r3, #0]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d102      	bne.n	800b692 <HAL_ADC_ConfigChannel+0x126>
 800b68c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b690:	e000      	b.n	800b694 <HAL_ADC_ConfigChannel+0x128>
 800b692:	2300      	movs	r3, #0
 800b694:	461a      	mov	r2, r3
 800b696:	f7ff fb1b 	bl	800acd0 <LL_ADC_SetOffsetSaturation>
 800b69a:	e17b      	b.n	800b994 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7ff fac8 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <HAL_ADC_ConfigChannel+0x15c>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	2100      	movs	r1, #0
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f7ff fabd 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	0e9b      	lsrs	r3, r3, #26
 800b6c2:	f003 021f 	and.w	r2, r3, #31
 800b6c6:	e01e      	b.n	800b706 <HAL_ADC_ConfigChannel+0x19a>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff fab2 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b6da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b6de:	fa93 f3a3 	rbit	r3, r3
 800b6e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b6e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b6ea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b6ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d101      	bne.n	800b6fa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800b6f6:	2320      	movs	r3, #32
 800b6f8:	e004      	b.n	800b704 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800b6fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b6fe:	fab3 f383 	clz	r3, r3
 800b702:	b2db      	uxtb	r3, r3
 800b704:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d105      	bne.n	800b71e <HAL_ADC_ConfigChannel+0x1b2>
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	0e9b      	lsrs	r3, r3, #26
 800b718:	f003 031f 	and.w	r3, r3, #31
 800b71c:	e018      	b.n	800b750 <HAL_ADC_ConfigChannel+0x1e4>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b726:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b72a:	fa93 f3a3 	rbit	r3, r3
 800b72e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800b732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b736:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800b73a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d101      	bne.n	800b746 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800b742:	2320      	movs	r3, #32
 800b744:	e004      	b.n	800b750 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800b746:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b74a:	fab3 f383 	clz	r3, r3
 800b74e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800b750:	429a      	cmp	r2, r3
 800b752:	d106      	bne.n	800b762 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2200      	movs	r2, #0
 800b75a:	2100      	movs	r1, #0
 800b75c:	4618      	mov	r0, r3
 800b75e:	f7ff fa81 	bl	800ac64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2101      	movs	r1, #1
 800b768:	4618      	mov	r0, r3
 800b76a:	f7ff fa65 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b76e:	4603      	mov	r3, r0
 800b770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b774:	2b00      	cmp	r3, #0
 800b776:	d10a      	bne.n	800b78e <HAL_ADC_ConfigChannel+0x222>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2101      	movs	r1, #1
 800b77e:	4618      	mov	r0, r3
 800b780:	f7ff fa5a 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b784:	4603      	mov	r3, r0
 800b786:	0e9b      	lsrs	r3, r3, #26
 800b788:	f003 021f 	and.w	r2, r3, #31
 800b78c:	e01e      	b.n	800b7cc <HAL_ADC_ConfigChannel+0x260>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2101      	movs	r1, #1
 800b794:	4618      	mov	r0, r3
 800b796:	f7ff fa4f 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b7a4:	fa93 f3a3 	rbit	r3, r3
 800b7a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800b7ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b7b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800b7b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d101      	bne.n	800b7c0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800b7bc:	2320      	movs	r3, #32
 800b7be:	e004      	b.n	800b7ca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800b7c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b7c4:	fab3 f383 	clz	r3, r3
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d105      	bne.n	800b7e4 <HAL_ADC_ConfigChannel+0x278>
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	0e9b      	lsrs	r3, r3, #26
 800b7de:	f003 031f 	and.w	r3, r3, #31
 800b7e2:	e018      	b.n	800b816 <HAL_ADC_ConfigChannel+0x2aa>
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b7ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b7f0:	fa93 f3a3 	rbit	r3, r3
 800b7f4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800b7f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b7fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800b800:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d101      	bne.n	800b80c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800b808:	2320      	movs	r3, #32
 800b80a:	e004      	b.n	800b816 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800b80c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b810:	fab3 f383 	clz	r3, r3
 800b814:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b816:	429a      	cmp	r2, r3
 800b818:	d106      	bne.n	800b828 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	2200      	movs	r2, #0
 800b820:	2101      	movs	r1, #1
 800b822:	4618      	mov	r0, r3
 800b824:	f7ff fa1e 	bl	800ac64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2102      	movs	r1, #2
 800b82e:	4618      	mov	r0, r3
 800b830:	f7ff fa02 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b834:	4603      	mov	r3, r0
 800b836:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10a      	bne.n	800b854 <HAL_ADC_ConfigChannel+0x2e8>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2102      	movs	r1, #2
 800b844:	4618      	mov	r0, r3
 800b846:	f7ff f9f7 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b84a:	4603      	mov	r3, r0
 800b84c:	0e9b      	lsrs	r3, r3, #26
 800b84e:	f003 021f 	and.w	r2, r3, #31
 800b852:	e01e      	b.n	800b892 <HAL_ADC_ConfigChannel+0x326>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2102      	movs	r1, #2
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7ff f9ec 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b860:	4603      	mov	r3, r0
 800b862:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b866:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b86a:	fa93 f3a3 	rbit	r3, r3
 800b86e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800b872:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b876:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800b87a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d101      	bne.n	800b886 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800b882:	2320      	movs	r3, #32
 800b884:	e004      	b.n	800b890 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800b886:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b88a:	fab3 f383 	clz	r3, r3
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d105      	bne.n	800b8aa <HAL_ADC_ConfigChannel+0x33e>
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	0e9b      	lsrs	r3, r3, #26
 800b8a4:	f003 031f 	and.w	r3, r3, #31
 800b8a8:	e016      	b.n	800b8d8 <HAL_ADC_ConfigChannel+0x36c>
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b8b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b8b6:	fa93 f3a3 	rbit	r3, r3
 800b8ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800b8bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b8be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800b8c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d101      	bne.n	800b8ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800b8ca:	2320      	movs	r3, #32
 800b8cc:	e004      	b.n	800b8d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800b8ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b8d2:	fab3 f383 	clz	r3, r3
 800b8d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b8d8:	429a      	cmp	r2, r3
 800b8da:	d106      	bne.n	800b8ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	2102      	movs	r1, #2
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7ff f9bd 	bl	800ac64 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2103      	movs	r1, #3
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f7ff f9a1 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d10a      	bne.n	800b916 <HAL_ADC_ConfigChannel+0x3aa>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2103      	movs	r1, #3
 800b906:	4618      	mov	r0, r3
 800b908:	f7ff f996 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b90c:	4603      	mov	r3, r0
 800b90e:	0e9b      	lsrs	r3, r3, #26
 800b910:	f003 021f 	and.w	r2, r3, #31
 800b914:	e017      	b.n	800b946 <HAL_ADC_ConfigChannel+0x3da>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	2103      	movs	r1, #3
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7ff f98b 	bl	800ac38 <LL_ADC_GetOffsetChannel>
 800b922:	4603      	mov	r3, r0
 800b924:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b928:	fa93 f3a3 	rbit	r3, r3
 800b92c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800b92e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b930:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800b932:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800b938:	2320      	movs	r3, #32
 800b93a:	e003      	b.n	800b944 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800b93c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b93e:	fab3 f383 	clz	r3, r3
 800b942:	b2db      	uxtb	r3, r3
 800b944:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d105      	bne.n	800b95e <HAL_ADC_ConfigChannel+0x3f2>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	0e9b      	lsrs	r3, r3, #26
 800b958:	f003 031f 	and.w	r3, r3, #31
 800b95c:	e011      	b.n	800b982 <HAL_ADC_ConfigChannel+0x416>
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b966:	fa93 f3a3 	rbit	r3, r3
 800b96a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800b96c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b96e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800b970:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800b976:	2320      	movs	r3, #32
 800b978:	e003      	b.n	800b982 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800b97a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b97c:	fab3 f383 	clz	r3, r3
 800b980:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b982:	429a      	cmp	r2, r3
 800b984:	d106      	bne.n	800b994 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2200      	movs	r2, #0
 800b98c:	2103      	movs	r1, #3
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff f968 	bl	800ac64 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff fad9 	bl	800af50 <LL_ADC_IsEnabled>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	f040 813d 	bne.w	800bc20 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6818      	ldr	r0, [r3, #0]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	6819      	ldr	r1, [r3, #0]
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f7ff fa24 	bl	800ae00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	4aa2      	ldr	r2, [pc, #648]	@ (800bc48 <HAL_ADC_ConfigChannel+0x6dc>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	f040 812e 	bne.w	800bc20 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10b      	bne.n	800b9ec <HAL_ADC_ConfigChannel+0x480>
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	0e9b      	lsrs	r3, r3, #26
 800b9da:	3301      	adds	r3, #1
 800b9dc:	f003 031f 	and.w	r3, r3, #31
 800b9e0:	2b09      	cmp	r3, #9
 800b9e2:	bf94      	ite	ls
 800b9e4:	2301      	movls	r3, #1
 800b9e6:	2300      	movhi	r3, #0
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	e019      	b.n	800ba20 <HAL_ADC_ConfigChannel+0x4b4>
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b9f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9f4:	fa93 f3a3 	rbit	r3, r3
 800b9f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800b9fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9fc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800b9fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d101      	bne.n	800ba08 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800ba04:	2320      	movs	r3, #32
 800ba06:	e003      	b.n	800ba10 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800ba08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba0a:	fab3 f383 	clz	r3, r3
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	3301      	adds	r3, #1
 800ba12:	f003 031f 	and.w	r3, r3, #31
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	bf94      	ite	ls
 800ba1a:	2301      	movls	r3, #1
 800ba1c:	2300      	movhi	r3, #0
 800ba1e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d079      	beq.n	800bb18 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d107      	bne.n	800ba40 <HAL_ADC_ConfigChannel+0x4d4>
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	0e9b      	lsrs	r3, r3, #26
 800ba36:	3301      	adds	r3, #1
 800ba38:	069b      	lsls	r3, r3, #26
 800ba3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ba3e:	e015      	b.n	800ba6c <HAL_ADC_ConfigChannel+0x500>
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba48:	fa93 f3a3 	rbit	r3, r3
 800ba4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800ba4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba50:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800ba52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d101      	bne.n	800ba5c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800ba58:	2320      	movs	r3, #32
 800ba5a:	e003      	b.n	800ba64 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800ba5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba5e:	fab3 f383 	clz	r3, r3
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	3301      	adds	r3, #1
 800ba66:	069b      	lsls	r3, r3, #26
 800ba68:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d109      	bne.n	800ba8c <HAL_ADC_ConfigChannel+0x520>
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	0e9b      	lsrs	r3, r3, #26
 800ba7e:	3301      	adds	r3, #1
 800ba80:	f003 031f 	and.w	r3, r3, #31
 800ba84:	2101      	movs	r1, #1
 800ba86:	fa01 f303 	lsl.w	r3, r1, r3
 800ba8a:	e017      	b.n	800babc <HAL_ADC_ConfigChannel+0x550>
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ba92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba94:	fa93 f3a3 	rbit	r3, r3
 800ba98:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800ba9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ba9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800ba9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d101      	bne.n	800baa8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800baa4:	2320      	movs	r3, #32
 800baa6:	e003      	b.n	800bab0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800baa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baaa:	fab3 f383 	clz	r3, r3
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	3301      	adds	r3, #1
 800bab2:	f003 031f 	and.w	r3, r3, #31
 800bab6:	2101      	movs	r1, #1
 800bab8:	fa01 f303 	lsl.w	r3, r1, r3
 800babc:	ea42 0103 	orr.w	r1, r2, r3
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d10a      	bne.n	800bae2 <HAL_ADC_ConfigChannel+0x576>
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	0e9b      	lsrs	r3, r3, #26
 800bad2:	3301      	adds	r3, #1
 800bad4:	f003 021f 	and.w	r2, r3, #31
 800bad8:	4613      	mov	r3, r2
 800bada:	005b      	lsls	r3, r3, #1
 800badc:	4413      	add	r3, r2
 800bade:	051b      	lsls	r3, r3, #20
 800bae0:	e018      	b.n	800bb14 <HAL_ADC_ConfigChannel+0x5a8>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baea:	fa93 f3a3 	rbit	r3, r3
 800baee:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800baf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800baf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800baf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d101      	bne.n	800bafe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800bafa:	2320      	movs	r3, #32
 800bafc:	e003      	b.n	800bb06 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800bafe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb00:	fab3 f383 	clz	r3, r3
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	3301      	adds	r3, #1
 800bb08:	f003 021f 	and.w	r2, r3, #31
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	4413      	add	r3, r2
 800bb12:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bb14:	430b      	orrs	r3, r1
 800bb16:	e07e      	b.n	800bc16 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d107      	bne.n	800bb34 <HAL_ADC_ConfigChannel+0x5c8>
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	0e9b      	lsrs	r3, r3, #26
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	069b      	lsls	r3, r3, #26
 800bb2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bb32:	e015      	b.n	800bb60 <HAL_ADC_ConfigChannel+0x5f4>
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb3c:	fa93 f3a3 	rbit	r3, r3
 800bb40:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800bb42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb44:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800bb46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d101      	bne.n	800bb50 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800bb4c:	2320      	movs	r3, #32
 800bb4e:	e003      	b.n	800bb58 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800bb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb52:	fab3 f383 	clz	r3, r3
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	3301      	adds	r3, #1
 800bb5a:	069b      	lsls	r3, r3, #26
 800bb5c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d109      	bne.n	800bb80 <HAL_ADC_ConfigChannel+0x614>
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	0e9b      	lsrs	r3, r3, #26
 800bb72:	3301      	adds	r3, #1
 800bb74:	f003 031f 	and.w	r3, r3, #31
 800bb78:	2101      	movs	r1, #1
 800bb7a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb7e:	e017      	b.n	800bbb0 <HAL_ADC_ConfigChannel+0x644>
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bb86:	6a3b      	ldr	r3, [r7, #32]
 800bb88:	fa93 f3a3 	rbit	r3, r3
 800bb8c:	61fb      	str	r3, [r7, #28]
  return result;
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800bb92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800bb98:	2320      	movs	r3, #32
 800bb9a:	e003      	b.n	800bba4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9e:	fab3 f383 	clz	r3, r3
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	3301      	adds	r3, #1
 800bba6:	f003 031f 	and.w	r3, r3, #31
 800bbaa:	2101      	movs	r1, #1
 800bbac:	fa01 f303 	lsl.w	r3, r1, r3
 800bbb0:	ea42 0103 	orr.w	r1, r2, r3
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10d      	bne.n	800bbdc <HAL_ADC_ConfigChannel+0x670>
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	0e9b      	lsrs	r3, r3, #26
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	f003 021f 	and.w	r2, r3, #31
 800bbcc:	4613      	mov	r3, r2
 800bbce:	005b      	lsls	r3, r3, #1
 800bbd0:	4413      	add	r3, r2
 800bbd2:	3b1e      	subs	r3, #30
 800bbd4:	051b      	lsls	r3, r3, #20
 800bbd6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800bbda:	e01b      	b.n	800bc14 <HAL_ADC_ConfigChannel+0x6a8>
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	fa93 f3a3 	rbit	r3, r3
 800bbe8:	613b      	str	r3, [r7, #16]
  return result;
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800bbee:	69bb      	ldr	r3, [r7, #24]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d101      	bne.n	800bbf8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800bbf4:	2320      	movs	r3, #32
 800bbf6:	e003      	b.n	800bc00 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	fab3 f383 	clz	r3, r3
 800bbfe:	b2db      	uxtb	r3, r3
 800bc00:	3301      	adds	r3, #1
 800bc02:	f003 021f 	and.w	r2, r3, #31
 800bc06:	4613      	mov	r3, r2
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	4413      	add	r3, r2
 800bc0c:	3b1e      	subs	r3, #30
 800bc0e:	051b      	lsls	r3, r3, #20
 800bc10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc14:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800bc16:	683a      	ldr	r2, [r7, #0]
 800bc18:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	f7ff f8c5 	bl	800adaa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	681a      	ldr	r2, [r3, #0]
 800bc24:	4b09      	ldr	r3, [pc, #36]	@ (800bc4c <HAL_ADC_ConfigChannel+0x6e0>)
 800bc26:	4013      	ands	r3, r2
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	f000 80be 	beq.w	800bdaa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc36:	d004      	beq.n	800bc42 <HAL_ADC_ConfigChannel+0x6d6>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4a04      	ldr	r2, [pc, #16]	@ (800bc50 <HAL_ADC_ConfigChannel+0x6e4>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d10a      	bne.n	800bc58 <HAL_ADC_ConfigChannel+0x6ec>
 800bc42:	4b04      	ldr	r3, [pc, #16]	@ (800bc54 <HAL_ADC_ConfigChannel+0x6e8>)
 800bc44:	e009      	b.n	800bc5a <HAL_ADC_ConfigChannel+0x6ee>
 800bc46:	bf00      	nop
 800bc48:	407f0000 	.word	0x407f0000
 800bc4c:	80080000 	.word	0x80080000
 800bc50:	50000100 	.word	0x50000100
 800bc54:	50000300 	.word	0x50000300
 800bc58:	4b59      	ldr	r3, [pc, #356]	@ (800bdc0 <HAL_ADC_ConfigChannel+0x854>)
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe ffba 	bl	800abd4 <LL_ADC_GetCommonPathInternalCh>
 800bc60:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a56      	ldr	r2, [pc, #344]	@ (800bdc4 <HAL_ADC_ConfigChannel+0x858>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d004      	beq.n	800bc78 <HAL_ADC_ConfigChannel+0x70c>
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a55      	ldr	r2, [pc, #340]	@ (800bdc8 <HAL_ADC_ConfigChannel+0x85c>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d13a      	bne.n	800bcee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800bc78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bc7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d134      	bne.n	800bcee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc8c:	d005      	beq.n	800bc9a <HAL_ADC_ConfigChannel+0x72e>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a4e      	ldr	r2, [pc, #312]	@ (800bdcc <HAL_ADC_ConfigChannel+0x860>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	f040 8085 	bne.w	800bda4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bca2:	d004      	beq.n	800bcae <HAL_ADC_ConfigChannel+0x742>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	4a49      	ldr	r2, [pc, #292]	@ (800bdd0 <HAL_ADC_ConfigChannel+0x864>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d101      	bne.n	800bcb2 <HAL_ADC_ConfigChannel+0x746>
 800bcae:	4a49      	ldr	r2, [pc, #292]	@ (800bdd4 <HAL_ADC_ConfigChannel+0x868>)
 800bcb0:	e000      	b.n	800bcb4 <HAL_ADC_ConfigChannel+0x748>
 800bcb2:	4a43      	ldr	r2, [pc, #268]	@ (800bdc0 <HAL_ADC_ConfigChannel+0x854>)
 800bcb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bcb8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bcbc:	4619      	mov	r1, r3
 800bcbe:	4610      	mov	r0, r2
 800bcc0:	f7fe ff75 	bl	800abae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800bcc4:	4b44      	ldr	r3, [pc, #272]	@ (800bdd8 <HAL_ADC_ConfigChannel+0x86c>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	099b      	lsrs	r3, r3, #6
 800bcca:	4a44      	ldr	r2, [pc, #272]	@ (800bddc <HAL_ADC_ConfigChannel+0x870>)
 800bccc:	fba2 2303 	umull	r2, r3, r2, r3
 800bcd0:	099b      	lsrs	r3, r3, #6
 800bcd2:	1c5a      	adds	r2, r3, #1
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	005b      	lsls	r3, r3, #1
 800bcd8:	4413      	add	r3, r2
 800bcda:	009b      	lsls	r3, r3, #2
 800bcdc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800bcde:	e002      	b.n	800bce6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	3b01      	subs	r3, #1
 800bce4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1f9      	bne.n	800bce0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bcec:	e05a      	b.n	800bda4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a3b      	ldr	r2, [pc, #236]	@ (800bde0 <HAL_ADC_ConfigChannel+0x874>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d125      	bne.n	800bd44 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800bcf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bcfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d11f      	bne.n	800bd44 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a31      	ldr	r2, [pc, #196]	@ (800bdd0 <HAL_ADC_ConfigChannel+0x864>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d104      	bne.n	800bd18 <HAL_ADC_ConfigChannel+0x7ac>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a34      	ldr	r2, [pc, #208]	@ (800bde4 <HAL_ADC_ConfigChannel+0x878>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d047      	beq.n	800bda8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd20:	d004      	beq.n	800bd2c <HAL_ADC_ConfigChannel+0x7c0>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a2a      	ldr	r2, [pc, #168]	@ (800bdd0 <HAL_ADC_ConfigChannel+0x864>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d101      	bne.n	800bd30 <HAL_ADC_ConfigChannel+0x7c4>
 800bd2c:	4a29      	ldr	r2, [pc, #164]	@ (800bdd4 <HAL_ADC_ConfigChannel+0x868>)
 800bd2e:	e000      	b.n	800bd32 <HAL_ADC_ConfigChannel+0x7c6>
 800bd30:	4a23      	ldr	r2, [pc, #140]	@ (800bdc0 <HAL_ADC_ConfigChannel+0x854>)
 800bd32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	f7fe ff36 	bl	800abae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bd42:	e031      	b.n	800bda8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a27      	ldr	r2, [pc, #156]	@ (800bde8 <HAL_ADC_ConfigChannel+0x87c>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d12d      	bne.n	800bdaa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800bd4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d127      	bne.n	800bdaa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a1c      	ldr	r2, [pc, #112]	@ (800bdd0 <HAL_ADC_ConfigChannel+0x864>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d022      	beq.n	800bdaa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd6c:	d004      	beq.n	800bd78 <HAL_ADC_ConfigChannel+0x80c>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a17      	ldr	r2, [pc, #92]	@ (800bdd0 <HAL_ADC_ConfigChannel+0x864>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d101      	bne.n	800bd7c <HAL_ADC_ConfigChannel+0x810>
 800bd78:	4a16      	ldr	r2, [pc, #88]	@ (800bdd4 <HAL_ADC_ConfigChannel+0x868>)
 800bd7a:	e000      	b.n	800bd7e <HAL_ADC_ConfigChannel+0x812>
 800bd7c:	4a10      	ldr	r2, [pc, #64]	@ (800bdc0 <HAL_ADC_ConfigChannel+0x854>)
 800bd7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800bd82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bd86:	4619      	mov	r1, r3
 800bd88:	4610      	mov	r0, r2
 800bd8a:	f7fe ff10 	bl	800abae <LL_ADC_SetCommonPathInternalCh>
 800bd8e:	e00c      	b.n	800bdaa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd94:	f043 0220 	orr.w	r2, r3, #32
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800bda2:	e002      	b.n	800bdaa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800bda4:	bf00      	nop
 800bda6:	e000      	b.n	800bdaa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800bda8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2200      	movs	r2, #0
 800bdae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800bdb2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	37d8      	adds	r7, #216	@ 0xd8
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	50000700 	.word	0x50000700
 800bdc4:	c3210000 	.word	0xc3210000
 800bdc8:	90c00010 	.word	0x90c00010
 800bdcc:	50000600 	.word	0x50000600
 800bdd0:	50000100 	.word	0x50000100
 800bdd4:	50000300 	.word	0x50000300
 800bdd8:	200005b4 	.word	0x200005b4
 800bddc:	053e2d63 	.word	0x053e2d63
 800bde0:	c7520000 	.word	0xc7520000
 800bde4:	50000500 	.word	0x50000500
 800bde8:	cb840000 	.word	0xcb840000

0800bdec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7ff f8a7 	bl	800af50 <LL_ADC_IsEnabled>
 800be02:	4603      	mov	r3, r0
 800be04:	2b00      	cmp	r3, #0
 800be06:	d176      	bne.n	800bef6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	689a      	ldr	r2, [r3, #8]
 800be0e:	4b3c      	ldr	r3, [pc, #240]	@ (800bf00 <ADC_Enable+0x114>)
 800be10:	4013      	ands	r3, r2
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00d      	beq.n	800be32 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be1a:	f043 0210 	orr.w	r2, r3, #16
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be26:	f043 0201 	orr.w	r2, r3, #1
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800be2e:	2301      	movs	r3, #1
 800be30:	e062      	b.n	800bef8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff f862 	bl	800af00 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be44:	d004      	beq.n	800be50 <ADC_Enable+0x64>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	4a2e      	ldr	r2, [pc, #184]	@ (800bf04 <ADC_Enable+0x118>)
 800be4c:	4293      	cmp	r3, r2
 800be4e:	d101      	bne.n	800be54 <ADC_Enable+0x68>
 800be50:	4b2d      	ldr	r3, [pc, #180]	@ (800bf08 <ADC_Enable+0x11c>)
 800be52:	e000      	b.n	800be56 <ADC_Enable+0x6a>
 800be54:	4b2d      	ldr	r3, [pc, #180]	@ (800bf0c <ADC_Enable+0x120>)
 800be56:	4618      	mov	r0, r3
 800be58:	f7fe febc 	bl	800abd4 <LL_ADC_GetCommonPathInternalCh>
 800be5c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800be5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800be62:	2b00      	cmp	r3, #0
 800be64:	d013      	beq.n	800be8e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800be66:	4b2a      	ldr	r3, [pc, #168]	@ (800bf10 <ADC_Enable+0x124>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	099b      	lsrs	r3, r3, #6
 800be6c:	4a29      	ldr	r2, [pc, #164]	@ (800bf14 <ADC_Enable+0x128>)
 800be6e:	fba2 2303 	umull	r2, r3, r2, r3
 800be72:	099b      	lsrs	r3, r3, #6
 800be74:	1c5a      	adds	r2, r3, #1
 800be76:	4613      	mov	r3, r2
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	4413      	add	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800be80:	e002      	b.n	800be88 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	3b01      	subs	r3, #1
 800be86:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1f9      	bne.n	800be82 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800be8e:	f7fe fe6f 	bl	800ab70 <HAL_GetTick>
 800be92:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800be94:	e028      	b.n	800bee8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	4618      	mov	r0, r3
 800be9c:	f7ff f858 	bl	800af50 <LL_ADC_IsEnabled>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d104      	bne.n	800beb0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff f828 	bl	800af00 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800beb0:	f7fe fe5e 	bl	800ab70 <HAL_GetTick>
 800beb4:	4602      	mov	r2, r0
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d914      	bls.n	800bee8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f003 0301 	and.w	r3, r3, #1
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d00d      	beq.n	800bee8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bed0:	f043 0210 	orr.w	r2, r3, #16
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bedc:	f043 0201 	orr.w	r2, r3, #1
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e007      	b.n	800bef8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 0301 	and.w	r3, r3, #1
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d1cf      	bne.n	800be96 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3710      	adds	r7, #16
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}
 800bf00:	8000003f 	.word	0x8000003f
 800bf04:	50000100 	.word	0x50000100
 800bf08:	50000300 	.word	0x50000300
 800bf0c:	50000700 	.word	0x50000700
 800bf10:	200005b4 	.word	0x200005b4
 800bf14:	053e2d63 	.word	0x053e2d63

0800bf18 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b084      	sub	sp, #16
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7ff f826 	bl	800af76 <LL_ADC_IsDisableOngoing>
 800bf2a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7ff f80d 	bl	800af50 <LL_ADC_IsEnabled>
 800bf36:	4603      	mov	r3, r0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d047      	beq.n	800bfcc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d144      	bne.n	800bfcc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	f003 030d 	and.w	r3, r3, #13
 800bf4c:	2b01      	cmp	r3, #1
 800bf4e:	d10c      	bne.n	800bf6a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fe ffe7 	bl	800af28 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2203      	movs	r2, #3
 800bf60:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800bf62:	f7fe fe05 	bl	800ab70 <HAL_GetTick>
 800bf66:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bf68:	e029      	b.n	800bfbe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf6e:	f043 0210 	orr.w	r2, r3, #16
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf7a:	f043 0201 	orr.w	r2, r3, #1
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 800bf82:	2301      	movs	r3, #1
 800bf84:	e023      	b.n	800bfce <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800bf86:	f7fe fdf3 	bl	800ab70 <HAL_GetTick>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d914      	bls.n	800bfbe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	689b      	ldr	r3, [r3, #8]
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00d      	beq.n	800bfbe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfa6:	f043 0210 	orr.w	r2, r3, #16
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfb2:	f043 0201 	orr.w	r2, r3, #1
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e007      	b.n	800bfce <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	f003 0301 	and.w	r3, r3, #1
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d1dc      	bne.n	800bf86 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b084      	sub	sp, #16
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bfe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d14b      	bne.n	800c088 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bff4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	f003 0308 	and.w	r3, r3, #8
 800c006:	2b00      	cmp	r3, #0
 800c008:	d021      	beq.n	800c04e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	4618      	mov	r0, r3
 800c010:	f7fe fe8c 	bl	800ad2c <LL_ADC_REG_IsTriggerSourceSWStart>
 800c014:	4603      	mov	r3, r0
 800c016:	2b00      	cmp	r3, #0
 800c018:	d032      	beq.n	800c080 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	68db      	ldr	r3, [r3, #12]
 800c020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c024:	2b00      	cmp	r3, #0
 800c026:	d12b      	bne.n	800c080 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c02c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c038:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d11f      	bne.n	800c080 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c044:	f043 0201 	orr.w	r2, r3, #1
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c04c:	e018      	b.n	800c080 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	68db      	ldr	r3, [r3, #12]
 800c054:	f003 0302 	and.w	r3, r3, #2
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d111      	bne.n	800c080 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c060:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c06c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c070:	2b00      	cmp	r3, #0
 800c072:	d105      	bne.n	800c080 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c078:	f043 0201 	orr.w	r2, r3, #1
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800c080:	68f8      	ldr	r0, [r7, #12]
 800c082:	f7ff fa55 	bl	800b530 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800c086:	e00e      	b.n	800c0a6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c08c:	f003 0310 	and.w	r3, r3, #16
 800c090:	2b00      	cmp	r3, #0
 800c092:	d003      	beq.n	800c09c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800c094:	68f8      	ldr	r0, [r7, #12]
 800c096:	f7ff fa5f 	bl	800b558 <HAL_ADC_ErrorCallback>
}
 800c09a:	e004      	b.n	800c0a6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	4798      	blx	r3
}
 800c0a6:	bf00      	nop
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}

0800c0ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800c0ae:	b580      	push	{r7, lr}
 800c0b0:	b084      	sub	sp, #16
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ba:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800c0bc:	68f8      	ldr	r0, [r7, #12]
 800c0be:	f7ff fa41 	bl	800b544 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c0c2:	bf00      	nop
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800c0ca:	b580      	push	{r7, lr}
 800c0cc:	b084      	sub	sp, #16
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0d6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0e8:	f043 0204 	orr.w	r2, r3, #4
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f7ff fa31 	bl	800b558 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800c0f6:	bf00      	nop
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <LL_ADC_IsEnabled>:
{
 800c0fe:	b480      	push	{r7}
 800c100:	b083      	sub	sp, #12
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d101      	bne.n	800c116 <LL_ADC_IsEnabled+0x18>
 800c112:	2301      	movs	r3, #1
 800c114:	e000      	b.n	800c118 <LL_ADC_IsEnabled+0x1a>
 800c116:	2300      	movs	r3, #0
}
 800c118:	4618      	mov	r0, r3
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <LL_ADC_StartCalibration>:
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c136:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c140:	4313      	orrs	r3, r2
 800c142:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	609a      	str	r2, [r3, #8]
}
 800c14a:	bf00      	nop
 800c14c:	370c      	adds	r7, #12
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <LL_ADC_IsCalibrationOnGoing>:
{
 800c156:	b480      	push	{r7}
 800c158:	b083      	sub	sp, #12
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c166:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c16a:	d101      	bne.n	800c170 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800c16c:	2301      	movs	r3, #1
 800c16e:	e000      	b.n	800c172 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	370c      	adds	r7, #12
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <LL_ADC_REG_IsConversionOngoing>:
{
 800c17e:	b480      	push	{r7}
 800c180:	b083      	sub	sp, #12
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	f003 0304 	and.w	r3, r3, #4
 800c18e:	2b04      	cmp	r3, #4
 800c190:	d101      	bne.n	800c196 <LL_ADC_REG_IsConversionOngoing+0x18>
 800c192:	2301      	movs	r3, #1
 800c194:	e000      	b.n	800c198 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d101      	bne.n	800c1c0 <HAL_ADCEx_Calibration_Start+0x1c>
 800c1bc:	2302      	movs	r3, #2
 800c1be:	e04d      	b.n	800c25c <HAL_ADCEx_Calibration_Start+0xb8>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f7ff fea5 	bl	800bf18 <ADC_Disable>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800c1d2:	7bfb      	ldrb	r3, [r7, #15]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d136      	bne.n	800c246 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800c1e0:	f023 0302 	bic.w	r3, r3, #2
 800c1e4:	f043 0202 	orr.w	r2, r3, #2
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6839      	ldr	r1, [r7, #0]
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7ff ff96 	bl	800c124 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800c1f8:	e014      	b.n	800c224 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	4a18      	ldr	r2, [pc, #96]	@ (800c264 <HAL_ADCEx_Calibration_Start+0xc0>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d90d      	bls.n	800c224 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c20c:	f023 0312 	bic.w	r3, r3, #18
 800c210:	f043 0210 	orr.w	r2, r3, #16
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	e01b      	b.n	800c25c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4618      	mov	r0, r3
 800c22a:	f7ff ff94 	bl	800c156 <LL_ADC_IsCalibrationOnGoing>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d1e2      	bne.n	800c1fa <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c238:	f023 0303 	bic.w	r3, r3, #3
 800c23c:	f043 0201 	orr.w	r2, r3, #1
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	65da      	str	r2, [r3, #92]	@ 0x5c
 800c244:	e005      	b.n	800c252 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c24a:	f043 0210 	orr.w	r2, r3, #16
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	2200      	movs	r2, #0
 800c256:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	3710      	adds	r7, #16
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}
 800c264:	0004de01 	.word	0x0004de01

0800c268 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800c268:	b590      	push	{r4, r7, lr}
 800c26a:	b0a1      	sub	sp, #132	@ 0x84
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800c27e:	2b01      	cmp	r3, #1
 800c280:	d101      	bne.n	800c286 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800c282:	2302      	movs	r3, #2
 800c284:	e0e7      	b.n	800c456 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800c28e:	2300      	movs	r3, #0
 800c290:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800c292:	2300      	movs	r3, #0
 800c294:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c29e:	d102      	bne.n	800c2a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800c2a0:	4b6f      	ldr	r3, [pc, #444]	@ (800c460 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c2a2:	60bb      	str	r3, [r7, #8]
 800c2a4:	e009      	b.n	800c2ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a6e      	ldr	r2, [pc, #440]	@ (800c464 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d102      	bne.n	800c2b6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800c2b0:	4b6d      	ldr	r3, [pc, #436]	@ (800c468 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c2b2:	60bb      	str	r3, [r7, #8]
 800c2b4:	e001      	b.n	800c2ba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d10b      	bne.n	800c2d8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c2c4:	f043 0220 	orr.w	r2, r3, #32
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e0be      	b.n	800c456 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7ff ff4f 	bl	800c17e <LL_ADC_REG_IsConversionOngoing>
 800c2e0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4618      	mov	r0, r3
 800c2e8:	f7ff ff49 	bl	800c17e <LL_ADC_REG_IsConversionOngoing>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f040 80a0 	bne.w	800c434 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800c2f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f040 809c 	bne.w	800c434 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c304:	d004      	beq.n	800c310 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a55      	ldr	r2, [pc, #340]	@ (800c460 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d101      	bne.n	800c314 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800c310:	4b56      	ldr	r3, [pc, #344]	@ (800c46c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800c312:	e000      	b.n	800c316 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800c314:	4b56      	ldr	r3, [pc, #344]	@ (800c470 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800c316:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d04b      	beq.n	800c3b8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800c320:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	6859      	ldr	r1, [r3, #4]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c332:	035b      	lsls	r3, r3, #13
 800c334:	430b      	orrs	r3, r1
 800c336:	431a      	orrs	r2, r3
 800c338:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c33a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c344:	d004      	beq.n	800c350 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a45      	ldr	r2, [pc, #276]	@ (800c460 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d10f      	bne.n	800c370 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800c350:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c354:	f7ff fed3 	bl	800c0fe <LL_ADC_IsEnabled>
 800c358:	4604      	mov	r4, r0
 800c35a:	4841      	ldr	r0, [pc, #260]	@ (800c460 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c35c:	f7ff fecf 	bl	800c0fe <LL_ADC_IsEnabled>
 800c360:	4603      	mov	r3, r0
 800c362:	4323      	orrs	r3, r4
 800c364:	2b00      	cmp	r3, #0
 800c366:	bf0c      	ite	eq
 800c368:	2301      	moveq	r3, #1
 800c36a:	2300      	movne	r3, #0
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	e012      	b.n	800c396 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800c370:	483c      	ldr	r0, [pc, #240]	@ (800c464 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c372:	f7ff fec4 	bl	800c0fe <LL_ADC_IsEnabled>
 800c376:	4604      	mov	r4, r0
 800c378:	483b      	ldr	r0, [pc, #236]	@ (800c468 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c37a:	f7ff fec0 	bl	800c0fe <LL_ADC_IsEnabled>
 800c37e:	4603      	mov	r3, r0
 800c380:	431c      	orrs	r4, r3
 800c382:	483c      	ldr	r0, [pc, #240]	@ (800c474 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c384:	f7ff febb 	bl	800c0fe <LL_ADC_IsEnabled>
 800c388:	4603      	mov	r3, r0
 800c38a:	4323      	orrs	r3, r4
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	bf0c      	ite	eq
 800c390:	2301      	moveq	r3, #1
 800c392:	2300      	movne	r3, #0
 800c394:	b2db      	uxtb	r3, r3
 800c396:	2b00      	cmp	r3, #0
 800c398:	d056      	beq.n	800c448 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800c39a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c39c:	689b      	ldr	r3, [r3, #8]
 800c39e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c3a2:	f023 030f 	bic.w	r3, r3, #15
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	6811      	ldr	r1, [r2, #0]
 800c3aa:	683a      	ldr	r2, [r7, #0]
 800c3ac:	6892      	ldr	r2, [r2, #8]
 800c3ae:	430a      	orrs	r2, r1
 800c3b0:	431a      	orrs	r2, r3
 800c3b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3b4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c3b6:	e047      	b.n	800c448 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800c3b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c3c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c3cc:	d004      	beq.n	800c3d8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a23      	ldr	r2, [pc, #140]	@ (800c460 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d10f      	bne.n	800c3f8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800c3d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800c3dc:	f7ff fe8f 	bl	800c0fe <LL_ADC_IsEnabled>
 800c3e0:	4604      	mov	r4, r0
 800c3e2:	481f      	ldr	r0, [pc, #124]	@ (800c460 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800c3e4:	f7ff fe8b 	bl	800c0fe <LL_ADC_IsEnabled>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	4323      	orrs	r3, r4
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	bf0c      	ite	eq
 800c3f0:	2301      	moveq	r3, #1
 800c3f2:	2300      	movne	r3, #0
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	e012      	b.n	800c41e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800c3f8:	481a      	ldr	r0, [pc, #104]	@ (800c464 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800c3fa:	f7ff fe80 	bl	800c0fe <LL_ADC_IsEnabled>
 800c3fe:	4604      	mov	r4, r0
 800c400:	4819      	ldr	r0, [pc, #100]	@ (800c468 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800c402:	f7ff fe7c 	bl	800c0fe <LL_ADC_IsEnabled>
 800c406:	4603      	mov	r3, r0
 800c408:	431c      	orrs	r4, r3
 800c40a:	481a      	ldr	r0, [pc, #104]	@ (800c474 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800c40c:	f7ff fe77 	bl	800c0fe <LL_ADC_IsEnabled>
 800c410:	4603      	mov	r3, r0
 800c412:	4323      	orrs	r3, r4
 800c414:	2b00      	cmp	r3, #0
 800c416:	bf0c      	ite	eq
 800c418:	2301      	moveq	r3, #1
 800c41a:	2300      	movne	r3, #0
 800c41c:	b2db      	uxtb	r3, r3
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d012      	beq.n	800c448 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800c422:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800c42a:	f023 030f 	bic.w	r3, r3, #15
 800c42e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800c430:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c432:	e009      	b.n	800c448 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c438:	f043 0220 	orr.w	r2, r3, #32
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800c440:	2301      	movs	r3, #1
 800c442:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800c446:	e000      	b.n	800c44a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800c448:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800c452:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c456:	4618      	mov	r0, r3
 800c458:	3784      	adds	r7, #132	@ 0x84
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd90      	pop	{r4, r7, pc}
 800c45e:	bf00      	nop
 800c460:	50000100 	.word	0x50000100
 800c464:	50000400 	.word	0x50000400
 800c468:	50000500 	.word	0x50000500
 800c46c:	50000300 	.word	0x50000300
 800c470:	50000700 	.word	0x50000700
 800c474:	50000600 	.word	0x50000600

0800c478 <__NVIC_SetPriorityGrouping>:
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	f003 0307 	and.w	r3, r3, #7
 800c486:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c488:	4b0c      	ldr	r3, [pc, #48]	@ (800c4bc <__NVIC_SetPriorityGrouping+0x44>)
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c48e:	68ba      	ldr	r2, [r7, #8]
 800c490:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800c494:	4013      	ands	r3, r2
 800c496:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800c4a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800c4a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c4a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c4aa:	4a04      	ldr	r2, [pc, #16]	@ (800c4bc <__NVIC_SetPriorityGrouping+0x44>)
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	60d3      	str	r3, [r2, #12]
}
 800c4b0:	bf00      	nop
 800c4b2:	3714      	adds	r7, #20
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr
 800c4bc:	e000ed00 	.word	0xe000ed00

0800c4c0 <__NVIC_GetPriorityGrouping>:
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c4c4:	4b04      	ldr	r3, [pc, #16]	@ (800c4d8 <__NVIC_GetPriorityGrouping+0x18>)
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	0a1b      	lsrs	r3, r3, #8
 800c4ca:	f003 0307 	and.w	r3, r3, #7
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	e000ed00 	.word	0xe000ed00

0800c4dc <__NVIC_EnableIRQ>:
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b083      	sub	sp, #12
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c4e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	db0b      	blt.n	800c506 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c4ee:	79fb      	ldrb	r3, [r7, #7]
 800c4f0:	f003 021f 	and.w	r2, r3, #31
 800c4f4:	4907      	ldr	r1, [pc, #28]	@ (800c514 <__NVIC_EnableIRQ+0x38>)
 800c4f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c4fa:	095b      	lsrs	r3, r3, #5
 800c4fc:	2001      	movs	r0, #1
 800c4fe:	fa00 f202 	lsl.w	r2, r0, r2
 800c502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c506:	bf00      	nop
 800c508:	370c      	adds	r7, #12
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	e000e100 	.word	0xe000e100

0800c518 <__NVIC_SetPriority>:
{
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	4603      	mov	r3, r0
 800c520:	6039      	str	r1, [r7, #0]
 800c522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	db0a      	blt.n	800c542 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	b2da      	uxtb	r2, r3
 800c530:	490c      	ldr	r1, [pc, #48]	@ (800c564 <__NVIC_SetPriority+0x4c>)
 800c532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c536:	0112      	lsls	r2, r2, #4
 800c538:	b2d2      	uxtb	r2, r2
 800c53a:	440b      	add	r3, r1
 800c53c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c540:	e00a      	b.n	800c558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	b2da      	uxtb	r2, r3
 800c546:	4908      	ldr	r1, [pc, #32]	@ (800c568 <__NVIC_SetPriority+0x50>)
 800c548:	79fb      	ldrb	r3, [r7, #7]
 800c54a:	f003 030f 	and.w	r3, r3, #15
 800c54e:	3b04      	subs	r3, #4
 800c550:	0112      	lsls	r2, r2, #4
 800c552:	b2d2      	uxtb	r2, r2
 800c554:	440b      	add	r3, r1
 800c556:	761a      	strb	r2, [r3, #24]
}
 800c558:	bf00      	nop
 800c55a:	370c      	adds	r7, #12
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr
 800c564:	e000e100 	.word	0xe000e100
 800c568:	e000ed00 	.word	0xe000ed00

0800c56c <NVIC_EncodePriority>:
{
 800c56c:	b480      	push	{r7}
 800c56e:	b089      	sub	sp, #36	@ 0x24
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	f003 0307 	and.w	r3, r3, #7
 800c57e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c580:	69fb      	ldr	r3, [r7, #28]
 800c582:	f1c3 0307 	rsb	r3, r3, #7
 800c586:	2b04      	cmp	r3, #4
 800c588:	bf28      	it	cs
 800c58a:	2304      	movcs	r3, #4
 800c58c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	3304      	adds	r3, #4
 800c592:	2b06      	cmp	r3, #6
 800c594:	d902      	bls.n	800c59c <NVIC_EncodePriority+0x30>
 800c596:	69fb      	ldr	r3, [r7, #28]
 800c598:	3b03      	subs	r3, #3
 800c59a:	e000      	b.n	800c59e <NVIC_EncodePriority+0x32>
 800c59c:	2300      	movs	r3, #0
 800c59e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c5aa:	43da      	mvns	r2, r3
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	401a      	ands	r2, r3
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c5b4:	f04f 31ff 	mov.w	r1, #4294967295
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	fa01 f303 	lsl.w	r3, r1, r3
 800c5be:	43d9      	mvns	r1, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c5c4:	4313      	orrs	r3, r2
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3724      	adds	r7, #36	@ 0x24
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d0:	4770      	bx	lr
	...

0800c5d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c5e4:	d301      	bcc.n	800c5ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	e00f      	b.n	800c60a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c5ea:	4a0a      	ldr	r2, [pc, #40]	@ (800c614 <SysTick_Config+0x40>)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	3b01      	subs	r3, #1
 800c5f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c5f2:	210f      	movs	r1, #15
 800c5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c5f8:	f7ff ff8e 	bl	800c518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c5fc:	4b05      	ldr	r3, [pc, #20]	@ (800c614 <SysTick_Config+0x40>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c602:	4b04      	ldr	r3, [pc, #16]	@ (800c614 <SysTick_Config+0x40>)
 800c604:	2207      	movs	r2, #7
 800c606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3708      	adds	r7, #8
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	e000e010 	.word	0xe000e010

0800c618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f7ff ff29 	bl	800c478 <__NVIC_SetPriorityGrouping>
}
 800c626:	bf00      	nop
 800c628:	3708      	adds	r7, #8
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b086      	sub	sp, #24
 800c632:	af00      	add	r7, sp, #0
 800c634:	4603      	mov	r3, r0
 800c636:	60b9      	str	r1, [r7, #8]
 800c638:	607a      	str	r2, [r7, #4]
 800c63a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c63c:	f7ff ff40 	bl	800c4c0 <__NVIC_GetPriorityGrouping>
 800c640:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	68b9      	ldr	r1, [r7, #8]
 800c646:	6978      	ldr	r0, [r7, #20]
 800c648:	f7ff ff90 	bl	800c56c <NVIC_EncodePriority>
 800c64c:	4602      	mov	r2, r0
 800c64e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c652:	4611      	mov	r1, r2
 800c654:	4618      	mov	r0, r3
 800c656:	f7ff ff5f 	bl	800c518 <__NVIC_SetPriority>
}
 800c65a:	bf00      	nop
 800c65c:	3718      	adds	r7, #24
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}

0800c662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c662:	b580      	push	{r7, lr}
 800c664:	b082      	sub	sp, #8
 800c666:	af00      	add	r7, sp, #0
 800c668:	4603      	mov	r3, r0
 800c66a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c66c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c670:	4618      	mov	r0, r3
 800c672:	f7ff ff33 	bl	800c4dc <__NVIC_EnableIRQ>
}
 800c676:	bf00      	nop
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b082      	sub	sp, #8
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff ffa4 	bl	800c5d4 <SysTick_Config>
 800c68c:	4603      	mov	r3, r0
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3708      	adds	r7, #8
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}
	...

0800c698 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e08d      	b.n	800c7c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	4b47      	ldr	r3, [pc, #284]	@ (800c7d0 <HAL_DMA_Init+0x138>)
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d80f      	bhi.n	800c6d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	4b45      	ldr	r3, [pc, #276]	@ (800c7d4 <HAL_DMA_Init+0x13c>)
 800c6be:	4413      	add	r3, r2
 800c6c0:	4a45      	ldr	r2, [pc, #276]	@ (800c7d8 <HAL_DMA_Init+0x140>)
 800c6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6c6:	091b      	lsrs	r3, r3, #4
 800c6c8:	009a      	lsls	r2, r3, #2
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a42      	ldr	r2, [pc, #264]	@ (800c7dc <HAL_DMA_Init+0x144>)
 800c6d2:	641a      	str	r2, [r3, #64]	@ 0x40
 800c6d4:	e00e      	b.n	800c6f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	461a      	mov	r2, r3
 800c6dc:	4b40      	ldr	r3, [pc, #256]	@ (800c7e0 <HAL_DMA_Init+0x148>)
 800c6de:	4413      	add	r3, r2
 800c6e0:	4a3d      	ldr	r2, [pc, #244]	@ (800c7d8 <HAL_DMA_Init+0x140>)
 800c6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e6:	091b      	lsrs	r3, r3, #4
 800c6e8:	009a      	lsls	r2, r3, #2
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a3c      	ldr	r2, [pc, #240]	@ (800c7e4 <HAL_DMA_Init+0x14c>)
 800c6f2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2202      	movs	r2, #2
 800c6f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c70a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c70e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	691b      	ldr	r3, [r3, #16]
 800c71e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6a1b      	ldr	r3, [r3, #32]
 800c736:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fa76 	bl	800cc38 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c754:	d102      	bne.n	800c75c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	685a      	ldr	r2, [r3, #4]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c764:	b2d2      	uxtb	r2, r2
 800c766:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c770:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	685b      	ldr	r3, [r3, #4]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d010      	beq.n	800c79c <HAL_DMA_Init+0x104>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	2b04      	cmp	r3, #4
 800c780:	d80c      	bhi.n	800c79c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 fa96 	bl	800ccb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c78c:	2200      	movs	r2, #0
 800c78e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c794:	687a      	ldr	r2, [r7, #4]
 800c796:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c798:	605a      	str	r2, [r3, #4]
 800c79a:	e008      	b.n	800c7ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2200      	movs	r2, #0
 800c7a0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c7c4:	2300      	movs	r3, #0
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}
 800c7ce:	bf00      	nop
 800c7d0:	40020407 	.word	0x40020407
 800c7d4:	bffdfff8 	.word	0xbffdfff8
 800c7d8:	cccccccd 	.word	0xcccccccd
 800c7dc:	40020000 	.word	0x40020000
 800c7e0:	bffdfbf8 	.word	0xbffdfbf8
 800c7e4:	40020400 	.word	0x40020400

0800c7e8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b086      	sub	sp, #24
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	60f8      	str	r0, [r7, #12]
 800c7f0:	60b9      	str	r1, [r7, #8]
 800c7f2:	607a      	str	r2, [r7, #4]
 800c7f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c800:	2b01      	cmp	r3, #1
 800c802:	d101      	bne.n	800c808 <HAL_DMA_Start_IT+0x20>
 800c804:	2302      	movs	r3, #2
 800c806:	e066      	b.n	800c8d6 <HAL_DMA_Start_IT+0xee>
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c816:	b2db      	uxtb	r3, r3
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d155      	bne.n	800c8c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	2202      	movs	r2, #2
 800c820:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2200      	movs	r2, #0
 800c828:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f022 0201 	bic.w	r2, r2, #1
 800c838:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	68b9      	ldr	r1, [r7, #8]
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f000 f9bb 	bl	800cbbc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d008      	beq.n	800c860 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f042 020e 	orr.w	r2, r2, #14
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	e00f      	b.n	800c880 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f022 0204 	bic.w	r2, r2, #4
 800c86e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f042 020a 	orr.w	r2, r2, #10
 800c87e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d007      	beq.n	800c89e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c898:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c89c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d007      	beq.n	800c8b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c8b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f042 0201 	orr.w	r2, r2, #1
 800c8c4:	601a      	str	r2, [r3, #0]
 800c8c6:	e005      	b.n	800c8d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c8d0:	2302      	movs	r3, #2
 800c8d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c8d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3718      	adds	r7, #24
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c8de:	b480      	push	{r7}
 800c8e0:	b085      	sub	sp, #20
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d005      	beq.n	800c902 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2204      	movs	r2, #4
 800c8fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	73fb      	strb	r3, [r7, #15]
 800c900:	e037      	b.n	800c972 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f022 020e 	bic.w	r2, r2, #14
 800c910:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c91c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c920:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f022 0201 	bic.w	r2, r2, #1
 800c930:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c936:	f003 021f 	and.w	r2, r3, #31
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c93e:	2101      	movs	r1, #1
 800c940:	fa01 f202 	lsl.w	r2, r1, r2
 800c944:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c94e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00c      	beq.n	800c972 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c95c:	681a      	ldr	r2, [r3, #0]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c962:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c966:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c970:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2200      	movs	r2, #0
 800c97e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800c982:	7bfb      	ldrb	r3, [r7, #15]
}
 800c984:	4618      	mov	r0, r3
 800c986:	3714      	adds	r7, #20
 800c988:	46bd      	mov	sp, r7
 800c98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98e:	4770      	bx	lr

0800c990 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c998:	2300      	movs	r3, #0
 800c99a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	2b02      	cmp	r3, #2
 800c9a6:	d00d      	beq.n	800c9c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2204      	movs	r2, #4
 800c9ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	73fb      	strb	r3, [r7, #15]
 800c9c2:	e047      	b.n	800ca54 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f022 020e 	bic.w	r2, r2, #14
 800c9d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	681a      	ldr	r2, [r3, #0]
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f022 0201 	bic.w	r2, r2, #1
 800c9e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9ee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c9f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9f8:	f003 021f 	and.w	r2, r3, #31
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca00:	2101      	movs	r1, #1
 800ca02:	fa01 f202 	lsl.w	r2, r1, r2
 800ca06:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca0c:	687a      	ldr	r2, [r7, #4]
 800ca0e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800ca10:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d00c      	beq.n	800ca34 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ca28:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800ca32:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d003      	beq.n	800ca54 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	4798      	blx	r3
    }
  }
  return status;
 800ca54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b084      	sub	sp, #16
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca7a:	f003 031f 	and.w	r3, r3, #31
 800ca7e:	2204      	movs	r2, #4
 800ca80:	409a      	lsls	r2, r3
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	4013      	ands	r3, r2
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d026      	beq.n	800cad8 <HAL_DMA_IRQHandler+0x7a>
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	f003 0304 	and.w	r3, r3, #4
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d021      	beq.n	800cad8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	f003 0320 	and.w	r3, r3, #32
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d107      	bne.n	800cab2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681a      	ldr	r2, [r3, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f022 0204 	bic.w	r2, r2, #4
 800cab0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cab6:	f003 021f 	and.w	r2, r3, #31
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cabe:	2104      	movs	r1, #4
 800cac0:	fa01 f202 	lsl.w	r2, r1, r2
 800cac4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d071      	beq.n	800cbb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800cad6:	e06c      	b.n	800cbb2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cadc:	f003 031f 	and.w	r3, r3, #31
 800cae0:	2202      	movs	r2, #2
 800cae2:	409a      	lsls	r2, r3
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	4013      	ands	r3, r2
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d02e      	beq.n	800cb4a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	f003 0302 	and.w	r3, r3, #2
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d029      	beq.n	800cb4a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 0320 	and.w	r3, r3, #32
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d10b      	bne.n	800cb1c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	f022 020a 	bic.w	r2, r2, #10
 800cb12:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2201      	movs	r2, #1
 800cb18:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb20:	f003 021f 	and.w	r2, r3, #31
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb28:	2102      	movs	r1, #2
 800cb2a:	fa01 f202 	lsl.w	r2, r1, r2
 800cb2e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d038      	beq.n	800cbb2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800cb48:	e033      	b.n	800cbb2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb4e:	f003 031f 	and.w	r3, r3, #31
 800cb52:	2208      	movs	r2, #8
 800cb54:	409a      	lsls	r2, r3
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	4013      	ands	r3, r2
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d02a      	beq.n	800cbb4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	f003 0308 	and.w	r3, r3, #8
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d025      	beq.n	800cbb4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	681a      	ldr	r2, [r3, #0]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f022 020e 	bic.w	r2, r2, #14
 800cb76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb7c:	f003 021f 	and.w	r2, r3, #31
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb84:	2101      	movs	r1, #1
 800cb86:	fa01 f202 	lsl.w	r2, r1, r2
 800cb8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2201      	movs	r2, #1
 800cb90:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2201      	movs	r2, #1
 800cb96:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d004      	beq.n	800cbb4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800cbb2:	bf00      	nop
 800cbb4:	bf00      	nop
}
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b085      	sub	sp, #20
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
 800cbc8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800cbd2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d004      	beq.n	800cbe6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cbe0:	68fa      	ldr	r2, [r7, #12]
 800cbe2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800cbe4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbea:	f003 021f 	and.w	r2, r3, #31
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbf2:	2101      	movs	r1, #1
 800cbf4:	fa01 f202 	lsl.w	r2, r1, r2
 800cbf8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	683a      	ldr	r2, [r7, #0]
 800cc00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	689b      	ldr	r3, [r3, #8]
 800cc06:	2b10      	cmp	r3, #16
 800cc08:	d108      	bne.n	800cc1c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800cc1a:	e007      	b.n	800cc2c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	60da      	str	r2, [r3, #12]
}
 800cc2c:	bf00      	nop
 800cc2e:	3714      	adds	r7, #20
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr

0800cc38 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	b087      	sub	sp, #28
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	461a      	mov	r2, r3
 800cc46:	4b16      	ldr	r3, [pc, #88]	@ (800cca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d802      	bhi.n	800cc52 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800cc4c:	4b15      	ldr	r3, [pc, #84]	@ (800cca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800cc4e:	617b      	str	r3, [r7, #20]
 800cc50:	e001      	b.n	800cc56 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800cc52:	4b15      	ldr	r3, [pc, #84]	@ (800cca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800cc54:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	3b08      	subs	r3, #8
 800cc62:	4a12      	ldr	r2, [pc, #72]	@ (800ccac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800cc64:	fba2 2303 	umull	r2, r3, r2, r3
 800cc68:	091b      	lsrs	r3, r3, #4
 800cc6a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cc70:	089b      	lsrs	r3, r3, #2
 800cc72:	009a      	lsls	r2, r3, #2
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	4413      	add	r3, r2
 800cc78:	461a      	mov	r2, r3
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	4a0b      	ldr	r2, [pc, #44]	@ (800ccb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800cc82:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f003 031f 	and.w	r3, r3, #31
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	409a      	lsls	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800cc92:	bf00      	nop
 800cc94:	371c      	adds	r7, #28
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	40020407 	.word	0x40020407
 800cca4:	40020800 	.word	0x40020800
 800cca8:	40020820 	.word	0x40020820
 800ccac:	cccccccd 	.word	0xcccccccd
 800ccb0:	40020880 	.word	0x40020880

0800ccb4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ccc4:	68fa      	ldr	r2, [r7, #12]
 800ccc6:	4b0b      	ldr	r3, [pc, #44]	@ (800ccf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ccc8:	4413      	add	r3, r2
 800ccca:	009b      	lsls	r3, r3, #2
 800cccc:	461a      	mov	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a08      	ldr	r2, [pc, #32]	@ (800ccf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ccd6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	f003 031f 	and.w	r3, r3, #31
 800cce0:	2201      	movs	r2, #1
 800cce2:	409a      	lsls	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800cce8:	bf00      	nop
 800ccea:	3714      	adds	r7, #20
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	1000823f 	.word	0x1000823f
 800ccf8:	40020940 	.word	0x40020940

0800ccfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ccfc:	b480      	push	{r7}
 800ccfe:	b087      	sub	sp, #28
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800cd06:	2300      	movs	r3, #0
 800cd08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800cd0a:	e15a      	b.n	800cfc2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	2101      	movs	r1, #1
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	fa01 f303 	lsl.w	r3, r1, r3
 800cd18:	4013      	ands	r3, r2
 800cd1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	f000 814c 	beq.w	800cfbc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	685b      	ldr	r3, [r3, #4]
 800cd28:	f003 0303 	and.w	r3, r3, #3
 800cd2c:	2b01      	cmp	r3, #1
 800cd2e:	d005      	beq.n	800cd3c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800cd38:	2b02      	cmp	r3, #2
 800cd3a:	d130      	bne.n	800cd9e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	005b      	lsls	r3, r3, #1
 800cd46:	2203      	movs	r2, #3
 800cd48:	fa02 f303 	lsl.w	r3, r2, r3
 800cd4c:	43db      	mvns	r3, r3
 800cd4e:	693a      	ldr	r2, [r7, #16]
 800cd50:	4013      	ands	r3, r2
 800cd52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800cd54:	683b      	ldr	r3, [r7, #0]
 800cd56:	68da      	ldr	r2, [r3, #12]
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	005b      	lsls	r3, r3, #1
 800cd5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cd60:	693a      	ldr	r2, [r7, #16]
 800cd62:	4313      	orrs	r3, r2
 800cd64:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	693a      	ldr	r2, [r7, #16]
 800cd6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cd72:	2201      	movs	r2, #1
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	fa02 f303 	lsl.w	r3, r2, r3
 800cd7a:	43db      	mvns	r3, r3
 800cd7c:	693a      	ldr	r2, [r7, #16]
 800cd7e:	4013      	ands	r3, r2
 800cd80:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	091b      	lsrs	r3, r3, #4
 800cd88:	f003 0201 	and.w	r2, r3, #1
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd92:	693a      	ldr	r2, [r7, #16]
 800cd94:	4313      	orrs	r3, r2
 800cd96:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	693a      	ldr	r2, [r7, #16]
 800cd9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	f003 0303 	and.w	r3, r3, #3
 800cda6:	2b03      	cmp	r3, #3
 800cda8:	d017      	beq.n	800cdda <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	68db      	ldr	r3, [r3, #12]
 800cdae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	005b      	lsls	r3, r3, #1
 800cdb4:	2203      	movs	r2, #3
 800cdb6:	fa02 f303 	lsl.w	r3, r2, r3
 800cdba:	43db      	mvns	r3, r3
 800cdbc:	693a      	ldr	r2, [r7, #16]
 800cdbe:	4013      	ands	r3, r2
 800cdc0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	689a      	ldr	r2, [r3, #8]
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	005b      	lsls	r3, r3, #1
 800cdca:	fa02 f303 	lsl.w	r3, r2, r3
 800cdce:	693a      	ldr	r2, [r7, #16]
 800cdd0:	4313      	orrs	r3, r2
 800cdd2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	693a      	ldr	r2, [r7, #16]
 800cdd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cdda:	683b      	ldr	r3, [r7, #0]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	f003 0303 	and.w	r3, r3, #3
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	d123      	bne.n	800ce2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	08da      	lsrs	r2, r3, #3
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	3208      	adds	r2, #8
 800cdee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	f003 0307 	and.w	r3, r3, #7
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	220f      	movs	r2, #15
 800cdfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ce02:	43db      	mvns	r3, r3
 800ce04:	693a      	ldr	r2, [r7, #16]
 800ce06:	4013      	ands	r3, r2
 800ce08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	691a      	ldr	r2, [r3, #16]
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	f003 0307 	and.w	r3, r3, #7
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	fa02 f303 	lsl.w	r3, r2, r3
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	08da      	lsrs	r2, r3, #3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	3208      	adds	r2, #8
 800ce28:	6939      	ldr	r1, [r7, #16]
 800ce2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	2203      	movs	r2, #3
 800ce3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce3e:	43db      	mvns	r3, r3
 800ce40:	693a      	ldr	r2, [r7, #16]
 800ce42:	4013      	ands	r3, r2
 800ce44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	f003 0203 	and.w	r2, r3, #3
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	005b      	lsls	r3, r3, #1
 800ce52:	fa02 f303 	lsl.w	r3, r2, r3
 800ce56:	693a      	ldr	r2, [r7, #16]
 800ce58:	4313      	orrs	r3, r2
 800ce5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	693a      	ldr	r2, [r7, #16]
 800ce60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f000 80a6 	beq.w	800cfbc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ce70:	4b5b      	ldr	r3, [pc, #364]	@ (800cfe0 <HAL_GPIO_Init+0x2e4>)
 800ce72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce74:	4a5a      	ldr	r2, [pc, #360]	@ (800cfe0 <HAL_GPIO_Init+0x2e4>)
 800ce76:	f043 0301 	orr.w	r3, r3, #1
 800ce7a:	6613      	str	r3, [r2, #96]	@ 0x60
 800ce7c:	4b58      	ldr	r3, [pc, #352]	@ (800cfe0 <HAL_GPIO_Init+0x2e4>)
 800ce7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce80:	f003 0301 	and.w	r3, r3, #1
 800ce84:	60bb      	str	r3, [r7, #8]
 800ce86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ce88:	4a56      	ldr	r2, [pc, #344]	@ (800cfe4 <HAL_GPIO_Init+0x2e8>)
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	089b      	lsrs	r3, r3, #2
 800ce8e:	3302      	adds	r3, #2
 800ce90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	f003 0303 	and.w	r3, r3, #3
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	220f      	movs	r2, #15
 800cea0:	fa02 f303 	lsl.w	r3, r2, r3
 800cea4:	43db      	mvns	r3, r3
 800cea6:	693a      	ldr	r2, [r7, #16]
 800cea8:	4013      	ands	r3, r2
 800ceaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800ceb2:	d01f      	beq.n	800cef4 <HAL_GPIO_Init+0x1f8>
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4a4c      	ldr	r2, [pc, #304]	@ (800cfe8 <HAL_GPIO_Init+0x2ec>)
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d019      	beq.n	800cef0 <HAL_GPIO_Init+0x1f4>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	4a4b      	ldr	r2, [pc, #300]	@ (800cfec <HAL_GPIO_Init+0x2f0>)
 800cec0:	4293      	cmp	r3, r2
 800cec2:	d013      	beq.n	800ceec <HAL_GPIO_Init+0x1f0>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	4a4a      	ldr	r2, [pc, #296]	@ (800cff0 <HAL_GPIO_Init+0x2f4>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d00d      	beq.n	800cee8 <HAL_GPIO_Init+0x1ec>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	4a49      	ldr	r2, [pc, #292]	@ (800cff4 <HAL_GPIO_Init+0x2f8>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d007      	beq.n	800cee4 <HAL_GPIO_Init+0x1e8>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	4a48      	ldr	r2, [pc, #288]	@ (800cff8 <HAL_GPIO_Init+0x2fc>)
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d101      	bne.n	800cee0 <HAL_GPIO_Init+0x1e4>
 800cedc:	2305      	movs	r3, #5
 800cede:	e00a      	b.n	800cef6 <HAL_GPIO_Init+0x1fa>
 800cee0:	2306      	movs	r3, #6
 800cee2:	e008      	b.n	800cef6 <HAL_GPIO_Init+0x1fa>
 800cee4:	2304      	movs	r3, #4
 800cee6:	e006      	b.n	800cef6 <HAL_GPIO_Init+0x1fa>
 800cee8:	2303      	movs	r3, #3
 800ceea:	e004      	b.n	800cef6 <HAL_GPIO_Init+0x1fa>
 800ceec:	2302      	movs	r3, #2
 800ceee:	e002      	b.n	800cef6 <HAL_GPIO_Init+0x1fa>
 800cef0:	2301      	movs	r3, #1
 800cef2:	e000      	b.n	800cef6 <HAL_GPIO_Init+0x1fa>
 800cef4:	2300      	movs	r3, #0
 800cef6:	697a      	ldr	r2, [r7, #20]
 800cef8:	f002 0203 	and.w	r2, r2, #3
 800cefc:	0092      	lsls	r2, r2, #2
 800cefe:	4093      	lsls	r3, r2
 800cf00:	693a      	ldr	r2, [r7, #16]
 800cf02:	4313      	orrs	r3, r2
 800cf04:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800cf06:	4937      	ldr	r1, [pc, #220]	@ (800cfe4 <HAL_GPIO_Init+0x2e8>)
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	089b      	lsrs	r3, r3, #2
 800cf0c:	3302      	adds	r3, #2
 800cf0e:	693a      	ldr	r2, [r7, #16]
 800cf10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cf14:	4b39      	ldr	r3, [pc, #228]	@ (800cffc <HAL_GPIO_Init+0x300>)
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	43db      	mvns	r3, r3
 800cf1e:	693a      	ldr	r2, [r7, #16]
 800cf20:	4013      	ands	r3, r2
 800cf22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d003      	beq.n	800cf38 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800cf30:	693a      	ldr	r2, [r7, #16]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	4313      	orrs	r3, r2
 800cf36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800cf38:	4a30      	ldr	r2, [pc, #192]	@ (800cffc <HAL_GPIO_Init+0x300>)
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800cf3e:	4b2f      	ldr	r3, [pc, #188]	@ (800cffc <HAL_GPIO_Init+0x300>)
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	43db      	mvns	r3, r3
 800cf48:	693a      	ldr	r2, [r7, #16]
 800cf4a:	4013      	ands	r3, r2
 800cf4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	685b      	ldr	r3, [r3, #4]
 800cf52:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d003      	beq.n	800cf62 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	4313      	orrs	r3, r2
 800cf60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800cf62:	4a26      	ldr	r2, [pc, #152]	@ (800cffc <HAL_GPIO_Init+0x300>)
 800cf64:	693b      	ldr	r3, [r7, #16]
 800cf66:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800cf68:	4b24      	ldr	r3, [pc, #144]	@ (800cffc <HAL_GPIO_Init+0x300>)
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	43db      	mvns	r3, r3
 800cf72:	693a      	ldr	r2, [r7, #16]
 800cf74:	4013      	ands	r3, r2
 800cf76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d003      	beq.n	800cf8c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800cf84:	693a      	ldr	r2, [r7, #16]
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	4313      	orrs	r3, r2
 800cf8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800cf8c:	4a1b      	ldr	r2, [pc, #108]	@ (800cffc <HAL_GPIO_Init+0x300>)
 800cf8e:	693b      	ldr	r3, [r7, #16]
 800cf90:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800cf92:	4b1a      	ldr	r3, [pc, #104]	@ (800cffc <HAL_GPIO_Init+0x300>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	43db      	mvns	r3, r3
 800cf9c:	693a      	ldr	r2, [r7, #16]
 800cf9e:	4013      	ands	r3, r2
 800cfa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d003      	beq.n	800cfb6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800cfae:	693a      	ldr	r2, [r7, #16]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800cfb6:	4a11      	ldr	r2, [pc, #68]	@ (800cffc <HAL_GPIO_Init+0x300>)
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800cfbc:	697b      	ldr	r3, [r7, #20]
 800cfbe:	3301      	adds	r3, #1
 800cfc0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	fa22 f303 	lsr.w	r3, r2, r3
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	f47f ae9d 	bne.w	800cd0c <HAL_GPIO_Init+0x10>
  }
}
 800cfd2:	bf00      	nop
 800cfd4:	bf00      	nop
 800cfd6:	371c      	adds	r7, #28
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr
 800cfe0:	40021000 	.word	0x40021000
 800cfe4:	40010000 	.word	0x40010000
 800cfe8:	48000400 	.word	0x48000400
 800cfec:	48000800 	.word	0x48000800
 800cff0:	48000c00 	.word	0x48000c00
 800cff4:	48001000 	.word	0x48001000
 800cff8:	48001400 	.word	0x48001400
 800cffc:	40010400 	.word	0x40010400

0800d000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d000:	b480      	push	{r7}
 800d002:	b085      	sub	sp, #20
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	460b      	mov	r3, r1
 800d00a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	691a      	ldr	r2, [r3, #16]
 800d010:	887b      	ldrh	r3, [r7, #2]
 800d012:	4013      	ands	r3, r2
 800d014:	2b00      	cmp	r3, #0
 800d016:	d002      	beq.n	800d01e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800d018:	2301      	movs	r3, #1
 800d01a:	73fb      	strb	r3, [r7, #15]
 800d01c:	e001      	b.n	800d022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d01e:	2300      	movs	r3, #0
 800d020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800d022:	7bfb      	ldrb	r3, [r7, #15]
}
 800d024:	4618      	mov	r0, r3
 800d026:	3714      	adds	r7, #20
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	807b      	strh	r3, [r7, #2]
 800d03c:	4613      	mov	r3, r2
 800d03e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d040:	787b      	ldrb	r3, [r7, #1]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d003      	beq.n	800d04e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800d046:	887a      	ldrh	r2, [r7, #2]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800d04c:	e002      	b.n	800d054 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800d04e:	887a      	ldrh	r2, [r7, #2]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d054:	bf00      	nop
 800d056:	370c      	adds	r7, #12
 800d058:	46bd      	mov	sp, r7
 800d05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05e:	4770      	bx	lr

0800d060 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d060:	b480      	push	{r7}
 800d062:	b085      	sub	sp, #20
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	460b      	mov	r3, r1
 800d06a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	695b      	ldr	r3, [r3, #20]
 800d070:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d072:	887a      	ldrh	r2, [r7, #2]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	4013      	ands	r3, r2
 800d078:	041a      	lsls	r2, r3, #16
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	43d9      	mvns	r1, r3
 800d07e:	887b      	ldrh	r3, [r7, #2]
 800d080:	400b      	ands	r3, r1
 800d082:	431a      	orrs	r2, r3
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	619a      	str	r2, [r3, #24]
}
 800d088:	bf00      	nop
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	4603      	mov	r3, r0
 800d09c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800d09e:	4b08      	ldr	r3, [pc, #32]	@ (800d0c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d0a0:	695a      	ldr	r2, [r3, #20]
 800d0a2:	88fb      	ldrh	r3, [r7, #6]
 800d0a4:	4013      	ands	r3, r2
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d006      	beq.n	800d0b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800d0aa:	4a05      	ldr	r2, [pc, #20]	@ (800d0c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800d0ac:	88fb      	ldrh	r3, [r7, #6]
 800d0ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800d0b0:	88fb      	ldrh	r3, [r7, #6]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fb fa88 	bl	80085c8 <HAL_GPIO_EXTI_Callback>
  }
}
 800d0b8:	bf00      	nop
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}
 800d0c0:	40010400 	.word	0x40010400

0800d0c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b085      	sub	sp, #20
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d141      	bne.n	800d156 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d0d2:	4b4b      	ldr	r3, [pc, #300]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d0da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d0de:	d131      	bne.n	800d144 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d0e0:	4b47      	ldr	r3, [pc, #284]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0e6:	4a46      	ldr	r2, [pc, #280]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d0f0:	4b43      	ldr	r3, [pc, #268]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d0f8:	4a41      	ldr	r2, [pc, #260]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d0fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d0fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d100:	4b40      	ldr	r3, [pc, #256]	@ (800d204 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2232      	movs	r2, #50	@ 0x32
 800d106:	fb02 f303 	mul.w	r3, r2, r3
 800d10a:	4a3f      	ldr	r2, [pc, #252]	@ (800d208 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d10c:	fba2 2303 	umull	r2, r3, r2, r3
 800d110:	0c9b      	lsrs	r3, r3, #18
 800d112:	3301      	adds	r3, #1
 800d114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d116:	e002      	b.n	800d11e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	3b01      	subs	r3, #1
 800d11c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d11e:	4b38      	ldr	r3, [pc, #224]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d120:	695b      	ldr	r3, [r3, #20]
 800d122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d12a:	d102      	bne.n	800d132 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1f2      	bne.n	800d118 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d132:	4b33      	ldr	r3, [pc, #204]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d13a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d13e:	d158      	bne.n	800d1f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d140:	2303      	movs	r3, #3
 800d142:	e057      	b.n	800d1f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d144:	4b2e      	ldr	r3, [pc, #184]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d146:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d14a:	4a2d      	ldr	r2, [pc, #180]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d14c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d150:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d154:	e04d      	b.n	800d1f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d15c:	d141      	bne.n	800d1e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800d15e:	4b28      	ldr	r3, [pc, #160]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800d166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d16a:	d131      	bne.n	800d1d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d16c:	4b24      	ldr	r3, [pc, #144]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d16e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d172:	4a23      	ldr	r2, [pc, #140]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d178:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800d17c:	4b20      	ldr	r3, [pc, #128]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d184:	4a1e      	ldr	r2, [pc, #120]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d186:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d18a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800d18c:	4b1d      	ldr	r3, [pc, #116]	@ (800d204 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2232      	movs	r2, #50	@ 0x32
 800d192:	fb02 f303 	mul.w	r3, r2, r3
 800d196:	4a1c      	ldr	r2, [pc, #112]	@ (800d208 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800d198:	fba2 2303 	umull	r2, r3, r2, r3
 800d19c:	0c9b      	lsrs	r3, r3, #18
 800d19e:	3301      	adds	r3, #1
 800d1a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d1a2:	e002      	b.n	800d1aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	3b01      	subs	r3, #1
 800d1a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800d1aa:	4b15      	ldr	r3, [pc, #84]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d1ac:	695b      	ldr	r3, [r3, #20]
 800d1ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1b6:	d102      	bne.n	800d1be <HAL_PWREx_ControlVoltageScaling+0xfa>
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1f2      	bne.n	800d1a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800d1be:	4b10      	ldr	r3, [pc, #64]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d1c0:	695b      	ldr	r3, [r3, #20]
 800d1c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d1c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d1ca:	d112      	bne.n	800d1f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800d1cc:	2303      	movs	r3, #3
 800d1ce:	e011      	b.n	800d1f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800d1d0:	4b0b      	ldr	r3, [pc, #44]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d1d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d1d6:	4a0a      	ldr	r2, [pc, #40]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d1d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d1dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800d1e0:	e007      	b.n	800d1f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800d1e2:	4b07      	ldr	r3, [pc, #28]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800d1ea:	4a05      	ldr	r2, [pc, #20]	@ (800d200 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800d1ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d1f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800d1f2:	2300      	movs	r3, #0
}
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	40007000 	.word	0x40007000
 800d204:	200005b4 	.word	0x200005b4
 800d208:	431bde83 	.word	0x431bde83

0800d20c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800d20c:	b480      	push	{r7}
 800d20e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800d210:	4b05      	ldr	r3, [pc, #20]	@ (800d228 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d212:	689b      	ldr	r3, [r3, #8]
 800d214:	4a04      	ldr	r2, [pc, #16]	@ (800d228 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800d216:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d21a:	6093      	str	r3, [r2, #8]
}
 800d21c:	bf00      	nop
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop
 800d228:	40007000 	.word	0x40007000

0800d22c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b088      	sub	sp, #32
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d23a:	2301      	movs	r3, #1
 800d23c:	e2fe      	b.n	800d83c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	f003 0301 	and.w	r3, r3, #1
 800d246:	2b00      	cmp	r3, #0
 800d248:	d075      	beq.n	800d336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d24a:	4b97      	ldr	r3, [pc, #604]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d24c:	689b      	ldr	r3, [r3, #8]
 800d24e:	f003 030c 	and.w	r3, r3, #12
 800d252:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d254:	4b94      	ldr	r3, [pc, #592]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d256:	68db      	ldr	r3, [r3, #12]
 800d258:	f003 0303 	and.w	r3, r3, #3
 800d25c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	2b0c      	cmp	r3, #12
 800d262:	d102      	bne.n	800d26a <HAL_RCC_OscConfig+0x3e>
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	2b03      	cmp	r3, #3
 800d268:	d002      	beq.n	800d270 <HAL_RCC_OscConfig+0x44>
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	2b08      	cmp	r3, #8
 800d26e:	d10b      	bne.n	800d288 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d270:	4b8d      	ldr	r3, [pc, #564]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d05b      	beq.n	800d334 <HAL_RCC_OscConfig+0x108>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d157      	bne.n	800d334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	e2d9      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d290:	d106      	bne.n	800d2a0 <HAL_RCC_OscConfig+0x74>
 800d292:	4b85      	ldr	r3, [pc, #532]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a84      	ldr	r2, [pc, #528]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	e01d      	b.n	800d2dc <HAL_RCC_OscConfig+0xb0>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	685b      	ldr	r3, [r3, #4]
 800d2a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d2a8:	d10c      	bne.n	800d2c4 <HAL_RCC_OscConfig+0x98>
 800d2aa:	4b7f      	ldr	r3, [pc, #508]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	4a7e      	ldr	r2, [pc, #504]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d2b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	4b7c      	ldr	r3, [pc, #496]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a7b      	ldr	r2, [pc, #492]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d2bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d2c0:	6013      	str	r3, [r2, #0]
 800d2c2:	e00b      	b.n	800d2dc <HAL_RCC_OscConfig+0xb0>
 800d2c4:	4b78      	ldr	r3, [pc, #480]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	4a77      	ldr	r2, [pc, #476]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d2ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2ce:	6013      	str	r3, [r2, #0]
 800d2d0:	4b75      	ldr	r3, [pc, #468]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a74      	ldr	r2, [pc, #464]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d2d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d2da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d013      	beq.n	800d30c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2e4:	f7fd fc44 	bl	800ab70 <HAL_GetTick>
 800d2e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d2ea:	e008      	b.n	800d2fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d2ec:	f7fd fc40 	bl	800ab70 <HAL_GetTick>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	1ad3      	subs	r3, r2, r3
 800d2f6:	2b64      	cmp	r3, #100	@ 0x64
 800d2f8:	d901      	bls.n	800d2fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d2fa:	2303      	movs	r3, #3
 800d2fc:	e29e      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d2fe:	4b6a      	ldr	r3, [pc, #424]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d306:	2b00      	cmp	r3, #0
 800d308:	d0f0      	beq.n	800d2ec <HAL_RCC_OscConfig+0xc0>
 800d30a:	e014      	b.n	800d336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d30c:	f7fd fc30 	bl	800ab70 <HAL_GetTick>
 800d310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d312:	e008      	b.n	800d326 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d314:	f7fd fc2c 	bl	800ab70 <HAL_GetTick>
 800d318:	4602      	mov	r2, r0
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	1ad3      	subs	r3, r2, r3
 800d31e:	2b64      	cmp	r3, #100	@ 0x64
 800d320:	d901      	bls.n	800d326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d322:	2303      	movs	r3, #3
 800d324:	e28a      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800d326:	4b60      	ldr	r3, [pc, #384]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d1f0      	bne.n	800d314 <HAL_RCC_OscConfig+0xe8>
 800d332:	e000      	b.n	800d336 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f003 0302 	and.w	r3, r3, #2
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d075      	beq.n	800d42e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d342:	4b59      	ldr	r3, [pc, #356]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d344:	689b      	ldr	r3, [r3, #8]
 800d346:	f003 030c 	and.w	r3, r3, #12
 800d34a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d34c:	4b56      	ldr	r3, [pc, #344]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d34e:	68db      	ldr	r3, [r3, #12]
 800d350:	f003 0303 	and.w	r3, r3, #3
 800d354:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	2b0c      	cmp	r3, #12
 800d35a:	d102      	bne.n	800d362 <HAL_RCC_OscConfig+0x136>
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d002      	beq.n	800d368 <HAL_RCC_OscConfig+0x13c>
 800d362:	69bb      	ldr	r3, [r7, #24]
 800d364:	2b04      	cmp	r3, #4
 800d366:	d11f      	bne.n	800d3a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d368:	4b4f      	ldr	r3, [pc, #316]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d370:	2b00      	cmp	r3, #0
 800d372:	d005      	beq.n	800d380 <HAL_RCC_OscConfig+0x154>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d101      	bne.n	800d380 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800d37c:	2301      	movs	r3, #1
 800d37e:	e25d      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d380:	4b49      	ldr	r3, [pc, #292]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	691b      	ldr	r3, [r3, #16]
 800d38c:	061b      	lsls	r3, r3, #24
 800d38e:	4946      	ldr	r1, [pc, #280]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d390:	4313      	orrs	r3, r2
 800d392:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d394:	4b45      	ldr	r3, [pc, #276]	@ (800d4ac <HAL_RCC_OscConfig+0x280>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4618      	mov	r0, r3
 800d39a:	f7fd fb9d 	bl	800aad8 <HAL_InitTick>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d043      	beq.n	800d42c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e249      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d023      	beq.n	800d3f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d3b0:	4b3d      	ldr	r3, [pc, #244]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4a3c      	ldr	r2, [pc, #240]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d3b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d3ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d3bc:	f7fd fbd8 	bl	800ab70 <HAL_GetTick>
 800d3c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d3c2:	e008      	b.n	800d3d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d3c4:	f7fd fbd4 	bl	800ab70 <HAL_GetTick>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	1ad3      	subs	r3, r2, r3
 800d3ce:	2b02      	cmp	r3, #2
 800d3d0:	d901      	bls.n	800d3d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800d3d2:	2303      	movs	r3, #3
 800d3d4:	e232      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d3d6:	4b34      	ldr	r3, [pc, #208]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d0f0      	beq.n	800d3c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d3e2:	4b31      	ldr	r3, [pc, #196]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	061b      	lsls	r3, r3, #24
 800d3f0:	492d      	ldr	r1, [pc, #180]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	604b      	str	r3, [r1, #4]
 800d3f6:	e01a      	b.n	800d42e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d3f8:	4b2b      	ldr	r3, [pc, #172]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	4a2a      	ldr	r2, [pc, #168]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d3fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d404:	f7fd fbb4 	bl	800ab70 <HAL_GetTick>
 800d408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d40a:	e008      	b.n	800d41e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d40c:	f7fd fbb0 	bl	800ab70 <HAL_GetTick>
 800d410:	4602      	mov	r2, r0
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	1ad3      	subs	r3, r2, r3
 800d416:	2b02      	cmp	r3, #2
 800d418:	d901      	bls.n	800d41e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800d41a:	2303      	movs	r3, #3
 800d41c:	e20e      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800d41e:	4b22      	ldr	r3, [pc, #136]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1f0      	bne.n	800d40c <HAL_RCC_OscConfig+0x1e0>
 800d42a:	e000      	b.n	800d42e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800d42c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f003 0308 	and.w	r3, r3, #8
 800d436:	2b00      	cmp	r3, #0
 800d438:	d041      	beq.n	800d4be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	695b      	ldr	r3, [r3, #20]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d01c      	beq.n	800d47c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d442:	4b19      	ldr	r3, [pc, #100]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d448:	4a17      	ldr	r2, [pc, #92]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d44a:	f043 0301 	orr.w	r3, r3, #1
 800d44e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d452:	f7fd fb8d 	bl	800ab70 <HAL_GetTick>
 800d456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d458:	e008      	b.n	800d46c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d45a:	f7fd fb89 	bl	800ab70 <HAL_GetTick>
 800d45e:	4602      	mov	r2, r0
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	1ad3      	subs	r3, r2, r3
 800d464:	2b02      	cmp	r3, #2
 800d466:	d901      	bls.n	800d46c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800d468:	2303      	movs	r3, #3
 800d46a:	e1e7      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800d46c:	4b0e      	ldr	r3, [pc, #56]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d46e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d472:	f003 0302 	and.w	r3, r3, #2
 800d476:	2b00      	cmp	r3, #0
 800d478:	d0ef      	beq.n	800d45a <HAL_RCC_OscConfig+0x22e>
 800d47a:	e020      	b.n	800d4be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d47c:	4b0a      	ldr	r3, [pc, #40]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d47e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d482:	4a09      	ldr	r2, [pc, #36]	@ (800d4a8 <HAL_RCC_OscConfig+0x27c>)
 800d484:	f023 0301 	bic.w	r3, r3, #1
 800d488:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d48c:	f7fd fb70 	bl	800ab70 <HAL_GetTick>
 800d490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d492:	e00d      	b.n	800d4b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d494:	f7fd fb6c 	bl	800ab70 <HAL_GetTick>
 800d498:	4602      	mov	r2, r0
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	1ad3      	subs	r3, r2, r3
 800d49e:	2b02      	cmp	r3, #2
 800d4a0:	d906      	bls.n	800d4b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d4a2:	2303      	movs	r3, #3
 800d4a4:	e1ca      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
 800d4a6:	bf00      	nop
 800d4a8:	40021000 	.word	0x40021000
 800d4ac:	200005b8 	.word	0x200005b8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800d4b0:	4b8c      	ldr	r3, [pc, #560]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d4b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d4b6:	f003 0302 	and.w	r3, r3, #2
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1ea      	bne.n	800d494 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f003 0304 	and.w	r3, r3, #4
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	f000 80a6 	beq.w	800d618 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800d4d0:	4b84      	ldr	r3, [pc, #528]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d4d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d101      	bne.n	800d4e0 <HAL_RCC_OscConfig+0x2b4>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	e000      	b.n	800d4e2 <HAL_RCC_OscConfig+0x2b6>
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d00d      	beq.n	800d502 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d4e6:	4b7f      	ldr	r3, [pc, #508]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d4e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4ea:	4a7e      	ldr	r2, [pc, #504]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d4ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d4f0:	6593      	str	r3, [r2, #88]	@ 0x58
 800d4f2:	4b7c      	ldr	r3, [pc, #496]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d4f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d4f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d4fa:	60fb      	str	r3, [r7, #12]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800d4fe:	2301      	movs	r3, #1
 800d500:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d502:	4b79      	ldr	r3, [pc, #484]	@ (800d6e8 <HAL_RCC_OscConfig+0x4bc>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d118      	bne.n	800d540 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d50e:	4b76      	ldr	r3, [pc, #472]	@ (800d6e8 <HAL_RCC_OscConfig+0x4bc>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	4a75      	ldr	r2, [pc, #468]	@ (800d6e8 <HAL_RCC_OscConfig+0x4bc>)
 800d514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d51a:	f7fd fb29 	bl	800ab70 <HAL_GetTick>
 800d51e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d520:	e008      	b.n	800d534 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d522:	f7fd fb25 	bl	800ab70 <HAL_GetTick>
 800d526:	4602      	mov	r2, r0
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	1ad3      	subs	r3, r2, r3
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	d901      	bls.n	800d534 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800d530:	2303      	movs	r3, #3
 800d532:	e183      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d534:	4b6c      	ldr	r3, [pc, #432]	@ (800d6e8 <HAL_RCC_OscConfig+0x4bc>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d0f0      	beq.n	800d522 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d108      	bne.n	800d55a <HAL_RCC_OscConfig+0x32e>
 800d548:	4b66      	ldr	r3, [pc, #408]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d54e:	4a65      	ldr	r2, [pc, #404]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d550:	f043 0301 	orr.w	r3, r3, #1
 800d554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d558:	e024      	b.n	800d5a4 <HAL_RCC_OscConfig+0x378>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	689b      	ldr	r3, [r3, #8]
 800d55e:	2b05      	cmp	r3, #5
 800d560:	d110      	bne.n	800d584 <HAL_RCC_OscConfig+0x358>
 800d562:	4b60      	ldr	r3, [pc, #384]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d568:	4a5e      	ldr	r2, [pc, #376]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d56a:	f043 0304 	orr.w	r3, r3, #4
 800d56e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d572:	4b5c      	ldr	r3, [pc, #368]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d578:	4a5a      	ldr	r2, [pc, #360]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d57a:	f043 0301 	orr.w	r3, r3, #1
 800d57e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d582:	e00f      	b.n	800d5a4 <HAL_RCC_OscConfig+0x378>
 800d584:	4b57      	ldr	r3, [pc, #348]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d58a:	4a56      	ldr	r2, [pc, #344]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d58c:	f023 0301 	bic.w	r3, r3, #1
 800d590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800d594:	4b53      	ldr	r3, [pc, #332]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d59a:	4a52      	ldr	r2, [pc, #328]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d59c:	f023 0304 	bic.w	r3, r3, #4
 800d5a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d016      	beq.n	800d5da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5ac:	f7fd fae0 	bl	800ab70 <HAL_GetTick>
 800d5b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d5b2:	e00a      	b.n	800d5ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d5b4:	f7fd fadc 	bl	800ab70 <HAL_GetTick>
 800d5b8:	4602      	mov	r2, r0
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	1ad3      	subs	r3, r2, r3
 800d5be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5c2:	4293      	cmp	r3, r2
 800d5c4:	d901      	bls.n	800d5ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800d5c6:	2303      	movs	r3, #3
 800d5c8:	e138      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d5ca:	4b46      	ldr	r3, [pc, #280]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d5cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5d0:	f003 0302 	and.w	r3, r3, #2
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d0ed      	beq.n	800d5b4 <HAL_RCC_OscConfig+0x388>
 800d5d8:	e015      	b.n	800d606 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d5da:	f7fd fac9 	bl	800ab70 <HAL_GetTick>
 800d5de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d5e0:	e00a      	b.n	800d5f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d5e2:	f7fd fac5 	bl	800ab70 <HAL_GetTick>
 800d5e6:	4602      	mov	r2, r0
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	1ad3      	subs	r3, r2, r3
 800d5ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d5f0:	4293      	cmp	r3, r2
 800d5f2:	d901      	bls.n	800d5f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800d5f4:	2303      	movs	r3, #3
 800d5f6:	e121      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800d5f8:	4b3a      	ldr	r3, [pc, #232]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d5fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d5fe:	f003 0302 	and.w	r3, r3, #2
 800d602:	2b00      	cmp	r3, #0
 800d604:	d1ed      	bne.n	800d5e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d606:	7ffb      	ldrb	r3, [r7, #31]
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d105      	bne.n	800d618 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d60c:	4b35      	ldr	r3, [pc, #212]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d60e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d610:	4a34      	ldr	r2, [pc, #208]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d616:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f003 0320 	and.w	r3, r3, #32
 800d620:	2b00      	cmp	r3, #0
 800d622:	d03c      	beq.n	800d69e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	699b      	ldr	r3, [r3, #24]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d01c      	beq.n	800d666 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800d62c:	4b2d      	ldr	r3, [pc, #180]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d62e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d632:	4a2c      	ldr	r2, [pc, #176]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d634:	f043 0301 	orr.w	r3, r3, #1
 800d638:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d63c:	f7fd fa98 	bl	800ab70 <HAL_GetTick>
 800d640:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d642:	e008      	b.n	800d656 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d644:	f7fd fa94 	bl	800ab70 <HAL_GetTick>
 800d648:	4602      	mov	r2, r0
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	1ad3      	subs	r3, r2, r3
 800d64e:	2b02      	cmp	r3, #2
 800d650:	d901      	bls.n	800d656 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800d652:	2303      	movs	r3, #3
 800d654:	e0f2      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800d656:	4b23      	ldr	r3, [pc, #140]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d658:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d65c:	f003 0302 	and.w	r3, r3, #2
 800d660:	2b00      	cmp	r3, #0
 800d662:	d0ef      	beq.n	800d644 <HAL_RCC_OscConfig+0x418>
 800d664:	e01b      	b.n	800d69e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800d666:	4b1f      	ldr	r3, [pc, #124]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d668:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d66c:	4a1d      	ldr	r2, [pc, #116]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d66e:	f023 0301 	bic.w	r3, r3, #1
 800d672:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d676:	f7fd fa7b 	bl	800ab70 <HAL_GetTick>
 800d67a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d67c:	e008      	b.n	800d690 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800d67e:	f7fd fa77 	bl	800ab70 <HAL_GetTick>
 800d682:	4602      	mov	r2, r0
 800d684:	693b      	ldr	r3, [r7, #16]
 800d686:	1ad3      	subs	r3, r2, r3
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d901      	bls.n	800d690 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800d68c:	2303      	movs	r3, #3
 800d68e:	e0d5      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800d690:	4b14      	ldr	r3, [pc, #80]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d692:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d696:	f003 0302 	and.w	r3, r3, #2
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d1ef      	bne.n	800d67e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	69db      	ldr	r3, [r3, #28]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f000 80c9 	beq.w	800d83a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d6a8:	4b0e      	ldr	r3, [pc, #56]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d6aa:	689b      	ldr	r3, [r3, #8]
 800d6ac:	f003 030c 	and.w	r3, r3, #12
 800d6b0:	2b0c      	cmp	r3, #12
 800d6b2:	f000 8083 	beq.w	800d7bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	69db      	ldr	r3, [r3, #28]
 800d6ba:	2b02      	cmp	r3, #2
 800d6bc:	d15e      	bne.n	800d77c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d6be:	4b09      	ldr	r3, [pc, #36]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a08      	ldr	r2, [pc, #32]	@ (800d6e4 <HAL_RCC_OscConfig+0x4b8>)
 800d6c4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d6c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6ca:	f7fd fa51 	bl	800ab70 <HAL_GetTick>
 800d6ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d6d0:	e00c      	b.n	800d6ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d6d2:	f7fd fa4d 	bl	800ab70 <HAL_GetTick>
 800d6d6:	4602      	mov	r2, r0
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	1ad3      	subs	r3, r2, r3
 800d6dc:	2b02      	cmp	r3, #2
 800d6de:	d905      	bls.n	800d6ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800d6e0:	2303      	movs	r3, #3
 800d6e2:	e0ab      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
 800d6e4:	40021000 	.word	0x40021000
 800d6e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d6ec:	4b55      	ldr	r3, [pc, #340]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d1ec      	bne.n	800d6d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d6f8:	4b52      	ldr	r3, [pc, #328]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d6fa:	68da      	ldr	r2, [r3, #12]
 800d6fc:	4b52      	ldr	r3, [pc, #328]	@ (800d848 <HAL_RCC_OscConfig+0x61c>)
 800d6fe:	4013      	ands	r3, r2
 800d700:	687a      	ldr	r2, [r7, #4]
 800d702:	6a11      	ldr	r1, [r2, #32]
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d708:	3a01      	subs	r2, #1
 800d70a:	0112      	lsls	r2, r2, #4
 800d70c:	4311      	orrs	r1, r2
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800d712:	0212      	lsls	r2, r2, #8
 800d714:	4311      	orrs	r1, r2
 800d716:	687a      	ldr	r2, [r7, #4]
 800d718:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800d71a:	0852      	lsrs	r2, r2, #1
 800d71c:	3a01      	subs	r2, #1
 800d71e:	0552      	lsls	r2, r2, #21
 800d720:	4311      	orrs	r1, r2
 800d722:	687a      	ldr	r2, [r7, #4]
 800d724:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d726:	0852      	lsrs	r2, r2, #1
 800d728:	3a01      	subs	r2, #1
 800d72a:	0652      	lsls	r2, r2, #25
 800d72c:	4311      	orrs	r1, r2
 800d72e:	687a      	ldr	r2, [r7, #4]
 800d730:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d732:	06d2      	lsls	r2, r2, #27
 800d734:	430a      	orrs	r2, r1
 800d736:	4943      	ldr	r1, [pc, #268]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d738:	4313      	orrs	r3, r2
 800d73a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d73c:	4b41      	ldr	r3, [pc, #260]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	4a40      	ldr	r2, [pc, #256]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d742:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d746:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800d748:	4b3e      	ldr	r3, [pc, #248]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	4a3d      	ldr	r2, [pc, #244]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d74e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d752:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d754:	f7fd fa0c 	bl	800ab70 <HAL_GetTick>
 800d758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d75a:	e008      	b.n	800d76e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d75c:	f7fd fa08 	bl	800ab70 <HAL_GetTick>
 800d760:	4602      	mov	r2, r0
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	1ad3      	subs	r3, r2, r3
 800d766:	2b02      	cmp	r3, #2
 800d768:	d901      	bls.n	800d76e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800d76a:	2303      	movs	r3, #3
 800d76c:	e066      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d76e:	4b35      	ldr	r3, [pc, #212]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d776:	2b00      	cmp	r3, #0
 800d778:	d0f0      	beq.n	800d75c <HAL_RCC_OscConfig+0x530>
 800d77a:	e05e      	b.n	800d83a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d77c:	4b31      	ldr	r3, [pc, #196]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a30      	ldr	r2, [pc, #192]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d788:	f7fd f9f2 	bl	800ab70 <HAL_GetTick>
 800d78c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d78e:	e008      	b.n	800d7a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d790:	f7fd f9ee 	bl	800ab70 <HAL_GetTick>
 800d794:	4602      	mov	r2, r0
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	1ad3      	subs	r3, r2, r3
 800d79a:	2b02      	cmp	r3, #2
 800d79c:	d901      	bls.n	800d7a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800d79e:	2303      	movs	r3, #3
 800d7a0:	e04c      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800d7a2:	4b28      	ldr	r3, [pc, #160]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d1f0      	bne.n	800d790 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800d7ae:	4b25      	ldr	r3, [pc, #148]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d7b0:	68da      	ldr	r2, [r3, #12]
 800d7b2:	4924      	ldr	r1, [pc, #144]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d7b4:	4b25      	ldr	r3, [pc, #148]	@ (800d84c <HAL_RCC_OscConfig+0x620>)
 800d7b6:	4013      	ands	r3, r2
 800d7b8:	60cb      	str	r3, [r1, #12]
 800d7ba:	e03e      	b.n	800d83a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	69db      	ldr	r3, [r3, #28]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d101      	bne.n	800d7c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800d7c4:	2301      	movs	r3, #1
 800d7c6:	e039      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800d7c8:	4b1e      	ldr	r3, [pc, #120]	@ (800d844 <HAL_RCC_OscConfig+0x618>)
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	f003 0203 	and.w	r2, r3, #3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6a1b      	ldr	r3, [r3, #32]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d12c      	bne.n	800d836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d123      	bne.n	800d836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	d11b      	bne.n	800d836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d808:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d113      	bne.n	800d836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d818:	085b      	lsrs	r3, r3, #1
 800d81a:	3b01      	subs	r3, #1
 800d81c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800d81e:	429a      	cmp	r2, r3
 800d820:	d109      	bne.n	800d836 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800d822:	697b      	ldr	r3, [r7, #20]
 800d824:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d82c:	085b      	lsrs	r3, r3, #1
 800d82e:	3b01      	subs	r3, #1
 800d830:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d832:	429a      	cmp	r2, r3
 800d834:	d001      	beq.n	800d83a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800d836:	2301      	movs	r3, #1
 800d838:	e000      	b.n	800d83c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800d83a:	2300      	movs	r3, #0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3720      	adds	r7, #32
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	40021000 	.word	0x40021000
 800d848:	019f800c 	.word	0x019f800c
 800d84c:	feeefffc 	.word	0xfeeefffc

0800d850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b086      	sub	sp, #24
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800d85a:	2300      	movs	r3, #0
 800d85c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d101      	bne.n	800d868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800d864:	2301      	movs	r3, #1
 800d866:	e11e      	b.n	800daa6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d868:	4b91      	ldr	r3, [pc, #580]	@ (800dab0 <HAL_RCC_ClockConfig+0x260>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f003 030f 	and.w	r3, r3, #15
 800d870:	683a      	ldr	r2, [r7, #0]
 800d872:	429a      	cmp	r2, r3
 800d874:	d910      	bls.n	800d898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d876:	4b8e      	ldr	r3, [pc, #568]	@ (800dab0 <HAL_RCC_ClockConfig+0x260>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	f023 020f 	bic.w	r2, r3, #15
 800d87e:	498c      	ldr	r1, [pc, #560]	@ (800dab0 <HAL_RCC_ClockConfig+0x260>)
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	4313      	orrs	r3, r2
 800d884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d886:	4b8a      	ldr	r3, [pc, #552]	@ (800dab0 <HAL_RCC_ClockConfig+0x260>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f003 030f 	and.w	r3, r3, #15
 800d88e:	683a      	ldr	r2, [r7, #0]
 800d890:	429a      	cmp	r2, r3
 800d892:	d001      	beq.n	800d898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800d894:	2301      	movs	r3, #1
 800d896:	e106      	b.n	800daa6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f003 0301 	and.w	r3, r3, #1
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d073      	beq.n	800d98c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	2b03      	cmp	r3, #3
 800d8aa:	d129      	bne.n	800d900 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800d8ac:	4b81      	ldr	r3, [pc, #516]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d101      	bne.n	800d8bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	e0f4      	b.n	800daa6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800d8bc:	f000 f99e 	bl	800dbfc <RCC_GetSysClockFreqFromPLLSource>
 800d8c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800d8c2:	693b      	ldr	r3, [r7, #16]
 800d8c4:	4a7c      	ldr	r2, [pc, #496]	@ (800dab8 <HAL_RCC_ClockConfig+0x268>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d93f      	bls.n	800d94a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d8ca:	4b7a      	ldr	r3, [pc, #488]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d8cc:	689b      	ldr	r3, [r3, #8]
 800d8ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d009      	beq.n	800d8ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d033      	beq.n	800d94a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d12f      	bne.n	800d94a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d8ea:	4b72      	ldr	r3, [pc, #456]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d8f2:	4a70      	ldr	r2, [pc, #448]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d8f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800d8fa:	2380      	movs	r3, #128	@ 0x80
 800d8fc:	617b      	str	r3, [r7, #20]
 800d8fe:	e024      	b.n	800d94a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	685b      	ldr	r3, [r3, #4]
 800d904:	2b02      	cmp	r3, #2
 800d906:	d107      	bne.n	800d918 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800d908:	4b6a      	ldr	r3, [pc, #424]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d910:	2b00      	cmp	r3, #0
 800d912:	d109      	bne.n	800d928 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d914:	2301      	movs	r3, #1
 800d916:	e0c6      	b.n	800daa6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800d918:	4b66      	ldr	r3, [pc, #408]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d920:	2b00      	cmp	r3, #0
 800d922:	d101      	bne.n	800d928 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800d924:	2301      	movs	r3, #1
 800d926:	e0be      	b.n	800daa6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800d928:	f000 f8ce 	bl	800dac8 <HAL_RCC_GetSysClockFreq>
 800d92c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	4a61      	ldr	r2, [pc, #388]	@ (800dab8 <HAL_RCC_ClockConfig+0x268>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d909      	bls.n	800d94a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800d936:	4b5f      	ldr	r3, [pc, #380]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d938:	689b      	ldr	r3, [r3, #8]
 800d93a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d93e:	4a5d      	ldr	r2, [pc, #372]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d944:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800d946:	2380      	movs	r3, #128	@ 0x80
 800d948:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800d94a:	4b5a      	ldr	r3, [pc, #360]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	f023 0203 	bic.w	r2, r3, #3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	685b      	ldr	r3, [r3, #4]
 800d956:	4957      	ldr	r1, [pc, #348]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d958:	4313      	orrs	r3, r2
 800d95a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d95c:	f7fd f908 	bl	800ab70 <HAL_GetTick>
 800d960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d962:	e00a      	b.n	800d97a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d964:	f7fd f904 	bl	800ab70 <HAL_GetTick>
 800d968:	4602      	mov	r2, r0
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	1ad3      	subs	r3, r2, r3
 800d96e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d972:	4293      	cmp	r3, r2
 800d974:	d901      	bls.n	800d97a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800d976:	2303      	movs	r3, #3
 800d978:	e095      	b.n	800daa6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d97a:	4b4e      	ldr	r3, [pc, #312]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d97c:	689b      	ldr	r3, [r3, #8]
 800d97e:	f003 020c 	and.w	r2, r3, #12
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	685b      	ldr	r3, [r3, #4]
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	429a      	cmp	r2, r3
 800d98a:	d1eb      	bne.n	800d964 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f003 0302 	and.w	r3, r3, #2
 800d994:	2b00      	cmp	r3, #0
 800d996:	d023      	beq.n	800d9e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	f003 0304 	and.w	r3, r3, #4
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d005      	beq.n	800d9b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d9a4:	4b43      	ldr	r3, [pc, #268]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d9a6:	689b      	ldr	r3, [r3, #8]
 800d9a8:	4a42      	ldr	r2, [pc, #264]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d9aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d9ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f003 0308 	and.w	r3, r3, #8
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d007      	beq.n	800d9cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800d9bc:	4b3d      	ldr	r3, [pc, #244]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d9c4:	4a3b      	ldr	r2, [pc, #236]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d9c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800d9ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d9cc:	4b39      	ldr	r3, [pc, #228]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d9ce:	689b      	ldr	r3, [r3, #8]
 800d9d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	689b      	ldr	r3, [r3, #8]
 800d9d8:	4936      	ldr	r1, [pc, #216]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d9da:	4313      	orrs	r3, r2
 800d9dc:	608b      	str	r3, [r1, #8]
 800d9de:	e008      	b.n	800d9f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	2b80      	cmp	r3, #128	@ 0x80
 800d9e4:	d105      	bne.n	800d9f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800d9e6:	4b33      	ldr	r3, [pc, #204]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	4a32      	ldr	r2, [pc, #200]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800d9ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d9f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d9f2:	4b2f      	ldr	r3, [pc, #188]	@ (800dab0 <HAL_RCC_ClockConfig+0x260>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f003 030f 	and.w	r3, r3, #15
 800d9fa:	683a      	ldr	r2, [r7, #0]
 800d9fc:	429a      	cmp	r2, r3
 800d9fe:	d21d      	bcs.n	800da3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da00:	4b2b      	ldr	r3, [pc, #172]	@ (800dab0 <HAL_RCC_ClockConfig+0x260>)
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f023 020f 	bic.w	r2, r3, #15
 800da08:	4929      	ldr	r1, [pc, #164]	@ (800dab0 <HAL_RCC_ClockConfig+0x260>)
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	4313      	orrs	r3, r2
 800da0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800da10:	f7fd f8ae 	bl	800ab70 <HAL_GetTick>
 800da14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da16:	e00a      	b.n	800da2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800da18:	f7fd f8aa 	bl	800ab70 <HAL_GetTick>
 800da1c:	4602      	mov	r2, r0
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	f241 3288 	movw	r2, #5000	@ 0x1388
 800da26:	4293      	cmp	r3, r2
 800da28:	d901      	bls.n	800da2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800da2a:	2303      	movs	r3, #3
 800da2c:	e03b      	b.n	800daa6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da2e:	4b20      	ldr	r3, [pc, #128]	@ (800dab0 <HAL_RCC_ClockConfig+0x260>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f003 030f 	and.w	r3, r3, #15
 800da36:	683a      	ldr	r2, [r7, #0]
 800da38:	429a      	cmp	r2, r3
 800da3a:	d1ed      	bne.n	800da18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	f003 0304 	and.w	r3, r3, #4
 800da44:	2b00      	cmp	r3, #0
 800da46:	d008      	beq.n	800da5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800da48:	4b1a      	ldr	r3, [pc, #104]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	4917      	ldr	r1, [pc, #92]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800da56:	4313      	orrs	r3, r2
 800da58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f003 0308 	and.w	r3, r3, #8
 800da62:	2b00      	cmp	r3, #0
 800da64:	d009      	beq.n	800da7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800da66:	4b13      	ldr	r3, [pc, #76]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800da68:	689b      	ldr	r3, [r3, #8]
 800da6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	691b      	ldr	r3, [r3, #16]
 800da72:	00db      	lsls	r3, r3, #3
 800da74:	490f      	ldr	r1, [pc, #60]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800da76:	4313      	orrs	r3, r2
 800da78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800da7a:	f000 f825 	bl	800dac8 <HAL_RCC_GetSysClockFreq>
 800da7e:	4602      	mov	r2, r0
 800da80:	4b0c      	ldr	r3, [pc, #48]	@ (800dab4 <HAL_RCC_ClockConfig+0x264>)
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	091b      	lsrs	r3, r3, #4
 800da86:	f003 030f 	and.w	r3, r3, #15
 800da8a:	490c      	ldr	r1, [pc, #48]	@ (800dabc <HAL_RCC_ClockConfig+0x26c>)
 800da8c:	5ccb      	ldrb	r3, [r1, r3]
 800da8e:	f003 031f 	and.w	r3, r3, #31
 800da92:	fa22 f303 	lsr.w	r3, r2, r3
 800da96:	4a0a      	ldr	r2, [pc, #40]	@ (800dac0 <HAL_RCC_ClockConfig+0x270>)
 800da98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800da9a:	4b0a      	ldr	r3, [pc, #40]	@ (800dac4 <HAL_RCC_ClockConfig+0x274>)
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7fd f81a 	bl	800aad8 <HAL_InitTick>
 800daa4:	4603      	mov	r3, r0
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3718      	adds	r7, #24
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}
 800daae:	bf00      	nop
 800dab0:	40022000 	.word	0x40022000
 800dab4:	40021000 	.word	0x40021000
 800dab8:	04c4b400 	.word	0x04c4b400
 800dabc:	08014b98 	.word	0x08014b98
 800dac0:	200005b4 	.word	0x200005b4
 800dac4:	200005b8 	.word	0x200005b8

0800dac8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dac8:	b480      	push	{r7}
 800daca:	b087      	sub	sp, #28
 800dacc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800dace:	4b2c      	ldr	r3, [pc, #176]	@ (800db80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	f003 030c 	and.w	r3, r3, #12
 800dad6:	2b04      	cmp	r3, #4
 800dad8:	d102      	bne.n	800dae0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800dada:	4b2a      	ldr	r3, [pc, #168]	@ (800db84 <HAL_RCC_GetSysClockFreq+0xbc>)
 800dadc:	613b      	str	r3, [r7, #16]
 800dade:	e047      	b.n	800db70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800dae0:	4b27      	ldr	r3, [pc, #156]	@ (800db80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	f003 030c 	and.w	r3, r3, #12
 800dae8:	2b08      	cmp	r3, #8
 800daea:	d102      	bne.n	800daf2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800daec:	4b26      	ldr	r3, [pc, #152]	@ (800db88 <HAL_RCC_GetSysClockFreq+0xc0>)
 800daee:	613b      	str	r3, [r7, #16]
 800daf0:	e03e      	b.n	800db70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800daf2:	4b23      	ldr	r3, [pc, #140]	@ (800db80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800daf4:	689b      	ldr	r3, [r3, #8]
 800daf6:	f003 030c 	and.w	r3, r3, #12
 800dafa:	2b0c      	cmp	r3, #12
 800dafc:	d136      	bne.n	800db6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800dafe:	4b20      	ldr	r3, [pc, #128]	@ (800db80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800db00:	68db      	ldr	r3, [r3, #12]
 800db02:	f003 0303 	and.w	r3, r3, #3
 800db06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800db08:	4b1d      	ldr	r3, [pc, #116]	@ (800db80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800db0a:	68db      	ldr	r3, [r3, #12]
 800db0c:	091b      	lsrs	r3, r3, #4
 800db0e:	f003 030f 	and.w	r3, r3, #15
 800db12:	3301      	adds	r3, #1
 800db14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	2b03      	cmp	r3, #3
 800db1a:	d10c      	bne.n	800db36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800db1c:	4a1a      	ldr	r2, [pc, #104]	@ (800db88 <HAL_RCC_GetSysClockFreq+0xc0>)
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	fbb2 f3f3 	udiv	r3, r2, r3
 800db24:	4a16      	ldr	r2, [pc, #88]	@ (800db80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800db26:	68d2      	ldr	r2, [r2, #12]
 800db28:	0a12      	lsrs	r2, r2, #8
 800db2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800db2e:	fb02 f303 	mul.w	r3, r2, r3
 800db32:	617b      	str	r3, [r7, #20]
      break;
 800db34:	e00c      	b.n	800db50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800db36:	4a13      	ldr	r2, [pc, #76]	@ (800db84 <HAL_RCC_GetSysClockFreq+0xbc>)
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db3e:	4a10      	ldr	r2, [pc, #64]	@ (800db80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800db40:	68d2      	ldr	r2, [r2, #12]
 800db42:	0a12      	lsrs	r2, r2, #8
 800db44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800db48:	fb02 f303 	mul.w	r3, r2, r3
 800db4c:	617b      	str	r3, [r7, #20]
      break;
 800db4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800db50:	4b0b      	ldr	r3, [pc, #44]	@ (800db80 <HAL_RCC_GetSysClockFreq+0xb8>)
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	0e5b      	lsrs	r3, r3, #25
 800db56:	f003 0303 	and.w	r3, r3, #3
 800db5a:	3301      	adds	r3, #1
 800db5c:	005b      	lsls	r3, r3, #1
 800db5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800db60:	697a      	ldr	r2, [r7, #20]
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	fbb2 f3f3 	udiv	r3, r2, r3
 800db68:	613b      	str	r3, [r7, #16]
 800db6a:	e001      	b.n	800db70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800db6c:	2300      	movs	r3, #0
 800db6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800db70:	693b      	ldr	r3, [r7, #16]
}
 800db72:	4618      	mov	r0, r3
 800db74:	371c      	adds	r7, #28
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop
 800db80:	40021000 	.word	0x40021000
 800db84:	00f42400 	.word	0x00f42400
 800db88:	016e3600 	.word	0x016e3600

0800db8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800db8c:	b480      	push	{r7}
 800db8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800db90:	4b03      	ldr	r3, [pc, #12]	@ (800dba0 <HAL_RCC_GetHCLKFreq+0x14>)
 800db92:	681b      	ldr	r3, [r3, #0]
}
 800db94:	4618      	mov	r0, r3
 800db96:	46bd      	mov	sp, r7
 800db98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9c:	4770      	bx	lr
 800db9e:	bf00      	nop
 800dba0:	200005b4 	.word	0x200005b4

0800dba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800dba8:	f7ff fff0 	bl	800db8c <HAL_RCC_GetHCLKFreq>
 800dbac:	4602      	mov	r2, r0
 800dbae:	4b06      	ldr	r3, [pc, #24]	@ (800dbc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	0a1b      	lsrs	r3, r3, #8
 800dbb4:	f003 0307 	and.w	r3, r3, #7
 800dbb8:	4904      	ldr	r1, [pc, #16]	@ (800dbcc <HAL_RCC_GetPCLK1Freq+0x28>)
 800dbba:	5ccb      	ldrb	r3, [r1, r3]
 800dbbc:	f003 031f 	and.w	r3, r3, #31
 800dbc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	40021000 	.word	0x40021000
 800dbcc:	08014ba8 	.word	0x08014ba8

0800dbd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800dbd4:	f7ff ffda 	bl	800db8c <HAL_RCC_GetHCLKFreq>
 800dbd8:	4602      	mov	r2, r0
 800dbda:	4b06      	ldr	r3, [pc, #24]	@ (800dbf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800dbdc:	689b      	ldr	r3, [r3, #8]
 800dbde:	0adb      	lsrs	r3, r3, #11
 800dbe0:	f003 0307 	and.w	r3, r3, #7
 800dbe4:	4904      	ldr	r1, [pc, #16]	@ (800dbf8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800dbe6:	5ccb      	ldrb	r3, [r1, r3]
 800dbe8:	f003 031f 	and.w	r3, r3, #31
 800dbec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	40021000 	.word	0x40021000
 800dbf8:	08014ba8 	.word	0x08014ba8

0800dbfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b087      	sub	sp, #28
 800dc00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800dc02:	4b1e      	ldr	r3, [pc, #120]	@ (800dc7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dc04:	68db      	ldr	r3, [r3, #12]
 800dc06:	f003 0303 	and.w	r3, r3, #3
 800dc0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800dc0c:	4b1b      	ldr	r3, [pc, #108]	@ (800dc7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dc0e:	68db      	ldr	r3, [r3, #12]
 800dc10:	091b      	lsrs	r3, r3, #4
 800dc12:	f003 030f 	and.w	r3, r3, #15
 800dc16:	3301      	adds	r3, #1
 800dc18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	2b03      	cmp	r3, #3
 800dc1e:	d10c      	bne.n	800dc3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dc20:	4a17      	ldr	r2, [pc, #92]	@ (800dc80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc28:	4a14      	ldr	r2, [pc, #80]	@ (800dc7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dc2a:	68d2      	ldr	r2, [r2, #12]
 800dc2c:	0a12      	lsrs	r2, r2, #8
 800dc2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dc32:	fb02 f303 	mul.w	r3, r2, r3
 800dc36:	617b      	str	r3, [r7, #20]
    break;
 800dc38:	e00c      	b.n	800dc54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800dc3a:	4a12      	ldr	r2, [pc, #72]	@ (800dc84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc42:	4a0e      	ldr	r2, [pc, #56]	@ (800dc7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dc44:	68d2      	ldr	r2, [r2, #12]
 800dc46:	0a12      	lsrs	r2, r2, #8
 800dc48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800dc4c:	fb02 f303 	mul.w	r3, r2, r3
 800dc50:	617b      	str	r3, [r7, #20]
    break;
 800dc52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800dc54:	4b09      	ldr	r3, [pc, #36]	@ (800dc7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800dc56:	68db      	ldr	r3, [r3, #12]
 800dc58:	0e5b      	lsrs	r3, r3, #25
 800dc5a:	f003 0303 	and.w	r3, r3, #3
 800dc5e:	3301      	adds	r3, #1
 800dc60:	005b      	lsls	r3, r3, #1
 800dc62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800dc64:	697a      	ldr	r2, [r7, #20]
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800dc6e:	687b      	ldr	r3, [r7, #4]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	371c      	adds	r7, #28
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr
 800dc7c:	40021000 	.word	0x40021000
 800dc80:	016e3600 	.word	0x016e3600
 800dc84:	00f42400 	.word	0x00f42400

0800dc88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b086      	sub	sp, #24
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800dc90:	2300      	movs	r3, #0
 800dc92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800dc94:	2300      	movs	r3, #0
 800dc96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f000 8098 	beq.w	800ddd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800dca6:	2300      	movs	r3, #0
 800dca8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dcaa:	4b43      	ldr	r3, [pc, #268]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dcac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d10d      	bne.n	800dcd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dcb6:	4b40      	ldr	r3, [pc, #256]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dcb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcba:	4a3f      	ldr	r2, [pc, #252]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dcbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dcc0:	6593      	str	r3, [r2, #88]	@ 0x58
 800dcc2:	4b3d      	ldr	r3, [pc, #244]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dcc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800dcca:	60bb      	str	r3, [r7, #8]
 800dccc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dcce:	2301      	movs	r3, #1
 800dcd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dcd2:	4b3a      	ldr	r3, [pc, #232]	@ (800ddbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	4a39      	ldr	r2, [pc, #228]	@ (800ddbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800dcd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dcdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800dcde:	f7fc ff47 	bl	800ab70 <HAL_GetTick>
 800dce2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dce4:	e009      	b.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dce6:	f7fc ff43 	bl	800ab70 <HAL_GetTick>
 800dcea:	4602      	mov	r2, r0
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	2b02      	cmp	r3, #2
 800dcf2:	d902      	bls.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	74fb      	strb	r3, [r7, #19]
        break;
 800dcf8:	e005      	b.n	800dd06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800dcfa:	4b30      	ldr	r3, [pc, #192]	@ (800ddbc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d0ef      	beq.n	800dce6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800dd06:	7cfb      	ldrb	r3, [r7, #19]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d159      	bne.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800dd0c:	4b2a      	ldr	r3, [pc, #168]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dd0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800dd16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d01e      	beq.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dd22:	697a      	ldr	r2, [r7, #20]
 800dd24:	429a      	cmp	r2, r3
 800dd26:	d019      	beq.n	800dd5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800dd28:	4b23      	ldr	r3, [pc, #140]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dd2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800dd32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800dd34:	4b20      	ldr	r3, [pc, #128]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dd36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd3a:	4a1f      	ldr	r2, [pc, #124]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dd3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800dd40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800dd44:	4b1c      	ldr	r3, [pc, #112]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dd46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd4a:	4a1b      	ldr	r2, [pc, #108]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dd4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800dd50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800dd54:	4a18      	ldr	r2, [pc, #96]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dd56:	697b      	ldr	r3, [r7, #20]
 800dd58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800dd5c:	697b      	ldr	r3, [r7, #20]
 800dd5e:	f003 0301 	and.w	r3, r3, #1
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d016      	beq.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd66:	f7fc ff03 	bl	800ab70 <HAL_GetTick>
 800dd6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dd6c:	e00b      	b.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd6e:	f7fc feff 	bl	800ab70 <HAL_GetTick>
 800dd72:	4602      	mov	r2, r0
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	1ad3      	subs	r3, r2, r3
 800dd78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd7c:	4293      	cmp	r3, r2
 800dd7e:	d902      	bls.n	800dd86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800dd80:	2303      	movs	r3, #3
 800dd82:	74fb      	strb	r3, [r7, #19]
            break;
 800dd84:	e006      	b.n	800dd94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800dd86:	4b0c      	ldr	r3, [pc, #48]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dd8c:	f003 0302 	and.w	r3, r3, #2
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d0ec      	beq.n	800dd6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800dd94:	7cfb      	ldrb	r3, [r7, #19]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d10b      	bne.n	800ddb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dd9a:	4b07      	ldr	r3, [pc, #28]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800dd9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800dda0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dda8:	4903      	ldr	r1, [pc, #12]	@ (800ddb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800ddb0:	e008      	b.n	800ddc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ddb2:	7cfb      	ldrb	r3, [r7, #19]
 800ddb4:	74bb      	strb	r3, [r7, #18]
 800ddb6:	e005      	b.n	800ddc4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ddb8:	40021000 	.word	0x40021000
 800ddbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ddc0:	7cfb      	ldrb	r3, [r7, #19]
 800ddc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ddc4:	7c7b      	ldrb	r3, [r7, #17]
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d105      	bne.n	800ddd6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ddca:	4ba7      	ldr	r3, [pc, #668]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddce:	4aa6      	ldr	r2, [pc, #664]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ddd4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	f003 0301 	and.w	r3, r3, #1
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00a      	beq.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800dde2:	4ba1      	ldr	r3, [pc, #644]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dde4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dde8:	f023 0203 	bic.w	r2, r3, #3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	499d      	ldr	r1, [pc, #628]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ddf2:	4313      	orrs	r3, r2
 800ddf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	f003 0302 	and.w	r3, r3, #2
 800de00:	2b00      	cmp	r3, #0
 800de02:	d00a      	beq.n	800de1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800de04:	4b98      	ldr	r3, [pc, #608]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de0a:	f023 020c 	bic.w	r2, r3, #12
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	4995      	ldr	r1, [pc, #596]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de14:	4313      	orrs	r3, r2
 800de16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f003 0304 	and.w	r3, r3, #4
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00a      	beq.n	800de3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800de26:	4b90      	ldr	r3, [pc, #576]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de2c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	68db      	ldr	r3, [r3, #12]
 800de34:	498c      	ldr	r1, [pc, #560]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de36:	4313      	orrs	r3, r2
 800de38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f003 0308 	and.w	r3, r3, #8
 800de44:	2b00      	cmp	r3, #0
 800de46:	d00a      	beq.n	800de5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800de48:	4b87      	ldr	r3, [pc, #540]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	691b      	ldr	r3, [r3, #16]
 800de56:	4984      	ldr	r1, [pc, #528]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de58:	4313      	orrs	r3, r2
 800de5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f003 0310 	and.w	r3, r3, #16
 800de66:	2b00      	cmp	r3, #0
 800de68:	d00a      	beq.n	800de80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800de6a:	4b7f      	ldr	r3, [pc, #508]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	497b      	ldr	r1, [pc, #492]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de7a:	4313      	orrs	r3, r2
 800de7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f003 0320 	and.w	r3, r3, #32
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00a      	beq.n	800dea2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800de8c:	4b76      	ldr	r3, [pc, #472]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800de92:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	699b      	ldr	r3, [r3, #24]
 800de9a:	4973      	ldr	r1, [pc, #460]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800de9c:	4313      	orrs	r3, r2
 800de9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d00a      	beq.n	800dec4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800deae:	4b6e      	ldr	r3, [pc, #440]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800deb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800deb4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	69db      	ldr	r3, [r3, #28]
 800debc:	496a      	ldr	r1, [pc, #424]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800debe:	4313      	orrs	r3, r2
 800dec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00a      	beq.n	800dee6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ded0:	4b65      	ldr	r3, [pc, #404]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ded2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ded6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6a1b      	ldr	r3, [r3, #32]
 800dede:	4962      	ldr	r1, [pc, #392]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dee0:	4313      	orrs	r3, r2
 800dee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800deee:	2b00      	cmp	r3, #0
 800def0:	d00a      	beq.n	800df08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800def2:	4b5d      	ldr	r3, [pc, #372]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800def4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800def8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df00:	4959      	ldr	r1, [pc, #356]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df02:	4313      	orrs	r3, r2
 800df04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00a      	beq.n	800df2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800df14:	4b54      	ldr	r3, [pc, #336]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800df1a:	f023 0203 	bic.w	r2, r3, #3
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df22:	4951      	ldr	r1, [pc, #324]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df24:	4313      	orrs	r3, r2
 800df26:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00a      	beq.n	800df4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800df36:	4b4c      	ldr	r3, [pc, #304]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df44:	4948      	ldr	r1, [pc, #288]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df46:	4313      	orrs	r3, r2
 800df48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800df54:	2b00      	cmp	r3, #0
 800df56:	d015      	beq.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800df58:	4b43      	ldr	r3, [pc, #268]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df66:	4940      	ldr	r1, [pc, #256]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df68:	4313      	orrs	r3, r2
 800df6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df76:	d105      	bne.n	800df84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800df78:	4b3b      	ldr	r3, [pc, #236]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	4a3a      	ldr	r2, [pc, #232]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df7e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df82:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d015      	beq.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800df90:	4b35      	ldr	r3, [pc, #212]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800df92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800df96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df9e:	4932      	ldr	r1, [pc, #200]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dfaa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dfae:	d105      	bne.n	800dfbc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dfb0:	4b2d      	ldr	r3, [pc, #180]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	4a2c      	ldr	r2, [pc, #176]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dfba:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d015      	beq.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800dfc8:	4b27      	ldr	r3, [pc, #156]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfd6:	4924      	ldr	r1, [pc, #144]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfd8:	4313      	orrs	r3, r2
 800dfda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfe2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800dfe6:	d105      	bne.n	800dff4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800dfe8:	4b1f      	ldr	r3, [pc, #124]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	4a1e      	ldr	r2, [pc, #120]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800dfee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dff2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d015      	beq.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e000:	4b19      	ldr	r3, [pc, #100]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e006:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e00e:	4916      	ldr	r1, [pc, #88]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e010:	4313      	orrs	r3, r2
 800e012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e01a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e01e:	d105      	bne.n	800e02c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e020:	4b11      	ldr	r3, [pc, #68]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e022:	68db      	ldr	r3, [r3, #12]
 800e024:	4a10      	ldr	r2, [pc, #64]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e02a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e034:	2b00      	cmp	r3, #0
 800e036:	d019      	beq.n	800e06c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e038:	4b0b      	ldr	r3, [pc, #44]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e03e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e046:	4908      	ldr	r1, [pc, #32]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e048:	4313      	orrs	r3, r2
 800e04a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e052:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e056:	d109      	bne.n	800e06c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e058:	4b03      	ldr	r3, [pc, #12]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	4a02      	ldr	r2, [pc, #8]	@ (800e068 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e05e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e062:	60d3      	str	r3, [r2, #12]
 800e064:	e002      	b.n	800e06c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800e066:	bf00      	nop
 800e068:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e074:	2b00      	cmp	r3, #0
 800e076:	d015      	beq.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800e078:	4b29      	ldr	r3, [pc, #164]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e07a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e07e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e086:	4926      	ldr	r1, [pc, #152]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e088:	4313      	orrs	r3, r2
 800e08a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e096:	d105      	bne.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e098:	4b21      	ldr	r3, [pc, #132]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	4a20      	ldr	r2, [pc, #128]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e09e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e0a2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d015      	beq.n	800e0dc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800e0b0:	4b1b      	ldr	r3, [pc, #108]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e0b6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e0be:	4918      	ldr	r1, [pc, #96]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e0c0:	4313      	orrs	r3, r2
 800e0c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e0ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e0ce:	d105      	bne.n	800e0dc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800e0d0:	4b13      	ldr	r3, [pc, #76]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e0d2:	68db      	ldr	r3, [r3, #12]
 800e0d4:	4a12      	ldr	r2, [pc, #72]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e0d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e0da:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d015      	beq.n	800e114 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800e0e8:	4b0d      	ldr	r3, [pc, #52]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e0ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e0ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0f6:	490a      	ldr	r1, [pc, #40]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e0f8:	4313      	orrs	r3, r2
 800e0fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e102:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e106:	d105      	bne.n	800e114 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800e108:	4b05      	ldr	r3, [pc, #20]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	4a04      	ldr	r2, [pc, #16]	@ (800e120 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800e10e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e112:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800e114:	7cbb      	ldrb	r3, [r7, #18]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3718      	adds	r7, #24
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	40021000 	.word	0x40021000

0800e124 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d101      	bne.n	800e136 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e132:	2301      	movs	r3, #1
 800e134:	e054      	b.n	800e1e0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d111      	bne.n	800e166 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f001 fee2 	bl	800ff14 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e154:	2b00      	cmp	r3, #0
 800e156:	d102      	bne.n	800e15e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	4a23      	ldr	r2, [pc, #140]	@ (800e1e8 <HAL_TIM_Base_Init+0xc4>)
 800e15c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2202      	movs	r2, #2
 800e16a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	3304      	adds	r3, #4
 800e176:	4619      	mov	r1, r3
 800e178:	4610      	mov	r0, r2
 800e17a:	f001 fa2b 	bl	800f5d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2201      	movs	r2, #1
 800e182:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2201      	movs	r2, #1
 800e18a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2201      	movs	r2, #1
 800e192:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2201      	movs	r2, #1
 800e19a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	2201      	movs	r2, #1
 800e1da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	3708      	adds	r7, #8
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}
 800e1e8:	0800a399 	.word	0x0800a399

0800e1ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d001      	beq.n	800e204 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e200:	2301      	movs	r3, #1
 800e202:	e04c      	b.n	800e29e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2202      	movs	r2, #2
 800e208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a26      	ldr	r2, [pc, #152]	@ (800e2ac <HAL_TIM_Base_Start+0xc0>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d022      	beq.n	800e25c <HAL_TIM_Base_Start+0x70>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e21e:	d01d      	beq.n	800e25c <HAL_TIM_Base_Start+0x70>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4a22      	ldr	r2, [pc, #136]	@ (800e2b0 <HAL_TIM_Base_Start+0xc4>)
 800e226:	4293      	cmp	r3, r2
 800e228:	d018      	beq.n	800e25c <HAL_TIM_Base_Start+0x70>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4a21      	ldr	r2, [pc, #132]	@ (800e2b4 <HAL_TIM_Base_Start+0xc8>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d013      	beq.n	800e25c <HAL_TIM_Base_Start+0x70>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4a1f      	ldr	r2, [pc, #124]	@ (800e2b8 <HAL_TIM_Base_Start+0xcc>)
 800e23a:	4293      	cmp	r3, r2
 800e23c:	d00e      	beq.n	800e25c <HAL_TIM_Base_Start+0x70>
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	4a1e      	ldr	r2, [pc, #120]	@ (800e2bc <HAL_TIM_Base_Start+0xd0>)
 800e244:	4293      	cmp	r3, r2
 800e246:	d009      	beq.n	800e25c <HAL_TIM_Base_Start+0x70>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a1c      	ldr	r2, [pc, #112]	@ (800e2c0 <HAL_TIM_Base_Start+0xd4>)
 800e24e:	4293      	cmp	r3, r2
 800e250:	d004      	beq.n	800e25c <HAL_TIM_Base_Start+0x70>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	4a1b      	ldr	r2, [pc, #108]	@ (800e2c4 <HAL_TIM_Base_Start+0xd8>)
 800e258:	4293      	cmp	r3, r2
 800e25a:	d115      	bne.n	800e288 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	689a      	ldr	r2, [r3, #8]
 800e262:	4b19      	ldr	r3, [pc, #100]	@ (800e2c8 <HAL_TIM_Base_Start+0xdc>)
 800e264:	4013      	ands	r3, r2
 800e266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2b06      	cmp	r3, #6
 800e26c:	d015      	beq.n	800e29a <HAL_TIM_Base_Start+0xae>
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e274:	d011      	beq.n	800e29a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	681a      	ldr	r2, [r3, #0]
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f042 0201 	orr.w	r2, r2, #1
 800e284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e286:	e008      	b.n	800e29a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	681a      	ldr	r2, [r3, #0]
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f042 0201 	orr.w	r2, r2, #1
 800e296:	601a      	str	r2, [r3, #0]
 800e298:	e000      	b.n	800e29c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e29a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e29c:	2300      	movs	r3, #0
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3714      	adds	r7, #20
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a8:	4770      	bx	lr
 800e2aa:	bf00      	nop
 800e2ac:	40012c00 	.word	0x40012c00
 800e2b0:	40000400 	.word	0x40000400
 800e2b4:	40000800 	.word	0x40000800
 800e2b8:	40000c00 	.word	0x40000c00
 800e2bc:	40013400 	.word	0x40013400
 800e2c0:	40014000 	.word	0x40014000
 800e2c4:	40015000 	.word	0x40015000
 800e2c8:	00010007 	.word	0x00010007

0800e2cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d001      	beq.n	800e2e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e2e0:	2301      	movs	r3, #1
 800e2e2:	e054      	b.n	800e38e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2202      	movs	r2, #2
 800e2e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	68da      	ldr	r2, [r3, #12]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	f042 0201 	orr.w	r2, r2, #1
 800e2fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4a26      	ldr	r2, [pc, #152]	@ (800e39c <HAL_TIM_Base_Start_IT+0xd0>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d022      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e30e:	d01d      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4a22      	ldr	r2, [pc, #136]	@ (800e3a0 <HAL_TIM_Base_Start_IT+0xd4>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d018      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4a21      	ldr	r2, [pc, #132]	@ (800e3a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d013      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4a1f      	ldr	r2, [pc, #124]	@ (800e3a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800e32a:	4293      	cmp	r3, r2
 800e32c:	d00e      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	4a1e      	ldr	r2, [pc, #120]	@ (800e3ac <HAL_TIM_Base_Start_IT+0xe0>)
 800e334:	4293      	cmp	r3, r2
 800e336:	d009      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	4a1c      	ldr	r2, [pc, #112]	@ (800e3b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800e33e:	4293      	cmp	r3, r2
 800e340:	d004      	beq.n	800e34c <HAL_TIM_Base_Start_IT+0x80>
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	4a1b      	ldr	r2, [pc, #108]	@ (800e3b4 <HAL_TIM_Base_Start_IT+0xe8>)
 800e348:	4293      	cmp	r3, r2
 800e34a:	d115      	bne.n	800e378 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	689a      	ldr	r2, [r3, #8]
 800e352:	4b19      	ldr	r3, [pc, #100]	@ (800e3b8 <HAL_TIM_Base_Start_IT+0xec>)
 800e354:	4013      	ands	r3, r2
 800e356:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2b06      	cmp	r3, #6
 800e35c:	d015      	beq.n	800e38a <HAL_TIM_Base_Start_IT+0xbe>
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e364:	d011      	beq.n	800e38a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f042 0201 	orr.w	r2, r2, #1
 800e374:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e376:	e008      	b.n	800e38a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f042 0201 	orr.w	r2, r2, #1
 800e386:	601a      	str	r2, [r3, #0]
 800e388:	e000      	b.n	800e38c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e38a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3714      	adds	r7, #20
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	40012c00 	.word	0x40012c00
 800e3a0:	40000400 	.word	0x40000400
 800e3a4:	40000800 	.word	0x40000800
 800e3a8:	40000c00 	.word	0x40000c00
 800e3ac:	40013400 	.word	0x40013400
 800e3b0:	40014000 	.word	0x40014000
 800e3b4:	40015000 	.word	0x40015000
 800e3b8:	00010007 	.word	0x00010007

0800e3bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d101      	bne.n	800e3ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e054      	b.n	800e478 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e3d4:	b2db      	uxtb	r3, r3
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d111      	bne.n	800e3fe <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f001 fd96 	bl	800ff14 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d102      	bne.n	800e3f6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4a23      	ldr	r2, [pc, #140]	@ (800e480 <HAL_TIM_PWM_Init+0xc4>)
 800e3f4:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2202      	movs	r2, #2
 800e402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681a      	ldr	r2, [r3, #0]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	3304      	adds	r3, #4
 800e40e:	4619      	mov	r1, r3
 800e410:	4610      	mov	r0, r2
 800e412:	f001 f8df 	bl	800f5d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2201      	movs	r2, #1
 800e41a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2201      	movs	r2, #1
 800e422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2201      	movs	r2, #1
 800e42a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2201      	movs	r2, #1
 800e432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2201      	movs	r2, #1
 800e43a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	2201      	movs	r2, #1
 800e442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2201      	movs	r2, #1
 800e44a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2201      	movs	r2, #1
 800e452:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2201      	movs	r2, #1
 800e45a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2201      	movs	r2, #1
 800e462:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2201      	movs	r2, #1
 800e46a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	2201      	movs	r2, #1
 800e472:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3708      	adds	r7, #8
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}
 800e480:	0800a34d 	.word	0x0800a34d

0800e484 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
 800e48c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d109      	bne.n	800e4a8 <HAL_TIM_PWM_Start+0x24>
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	bf14      	ite	ne
 800e4a0:	2301      	movne	r3, #1
 800e4a2:	2300      	moveq	r3, #0
 800e4a4:	b2db      	uxtb	r3, r3
 800e4a6:	e03c      	b.n	800e522 <HAL_TIM_PWM_Start+0x9e>
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	2b04      	cmp	r3, #4
 800e4ac:	d109      	bne.n	800e4c2 <HAL_TIM_PWM_Start+0x3e>
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	2b01      	cmp	r3, #1
 800e4b8:	bf14      	ite	ne
 800e4ba:	2301      	movne	r3, #1
 800e4bc:	2300      	moveq	r3, #0
 800e4be:	b2db      	uxtb	r3, r3
 800e4c0:	e02f      	b.n	800e522 <HAL_TIM_PWM_Start+0x9e>
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2b08      	cmp	r3, #8
 800e4c6:	d109      	bne.n	800e4dc <HAL_TIM_PWM_Start+0x58>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	2b01      	cmp	r3, #1
 800e4d2:	bf14      	ite	ne
 800e4d4:	2301      	movne	r3, #1
 800e4d6:	2300      	moveq	r3, #0
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	e022      	b.n	800e522 <HAL_TIM_PWM_Start+0x9e>
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	2b0c      	cmp	r3, #12
 800e4e0:	d109      	bne.n	800e4f6 <HAL_TIM_PWM_Start+0x72>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	2b01      	cmp	r3, #1
 800e4ec:	bf14      	ite	ne
 800e4ee:	2301      	movne	r3, #1
 800e4f0:	2300      	moveq	r3, #0
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	e015      	b.n	800e522 <HAL_TIM_PWM_Start+0x9e>
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	2b10      	cmp	r3, #16
 800e4fa:	d109      	bne.n	800e510 <HAL_TIM_PWM_Start+0x8c>
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e502:	b2db      	uxtb	r3, r3
 800e504:	2b01      	cmp	r3, #1
 800e506:	bf14      	ite	ne
 800e508:	2301      	movne	r3, #1
 800e50a:	2300      	moveq	r3, #0
 800e50c:	b2db      	uxtb	r3, r3
 800e50e:	e008      	b.n	800e522 <HAL_TIM_PWM_Start+0x9e>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b01      	cmp	r3, #1
 800e51a:	bf14      	ite	ne
 800e51c:	2301      	movne	r3, #1
 800e51e:	2300      	moveq	r3, #0
 800e520:	b2db      	uxtb	r3, r3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e526:	2301      	movs	r3, #1
 800e528:	e0a6      	b.n	800e678 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d104      	bne.n	800e53a <HAL_TIM_PWM_Start+0xb6>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2202      	movs	r2, #2
 800e534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e538:	e023      	b.n	800e582 <HAL_TIM_PWM_Start+0xfe>
 800e53a:	683b      	ldr	r3, [r7, #0]
 800e53c:	2b04      	cmp	r3, #4
 800e53e:	d104      	bne.n	800e54a <HAL_TIM_PWM_Start+0xc6>
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2202      	movs	r2, #2
 800e544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e548:	e01b      	b.n	800e582 <HAL_TIM_PWM_Start+0xfe>
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	2b08      	cmp	r3, #8
 800e54e:	d104      	bne.n	800e55a <HAL_TIM_PWM_Start+0xd6>
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2202      	movs	r2, #2
 800e554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e558:	e013      	b.n	800e582 <HAL_TIM_PWM_Start+0xfe>
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	2b0c      	cmp	r3, #12
 800e55e:	d104      	bne.n	800e56a <HAL_TIM_PWM_Start+0xe6>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2202      	movs	r2, #2
 800e564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e568:	e00b      	b.n	800e582 <HAL_TIM_PWM_Start+0xfe>
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	2b10      	cmp	r3, #16
 800e56e:	d104      	bne.n	800e57a <HAL_TIM_PWM_Start+0xf6>
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2202      	movs	r2, #2
 800e574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e578:	e003      	b.n	800e582 <HAL_TIM_PWM_Start+0xfe>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2202      	movs	r2, #2
 800e57e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	2201      	movs	r2, #1
 800e588:	6839      	ldr	r1, [r7, #0]
 800e58a:	4618      	mov	r0, r3
 800e58c:	f001 fc9c 	bl	800fec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a3a      	ldr	r2, [pc, #232]	@ (800e680 <HAL_TIM_PWM_Start+0x1fc>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d018      	beq.n	800e5cc <HAL_TIM_PWM_Start+0x148>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a39      	ldr	r2, [pc, #228]	@ (800e684 <HAL_TIM_PWM_Start+0x200>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d013      	beq.n	800e5cc <HAL_TIM_PWM_Start+0x148>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a37      	ldr	r2, [pc, #220]	@ (800e688 <HAL_TIM_PWM_Start+0x204>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d00e      	beq.n	800e5cc <HAL_TIM_PWM_Start+0x148>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4a36      	ldr	r2, [pc, #216]	@ (800e68c <HAL_TIM_PWM_Start+0x208>)
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d009      	beq.n	800e5cc <HAL_TIM_PWM_Start+0x148>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a34      	ldr	r2, [pc, #208]	@ (800e690 <HAL_TIM_PWM_Start+0x20c>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d004      	beq.n	800e5cc <HAL_TIM_PWM_Start+0x148>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4a33      	ldr	r2, [pc, #204]	@ (800e694 <HAL_TIM_PWM_Start+0x210>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d101      	bne.n	800e5d0 <HAL_TIM_PWM_Start+0x14c>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	e000      	b.n	800e5d2 <HAL_TIM_PWM_Start+0x14e>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d007      	beq.n	800e5e6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e5e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	4a25      	ldr	r2, [pc, #148]	@ (800e680 <HAL_TIM_PWM_Start+0x1fc>)
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d022      	beq.n	800e636 <HAL_TIM_PWM_Start+0x1b2>
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e5f8:	d01d      	beq.n	800e636 <HAL_TIM_PWM_Start+0x1b2>
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4a26      	ldr	r2, [pc, #152]	@ (800e698 <HAL_TIM_PWM_Start+0x214>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d018      	beq.n	800e636 <HAL_TIM_PWM_Start+0x1b2>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a24      	ldr	r2, [pc, #144]	@ (800e69c <HAL_TIM_PWM_Start+0x218>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d013      	beq.n	800e636 <HAL_TIM_PWM_Start+0x1b2>
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a23      	ldr	r2, [pc, #140]	@ (800e6a0 <HAL_TIM_PWM_Start+0x21c>)
 800e614:	4293      	cmp	r3, r2
 800e616:	d00e      	beq.n	800e636 <HAL_TIM_PWM_Start+0x1b2>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	4a19      	ldr	r2, [pc, #100]	@ (800e684 <HAL_TIM_PWM_Start+0x200>)
 800e61e:	4293      	cmp	r3, r2
 800e620:	d009      	beq.n	800e636 <HAL_TIM_PWM_Start+0x1b2>
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	4a18      	ldr	r2, [pc, #96]	@ (800e688 <HAL_TIM_PWM_Start+0x204>)
 800e628:	4293      	cmp	r3, r2
 800e62a:	d004      	beq.n	800e636 <HAL_TIM_PWM_Start+0x1b2>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a18      	ldr	r2, [pc, #96]	@ (800e694 <HAL_TIM_PWM_Start+0x210>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d115      	bne.n	800e662 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	689a      	ldr	r2, [r3, #8]
 800e63c:	4b19      	ldr	r3, [pc, #100]	@ (800e6a4 <HAL_TIM_PWM_Start+0x220>)
 800e63e:	4013      	ands	r3, r2
 800e640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	2b06      	cmp	r3, #6
 800e646:	d015      	beq.n	800e674 <HAL_TIM_PWM_Start+0x1f0>
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e64e:	d011      	beq.n	800e674 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	f042 0201 	orr.w	r2, r2, #1
 800e65e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e660:	e008      	b.n	800e674 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	681a      	ldr	r2, [r3, #0]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f042 0201 	orr.w	r2, r2, #1
 800e670:	601a      	str	r2, [r3, #0]
 800e672:	e000      	b.n	800e676 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e674:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e676:	2300      	movs	r3, #0
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3710      	adds	r7, #16
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	40012c00 	.word	0x40012c00
 800e684:	40013400 	.word	0x40013400
 800e688:	40014000 	.word	0x40014000
 800e68c:	40014400 	.word	0x40014400
 800e690:	40014800 	.word	0x40014800
 800e694:	40015000 	.word	0x40015000
 800e698:	40000400 	.word	0x40000400
 800e69c:	40000800 	.word	0x40000800
 800e6a0:	40000c00 	.word	0x40000c00
 800e6a4:	00010007 	.word	0x00010007

0800e6a8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b082      	sub	sp, #8
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d101      	bne.n	800e6bc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800e6b8:	2301      	movs	r3, #1
 800e6ba:	e04c      	b.n	800e756 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d111      	bne.n	800e6ec <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f001 fc1f 	bl	800ff14 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d102      	bne.n	800e6e4 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	4a1f      	ldr	r2, [pc, #124]	@ (800e760 <HAL_TIM_OnePulse_Init+0xb8>)
 800e6e2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2202      	movs	r2, #2
 800e6f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	4610      	mov	r0, r2
 800e700:	f000 ff68 	bl	800f5d4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	681a      	ldr	r2, [r3, #0]
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	f022 0208 	bic.w	r2, r2, #8
 800e712:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	6819      	ldr	r1, [r3, #0]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	683a      	ldr	r2, [r7, #0]
 800e720:	430a      	orrs	r2, r1
 800e722:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2201      	movs	r2, #1
 800e728:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2201      	movs	r2, #1
 800e730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2201      	movs	r2, #1
 800e738:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	2201      	movs	r2, #1
 800e740:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	2201      	movs	r2, #1
 800e748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2201      	movs	r2, #1
 800e750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e754:	2300      	movs	r3, #0
}
 800e756:	4618      	mov	r0, r3
 800e758:	3708      	adds	r7, #8
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}
 800e75e:	bf00      	nop
 800e760:	0800e765 	.word	0x0800e765

0800e764 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800e764:	b480      	push	{r7}
 800e766:	b083      	sub	sp, #12
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800e76c:	bf00      	nop
 800e76e:	370c      	adds	r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e776:	4770      	bx	lr

0800e778 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e788:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e790:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e798:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e7a0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e7a2:	7bfb      	ldrb	r3, [r7, #15]
 800e7a4:	2b01      	cmp	r3, #1
 800e7a6:	d108      	bne.n	800e7ba <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800e7a8:	7bbb      	ldrb	r3, [r7, #14]
 800e7aa:	2b01      	cmp	r3, #1
 800e7ac:	d105      	bne.n	800e7ba <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800e7ae:	7b7b      	ldrb	r3, [r7, #13]
 800e7b0:	2b01      	cmp	r3, #1
 800e7b2:	d102      	bne.n	800e7ba <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800e7b4:	7b3b      	ldrb	r3, [r7, #12]
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d001      	beq.n	800e7be <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	e059      	b.n	800e872 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2202      	movs	r2, #2
 800e7c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2202      	movs	r2, #2
 800e7ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2202      	movs	r2, #2
 800e7d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2202      	movs	r2, #2
 800e7da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	68da      	ldr	r2, [r3, #12]
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	f042 0202 	orr.w	r2, r2, #2
 800e7ec:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	68da      	ldr	r2, [r3, #12]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	f042 0204 	orr.w	r2, r2, #4
 800e7fc:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	2201      	movs	r2, #1
 800e804:	2100      	movs	r1, #0
 800e806:	4618      	mov	r0, r3
 800e808:	f001 fb5e 	bl	800fec8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2201      	movs	r2, #1
 800e812:	2104      	movs	r1, #4
 800e814:	4618      	mov	r0, r3
 800e816:	f001 fb57 	bl	800fec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4a17      	ldr	r2, [pc, #92]	@ (800e87c <HAL_TIM_OnePulse_Start_IT+0x104>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d018      	beq.n	800e856 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4a15      	ldr	r2, [pc, #84]	@ (800e880 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d013      	beq.n	800e856 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a14      	ldr	r2, [pc, #80]	@ (800e884 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d00e      	beq.n	800e856 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	4a12      	ldr	r2, [pc, #72]	@ (800e888 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800e83e:	4293      	cmp	r3, r2
 800e840:	d009      	beq.n	800e856 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a11      	ldr	r2, [pc, #68]	@ (800e88c <HAL_TIM_OnePulse_Start_IT+0x114>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d004      	beq.n	800e856 <HAL_TIM_OnePulse_Start_IT+0xde>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a0f      	ldr	r2, [pc, #60]	@ (800e890 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d101      	bne.n	800e85a <HAL_TIM_OnePulse_Start_IT+0xe2>
 800e856:	2301      	movs	r3, #1
 800e858:	e000      	b.n	800e85c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800e85a:	2300      	movs	r3, #0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d007      	beq.n	800e870 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e86e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800e870:	2300      	movs	r3, #0
}
 800e872:	4618      	mov	r0, r3
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	40012c00 	.word	0x40012c00
 800e880:	40013400 	.word	0x40013400
 800e884:	40014000 	.word	0x40014000
 800e888:	40014400 	.word	0x40014400
 800e88c:	40014800 	.word	0x40014800
 800e890:	40015000 	.word	0x40015000

0800e894 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d101      	bne.n	800e8a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e8a4:	2301      	movs	r3, #1
 800e8a6:	e0a2      	b.n	800e9ee <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d111      	bne.n	800e8d8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f001 fb29 	bl	800ff14 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d102      	bne.n	800e8d0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	4a4a      	ldr	r2, [pc, #296]	@ (800e9f8 <HAL_TIM_Encoder_Init+0x164>)
 800e8ce:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2202      	movs	r2, #2
 800e8dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	689b      	ldr	r3, [r3, #8]
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	6812      	ldr	r2, [r2, #0]
 800e8ea:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800e8ee:	f023 0307 	bic.w	r3, r3, #7
 800e8f2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681a      	ldr	r2, [r3, #0]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	3304      	adds	r3, #4
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	4610      	mov	r0, r2
 800e900:	f000 fe68 	bl	800f5d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	699b      	ldr	r3, [r3, #24]
 800e912:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	6a1b      	ldr	r3, [r3, #32]
 800e91a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	697a      	ldr	r2, [r7, #20]
 800e922:	4313      	orrs	r3, r2
 800e924:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e92c:	f023 0303 	bic.w	r3, r3, #3
 800e930:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	689a      	ldr	r2, [r3, #8]
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	699b      	ldr	r3, [r3, #24]
 800e93a:	021b      	lsls	r3, r3, #8
 800e93c:	4313      	orrs	r3, r2
 800e93e:	693a      	ldr	r2, [r7, #16]
 800e940:	4313      	orrs	r3, r2
 800e942:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800e94a:	f023 030c 	bic.w	r3, r3, #12
 800e94e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800e956:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800e95a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	68da      	ldr	r2, [r3, #12]
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	69db      	ldr	r3, [r3, #28]
 800e964:	021b      	lsls	r3, r3, #8
 800e966:	4313      	orrs	r3, r2
 800e968:	693a      	ldr	r2, [r7, #16]
 800e96a:	4313      	orrs	r3, r2
 800e96c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e96e:	683b      	ldr	r3, [r7, #0]
 800e970:	691b      	ldr	r3, [r3, #16]
 800e972:	011a      	lsls	r2, r3, #4
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	6a1b      	ldr	r3, [r3, #32]
 800e978:	031b      	lsls	r3, r3, #12
 800e97a:	4313      	orrs	r3, r2
 800e97c:	693a      	ldr	r2, [r7, #16]
 800e97e:	4313      	orrs	r3, r2
 800e980:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800e988:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800e990:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	685a      	ldr	r2, [r3, #4]
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	695b      	ldr	r3, [r3, #20]
 800e99a:	011b      	lsls	r3, r3, #4
 800e99c:	4313      	orrs	r3, r2
 800e99e:	68fa      	ldr	r2, [r7, #12]
 800e9a0:	4313      	orrs	r3, r2
 800e9a2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	697a      	ldr	r2, [r7, #20]
 800e9aa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	693a      	ldr	r2, [r7, #16]
 800e9b2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2201      	movs	r2, #1
 800e9c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	2201      	movs	r2, #1
 800e9c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	2201      	movs	r2, #1
 800e9e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e9ec:	2300      	movs	r3, #0
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3718      	adds	r7, #24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	0800a441 	.word	0x0800a441

0800e9fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ea0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ea14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ea1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ea24:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d110      	bne.n	800ea4e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ea2c:	7bfb      	ldrb	r3, [r7, #15]
 800ea2e:	2b01      	cmp	r3, #1
 800ea30:	d102      	bne.n	800ea38 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ea32:	7b7b      	ldrb	r3, [r7, #13]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d001      	beq.n	800ea3c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800ea38:	2301      	movs	r3, #1
 800ea3a:	e069      	b.n	800eb10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2202      	movs	r2, #2
 800ea40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2202      	movs	r2, #2
 800ea48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ea4c:	e031      	b.n	800eab2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	2b04      	cmp	r3, #4
 800ea52:	d110      	bne.n	800ea76 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ea54:	7bbb      	ldrb	r3, [r7, #14]
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d102      	bne.n	800ea60 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ea5a:	7b3b      	ldrb	r3, [r7, #12]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d001      	beq.n	800ea64 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800ea60:	2301      	movs	r3, #1
 800ea62:	e055      	b.n	800eb10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2202      	movs	r2, #2
 800ea68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2202      	movs	r2, #2
 800ea70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ea74:	e01d      	b.n	800eab2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ea76:	7bfb      	ldrb	r3, [r7, #15]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d108      	bne.n	800ea8e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ea7c:	7bbb      	ldrb	r3, [r7, #14]
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d105      	bne.n	800ea8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ea82:	7b7b      	ldrb	r3, [r7, #13]
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d102      	bne.n	800ea8e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ea88:	7b3b      	ldrb	r3, [r7, #12]
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d001      	beq.n	800ea92 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ea8e:	2301      	movs	r3, #1
 800ea90:	e03e      	b.n	800eb10 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2202      	movs	r2, #2
 800ea96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	2202      	movs	r2, #2
 800ea9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	2202      	movs	r2, #2
 800eaa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2202      	movs	r2, #2
 800eaae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d003      	beq.n	800eac0 <HAL_TIM_Encoder_Start+0xc4>
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	2b04      	cmp	r3, #4
 800eabc:	d008      	beq.n	800ead0 <HAL_TIM_Encoder_Start+0xd4>
 800eabe:	e00f      	b.n	800eae0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2201      	movs	r2, #1
 800eac6:	2100      	movs	r1, #0
 800eac8:	4618      	mov	r0, r3
 800eaca:	f001 f9fd 	bl	800fec8 <TIM_CCxChannelCmd>
      break;
 800eace:	e016      	b.n	800eafe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	2201      	movs	r2, #1
 800ead6:	2104      	movs	r1, #4
 800ead8:	4618      	mov	r0, r3
 800eada:	f001 f9f5 	bl	800fec8 <TIM_CCxChannelCmd>
      break;
 800eade:	e00e      	b.n	800eafe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2201      	movs	r2, #1
 800eae6:	2100      	movs	r1, #0
 800eae8:	4618      	mov	r0, r3
 800eaea:	f001 f9ed 	bl	800fec8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	2201      	movs	r2, #1
 800eaf4:	2104      	movs	r1, #4
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f001 f9e6 	bl	800fec8 <TIM_CCxChannelCmd>
      break;
 800eafc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	681a      	ldr	r2, [r3, #0]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	f042 0201 	orr.w	r2, r2, #1
 800eb0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800eb0e:	2300      	movs	r3, #0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	68db      	ldr	r3, [r3, #12]
 800eb26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	691b      	ldr	r3, [r3, #16]
 800eb2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	f003 0302 	and.w	r3, r3, #2
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d026      	beq.n	800eb88 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f003 0302 	and.w	r3, r3, #2
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d021      	beq.n	800eb88 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f06f 0202 	mvn.w	r2, #2
 800eb4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2201      	movs	r2, #1
 800eb52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	699b      	ldr	r3, [r3, #24]
 800eb5a:	f003 0303 	and.w	r3, r3, #3
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d005      	beq.n	800eb6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	4798      	blx	r3
 800eb6c:	e009      	b.n	800eb82 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2200      	movs	r2, #0
 800eb86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	f003 0304 	and.w	r3, r3, #4
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d026      	beq.n	800ebe0 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f003 0304 	and.w	r3, r3, #4
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d021      	beq.n	800ebe0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f06f 0204 	mvn.w	r2, #4
 800eba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2202      	movs	r2, #2
 800ebaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	699b      	ldr	r3, [r3, #24]
 800ebb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d005      	beq.n	800ebc6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	4798      	blx	r3
 800ebc4:	e009      	b.n	800ebda <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2200      	movs	r2, #0
 800ebde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	f003 0308 	and.w	r3, r3, #8
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d026      	beq.n	800ec38 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f003 0308 	and.w	r3, r3, #8
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d021      	beq.n	800ec38 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f06f 0208 	mvn.w	r2, #8
 800ebfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2204      	movs	r2, #4
 800ec02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	69db      	ldr	r3, [r3, #28]
 800ec0a:	f003 0303 	and.w	r3, r3, #3
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d005      	beq.n	800ec1e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	4798      	blx	r3
 800ec1c:	e009      	b.n	800ec32 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	f003 0310 	and.w	r3, r3, #16
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d026      	beq.n	800ec90 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f003 0310 	and.w	r3, r3, #16
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d021      	beq.n	800ec90 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f06f 0210 	mvn.w	r2, #16
 800ec54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2208      	movs	r2, #8
 800ec5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	69db      	ldr	r3, [r3, #28]
 800ec62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d005      	beq.n	800ec76 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	4798      	blx	r3
 800ec74:	e009      	b.n	800ec8a <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	f003 0301 	and.w	r3, r3, #1
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d00e      	beq.n	800ecb8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f003 0301 	and.w	r3, r3, #1
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d009      	beq.n	800ecb8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	f06f 0201 	mvn.w	r2, #1
 800ecac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d104      	bne.n	800eccc <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d00e      	beq.n	800ecea <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d009      	beq.n	800ecea <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ecde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800ece6:	6878      	ldr	r0, [r7, #4]
 800ece8:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d00e      	beq.n	800ed12 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d009      	beq.n	800ed12 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ed06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ed0e:	6878      	ldr	r0, [r7, #4]
 800ed10:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d00e      	beq.n	800ed3a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d009      	beq.n	800ed3a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ed2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ed3a:	68bb      	ldr	r3, [r7, #8]
 800ed3c:	f003 0320 	and.w	r3, r3, #32
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d00e      	beq.n	800ed62 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	f003 0320 	and.w	r3, r3, #32
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d009      	beq.n	800ed62 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f06f 0220 	mvn.w	r2, #32
 800ed56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d00e      	beq.n	800ed8a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d009      	beq.n	800ed8a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ed7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d00e      	beq.n	800edb2 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d009      	beq.n	800edb2 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800eda6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00e      	beq.n	800edda <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d009      	beq.n	800edda <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800edce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00e      	beq.n	800ee02 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800edea:	2b00      	cmp	r3, #0
 800edec:	d009      	beq.n	800ee02 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800edf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ee02:	bf00      	nop
 800ee04:	3710      	adds	r7, #16
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
	...

0800ee0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b086      	sub	sp, #24
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	60f8      	str	r0, [r7, #12]
 800ee14:	60b9      	str	r1, [r7, #8]
 800ee16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ee22:	2b01      	cmp	r3, #1
 800ee24:	d101      	bne.n	800ee2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ee26:	2302      	movs	r3, #2
 800ee28:	e0ff      	b.n	800f02a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2b14      	cmp	r3, #20
 800ee36:	f200 80f0 	bhi.w	800f01a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ee3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ee40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ee3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee40:	0800ee95 	.word	0x0800ee95
 800ee44:	0800f01b 	.word	0x0800f01b
 800ee48:	0800f01b 	.word	0x0800f01b
 800ee4c:	0800f01b 	.word	0x0800f01b
 800ee50:	0800eed5 	.word	0x0800eed5
 800ee54:	0800f01b 	.word	0x0800f01b
 800ee58:	0800f01b 	.word	0x0800f01b
 800ee5c:	0800f01b 	.word	0x0800f01b
 800ee60:	0800ef17 	.word	0x0800ef17
 800ee64:	0800f01b 	.word	0x0800f01b
 800ee68:	0800f01b 	.word	0x0800f01b
 800ee6c:	0800f01b 	.word	0x0800f01b
 800ee70:	0800ef57 	.word	0x0800ef57
 800ee74:	0800f01b 	.word	0x0800f01b
 800ee78:	0800f01b 	.word	0x0800f01b
 800ee7c:	0800f01b 	.word	0x0800f01b
 800ee80:	0800ef99 	.word	0x0800ef99
 800ee84:	0800f01b 	.word	0x0800f01b
 800ee88:	0800f01b 	.word	0x0800f01b
 800ee8c:	0800f01b 	.word	0x0800f01b
 800ee90:	0800efd9 	.word	0x0800efd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	68b9      	ldr	r1, [r7, #8]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f000 fc4e 	bl	800f73c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	699a      	ldr	r2, [r3, #24]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	f042 0208 	orr.w	r2, r2, #8
 800eeae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	699a      	ldr	r2, [r3, #24]
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	f022 0204 	bic.w	r2, r2, #4
 800eebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	6999      	ldr	r1, [r3, #24]
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	691a      	ldr	r2, [r3, #16]
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	430a      	orrs	r2, r1
 800eed0:	619a      	str	r2, [r3, #24]
      break;
 800eed2:	e0a5      	b.n	800f020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	68b9      	ldr	r1, [r7, #8]
 800eeda:	4618      	mov	r0, r3
 800eedc:	f000 fcc8 	bl	800f870 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	699a      	ldr	r2, [r3, #24]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eeee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	699a      	ldr	r2, [r3, #24]
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eefe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	6999      	ldr	r1, [r3, #24]
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	021a      	lsls	r2, r3, #8
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	430a      	orrs	r2, r1
 800ef12:	619a      	str	r2, [r3, #24]
      break;
 800ef14:	e084      	b.n	800f020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	68b9      	ldr	r1, [r7, #8]
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f000 fd3b 	bl	800f998 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	69da      	ldr	r2, [r3, #28]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f042 0208 	orr.w	r2, r2, #8
 800ef30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	69da      	ldr	r2, [r3, #28]
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	f022 0204 	bic.w	r2, r2, #4
 800ef40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	69d9      	ldr	r1, [r3, #28]
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	691a      	ldr	r2, [r3, #16]
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	430a      	orrs	r2, r1
 800ef52:	61da      	str	r2, [r3, #28]
      break;
 800ef54:	e064      	b.n	800f020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	68b9      	ldr	r1, [r7, #8]
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	f000 fdad 	bl	800fabc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	69da      	ldr	r2, [r3, #28]
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ef70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	69da      	ldr	r2, [r3, #28]
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ef80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	69d9      	ldr	r1, [r3, #28]
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	691b      	ldr	r3, [r3, #16]
 800ef8c:	021a      	lsls	r2, r3, #8
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	430a      	orrs	r2, r1
 800ef94:	61da      	str	r2, [r3, #28]
      break;
 800ef96:	e043      	b.n	800f020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	68b9      	ldr	r1, [r7, #8]
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f000 fe20 	bl	800fbe4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f042 0208 	orr.w	r2, r2, #8
 800efb2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f022 0204 	bic.w	r2, r2, #4
 800efc2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	691a      	ldr	r2, [r3, #16]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	430a      	orrs	r2, r1
 800efd4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800efd6:	e023      	b.n	800f020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	68b9      	ldr	r1, [r7, #8]
 800efde:	4618      	mov	r0, r3
 800efe0:	f000 fe6a 	bl	800fcb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eff2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f002:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f00a:	68bb      	ldr	r3, [r7, #8]
 800f00c:	691b      	ldr	r3, [r3, #16]
 800f00e:	021a      	lsls	r2, r3, #8
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	430a      	orrs	r2, r1
 800f016:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800f018:	e002      	b.n	800f020 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f01a:	2301      	movs	r3, #1
 800f01c:	75fb      	strb	r3, [r7, #23]
      break;
 800f01e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2200      	movs	r2, #0
 800f024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f028:	7dfb      	ldrb	r3, [r7, #23]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3718      	adds	r7, #24
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop

0800f034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b084      	sub	sp, #16
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f03e:	2300      	movs	r3, #0
 800f040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f048:	2b01      	cmp	r3, #1
 800f04a:	d101      	bne.n	800f050 <HAL_TIM_ConfigClockSource+0x1c>
 800f04c:	2302      	movs	r3, #2
 800f04e:	e0f6      	b.n	800f23e <HAL_TIM_ConfigClockSource+0x20a>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2201      	movs	r2, #1
 800f054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2202      	movs	r2, #2
 800f05c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	689b      	ldr	r3, [r3, #8]
 800f066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800f06e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f07a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	68ba      	ldr	r2, [r7, #8]
 800f082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a6f      	ldr	r2, [pc, #444]	@ (800f248 <HAL_TIM_ConfigClockSource+0x214>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	f000 80c1 	beq.w	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f090:	4a6d      	ldr	r2, [pc, #436]	@ (800f248 <HAL_TIM_ConfigClockSource+0x214>)
 800f092:	4293      	cmp	r3, r2
 800f094:	f200 80c6 	bhi.w	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f098:	4a6c      	ldr	r2, [pc, #432]	@ (800f24c <HAL_TIM_ConfigClockSource+0x218>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	f000 80b9 	beq.w	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f0a0:	4a6a      	ldr	r2, [pc, #424]	@ (800f24c <HAL_TIM_ConfigClockSource+0x218>)
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	f200 80be 	bhi.w	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f0a8:	4a69      	ldr	r2, [pc, #420]	@ (800f250 <HAL_TIM_ConfigClockSource+0x21c>)
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	f000 80b1 	beq.w	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f0b0:	4a67      	ldr	r2, [pc, #412]	@ (800f250 <HAL_TIM_ConfigClockSource+0x21c>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	f200 80b6 	bhi.w	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f0b8:	4a66      	ldr	r2, [pc, #408]	@ (800f254 <HAL_TIM_ConfigClockSource+0x220>)
 800f0ba:	4293      	cmp	r3, r2
 800f0bc:	f000 80a9 	beq.w	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f0c0:	4a64      	ldr	r2, [pc, #400]	@ (800f254 <HAL_TIM_ConfigClockSource+0x220>)
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	f200 80ae 	bhi.w	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f0c8:	4a63      	ldr	r2, [pc, #396]	@ (800f258 <HAL_TIM_ConfigClockSource+0x224>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	f000 80a1 	beq.w	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f0d0:	4a61      	ldr	r2, [pc, #388]	@ (800f258 <HAL_TIM_ConfigClockSource+0x224>)
 800f0d2:	4293      	cmp	r3, r2
 800f0d4:	f200 80a6 	bhi.w	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f0d8:	4a60      	ldr	r2, [pc, #384]	@ (800f25c <HAL_TIM_ConfigClockSource+0x228>)
 800f0da:	4293      	cmp	r3, r2
 800f0dc:	f000 8099 	beq.w	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f0e0:	4a5e      	ldr	r2, [pc, #376]	@ (800f25c <HAL_TIM_ConfigClockSource+0x228>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	f200 809e 	bhi.w	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f0e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f0ec:	f000 8091 	beq.w	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f0f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f0f4:	f200 8096 	bhi.w	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f0f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f0fc:	f000 8089 	beq.w	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f100:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f104:	f200 808e 	bhi.w	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f10c:	d03e      	beq.n	800f18c <HAL_TIM_ConfigClockSource+0x158>
 800f10e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f112:	f200 8087 	bhi.w	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f11a:	f000 8086 	beq.w	800f22a <HAL_TIM_ConfigClockSource+0x1f6>
 800f11e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f122:	d87f      	bhi.n	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f124:	2b70      	cmp	r3, #112	@ 0x70
 800f126:	d01a      	beq.n	800f15e <HAL_TIM_ConfigClockSource+0x12a>
 800f128:	2b70      	cmp	r3, #112	@ 0x70
 800f12a:	d87b      	bhi.n	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f12c:	2b60      	cmp	r3, #96	@ 0x60
 800f12e:	d050      	beq.n	800f1d2 <HAL_TIM_ConfigClockSource+0x19e>
 800f130:	2b60      	cmp	r3, #96	@ 0x60
 800f132:	d877      	bhi.n	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f134:	2b50      	cmp	r3, #80	@ 0x50
 800f136:	d03c      	beq.n	800f1b2 <HAL_TIM_ConfigClockSource+0x17e>
 800f138:	2b50      	cmp	r3, #80	@ 0x50
 800f13a:	d873      	bhi.n	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f13c:	2b40      	cmp	r3, #64	@ 0x40
 800f13e:	d058      	beq.n	800f1f2 <HAL_TIM_ConfigClockSource+0x1be>
 800f140:	2b40      	cmp	r3, #64	@ 0x40
 800f142:	d86f      	bhi.n	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f144:	2b30      	cmp	r3, #48	@ 0x30
 800f146:	d064      	beq.n	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f148:	2b30      	cmp	r3, #48	@ 0x30
 800f14a:	d86b      	bhi.n	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f14c:	2b20      	cmp	r3, #32
 800f14e:	d060      	beq.n	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f150:	2b20      	cmp	r3, #32
 800f152:	d867      	bhi.n	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
 800f154:	2b00      	cmp	r3, #0
 800f156:	d05c      	beq.n	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f158:	2b10      	cmp	r3, #16
 800f15a:	d05a      	beq.n	800f212 <HAL_TIM_ConfigClockSource+0x1de>
 800f15c:	e062      	b.n	800f224 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f16e:	f000 fe8b 	bl	800fe88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	689b      	ldr	r3, [r3, #8]
 800f178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	68ba      	ldr	r2, [r7, #8]
 800f188:	609a      	str	r2, [r3, #8]
      break;
 800f18a:	e04f      	b.n	800f22c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f19c:	f000 fe74 	bl	800fe88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	689a      	ldr	r2, [r3, #8]
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f1ae:	609a      	str	r2, [r3, #8]
      break;
 800f1b0:	e03c      	b.n	800f22c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1be:	461a      	mov	r2, r3
 800f1c0:	f000 fde6 	bl	800fd90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	2150      	movs	r1, #80	@ 0x50
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f000 fe3f 	bl	800fe4e <TIM_ITRx_SetConfig>
      break;
 800f1d0:	e02c      	b.n	800f22c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f1de:	461a      	mov	r2, r3
 800f1e0:	f000 fe05 	bl	800fdee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2160      	movs	r1, #96	@ 0x60
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 fe2f 	bl	800fe4e <TIM_ITRx_SetConfig>
      break;
 800f1f0:	e01c      	b.n	800f22c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f1fe:	461a      	mov	r2, r3
 800f200:	f000 fdc6 	bl	800fd90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2140      	movs	r1, #64	@ 0x40
 800f20a:	4618      	mov	r0, r3
 800f20c:	f000 fe1f 	bl	800fe4e <TIM_ITRx_SetConfig>
      break;
 800f210:	e00c      	b.n	800f22c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	4619      	mov	r1, r3
 800f21c:	4610      	mov	r0, r2
 800f21e:	f000 fe16 	bl	800fe4e <TIM_ITRx_SetConfig>
      break;
 800f222:	e003      	b.n	800f22c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800f224:	2301      	movs	r3, #1
 800f226:	73fb      	strb	r3, [r7, #15]
      break;
 800f228:	e000      	b.n	800f22c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800f22a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2201      	movs	r2, #1
 800f230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f23c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3710      	adds	r7, #16
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	00100070 	.word	0x00100070
 800f24c:	00100060 	.word	0x00100060
 800f250:	00100050 	.word	0x00100050
 800f254:	00100040 	.word	0x00100040
 800f258:	00100030 	.word	0x00100030
 800f25c:	00100020 	.word	0x00100020

0800f260 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800f268:	bf00      	nop
 800f26a:	370c      	adds	r7, #12
 800f26c:	46bd      	mov	sp, r7
 800f26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f272:	4770      	bx	lr

0800f274 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f274:	b480      	push	{r7}
 800f276:	b083      	sub	sp, #12
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f27c:	bf00      	nop
 800f27e:	370c      	adds	r7, #12
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f288:	b480      	push	{r7}
 800f28a:	b083      	sub	sp, #12
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f290:	bf00      	nop
 800f292:	370c      	adds	r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29a:	4770      	bx	lr

0800f29c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800f2a4:	bf00      	nop
 800f2a6:	370c      	adds	r7, #12
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b083      	sub	sp, #12
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f2b8:	bf00      	nop
 800f2ba:	370c      	adds	r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c2:	4770      	bx	lr

0800f2c4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800f2cc:	bf00      	nop
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f2e0:	bf00      	nop
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800f2f4:	bf00      	nop
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800f300:	b480      	push	{r7}
 800f302:	b083      	sub	sp, #12
 800f304:	af00      	add	r7, sp, #0
 800f306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800f308:	bf00      	nop
 800f30a:	370c      	adds	r7, #12
 800f30c:	46bd      	mov	sp, r7
 800f30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f312:	4770      	bx	lr

0800f314 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800f314:	b480      	push	{r7}
 800f316:	b087      	sub	sp, #28
 800f318:	af00      	add	r7, sp, #0
 800f31a:	60f8      	str	r0, [r7, #12]
 800f31c:	460b      	mov	r3, r1
 800f31e:	607a      	str	r2, [r7, #4]
 800f320:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800f322:	2300      	movs	r3, #0
 800f324:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d101      	bne.n	800f330 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800f32c:	2301      	movs	r3, #1
 800f32e:	e14a      	b.n	800f5c6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f336:	b2db      	uxtb	r3, r3
 800f338:	2b01      	cmp	r3, #1
 800f33a:	f040 80dd 	bne.w	800f4f8 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800f33e:	7afb      	ldrb	r3, [r7, #11]
 800f340:	2b1f      	cmp	r3, #31
 800f342:	f200 80d6 	bhi.w	800f4f2 <HAL_TIM_RegisterCallback+0x1de>
 800f346:	a201      	add	r2, pc, #4	@ (adr r2, 800f34c <HAL_TIM_RegisterCallback+0x38>)
 800f348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34c:	0800f3cd 	.word	0x0800f3cd
 800f350:	0800f3d5 	.word	0x0800f3d5
 800f354:	0800f3dd 	.word	0x0800f3dd
 800f358:	0800f3e5 	.word	0x0800f3e5
 800f35c:	0800f3ed 	.word	0x0800f3ed
 800f360:	0800f3f5 	.word	0x0800f3f5
 800f364:	0800f3fd 	.word	0x0800f3fd
 800f368:	0800f405 	.word	0x0800f405
 800f36c:	0800f40d 	.word	0x0800f40d
 800f370:	0800f415 	.word	0x0800f415
 800f374:	0800f41d 	.word	0x0800f41d
 800f378:	0800f425 	.word	0x0800f425
 800f37c:	0800f42d 	.word	0x0800f42d
 800f380:	0800f435 	.word	0x0800f435
 800f384:	0800f43f 	.word	0x0800f43f
 800f388:	0800f449 	.word	0x0800f449
 800f38c:	0800f453 	.word	0x0800f453
 800f390:	0800f45d 	.word	0x0800f45d
 800f394:	0800f467 	.word	0x0800f467
 800f398:	0800f471 	.word	0x0800f471
 800f39c:	0800f47b 	.word	0x0800f47b
 800f3a0:	0800f485 	.word	0x0800f485
 800f3a4:	0800f48f 	.word	0x0800f48f
 800f3a8:	0800f499 	.word	0x0800f499
 800f3ac:	0800f4a3 	.word	0x0800f4a3
 800f3b0:	0800f4ad 	.word	0x0800f4ad
 800f3b4:	0800f4b7 	.word	0x0800f4b7
 800f3b8:	0800f4c1 	.word	0x0800f4c1
 800f3bc:	0800f4cb 	.word	0x0800f4cb
 800f3c0:	0800f4d5 	.word	0x0800f4d5
 800f3c4:	0800f4df 	.word	0x0800f4df
 800f3c8:	0800f4e9 	.word	0x0800f4e9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f3d2:	e0f7      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	687a      	ldr	r2, [r7, #4]
 800f3d8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f3da:	e0f3      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	687a      	ldr	r2, [r7, #4]
 800f3e0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f3e2:	e0ef      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f3ea:	e0eb      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	687a      	ldr	r2, [r7, #4]
 800f3f0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f3f2:	e0e7      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f3fa:	e0e3      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f402:	e0df      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	687a      	ldr	r2, [r7, #4]
 800f408:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f40a:	e0db      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f412:	e0d7      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	687a      	ldr	r2, [r7, #4]
 800f418:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f41a:	e0d3      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f422:	e0cf      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	687a      	ldr	r2, [r7, #4]
 800f428:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f42a:	e0cb      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	687a      	ldr	r2, [r7, #4]
 800f430:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f432:	e0c7      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f43c:	e0c2      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800f446:	e0bd      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	687a      	ldr	r2, [r7, #4]
 800f44c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800f450:	e0b8      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	687a      	ldr	r2, [r7, #4]
 800f456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800f45a:	e0b3      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800f464:	e0ae      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800f46e:	e0a9      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	687a      	ldr	r2, [r7, #4]
 800f474:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800f478:	e0a4      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	687a      	ldr	r2, [r7, #4]
 800f47e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800f482:	e09f      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800f48c:	e09a      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	687a      	ldr	r2, [r7, #4]
 800f492:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800f496:	e095      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	687a      	ldr	r2, [r7, #4]
 800f49c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800f4a0:	e090      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800f4aa:	e08b      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	687a      	ldr	r2, [r7, #4]
 800f4b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800f4b4:	e086      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	687a      	ldr	r2, [r7, #4]
 800f4ba:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800f4be:	e081      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800f4c8:	e07c      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800f4d2:	e077      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800f4dc:	e072      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	687a      	ldr	r2, [r7, #4]
 800f4e2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800f4e6:	e06d      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	687a      	ldr	r2, [r7, #4]
 800f4ec:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800f4f0:	e068      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f4f2:	2301      	movs	r3, #1
 800f4f4:	75fb      	strb	r3, [r7, #23]
        break;
 800f4f6:	e065      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f4fe:	b2db      	uxtb	r3, r3
 800f500:	2b00      	cmp	r3, #0
 800f502:	d15d      	bne.n	800f5c0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800f504:	7afb      	ldrb	r3, [r7, #11]
 800f506:	2b0d      	cmp	r3, #13
 800f508:	d857      	bhi.n	800f5ba <HAL_TIM_RegisterCallback+0x2a6>
 800f50a:	a201      	add	r2, pc, #4	@ (adr r2, 800f510 <HAL_TIM_RegisterCallback+0x1fc>)
 800f50c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f510:	0800f549 	.word	0x0800f549
 800f514:	0800f551 	.word	0x0800f551
 800f518:	0800f559 	.word	0x0800f559
 800f51c:	0800f561 	.word	0x0800f561
 800f520:	0800f569 	.word	0x0800f569
 800f524:	0800f571 	.word	0x0800f571
 800f528:	0800f579 	.word	0x0800f579
 800f52c:	0800f581 	.word	0x0800f581
 800f530:	0800f589 	.word	0x0800f589
 800f534:	0800f591 	.word	0x0800f591
 800f538:	0800f599 	.word	0x0800f599
 800f53c:	0800f5a1 	.word	0x0800f5a1
 800f540:	0800f5a9 	.word	0x0800f5a9
 800f544:	0800f5b1 	.word	0x0800f5b1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800f54e:	e039      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800f556:	e035      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800f55e:	e031      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	687a      	ldr	r2, [r7, #4]
 800f564:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800f566:	e02d      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	687a      	ldr	r2, [r7, #4]
 800f56c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800f56e:	e029      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	687a      	ldr	r2, [r7, #4]
 800f574:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800f576:	e025      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800f57e:	e021      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	687a      	ldr	r2, [r7, #4]
 800f584:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800f586:	e01d      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800f58e:	e019      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	687a      	ldr	r2, [r7, #4]
 800f594:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800f596:	e015      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800f59e:	e011      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	687a      	ldr	r2, [r7, #4]
 800f5a4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800f5a6:	e00d      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	687a      	ldr	r2, [r7, #4]
 800f5ac:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800f5ae:	e009      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800f5b8:	e004      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800f5ba:	2301      	movs	r3, #1
 800f5bc:	75fb      	strb	r3, [r7, #23]
        break;
 800f5be:	e001      	b.n	800f5c4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800f5c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	371c      	adds	r7, #28
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d0:	4770      	bx	lr
 800f5d2:	bf00      	nop

0800f5d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4a4c      	ldr	r2, [pc, #304]	@ (800f718 <TIM_Base_SetConfig+0x144>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d017      	beq.n	800f61c <TIM_Base_SetConfig+0x48>
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f5f2:	d013      	beq.n	800f61c <TIM_Base_SetConfig+0x48>
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	4a49      	ldr	r2, [pc, #292]	@ (800f71c <TIM_Base_SetConfig+0x148>)
 800f5f8:	4293      	cmp	r3, r2
 800f5fa:	d00f      	beq.n	800f61c <TIM_Base_SetConfig+0x48>
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	4a48      	ldr	r2, [pc, #288]	@ (800f720 <TIM_Base_SetConfig+0x14c>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d00b      	beq.n	800f61c <TIM_Base_SetConfig+0x48>
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	4a47      	ldr	r2, [pc, #284]	@ (800f724 <TIM_Base_SetConfig+0x150>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	d007      	beq.n	800f61c <TIM_Base_SetConfig+0x48>
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	4a46      	ldr	r2, [pc, #280]	@ (800f728 <TIM_Base_SetConfig+0x154>)
 800f610:	4293      	cmp	r3, r2
 800f612:	d003      	beq.n	800f61c <TIM_Base_SetConfig+0x48>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	4a45      	ldr	r2, [pc, #276]	@ (800f72c <TIM_Base_SetConfig+0x158>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d108      	bne.n	800f62e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	68fa      	ldr	r2, [r7, #12]
 800f62a:	4313      	orrs	r3, r2
 800f62c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4a39      	ldr	r2, [pc, #228]	@ (800f718 <TIM_Base_SetConfig+0x144>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d023      	beq.n	800f67e <TIM_Base_SetConfig+0xaa>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f63c:	d01f      	beq.n	800f67e <TIM_Base_SetConfig+0xaa>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4a36      	ldr	r2, [pc, #216]	@ (800f71c <TIM_Base_SetConfig+0x148>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d01b      	beq.n	800f67e <TIM_Base_SetConfig+0xaa>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	4a35      	ldr	r2, [pc, #212]	@ (800f720 <TIM_Base_SetConfig+0x14c>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d017      	beq.n	800f67e <TIM_Base_SetConfig+0xaa>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	4a34      	ldr	r2, [pc, #208]	@ (800f724 <TIM_Base_SetConfig+0x150>)
 800f652:	4293      	cmp	r3, r2
 800f654:	d013      	beq.n	800f67e <TIM_Base_SetConfig+0xaa>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4a33      	ldr	r2, [pc, #204]	@ (800f728 <TIM_Base_SetConfig+0x154>)
 800f65a:	4293      	cmp	r3, r2
 800f65c:	d00f      	beq.n	800f67e <TIM_Base_SetConfig+0xaa>
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	4a33      	ldr	r2, [pc, #204]	@ (800f730 <TIM_Base_SetConfig+0x15c>)
 800f662:	4293      	cmp	r3, r2
 800f664:	d00b      	beq.n	800f67e <TIM_Base_SetConfig+0xaa>
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	4a32      	ldr	r2, [pc, #200]	@ (800f734 <TIM_Base_SetConfig+0x160>)
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d007      	beq.n	800f67e <TIM_Base_SetConfig+0xaa>
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	4a31      	ldr	r2, [pc, #196]	@ (800f738 <TIM_Base_SetConfig+0x164>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d003      	beq.n	800f67e <TIM_Base_SetConfig+0xaa>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	4a2c      	ldr	r2, [pc, #176]	@ (800f72c <TIM_Base_SetConfig+0x158>)
 800f67a:	4293      	cmp	r3, r2
 800f67c:	d108      	bne.n	800f690 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f686:	683b      	ldr	r3, [r7, #0]
 800f688:	68db      	ldr	r3, [r3, #12]
 800f68a:	68fa      	ldr	r2, [r7, #12]
 800f68c:	4313      	orrs	r3, r2
 800f68e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	695b      	ldr	r3, [r3, #20]
 800f69a:	4313      	orrs	r3, r2
 800f69c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	689a      	ldr	r2, [r3, #8]
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4a18      	ldr	r2, [pc, #96]	@ (800f718 <TIM_Base_SetConfig+0x144>)
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d013      	beq.n	800f6e4 <TIM_Base_SetConfig+0x110>
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	4a1a      	ldr	r2, [pc, #104]	@ (800f728 <TIM_Base_SetConfig+0x154>)
 800f6c0:	4293      	cmp	r3, r2
 800f6c2:	d00f      	beq.n	800f6e4 <TIM_Base_SetConfig+0x110>
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	4a1a      	ldr	r2, [pc, #104]	@ (800f730 <TIM_Base_SetConfig+0x15c>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d00b      	beq.n	800f6e4 <TIM_Base_SetConfig+0x110>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4a19      	ldr	r2, [pc, #100]	@ (800f734 <TIM_Base_SetConfig+0x160>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d007      	beq.n	800f6e4 <TIM_Base_SetConfig+0x110>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4a18      	ldr	r2, [pc, #96]	@ (800f738 <TIM_Base_SetConfig+0x164>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d003      	beq.n	800f6e4 <TIM_Base_SetConfig+0x110>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4a13      	ldr	r2, [pc, #76]	@ (800f72c <TIM_Base_SetConfig+0x158>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d103      	bne.n	800f6ec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	691a      	ldr	r2, [r3, #16]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	2201      	movs	r2, #1
 800f6f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	691b      	ldr	r3, [r3, #16]
 800f6f6:	f003 0301 	and.w	r3, r3, #1
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d105      	bne.n	800f70a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	691b      	ldr	r3, [r3, #16]
 800f702:	f023 0201 	bic.w	r2, r3, #1
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	611a      	str	r2, [r3, #16]
  }
}
 800f70a:	bf00      	nop
 800f70c:	3714      	adds	r7, #20
 800f70e:	46bd      	mov	sp, r7
 800f710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f714:	4770      	bx	lr
 800f716:	bf00      	nop
 800f718:	40012c00 	.word	0x40012c00
 800f71c:	40000400 	.word	0x40000400
 800f720:	40000800 	.word	0x40000800
 800f724:	40000c00 	.word	0x40000c00
 800f728:	40013400 	.word	0x40013400
 800f72c:	40015000 	.word	0x40015000
 800f730:	40014000 	.word	0x40014000
 800f734:	40014400 	.word	0x40014400
 800f738:	40014800 	.word	0x40014800

0800f73c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f73c:	b480      	push	{r7}
 800f73e:	b087      	sub	sp, #28
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a1b      	ldr	r3, [r3, #32]
 800f74a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	6a1b      	ldr	r3, [r3, #32]
 800f750:	f023 0201 	bic.w	r2, r3, #1
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	685b      	ldr	r3, [r3, #4]
 800f75c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	699b      	ldr	r3, [r3, #24]
 800f762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f76a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f76e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	f023 0303 	bic.w	r3, r3, #3
 800f776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	4313      	orrs	r3, r2
 800f780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	f023 0302 	bic.w	r3, r3, #2
 800f788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	689b      	ldr	r3, [r3, #8]
 800f78e:	697a      	ldr	r2, [r7, #20]
 800f790:	4313      	orrs	r3, r2
 800f792:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	4a30      	ldr	r2, [pc, #192]	@ (800f858 <TIM_OC1_SetConfig+0x11c>)
 800f798:	4293      	cmp	r3, r2
 800f79a:	d013      	beq.n	800f7c4 <TIM_OC1_SetConfig+0x88>
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	4a2f      	ldr	r2, [pc, #188]	@ (800f85c <TIM_OC1_SetConfig+0x120>)
 800f7a0:	4293      	cmp	r3, r2
 800f7a2:	d00f      	beq.n	800f7c4 <TIM_OC1_SetConfig+0x88>
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a2e      	ldr	r2, [pc, #184]	@ (800f860 <TIM_OC1_SetConfig+0x124>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d00b      	beq.n	800f7c4 <TIM_OC1_SetConfig+0x88>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	4a2d      	ldr	r2, [pc, #180]	@ (800f864 <TIM_OC1_SetConfig+0x128>)
 800f7b0:	4293      	cmp	r3, r2
 800f7b2:	d007      	beq.n	800f7c4 <TIM_OC1_SetConfig+0x88>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a2c      	ldr	r2, [pc, #176]	@ (800f868 <TIM_OC1_SetConfig+0x12c>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d003      	beq.n	800f7c4 <TIM_OC1_SetConfig+0x88>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a2b      	ldr	r2, [pc, #172]	@ (800f86c <TIM_OC1_SetConfig+0x130>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d10c      	bne.n	800f7de <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f023 0308 	bic.w	r3, r3, #8
 800f7ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	697a      	ldr	r2, [r7, #20]
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	f023 0304 	bic.w	r3, r3, #4
 800f7dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800f858 <TIM_OC1_SetConfig+0x11c>)
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d013      	beq.n	800f80e <TIM_OC1_SetConfig+0xd2>
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4a1c      	ldr	r2, [pc, #112]	@ (800f85c <TIM_OC1_SetConfig+0x120>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d00f      	beq.n	800f80e <TIM_OC1_SetConfig+0xd2>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	4a1b      	ldr	r2, [pc, #108]	@ (800f860 <TIM_OC1_SetConfig+0x124>)
 800f7f2:	4293      	cmp	r3, r2
 800f7f4:	d00b      	beq.n	800f80e <TIM_OC1_SetConfig+0xd2>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4a1a      	ldr	r2, [pc, #104]	@ (800f864 <TIM_OC1_SetConfig+0x128>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d007      	beq.n	800f80e <TIM_OC1_SetConfig+0xd2>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a19      	ldr	r2, [pc, #100]	@ (800f868 <TIM_OC1_SetConfig+0x12c>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d003      	beq.n	800f80e <TIM_OC1_SetConfig+0xd2>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a18      	ldr	r2, [pc, #96]	@ (800f86c <TIM_OC1_SetConfig+0x130>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d111      	bne.n	800f832 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f81c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	695b      	ldr	r3, [r3, #20]
 800f822:	693a      	ldr	r2, [r7, #16]
 800f824:	4313      	orrs	r3, r2
 800f826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f828:	683b      	ldr	r3, [r7, #0]
 800f82a:	699b      	ldr	r3, [r3, #24]
 800f82c:	693a      	ldr	r2, [r7, #16]
 800f82e:	4313      	orrs	r3, r2
 800f830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	693a      	ldr	r2, [r7, #16]
 800f836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	68fa      	ldr	r2, [r7, #12]
 800f83c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	685a      	ldr	r2, [r3, #4]
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	697a      	ldr	r2, [r7, #20]
 800f84a:	621a      	str	r2, [r3, #32]
}
 800f84c:	bf00      	nop
 800f84e:	371c      	adds	r7, #28
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr
 800f858:	40012c00 	.word	0x40012c00
 800f85c:	40013400 	.word	0x40013400
 800f860:	40014000 	.word	0x40014000
 800f864:	40014400 	.word	0x40014400
 800f868:	40014800 	.word	0x40014800
 800f86c:	40015000 	.word	0x40015000

0800f870 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f870:	b480      	push	{r7}
 800f872:	b087      	sub	sp, #28
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
 800f878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6a1b      	ldr	r3, [r3, #32]
 800f87e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	6a1b      	ldr	r3, [r3, #32]
 800f884:	f023 0210 	bic.w	r2, r3, #16
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	699b      	ldr	r3, [r3, #24]
 800f896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800f89e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f8a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f8aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	021b      	lsls	r3, r3, #8
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	f023 0320 	bic.w	r3, r3, #32
 800f8be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	689b      	ldr	r3, [r3, #8]
 800f8c4:	011b      	lsls	r3, r3, #4
 800f8c6:	697a      	ldr	r2, [r7, #20]
 800f8c8:	4313      	orrs	r3, r2
 800f8ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4a2c      	ldr	r2, [pc, #176]	@ (800f980 <TIM_OC2_SetConfig+0x110>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d007      	beq.n	800f8e4 <TIM_OC2_SetConfig+0x74>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	4a2b      	ldr	r2, [pc, #172]	@ (800f984 <TIM_OC2_SetConfig+0x114>)
 800f8d8:	4293      	cmp	r3, r2
 800f8da:	d003      	beq.n	800f8e4 <TIM_OC2_SetConfig+0x74>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	4a2a      	ldr	r2, [pc, #168]	@ (800f988 <TIM_OC2_SetConfig+0x118>)
 800f8e0:	4293      	cmp	r3, r2
 800f8e2:	d10d      	bne.n	800f900 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f8ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	68db      	ldr	r3, [r3, #12]
 800f8f0:	011b      	lsls	r3, r3, #4
 800f8f2:	697a      	ldr	r2, [r7, #20]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f8f8:	697b      	ldr	r3, [r7, #20]
 800f8fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f8fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	4a1f      	ldr	r2, [pc, #124]	@ (800f980 <TIM_OC2_SetConfig+0x110>)
 800f904:	4293      	cmp	r3, r2
 800f906:	d013      	beq.n	800f930 <TIM_OC2_SetConfig+0xc0>
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4a1e      	ldr	r2, [pc, #120]	@ (800f984 <TIM_OC2_SetConfig+0x114>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d00f      	beq.n	800f930 <TIM_OC2_SetConfig+0xc0>
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	4a1e      	ldr	r2, [pc, #120]	@ (800f98c <TIM_OC2_SetConfig+0x11c>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d00b      	beq.n	800f930 <TIM_OC2_SetConfig+0xc0>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	4a1d      	ldr	r2, [pc, #116]	@ (800f990 <TIM_OC2_SetConfig+0x120>)
 800f91c:	4293      	cmp	r3, r2
 800f91e:	d007      	beq.n	800f930 <TIM_OC2_SetConfig+0xc0>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	4a1c      	ldr	r2, [pc, #112]	@ (800f994 <TIM_OC2_SetConfig+0x124>)
 800f924:	4293      	cmp	r3, r2
 800f926:	d003      	beq.n	800f930 <TIM_OC2_SetConfig+0xc0>
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4a17      	ldr	r2, [pc, #92]	@ (800f988 <TIM_OC2_SetConfig+0x118>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d113      	bne.n	800f958 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f93e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	695b      	ldr	r3, [r3, #20]
 800f944:	009b      	lsls	r3, r3, #2
 800f946:	693a      	ldr	r2, [r7, #16]
 800f948:	4313      	orrs	r3, r2
 800f94a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	699b      	ldr	r3, [r3, #24]
 800f950:	009b      	lsls	r3, r3, #2
 800f952:	693a      	ldr	r2, [r7, #16]
 800f954:	4313      	orrs	r3, r2
 800f956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	693a      	ldr	r2, [r7, #16]
 800f95c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	68fa      	ldr	r2, [r7, #12]
 800f962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f964:	683b      	ldr	r3, [r7, #0]
 800f966:	685a      	ldr	r2, [r3, #4]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	697a      	ldr	r2, [r7, #20]
 800f970:	621a      	str	r2, [r3, #32]
}
 800f972:	bf00      	nop
 800f974:	371c      	adds	r7, #28
 800f976:	46bd      	mov	sp, r7
 800f978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97c:	4770      	bx	lr
 800f97e:	bf00      	nop
 800f980:	40012c00 	.word	0x40012c00
 800f984:	40013400 	.word	0x40013400
 800f988:	40015000 	.word	0x40015000
 800f98c:	40014000 	.word	0x40014000
 800f990:	40014400 	.word	0x40014400
 800f994:	40014800 	.word	0x40014800

0800f998 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f998:	b480      	push	{r7}
 800f99a:	b087      	sub	sp, #28
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6a1b      	ldr	r3, [r3, #32]
 800f9a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6a1b      	ldr	r3, [r3, #32]
 800f9ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	685b      	ldr	r3, [r3, #4]
 800f9b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	69db      	ldr	r3, [r3, #28]
 800f9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f9c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f9ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	f023 0303 	bic.w	r3, r3, #3
 800f9d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f9e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	021b      	lsls	r3, r3, #8
 800f9ec:	697a      	ldr	r2, [r7, #20]
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	4a2b      	ldr	r2, [pc, #172]	@ (800faa4 <TIM_OC3_SetConfig+0x10c>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d007      	beq.n	800fa0a <TIM_OC3_SetConfig+0x72>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4a2a      	ldr	r2, [pc, #168]	@ (800faa8 <TIM_OC3_SetConfig+0x110>)
 800f9fe:	4293      	cmp	r3, r2
 800fa00:	d003      	beq.n	800fa0a <TIM_OC3_SetConfig+0x72>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4a29      	ldr	r2, [pc, #164]	@ (800faac <TIM_OC3_SetConfig+0x114>)
 800fa06:	4293      	cmp	r3, r2
 800fa08:	d10d      	bne.n	800fa26 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800fa10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	021b      	lsls	r3, r3, #8
 800fa18:	697a      	ldr	r2, [r7, #20]
 800fa1a:	4313      	orrs	r3, r2
 800fa1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800fa24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4a1e      	ldr	r2, [pc, #120]	@ (800faa4 <TIM_OC3_SetConfig+0x10c>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d013      	beq.n	800fa56 <TIM_OC3_SetConfig+0xbe>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4a1d      	ldr	r2, [pc, #116]	@ (800faa8 <TIM_OC3_SetConfig+0x110>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d00f      	beq.n	800fa56 <TIM_OC3_SetConfig+0xbe>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	4a1d      	ldr	r2, [pc, #116]	@ (800fab0 <TIM_OC3_SetConfig+0x118>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d00b      	beq.n	800fa56 <TIM_OC3_SetConfig+0xbe>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4a1c      	ldr	r2, [pc, #112]	@ (800fab4 <TIM_OC3_SetConfig+0x11c>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d007      	beq.n	800fa56 <TIM_OC3_SetConfig+0xbe>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4a1b      	ldr	r2, [pc, #108]	@ (800fab8 <TIM_OC3_SetConfig+0x120>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d003      	beq.n	800fa56 <TIM_OC3_SetConfig+0xbe>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4a16      	ldr	r2, [pc, #88]	@ (800faac <TIM_OC3_SetConfig+0x114>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d113      	bne.n	800fa7e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fa5e:	693b      	ldr	r3, [r7, #16]
 800fa60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fa64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	695b      	ldr	r3, [r3, #20]
 800fa6a:	011b      	lsls	r3, r3, #4
 800fa6c:	693a      	ldr	r2, [r7, #16]
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	699b      	ldr	r3, [r3, #24]
 800fa76:	011b      	lsls	r3, r3, #4
 800fa78:	693a      	ldr	r2, [r7, #16]
 800fa7a:	4313      	orrs	r3, r2
 800fa7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	693a      	ldr	r2, [r7, #16]
 800fa82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	68fa      	ldr	r2, [r7, #12]
 800fa88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	685a      	ldr	r2, [r3, #4]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	697a      	ldr	r2, [r7, #20]
 800fa96:	621a      	str	r2, [r3, #32]
}
 800fa98:	bf00      	nop
 800fa9a:	371c      	adds	r7, #28
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr
 800faa4:	40012c00 	.word	0x40012c00
 800faa8:	40013400 	.word	0x40013400
 800faac:	40015000 	.word	0x40015000
 800fab0:	40014000 	.word	0x40014000
 800fab4:	40014400 	.word	0x40014400
 800fab8:	40014800 	.word	0x40014800

0800fabc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b087      	sub	sp, #28
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6a1b      	ldr	r3, [r3, #32]
 800faca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6a1b      	ldr	r3, [r3, #32]
 800fad0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	685b      	ldr	r3, [r3, #4]
 800fadc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	69db      	ldr	r3, [r3, #28]
 800fae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800faea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800faee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800faf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	021b      	lsls	r3, r3, #8
 800fafe:	68fa      	ldr	r2, [r7, #12]
 800fb00:	4313      	orrs	r3, r2
 800fb02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800fb0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	689b      	ldr	r3, [r3, #8]
 800fb10:	031b      	lsls	r3, r3, #12
 800fb12:	697a      	ldr	r2, [r7, #20]
 800fb14:	4313      	orrs	r3, r2
 800fb16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	4a2c      	ldr	r2, [pc, #176]	@ (800fbcc <TIM_OC4_SetConfig+0x110>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d007      	beq.n	800fb30 <TIM_OC4_SetConfig+0x74>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	4a2b      	ldr	r2, [pc, #172]	@ (800fbd0 <TIM_OC4_SetConfig+0x114>)
 800fb24:	4293      	cmp	r3, r2
 800fb26:	d003      	beq.n	800fb30 <TIM_OC4_SetConfig+0x74>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	4a2a      	ldr	r2, [pc, #168]	@ (800fbd4 <TIM_OC4_SetConfig+0x118>)
 800fb2c:	4293      	cmp	r3, r2
 800fb2e:	d10d      	bne.n	800fb4c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800fb30:	697b      	ldr	r3, [r7, #20]
 800fb32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fb36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	031b      	lsls	r3, r3, #12
 800fb3e:	697a      	ldr	r2, [r7, #20]
 800fb40:	4313      	orrs	r3, r2
 800fb42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fb4a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	4a1f      	ldr	r2, [pc, #124]	@ (800fbcc <TIM_OC4_SetConfig+0x110>)
 800fb50:	4293      	cmp	r3, r2
 800fb52:	d013      	beq.n	800fb7c <TIM_OC4_SetConfig+0xc0>
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	4a1e      	ldr	r2, [pc, #120]	@ (800fbd0 <TIM_OC4_SetConfig+0x114>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d00f      	beq.n	800fb7c <TIM_OC4_SetConfig+0xc0>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4a1e      	ldr	r2, [pc, #120]	@ (800fbd8 <TIM_OC4_SetConfig+0x11c>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d00b      	beq.n	800fb7c <TIM_OC4_SetConfig+0xc0>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	4a1d      	ldr	r2, [pc, #116]	@ (800fbdc <TIM_OC4_SetConfig+0x120>)
 800fb68:	4293      	cmp	r3, r2
 800fb6a:	d007      	beq.n	800fb7c <TIM_OC4_SetConfig+0xc0>
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	4a1c      	ldr	r2, [pc, #112]	@ (800fbe0 <TIM_OC4_SetConfig+0x124>)
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d003      	beq.n	800fb7c <TIM_OC4_SetConfig+0xc0>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	4a17      	ldr	r2, [pc, #92]	@ (800fbd4 <TIM_OC4_SetConfig+0x118>)
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d113      	bne.n	800fba4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fb7c:	693b      	ldr	r3, [r7, #16]
 800fb7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fb82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800fb8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	695b      	ldr	r3, [r3, #20]
 800fb90:	019b      	lsls	r3, r3, #6
 800fb92:	693a      	ldr	r2, [r7, #16]
 800fb94:	4313      	orrs	r3, r2
 800fb96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	699b      	ldr	r3, [r3, #24]
 800fb9c:	019b      	lsls	r3, r3, #6
 800fb9e:	693a      	ldr	r2, [r7, #16]
 800fba0:	4313      	orrs	r3, r2
 800fba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	693a      	ldr	r2, [r7, #16]
 800fba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	68fa      	ldr	r2, [r7, #12]
 800fbae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	685a      	ldr	r2, [r3, #4]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	697a      	ldr	r2, [r7, #20]
 800fbbc:	621a      	str	r2, [r3, #32]
}
 800fbbe:	bf00      	nop
 800fbc0:	371c      	adds	r7, #28
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop
 800fbcc:	40012c00 	.word	0x40012c00
 800fbd0:	40013400 	.word	0x40013400
 800fbd4:	40015000 	.word	0x40015000
 800fbd8:	40014000 	.word	0x40014000
 800fbdc:	40014400 	.word	0x40014400
 800fbe0:	40014800 	.word	0x40014800

0800fbe4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b087      	sub	sp, #28
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	6a1b      	ldr	r3, [r3, #32]
 800fbf2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6a1b      	ldr	r3, [r3, #32]
 800fbf8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fc12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	68fa      	ldr	r2, [r7, #12]
 800fc1e:	4313      	orrs	r3, r2
 800fc20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800fc22:	693b      	ldr	r3, [r7, #16]
 800fc24:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800fc28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	689b      	ldr	r3, [r3, #8]
 800fc2e:	041b      	lsls	r3, r3, #16
 800fc30:	693a      	ldr	r2, [r7, #16]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	4a19      	ldr	r2, [pc, #100]	@ (800fca0 <TIM_OC5_SetConfig+0xbc>)
 800fc3a:	4293      	cmp	r3, r2
 800fc3c:	d013      	beq.n	800fc66 <TIM_OC5_SetConfig+0x82>
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	4a18      	ldr	r2, [pc, #96]	@ (800fca4 <TIM_OC5_SetConfig+0xc0>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d00f      	beq.n	800fc66 <TIM_OC5_SetConfig+0x82>
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	4a17      	ldr	r2, [pc, #92]	@ (800fca8 <TIM_OC5_SetConfig+0xc4>)
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d00b      	beq.n	800fc66 <TIM_OC5_SetConfig+0x82>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	4a16      	ldr	r2, [pc, #88]	@ (800fcac <TIM_OC5_SetConfig+0xc8>)
 800fc52:	4293      	cmp	r3, r2
 800fc54:	d007      	beq.n	800fc66 <TIM_OC5_SetConfig+0x82>
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	4a15      	ldr	r2, [pc, #84]	@ (800fcb0 <TIM_OC5_SetConfig+0xcc>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d003      	beq.n	800fc66 <TIM_OC5_SetConfig+0x82>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	4a14      	ldr	r2, [pc, #80]	@ (800fcb4 <TIM_OC5_SetConfig+0xd0>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d109      	bne.n	800fc7a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800fc6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800fc6e:	683b      	ldr	r3, [r7, #0]
 800fc70:	695b      	ldr	r3, [r3, #20]
 800fc72:	021b      	lsls	r3, r3, #8
 800fc74:	697a      	ldr	r2, [r7, #20]
 800fc76:	4313      	orrs	r3, r2
 800fc78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	697a      	ldr	r2, [r7, #20]
 800fc7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	68fa      	ldr	r2, [r7, #12]
 800fc84:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	685a      	ldr	r2, [r3, #4]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	693a      	ldr	r2, [r7, #16]
 800fc92:	621a      	str	r2, [r3, #32]
}
 800fc94:	bf00      	nop
 800fc96:	371c      	adds	r7, #28
 800fc98:	46bd      	mov	sp, r7
 800fc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9e:	4770      	bx	lr
 800fca0:	40012c00 	.word	0x40012c00
 800fca4:	40013400 	.word	0x40013400
 800fca8:	40014000 	.word	0x40014000
 800fcac:	40014400 	.word	0x40014400
 800fcb0:	40014800 	.word	0x40014800
 800fcb4:	40015000 	.word	0x40015000

0800fcb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b087      	sub	sp, #28
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6a1b      	ldr	r3, [r3, #32]
 800fcc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6a1b      	ldr	r3, [r3, #32]
 800fccc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fcde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fce6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fcea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	021b      	lsls	r3, r3, #8
 800fcf2:	68fa      	ldr	r2, [r7, #12]
 800fcf4:	4313      	orrs	r3, r2
 800fcf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fcf8:	693b      	ldr	r3, [r7, #16]
 800fcfa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800fcfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	689b      	ldr	r3, [r3, #8]
 800fd04:	051b      	lsls	r3, r3, #20
 800fd06:	693a      	ldr	r2, [r7, #16]
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	4a1a      	ldr	r2, [pc, #104]	@ (800fd78 <TIM_OC6_SetConfig+0xc0>)
 800fd10:	4293      	cmp	r3, r2
 800fd12:	d013      	beq.n	800fd3c <TIM_OC6_SetConfig+0x84>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	4a19      	ldr	r2, [pc, #100]	@ (800fd7c <TIM_OC6_SetConfig+0xc4>)
 800fd18:	4293      	cmp	r3, r2
 800fd1a:	d00f      	beq.n	800fd3c <TIM_OC6_SetConfig+0x84>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	4a18      	ldr	r2, [pc, #96]	@ (800fd80 <TIM_OC6_SetConfig+0xc8>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d00b      	beq.n	800fd3c <TIM_OC6_SetConfig+0x84>
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	4a17      	ldr	r2, [pc, #92]	@ (800fd84 <TIM_OC6_SetConfig+0xcc>)
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d007      	beq.n	800fd3c <TIM_OC6_SetConfig+0x84>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	4a16      	ldr	r2, [pc, #88]	@ (800fd88 <TIM_OC6_SetConfig+0xd0>)
 800fd30:	4293      	cmp	r3, r2
 800fd32:	d003      	beq.n	800fd3c <TIM_OC6_SetConfig+0x84>
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	4a15      	ldr	r2, [pc, #84]	@ (800fd8c <TIM_OC6_SetConfig+0xd4>)
 800fd38:	4293      	cmp	r3, r2
 800fd3a:	d109      	bne.n	800fd50 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fd3c:	697b      	ldr	r3, [r7, #20]
 800fd3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fd42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	695b      	ldr	r3, [r3, #20]
 800fd48:	029b      	lsls	r3, r3, #10
 800fd4a:	697a      	ldr	r2, [r7, #20]
 800fd4c:	4313      	orrs	r3, r2
 800fd4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	697a      	ldr	r2, [r7, #20]
 800fd54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	68fa      	ldr	r2, [r7, #12]
 800fd5a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fd5c:	683b      	ldr	r3, [r7, #0]
 800fd5e:	685a      	ldr	r2, [r3, #4]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	693a      	ldr	r2, [r7, #16]
 800fd68:	621a      	str	r2, [r3, #32]
}
 800fd6a:	bf00      	nop
 800fd6c:	371c      	adds	r7, #28
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd74:	4770      	bx	lr
 800fd76:	bf00      	nop
 800fd78:	40012c00 	.word	0x40012c00
 800fd7c:	40013400 	.word	0x40013400
 800fd80:	40014000 	.word	0x40014000
 800fd84:	40014400 	.word	0x40014400
 800fd88:	40014800 	.word	0x40014800
 800fd8c:	40015000 	.word	0x40015000

0800fd90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fd90:	b480      	push	{r7}
 800fd92:	b087      	sub	sp, #28
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	60f8      	str	r0, [r7, #12]
 800fd98:	60b9      	str	r1, [r7, #8]
 800fd9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	6a1b      	ldr	r3, [r3, #32]
 800fda0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	6a1b      	ldr	r3, [r3, #32]
 800fda6:	f023 0201 	bic.w	r2, r3, #1
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	699b      	ldr	r3, [r3, #24]
 800fdb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fdba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	011b      	lsls	r3, r3, #4
 800fdc0:	693a      	ldr	r2, [r7, #16]
 800fdc2:	4313      	orrs	r3, r2
 800fdc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	f023 030a 	bic.w	r3, r3, #10
 800fdcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fdce:	697a      	ldr	r2, [r7, #20]
 800fdd0:	68bb      	ldr	r3, [r7, #8]
 800fdd2:	4313      	orrs	r3, r2
 800fdd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	693a      	ldr	r2, [r7, #16]
 800fdda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	697a      	ldr	r2, [r7, #20]
 800fde0:	621a      	str	r2, [r3, #32]
}
 800fde2:	bf00      	nop
 800fde4:	371c      	adds	r7, #28
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr

0800fdee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fdee:	b480      	push	{r7}
 800fdf0:	b087      	sub	sp, #28
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	60f8      	str	r0, [r7, #12]
 800fdf6:	60b9      	str	r1, [r7, #8]
 800fdf8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	6a1b      	ldr	r3, [r3, #32]
 800fdfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	6a1b      	ldr	r3, [r3, #32]
 800fe04:	f023 0210 	bic.w	r2, r3, #16
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	699b      	ldr	r3, [r3, #24]
 800fe10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fe18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	031b      	lsls	r3, r3, #12
 800fe1e:	693a      	ldr	r2, [r7, #16]
 800fe20:	4313      	orrs	r3, r2
 800fe22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fe24:	697b      	ldr	r3, [r7, #20]
 800fe26:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fe2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	011b      	lsls	r3, r3, #4
 800fe30:	697a      	ldr	r2, [r7, #20]
 800fe32:	4313      	orrs	r3, r2
 800fe34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	693a      	ldr	r2, [r7, #16]
 800fe3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	697a      	ldr	r2, [r7, #20]
 800fe40:	621a      	str	r2, [r3, #32]
}
 800fe42:	bf00      	nop
 800fe44:	371c      	adds	r7, #28
 800fe46:	46bd      	mov	sp, r7
 800fe48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4c:	4770      	bx	lr

0800fe4e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fe4e:	b480      	push	{r7}
 800fe50:	b085      	sub	sp, #20
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
 800fe56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	689b      	ldr	r3, [r3, #8]
 800fe5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800fe64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fe68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fe6a:	683a      	ldr	r2, [r7, #0]
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	f043 0307 	orr.w	r3, r3, #7
 800fe74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	609a      	str	r2, [r3, #8]
}
 800fe7c:	bf00      	nop
 800fe7e:	3714      	adds	r7, #20
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr

0800fe88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b087      	sub	sp, #28
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	607a      	str	r2, [r7, #4]
 800fe94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	689b      	ldr	r3, [r3, #8]
 800fe9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fe9c:	697b      	ldr	r3, [r7, #20]
 800fe9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fea4:	683b      	ldr	r3, [r7, #0]
 800fea6:	021a      	lsls	r2, r3, #8
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	431a      	orrs	r2, r3
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	4313      	orrs	r3, r2
 800feb0:	697a      	ldr	r2, [r7, #20]
 800feb2:	4313      	orrs	r3, r2
 800feb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	697a      	ldr	r2, [r7, #20]
 800feba:	609a      	str	r2, [r3, #8]
}
 800febc:	bf00      	nop
 800febe:	371c      	adds	r7, #28
 800fec0:	46bd      	mov	sp, r7
 800fec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec6:	4770      	bx	lr

0800fec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fec8:	b480      	push	{r7}
 800feca:	b087      	sub	sp, #28
 800fecc:	af00      	add	r7, sp, #0
 800fece:	60f8      	str	r0, [r7, #12]
 800fed0:	60b9      	str	r1, [r7, #8]
 800fed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	f003 031f 	and.w	r3, r3, #31
 800feda:	2201      	movs	r2, #1
 800fedc:	fa02 f303 	lsl.w	r3, r2, r3
 800fee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	6a1a      	ldr	r2, [r3, #32]
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	43db      	mvns	r3, r3
 800feea:	401a      	ands	r2, r3
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	6a1a      	ldr	r2, [r3, #32]
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	f003 031f 	and.w	r3, r3, #31
 800fefa:	6879      	ldr	r1, [r7, #4]
 800fefc:	fa01 f303 	lsl.w	r3, r1, r3
 800ff00:	431a      	orrs	r2, r3
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	621a      	str	r2, [r3, #32]
}
 800ff06:	bf00      	nop
 800ff08:	371c      	adds	r7, #28
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff10:	4770      	bx	lr
	...

0800ff14 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	4a26      	ldr	r2, [pc, #152]	@ (800ffb8 <TIM_ResetCallback+0xa4>)
 800ff20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4a25      	ldr	r2, [pc, #148]	@ (800ffbc <TIM_ResetCallback+0xa8>)
 800ff28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	4a24      	ldr	r2, [pc, #144]	@ (800ffc0 <TIM_ResetCallback+0xac>)
 800ff30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4a23      	ldr	r2, [pc, #140]	@ (800ffc4 <TIM_ResetCallback+0xb0>)
 800ff38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4a22      	ldr	r2, [pc, #136]	@ (800ffc8 <TIM_ResetCallback+0xb4>)
 800ff40:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	4a21      	ldr	r2, [pc, #132]	@ (800ffcc <TIM_ResetCallback+0xb8>)
 800ff48:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	4a20      	ldr	r2, [pc, #128]	@ (800ffd0 <TIM_ResetCallback+0xbc>)
 800ff50:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	4a1f      	ldr	r2, [pc, #124]	@ (800ffd4 <TIM_ResetCallback+0xc0>)
 800ff58:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	4a1e      	ldr	r2, [pc, #120]	@ (800ffd8 <TIM_ResetCallback+0xc4>)
 800ff60:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4a1d      	ldr	r2, [pc, #116]	@ (800ffdc <TIM_ResetCallback+0xc8>)
 800ff68:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	4a1c      	ldr	r2, [pc, #112]	@ (800ffe0 <TIM_ResetCallback+0xcc>)
 800ff70:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	4a1b      	ldr	r2, [pc, #108]	@ (800ffe4 <TIM_ResetCallback+0xd0>)
 800ff78:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	4a1a      	ldr	r2, [pc, #104]	@ (800ffe8 <TIM_ResetCallback+0xd4>)
 800ff80:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	4a19      	ldr	r2, [pc, #100]	@ (800ffec <TIM_ResetCallback+0xd8>)
 800ff88:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	4a18      	ldr	r2, [pc, #96]	@ (800fff0 <TIM_ResetCallback+0xdc>)
 800ff90:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	4a17      	ldr	r2, [pc, #92]	@ (800fff4 <TIM_ResetCallback+0xe0>)
 800ff98:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	4a16      	ldr	r2, [pc, #88]	@ (800fff8 <TIM_ResetCallback+0xe4>)
 800ffa0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	4a15      	ldr	r2, [pc, #84]	@ (800fffc <TIM_ResetCallback+0xe8>)
 800ffa8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800ffac:	bf00      	nop
 800ffae:	370c      	adds	r7, #12
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb6:	4770      	bx	lr
 800ffb8:	080087a1 	.word	0x080087a1
 800ffbc:	0800f261 	.word	0x0800f261
 800ffc0:	0800f2d9 	.word	0x0800f2d9
 800ffc4:	0800f2ed 	.word	0x0800f2ed
 800ffc8:	0800f289 	.word	0x0800f289
 800ffcc:	0800f29d 	.word	0x0800f29d
 800ffd0:	0800f275 	.word	0x0800f275
 800ffd4:	0800f2b1 	.word	0x0800f2b1
 800ffd8:	0800f2c5 	.word	0x0800f2c5
 800ffdc:	0800f301 	.word	0x0800f301
 800ffe0:	08010255 	.word	0x08010255
 800ffe4:	08010269 	.word	0x08010269
 800ffe8:	0801027d 	.word	0x0801027d
 800ffec:	08010291 	.word	0x08010291
 800fff0:	080102a5 	.word	0x080102a5
 800fff4:	080102b9 	.word	0x080102b9
 800fff8:	080102cd 	.word	0x080102cd
 800fffc:	080102e1 	.word	0x080102e1

08010000 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010000:	b480      	push	{r7}
 8010002:	b085      	sub	sp, #20
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010010:	2b01      	cmp	r3, #1
 8010012:	d101      	bne.n	8010018 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010014:	2302      	movs	r3, #2
 8010016:	e074      	b.n	8010102 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	2201      	movs	r2, #1
 801001c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2202      	movs	r2, #2
 8010024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	685b      	ldr	r3, [r3, #4]
 801002e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	689b      	ldr	r3, [r3, #8]
 8010036:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	4a34      	ldr	r2, [pc, #208]	@ (8010110 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801003e:	4293      	cmp	r3, r2
 8010040:	d009      	beq.n	8010056 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	4a33      	ldr	r2, [pc, #204]	@ (8010114 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d004      	beq.n	8010056 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	4a31      	ldr	r2, [pc, #196]	@ (8010118 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010052:	4293      	cmp	r3, r2
 8010054:	d108      	bne.n	8010068 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801005c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	68fa      	ldr	r2, [r7, #12]
 8010064:	4313      	orrs	r3, r2
 8010066:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 801006e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8010072:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	68fa      	ldr	r2, [r7, #12]
 801007a:	4313      	orrs	r3, r2
 801007c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	68fa      	ldr	r2, [r7, #12]
 8010084:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	4a21      	ldr	r2, [pc, #132]	@ (8010110 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801008c:	4293      	cmp	r3, r2
 801008e:	d022      	beq.n	80100d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010098:	d01d      	beq.n	80100d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4a1f      	ldr	r2, [pc, #124]	@ (801011c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d018      	beq.n	80100d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	4a1d      	ldr	r2, [pc, #116]	@ (8010120 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d013      	beq.n	80100d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	4a1c      	ldr	r2, [pc, #112]	@ (8010124 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80100b4:	4293      	cmp	r3, r2
 80100b6:	d00e      	beq.n	80100d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	4a15      	ldr	r2, [pc, #84]	@ (8010114 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d009      	beq.n	80100d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	4a18      	ldr	r2, [pc, #96]	@ (8010128 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80100c8:	4293      	cmp	r3, r2
 80100ca:	d004      	beq.n	80100d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	4a11      	ldr	r2, [pc, #68]	@ (8010118 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d10c      	bne.n	80100f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80100dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	689b      	ldr	r3, [r3, #8]
 80100e2:	68ba      	ldr	r2, [r7, #8]
 80100e4:	4313      	orrs	r3, r2
 80100e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	68ba      	ldr	r2, [r7, #8]
 80100ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2201      	movs	r2, #1
 80100f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010100:	2300      	movs	r3, #0
}
 8010102:	4618      	mov	r0, r3
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	40012c00 	.word	0x40012c00
 8010114:	40013400 	.word	0x40013400
 8010118:	40015000 	.word	0x40015000
 801011c:	40000400 	.word	0x40000400
 8010120:	40000800 	.word	0x40000800
 8010124:	40000c00 	.word	0x40000c00
 8010128:	40014000 	.word	0x40014000

0801012c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801012c:	b480      	push	{r7}
 801012e:	b085      	sub	sp, #20
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010136:	2300      	movs	r3, #0
 8010138:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8010140:	2b01      	cmp	r3, #1
 8010142:	d101      	bne.n	8010148 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010144:	2302      	movs	r3, #2
 8010146:	e078      	b.n	801023a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2201      	movs	r2, #1
 801014c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8010156:	683b      	ldr	r3, [r7, #0]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	4313      	orrs	r3, r2
 801015c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	689b      	ldr	r3, [r3, #8]
 8010168:	4313      	orrs	r3, r2
 801016a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	4313      	orrs	r3, r2
 8010178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8010180:	683b      	ldr	r3, [r7, #0]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	4313      	orrs	r3, r2
 8010186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	691b      	ldr	r3, [r3, #16]
 8010192:	4313      	orrs	r3, r2
 8010194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 801019c:	683b      	ldr	r3, [r7, #0]
 801019e:	695b      	ldr	r3, [r3, #20]
 80101a0:	4313      	orrs	r3, r2
 80101a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80101ae:	4313      	orrs	r3, r2
 80101b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80101b8:	683b      	ldr	r3, [r7, #0]
 80101ba:	699b      	ldr	r3, [r3, #24]
 80101bc:	041b      	lsls	r3, r3, #16
 80101be:	4313      	orrs	r3, r2
 80101c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	69db      	ldr	r3, [r3, #28]
 80101cc:	4313      	orrs	r3, r2
 80101ce:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	4a1c      	ldr	r2, [pc, #112]	@ (8010248 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d009      	beq.n	80101ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4a1b      	ldr	r2, [pc, #108]	@ (801024c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80101e0:	4293      	cmp	r3, r2
 80101e2:	d004      	beq.n	80101ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	4a19      	ldr	r2, [pc, #100]	@ (8010250 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80101ea:	4293      	cmp	r3, r2
 80101ec:	d11c      	bne.n	8010228 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101f8:	051b      	lsls	r3, r3, #20
 80101fa:	4313      	orrs	r3, r2
 80101fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	6a1b      	ldr	r3, [r3, #32]
 8010208:	4313      	orrs	r3, r2
 801020a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010216:	4313      	orrs	r3, r2
 8010218:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8010220:	683b      	ldr	r3, [r7, #0]
 8010222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010224:	4313      	orrs	r3, r2
 8010226:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8010238:	2300      	movs	r3, #0
}
 801023a:	4618      	mov	r0, r3
 801023c:	3714      	adds	r7, #20
 801023e:	46bd      	mov	sp, r7
 8010240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010244:	4770      	bx	lr
 8010246:	bf00      	nop
 8010248:	40012c00 	.word	0x40012c00
 801024c:	40013400 	.word	0x40013400
 8010250:	40015000 	.word	0x40015000

08010254 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010254:	b480      	push	{r7}
 8010256:	b083      	sub	sp, #12
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801025c:	bf00      	nop
 801025e:	370c      	adds	r7, #12
 8010260:	46bd      	mov	sp, r7
 8010262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010266:	4770      	bx	lr

08010268 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010268:	b480      	push	{r7}
 801026a:	b083      	sub	sp, #12
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8010270:	bf00      	nop
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801027c:	b480      	push	{r7}
 801027e:	b083      	sub	sp, #12
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010284:	bf00      	nop
 8010286:	370c      	adds	r7, #12
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr

08010290 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010298:	bf00      	nop
 801029a:	370c      	adds	r7, #12
 801029c:	46bd      	mov	sp, r7
 801029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a2:	4770      	bx	lr

080102a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80102a4:	b480      	push	{r7}
 80102a6:	b083      	sub	sp, #12
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80102ac:	bf00      	nop
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80102c0:	bf00      	nop
 80102c2:	370c      	adds	r7, #12
 80102c4:	46bd      	mov	sp, r7
 80102c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ca:	4770      	bx	lr

080102cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80102cc:	b480      	push	{r7}
 80102ce:	b083      	sub	sp, #12
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80102d4:	bf00      	nop
 80102d6:	370c      	adds	r7, #12
 80102d8:	46bd      	mov	sp, r7
 80102da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102de:	4770      	bx	lr

080102e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80102e0:	b480      	push	{r7}
 80102e2:	b083      	sub	sp, #12
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80102e8:	bf00      	nop
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d101      	bne.n	8010306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010302:	2301      	movs	r3, #1
 8010304:	e050      	b.n	80103a8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801030c:	2b00      	cmp	r3, #0
 801030e:	d114      	bne.n	801033a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2200      	movs	r2, #0
 8010314:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 fde5 	bl	8010ee8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010324:	2b00      	cmp	r3, #0
 8010326:	d103      	bne.n	8010330 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	4a21      	ldr	r2, [pc, #132]	@ (80103b0 <HAL_UART_Init+0xbc>)
 801032c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2224      	movs	r2, #36	@ 0x24
 801033e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	681a      	ldr	r2, [r3, #0]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f022 0201 	bic.w	r2, r2, #1
 8010350:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010356:	2b00      	cmp	r3, #0
 8010358:	d002      	beq.n	8010360 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f001 f912 	bl	8011584 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f000 fe13 	bl	8010f8c <UART_SetConfig>
 8010366:	4603      	mov	r3, r0
 8010368:	2b01      	cmp	r3, #1
 801036a:	d101      	bne.n	8010370 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 801036c:	2301      	movs	r3, #1
 801036e:	e01b      	b.n	80103a8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	685a      	ldr	r2, [r3, #4]
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801037e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	689a      	ldr	r2, [r3, #8]
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801038e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	f042 0201 	orr.w	r2, r2, #1
 801039e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f001 f991 	bl	80116c8 <UART_CheckIdleState>
 80103a6:	4603      	mov	r3, r0
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3708      	adds	r7, #8
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	0800a795 	.word	0x0800a795

080103b4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b087      	sub	sp, #28
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	460b      	mov	r3, r1
 80103be:	607a      	str	r2, [r7, #4]
 80103c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80103c2:	2300      	movs	r3, #0
 80103c4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d109      	bne.n	80103e0 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80103d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80103dc:	2301      	movs	r3, #1
 80103de:	e09c      	b.n	801051a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80103e6:	2b20      	cmp	r3, #32
 80103e8:	d16c      	bne.n	80104c4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80103ea:	7afb      	ldrb	r3, [r7, #11]
 80103ec:	2b0c      	cmp	r3, #12
 80103ee:	d85e      	bhi.n	80104ae <HAL_UART_RegisterCallback+0xfa>
 80103f0:	a201      	add	r2, pc, #4	@ (adr r2, 80103f8 <HAL_UART_RegisterCallback+0x44>)
 80103f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103f6:	bf00      	nop
 80103f8:	0801042d 	.word	0x0801042d
 80103fc:	08010437 	.word	0x08010437
 8010400:	08010441 	.word	0x08010441
 8010404:	0801044b 	.word	0x0801044b
 8010408:	08010455 	.word	0x08010455
 801040c:	0801045f 	.word	0x0801045f
 8010410:	08010469 	.word	0x08010469
 8010414:	08010473 	.word	0x08010473
 8010418:	0801047d 	.word	0x0801047d
 801041c:	08010487 	.word	0x08010487
 8010420:	08010491 	.word	0x08010491
 8010424:	0801049b 	.word	0x0801049b
 8010428:	080104a5 	.word	0x080104a5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	687a      	ldr	r2, [r7, #4]
 8010430:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8010434:	e070      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8010436:	68fb      	ldr	r3, [r7, #12]
 8010438:	687a      	ldr	r2, [r7, #4]
 801043a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 801043e:	e06b      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8010448:	e066      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8010452:	e061      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 801045c:	e05c      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 801045e:	68fb      	ldr	r3, [r7, #12]
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8010466:	e057      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8010470:	e052      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	687a      	ldr	r2, [r7, #4]
 8010476:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 801047a:	e04d      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8010484:	e048      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 801048e:	e043      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8010498:	e03e      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	687a      	ldr	r2, [r7, #4]
 801049e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80104a2:	e039      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	687a      	ldr	r2, [r7, #4]
 80104a8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80104ac:	e034      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80104be:	2301      	movs	r3, #1
 80104c0:	75fb      	strb	r3, [r7, #23]
        break;
 80104c2:	e029      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d11a      	bne.n	8010504 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80104ce:	7afb      	ldrb	r3, [r7, #11]
 80104d0:	2b0b      	cmp	r3, #11
 80104d2:	d002      	beq.n	80104da <HAL_UART_RegisterCallback+0x126>
 80104d4:	2b0c      	cmp	r3, #12
 80104d6:	d005      	beq.n	80104e4 <HAL_UART_RegisterCallback+0x130>
 80104d8:	e009      	b.n	80104ee <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80104e2:	e019      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80104ec:	e014      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80104f4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80104fe:	2301      	movs	r3, #1
 8010500:	75fb      	strb	r3, [r7, #23]
        break;
 8010502:	e009      	b.n	8010518 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801050a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8010514:	2301      	movs	r3, #1
 8010516:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8010518:	7dfb      	ldrb	r3, [r7, #23]
}
 801051a:	4618      	mov	r0, r3
 801051c:	371c      	adds	r7, #28
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr
 8010526:	bf00      	nop

08010528 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b08a      	sub	sp, #40	@ 0x28
 801052c:	af00      	add	r7, sp, #0
 801052e:	60f8      	str	r0, [r7, #12]
 8010530:	60b9      	str	r1, [r7, #8]
 8010532:	4613      	mov	r3, r2
 8010534:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801053c:	2b20      	cmp	r3, #32
 801053e:	d167      	bne.n	8010610 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d002      	beq.n	801054c <HAL_UART_Transmit_DMA+0x24>
 8010546:	88fb      	ldrh	r3, [r7, #6]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d101      	bne.n	8010550 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 801054c:	2301      	movs	r3, #1
 801054e:	e060      	b.n	8010612 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	68ba      	ldr	r2, [r7, #8]
 8010554:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	88fa      	ldrh	r2, [r7, #6]
 801055a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	88fa      	ldrh	r2, [r7, #6]
 8010562:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2200      	movs	r2, #0
 801056a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2221      	movs	r2, #33	@ 0x21
 8010572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801057a:	2b00      	cmp	r3, #0
 801057c:	d028      	beq.n	80105d0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010582:	4a26      	ldr	r2, [pc, #152]	@ (801061c <HAL_UART_Transmit_DMA+0xf4>)
 8010584:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801058a:	4a25      	ldr	r2, [pc, #148]	@ (8010620 <HAL_UART_Transmit_DMA+0xf8>)
 801058c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010592:	4a24      	ldr	r2, [pc, #144]	@ (8010624 <HAL_UART_Transmit_DMA+0xfc>)
 8010594:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801059a:	2200      	movs	r2, #0
 801059c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80105a6:	4619      	mov	r1, r3
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	3328      	adds	r3, #40	@ 0x28
 80105ae:	461a      	mov	r2, r3
 80105b0:	88fb      	ldrh	r3, [r7, #6]
 80105b2:	f7fc f919 	bl	800c7e8 <HAL_DMA_Start_IT>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d009      	beq.n	80105d0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	2210      	movs	r2, #16
 80105c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	2220      	movs	r2, #32
 80105c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80105cc:	2301      	movs	r3, #1
 80105ce:	e020      	b.n	8010612 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2240      	movs	r2, #64	@ 0x40
 80105d6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	3308      	adds	r3, #8
 80105de:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	e853 3f00 	ldrex	r3, [r3]
 80105e6:	613b      	str	r3, [r7, #16]
   return(result);
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80105ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	3308      	adds	r3, #8
 80105f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105f8:	623a      	str	r2, [r7, #32]
 80105fa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105fc:	69f9      	ldr	r1, [r7, #28]
 80105fe:	6a3a      	ldr	r2, [r7, #32]
 8010600:	e841 2300 	strex	r3, r2, [r1]
 8010604:	61bb      	str	r3, [r7, #24]
   return(result);
 8010606:	69bb      	ldr	r3, [r7, #24]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d1e5      	bne.n	80105d8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 801060c:	2300      	movs	r3, #0
 801060e:	e000      	b.n	8010612 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010610:	2302      	movs	r3, #2
  }
}
 8010612:	4618      	mov	r0, r3
 8010614:	3728      	adds	r7, #40	@ 0x28
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}
 801061a:	bf00      	nop
 801061c:	08011b93 	.word	0x08011b93
 8010620:	08011c31 	.word	0x08011c31
 8010624:	08011dcb 	.word	0x08011dcb

08010628 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b08a      	sub	sp, #40	@ 0x28
 801062c:	af00      	add	r7, sp, #0
 801062e:	60f8      	str	r0, [r7, #12]
 8010630:	60b9      	str	r1, [r7, #8]
 8010632:	4613      	mov	r3, r2
 8010634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801063c:	2b20      	cmp	r3, #32
 801063e:	d137      	bne.n	80106b0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	2b00      	cmp	r3, #0
 8010644:	d002      	beq.n	801064c <HAL_UART_Receive_DMA+0x24>
 8010646:	88fb      	ldrh	r3, [r7, #6]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d101      	bne.n	8010650 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 801064c:	2301      	movs	r3, #1
 801064e:	e030      	b.n	80106b2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	2200      	movs	r2, #0
 8010654:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	4a18      	ldr	r2, [pc, #96]	@ (80106bc <HAL_UART_Receive_DMA+0x94>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d01f      	beq.n	80106a0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801066a:	2b00      	cmp	r3, #0
 801066c:	d018      	beq.n	80106a0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	e853 3f00 	ldrex	r3, [r3]
 801067a:	613b      	str	r3, [r7, #16]
   return(result);
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8010682:	627b      	str	r3, [r7, #36]	@ 0x24
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	461a      	mov	r2, r3
 801068a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801068c:	623b      	str	r3, [r7, #32]
 801068e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010690:	69f9      	ldr	r1, [r7, #28]
 8010692:	6a3a      	ldr	r2, [r7, #32]
 8010694:	e841 2300 	strex	r3, r2, [r1]
 8010698:	61bb      	str	r3, [r7, #24]
   return(result);
 801069a:	69bb      	ldr	r3, [r7, #24]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d1e6      	bne.n	801066e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80106a0:	88fb      	ldrh	r3, [r7, #6]
 80106a2:	461a      	mov	r2, r3
 80106a4:	68b9      	ldr	r1, [r7, #8]
 80106a6:	68f8      	ldr	r0, [r7, #12]
 80106a8:	f001 f926 	bl	80118f8 <UART_Start_Receive_DMA>
 80106ac:	4603      	mov	r3, r0
 80106ae:	e000      	b.n	80106b2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80106b0:	2302      	movs	r3, #2
  }
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3728      	adds	r7, #40	@ 0x28
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	40008000 	.word	0x40008000

080106c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b0ba      	sub	sp, #232	@ 0xe8
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	69db      	ldr	r3, [r3, #28]
 80106ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	689b      	ldr	r3, [r3, #8]
 80106e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80106e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80106ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 80106ee:	4013      	ands	r3, r2
 80106f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80106f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d11b      	bne.n	8010734 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80106fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010700:	f003 0320 	and.w	r3, r3, #32
 8010704:	2b00      	cmp	r3, #0
 8010706:	d015      	beq.n	8010734 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801070c:	f003 0320 	and.w	r3, r3, #32
 8010710:	2b00      	cmp	r3, #0
 8010712:	d105      	bne.n	8010720 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801071c:	2b00      	cmp	r3, #0
 801071e:	d009      	beq.n	8010734 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010724:	2b00      	cmp	r3, #0
 8010726:	f000 8312 	beq.w	8010d4e <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	4798      	blx	r3
      }
      return;
 8010732:	e30c      	b.n	8010d4e <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010734:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010738:	2b00      	cmp	r3, #0
 801073a:	f000 8129 	beq.w	8010990 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801073e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010742:	4b90      	ldr	r3, [pc, #576]	@ (8010984 <HAL_UART_IRQHandler+0x2c4>)
 8010744:	4013      	ands	r3, r2
 8010746:	2b00      	cmp	r3, #0
 8010748:	d106      	bne.n	8010758 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801074a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801074e:	4b8e      	ldr	r3, [pc, #568]	@ (8010988 <HAL_UART_IRQHandler+0x2c8>)
 8010750:	4013      	ands	r3, r2
 8010752:	2b00      	cmp	r3, #0
 8010754:	f000 811c 	beq.w	8010990 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801075c:	f003 0301 	and.w	r3, r3, #1
 8010760:	2b00      	cmp	r3, #0
 8010762:	d011      	beq.n	8010788 <HAL_UART_IRQHandler+0xc8>
 8010764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801076c:	2b00      	cmp	r3, #0
 801076e:	d00b      	beq.n	8010788 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	2201      	movs	r2, #1
 8010776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801077e:	f043 0201 	orr.w	r2, r3, #1
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801078c:	f003 0302 	and.w	r3, r3, #2
 8010790:	2b00      	cmp	r3, #0
 8010792:	d011      	beq.n	80107b8 <HAL_UART_IRQHandler+0xf8>
 8010794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010798:	f003 0301 	and.w	r3, r3, #1
 801079c:	2b00      	cmp	r3, #0
 801079e:	d00b      	beq.n	80107b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	2202      	movs	r2, #2
 80107a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107ae:	f043 0204 	orr.w	r2, r3, #4
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80107bc:	f003 0304 	and.w	r3, r3, #4
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d011      	beq.n	80107e8 <HAL_UART_IRQHandler+0x128>
 80107c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80107c8:	f003 0301 	and.w	r3, r3, #1
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d00b      	beq.n	80107e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	2204      	movs	r2, #4
 80107d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80107de:	f043 0202 	orr.w	r2, r3, #2
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80107e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80107ec:	f003 0308 	and.w	r3, r3, #8
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d017      	beq.n	8010824 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80107f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80107f8:	f003 0320 	and.w	r3, r3, #32
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d105      	bne.n	801080c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010800:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010804:	4b5f      	ldr	r3, [pc, #380]	@ (8010984 <HAL_UART_IRQHandler+0x2c4>)
 8010806:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010808:	2b00      	cmp	r3, #0
 801080a:	d00b      	beq.n	8010824 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	2208      	movs	r2, #8
 8010812:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801081a:	f043 0208 	orr.w	r2, r3, #8
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010828:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801082c:	2b00      	cmp	r3, #0
 801082e:	d012      	beq.n	8010856 <HAL_UART_IRQHandler+0x196>
 8010830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010834:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010838:	2b00      	cmp	r3, #0
 801083a:	d00c      	beq.n	8010856 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010844:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801084c:	f043 0220 	orr.w	r2, r3, #32
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801085c:	2b00      	cmp	r3, #0
 801085e:	f000 8278 	beq.w	8010d52 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010866:	f003 0320 	and.w	r3, r3, #32
 801086a:	2b00      	cmp	r3, #0
 801086c:	d013      	beq.n	8010896 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801086e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010872:	f003 0320 	and.w	r3, r3, #32
 8010876:	2b00      	cmp	r3, #0
 8010878:	d105      	bne.n	8010886 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801087a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801087e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010882:	2b00      	cmp	r3, #0
 8010884:	d007      	beq.n	8010896 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801088a:	2b00      	cmp	r3, #0
 801088c:	d003      	beq.n	8010896 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801089c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	689b      	ldr	r3, [r3, #8]
 80108a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108aa:	2b40      	cmp	r3, #64	@ 0x40
 80108ac:	d005      	beq.n	80108ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80108ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80108b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d058      	beq.n	801096c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f001 f903 	bl	8011ac6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	689b      	ldr	r3, [r3, #8]
 80108c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80108ca:	2b40      	cmp	r3, #64	@ 0x40
 80108cc:	d148      	bne.n	8010960 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	681b      	ldr	r3, [r3, #0]
 80108d2:	3308      	adds	r3, #8
 80108d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80108dc:	e853 3f00 	ldrex	r3, [r3]
 80108e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80108e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80108e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80108ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	3308      	adds	r3, #8
 80108f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80108fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80108fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801090a:	e841 2300 	strex	r3, r2, [r1]
 801090e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1d9      	bne.n	80108ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010920:	2b00      	cmp	r3, #0
 8010922:	d017      	beq.n	8010954 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801092a:	4a18      	ldr	r2, [pc, #96]	@ (801098c <HAL_UART_IRQHandler+0x2cc>)
 801092c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010934:	4618      	mov	r0, r3
 8010936:	f7fc f82b 	bl	800c990 <HAL_DMA_Abort_IT>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d01f      	beq.n	8010980 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801094e:	4610      	mov	r0, r2
 8010950:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010952:	e015      	b.n	8010980 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801095a:	6878      	ldr	r0, [r7, #4]
 801095c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801095e:	e00f      	b.n	8010980 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801096a:	e009      	b.n	8010980 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	2200      	movs	r2, #0
 801097a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801097e:	e1e8      	b.n	8010d52 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010980:	bf00      	nop
    return;
 8010982:	e1e6      	b.n	8010d52 <HAL_UART_IRQHandler+0x692>
 8010984:	10000001 	.word	0x10000001
 8010988:	04000120 	.word	0x04000120
 801098c:	08011e4f 	.word	0x08011e4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010994:	2b01      	cmp	r3, #1
 8010996:	f040 8176 	bne.w	8010c86 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801099a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801099e:	f003 0310 	and.w	r3, r3, #16
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f000 816f 	beq.w	8010c86 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80109a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80109ac:	f003 0310 	and.w	r3, r3, #16
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	f000 8168 	beq.w	8010c86 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	2210      	movs	r2, #16
 80109bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	681b      	ldr	r3, [r3, #0]
 80109c2:	689b      	ldr	r3, [r3, #8]
 80109c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80109c8:	2b40      	cmp	r3, #64	@ 0x40
 80109ca:	f040 80dc 	bne.w	8010b86 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80109dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	f000 80b1 	beq.w	8010b48 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80109ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80109f0:	429a      	cmp	r2, r3
 80109f2:	f080 80a9 	bcs.w	8010b48 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80109fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	f003 0320 	and.w	r3, r3, #32
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	f040 8087 	bne.w	8010b22 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010a20:	e853 3f00 	ldrex	r3, [r3]
 8010a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010a2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010a30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	461a      	mov	r2, r3
 8010a3a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010a3e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010a42:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010a4e:	e841 2300 	strex	r3, r2, [r1]
 8010a52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d1da      	bne.n	8010a14 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	3308      	adds	r3, #8
 8010a64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010a68:	e853 3f00 	ldrex	r3, [r3]
 8010a6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010a6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010a70:	f023 0301 	bic.w	r3, r3, #1
 8010a74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	3308      	adds	r3, #8
 8010a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010a82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8010a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8010a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010a8e:	e841 2300 	strex	r3, r2, [r1]
 8010a92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010a94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d1e1      	bne.n	8010a5e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	3308      	adds	r3, #8
 8010aa0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010aa4:	e853 3f00 	ldrex	r3, [r3]
 8010aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8010aaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010aac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	3308      	adds	r3, #8
 8010aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8010abe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8010ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ac2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8010ac4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010ac6:	e841 2300 	strex	r3, r2, [r1]
 8010aca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8010acc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1e3      	bne.n	8010a9a <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	2220      	movs	r2, #32
 8010ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2200      	movs	r2, #0
 8010ade:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ae8:	e853 3f00 	ldrex	r3, [r3]
 8010aec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010af0:	f023 0310 	bic.w	r3, r3, #16
 8010af4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	461a      	mov	r2, r3
 8010afe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010b02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010b04:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010b08:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010b0a:	e841 2300 	strex	r3, r2, [r1]
 8010b0e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010b10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d1e4      	bne.n	8010ae0 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fb fede 	bl	800c8de <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2202      	movs	r2, #2
 8010b26:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8010b3a:	b292      	uxth	r2, r2
 8010b3c:	1a8a      	subs	r2, r1, r2
 8010b3e:	b292      	uxth	r2, r2
 8010b40:	4611      	mov	r1, r2
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010b46:	e106      	b.n	8010d56 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010b52:	429a      	cmp	r2, r3
 8010b54:	f040 80ff 	bne.w	8010d56 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	f003 0320 	and.w	r3, r3, #32
 8010b66:	2b20      	cmp	r3, #32
 8010b68:	f040 80f5 	bne.w	8010d56 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2202      	movs	r2, #2
 8010b70:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8010b7e:	4611      	mov	r1, r2
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	4798      	blx	r3
      return;
 8010b84:	e0e7      	b.n	8010d56 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010b92:	b29b      	uxth	r3, r3
 8010b94:	1ad3      	subs	r3, r2, r3
 8010b96:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010ba0:	b29b      	uxth	r3, r3
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	f000 80d9 	beq.w	8010d5a <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 8010ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	f000 80d4 	beq.w	8010d5a <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bba:	e853 3f00 	ldrex	r3, [r3]
 8010bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010bc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	461a      	mov	r2, r3
 8010bd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8010bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8010bd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010bda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010bdc:	e841 2300 	strex	r3, r2, [r1]
 8010be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d1e4      	bne.n	8010bb2 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	3308      	adds	r3, #8
 8010bee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010bf2:	e853 3f00 	ldrex	r3, [r3]
 8010bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8010bf8:	6a3b      	ldr	r3, [r7, #32]
 8010bfa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8010bfe:	f023 0301 	bic.w	r3, r3, #1
 8010c02:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	3308      	adds	r3, #8
 8010c0c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8010c10:	633a      	str	r2, [r7, #48]	@ 0x30
 8010c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010c18:	e841 2300 	strex	r3, r2, [r1]
 8010c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d1e1      	bne.n	8010be8 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	2220      	movs	r2, #32
 8010c28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	2200      	movs	r2, #0
 8010c30:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	2200      	movs	r2, #0
 8010c36:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	e853 3f00 	ldrex	r3, [r3]
 8010c44:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f023 0310 	bic.w	r3, r3, #16
 8010c4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	461a      	mov	r2, r3
 8010c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010c5a:	61fb      	str	r3, [r7, #28]
 8010c5c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c5e:	69b9      	ldr	r1, [r7, #24]
 8010c60:	69fa      	ldr	r2, [r7, #28]
 8010c62:	e841 2300 	strex	r3, r2, [r1]
 8010c66:	617b      	str	r3, [r7, #20]
   return(result);
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d1e4      	bne.n	8010c38 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	2202      	movs	r2, #2
 8010c72:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010c7a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8010c7e:	4611      	mov	r1, r2
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010c84:	e069      	b.n	8010d5a <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d010      	beq.n	8010cb4 <HAL_UART_IRQHandler+0x5f4>
 8010c92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d00a      	beq.n	8010cb4 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010ca6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010cb2:	e055      	b.n	8010d60 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d014      	beq.n	8010cea <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d105      	bne.n	8010cd8 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8010ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010cd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d008      	beq.n	8010cea <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d03e      	beq.n	8010d5e <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	4798      	blx	r3
    }
    return;
 8010ce8:	e039      	b.n	8010d5e <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d009      	beq.n	8010d0a <HAL_UART_IRQHandler+0x64a>
 8010cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d003      	beq.n	8010d0a <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f001 f8b7 	bl	8011e76 <UART_EndTransmit_IT>
    return;
 8010d08:	e02a      	b.n	8010d60 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d00b      	beq.n	8010d2e <HAL_UART_IRQHandler+0x66e>
 8010d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d1a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d005      	beq.n	8010d2e <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010d2c:	e018      	b.n	8010d60 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010d32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d012      	beq.n	8010d60 <HAL_UART_IRQHandler+0x6a0>
 8010d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	da0e      	bge.n	8010d60 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010d48:	6878      	ldr	r0, [r7, #4]
 8010d4a:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010d4c:	e008      	b.n	8010d60 <HAL_UART_IRQHandler+0x6a0>
      return;
 8010d4e:	bf00      	nop
 8010d50:	e006      	b.n	8010d60 <HAL_UART_IRQHandler+0x6a0>
    return;
 8010d52:	bf00      	nop
 8010d54:	e004      	b.n	8010d60 <HAL_UART_IRQHandler+0x6a0>
      return;
 8010d56:	bf00      	nop
 8010d58:	e002      	b.n	8010d60 <HAL_UART_IRQHandler+0x6a0>
      return;
 8010d5a:	bf00      	nop
 8010d5c:	e000      	b.n	8010d60 <HAL_UART_IRQHandler+0x6a0>
    return;
 8010d5e:	bf00      	nop
  }
}
 8010d60:	37e8      	adds	r7, #232	@ 0xe8
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}
 8010d66:	bf00      	nop

08010d68 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b083      	sub	sp, #12
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010d70:	bf00      	nop
 8010d72:	370c      	adds	r7, #12
 8010d74:	46bd      	mov	sp, r7
 8010d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7a:	4770      	bx	lr

08010d7c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010d84:	bf00      	nop
 8010d86:	370c      	adds	r7, #12
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr

08010d90 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010d90:	b480      	push	{r7}
 8010d92:	b083      	sub	sp, #12
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010d98:	bf00      	nop
 8010d9a:	370c      	adds	r7, #12
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010da4:	b480      	push	{r7}
 8010da6:	b083      	sub	sp, #12
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8010dac:	bf00      	nop
 8010dae:	370c      	adds	r7, #12
 8010db0:	46bd      	mov	sp, r7
 8010db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db6:	4770      	bx	lr

08010db8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010dc0:	bf00      	nop
 8010dc2:	370c      	adds	r7, #12
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr

08010dcc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b083      	sub	sp, #12
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8010dd4:	bf00      	nop
 8010dd6:	370c      	adds	r7, #12
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dde:	4770      	bx	lr

08010de0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b083      	sub	sp, #12
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8010de8:	bf00      	nop
 8010dea:	370c      	adds	r7, #12
 8010dec:	46bd      	mov	sp, r7
 8010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df2:	4770      	bx	lr

08010df4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8010df4:	b480      	push	{r7}
 8010df6:	b083      	sub	sp, #12
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8010dfc:	bf00      	nop
 8010dfe:	370c      	adds	r7, #12
 8010e00:	46bd      	mov	sp, r7
 8010e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e06:	4770      	bx	lr

08010e08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010e08:	b480      	push	{r7}
 8010e0a:	b083      	sub	sp, #12
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
 8010e10:	460b      	mov	r3, r1
 8010e12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010e14:	bf00      	nop
 8010e16:	370c      	adds	r7, #12
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1e:	4770      	bx	lr

08010e20 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	4a09      	ldr	r2, [pc, #36]	@ (8010e54 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8010e30:	4293      	cmp	r3, r2
 8010e32:	d009      	beq.n	8010e48 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	695b      	ldr	r3, [r3, #20]
 8010e3a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	683a      	ldr	r2, [r7, #0]
 8010e44:	430a      	orrs	r2, r1
 8010e46:	615a      	str	r2, [r3, #20]
  }
}
 8010e48:	bf00      	nop
 8010e4a:	370c      	adds	r7, #12
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e52:	4770      	bx	lr
 8010e54:	40008000 	.word	0x40008000

08010e58 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8010e58:	b480      	push	{r7}
 8010e5a:	b083      	sub	sp, #12
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	4a18      	ldr	r2, [pc, #96]	@ (8010ec8 <HAL_UART_EnableReceiverTimeout+0x70>)
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d027      	beq.n	8010eba <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010e70:	2b20      	cmp	r3, #32
 8010e72:	d120      	bne.n	8010eb6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d101      	bne.n	8010e82 <HAL_UART_EnableReceiverTimeout+0x2a>
 8010e7e:	2302      	movs	r3, #2
 8010e80:	e01c      	b.n	8010ebc <HAL_UART_EnableReceiverTimeout+0x64>
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	2201      	movs	r2, #1
 8010e86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2224      	movs	r2, #36	@ 0x24
 8010e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	685a      	ldr	r2, [r3, #4]
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8010ea0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2220      	movs	r2, #32
 8010ea6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2200      	movs	r2, #0
 8010eae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	e002      	b.n	8010ebc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8010eb6:	2302      	movs	r3, #2
 8010eb8:	e000      	b.n	8010ebc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8010eba:	2301      	movs	r3, #1
  }
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	370c      	adds	r7, #12
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr
 8010ec8:	40008000 	.word	0x40008000

08010ecc <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b083      	sub	sp, #12
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	370c      	adds	r7, #12
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee4:	4770      	bx	lr
	...

08010ee8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	b083      	sub	sp, #12
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8010f5c <UART_InitCallbacksToDefault+0x74>)
 8010ef4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	4a19      	ldr	r2, [pc, #100]	@ (8010f60 <UART_InitCallbacksToDefault+0x78>)
 8010efc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	4a18      	ldr	r2, [pc, #96]	@ (8010f64 <UART_InitCallbacksToDefault+0x7c>)
 8010f04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	4a17      	ldr	r2, [pc, #92]	@ (8010f68 <UART_InitCallbacksToDefault+0x80>)
 8010f0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4a16      	ldr	r2, [pc, #88]	@ (8010f6c <UART_InitCallbacksToDefault+0x84>)
 8010f14:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4a15      	ldr	r2, [pc, #84]	@ (8010f70 <UART_InitCallbacksToDefault+0x88>)
 8010f1c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	4a14      	ldr	r2, [pc, #80]	@ (8010f74 <UART_InitCallbacksToDefault+0x8c>)
 8010f24:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	4a13      	ldr	r2, [pc, #76]	@ (8010f78 <UART_InitCallbacksToDefault+0x90>)
 8010f2c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	4a12      	ldr	r2, [pc, #72]	@ (8010f7c <UART_InitCallbacksToDefault+0x94>)
 8010f34:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	4a11      	ldr	r2, [pc, #68]	@ (8010f80 <UART_InitCallbacksToDefault+0x98>)
 8010f3c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	4a10      	ldr	r2, [pc, #64]	@ (8010f84 <UART_InitCallbacksToDefault+0x9c>)
 8010f44:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8010f88 <UART_InitCallbacksToDefault+0xa0>)
 8010f4c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8010f50:	bf00      	nop
 8010f52:	370c      	adds	r7, #12
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr
 8010f5c:	08010d7d 	.word	0x08010d7d
 8010f60:	08010d69 	.word	0x08010d69
 8010f64:	08010da5 	.word	0x08010da5
 8010f68:	08010d91 	.word	0x08010d91
 8010f6c:	08010db9 	.word	0x08010db9
 8010f70:	08010dcd 	.word	0x08010dcd
 8010f74:	08010de1 	.word	0x08010de1
 8010f78:	08010df5 	.word	0x08010df5
 8010f7c:	08011ed1 	.word	0x08011ed1
 8010f80:	08011ee5 	.word	0x08011ee5
 8010f84:	08011ef9 	.word	0x08011ef9
 8010f88:	08010e09 	.word	0x08010e09

08010f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010f90:	b08c      	sub	sp, #48	@ 0x30
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010f96:	2300      	movs	r3, #0
 8010f98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	689a      	ldr	r2, [r3, #8]
 8010fa0:	697b      	ldr	r3, [r7, #20]
 8010fa2:	691b      	ldr	r3, [r3, #16]
 8010fa4:	431a      	orrs	r2, r3
 8010fa6:	697b      	ldr	r3, [r7, #20]
 8010fa8:	695b      	ldr	r3, [r3, #20]
 8010faa:	431a      	orrs	r2, r3
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	69db      	ldr	r3, [r3, #28]
 8010fb0:	4313      	orrs	r3, r2
 8010fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	681a      	ldr	r2, [r3, #0]
 8010fba:	4baa      	ldr	r3, [pc, #680]	@ (8011264 <UART_SetConfig+0x2d8>)
 8010fbc:	4013      	ands	r3, r2
 8010fbe:	697a      	ldr	r2, [r7, #20]
 8010fc0:	6812      	ldr	r2, [r2, #0]
 8010fc2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010fc4:	430b      	orrs	r3, r1
 8010fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	685b      	ldr	r3, [r3, #4]
 8010fce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8010fd2:	697b      	ldr	r3, [r7, #20]
 8010fd4:	68da      	ldr	r2, [r3, #12]
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	430a      	orrs	r2, r1
 8010fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	699b      	ldr	r3, [r3, #24]
 8010fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010fe4:	697b      	ldr	r3, [r7, #20]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	4a9f      	ldr	r2, [pc, #636]	@ (8011268 <UART_SetConfig+0x2dc>)
 8010fea:	4293      	cmp	r3, r2
 8010fec:	d004      	beq.n	8010ff8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	6a1b      	ldr	r3, [r3, #32]
 8010ff2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010ff4:	4313      	orrs	r3, r2
 8010ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	689b      	ldr	r3, [r3, #8]
 8010ffe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8011002:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8011006:	697a      	ldr	r2, [r7, #20]
 8011008:	6812      	ldr	r2, [r2, #0]
 801100a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801100c:	430b      	orrs	r3, r1
 801100e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011010:	697b      	ldr	r3, [r7, #20]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011016:	f023 010f 	bic.w	r1, r3, #15
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801101e:	697b      	ldr	r3, [r7, #20]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	430a      	orrs	r2, r1
 8011024:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011026:	697b      	ldr	r3, [r7, #20]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4a90      	ldr	r2, [pc, #576]	@ (801126c <UART_SetConfig+0x2e0>)
 801102c:	4293      	cmp	r3, r2
 801102e:	d125      	bne.n	801107c <UART_SetConfig+0xf0>
 8011030:	4b8f      	ldr	r3, [pc, #572]	@ (8011270 <UART_SetConfig+0x2e4>)
 8011032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011036:	f003 0303 	and.w	r3, r3, #3
 801103a:	2b03      	cmp	r3, #3
 801103c:	d81a      	bhi.n	8011074 <UART_SetConfig+0xe8>
 801103e:	a201      	add	r2, pc, #4	@ (adr r2, 8011044 <UART_SetConfig+0xb8>)
 8011040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011044:	08011055 	.word	0x08011055
 8011048:	08011065 	.word	0x08011065
 801104c:	0801105d 	.word	0x0801105d
 8011050:	0801106d 	.word	0x0801106d
 8011054:	2301      	movs	r3, #1
 8011056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801105a:	e116      	b.n	801128a <UART_SetConfig+0x2fe>
 801105c:	2302      	movs	r3, #2
 801105e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011062:	e112      	b.n	801128a <UART_SetConfig+0x2fe>
 8011064:	2304      	movs	r3, #4
 8011066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801106a:	e10e      	b.n	801128a <UART_SetConfig+0x2fe>
 801106c:	2308      	movs	r3, #8
 801106e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011072:	e10a      	b.n	801128a <UART_SetConfig+0x2fe>
 8011074:	2310      	movs	r3, #16
 8011076:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801107a:	e106      	b.n	801128a <UART_SetConfig+0x2fe>
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	4a7c      	ldr	r2, [pc, #496]	@ (8011274 <UART_SetConfig+0x2e8>)
 8011082:	4293      	cmp	r3, r2
 8011084:	d138      	bne.n	80110f8 <UART_SetConfig+0x16c>
 8011086:	4b7a      	ldr	r3, [pc, #488]	@ (8011270 <UART_SetConfig+0x2e4>)
 8011088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801108c:	f003 030c 	and.w	r3, r3, #12
 8011090:	2b0c      	cmp	r3, #12
 8011092:	d82d      	bhi.n	80110f0 <UART_SetConfig+0x164>
 8011094:	a201      	add	r2, pc, #4	@ (adr r2, 801109c <UART_SetConfig+0x110>)
 8011096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801109a:	bf00      	nop
 801109c:	080110d1 	.word	0x080110d1
 80110a0:	080110f1 	.word	0x080110f1
 80110a4:	080110f1 	.word	0x080110f1
 80110a8:	080110f1 	.word	0x080110f1
 80110ac:	080110e1 	.word	0x080110e1
 80110b0:	080110f1 	.word	0x080110f1
 80110b4:	080110f1 	.word	0x080110f1
 80110b8:	080110f1 	.word	0x080110f1
 80110bc:	080110d9 	.word	0x080110d9
 80110c0:	080110f1 	.word	0x080110f1
 80110c4:	080110f1 	.word	0x080110f1
 80110c8:	080110f1 	.word	0x080110f1
 80110cc:	080110e9 	.word	0x080110e9
 80110d0:	2300      	movs	r3, #0
 80110d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110d6:	e0d8      	b.n	801128a <UART_SetConfig+0x2fe>
 80110d8:	2302      	movs	r3, #2
 80110da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110de:	e0d4      	b.n	801128a <UART_SetConfig+0x2fe>
 80110e0:	2304      	movs	r3, #4
 80110e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110e6:	e0d0      	b.n	801128a <UART_SetConfig+0x2fe>
 80110e8:	2308      	movs	r3, #8
 80110ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110ee:	e0cc      	b.n	801128a <UART_SetConfig+0x2fe>
 80110f0:	2310      	movs	r3, #16
 80110f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80110f6:	e0c8      	b.n	801128a <UART_SetConfig+0x2fe>
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	4a5e      	ldr	r2, [pc, #376]	@ (8011278 <UART_SetConfig+0x2ec>)
 80110fe:	4293      	cmp	r3, r2
 8011100:	d125      	bne.n	801114e <UART_SetConfig+0x1c2>
 8011102:	4b5b      	ldr	r3, [pc, #364]	@ (8011270 <UART_SetConfig+0x2e4>)
 8011104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011108:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801110c:	2b30      	cmp	r3, #48	@ 0x30
 801110e:	d016      	beq.n	801113e <UART_SetConfig+0x1b2>
 8011110:	2b30      	cmp	r3, #48	@ 0x30
 8011112:	d818      	bhi.n	8011146 <UART_SetConfig+0x1ba>
 8011114:	2b20      	cmp	r3, #32
 8011116:	d00a      	beq.n	801112e <UART_SetConfig+0x1a2>
 8011118:	2b20      	cmp	r3, #32
 801111a:	d814      	bhi.n	8011146 <UART_SetConfig+0x1ba>
 801111c:	2b00      	cmp	r3, #0
 801111e:	d002      	beq.n	8011126 <UART_SetConfig+0x19a>
 8011120:	2b10      	cmp	r3, #16
 8011122:	d008      	beq.n	8011136 <UART_SetConfig+0x1aa>
 8011124:	e00f      	b.n	8011146 <UART_SetConfig+0x1ba>
 8011126:	2300      	movs	r3, #0
 8011128:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801112c:	e0ad      	b.n	801128a <UART_SetConfig+0x2fe>
 801112e:	2302      	movs	r3, #2
 8011130:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011134:	e0a9      	b.n	801128a <UART_SetConfig+0x2fe>
 8011136:	2304      	movs	r3, #4
 8011138:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801113c:	e0a5      	b.n	801128a <UART_SetConfig+0x2fe>
 801113e:	2308      	movs	r3, #8
 8011140:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011144:	e0a1      	b.n	801128a <UART_SetConfig+0x2fe>
 8011146:	2310      	movs	r3, #16
 8011148:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801114c:	e09d      	b.n	801128a <UART_SetConfig+0x2fe>
 801114e:	697b      	ldr	r3, [r7, #20]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4a4a      	ldr	r2, [pc, #296]	@ (801127c <UART_SetConfig+0x2f0>)
 8011154:	4293      	cmp	r3, r2
 8011156:	d125      	bne.n	80111a4 <UART_SetConfig+0x218>
 8011158:	4b45      	ldr	r3, [pc, #276]	@ (8011270 <UART_SetConfig+0x2e4>)
 801115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801115e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011162:	2bc0      	cmp	r3, #192	@ 0xc0
 8011164:	d016      	beq.n	8011194 <UART_SetConfig+0x208>
 8011166:	2bc0      	cmp	r3, #192	@ 0xc0
 8011168:	d818      	bhi.n	801119c <UART_SetConfig+0x210>
 801116a:	2b80      	cmp	r3, #128	@ 0x80
 801116c:	d00a      	beq.n	8011184 <UART_SetConfig+0x1f8>
 801116e:	2b80      	cmp	r3, #128	@ 0x80
 8011170:	d814      	bhi.n	801119c <UART_SetConfig+0x210>
 8011172:	2b00      	cmp	r3, #0
 8011174:	d002      	beq.n	801117c <UART_SetConfig+0x1f0>
 8011176:	2b40      	cmp	r3, #64	@ 0x40
 8011178:	d008      	beq.n	801118c <UART_SetConfig+0x200>
 801117a:	e00f      	b.n	801119c <UART_SetConfig+0x210>
 801117c:	2300      	movs	r3, #0
 801117e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011182:	e082      	b.n	801128a <UART_SetConfig+0x2fe>
 8011184:	2302      	movs	r3, #2
 8011186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801118a:	e07e      	b.n	801128a <UART_SetConfig+0x2fe>
 801118c:	2304      	movs	r3, #4
 801118e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011192:	e07a      	b.n	801128a <UART_SetConfig+0x2fe>
 8011194:	2308      	movs	r3, #8
 8011196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801119a:	e076      	b.n	801128a <UART_SetConfig+0x2fe>
 801119c:	2310      	movs	r3, #16
 801119e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80111a2:	e072      	b.n	801128a <UART_SetConfig+0x2fe>
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	4a35      	ldr	r2, [pc, #212]	@ (8011280 <UART_SetConfig+0x2f4>)
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d12a      	bne.n	8011204 <UART_SetConfig+0x278>
 80111ae:	4b30      	ldr	r3, [pc, #192]	@ (8011270 <UART_SetConfig+0x2e4>)
 80111b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80111b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80111b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80111bc:	d01a      	beq.n	80111f4 <UART_SetConfig+0x268>
 80111be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80111c2:	d81b      	bhi.n	80111fc <UART_SetConfig+0x270>
 80111c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80111c8:	d00c      	beq.n	80111e4 <UART_SetConfig+0x258>
 80111ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80111ce:	d815      	bhi.n	80111fc <UART_SetConfig+0x270>
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d003      	beq.n	80111dc <UART_SetConfig+0x250>
 80111d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80111d8:	d008      	beq.n	80111ec <UART_SetConfig+0x260>
 80111da:	e00f      	b.n	80111fc <UART_SetConfig+0x270>
 80111dc:	2300      	movs	r3, #0
 80111de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80111e2:	e052      	b.n	801128a <UART_SetConfig+0x2fe>
 80111e4:	2302      	movs	r3, #2
 80111e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80111ea:	e04e      	b.n	801128a <UART_SetConfig+0x2fe>
 80111ec:	2304      	movs	r3, #4
 80111ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80111f2:	e04a      	b.n	801128a <UART_SetConfig+0x2fe>
 80111f4:	2308      	movs	r3, #8
 80111f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80111fa:	e046      	b.n	801128a <UART_SetConfig+0x2fe>
 80111fc:	2310      	movs	r3, #16
 80111fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011202:	e042      	b.n	801128a <UART_SetConfig+0x2fe>
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	4a17      	ldr	r2, [pc, #92]	@ (8011268 <UART_SetConfig+0x2dc>)
 801120a:	4293      	cmp	r3, r2
 801120c:	d13a      	bne.n	8011284 <UART_SetConfig+0x2f8>
 801120e:	4b18      	ldr	r3, [pc, #96]	@ (8011270 <UART_SetConfig+0x2e4>)
 8011210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011214:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8011218:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801121c:	d01a      	beq.n	8011254 <UART_SetConfig+0x2c8>
 801121e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011222:	d81b      	bhi.n	801125c <UART_SetConfig+0x2d0>
 8011224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011228:	d00c      	beq.n	8011244 <UART_SetConfig+0x2b8>
 801122a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801122e:	d815      	bhi.n	801125c <UART_SetConfig+0x2d0>
 8011230:	2b00      	cmp	r3, #0
 8011232:	d003      	beq.n	801123c <UART_SetConfig+0x2b0>
 8011234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011238:	d008      	beq.n	801124c <UART_SetConfig+0x2c0>
 801123a:	e00f      	b.n	801125c <UART_SetConfig+0x2d0>
 801123c:	2300      	movs	r3, #0
 801123e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011242:	e022      	b.n	801128a <UART_SetConfig+0x2fe>
 8011244:	2302      	movs	r3, #2
 8011246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801124a:	e01e      	b.n	801128a <UART_SetConfig+0x2fe>
 801124c:	2304      	movs	r3, #4
 801124e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011252:	e01a      	b.n	801128a <UART_SetConfig+0x2fe>
 8011254:	2308      	movs	r3, #8
 8011256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801125a:	e016      	b.n	801128a <UART_SetConfig+0x2fe>
 801125c:	2310      	movs	r3, #16
 801125e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8011262:	e012      	b.n	801128a <UART_SetConfig+0x2fe>
 8011264:	cfff69f3 	.word	0xcfff69f3
 8011268:	40008000 	.word	0x40008000
 801126c:	40013800 	.word	0x40013800
 8011270:	40021000 	.word	0x40021000
 8011274:	40004400 	.word	0x40004400
 8011278:	40004800 	.word	0x40004800
 801127c:	40004c00 	.word	0x40004c00
 8011280:	40005000 	.word	0x40005000
 8011284:	2310      	movs	r3, #16
 8011286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	4aae      	ldr	r2, [pc, #696]	@ (8011548 <UART_SetConfig+0x5bc>)
 8011290:	4293      	cmp	r3, r2
 8011292:	f040 8097 	bne.w	80113c4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011296:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801129a:	2b08      	cmp	r3, #8
 801129c:	d823      	bhi.n	80112e6 <UART_SetConfig+0x35a>
 801129e:	a201      	add	r2, pc, #4	@ (adr r2, 80112a4 <UART_SetConfig+0x318>)
 80112a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a4:	080112c9 	.word	0x080112c9
 80112a8:	080112e7 	.word	0x080112e7
 80112ac:	080112d1 	.word	0x080112d1
 80112b0:	080112e7 	.word	0x080112e7
 80112b4:	080112d7 	.word	0x080112d7
 80112b8:	080112e7 	.word	0x080112e7
 80112bc:	080112e7 	.word	0x080112e7
 80112c0:	080112e7 	.word	0x080112e7
 80112c4:	080112df 	.word	0x080112df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80112c8:	f7fc fc6c 	bl	800dba4 <HAL_RCC_GetPCLK1Freq>
 80112cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80112ce:	e010      	b.n	80112f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80112d0:	4b9e      	ldr	r3, [pc, #632]	@ (801154c <UART_SetConfig+0x5c0>)
 80112d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80112d4:	e00d      	b.n	80112f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80112d6:	f7fc fbf7 	bl	800dac8 <HAL_RCC_GetSysClockFreq>
 80112da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80112dc:	e009      	b.n	80112f2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80112de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80112e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80112e4:	e005      	b.n	80112f2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80112e6:	2300      	movs	r3, #0
 80112e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80112ea:	2301      	movs	r3, #1
 80112ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80112f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80112f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	f000 8130 	beq.w	801155a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80112fa:	697b      	ldr	r3, [r7, #20]
 80112fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80112fe:	4a94      	ldr	r2, [pc, #592]	@ (8011550 <UART_SetConfig+0x5c4>)
 8011300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011304:	461a      	mov	r2, r3
 8011306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011308:	fbb3 f3f2 	udiv	r3, r3, r2
 801130c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801130e:	697b      	ldr	r3, [r7, #20]
 8011310:	685a      	ldr	r2, [r3, #4]
 8011312:	4613      	mov	r3, r2
 8011314:	005b      	lsls	r3, r3, #1
 8011316:	4413      	add	r3, r2
 8011318:	69ba      	ldr	r2, [r7, #24]
 801131a:	429a      	cmp	r2, r3
 801131c:	d305      	bcc.n	801132a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801131e:	697b      	ldr	r3, [r7, #20]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011324:	69ba      	ldr	r2, [r7, #24]
 8011326:	429a      	cmp	r2, r3
 8011328:	d903      	bls.n	8011332 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801132a:	2301      	movs	r3, #1
 801132c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8011330:	e113      	b.n	801155a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011334:	2200      	movs	r2, #0
 8011336:	60bb      	str	r3, [r7, #8]
 8011338:	60fa      	str	r2, [r7, #12]
 801133a:	697b      	ldr	r3, [r7, #20]
 801133c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801133e:	4a84      	ldr	r2, [pc, #528]	@ (8011550 <UART_SetConfig+0x5c4>)
 8011340:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011344:	b29b      	uxth	r3, r3
 8011346:	2200      	movs	r2, #0
 8011348:	603b      	str	r3, [r7, #0]
 801134a:	607a      	str	r2, [r7, #4]
 801134c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011350:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011354:	f7ef fc4e 	bl	8000bf4 <__aeabi_uldivmod>
 8011358:	4602      	mov	r2, r0
 801135a:	460b      	mov	r3, r1
 801135c:	4610      	mov	r0, r2
 801135e:	4619      	mov	r1, r3
 8011360:	f04f 0200 	mov.w	r2, #0
 8011364:	f04f 0300 	mov.w	r3, #0
 8011368:	020b      	lsls	r3, r1, #8
 801136a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801136e:	0202      	lsls	r2, r0, #8
 8011370:	6979      	ldr	r1, [r7, #20]
 8011372:	6849      	ldr	r1, [r1, #4]
 8011374:	0849      	lsrs	r1, r1, #1
 8011376:	2000      	movs	r0, #0
 8011378:	460c      	mov	r4, r1
 801137a:	4605      	mov	r5, r0
 801137c:	eb12 0804 	adds.w	r8, r2, r4
 8011380:	eb43 0905 	adc.w	r9, r3, r5
 8011384:	697b      	ldr	r3, [r7, #20]
 8011386:	685b      	ldr	r3, [r3, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	469a      	mov	sl, r3
 801138c:	4693      	mov	fp, r2
 801138e:	4652      	mov	r2, sl
 8011390:	465b      	mov	r3, fp
 8011392:	4640      	mov	r0, r8
 8011394:	4649      	mov	r1, r9
 8011396:	f7ef fc2d 	bl	8000bf4 <__aeabi_uldivmod>
 801139a:	4602      	mov	r2, r0
 801139c:	460b      	mov	r3, r1
 801139e:	4613      	mov	r3, r2
 80113a0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80113a2:	6a3b      	ldr	r3, [r7, #32]
 80113a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80113a8:	d308      	bcc.n	80113bc <UART_SetConfig+0x430>
 80113aa:	6a3b      	ldr	r3, [r7, #32]
 80113ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80113b0:	d204      	bcs.n	80113bc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	6a3a      	ldr	r2, [r7, #32]
 80113b8:	60da      	str	r2, [r3, #12]
 80113ba:	e0ce      	b.n	801155a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80113bc:	2301      	movs	r3, #1
 80113be:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80113c2:	e0ca      	b.n	801155a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80113c4:	697b      	ldr	r3, [r7, #20]
 80113c6:	69db      	ldr	r3, [r3, #28]
 80113c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80113cc:	d166      	bne.n	801149c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80113ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80113d2:	2b08      	cmp	r3, #8
 80113d4:	d827      	bhi.n	8011426 <UART_SetConfig+0x49a>
 80113d6:	a201      	add	r2, pc, #4	@ (adr r2, 80113dc <UART_SetConfig+0x450>)
 80113d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113dc:	08011401 	.word	0x08011401
 80113e0:	08011409 	.word	0x08011409
 80113e4:	08011411 	.word	0x08011411
 80113e8:	08011427 	.word	0x08011427
 80113ec:	08011417 	.word	0x08011417
 80113f0:	08011427 	.word	0x08011427
 80113f4:	08011427 	.word	0x08011427
 80113f8:	08011427 	.word	0x08011427
 80113fc:	0801141f 	.word	0x0801141f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011400:	f7fc fbd0 	bl	800dba4 <HAL_RCC_GetPCLK1Freq>
 8011404:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8011406:	e014      	b.n	8011432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011408:	f7fc fbe2 	bl	800dbd0 <HAL_RCC_GetPCLK2Freq>
 801140c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801140e:	e010      	b.n	8011432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011410:	4b4e      	ldr	r3, [pc, #312]	@ (801154c <UART_SetConfig+0x5c0>)
 8011412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011414:	e00d      	b.n	8011432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011416:	f7fc fb57 	bl	800dac8 <HAL_RCC_GetSysClockFreq>
 801141a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801141c:	e009      	b.n	8011432 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801141e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011422:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8011424:	e005      	b.n	8011432 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8011426:	2300      	movs	r3, #0
 8011428:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801142a:	2301      	movs	r3, #1
 801142c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011434:	2b00      	cmp	r3, #0
 8011436:	f000 8090 	beq.w	801155a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801143a:	697b      	ldr	r3, [r7, #20]
 801143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801143e:	4a44      	ldr	r2, [pc, #272]	@ (8011550 <UART_SetConfig+0x5c4>)
 8011440:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011444:	461a      	mov	r2, r3
 8011446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011448:	fbb3 f3f2 	udiv	r3, r3, r2
 801144c:	005a      	lsls	r2, r3, #1
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	085b      	lsrs	r3, r3, #1
 8011454:	441a      	add	r2, r3
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	685b      	ldr	r3, [r3, #4]
 801145a:	fbb2 f3f3 	udiv	r3, r2, r3
 801145e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011460:	6a3b      	ldr	r3, [r7, #32]
 8011462:	2b0f      	cmp	r3, #15
 8011464:	d916      	bls.n	8011494 <UART_SetConfig+0x508>
 8011466:	6a3b      	ldr	r3, [r7, #32]
 8011468:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801146c:	d212      	bcs.n	8011494 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801146e:	6a3b      	ldr	r3, [r7, #32]
 8011470:	b29b      	uxth	r3, r3
 8011472:	f023 030f 	bic.w	r3, r3, #15
 8011476:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011478:	6a3b      	ldr	r3, [r7, #32]
 801147a:	085b      	lsrs	r3, r3, #1
 801147c:	b29b      	uxth	r3, r3
 801147e:	f003 0307 	and.w	r3, r3, #7
 8011482:	b29a      	uxth	r2, r3
 8011484:	8bfb      	ldrh	r3, [r7, #30]
 8011486:	4313      	orrs	r3, r2
 8011488:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	8bfa      	ldrh	r2, [r7, #30]
 8011490:	60da      	str	r2, [r3, #12]
 8011492:	e062      	b.n	801155a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8011494:	2301      	movs	r3, #1
 8011496:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 801149a:	e05e      	b.n	801155a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801149c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80114a0:	2b08      	cmp	r3, #8
 80114a2:	d828      	bhi.n	80114f6 <UART_SetConfig+0x56a>
 80114a4:	a201      	add	r2, pc, #4	@ (adr r2, 80114ac <UART_SetConfig+0x520>)
 80114a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114aa:	bf00      	nop
 80114ac:	080114d1 	.word	0x080114d1
 80114b0:	080114d9 	.word	0x080114d9
 80114b4:	080114e1 	.word	0x080114e1
 80114b8:	080114f7 	.word	0x080114f7
 80114bc:	080114e7 	.word	0x080114e7
 80114c0:	080114f7 	.word	0x080114f7
 80114c4:	080114f7 	.word	0x080114f7
 80114c8:	080114f7 	.word	0x080114f7
 80114cc:	080114ef 	.word	0x080114ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80114d0:	f7fc fb68 	bl	800dba4 <HAL_RCC_GetPCLK1Freq>
 80114d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80114d6:	e014      	b.n	8011502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80114d8:	f7fc fb7a 	bl	800dbd0 <HAL_RCC_GetPCLK2Freq>
 80114dc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80114de:	e010      	b.n	8011502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80114e0:	4b1a      	ldr	r3, [pc, #104]	@ (801154c <UART_SetConfig+0x5c0>)
 80114e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80114e4:	e00d      	b.n	8011502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80114e6:	f7fc faef 	bl	800dac8 <HAL_RCC_GetSysClockFreq>
 80114ea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80114ec:	e009      	b.n	8011502 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80114ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80114f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80114f4:	e005      	b.n	8011502 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80114f6:	2300      	movs	r3, #0
 80114f8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80114fa:	2301      	movs	r3, #1
 80114fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8011500:	bf00      	nop
    }

    if (pclk != 0U)
 8011502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011504:	2b00      	cmp	r3, #0
 8011506:	d028      	beq.n	801155a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801150c:	4a10      	ldr	r2, [pc, #64]	@ (8011550 <UART_SetConfig+0x5c4>)
 801150e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011512:	461a      	mov	r2, r3
 8011514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011516:	fbb3 f2f2 	udiv	r2, r3, r2
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	085b      	lsrs	r3, r3, #1
 8011520:	441a      	add	r2, r3
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	fbb2 f3f3 	udiv	r3, r2, r3
 801152a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801152c:	6a3b      	ldr	r3, [r7, #32]
 801152e:	2b0f      	cmp	r3, #15
 8011530:	d910      	bls.n	8011554 <UART_SetConfig+0x5c8>
 8011532:	6a3b      	ldr	r3, [r7, #32]
 8011534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011538:	d20c      	bcs.n	8011554 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801153a:	6a3b      	ldr	r3, [r7, #32]
 801153c:	b29a      	uxth	r2, r3
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	60da      	str	r2, [r3, #12]
 8011544:	e009      	b.n	801155a <UART_SetConfig+0x5ce>
 8011546:	bf00      	nop
 8011548:	40008000 	.word	0x40008000
 801154c:	00f42400 	.word	0x00f42400
 8011550:	08014bb0 	.word	0x08014bb0
      }
      else
      {
        ret = HAL_ERROR;
 8011554:	2301      	movs	r3, #1
 8011556:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	2201      	movs	r2, #1
 801155e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011562:	697b      	ldr	r3, [r7, #20]
 8011564:	2201      	movs	r2, #1
 8011566:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	2200      	movs	r2, #0
 801156e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	2200      	movs	r2, #0
 8011574:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8011576:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 801157a:	4618      	mov	r0, r3
 801157c:	3730      	adds	r7, #48	@ 0x30
 801157e:	46bd      	mov	sp, r7
 8011580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08011584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011584:	b480      	push	{r7}
 8011586:	b083      	sub	sp, #12
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011590:	f003 0308 	and.w	r3, r3, #8
 8011594:	2b00      	cmp	r3, #0
 8011596:	d00a      	beq.n	80115ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	685b      	ldr	r3, [r3, #4]
 801159e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	430a      	orrs	r2, r1
 80115ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115b2:	f003 0301 	and.w	r3, r3, #1
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d00a      	beq.n	80115d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	685b      	ldr	r3, [r3, #4]
 80115c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	430a      	orrs	r2, r1
 80115ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115d4:	f003 0302 	and.w	r3, r3, #2
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d00a      	beq.n	80115f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	685b      	ldr	r3, [r3, #4]
 80115e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	430a      	orrs	r2, r1
 80115f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115f6:	f003 0304 	and.w	r3, r3, #4
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d00a      	beq.n	8011614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	685b      	ldr	r3, [r3, #4]
 8011604:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	430a      	orrs	r2, r1
 8011612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011618:	f003 0310 	and.w	r3, r3, #16
 801161c:	2b00      	cmp	r3, #0
 801161e:	d00a      	beq.n	8011636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	689b      	ldr	r3, [r3, #8]
 8011626:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	430a      	orrs	r2, r1
 8011634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801163a:	f003 0320 	and.w	r3, r3, #32
 801163e:	2b00      	cmp	r3, #0
 8011640:	d00a      	beq.n	8011658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	689b      	ldr	r3, [r3, #8]
 8011648:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	430a      	orrs	r2, r1
 8011656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801165c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011660:	2b00      	cmp	r3, #0
 8011662:	d01a      	beq.n	801169a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	685b      	ldr	r3, [r3, #4]
 801166a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	430a      	orrs	r2, r1
 8011678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801167e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011682:	d10a      	bne.n	801169a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	685b      	ldr	r3, [r3, #4]
 801168a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	430a      	orrs	r2, r1
 8011698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801169e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d00a      	beq.n	80116bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	685b      	ldr	r3, [r3, #4]
 80116ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	430a      	orrs	r2, r1
 80116ba:	605a      	str	r2, [r3, #4]
  }
}
 80116bc:	bf00      	nop
 80116be:	370c      	adds	r7, #12
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr

080116c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b098      	sub	sp, #96	@ 0x60
 80116cc:	af02      	add	r7, sp, #8
 80116ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	2200      	movs	r2, #0
 80116d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80116d8:	f7f9 fa4a 	bl	800ab70 <HAL_GetTick>
 80116dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f003 0308 	and.w	r3, r3, #8
 80116e8:	2b08      	cmp	r3, #8
 80116ea:	d12f      	bne.n	801174c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80116ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80116f0:	9300      	str	r3, [sp, #0]
 80116f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80116f4:	2200      	movs	r2, #0
 80116f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f000 f88e 	bl	801181c <UART_WaitOnFlagUntilTimeout>
 8011700:	4603      	mov	r3, r0
 8011702:	2b00      	cmp	r3, #0
 8011704:	d022      	beq.n	801174c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801170c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801170e:	e853 3f00 	ldrex	r3, [r3]
 8011712:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801171a:	653b      	str	r3, [r7, #80]	@ 0x50
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	461a      	mov	r2, r3
 8011722:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011724:	647b      	str	r3, [r7, #68]	@ 0x44
 8011726:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011728:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801172a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801172c:	e841 2300 	strex	r3, r2, [r1]
 8011730:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011734:	2b00      	cmp	r3, #0
 8011736:	d1e6      	bne.n	8011706 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	2220      	movs	r2, #32
 801173c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2200      	movs	r2, #0
 8011744:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011748:	2303      	movs	r3, #3
 801174a:	e063      	b.n	8011814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	f003 0304 	and.w	r3, r3, #4
 8011756:	2b04      	cmp	r3, #4
 8011758:	d149      	bne.n	80117ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801175a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801175e:	9300      	str	r3, [sp, #0]
 8011760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011762:	2200      	movs	r2, #0
 8011764:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f000 f857 	bl	801181c <UART_WaitOnFlagUntilTimeout>
 801176e:	4603      	mov	r3, r0
 8011770:	2b00      	cmp	r3, #0
 8011772:	d03c      	beq.n	80117ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801177c:	e853 3f00 	ldrex	r3, [r3]
 8011780:	623b      	str	r3, [r7, #32]
   return(result);
 8011782:	6a3b      	ldr	r3, [r7, #32]
 8011784:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011788:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	461a      	mov	r2, r3
 8011790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011792:	633b      	str	r3, [r7, #48]	@ 0x30
 8011794:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011798:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801179a:	e841 2300 	strex	r3, r2, [r1]
 801179e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80117a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d1e6      	bne.n	8011774 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	3308      	adds	r3, #8
 80117ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	e853 3f00 	ldrex	r3, [r3]
 80117b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	f023 0301 	bic.w	r3, r3, #1
 80117bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	3308      	adds	r3, #8
 80117c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80117c6:	61fa      	str	r2, [r7, #28]
 80117c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117ca:	69b9      	ldr	r1, [r7, #24]
 80117cc:	69fa      	ldr	r2, [r7, #28]
 80117ce:	e841 2300 	strex	r3, r2, [r1]
 80117d2:	617b      	str	r3, [r7, #20]
   return(result);
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d1e5      	bne.n	80117a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2220      	movs	r2, #32
 80117de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2200      	movs	r2, #0
 80117e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80117ea:	2303      	movs	r3, #3
 80117ec:	e012      	b.n	8011814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	2220      	movs	r2, #32
 80117f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2220      	movs	r2, #32
 80117fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2200      	movs	r2, #0
 8011802:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2200      	movs	r2, #0
 801180e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011812:	2300      	movs	r3, #0
}
 8011814:	4618      	mov	r0, r3
 8011816:	3758      	adds	r7, #88	@ 0x58
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	60f8      	str	r0, [r7, #12]
 8011824:	60b9      	str	r1, [r7, #8]
 8011826:	603b      	str	r3, [r7, #0]
 8011828:	4613      	mov	r3, r2
 801182a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801182c:	e04f      	b.n	80118ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801182e:	69bb      	ldr	r3, [r7, #24]
 8011830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011834:	d04b      	beq.n	80118ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011836:	f7f9 f99b 	bl	800ab70 <HAL_GetTick>
 801183a:	4602      	mov	r2, r0
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	1ad3      	subs	r3, r2, r3
 8011840:	69ba      	ldr	r2, [r7, #24]
 8011842:	429a      	cmp	r2, r3
 8011844:	d302      	bcc.n	801184c <UART_WaitOnFlagUntilTimeout+0x30>
 8011846:	69bb      	ldr	r3, [r7, #24]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d101      	bne.n	8011850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801184c:	2303      	movs	r3, #3
 801184e:	e04e      	b.n	80118ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	681b      	ldr	r3, [r3, #0]
 8011856:	f003 0304 	and.w	r3, r3, #4
 801185a:	2b00      	cmp	r3, #0
 801185c:	d037      	beq.n	80118ce <UART_WaitOnFlagUntilTimeout+0xb2>
 801185e:	68bb      	ldr	r3, [r7, #8]
 8011860:	2b80      	cmp	r3, #128	@ 0x80
 8011862:	d034      	beq.n	80118ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	2b40      	cmp	r3, #64	@ 0x40
 8011868:	d031      	beq.n	80118ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	69db      	ldr	r3, [r3, #28]
 8011870:	f003 0308 	and.w	r3, r3, #8
 8011874:	2b08      	cmp	r3, #8
 8011876:	d110      	bne.n	801189a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	2208      	movs	r2, #8
 801187e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011880:	68f8      	ldr	r0, [r7, #12]
 8011882:	f000 f920 	bl	8011ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	2208      	movs	r2, #8
 801188a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	2200      	movs	r2, #0
 8011892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011896:	2301      	movs	r3, #1
 8011898:	e029      	b.n	80118ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	69db      	ldr	r3, [r3, #28]
 80118a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80118a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80118a8:	d111      	bne.n	80118ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80118b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80118b4:	68f8      	ldr	r0, [r7, #12]
 80118b6:	f000 f906 	bl	8011ac6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2220      	movs	r2, #32
 80118be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2200      	movs	r2, #0
 80118c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80118ca:	2303      	movs	r3, #3
 80118cc:	e00f      	b.n	80118ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	69da      	ldr	r2, [r3, #28]
 80118d4:	68bb      	ldr	r3, [r7, #8]
 80118d6:	4013      	ands	r3, r2
 80118d8:	68ba      	ldr	r2, [r7, #8]
 80118da:	429a      	cmp	r2, r3
 80118dc:	bf0c      	ite	eq
 80118de:	2301      	moveq	r3, #1
 80118e0:	2300      	movne	r3, #0
 80118e2:	b2db      	uxtb	r3, r3
 80118e4:	461a      	mov	r2, r3
 80118e6:	79fb      	ldrb	r3, [r7, #7]
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d0a0      	beq.n	801182e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80118ec:	2300      	movs	r3, #0
}
 80118ee:	4618      	mov	r0, r3
 80118f0:	3710      	adds	r7, #16
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}
	...

080118f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b096      	sub	sp, #88	@ 0x58
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	60f8      	str	r0, [r7, #12]
 8011900:	60b9      	str	r1, [r7, #8]
 8011902:	4613      	mov	r3, r2
 8011904:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	68ba      	ldr	r2, [r7, #8]
 801190a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	88fa      	ldrh	r2, [r7, #6]
 8011910:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2200      	movs	r2, #0
 8011918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	2222      	movs	r2, #34	@ 0x22
 8011920:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801192a:	2b00      	cmp	r3, #0
 801192c:	d02d      	beq.n	801198a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011934:	4a40      	ldr	r2, [pc, #256]	@ (8011a38 <UART_Start_Receive_DMA+0x140>)
 8011936:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801193e:	4a3f      	ldr	r2, [pc, #252]	@ (8011a3c <UART_Start_Receive_DMA+0x144>)
 8011940:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011948:	4a3d      	ldr	r2, [pc, #244]	@ (8011a40 <UART_Start_Receive_DMA+0x148>)
 801194a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011952:	2200      	movs	r2, #0
 8011954:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	3324      	adds	r3, #36	@ 0x24
 8011962:	4619      	mov	r1, r3
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011968:	461a      	mov	r2, r3
 801196a:	88fb      	ldrh	r3, [r7, #6]
 801196c:	f7fa ff3c 	bl	800c7e8 <HAL_DMA_Start_IT>
 8011970:	4603      	mov	r3, r0
 8011972:	2b00      	cmp	r3, #0
 8011974:	d009      	beq.n	801198a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	2210      	movs	r2, #16
 801197a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	2220      	movs	r2, #32
 8011982:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011986:	2301      	movs	r3, #1
 8011988:	e051      	b.n	8011a2e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	691b      	ldr	r3, [r3, #16]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d018      	beq.n	80119c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011998:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801199a:	e853 3f00 	ldrex	r3, [r3]
 801199e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80119a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80119a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	461a      	mov	r2, r3
 80119ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80119b2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80119b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80119b8:	e841 2300 	strex	r3, r2, [r1]
 80119bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80119be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d1e6      	bne.n	8011992 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	3308      	adds	r3, #8
 80119ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80119ce:	e853 3f00 	ldrex	r3, [r3]
 80119d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80119d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119d6:	f043 0301 	orr.w	r3, r3, #1
 80119da:	653b      	str	r3, [r7, #80]	@ 0x50
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	3308      	adds	r3, #8
 80119e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80119e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80119e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80119ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119ec:	e841 2300 	strex	r3, r2, [r1]
 80119f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80119f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d1e5      	bne.n	80119c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	3308      	adds	r3, #8
 80119fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a00:	697b      	ldr	r3, [r7, #20]
 8011a02:	e853 3f00 	ldrex	r3, [r3]
 8011a06:	613b      	str	r3, [r7, #16]
   return(result);
 8011a08:	693b      	ldr	r3, [r7, #16]
 8011a0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	3308      	adds	r3, #8
 8011a16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011a18:	623a      	str	r2, [r7, #32]
 8011a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a1c:	69f9      	ldr	r1, [r7, #28]
 8011a1e:	6a3a      	ldr	r2, [r7, #32]
 8011a20:	e841 2300 	strex	r3, r2, [r1]
 8011a24:	61bb      	str	r3, [r7, #24]
   return(result);
 8011a26:	69bb      	ldr	r3, [r7, #24]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d1e5      	bne.n	80119f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3758      	adds	r7, #88	@ 0x58
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	08011c51 	.word	0x08011c51
 8011a3c:	08011d85 	.word	0x08011d85
 8011a40:	08011dcb 	.word	0x08011dcb

08011a44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b08f      	sub	sp, #60	@ 0x3c
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a52:	6a3b      	ldr	r3, [r7, #32]
 8011a54:	e853 3f00 	ldrex	r3, [r3]
 8011a58:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a5a:	69fb      	ldr	r3, [r7, #28]
 8011a5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011a60:	637b      	str	r3, [r7, #52]	@ 0x34
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	461a      	mov	r2, r3
 8011a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011a6c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011a70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a72:	e841 2300 	strex	r3, r2, [r1]
 8011a76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d1e6      	bne.n	8011a4c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	3308      	adds	r3, #8
 8011a84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	e853 3f00 	ldrex	r3, [r3]
 8011a8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011a94:	633b      	str	r3, [r7, #48]	@ 0x30
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	3308      	adds	r3, #8
 8011a9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a9e:	61ba      	str	r2, [r7, #24]
 8011aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aa2:	6979      	ldr	r1, [r7, #20]
 8011aa4:	69ba      	ldr	r2, [r7, #24]
 8011aa6:	e841 2300 	strex	r3, r2, [r1]
 8011aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8011aac:	693b      	ldr	r3, [r7, #16]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d1e5      	bne.n	8011a7e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	2220      	movs	r2, #32
 8011ab6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011aba:	bf00      	nop
 8011abc:	373c      	adds	r7, #60	@ 0x3c
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac4:	4770      	bx	lr

08011ac6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011ac6:	b480      	push	{r7}
 8011ac8:	b095      	sub	sp, #84	@ 0x54
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ad6:	e853 3f00 	ldrex	r3, [r3]
 8011ada:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ade:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	461a      	mov	r2, r3
 8011aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011aec:	643b      	str	r3, [r7, #64]	@ 0x40
 8011aee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011af0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011af2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011af4:	e841 2300 	strex	r3, r2, [r1]
 8011af8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d1e6      	bne.n	8011ace <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	3308      	adds	r3, #8
 8011b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b08:	6a3b      	ldr	r3, [r7, #32]
 8011b0a:	e853 3f00 	ldrex	r3, [r3]
 8011b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8011b10:	69fb      	ldr	r3, [r7, #28]
 8011b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011b16:	f023 0301 	bic.w	r3, r3, #1
 8011b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	681b      	ldr	r3, [r3, #0]
 8011b20:	3308      	adds	r3, #8
 8011b22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011b24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011b26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b2c:	e841 2300 	strex	r3, r2, [r1]
 8011b30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d1e3      	bne.n	8011b00 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011b3c:	2b01      	cmp	r3, #1
 8011b3e:	d118      	bne.n	8011b72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	e853 3f00 	ldrex	r3, [r3]
 8011b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	f023 0310 	bic.w	r3, r3, #16
 8011b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	461a      	mov	r2, r3
 8011b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b5e:	61bb      	str	r3, [r7, #24]
 8011b60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b62:	6979      	ldr	r1, [r7, #20]
 8011b64:	69ba      	ldr	r2, [r7, #24]
 8011b66:	e841 2300 	strex	r3, r2, [r1]
 8011b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8011b6c:	693b      	ldr	r3, [r7, #16]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1e6      	bne.n	8011b40 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	2220      	movs	r2, #32
 8011b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2200      	movs	r2, #0
 8011b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2200      	movs	r2, #0
 8011b84:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011b86:	bf00      	nop
 8011b88:	3754      	adds	r7, #84	@ 0x54
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr

08011b92 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011b92:	b580      	push	{r7, lr}
 8011b94:	b090      	sub	sp, #64	@ 0x40
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	f003 0320 	and.w	r3, r3, #32
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d137      	bne.n	8011c1e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8011bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	3308      	adds	r3, #8
 8011bbc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bc0:	e853 3f00 	ldrex	r3, [r3]
 8011bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8011bc6:	6a3b      	ldr	r3, [r7, #32]
 8011bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011bcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	3308      	adds	r3, #8
 8011bd4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8011bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bde:	e841 2300 	strex	r3, r2, [r1]
 8011be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d1e5      	bne.n	8011bb6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011bea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	e853 3f00 	ldrex	r3, [r3]
 8011bf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	461a      	mov	r2, r3
 8011c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c08:	61fb      	str	r3, [r7, #28]
 8011c0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c0c:	69b9      	ldr	r1, [r7, #24]
 8011c0e:	69fa      	ldr	r2, [r7, #28]
 8011c10:	e841 2300 	strex	r3, r2, [r1]
 8011c14:	617b      	str	r3, [r7, #20]
   return(result);
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d1e6      	bne.n	8011bea <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011c1c:	e004      	b.n	8011c28 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8011c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011c24:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011c26:	4798      	blx	r3
}
 8011c28:	bf00      	nop
 8011c2a:	3740      	adds	r7, #64	@ 0x40
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b084      	sub	sp, #16
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c3c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c48:	bf00      	nop
 8011c4a:	3710      	adds	r7, #16
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}

08011c50 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b09c      	sub	sp, #112	@ 0x70
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	f003 0320 	and.w	r3, r3, #32
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d171      	bne.n	8011d50 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8011c6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c6e:	2200      	movs	r2, #0
 8011c70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011c74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c7c:	e853 3f00 	ldrex	r3, [r3]
 8011c80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	461a      	mov	r2, r3
 8011c90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011c92:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011c94:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011c98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011c9a:	e841 2300 	strex	r3, r2, [r1]
 8011c9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011ca0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d1e6      	bne.n	8011c74 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ca6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	3308      	adds	r3, #8
 8011cac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cb0:	e853 3f00 	ldrex	r3, [r3]
 8011cb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cb8:	f023 0301 	bic.w	r3, r3, #1
 8011cbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8011cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	3308      	adds	r3, #8
 8011cc4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011cc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8011cc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011ccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011cce:	e841 2300 	strex	r3, r2, [r1]
 8011cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d1e5      	bne.n	8011ca6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011cda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	3308      	adds	r3, #8
 8011ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce4:	e853 3f00 	ldrex	r3, [r3]
 8011ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8011cea:	6a3b      	ldr	r3, [r7, #32]
 8011cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011cf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8011cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	3308      	adds	r3, #8
 8011cf8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011cfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8011cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d02:	e841 2300 	strex	r3, r2, [r1]
 8011d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d1e5      	bne.n	8011cda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011d0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d10:	2220      	movs	r2, #32
 8011d12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d118      	bne.n	8011d50 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d20:	681b      	ldr	r3, [r3, #0]
 8011d22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d24:	693b      	ldr	r3, [r7, #16]
 8011d26:	e853 3f00 	ldrex	r3, [r3]
 8011d2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	f023 0310 	bic.w	r3, r3, #16
 8011d32:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	461a      	mov	r2, r3
 8011d3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d3c:	61fb      	str	r3, [r7, #28]
 8011d3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d40:	69b9      	ldr	r1, [r7, #24]
 8011d42:	69fa      	ldr	r2, [r7, #28]
 8011d44:	e841 2300 	strex	r3, r2, [r1]
 8011d48:	617b      	str	r3, [r7, #20]
   return(result);
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d1e6      	bne.n	8011d1e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d52:	2200      	movs	r2, #0
 8011d54:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d5a:	2b01      	cmp	r3, #1
 8011d5c:	d109      	bne.n	8011d72 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8011d5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011d64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011d66:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8011d6a:	4611      	mov	r1, r2
 8011d6c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011d6e:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011d70:	e004      	b.n	8011d7c <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8011d72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011d74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011d78:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011d7a:	4798      	blx	r3
}
 8011d7c:	bf00      	nop
 8011d7e:	3770      	adds	r7, #112	@ 0x70
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d90:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	2201      	movs	r2, #1
 8011d96:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d9c:	2b01      	cmp	r3, #1
 8011d9e:	d10b      	bne.n	8011db8 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8011da6:	68fa      	ldr	r2, [r7, #12]
 8011da8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8011dac:	0852      	lsrs	r2, r2, #1
 8011dae:	b292      	uxth	r2, r2
 8011db0:	4611      	mov	r1, r2
 8011db2:	68f8      	ldr	r0, [r7, #12]
 8011db4:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011db6:	e004      	b.n	8011dc2 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011dbe:	68f8      	ldr	r0, [r7, #12]
 8011dc0:	4798      	blx	r3
}
 8011dc2:	bf00      	nop
 8011dc4:	3710      	adds	r7, #16
 8011dc6:	46bd      	mov	sp, r7
 8011dc8:	bd80      	pop	{r7, pc}

08011dca <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011dca:	b580      	push	{r7, lr}
 8011dcc:	b086      	sub	sp, #24
 8011dce:	af00      	add	r7, sp, #0
 8011dd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dd6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011dde:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011de6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	689b      	ldr	r3, [r3, #8]
 8011dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011df2:	2b80      	cmp	r3, #128	@ 0x80
 8011df4:	d109      	bne.n	8011e0a <UART_DMAError+0x40>
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	2b21      	cmp	r3, #33	@ 0x21
 8011dfa:	d106      	bne.n	8011e0a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011dfc:	697b      	ldr	r3, [r7, #20]
 8011dfe:	2200      	movs	r2, #0
 8011e00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011e04:	6978      	ldr	r0, [r7, #20]
 8011e06:	f7ff fe1d 	bl	8011a44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011e0a:	697b      	ldr	r3, [r7, #20]
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	689b      	ldr	r3, [r3, #8]
 8011e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011e14:	2b40      	cmp	r3, #64	@ 0x40
 8011e16:	d109      	bne.n	8011e2c <UART_DMAError+0x62>
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	2b22      	cmp	r3, #34	@ 0x22
 8011e1c:	d106      	bne.n	8011e2c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	2200      	movs	r2, #0
 8011e22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011e26:	6978      	ldr	r0, [r7, #20]
 8011e28:	f7ff fe4d 	bl	8011ac6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011e2c:	697b      	ldr	r3, [r7, #20]
 8011e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011e32:	f043 0210 	orr.w	r2, r3, #16
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011e42:	6978      	ldr	r0, [r7, #20]
 8011e44:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e46:	bf00      	nop
 8011e48:	3718      	adds	r7, #24
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}

08011e4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011e4e:	b580      	push	{r7, lr}
 8011e50:	b084      	sub	sp, #16
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011e6a:	68f8      	ldr	r0, [r7, #12]
 8011e6c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011e6e:	bf00      	nop
 8011e70:	3710      	adds	r7, #16
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}

08011e76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011e76:	b580      	push	{r7, lr}
 8011e78:	b088      	sub	sp, #32
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	e853 3f00 	ldrex	r3, [r3]
 8011e8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011e92:	61fb      	str	r3, [r7, #28]
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	461a      	mov	r2, r3
 8011e9a:	69fb      	ldr	r3, [r7, #28]
 8011e9c:	61bb      	str	r3, [r7, #24]
 8011e9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ea0:	6979      	ldr	r1, [r7, #20]
 8011ea2:	69ba      	ldr	r2, [r7, #24]
 8011ea4:	e841 2300 	strex	r3, r2, [r1]
 8011ea8:	613b      	str	r3, [r7, #16]
   return(result);
 8011eaa:	693b      	ldr	r3, [r7, #16]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d1e6      	bne.n	8011e7e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2220      	movs	r2, #32
 8011eb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	2200      	movs	r2, #0
 8011ebc:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ec8:	bf00      	nop
 8011eca:	3720      	adds	r7, #32
 8011ecc:	46bd      	mov	sp, r7
 8011ece:	bd80      	pop	{r7, pc}

08011ed0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	b083      	sub	sp, #12
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011ed8:	bf00      	nop
 8011eda:	370c      	adds	r7, #12
 8011edc:	46bd      	mov	sp, r7
 8011ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee2:	4770      	bx	lr

08011ee4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011ee4:	b480      	push	{r7}
 8011ee6:	b083      	sub	sp, #12
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011eec:	bf00      	nop
 8011eee:	370c      	adds	r7, #12
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr

08011ef8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011ef8:	b480      	push	{r7}
 8011efa:	b083      	sub	sp, #12
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011f00:	bf00      	nop
 8011f02:	370c      	adds	r7, #12
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr

08011f0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011f0c:	b480      	push	{r7}
 8011f0e:	b085      	sub	sp, #20
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011f1a:	2b01      	cmp	r3, #1
 8011f1c:	d101      	bne.n	8011f22 <HAL_UARTEx_DisableFifoMode+0x16>
 8011f1e:	2302      	movs	r3, #2
 8011f20:	e027      	b.n	8011f72 <HAL_UARTEx_DisableFifoMode+0x66>
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2201      	movs	r2, #1
 8011f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2224      	movs	r2, #36	@ 0x24
 8011f2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	681a      	ldr	r2, [r3, #0]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	f022 0201 	bic.w	r2, r2, #1
 8011f48:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011f50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2200      	movs	r2, #0
 8011f56:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	68fa      	ldr	r2, [r7, #12]
 8011f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	2220      	movs	r2, #32
 8011f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011f70:	2300      	movs	r3, #0
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3714      	adds	r7, #20
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr

08011f7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b084      	sub	sp, #16
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
 8011f86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011f8e:	2b01      	cmp	r3, #1
 8011f90:	d101      	bne.n	8011f96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011f92:	2302      	movs	r3, #2
 8011f94:	e02d      	b.n	8011ff2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2201      	movs	r2, #1
 8011f9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2224      	movs	r2, #36	@ 0x24
 8011fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	681a      	ldr	r2, [r3, #0]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	f022 0201 	bic.w	r2, r2, #1
 8011fbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	689b      	ldr	r3, [r3, #8]
 8011fc4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	683a      	ldr	r2, [r7, #0]
 8011fce:	430a      	orrs	r2, r1
 8011fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f000 f850 	bl	8012078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	68fa      	ldr	r2, [r7, #12]
 8011fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2220      	movs	r2, #32
 8011fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011ff0:	2300      	movs	r3, #0
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	3710      	adds	r7, #16
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd80      	pop	{r7, pc}

08011ffa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011ffa:	b580      	push	{r7, lr}
 8011ffc:	b084      	sub	sp, #16
 8011ffe:	af00      	add	r7, sp, #0
 8012000:	6078      	str	r0, [r7, #4]
 8012002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801200a:	2b01      	cmp	r3, #1
 801200c:	d101      	bne.n	8012012 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801200e:	2302      	movs	r3, #2
 8012010:	e02d      	b.n	801206e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2201      	movs	r2, #1
 8012016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2224      	movs	r2, #36	@ 0x24
 801201e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	681a      	ldr	r2, [r3, #0]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	f022 0201 	bic.w	r2, r2, #1
 8012038:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	689b      	ldr	r3, [r3, #8]
 8012040:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	683a      	ldr	r2, [r7, #0]
 801204a:	430a      	orrs	r2, r1
 801204c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 f812 	bl	8012078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	68fa      	ldr	r2, [r7, #12]
 801205a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	2220      	movs	r2, #32
 8012060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2200      	movs	r2, #0
 8012068:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801206c:	2300      	movs	r3, #0
}
 801206e:	4618      	mov	r0, r3
 8012070:	3710      	adds	r7, #16
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
	...

08012078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012078:	b480      	push	{r7}
 801207a:	b085      	sub	sp, #20
 801207c:	af00      	add	r7, sp, #0
 801207e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012084:	2b00      	cmp	r3, #0
 8012086:	d108      	bne.n	801209a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2201      	movs	r2, #1
 801208c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2201      	movs	r2, #1
 8012094:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012098:	e031      	b.n	80120fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801209a:	2308      	movs	r3, #8
 801209c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801209e:	2308      	movs	r3, #8
 80120a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	689b      	ldr	r3, [r3, #8]
 80120a8:	0e5b      	lsrs	r3, r3, #25
 80120aa:	b2db      	uxtb	r3, r3
 80120ac:	f003 0307 	and.w	r3, r3, #7
 80120b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	689b      	ldr	r3, [r3, #8]
 80120b8:	0f5b      	lsrs	r3, r3, #29
 80120ba:	b2db      	uxtb	r3, r3
 80120bc:	f003 0307 	and.w	r3, r3, #7
 80120c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80120c2:	7bbb      	ldrb	r3, [r7, #14]
 80120c4:	7b3a      	ldrb	r2, [r7, #12]
 80120c6:	4911      	ldr	r1, [pc, #68]	@ (801210c <UARTEx_SetNbDataToProcess+0x94>)
 80120c8:	5c8a      	ldrb	r2, [r1, r2]
 80120ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80120ce:	7b3a      	ldrb	r2, [r7, #12]
 80120d0:	490f      	ldr	r1, [pc, #60]	@ (8012110 <UARTEx_SetNbDataToProcess+0x98>)
 80120d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80120d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80120d8:	b29a      	uxth	r2, r3
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80120e0:	7bfb      	ldrb	r3, [r7, #15]
 80120e2:	7b7a      	ldrb	r2, [r7, #13]
 80120e4:	4909      	ldr	r1, [pc, #36]	@ (801210c <UARTEx_SetNbDataToProcess+0x94>)
 80120e6:	5c8a      	ldrb	r2, [r1, r2]
 80120e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80120ec:	7b7a      	ldrb	r2, [r7, #13]
 80120ee:	4908      	ldr	r1, [pc, #32]	@ (8012110 <UARTEx_SetNbDataToProcess+0x98>)
 80120f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80120f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80120fe:	bf00      	nop
 8012100:	3714      	adds	r7, #20
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr
 801210a:	bf00      	nop
 801210c:	08014bc8 	.word	0x08014bc8
 8012110:	08014bd0 	.word	0x08014bd0

08012114 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012114:	b480      	push	{r7}
 8012116:	b08b      	sub	sp, #44	@ 0x2c
 8012118:	af00      	add	r7, sp, #0
 801211a:	60f8      	str	r0, [r7, #12]
 801211c:	60b9      	str	r1, [r7, #8]
 801211e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	685b      	ldr	r3, [r3, #4]
 8012124:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8012126:	68bb      	ldr	r3, [r7, #8]
 8012128:	685b      	ldr	r3, [r3, #4]
 801212a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	685b      	ldr	r3, [r3, #4]
 8012130:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	881b      	ldrh	r3, [r3, #0]
 8012136:	461a      	mov	r2, r3
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	885b      	ldrh	r3, [r3, #2]
 801213c:	fb02 f303 	mul.w	r3, r2, r3
 8012140:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012142:	697b      	ldr	r3, [r7, #20]
 8012144:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012146:	e013      	b.n	8012170 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 8012148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801214a:	1d1a      	adds	r2, r3, #4
 801214c:	627a      	str	r2, [r7, #36]	@ 0x24
 801214e:	ed93 7a00 	vldr	s14, [r3]
 8012152:	6a3b      	ldr	r3, [r7, #32]
 8012154:	1d1a      	adds	r2, r3, #4
 8012156:	623a      	str	r2, [r7, #32]
 8012158:	edd3 7a00 	vldr	s15, [r3]
 801215c:	69fb      	ldr	r3, [r7, #28]
 801215e:	1d1a      	adds	r2, r3, #4
 8012160:	61fa      	str	r2, [r7, #28]
 8012162:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012166:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 801216a:	69bb      	ldr	r3, [r7, #24]
 801216c:	3b01      	subs	r3, #1
 801216e:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8012170:	69bb      	ldr	r3, [r7, #24]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d1e8      	bne.n	8012148 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012176:	2300      	movs	r3, #0
 8012178:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 801217a:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801217e:	4618      	mov	r0, r3
 8012180:	372c      	adds	r7, #44	@ 0x2c
 8012182:	46bd      	mov	sp, r7
 8012184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012188:	4770      	bx	lr

0801218a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 801218a:	b480      	push	{r7}
 801218c:	b085      	sub	sp, #20
 801218e:	af00      	add	r7, sp, #0
 8012190:	60f8      	str	r0, [r7, #12]
 8012192:	607b      	str	r3, [r7, #4]
 8012194:	460b      	mov	r3, r1
 8012196:	817b      	strh	r3, [r7, #10]
 8012198:	4613      	mov	r3, r2
 801219a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	897a      	ldrh	r2, [r7, #10]
 80121a0:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	893a      	ldrh	r2, [r7, #8]
 80121a6:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	687a      	ldr	r2, [r7, #4]
 80121ac:	605a      	str	r2, [r3, #4]
}
 80121ae:	bf00      	nop
 80121b0:	3714      	adds	r7, #20
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr

080121ba <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 80121ba:	b480      	push	{r7}
 80121bc:	b0bb      	sub	sp, #236	@ 0xec
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
 80121c2:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	685b      	ldr	r3, [r3, #4]
 80121ce:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	881b      	ldrh	r3, [r3, #0]
 80121d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	885b      	ldrh	r3, [r3, #2]
 80121da:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 80121dc:	f04f 0300 	mov.w	r3, #0
 80121e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80121e4:	f04f 0300 	mov.w	r3, #0
 80121e8:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 80121ea:	2300      	movs	r3, #0
 80121ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 80121f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80121f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 80121f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80121f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 80121fc:	e03b      	b.n	8012276 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 80121fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8012200:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012204:	1ad3      	subs	r3, r2, r3
 8012206:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 801220a:	e00c      	b.n	8012226 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 801220c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012210:	1d1a      	adds	r2, r3, #4
 8012212:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8012216:	f04f 0200 	mov.w	r2, #0
 801221a:	601a      	str	r2, [r3, #0]
        j--;
 801221c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012220:	3b01      	subs	r3, #1
 8012222:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8012226:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801222a:	2b00      	cmp	r3, #0
 801222c:	d1ee      	bne.n	801220c <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 801222e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8012232:	1d1a      	adds	r2, r3, #4
 8012234:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8012238:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801223c:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 801223e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012242:	3b01      	subs	r3, #1
 8012244:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8012248:	e00c      	b.n	8012264 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 801224a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801224e:	1d1a      	adds	r2, r3, #4
 8012250:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8012254:	f04f 0200 	mov.w	r2, #0
 8012258:	601a      	str	r2, [r3, #0]
        j--;
 801225a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801225e:	3b01      	subs	r3, #1
 8012260:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 8012264:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8012268:	2b00      	cmp	r3, #0
 801226a:	d1ee      	bne.n	801224a <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 801226c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8012270:	3b01      	subs	r3, #1
 8012272:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 8012276:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 801227a:	2b00      	cmp	r3, #0
 801227c:	d1bf      	bne.n	80121fe <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 801227e:	2300      	movs	r3, #0
 8012280:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012284:	e2c7      	b.n	8012816 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 8012286:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801228a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	685a      	ldr	r2, [r3, #4]
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	885b      	ldrh	r3, [r3, #2]
 8012294:	3301      	adds	r3, #1
 8012296:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 801229a:	fb01 f303 	mul.w	r3, r1, r3
 801229e:	009b      	lsls	r3, r3, #2
 80122a0:	4413      	add	r3, r2
 80122a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 80122a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 80122b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80122b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 80122b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80122bc:	3301      	adds	r3, #1
 80122be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80122c2:	e02c      	b.n	801231e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	685a      	ldr	r2, [r3, #4]
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	885b      	ldrh	r3, [r3, #2]
 80122cc:	4619      	mov	r1, r3
 80122ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80122d2:	fb03 f101 	mul.w	r1, r3, r1
 80122d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80122da:	440b      	add	r3, r1
 80122dc:	009b      	lsls	r3, r3, #2
 80122de:	4413      	add	r3, r2
 80122e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 80122e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 80122ec:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80122f0:	eeb0 7ae7 	vabs.f32	s14, s15
 80122f4:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80122f8:	eef0 7ae7 	vabs.f32	s15, s15
 80122fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012304:	dd06      	ble.n	8012314 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 8012306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801230a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 801230e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012310:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 8012314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012318:	3301      	adds	r3, #1
 801231a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801231e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012324:	429a      	cmp	r2, r3
 8012326:	d3cd      	bcc.n	80122c4 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 8012328:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801232c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012334:	f000 809b 	beq.w	801246e <arm_mat_inverse_f32+0x2b4>
 8012338:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 801233c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012340:	429a      	cmp	r2, r3
 8012342:	f000 8094 	beq.w	801246e <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	885b      	ldrh	r3, [r3, #2]
 801235a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801235c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801235e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012362:	1ad3      	subs	r3, r2, r3
 8012364:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012366:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012368:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801236a:	fb03 f202 	mul.w	r2, r3, r2
 801236e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012372:	4413      	add	r3, r2
 8012374:	009b      	lsls	r3, r3, #2
 8012376:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801237a:	4413      	add	r3, r2
 801237c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8012380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012382:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012386:	fb03 f202 	mul.w	r2, r3, r2
 801238a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801238e:	4413      	add	r3, r2
 8012390:	009b      	lsls	r3, r3, #2
 8012392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8012396:	4413      	add	r3, r2
 8012398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801239c:	2300      	movs	r3, #0
 801239e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80123a2:	e018      	b.n	80123d6 <arm_mat_inverse_f32+0x21c>
 80123a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80123ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80123b0:	1d1a      	adds	r2, r3, #4
 80123b2:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 80123b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80123ba:	6812      	ldr	r2, [r2, #0]
 80123bc:	601a      	str	r2, [r3, #0]
 80123be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80123c2:	1d1a      	adds	r2, r3, #4
 80123c4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80123c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80123ca:	601a      	str	r2, [r3, #0]
 80123cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80123d0:	3301      	adds	r3, #1
 80123d2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80123d6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80123da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80123dc:	429a      	cmp	r2, r3
 80123de:	dbe1      	blt.n	80123a4 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 80123e0:	683b      	ldr	r3, [r7, #0]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80123e8:	683b      	ldr	r3, [r7, #0]
 80123ea:	685b      	ldr	r3, [r3, #4]
 80123ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80123f0:	683b      	ldr	r3, [r7, #0]
 80123f2:	885b      	ldrh	r3, [r3, #2]
 80123f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80123f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80123fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123fc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80123fe:	fb02 f303 	mul.w	r3, r2, r3
 8012402:	009b      	lsls	r3, r3, #2
 8012404:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8012408:	4413      	add	r3, r2
 801240a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801240e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012410:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8012414:	fb02 f303 	mul.w	r3, r2, r3
 8012418:	009b      	lsls	r3, r3, #2
 801241a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801241e:	4413      	add	r3, r2
 8012420:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8012424:	2300      	movs	r3, #0
 8012426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801242a:	e018      	b.n	801245e <arm_mat_inverse_f32+0x2a4>
 801242c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012434:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8012438:	1d1a      	adds	r2, r3, #4
 801243a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 801243e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8012442:	6812      	ldr	r2, [r2, #0]
 8012444:	601a      	str	r2, [r3, #0]
 8012446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801244a:	1d1a      	adds	r2, r3, #4
 801244c:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8012450:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012452:	601a      	str	r2, [r3, #0]
 8012454:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8012458:	3301      	adds	r3, #1
 801245a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801245e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8012462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012464:	429a      	cmp	r2, r3
 8012466:	dbe1      	blt.n	801242c <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 8012468:	2301      	movs	r3, #1
 801246a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 801246e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8012472:	2b01      	cmp	r3, #1
 8012474:	d009      	beq.n	801248a <arm_mat_inverse_f32+0x2d0>
 8012476:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801247a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801247e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012482:	d102      	bne.n	801248a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 8012484:	f06f 0304 	mvn.w	r3, #4
 8012488:	e208      	b.n	801289c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 801248a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801248e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8012492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012496:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	885b      	ldrh	r3, [r3, #2]
 80124a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80124a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80124aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80124ae:	1ad3      	subs	r3, r2, r3
 80124b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80124b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80124b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80124b6:	fb03 f202 	mul.w	r2, r3, r2
 80124ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80124be:	4413      	add	r3, r2
 80124c0:	009b      	lsls	r3, r3, #2
 80124c2:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80124c6:	4413      	add	r3, r2
 80124c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80124cc:	2300      	movs	r3, #0
 80124ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80124d2:	e011      	b.n	80124f8 <arm_mat_inverse_f32+0x33e>
 80124d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80124d8:	1d1a      	adds	r2, r3, #4
 80124da:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80124de:	ed93 7a00 	vldr	s14, [r3]
 80124e2:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80124e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124ea:	edc3 7a00 	vstr	s15, [r3]
 80124ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80124f2:	3301      	adds	r3, #1
 80124f4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80124f8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80124fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80124fe:	429a      	cmp	r2, r3
 8012500:	dbe8      	blt.n	80124d4 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	685b      	ldr	r3, [r3, #4]
 8012506:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801250a:	683b      	ldr	r3, [r7, #0]
 801250c:	885b      	ldrh	r3, [r3, #2]
 801250e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012512:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012516:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012518:	fb02 f303 	mul.w	r3, r2, r3
 801251c:	009b      	lsls	r3, r3, #2
 801251e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8012522:	4413      	add	r3, r2
 8012524:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8012528:	2300      	movs	r3, #0
 801252a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801252e:	e011      	b.n	8012554 <arm_mat_inverse_f32+0x39a>
 8012530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8012534:	1d1a      	adds	r2, r3, #4
 8012536:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 801253a:	ed93 7a00 	vldr	s14, [r3]
 801253e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012546:	edc3 7a00 	vstr	s15, [r3]
 801254a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801254e:	3301      	adds	r3, #1
 8012550:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8012554:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8012558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801255a:	429a      	cmp	r2, r3
 801255c:	dbe8      	blt.n	8012530 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 801255e:	2300      	movs	r3, #0
 8012560:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 8012564:	e0ae      	b.n	80126c4 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	685a      	ldr	r2, [r3, #4]
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	885b      	ldrh	r3, [r3, #2]
 801256e:	4619      	mov	r1, r3
 8012570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8012574:	fb03 f101 	mul.w	r1, r3, r1
 8012578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801257c:	440b      	add	r3, r1
 801257e:	009b      	lsls	r3, r3, #2
 8012580:	4413      	add	r3, r2
 8012582:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 8012586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	685b      	ldr	r3, [r3, #4]
 8012594:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	885b      	ldrh	r3, [r3, #2]
 80125a4:	617b      	str	r3, [r7, #20]
 80125a6:	697a      	ldr	r2, [r7, #20]
 80125a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80125ac:	1ad3      	subs	r3, r2, r3
 80125ae:	613b      	str	r3, [r7, #16]
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80125b6:	fb03 f202 	mul.w	r2, r3, r2
 80125ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80125be:	4413      	add	r3, r2
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80125c6:	4413      	add	r3, r2
 80125c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80125d0:	fb03 f202 	mul.w	r2, r3, r2
 80125d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80125d8:	4413      	add	r3, r2
 80125da:	009b      	lsls	r3, r3, #2
 80125dc:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80125e0:	4413      	add	r3, r2
 80125e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80125e6:	2300      	movs	r3, #0
 80125e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80125ec:	e01a      	b.n	8012624 <arm_mat_inverse_f32+0x46a>
 80125ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80125f2:	1d1a      	adds	r2, r3, #4
 80125f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80125f8:	ed93 7a00 	vldr	s14, [r3]
 80125fc:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012604:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8012608:	1d1a      	adds	r2, r3, #4
 801260a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 801260e:	ed93 7a00 	vldr	s14, [r3]
 8012612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012616:	edc3 7a00 	vstr	s15, [r3]
 801261a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801261e:	3301      	adds	r3, #1
 8012620:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012624:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	429a      	cmp	r2, r3
 801262c:	dbdf      	blt.n	80125ee <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	685b      	ldr	r3, [r3, #4]
 8012632:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	685b      	ldr	r3, [r3, #4]
 801263a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801263e:	683b      	ldr	r3, [r7, #0]
 8012640:	885b      	ldrh	r3, [r3, #2]
 8012642:	60fb      	str	r3, [r7, #12]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	60bb      	str	r3, [r7, #8]
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 801264e:	fb02 f303 	mul.w	r3, r2, r3
 8012652:	009b      	lsls	r3, r3, #2
 8012654:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8012658:	4413      	add	r3, r2
 801265a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012662:	fb02 f303 	mul.w	r3, r2, r3
 8012666:	009b      	lsls	r3, r3, #2
 8012668:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801266c:	4413      	add	r3, r2
 801266e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8012672:	2300      	movs	r3, #0
 8012674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8012678:	e01a      	b.n	80126b0 <arm_mat_inverse_f32+0x4f6>
 801267a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801267e:	1d1a      	adds	r2, r3, #4
 8012680:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8012684:	ed93 7a00 	vldr	s14, [r3]
 8012688:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 801268c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012690:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8012694:	1d1a      	adds	r2, r3, #4
 8012696:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 801269a:	ed93 7a00 	vldr	s14, [r3]
 801269e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80126a2:	edc3 7a00 	vstr	s15, [r3]
 80126a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80126aa:	3301      	adds	r3, #1
 80126ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80126b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80126b4:	68bb      	ldr	r3, [r7, #8]
 80126b6:	429a      	cmp	r2, r3
 80126b8:	dbdf      	blt.n	801267a <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 80126ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80126be:	3301      	adds	r3, #1
 80126c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80126c4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80126c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126ca:	429a      	cmp	r2, r3
 80126cc:	f4ff af4b 	bcc.w	8012566 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80126d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126d2:	3301      	adds	r3, #1
 80126d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80126d8:	e092      	b.n	8012800 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	685a      	ldr	r2, [r3, #4]
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	885b      	ldrh	r3, [r3, #2]
 80126e2:	4619      	mov	r1, r3
 80126e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80126e8:	fb03 f101 	mul.w	r1, r3, r1
 80126ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80126f0:	440b      	add	r3, r1
 80126f2:	009b      	lsls	r3, r3, #2
 80126f4:	4413      	add	r3, r2
 80126f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 80126fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	685b      	ldr	r3, [r3, #4]
 8012708:	67bb      	str	r3, [r7, #120]	@ 0x78
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	677b      	str	r3, [r7, #116]	@ 0x74
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	885b      	ldrh	r3, [r3, #2]
 8012714:	627b      	str	r3, [r7, #36]	@ 0x24
 8012716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012718:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801271c:	1ad3      	subs	r3, r2, r3
 801271e:	623b      	str	r3, [r7, #32]
 8012720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012722:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012726:	fb03 f202 	mul.w	r2, r3, r2
 801272a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 801272e:	4413      	add	r3, r2
 8012730:	009b      	lsls	r3, r3, #2
 8012732:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8012734:	4413      	add	r3, r2
 8012736:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801273a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801273c:	fb03 f202 	mul.w	r2, r3, r2
 8012740:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012744:	4413      	add	r3, r2
 8012746:	009b      	lsls	r3, r3, #2
 8012748:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801274a:	4413      	add	r3, r2
 801274c:	677b      	str	r3, [r7, #116]	@ 0x74
 801274e:	2300      	movs	r3, #0
 8012750:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012752:	e014      	b.n	801277e <arm_mat_inverse_f32+0x5c4>
 8012754:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8012756:	1d1a      	adds	r2, r3, #4
 8012758:	677a      	str	r2, [r7, #116]	@ 0x74
 801275a:	ed93 7a00 	vldr	s14, [r3]
 801275e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012766:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012768:	1d1a      	adds	r2, r3, #4
 801276a:	67ba      	str	r2, [r7, #120]	@ 0x78
 801276c:	ed93 7a00 	vldr	s14, [r3]
 8012770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012774:	edc3 7a00 	vstr	s15, [r3]
 8012778:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801277a:	3301      	adds	r3, #1
 801277c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801277e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8012780:	6a3b      	ldr	r3, [r7, #32]
 8012782:	429a      	cmp	r2, r3
 8012784:	dbe6      	blt.n	8012754 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	685b      	ldr	r3, [r3, #4]
 801278a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801278c:	683b      	ldr	r3, [r7, #0]
 801278e:	685b      	ldr	r3, [r3, #4]
 8012790:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012792:	683b      	ldr	r3, [r7, #0]
 8012794:	885b      	ldrh	r3, [r3, #2]
 8012796:	61fb      	str	r3, [r7, #28]
 8012798:	69fb      	ldr	r3, [r7, #28]
 801279a:	61bb      	str	r3, [r7, #24]
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80127a2:	fb02 f303 	mul.w	r3, r2, r3
 80127a6:	009b      	lsls	r3, r3, #2
 80127a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80127aa:	4413      	add	r3, r2
 80127ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80127b2:	fb02 f303 	mul.w	r3, r2, r3
 80127b6:	009b      	lsls	r3, r3, #2
 80127b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80127ba:	4413      	add	r3, r2
 80127bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80127be:	2300      	movs	r3, #0
 80127c0:	673b      	str	r3, [r7, #112]	@ 0x70
 80127c2:	e014      	b.n	80127ee <arm_mat_inverse_f32+0x634>
 80127c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80127c6:	1d1a      	adds	r2, r3, #4
 80127c8:	66ba      	str	r2, [r7, #104]	@ 0x68
 80127ca:	ed93 7a00 	vldr	s14, [r3]
 80127ce:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 80127d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80127d8:	1d1a      	adds	r2, r3, #4
 80127da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80127dc:	ed93 7a00 	vldr	s14, [r3]
 80127e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80127e4:	edc3 7a00 	vstr	s15, [r3]
 80127e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80127ea:	3301      	adds	r3, #1
 80127ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80127ee:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80127f0:	69bb      	ldr	r3, [r7, #24]
 80127f2:	429a      	cmp	r2, r3
 80127f4:	dbe6      	blt.n	80127c4 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 80127f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80127fa:	3301      	adds	r3, #1
 80127fc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8012800:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8012804:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012806:	429a      	cmp	r2, r3
 8012808:	f4ff af67 	bcc.w	80126da <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 801280c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8012810:	3301      	adds	r3, #1
 8012812:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8012816:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801281a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801281c:	429a      	cmp	r2, r3
 801281e:	f4ff ad32 	bcc.w	8012286 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012822:	2300      	movs	r3, #0
 8012824:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 8012828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801282c:	2b01      	cmp	r3, #1
 801282e:	d033      	beq.n	8012898 <arm_mat_inverse_f32+0x6de>
 8012830:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 8012834:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801283c:	d12c      	bne.n	8012898 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	685b      	ldr	r3, [r3, #4]
 8012842:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 8012844:	2300      	movs	r3, #0
 8012846:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801284a:	e010      	b.n	801286e <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 801284c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012850:	009b      	lsls	r3, r3, #2
 8012852:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012854:	4413      	add	r3, r2
 8012856:	edd3 7a00 	vldr	s15, [r3]
 801285a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801285e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012862:	d10d      	bne.n	8012880 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 8012864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8012868:	3301      	adds	r3, #1
 801286a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801286e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012870:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012872:	fb02 f303 	mul.w	r3, r2, r3
 8012876:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801287a:	429a      	cmp	r2, r3
 801287c:	d3e6      	bcc.n	801284c <arm_mat_inverse_f32+0x692>
 801287e:	e000      	b.n	8012882 <arm_mat_inverse_f32+0x6c8>
            break;
 8012880:	bf00      	nop
      }

      if (i == numRows * numCols)
 8012882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012884:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012886:	fb02 f303 	mul.w	r3, r2, r3
 801288a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 801288e:	429a      	cmp	r2, r3
 8012890:	d102      	bne.n	8012898 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 8012892:	23fb      	movs	r3, #251	@ 0xfb
 8012894:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 8012898:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 801289c:	4618      	mov	r0, r3
 801289e:	37ec      	adds	r7, #236	@ 0xec
 80128a0:	46bd      	mov	sp, r7
 80128a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a6:	4770      	bx	lr

080128a8 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 80128a8:	b480      	push	{r7}
 80128aa:	b093      	sub	sp, #76	@ 0x4c
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	60f8      	str	r0, [r7, #12]
 80128b0:	60b9      	str	r1, [r7, #8]
 80128b2:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 80128b4:	68fb      	ldr	r3, [r7, #12]
 80128b6:	685b      	ldr	r3, [r3, #4]
 80128b8:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 80128ba:	68bb      	ldr	r3, [r7, #8]
 80128bc:	685b      	ldr	r3, [r3, #4]
 80128be:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	685b      	ldr	r3, [r3, #4]
 80128c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	685b      	ldr	r3, [r3, #4]
 80128d0:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	881b      	ldrh	r3, [r3, #0]
 80128d6:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	885b      	ldrh	r3, [r3, #2]
 80128dc:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 80128de:	68fb      	ldr	r3, [r7, #12]
 80128e0:	885b      	ldrh	r3, [r3, #2]
 80128e2:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 80128e4:	2300      	movs	r3, #0
 80128e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80128e8:	8b7b      	ldrh	r3, [r7, #26]
 80128ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 80128ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128ee:	009b      	lsls	r3, r3, #2
 80128f0:	69fa      	ldr	r2, [r7, #28]
 80128f2:	4413      	add	r3, r2
 80128f4:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 80128f6:	8b3b      	ldrh	r3, [r7, #24]
 80128f8:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	685b      	ldr	r3, [r3, #4]
 80128fe:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 8012900:	f04f 0300 	mov.w	r3, #0
 8012904:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 8012906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012908:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 801290a:	8afb      	ldrh	r3, [r7, #22]
 801290c:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 801290e:	e017      	b.n	8012940 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 8012910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012912:	1d1a      	adds	r2, r3, #4
 8012914:	647a      	str	r2, [r7, #68]	@ 0x44
 8012916:	ed93 7a00 	vldr	s14, [r3]
 801291a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801291c:	edd3 7a00 	vldr	s15, [r3]
 8012920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012924:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8012928:	ee77 7a27 	vadd.f32	s15, s14, s15
 801292c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 8012930:	8b3b      	ldrh	r3, [r7, #24]
 8012932:	009b      	lsls	r3, r3, #2
 8012934:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012936:	4413      	add	r3, r2
 8012938:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 801293a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801293c:	3b01      	subs	r3, #1
 801293e:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 8012940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012942:	2b00      	cmp	r3, #0
 8012944:	d1e4      	bne.n	8012910 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 8012946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012948:	1d1a      	adds	r2, r3, #4
 801294a:	63ba      	str	r2, [r7, #56]	@ 0x38
 801294c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801294e:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 8012950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012952:	3b01      	subs	r3, #1
 8012954:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 8012956:	8b3a      	ldrh	r2, [r7, #24]
 8012958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801295a:	1ad3      	subs	r3, r2, r3
 801295c:	009b      	lsls	r3, r3, #2
 801295e:	6a3a      	ldr	r2, [r7, #32]
 8012960:	4413      	add	r3, r2
 8012962:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 8012964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012966:	2b00      	cmp	r3, #0
 8012968:	d1ca      	bne.n	8012900 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 801296a:	8b3b      	ldrh	r3, [r7, #24]
 801296c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801296e:	4413      	add	r3, r2
 8012970:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 8012972:	8afb      	ldrh	r3, [r7, #22]
 8012974:	009b      	lsls	r3, r3, #2
 8012976:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012978:	4413      	add	r3, r2
 801297a:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 801297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801297e:	3b01      	subs	r3, #1
 8012980:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 8012982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012984:	2b00      	cmp	r3, #0
 8012986:	d1b1      	bne.n	80128ec <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012988:	2300      	movs	r3, #0
 801298a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 801298c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 8012990:	4618      	mov	r0, r3
 8012992:	374c      	adds	r7, #76	@ 0x4c
 8012994:	46bd      	mov	sp, r7
 8012996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299a:	4770      	bx	lr

0801299c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 801299c:	b480      	push	{r7}
 801299e:	b08b      	sub	sp, #44	@ 0x2c
 80129a0:	af00      	add	r7, sp, #0
 80129a2:	60f8      	str	r0, [r7, #12]
 80129a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80129a8:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	685b      	ldr	r3, [r3, #4]
 80129ae:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	685b      	ldr	r3, [r3, #4]
 80129b4:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	881b      	ldrh	r3, [r3, #0]
 80129ba:	461a      	mov	r2, r3
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	885b      	ldrh	r3, [r3, #2]
 80129c0:	fb02 f303 	mul.w	r3, r2, r3
 80129c4:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 80129c6:	69bb      	ldr	r3, [r7, #24]
 80129c8:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 80129ca:	e010      	b.n	80129ee <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 80129cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129ce:	1d1a      	adds	r2, r3, #4
 80129d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80129d2:	ed93 7a00 	vldr	s14, [r3]
 80129d6:	6a3b      	ldr	r3, [r7, #32]
 80129d8:	1d1a      	adds	r2, r3, #4
 80129da:	623a      	str	r2, [r7, #32]
 80129dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80129e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129e4:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 80129e8:	69fb      	ldr	r3, [r7, #28]
 80129ea:	3b01      	subs	r3, #1
 80129ec:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 80129ee:	69fb      	ldr	r3, [r7, #28]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d1eb      	bne.n	80129cc <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 80129f4:	2300      	movs	r3, #0
 80129f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 80129f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129fc:	4618      	mov	r0, r3
 80129fe:	372c      	adds	r7, #44	@ 0x2c
 8012a00:	46bd      	mov	sp, r7
 8012a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a06:	4770      	bx	lr

08012a08 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b08b      	sub	sp, #44	@ 0x2c
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	60f8      	str	r0, [r7, #12]
 8012a10:	60b9      	str	r1, [r7, #8]
 8012a12:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	685b      	ldr	r3, [r3, #4]
 8012a18:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	685b      	ldr	r3, [r3, #4]
 8012a24:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	881b      	ldrh	r3, [r3, #0]
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	885b      	ldrh	r3, [r3, #2]
 8012a30:	fb02 f303 	mul.w	r3, r2, r3
 8012a34:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 8012a3a:	e013      	b.n	8012a64 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 8012a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a3e:	1d1a      	adds	r2, r3, #4
 8012a40:	627a      	str	r2, [r7, #36]	@ 0x24
 8012a42:	ed93 7a00 	vldr	s14, [r3]
 8012a46:	6a3b      	ldr	r3, [r7, #32]
 8012a48:	1d1a      	adds	r2, r3, #4
 8012a4a:	623a      	str	r2, [r7, #32]
 8012a4c:	edd3 7a00 	vldr	s15, [r3]
 8012a50:	69fb      	ldr	r3, [r7, #28]
 8012a52:	1d1a      	adds	r2, r3, #4
 8012a54:	61fa      	str	r2, [r7, #28]
 8012a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a5a:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 8012a5e:	69bb      	ldr	r3, [r7, #24]
 8012a60:	3b01      	subs	r3, #1
 8012a62:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 8012a64:	69bb      	ldr	r3, [r7, #24]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d1e8      	bne.n	8012a3c <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 8012a6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012a72:	4618      	mov	r0, r3
 8012a74:	372c      	adds	r7, #44	@ 0x2c
 8012a76:	46bd      	mov	sp, r7
 8012a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7c:	4770      	bx	lr

08012a7e <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8012a7e:	b480      	push	{r7}
 8012a80:	b08b      	sub	sp, #44	@ 0x2c
 8012a82:	af00      	add	r7, sp, #0
 8012a84:	6078      	str	r0, [r7, #4]
 8012a86:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	685b      	ldr	r3, [r3, #4]
 8012a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8012a8e:	683b      	ldr	r3, [r7, #0]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	881b      	ldrh	r3, [r3, #0]
 8012a98:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	885b      	ldrh	r3, [r3, #2]
 8012a9e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8012aa0:	89fb      	ldrh	r3, [r7, #14]
 8012aa2:	61bb      	str	r3, [r7, #24]
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	009b      	lsls	r3, r3, #2
 8012aac:	693a      	ldr	r2, [r7, #16]
 8012aae:	4413      	add	r3, r2
 8012ab0:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8012ab2:	89bb      	ldrh	r3, [r7, #12]
 8012ab4:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8012ab6:	e00d      	b.n	8012ad4 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8012ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aba:	1d1a      	adds	r2, r3, #4
 8012abc:	627a      	str	r2, [r7, #36]	@ 0x24
 8012abe:	681a      	ldr	r2, [r3, #0]
 8012ac0:	6a3b      	ldr	r3, [r7, #32]
 8012ac2:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8012ac4:	89fb      	ldrh	r3, [r7, #14]
 8012ac6:	009b      	lsls	r3, r3, #2
 8012ac8:	6a3a      	ldr	r2, [r7, #32]
 8012aca:	4413      	add	r3, r2
 8012acc:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8012ace:	69fb      	ldr	r3, [r7, #28]
 8012ad0:	3b01      	subs	r3, #1
 8012ad2:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8012ad4:	69fb      	ldr	r3, [r7, #28]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d1ee      	bne.n	8012ab8 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	3301      	adds	r3, #1
 8012ade:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8012ae0:	69bb      	ldr	r3, [r7, #24]
 8012ae2:	3b01      	subs	r3, #1
 8012ae4:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8012ae6:	69bb      	ldr	r3, [r7, #24]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d1dd      	bne.n	8012aa8 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8012aec:	2300      	movs	r3, #0
 8012aee:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8012af0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	372c      	adds	r7, #44	@ 0x2c
 8012af8:	46bd      	mov	sp, r7
 8012afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012afe:	4770      	bx	lr

08012b00 <malloc>:
 8012b00:	4b02      	ldr	r3, [pc, #8]	@ (8012b0c <malloc+0xc>)
 8012b02:	4601      	mov	r1, r0
 8012b04:	6818      	ldr	r0, [r3, #0]
 8012b06:	f000 b825 	b.w	8012b54 <_malloc_r>
 8012b0a:	bf00      	nop
 8012b0c:	200005c0 	.word	0x200005c0

08012b10 <sbrk_aligned>:
 8012b10:	b570      	push	{r4, r5, r6, lr}
 8012b12:	4e0f      	ldr	r6, [pc, #60]	@ (8012b50 <sbrk_aligned+0x40>)
 8012b14:	460c      	mov	r4, r1
 8012b16:	6831      	ldr	r1, [r6, #0]
 8012b18:	4605      	mov	r5, r0
 8012b1a:	b911      	cbnz	r1, 8012b22 <sbrk_aligned+0x12>
 8012b1c:	f000 f8ae 	bl	8012c7c <_sbrk_r>
 8012b20:	6030      	str	r0, [r6, #0]
 8012b22:	4621      	mov	r1, r4
 8012b24:	4628      	mov	r0, r5
 8012b26:	f000 f8a9 	bl	8012c7c <_sbrk_r>
 8012b2a:	1c43      	adds	r3, r0, #1
 8012b2c:	d103      	bne.n	8012b36 <sbrk_aligned+0x26>
 8012b2e:	f04f 34ff 	mov.w	r4, #4294967295
 8012b32:	4620      	mov	r0, r4
 8012b34:	bd70      	pop	{r4, r5, r6, pc}
 8012b36:	1cc4      	adds	r4, r0, #3
 8012b38:	f024 0403 	bic.w	r4, r4, #3
 8012b3c:	42a0      	cmp	r0, r4
 8012b3e:	d0f8      	beq.n	8012b32 <sbrk_aligned+0x22>
 8012b40:	1a21      	subs	r1, r4, r0
 8012b42:	4628      	mov	r0, r5
 8012b44:	f000 f89a 	bl	8012c7c <_sbrk_r>
 8012b48:	3001      	adds	r0, #1
 8012b4a:	d1f2      	bne.n	8012b32 <sbrk_aligned+0x22>
 8012b4c:	e7ef      	b.n	8012b2e <sbrk_aligned+0x1e>
 8012b4e:	bf00      	nop
 8012b50:	20002720 	.word	0x20002720

08012b54 <_malloc_r>:
 8012b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b58:	1ccd      	adds	r5, r1, #3
 8012b5a:	f025 0503 	bic.w	r5, r5, #3
 8012b5e:	3508      	adds	r5, #8
 8012b60:	2d0c      	cmp	r5, #12
 8012b62:	bf38      	it	cc
 8012b64:	250c      	movcc	r5, #12
 8012b66:	2d00      	cmp	r5, #0
 8012b68:	4606      	mov	r6, r0
 8012b6a:	db01      	blt.n	8012b70 <_malloc_r+0x1c>
 8012b6c:	42a9      	cmp	r1, r5
 8012b6e:	d904      	bls.n	8012b7a <_malloc_r+0x26>
 8012b70:	230c      	movs	r3, #12
 8012b72:	6033      	str	r3, [r6, #0]
 8012b74:	2000      	movs	r0, #0
 8012b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012c50 <_malloc_r+0xfc>
 8012b7e:	f000 f869 	bl	8012c54 <__malloc_lock>
 8012b82:	f8d8 3000 	ldr.w	r3, [r8]
 8012b86:	461c      	mov	r4, r3
 8012b88:	bb44      	cbnz	r4, 8012bdc <_malloc_r+0x88>
 8012b8a:	4629      	mov	r1, r5
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	f7ff ffbf 	bl	8012b10 <sbrk_aligned>
 8012b92:	1c43      	adds	r3, r0, #1
 8012b94:	4604      	mov	r4, r0
 8012b96:	d158      	bne.n	8012c4a <_malloc_r+0xf6>
 8012b98:	f8d8 4000 	ldr.w	r4, [r8]
 8012b9c:	4627      	mov	r7, r4
 8012b9e:	2f00      	cmp	r7, #0
 8012ba0:	d143      	bne.n	8012c2a <_malloc_r+0xd6>
 8012ba2:	2c00      	cmp	r4, #0
 8012ba4:	d04b      	beq.n	8012c3e <_malloc_r+0xea>
 8012ba6:	6823      	ldr	r3, [r4, #0]
 8012ba8:	4639      	mov	r1, r7
 8012baa:	4630      	mov	r0, r6
 8012bac:	eb04 0903 	add.w	r9, r4, r3
 8012bb0:	f000 f864 	bl	8012c7c <_sbrk_r>
 8012bb4:	4581      	cmp	r9, r0
 8012bb6:	d142      	bne.n	8012c3e <_malloc_r+0xea>
 8012bb8:	6821      	ldr	r1, [r4, #0]
 8012bba:	1a6d      	subs	r5, r5, r1
 8012bbc:	4629      	mov	r1, r5
 8012bbe:	4630      	mov	r0, r6
 8012bc0:	f7ff ffa6 	bl	8012b10 <sbrk_aligned>
 8012bc4:	3001      	adds	r0, #1
 8012bc6:	d03a      	beq.n	8012c3e <_malloc_r+0xea>
 8012bc8:	6823      	ldr	r3, [r4, #0]
 8012bca:	442b      	add	r3, r5
 8012bcc:	6023      	str	r3, [r4, #0]
 8012bce:	f8d8 3000 	ldr.w	r3, [r8]
 8012bd2:	685a      	ldr	r2, [r3, #4]
 8012bd4:	bb62      	cbnz	r2, 8012c30 <_malloc_r+0xdc>
 8012bd6:	f8c8 7000 	str.w	r7, [r8]
 8012bda:	e00f      	b.n	8012bfc <_malloc_r+0xa8>
 8012bdc:	6822      	ldr	r2, [r4, #0]
 8012bde:	1b52      	subs	r2, r2, r5
 8012be0:	d420      	bmi.n	8012c24 <_malloc_r+0xd0>
 8012be2:	2a0b      	cmp	r2, #11
 8012be4:	d917      	bls.n	8012c16 <_malloc_r+0xc2>
 8012be6:	1961      	adds	r1, r4, r5
 8012be8:	42a3      	cmp	r3, r4
 8012bea:	6025      	str	r5, [r4, #0]
 8012bec:	bf18      	it	ne
 8012bee:	6059      	strne	r1, [r3, #4]
 8012bf0:	6863      	ldr	r3, [r4, #4]
 8012bf2:	bf08      	it	eq
 8012bf4:	f8c8 1000 	streq.w	r1, [r8]
 8012bf8:	5162      	str	r2, [r4, r5]
 8012bfa:	604b      	str	r3, [r1, #4]
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	f000 f82f 	bl	8012c60 <__malloc_unlock>
 8012c02:	f104 000b 	add.w	r0, r4, #11
 8012c06:	1d23      	adds	r3, r4, #4
 8012c08:	f020 0007 	bic.w	r0, r0, #7
 8012c0c:	1ac2      	subs	r2, r0, r3
 8012c0e:	bf1c      	itt	ne
 8012c10:	1a1b      	subne	r3, r3, r0
 8012c12:	50a3      	strne	r3, [r4, r2]
 8012c14:	e7af      	b.n	8012b76 <_malloc_r+0x22>
 8012c16:	6862      	ldr	r2, [r4, #4]
 8012c18:	42a3      	cmp	r3, r4
 8012c1a:	bf0c      	ite	eq
 8012c1c:	f8c8 2000 	streq.w	r2, [r8]
 8012c20:	605a      	strne	r2, [r3, #4]
 8012c22:	e7eb      	b.n	8012bfc <_malloc_r+0xa8>
 8012c24:	4623      	mov	r3, r4
 8012c26:	6864      	ldr	r4, [r4, #4]
 8012c28:	e7ae      	b.n	8012b88 <_malloc_r+0x34>
 8012c2a:	463c      	mov	r4, r7
 8012c2c:	687f      	ldr	r7, [r7, #4]
 8012c2e:	e7b6      	b.n	8012b9e <_malloc_r+0x4a>
 8012c30:	461a      	mov	r2, r3
 8012c32:	685b      	ldr	r3, [r3, #4]
 8012c34:	42a3      	cmp	r3, r4
 8012c36:	d1fb      	bne.n	8012c30 <_malloc_r+0xdc>
 8012c38:	2300      	movs	r3, #0
 8012c3a:	6053      	str	r3, [r2, #4]
 8012c3c:	e7de      	b.n	8012bfc <_malloc_r+0xa8>
 8012c3e:	230c      	movs	r3, #12
 8012c40:	6033      	str	r3, [r6, #0]
 8012c42:	4630      	mov	r0, r6
 8012c44:	f000 f80c 	bl	8012c60 <__malloc_unlock>
 8012c48:	e794      	b.n	8012b74 <_malloc_r+0x20>
 8012c4a:	6005      	str	r5, [r0, #0]
 8012c4c:	e7d6      	b.n	8012bfc <_malloc_r+0xa8>
 8012c4e:	bf00      	nop
 8012c50:	20002724 	.word	0x20002724

08012c54 <__malloc_lock>:
 8012c54:	4801      	ldr	r0, [pc, #4]	@ (8012c5c <__malloc_lock+0x8>)
 8012c56:	f000 b84b 	b.w	8012cf0 <__retarget_lock_acquire_recursive>
 8012c5a:	bf00      	nop
 8012c5c:	20002864 	.word	0x20002864

08012c60 <__malloc_unlock>:
 8012c60:	4801      	ldr	r0, [pc, #4]	@ (8012c68 <__malloc_unlock+0x8>)
 8012c62:	f000 b846 	b.w	8012cf2 <__retarget_lock_release_recursive>
 8012c66:	bf00      	nop
 8012c68:	20002864 	.word	0x20002864

08012c6c <memset>:
 8012c6c:	4402      	add	r2, r0
 8012c6e:	4603      	mov	r3, r0
 8012c70:	4293      	cmp	r3, r2
 8012c72:	d100      	bne.n	8012c76 <memset+0xa>
 8012c74:	4770      	bx	lr
 8012c76:	f803 1b01 	strb.w	r1, [r3], #1
 8012c7a:	e7f9      	b.n	8012c70 <memset+0x4>

08012c7c <_sbrk_r>:
 8012c7c:	b538      	push	{r3, r4, r5, lr}
 8012c7e:	4d06      	ldr	r5, [pc, #24]	@ (8012c98 <_sbrk_r+0x1c>)
 8012c80:	2300      	movs	r3, #0
 8012c82:	4604      	mov	r4, r0
 8012c84:	4608      	mov	r0, r1
 8012c86:	602b      	str	r3, [r5, #0]
 8012c88:	f7f7 f846 	bl	8009d18 <_sbrk>
 8012c8c:	1c43      	adds	r3, r0, #1
 8012c8e:	d102      	bne.n	8012c96 <_sbrk_r+0x1a>
 8012c90:	682b      	ldr	r3, [r5, #0]
 8012c92:	b103      	cbz	r3, 8012c96 <_sbrk_r+0x1a>
 8012c94:	6023      	str	r3, [r4, #0]
 8012c96:	bd38      	pop	{r3, r4, r5, pc}
 8012c98:	20002860 	.word	0x20002860

08012c9c <__errno>:
 8012c9c:	4b01      	ldr	r3, [pc, #4]	@ (8012ca4 <__errno+0x8>)
 8012c9e:	6818      	ldr	r0, [r3, #0]
 8012ca0:	4770      	bx	lr
 8012ca2:	bf00      	nop
 8012ca4:	200005c0 	.word	0x200005c0

08012ca8 <__libc_init_array>:
 8012ca8:	b570      	push	{r4, r5, r6, lr}
 8012caa:	4d0d      	ldr	r5, [pc, #52]	@ (8012ce0 <__libc_init_array+0x38>)
 8012cac:	4c0d      	ldr	r4, [pc, #52]	@ (8012ce4 <__libc_init_array+0x3c>)
 8012cae:	1b64      	subs	r4, r4, r5
 8012cb0:	10a4      	asrs	r4, r4, #2
 8012cb2:	2600      	movs	r6, #0
 8012cb4:	42a6      	cmp	r6, r4
 8012cb6:	d109      	bne.n	8012ccc <__libc_init_array+0x24>
 8012cb8:	4d0b      	ldr	r5, [pc, #44]	@ (8012ce8 <__libc_init_array+0x40>)
 8012cba:	4c0c      	ldr	r4, [pc, #48]	@ (8012cec <__libc_init_array+0x44>)
 8012cbc:	f001 ff30 	bl	8014b20 <_init>
 8012cc0:	1b64      	subs	r4, r4, r5
 8012cc2:	10a4      	asrs	r4, r4, #2
 8012cc4:	2600      	movs	r6, #0
 8012cc6:	42a6      	cmp	r6, r4
 8012cc8:	d105      	bne.n	8012cd6 <__libc_init_array+0x2e>
 8012cca:	bd70      	pop	{r4, r5, r6, pc}
 8012ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8012cd0:	4798      	blx	r3
 8012cd2:	3601      	adds	r6, #1
 8012cd4:	e7ee      	b.n	8012cb4 <__libc_init_array+0xc>
 8012cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8012cda:	4798      	blx	r3
 8012cdc:	3601      	adds	r6, #1
 8012cde:	e7f2      	b.n	8012cc6 <__libc_init_array+0x1e>
 8012ce0:	08015190 	.word	0x08015190
 8012ce4:	08015190 	.word	0x08015190
 8012ce8:	08015190 	.word	0x08015190
 8012cec:	08015194 	.word	0x08015194

08012cf0 <__retarget_lock_acquire_recursive>:
 8012cf0:	4770      	bx	lr

08012cf2 <__retarget_lock_release_recursive>:
 8012cf2:	4770      	bx	lr

08012cf4 <memcpy>:
 8012cf4:	440a      	add	r2, r1
 8012cf6:	4291      	cmp	r1, r2
 8012cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8012cfc:	d100      	bne.n	8012d00 <memcpy+0xc>
 8012cfe:	4770      	bx	lr
 8012d00:	b510      	push	{r4, lr}
 8012d02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012d06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012d0a:	4291      	cmp	r1, r2
 8012d0c:	d1f9      	bne.n	8012d02 <memcpy+0xe>
 8012d0e:	bd10      	pop	{r4, pc}

08012d10 <cos>:
 8012d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d12:	ec53 2b10 	vmov	r2, r3, d0
 8012d16:	4826      	ldr	r0, [pc, #152]	@ (8012db0 <cos+0xa0>)
 8012d18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012d1c:	4281      	cmp	r1, r0
 8012d1e:	d806      	bhi.n	8012d2e <cos+0x1e>
 8012d20:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012da8 <cos+0x98>
 8012d24:	b005      	add	sp, #20
 8012d26:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d2a:	f000 b9bd 	b.w	80130a8 <__kernel_cos>
 8012d2e:	4821      	ldr	r0, [pc, #132]	@ (8012db4 <cos+0xa4>)
 8012d30:	4281      	cmp	r1, r0
 8012d32:	d908      	bls.n	8012d46 <cos+0x36>
 8012d34:	4610      	mov	r0, r2
 8012d36:	4619      	mov	r1, r3
 8012d38:	f7ed fa72 	bl	8000220 <__aeabi_dsub>
 8012d3c:	ec41 0b10 	vmov	d0, r0, r1
 8012d40:	b005      	add	sp, #20
 8012d42:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d46:	4668      	mov	r0, sp
 8012d48:	f000 fb32 	bl	80133b0 <__ieee754_rem_pio2>
 8012d4c:	f000 0003 	and.w	r0, r0, #3
 8012d50:	2801      	cmp	r0, #1
 8012d52:	d00b      	beq.n	8012d6c <cos+0x5c>
 8012d54:	2802      	cmp	r0, #2
 8012d56:	d015      	beq.n	8012d84 <cos+0x74>
 8012d58:	b9d8      	cbnz	r0, 8012d92 <cos+0x82>
 8012d5a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d5e:	ed9d 0b00 	vldr	d0, [sp]
 8012d62:	f000 f9a1 	bl	80130a8 <__kernel_cos>
 8012d66:	ec51 0b10 	vmov	r0, r1, d0
 8012d6a:	e7e7      	b.n	8012d3c <cos+0x2c>
 8012d6c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d70:	ed9d 0b00 	vldr	d0, [sp]
 8012d74:	f000 fa60 	bl	8013238 <__kernel_sin>
 8012d78:	ec53 2b10 	vmov	r2, r3, d0
 8012d7c:	4610      	mov	r0, r2
 8012d7e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012d82:	e7db      	b.n	8012d3c <cos+0x2c>
 8012d84:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d88:	ed9d 0b00 	vldr	d0, [sp]
 8012d8c:	f000 f98c 	bl	80130a8 <__kernel_cos>
 8012d90:	e7f2      	b.n	8012d78 <cos+0x68>
 8012d92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012d96:	ed9d 0b00 	vldr	d0, [sp]
 8012d9a:	2001      	movs	r0, #1
 8012d9c:	f000 fa4c 	bl	8013238 <__kernel_sin>
 8012da0:	e7e1      	b.n	8012d66 <cos+0x56>
 8012da2:	bf00      	nop
 8012da4:	f3af 8000 	nop.w
	...
 8012db0:	3fe921fb 	.word	0x3fe921fb
 8012db4:	7fefffff 	.word	0x7fefffff

08012db8 <sin>:
 8012db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012dba:	ec53 2b10 	vmov	r2, r3, d0
 8012dbe:	4826      	ldr	r0, [pc, #152]	@ (8012e58 <sin+0xa0>)
 8012dc0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8012dc4:	4281      	cmp	r1, r0
 8012dc6:	d807      	bhi.n	8012dd8 <sin+0x20>
 8012dc8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8012e50 <sin+0x98>
 8012dcc:	2000      	movs	r0, #0
 8012dce:	b005      	add	sp, #20
 8012dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8012dd4:	f000 ba30 	b.w	8013238 <__kernel_sin>
 8012dd8:	4820      	ldr	r0, [pc, #128]	@ (8012e5c <sin+0xa4>)
 8012dda:	4281      	cmp	r1, r0
 8012ddc:	d908      	bls.n	8012df0 <sin+0x38>
 8012dde:	4610      	mov	r0, r2
 8012de0:	4619      	mov	r1, r3
 8012de2:	f7ed fa1d 	bl	8000220 <__aeabi_dsub>
 8012de6:	ec41 0b10 	vmov	d0, r0, r1
 8012dea:	b005      	add	sp, #20
 8012dec:	f85d fb04 	ldr.w	pc, [sp], #4
 8012df0:	4668      	mov	r0, sp
 8012df2:	f000 fadd 	bl	80133b0 <__ieee754_rem_pio2>
 8012df6:	f000 0003 	and.w	r0, r0, #3
 8012dfa:	2801      	cmp	r0, #1
 8012dfc:	d00c      	beq.n	8012e18 <sin+0x60>
 8012dfe:	2802      	cmp	r0, #2
 8012e00:	d011      	beq.n	8012e26 <sin+0x6e>
 8012e02:	b9e8      	cbnz	r0, 8012e40 <sin+0x88>
 8012e04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e08:	ed9d 0b00 	vldr	d0, [sp]
 8012e0c:	2001      	movs	r0, #1
 8012e0e:	f000 fa13 	bl	8013238 <__kernel_sin>
 8012e12:	ec51 0b10 	vmov	r0, r1, d0
 8012e16:	e7e6      	b.n	8012de6 <sin+0x2e>
 8012e18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e1c:	ed9d 0b00 	vldr	d0, [sp]
 8012e20:	f000 f942 	bl	80130a8 <__kernel_cos>
 8012e24:	e7f5      	b.n	8012e12 <sin+0x5a>
 8012e26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e2a:	ed9d 0b00 	vldr	d0, [sp]
 8012e2e:	2001      	movs	r0, #1
 8012e30:	f000 fa02 	bl	8013238 <__kernel_sin>
 8012e34:	ec53 2b10 	vmov	r2, r3, d0
 8012e38:	4610      	mov	r0, r2
 8012e3a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8012e3e:	e7d2      	b.n	8012de6 <sin+0x2e>
 8012e40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e44:	ed9d 0b00 	vldr	d0, [sp]
 8012e48:	f000 f92e 	bl	80130a8 <__kernel_cos>
 8012e4c:	e7f2      	b.n	8012e34 <sin+0x7c>
 8012e4e:	bf00      	nop
	...
 8012e58:	3fe921fb 	.word	0x3fe921fb
 8012e5c:	7fefffff 	.word	0x7fefffff

08012e60 <fmodf>:
 8012e60:	b508      	push	{r3, lr}
 8012e62:	ed2d 8b02 	vpush	{d8}
 8012e66:	eef0 8a40 	vmov.f32	s17, s0
 8012e6a:	eeb0 8a60 	vmov.f32	s16, s1
 8012e6e:	f000 fd43 	bl	80138f8 <__ieee754_fmodf>
 8012e72:	eef4 8a48 	vcmp.f32	s17, s16
 8012e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e7a:	d60c      	bvs.n	8012e96 <fmodf+0x36>
 8012e7c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012e9c <fmodf+0x3c>
 8012e80:	eeb4 8a68 	vcmp.f32	s16, s17
 8012e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e88:	d105      	bne.n	8012e96 <fmodf+0x36>
 8012e8a:	f7ff ff07 	bl	8012c9c <__errno>
 8012e8e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012e92:	2321      	movs	r3, #33	@ 0x21
 8012e94:	6003      	str	r3, [r0, #0]
 8012e96:	ecbd 8b02 	vpop	{d8}
 8012e9a:	bd08      	pop	{r3, pc}
 8012e9c:	00000000 	.word	0x00000000

08012ea0 <sqrtf>:
 8012ea0:	b508      	push	{r3, lr}
 8012ea2:	ed2d 8b02 	vpush	{d8}
 8012ea6:	eeb0 8a40 	vmov.f32	s16, s0
 8012eaa:	f000 f8f7 	bl	801309c <__ieee754_sqrtf>
 8012eae:	eeb4 8a48 	vcmp.f32	s16, s16
 8012eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012eb6:	d60c      	bvs.n	8012ed2 <sqrtf+0x32>
 8012eb8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8012ed8 <sqrtf+0x38>
 8012ebc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ec4:	d505      	bpl.n	8012ed2 <sqrtf+0x32>
 8012ec6:	f7ff fee9 	bl	8012c9c <__errno>
 8012eca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012ece:	2321      	movs	r3, #33	@ 0x21
 8012ed0:	6003      	str	r3, [r0, #0]
 8012ed2:	ecbd 8b02 	vpop	{d8}
 8012ed6:	bd08      	pop	{r3, pc}
 8012ed8:	00000000 	.word	0x00000000

08012edc <cosf>:
 8012edc:	ee10 3a10 	vmov	r3, s0
 8012ee0:	b507      	push	{r0, r1, r2, lr}
 8012ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8012f5c <cosf+0x80>)
 8012ee4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012ee8:	4293      	cmp	r3, r2
 8012eea:	d806      	bhi.n	8012efa <cosf+0x1e>
 8012eec:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8012f60 <cosf+0x84>
 8012ef0:	b003      	add	sp, #12
 8012ef2:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ef6:	f000 bc5f 	b.w	80137b8 <__kernel_cosf>
 8012efa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012efe:	d304      	bcc.n	8012f0a <cosf+0x2e>
 8012f00:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012f04:	b003      	add	sp, #12
 8012f06:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f0a:	4668      	mov	r0, sp
 8012f0c:	f000 fd76 	bl	80139fc <__ieee754_rem_pio2f>
 8012f10:	f000 0003 	and.w	r0, r0, #3
 8012f14:	2801      	cmp	r0, #1
 8012f16:	d009      	beq.n	8012f2c <cosf+0x50>
 8012f18:	2802      	cmp	r0, #2
 8012f1a:	d010      	beq.n	8012f3e <cosf+0x62>
 8012f1c:	b9b0      	cbnz	r0, 8012f4c <cosf+0x70>
 8012f1e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f22:	ed9d 0a00 	vldr	s0, [sp]
 8012f26:	f000 fc47 	bl	80137b8 <__kernel_cosf>
 8012f2a:	e7eb      	b.n	8012f04 <cosf+0x28>
 8012f2c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f30:	ed9d 0a00 	vldr	s0, [sp]
 8012f34:	f000 fc98 	bl	8013868 <__kernel_sinf>
 8012f38:	eeb1 0a40 	vneg.f32	s0, s0
 8012f3c:	e7e2      	b.n	8012f04 <cosf+0x28>
 8012f3e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f42:	ed9d 0a00 	vldr	s0, [sp]
 8012f46:	f000 fc37 	bl	80137b8 <__kernel_cosf>
 8012f4a:	e7f5      	b.n	8012f38 <cosf+0x5c>
 8012f4c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012f50:	ed9d 0a00 	vldr	s0, [sp]
 8012f54:	2001      	movs	r0, #1
 8012f56:	f000 fc87 	bl	8013868 <__kernel_sinf>
 8012f5a:	e7d3      	b.n	8012f04 <cosf+0x28>
 8012f5c:	3f490fd8 	.word	0x3f490fd8
 8012f60:	00000000 	.word	0x00000000

08012f64 <sinf>:
 8012f64:	ee10 3a10 	vmov	r3, s0
 8012f68:	b507      	push	{r0, r1, r2, lr}
 8012f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8012fe8 <sinf+0x84>)
 8012f6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012f70:	4293      	cmp	r3, r2
 8012f72:	d807      	bhi.n	8012f84 <sinf+0x20>
 8012f74:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8012fec <sinf+0x88>
 8012f78:	2000      	movs	r0, #0
 8012f7a:	b003      	add	sp, #12
 8012f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012f80:	f000 bc72 	b.w	8013868 <__kernel_sinf>
 8012f84:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012f88:	d304      	bcc.n	8012f94 <sinf+0x30>
 8012f8a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012f8e:	b003      	add	sp, #12
 8012f90:	f85d fb04 	ldr.w	pc, [sp], #4
 8012f94:	4668      	mov	r0, sp
 8012f96:	f000 fd31 	bl	80139fc <__ieee754_rem_pio2f>
 8012f9a:	f000 0003 	and.w	r0, r0, #3
 8012f9e:	2801      	cmp	r0, #1
 8012fa0:	d00a      	beq.n	8012fb8 <sinf+0x54>
 8012fa2:	2802      	cmp	r0, #2
 8012fa4:	d00f      	beq.n	8012fc6 <sinf+0x62>
 8012fa6:	b9c0      	cbnz	r0, 8012fda <sinf+0x76>
 8012fa8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012fac:	ed9d 0a00 	vldr	s0, [sp]
 8012fb0:	2001      	movs	r0, #1
 8012fb2:	f000 fc59 	bl	8013868 <__kernel_sinf>
 8012fb6:	e7ea      	b.n	8012f8e <sinf+0x2a>
 8012fb8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012fbc:	ed9d 0a00 	vldr	s0, [sp]
 8012fc0:	f000 fbfa 	bl	80137b8 <__kernel_cosf>
 8012fc4:	e7e3      	b.n	8012f8e <sinf+0x2a>
 8012fc6:	eddd 0a01 	vldr	s1, [sp, #4]
 8012fca:	ed9d 0a00 	vldr	s0, [sp]
 8012fce:	2001      	movs	r0, #1
 8012fd0:	f000 fc4a 	bl	8013868 <__kernel_sinf>
 8012fd4:	eeb1 0a40 	vneg.f32	s0, s0
 8012fd8:	e7d9      	b.n	8012f8e <sinf+0x2a>
 8012fda:	eddd 0a01 	vldr	s1, [sp, #4]
 8012fde:	ed9d 0a00 	vldr	s0, [sp]
 8012fe2:	f000 fbe9 	bl	80137b8 <__kernel_cosf>
 8012fe6:	e7f5      	b.n	8012fd4 <sinf+0x70>
 8012fe8:	3f490fd8 	.word	0x3f490fd8
 8012fec:	00000000 	.word	0x00000000

08012ff0 <fmaxf>:
 8012ff0:	b508      	push	{r3, lr}
 8012ff2:	ed2d 8b02 	vpush	{d8}
 8012ff6:	eeb0 8a40 	vmov.f32	s16, s0
 8012ffa:	eef0 8a60 	vmov.f32	s17, s1
 8012ffe:	f000 f831 	bl	8013064 <__fpclassifyf>
 8013002:	b930      	cbnz	r0, 8013012 <fmaxf+0x22>
 8013004:	eeb0 8a68 	vmov.f32	s16, s17
 8013008:	eeb0 0a48 	vmov.f32	s0, s16
 801300c:	ecbd 8b02 	vpop	{d8}
 8013010:	bd08      	pop	{r3, pc}
 8013012:	eeb0 0a68 	vmov.f32	s0, s17
 8013016:	f000 f825 	bl	8013064 <__fpclassifyf>
 801301a:	2800      	cmp	r0, #0
 801301c:	d0f4      	beq.n	8013008 <fmaxf+0x18>
 801301e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013026:	dded      	ble.n	8013004 <fmaxf+0x14>
 8013028:	e7ee      	b.n	8013008 <fmaxf+0x18>

0801302a <fminf>:
 801302a:	b508      	push	{r3, lr}
 801302c:	ed2d 8b02 	vpush	{d8}
 8013030:	eeb0 8a40 	vmov.f32	s16, s0
 8013034:	eef0 8a60 	vmov.f32	s17, s1
 8013038:	f000 f814 	bl	8013064 <__fpclassifyf>
 801303c:	b930      	cbnz	r0, 801304c <fminf+0x22>
 801303e:	eeb0 8a68 	vmov.f32	s16, s17
 8013042:	eeb0 0a48 	vmov.f32	s0, s16
 8013046:	ecbd 8b02 	vpop	{d8}
 801304a:	bd08      	pop	{r3, pc}
 801304c:	eeb0 0a68 	vmov.f32	s0, s17
 8013050:	f000 f808 	bl	8013064 <__fpclassifyf>
 8013054:	2800      	cmp	r0, #0
 8013056:	d0f4      	beq.n	8013042 <fminf+0x18>
 8013058:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801305c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013060:	d5ed      	bpl.n	801303e <fminf+0x14>
 8013062:	e7ee      	b.n	8013042 <fminf+0x18>

08013064 <__fpclassifyf>:
 8013064:	ee10 3a10 	vmov	r3, s0
 8013068:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 801306c:	d00d      	beq.n	801308a <__fpclassifyf+0x26>
 801306e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8013072:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8013076:	d30a      	bcc.n	801308e <__fpclassifyf+0x2a>
 8013078:	4b07      	ldr	r3, [pc, #28]	@ (8013098 <__fpclassifyf+0x34>)
 801307a:	1e42      	subs	r2, r0, #1
 801307c:	429a      	cmp	r2, r3
 801307e:	d908      	bls.n	8013092 <__fpclassifyf+0x2e>
 8013080:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8013084:	4258      	negs	r0, r3
 8013086:	4158      	adcs	r0, r3
 8013088:	4770      	bx	lr
 801308a:	2002      	movs	r0, #2
 801308c:	4770      	bx	lr
 801308e:	2004      	movs	r0, #4
 8013090:	4770      	bx	lr
 8013092:	2003      	movs	r0, #3
 8013094:	4770      	bx	lr
 8013096:	bf00      	nop
 8013098:	007ffffe 	.word	0x007ffffe

0801309c <__ieee754_sqrtf>:
 801309c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80130a0:	4770      	bx	lr
 80130a2:	0000      	movs	r0, r0
 80130a4:	0000      	movs	r0, r0
	...

080130a8 <__kernel_cos>:
 80130a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130ac:	ec57 6b10 	vmov	r6, r7, d0
 80130b0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80130b4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80130b8:	ed8d 1b00 	vstr	d1, [sp]
 80130bc:	d206      	bcs.n	80130cc <__kernel_cos+0x24>
 80130be:	4630      	mov	r0, r6
 80130c0:	4639      	mov	r1, r7
 80130c2:	f7ed fcff 	bl	8000ac4 <__aeabi_d2iz>
 80130c6:	2800      	cmp	r0, #0
 80130c8:	f000 8088 	beq.w	80131dc <__kernel_cos+0x134>
 80130cc:	4632      	mov	r2, r6
 80130ce:	463b      	mov	r3, r7
 80130d0:	4630      	mov	r0, r6
 80130d2:	4639      	mov	r1, r7
 80130d4:	f7ed fa5c 	bl	8000590 <__aeabi_dmul>
 80130d8:	4b51      	ldr	r3, [pc, #324]	@ (8013220 <__kernel_cos+0x178>)
 80130da:	2200      	movs	r2, #0
 80130dc:	4604      	mov	r4, r0
 80130de:	460d      	mov	r5, r1
 80130e0:	f7ed fa56 	bl	8000590 <__aeabi_dmul>
 80130e4:	a340      	add	r3, pc, #256	@ (adr r3, 80131e8 <__kernel_cos+0x140>)
 80130e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ea:	4682      	mov	sl, r0
 80130ec:	468b      	mov	fp, r1
 80130ee:	4620      	mov	r0, r4
 80130f0:	4629      	mov	r1, r5
 80130f2:	f7ed fa4d 	bl	8000590 <__aeabi_dmul>
 80130f6:	a33e      	add	r3, pc, #248	@ (adr r3, 80131f0 <__kernel_cos+0x148>)
 80130f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130fc:	f7ed f892 	bl	8000224 <__adddf3>
 8013100:	4622      	mov	r2, r4
 8013102:	462b      	mov	r3, r5
 8013104:	f7ed fa44 	bl	8000590 <__aeabi_dmul>
 8013108:	a33b      	add	r3, pc, #236	@ (adr r3, 80131f8 <__kernel_cos+0x150>)
 801310a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310e:	f7ed f887 	bl	8000220 <__aeabi_dsub>
 8013112:	4622      	mov	r2, r4
 8013114:	462b      	mov	r3, r5
 8013116:	f7ed fa3b 	bl	8000590 <__aeabi_dmul>
 801311a:	a339      	add	r3, pc, #228	@ (adr r3, 8013200 <__kernel_cos+0x158>)
 801311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013120:	f7ed f880 	bl	8000224 <__adddf3>
 8013124:	4622      	mov	r2, r4
 8013126:	462b      	mov	r3, r5
 8013128:	f7ed fa32 	bl	8000590 <__aeabi_dmul>
 801312c:	a336      	add	r3, pc, #216	@ (adr r3, 8013208 <__kernel_cos+0x160>)
 801312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013132:	f7ed f875 	bl	8000220 <__aeabi_dsub>
 8013136:	4622      	mov	r2, r4
 8013138:	462b      	mov	r3, r5
 801313a:	f7ed fa29 	bl	8000590 <__aeabi_dmul>
 801313e:	a334      	add	r3, pc, #208	@ (adr r3, 8013210 <__kernel_cos+0x168>)
 8013140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013144:	f7ed f86e 	bl	8000224 <__adddf3>
 8013148:	4622      	mov	r2, r4
 801314a:	462b      	mov	r3, r5
 801314c:	f7ed fa20 	bl	8000590 <__aeabi_dmul>
 8013150:	4622      	mov	r2, r4
 8013152:	462b      	mov	r3, r5
 8013154:	f7ed fa1c 	bl	8000590 <__aeabi_dmul>
 8013158:	e9dd 2300 	ldrd	r2, r3, [sp]
 801315c:	4604      	mov	r4, r0
 801315e:	460d      	mov	r5, r1
 8013160:	4630      	mov	r0, r6
 8013162:	4639      	mov	r1, r7
 8013164:	f7ed fa14 	bl	8000590 <__aeabi_dmul>
 8013168:	460b      	mov	r3, r1
 801316a:	4602      	mov	r2, r0
 801316c:	4629      	mov	r1, r5
 801316e:	4620      	mov	r0, r4
 8013170:	f7ed f856 	bl	8000220 <__aeabi_dsub>
 8013174:	4b2b      	ldr	r3, [pc, #172]	@ (8013224 <__kernel_cos+0x17c>)
 8013176:	4598      	cmp	r8, r3
 8013178:	4606      	mov	r6, r0
 801317a:	460f      	mov	r7, r1
 801317c:	d810      	bhi.n	80131a0 <__kernel_cos+0xf8>
 801317e:	4602      	mov	r2, r0
 8013180:	460b      	mov	r3, r1
 8013182:	4650      	mov	r0, sl
 8013184:	4659      	mov	r1, fp
 8013186:	f7ed f84b 	bl	8000220 <__aeabi_dsub>
 801318a:	460b      	mov	r3, r1
 801318c:	4926      	ldr	r1, [pc, #152]	@ (8013228 <__kernel_cos+0x180>)
 801318e:	4602      	mov	r2, r0
 8013190:	2000      	movs	r0, #0
 8013192:	f7ed f845 	bl	8000220 <__aeabi_dsub>
 8013196:	ec41 0b10 	vmov	d0, r0, r1
 801319a:	b003      	add	sp, #12
 801319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131a0:	4b22      	ldr	r3, [pc, #136]	@ (801322c <__kernel_cos+0x184>)
 80131a2:	4921      	ldr	r1, [pc, #132]	@ (8013228 <__kernel_cos+0x180>)
 80131a4:	4598      	cmp	r8, r3
 80131a6:	bf8c      	ite	hi
 80131a8:	4d21      	ldrhi	r5, [pc, #132]	@ (8013230 <__kernel_cos+0x188>)
 80131aa:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80131ae:	2400      	movs	r4, #0
 80131b0:	4622      	mov	r2, r4
 80131b2:	462b      	mov	r3, r5
 80131b4:	2000      	movs	r0, #0
 80131b6:	f7ed f833 	bl	8000220 <__aeabi_dsub>
 80131ba:	4622      	mov	r2, r4
 80131bc:	4680      	mov	r8, r0
 80131be:	4689      	mov	r9, r1
 80131c0:	462b      	mov	r3, r5
 80131c2:	4650      	mov	r0, sl
 80131c4:	4659      	mov	r1, fp
 80131c6:	f7ed f82b 	bl	8000220 <__aeabi_dsub>
 80131ca:	4632      	mov	r2, r6
 80131cc:	463b      	mov	r3, r7
 80131ce:	f7ed f827 	bl	8000220 <__aeabi_dsub>
 80131d2:	4602      	mov	r2, r0
 80131d4:	460b      	mov	r3, r1
 80131d6:	4640      	mov	r0, r8
 80131d8:	4649      	mov	r1, r9
 80131da:	e7da      	b.n	8013192 <__kernel_cos+0xea>
 80131dc:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8013218 <__kernel_cos+0x170>
 80131e0:	e7db      	b.n	801319a <__kernel_cos+0xf2>
 80131e2:	bf00      	nop
 80131e4:	f3af 8000 	nop.w
 80131e8:	be8838d4 	.word	0xbe8838d4
 80131ec:	bda8fae9 	.word	0xbda8fae9
 80131f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80131f4:	3e21ee9e 	.word	0x3e21ee9e
 80131f8:	809c52ad 	.word	0x809c52ad
 80131fc:	3e927e4f 	.word	0x3e927e4f
 8013200:	19cb1590 	.word	0x19cb1590
 8013204:	3efa01a0 	.word	0x3efa01a0
 8013208:	16c15177 	.word	0x16c15177
 801320c:	3f56c16c 	.word	0x3f56c16c
 8013210:	5555554c 	.word	0x5555554c
 8013214:	3fa55555 	.word	0x3fa55555
 8013218:	00000000 	.word	0x00000000
 801321c:	3ff00000 	.word	0x3ff00000
 8013220:	3fe00000 	.word	0x3fe00000
 8013224:	3fd33332 	.word	0x3fd33332
 8013228:	3ff00000 	.word	0x3ff00000
 801322c:	3fe90000 	.word	0x3fe90000
 8013230:	3fd20000 	.word	0x3fd20000
 8013234:	00000000 	.word	0x00000000

08013238 <__kernel_sin>:
 8013238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801323c:	ec55 4b10 	vmov	r4, r5, d0
 8013240:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013244:	b085      	sub	sp, #20
 8013246:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 801324a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801324e:	4680      	mov	r8, r0
 8013250:	d205      	bcs.n	801325e <__kernel_sin+0x26>
 8013252:	4620      	mov	r0, r4
 8013254:	4629      	mov	r1, r5
 8013256:	f7ed fc35 	bl	8000ac4 <__aeabi_d2iz>
 801325a:	2800      	cmp	r0, #0
 801325c:	d052      	beq.n	8013304 <__kernel_sin+0xcc>
 801325e:	4622      	mov	r2, r4
 8013260:	462b      	mov	r3, r5
 8013262:	4620      	mov	r0, r4
 8013264:	4629      	mov	r1, r5
 8013266:	f7ed f993 	bl	8000590 <__aeabi_dmul>
 801326a:	4682      	mov	sl, r0
 801326c:	468b      	mov	fp, r1
 801326e:	4602      	mov	r2, r0
 8013270:	460b      	mov	r3, r1
 8013272:	4620      	mov	r0, r4
 8013274:	4629      	mov	r1, r5
 8013276:	f7ed f98b 	bl	8000590 <__aeabi_dmul>
 801327a:	a342      	add	r3, pc, #264	@ (adr r3, 8013384 <__kernel_sin+0x14c>)
 801327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013280:	e9cd 0100 	strd	r0, r1, [sp]
 8013284:	4650      	mov	r0, sl
 8013286:	4659      	mov	r1, fp
 8013288:	f7ed f982 	bl	8000590 <__aeabi_dmul>
 801328c:	a33f      	add	r3, pc, #252	@ (adr r3, 801338c <__kernel_sin+0x154>)
 801328e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013292:	f7ec ffc5 	bl	8000220 <__aeabi_dsub>
 8013296:	4652      	mov	r2, sl
 8013298:	465b      	mov	r3, fp
 801329a:	f7ed f979 	bl	8000590 <__aeabi_dmul>
 801329e:	a33d      	add	r3, pc, #244	@ (adr r3, 8013394 <__kernel_sin+0x15c>)
 80132a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a4:	f7ec ffbe 	bl	8000224 <__adddf3>
 80132a8:	4652      	mov	r2, sl
 80132aa:	465b      	mov	r3, fp
 80132ac:	f7ed f970 	bl	8000590 <__aeabi_dmul>
 80132b0:	a33a      	add	r3, pc, #232	@ (adr r3, 801339c <__kernel_sin+0x164>)
 80132b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132b6:	f7ec ffb3 	bl	8000220 <__aeabi_dsub>
 80132ba:	4652      	mov	r2, sl
 80132bc:	465b      	mov	r3, fp
 80132be:	f7ed f967 	bl	8000590 <__aeabi_dmul>
 80132c2:	a338      	add	r3, pc, #224	@ (adr r3, 80133a4 <__kernel_sin+0x16c>)
 80132c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c8:	f7ec ffac 	bl	8000224 <__adddf3>
 80132cc:	4606      	mov	r6, r0
 80132ce:	460f      	mov	r7, r1
 80132d0:	f1b8 0f00 	cmp.w	r8, #0
 80132d4:	d11b      	bne.n	801330e <__kernel_sin+0xd6>
 80132d6:	4602      	mov	r2, r0
 80132d8:	460b      	mov	r3, r1
 80132da:	4650      	mov	r0, sl
 80132dc:	4659      	mov	r1, fp
 80132de:	f7ed f957 	bl	8000590 <__aeabi_dmul>
 80132e2:	a325      	add	r3, pc, #148	@ (adr r3, 8013378 <__kernel_sin+0x140>)
 80132e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e8:	f7ec ff9a 	bl	8000220 <__aeabi_dsub>
 80132ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132f0:	f7ed f94e 	bl	8000590 <__aeabi_dmul>
 80132f4:	4602      	mov	r2, r0
 80132f6:	460b      	mov	r3, r1
 80132f8:	4620      	mov	r0, r4
 80132fa:	4629      	mov	r1, r5
 80132fc:	f7ec ff92 	bl	8000224 <__adddf3>
 8013300:	4604      	mov	r4, r0
 8013302:	460d      	mov	r5, r1
 8013304:	ec45 4b10 	vmov	d0, r4, r5
 8013308:	b005      	add	sp, #20
 801330a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801330e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013312:	4b1b      	ldr	r3, [pc, #108]	@ (8013380 <__kernel_sin+0x148>)
 8013314:	2200      	movs	r2, #0
 8013316:	f7ed f93b 	bl	8000590 <__aeabi_dmul>
 801331a:	4632      	mov	r2, r6
 801331c:	4680      	mov	r8, r0
 801331e:	4689      	mov	r9, r1
 8013320:	463b      	mov	r3, r7
 8013322:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013326:	f7ed f933 	bl	8000590 <__aeabi_dmul>
 801332a:	4602      	mov	r2, r0
 801332c:	460b      	mov	r3, r1
 801332e:	4640      	mov	r0, r8
 8013330:	4649      	mov	r1, r9
 8013332:	f7ec ff75 	bl	8000220 <__aeabi_dsub>
 8013336:	4652      	mov	r2, sl
 8013338:	465b      	mov	r3, fp
 801333a:	f7ed f929 	bl	8000590 <__aeabi_dmul>
 801333e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013342:	f7ec ff6d 	bl	8000220 <__aeabi_dsub>
 8013346:	a30c      	add	r3, pc, #48	@ (adr r3, 8013378 <__kernel_sin+0x140>)
 8013348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334c:	4606      	mov	r6, r0
 801334e:	460f      	mov	r7, r1
 8013350:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013354:	f7ed f91c 	bl	8000590 <__aeabi_dmul>
 8013358:	4602      	mov	r2, r0
 801335a:	460b      	mov	r3, r1
 801335c:	4630      	mov	r0, r6
 801335e:	4639      	mov	r1, r7
 8013360:	f7ec ff60 	bl	8000224 <__adddf3>
 8013364:	4602      	mov	r2, r0
 8013366:	460b      	mov	r3, r1
 8013368:	4620      	mov	r0, r4
 801336a:	4629      	mov	r1, r5
 801336c:	f7ec ff58 	bl	8000220 <__aeabi_dsub>
 8013370:	e7c6      	b.n	8013300 <__kernel_sin+0xc8>
 8013372:	bf00      	nop
 8013374:	f3af 8000 	nop.w
 8013378:	55555549 	.word	0x55555549
 801337c:	3fc55555 	.word	0x3fc55555
 8013380:	3fe00000 	.word	0x3fe00000
 8013384:	5acfd57c 	.word	0x5acfd57c
 8013388:	3de5d93a 	.word	0x3de5d93a
 801338c:	8a2b9ceb 	.word	0x8a2b9ceb
 8013390:	3e5ae5e6 	.word	0x3e5ae5e6
 8013394:	57b1fe7d 	.word	0x57b1fe7d
 8013398:	3ec71de3 	.word	0x3ec71de3
 801339c:	19c161d5 	.word	0x19c161d5
 80133a0:	3f2a01a0 	.word	0x3f2a01a0
 80133a4:	1110f8a6 	.word	0x1110f8a6
 80133a8:	3f811111 	.word	0x3f811111
 80133ac:	00000000 	.word	0x00000000

080133b0 <__ieee754_rem_pio2>:
 80133b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133b4:	ec57 6b10 	vmov	r6, r7, d0
 80133b8:	4bc5      	ldr	r3, [pc, #788]	@ (80136d0 <__ieee754_rem_pio2+0x320>)
 80133ba:	b08d      	sub	sp, #52	@ 0x34
 80133bc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80133c0:	4598      	cmp	r8, r3
 80133c2:	4604      	mov	r4, r0
 80133c4:	9704      	str	r7, [sp, #16]
 80133c6:	d807      	bhi.n	80133d8 <__ieee754_rem_pio2+0x28>
 80133c8:	2200      	movs	r2, #0
 80133ca:	2300      	movs	r3, #0
 80133cc:	ed80 0b00 	vstr	d0, [r0]
 80133d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80133d4:	2500      	movs	r5, #0
 80133d6:	e028      	b.n	801342a <__ieee754_rem_pio2+0x7a>
 80133d8:	4bbe      	ldr	r3, [pc, #760]	@ (80136d4 <__ieee754_rem_pio2+0x324>)
 80133da:	4598      	cmp	r8, r3
 80133dc:	d878      	bhi.n	80134d0 <__ieee754_rem_pio2+0x120>
 80133de:	9b04      	ldr	r3, [sp, #16]
 80133e0:	4dbd      	ldr	r5, [pc, #756]	@ (80136d8 <__ieee754_rem_pio2+0x328>)
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	4630      	mov	r0, r6
 80133e6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8013698 <__ieee754_rem_pio2+0x2e8>)
 80133e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ec:	4639      	mov	r1, r7
 80133ee:	dd38      	ble.n	8013462 <__ieee754_rem_pio2+0xb2>
 80133f0:	f7ec ff16 	bl	8000220 <__aeabi_dsub>
 80133f4:	45a8      	cmp	r8, r5
 80133f6:	4606      	mov	r6, r0
 80133f8:	460f      	mov	r7, r1
 80133fa:	d01a      	beq.n	8013432 <__ieee754_rem_pio2+0x82>
 80133fc:	a3a8      	add	r3, pc, #672	@ (adr r3, 80136a0 <__ieee754_rem_pio2+0x2f0>)
 80133fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013402:	f7ec ff0d 	bl	8000220 <__aeabi_dsub>
 8013406:	4602      	mov	r2, r0
 8013408:	460b      	mov	r3, r1
 801340a:	4680      	mov	r8, r0
 801340c:	4689      	mov	r9, r1
 801340e:	4630      	mov	r0, r6
 8013410:	4639      	mov	r1, r7
 8013412:	f7ec ff05 	bl	8000220 <__aeabi_dsub>
 8013416:	a3a2      	add	r3, pc, #648	@ (adr r3, 80136a0 <__ieee754_rem_pio2+0x2f0>)
 8013418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801341c:	f7ec ff00 	bl	8000220 <__aeabi_dsub>
 8013420:	e9c4 8900 	strd	r8, r9, [r4]
 8013424:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013428:	2501      	movs	r5, #1
 801342a:	4628      	mov	r0, r5
 801342c:	b00d      	add	sp, #52	@ 0x34
 801342e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013432:	a39d      	add	r3, pc, #628	@ (adr r3, 80136a8 <__ieee754_rem_pio2+0x2f8>)
 8013434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013438:	f7ec fef2 	bl	8000220 <__aeabi_dsub>
 801343c:	a39c      	add	r3, pc, #624	@ (adr r3, 80136b0 <__ieee754_rem_pio2+0x300>)
 801343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013442:	4606      	mov	r6, r0
 8013444:	460f      	mov	r7, r1
 8013446:	f7ec feeb 	bl	8000220 <__aeabi_dsub>
 801344a:	4602      	mov	r2, r0
 801344c:	460b      	mov	r3, r1
 801344e:	4680      	mov	r8, r0
 8013450:	4689      	mov	r9, r1
 8013452:	4630      	mov	r0, r6
 8013454:	4639      	mov	r1, r7
 8013456:	f7ec fee3 	bl	8000220 <__aeabi_dsub>
 801345a:	a395      	add	r3, pc, #596	@ (adr r3, 80136b0 <__ieee754_rem_pio2+0x300>)
 801345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013460:	e7dc      	b.n	801341c <__ieee754_rem_pio2+0x6c>
 8013462:	f7ec fedf 	bl	8000224 <__adddf3>
 8013466:	45a8      	cmp	r8, r5
 8013468:	4606      	mov	r6, r0
 801346a:	460f      	mov	r7, r1
 801346c:	d018      	beq.n	80134a0 <__ieee754_rem_pio2+0xf0>
 801346e:	a38c      	add	r3, pc, #560	@ (adr r3, 80136a0 <__ieee754_rem_pio2+0x2f0>)
 8013470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013474:	f7ec fed6 	bl	8000224 <__adddf3>
 8013478:	4602      	mov	r2, r0
 801347a:	460b      	mov	r3, r1
 801347c:	4680      	mov	r8, r0
 801347e:	4689      	mov	r9, r1
 8013480:	4630      	mov	r0, r6
 8013482:	4639      	mov	r1, r7
 8013484:	f7ec fecc 	bl	8000220 <__aeabi_dsub>
 8013488:	a385      	add	r3, pc, #532	@ (adr r3, 80136a0 <__ieee754_rem_pio2+0x2f0>)
 801348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348e:	f7ec fec9 	bl	8000224 <__adddf3>
 8013492:	f04f 35ff 	mov.w	r5, #4294967295
 8013496:	e9c4 8900 	strd	r8, r9, [r4]
 801349a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801349e:	e7c4      	b.n	801342a <__ieee754_rem_pio2+0x7a>
 80134a0:	a381      	add	r3, pc, #516	@ (adr r3, 80136a8 <__ieee754_rem_pio2+0x2f8>)
 80134a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a6:	f7ec febd 	bl	8000224 <__adddf3>
 80134aa:	a381      	add	r3, pc, #516	@ (adr r3, 80136b0 <__ieee754_rem_pio2+0x300>)
 80134ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b0:	4606      	mov	r6, r0
 80134b2:	460f      	mov	r7, r1
 80134b4:	f7ec feb6 	bl	8000224 <__adddf3>
 80134b8:	4602      	mov	r2, r0
 80134ba:	460b      	mov	r3, r1
 80134bc:	4680      	mov	r8, r0
 80134be:	4689      	mov	r9, r1
 80134c0:	4630      	mov	r0, r6
 80134c2:	4639      	mov	r1, r7
 80134c4:	f7ec feac 	bl	8000220 <__aeabi_dsub>
 80134c8:	a379      	add	r3, pc, #484	@ (adr r3, 80136b0 <__ieee754_rem_pio2+0x300>)
 80134ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ce:	e7de      	b.n	801348e <__ieee754_rem_pio2+0xde>
 80134d0:	4b82      	ldr	r3, [pc, #520]	@ (80136dc <__ieee754_rem_pio2+0x32c>)
 80134d2:	4598      	cmp	r8, r3
 80134d4:	f200 80d1 	bhi.w	801367a <__ieee754_rem_pio2+0x2ca>
 80134d8:	f000 f966 	bl	80137a8 <fabs>
 80134dc:	ec57 6b10 	vmov	r6, r7, d0
 80134e0:	a375      	add	r3, pc, #468	@ (adr r3, 80136b8 <__ieee754_rem_pio2+0x308>)
 80134e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134e6:	4630      	mov	r0, r6
 80134e8:	4639      	mov	r1, r7
 80134ea:	f7ed f851 	bl	8000590 <__aeabi_dmul>
 80134ee:	4b7c      	ldr	r3, [pc, #496]	@ (80136e0 <__ieee754_rem_pio2+0x330>)
 80134f0:	2200      	movs	r2, #0
 80134f2:	f7ec fe97 	bl	8000224 <__adddf3>
 80134f6:	f7ed fae5 	bl	8000ac4 <__aeabi_d2iz>
 80134fa:	4605      	mov	r5, r0
 80134fc:	f7ec ffde 	bl	80004bc <__aeabi_i2d>
 8013500:	4602      	mov	r2, r0
 8013502:	460b      	mov	r3, r1
 8013504:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013508:	a363      	add	r3, pc, #396	@ (adr r3, 8013698 <__ieee754_rem_pio2+0x2e8>)
 801350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801350e:	f7ed f83f 	bl	8000590 <__aeabi_dmul>
 8013512:	4602      	mov	r2, r0
 8013514:	460b      	mov	r3, r1
 8013516:	4630      	mov	r0, r6
 8013518:	4639      	mov	r1, r7
 801351a:	f7ec fe81 	bl	8000220 <__aeabi_dsub>
 801351e:	a360      	add	r3, pc, #384	@ (adr r3, 80136a0 <__ieee754_rem_pio2+0x2f0>)
 8013520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013524:	4682      	mov	sl, r0
 8013526:	468b      	mov	fp, r1
 8013528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801352c:	f7ed f830 	bl	8000590 <__aeabi_dmul>
 8013530:	2d1f      	cmp	r5, #31
 8013532:	4606      	mov	r6, r0
 8013534:	460f      	mov	r7, r1
 8013536:	dc0c      	bgt.n	8013552 <__ieee754_rem_pio2+0x1a2>
 8013538:	4b6a      	ldr	r3, [pc, #424]	@ (80136e4 <__ieee754_rem_pio2+0x334>)
 801353a:	1e6a      	subs	r2, r5, #1
 801353c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013540:	4543      	cmp	r3, r8
 8013542:	d006      	beq.n	8013552 <__ieee754_rem_pio2+0x1a2>
 8013544:	4632      	mov	r2, r6
 8013546:	463b      	mov	r3, r7
 8013548:	4650      	mov	r0, sl
 801354a:	4659      	mov	r1, fp
 801354c:	f7ec fe68 	bl	8000220 <__aeabi_dsub>
 8013550:	e00e      	b.n	8013570 <__ieee754_rem_pio2+0x1c0>
 8013552:	463b      	mov	r3, r7
 8013554:	4632      	mov	r2, r6
 8013556:	4650      	mov	r0, sl
 8013558:	4659      	mov	r1, fp
 801355a:	f7ec fe61 	bl	8000220 <__aeabi_dsub>
 801355e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8013562:	9305      	str	r3, [sp, #20]
 8013564:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013568:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 801356c:	2b10      	cmp	r3, #16
 801356e:	dc02      	bgt.n	8013576 <__ieee754_rem_pio2+0x1c6>
 8013570:	e9c4 0100 	strd	r0, r1, [r4]
 8013574:	e039      	b.n	80135ea <__ieee754_rem_pio2+0x23a>
 8013576:	a34c      	add	r3, pc, #304	@ (adr r3, 80136a8 <__ieee754_rem_pio2+0x2f8>)
 8013578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013580:	f7ed f806 	bl	8000590 <__aeabi_dmul>
 8013584:	4606      	mov	r6, r0
 8013586:	460f      	mov	r7, r1
 8013588:	4602      	mov	r2, r0
 801358a:	460b      	mov	r3, r1
 801358c:	4650      	mov	r0, sl
 801358e:	4659      	mov	r1, fp
 8013590:	f7ec fe46 	bl	8000220 <__aeabi_dsub>
 8013594:	4602      	mov	r2, r0
 8013596:	460b      	mov	r3, r1
 8013598:	4680      	mov	r8, r0
 801359a:	4689      	mov	r9, r1
 801359c:	4650      	mov	r0, sl
 801359e:	4659      	mov	r1, fp
 80135a0:	f7ec fe3e 	bl	8000220 <__aeabi_dsub>
 80135a4:	4632      	mov	r2, r6
 80135a6:	463b      	mov	r3, r7
 80135a8:	f7ec fe3a 	bl	8000220 <__aeabi_dsub>
 80135ac:	a340      	add	r3, pc, #256	@ (adr r3, 80136b0 <__ieee754_rem_pio2+0x300>)
 80135ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b2:	4606      	mov	r6, r0
 80135b4:	460f      	mov	r7, r1
 80135b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80135ba:	f7ec ffe9 	bl	8000590 <__aeabi_dmul>
 80135be:	4632      	mov	r2, r6
 80135c0:	463b      	mov	r3, r7
 80135c2:	f7ec fe2d 	bl	8000220 <__aeabi_dsub>
 80135c6:	4602      	mov	r2, r0
 80135c8:	460b      	mov	r3, r1
 80135ca:	4606      	mov	r6, r0
 80135cc:	460f      	mov	r7, r1
 80135ce:	4640      	mov	r0, r8
 80135d0:	4649      	mov	r1, r9
 80135d2:	f7ec fe25 	bl	8000220 <__aeabi_dsub>
 80135d6:	9a05      	ldr	r2, [sp, #20]
 80135d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80135dc:	1ad3      	subs	r3, r2, r3
 80135de:	2b31      	cmp	r3, #49	@ 0x31
 80135e0:	dc20      	bgt.n	8013624 <__ieee754_rem_pio2+0x274>
 80135e2:	e9c4 0100 	strd	r0, r1, [r4]
 80135e6:	46c2      	mov	sl, r8
 80135e8:	46cb      	mov	fp, r9
 80135ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 80135ee:	4650      	mov	r0, sl
 80135f0:	4642      	mov	r2, r8
 80135f2:	464b      	mov	r3, r9
 80135f4:	4659      	mov	r1, fp
 80135f6:	f7ec fe13 	bl	8000220 <__aeabi_dsub>
 80135fa:	463b      	mov	r3, r7
 80135fc:	4632      	mov	r2, r6
 80135fe:	f7ec fe0f 	bl	8000220 <__aeabi_dsub>
 8013602:	9b04      	ldr	r3, [sp, #16]
 8013604:	2b00      	cmp	r3, #0
 8013606:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801360a:	f6bf af0e 	bge.w	801342a <__ieee754_rem_pio2+0x7a>
 801360e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8013612:	6063      	str	r3, [r4, #4]
 8013614:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013618:	f8c4 8000 	str.w	r8, [r4]
 801361c:	60a0      	str	r0, [r4, #8]
 801361e:	60e3      	str	r3, [r4, #12]
 8013620:	426d      	negs	r5, r5
 8013622:	e702      	b.n	801342a <__ieee754_rem_pio2+0x7a>
 8013624:	a326      	add	r3, pc, #152	@ (adr r3, 80136c0 <__ieee754_rem_pio2+0x310>)
 8013626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801362a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801362e:	f7ec ffaf 	bl	8000590 <__aeabi_dmul>
 8013632:	4606      	mov	r6, r0
 8013634:	460f      	mov	r7, r1
 8013636:	4602      	mov	r2, r0
 8013638:	460b      	mov	r3, r1
 801363a:	4640      	mov	r0, r8
 801363c:	4649      	mov	r1, r9
 801363e:	f7ec fdef 	bl	8000220 <__aeabi_dsub>
 8013642:	4602      	mov	r2, r0
 8013644:	460b      	mov	r3, r1
 8013646:	4682      	mov	sl, r0
 8013648:	468b      	mov	fp, r1
 801364a:	4640      	mov	r0, r8
 801364c:	4649      	mov	r1, r9
 801364e:	f7ec fde7 	bl	8000220 <__aeabi_dsub>
 8013652:	4632      	mov	r2, r6
 8013654:	463b      	mov	r3, r7
 8013656:	f7ec fde3 	bl	8000220 <__aeabi_dsub>
 801365a:	a31b      	add	r3, pc, #108	@ (adr r3, 80136c8 <__ieee754_rem_pio2+0x318>)
 801365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013660:	4606      	mov	r6, r0
 8013662:	460f      	mov	r7, r1
 8013664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013668:	f7ec ff92 	bl	8000590 <__aeabi_dmul>
 801366c:	4632      	mov	r2, r6
 801366e:	463b      	mov	r3, r7
 8013670:	f7ec fdd6 	bl	8000220 <__aeabi_dsub>
 8013674:	4606      	mov	r6, r0
 8013676:	460f      	mov	r7, r1
 8013678:	e764      	b.n	8013544 <__ieee754_rem_pio2+0x194>
 801367a:	4b1b      	ldr	r3, [pc, #108]	@ (80136e8 <__ieee754_rem_pio2+0x338>)
 801367c:	4598      	cmp	r8, r3
 801367e:	d935      	bls.n	80136ec <__ieee754_rem_pio2+0x33c>
 8013680:	4632      	mov	r2, r6
 8013682:	463b      	mov	r3, r7
 8013684:	4630      	mov	r0, r6
 8013686:	4639      	mov	r1, r7
 8013688:	f7ec fdca 	bl	8000220 <__aeabi_dsub>
 801368c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8013690:	e9c4 0100 	strd	r0, r1, [r4]
 8013694:	e69e      	b.n	80133d4 <__ieee754_rem_pio2+0x24>
 8013696:	bf00      	nop
 8013698:	54400000 	.word	0x54400000
 801369c:	3ff921fb 	.word	0x3ff921fb
 80136a0:	1a626331 	.word	0x1a626331
 80136a4:	3dd0b461 	.word	0x3dd0b461
 80136a8:	1a600000 	.word	0x1a600000
 80136ac:	3dd0b461 	.word	0x3dd0b461
 80136b0:	2e037073 	.word	0x2e037073
 80136b4:	3ba3198a 	.word	0x3ba3198a
 80136b8:	6dc9c883 	.word	0x6dc9c883
 80136bc:	3fe45f30 	.word	0x3fe45f30
 80136c0:	2e000000 	.word	0x2e000000
 80136c4:	3ba3198a 	.word	0x3ba3198a
 80136c8:	252049c1 	.word	0x252049c1
 80136cc:	397b839a 	.word	0x397b839a
 80136d0:	3fe921fb 	.word	0x3fe921fb
 80136d4:	4002d97b 	.word	0x4002d97b
 80136d8:	3ff921fb 	.word	0x3ff921fb
 80136dc:	413921fb 	.word	0x413921fb
 80136e0:	3fe00000 	.word	0x3fe00000
 80136e4:	08014bd8 	.word	0x08014bd8
 80136e8:	7fefffff 	.word	0x7fefffff
 80136ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 80136f0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80136f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80136f8:	4630      	mov	r0, r6
 80136fa:	460f      	mov	r7, r1
 80136fc:	f7ed f9e2 	bl	8000ac4 <__aeabi_d2iz>
 8013700:	f7ec fedc 	bl	80004bc <__aeabi_i2d>
 8013704:	4602      	mov	r2, r0
 8013706:	460b      	mov	r3, r1
 8013708:	4630      	mov	r0, r6
 801370a:	4639      	mov	r1, r7
 801370c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013710:	f7ec fd86 	bl	8000220 <__aeabi_dsub>
 8013714:	4b22      	ldr	r3, [pc, #136]	@ (80137a0 <__ieee754_rem_pio2+0x3f0>)
 8013716:	2200      	movs	r2, #0
 8013718:	f7ec ff3a 	bl	8000590 <__aeabi_dmul>
 801371c:	460f      	mov	r7, r1
 801371e:	4606      	mov	r6, r0
 8013720:	f7ed f9d0 	bl	8000ac4 <__aeabi_d2iz>
 8013724:	f7ec feca 	bl	80004bc <__aeabi_i2d>
 8013728:	4602      	mov	r2, r0
 801372a:	460b      	mov	r3, r1
 801372c:	4630      	mov	r0, r6
 801372e:	4639      	mov	r1, r7
 8013730:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013734:	f7ec fd74 	bl	8000220 <__aeabi_dsub>
 8013738:	4b19      	ldr	r3, [pc, #100]	@ (80137a0 <__ieee754_rem_pio2+0x3f0>)
 801373a:	2200      	movs	r2, #0
 801373c:	f7ec ff28 	bl	8000590 <__aeabi_dmul>
 8013740:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8013744:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8013748:	f04f 0803 	mov.w	r8, #3
 801374c:	2600      	movs	r6, #0
 801374e:	2700      	movs	r7, #0
 8013750:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013754:	4632      	mov	r2, r6
 8013756:	463b      	mov	r3, r7
 8013758:	46c2      	mov	sl, r8
 801375a:	f108 38ff 	add.w	r8, r8, #4294967295
 801375e:	f7ed f97f 	bl	8000a60 <__aeabi_dcmpeq>
 8013762:	2800      	cmp	r0, #0
 8013764:	d1f4      	bne.n	8013750 <__ieee754_rem_pio2+0x3a0>
 8013766:	4b0f      	ldr	r3, [pc, #60]	@ (80137a4 <__ieee754_rem_pio2+0x3f4>)
 8013768:	9301      	str	r3, [sp, #4]
 801376a:	2302      	movs	r3, #2
 801376c:	9300      	str	r3, [sp, #0]
 801376e:	462a      	mov	r2, r5
 8013770:	4653      	mov	r3, sl
 8013772:	4621      	mov	r1, r4
 8013774:	a806      	add	r0, sp, #24
 8013776:	f000 fb5b 	bl	8013e30 <__kernel_rem_pio2>
 801377a:	9b04      	ldr	r3, [sp, #16]
 801377c:	2b00      	cmp	r3, #0
 801377e:	4605      	mov	r5, r0
 8013780:	f6bf ae53 	bge.w	801342a <__ieee754_rem_pio2+0x7a>
 8013784:	e9d4 2100 	ldrd	r2, r1, [r4]
 8013788:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801378c:	e9c4 2300 	strd	r2, r3, [r4]
 8013790:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8013794:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013798:	e9c4 2302 	strd	r2, r3, [r4, #8]
 801379c:	e740      	b.n	8013620 <__ieee754_rem_pio2+0x270>
 801379e:	bf00      	nop
 80137a0:	41700000 	.word	0x41700000
 80137a4:	08014c58 	.word	0x08014c58

080137a8 <fabs>:
 80137a8:	ec51 0b10 	vmov	r0, r1, d0
 80137ac:	4602      	mov	r2, r0
 80137ae:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80137b2:	ec43 2b10 	vmov	d0, r2, r3
 80137b6:	4770      	bx	lr

080137b8 <__kernel_cosf>:
 80137b8:	ee10 3a10 	vmov	r3, s0
 80137bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80137c0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80137c4:	eef0 6a40 	vmov.f32	s13, s0
 80137c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80137cc:	d204      	bcs.n	80137d8 <__kernel_cosf+0x20>
 80137ce:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80137d2:	ee17 2a90 	vmov	r2, s15
 80137d6:	b342      	cbz	r2, 801382a <__kernel_cosf+0x72>
 80137d8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80137dc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8013848 <__kernel_cosf+0x90>
 80137e0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801384c <__kernel_cosf+0x94>
 80137e4:	4a1a      	ldr	r2, [pc, #104]	@ (8013850 <__kernel_cosf+0x98>)
 80137e6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80137ea:	4293      	cmp	r3, r2
 80137ec:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013854 <__kernel_cosf+0x9c>
 80137f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80137f4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8013858 <__kernel_cosf+0xa0>
 80137f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80137fc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801385c <__kernel_cosf+0xa4>
 8013800:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013804:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8013860 <__kernel_cosf+0xa8>
 8013808:	eea7 6a87 	vfma.f32	s12, s15, s14
 801380c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8013810:	ee26 6a07 	vmul.f32	s12, s12, s14
 8013814:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013818:	eee7 0a06 	vfma.f32	s1, s14, s12
 801381c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013820:	d804      	bhi.n	801382c <__kernel_cosf+0x74>
 8013822:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013826:	ee30 0a67 	vsub.f32	s0, s0, s15
 801382a:	4770      	bx	lr
 801382c:	4a0d      	ldr	r2, [pc, #52]	@ (8013864 <__kernel_cosf+0xac>)
 801382e:	4293      	cmp	r3, r2
 8013830:	bf9a      	itte	ls
 8013832:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8013836:	ee07 3a10 	vmovls	s14, r3
 801383a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801383e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013842:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013846:	e7ec      	b.n	8013822 <__kernel_cosf+0x6a>
 8013848:	ad47d74e 	.word	0xad47d74e
 801384c:	310f74f6 	.word	0x310f74f6
 8013850:	3e999999 	.word	0x3e999999
 8013854:	b493f27c 	.word	0xb493f27c
 8013858:	37d00d01 	.word	0x37d00d01
 801385c:	bab60b61 	.word	0xbab60b61
 8013860:	3d2aaaab 	.word	0x3d2aaaab
 8013864:	3f480000 	.word	0x3f480000

08013868 <__kernel_sinf>:
 8013868:	ee10 3a10 	vmov	r3, s0
 801386c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013870:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8013874:	d204      	bcs.n	8013880 <__kernel_sinf+0x18>
 8013876:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801387a:	ee17 3a90 	vmov	r3, s15
 801387e:	b35b      	cbz	r3, 80138d8 <__kernel_sinf+0x70>
 8013880:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013884:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80138dc <__kernel_sinf+0x74>
 8013888:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80138e0 <__kernel_sinf+0x78>
 801388c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013890:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80138e4 <__kernel_sinf+0x7c>
 8013894:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013898:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80138e8 <__kernel_sinf+0x80>
 801389c:	eea7 6a87 	vfma.f32	s12, s15, s14
 80138a0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80138ec <__kernel_sinf+0x84>
 80138a4:	ee60 6a07 	vmul.f32	s13, s0, s14
 80138a8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80138ac:	b930      	cbnz	r0, 80138bc <__kernel_sinf+0x54>
 80138ae:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80138f0 <__kernel_sinf+0x88>
 80138b2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80138b6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80138ba:	4770      	bx	lr
 80138bc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80138c0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80138c4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80138c8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80138cc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80138f4 <__kernel_sinf+0x8c>
 80138d0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80138d4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80138d8:	4770      	bx	lr
 80138da:	bf00      	nop
 80138dc:	2f2ec9d3 	.word	0x2f2ec9d3
 80138e0:	b2d72f34 	.word	0xb2d72f34
 80138e4:	3638ef1b 	.word	0x3638ef1b
 80138e8:	b9500d01 	.word	0xb9500d01
 80138ec:	3c088889 	.word	0x3c088889
 80138f0:	be2aaaab 	.word	0xbe2aaaab
 80138f4:	3e2aaaab 	.word	0x3e2aaaab

080138f8 <__ieee754_fmodf>:
 80138f8:	b570      	push	{r4, r5, r6, lr}
 80138fa:	ee10 6a90 	vmov	r6, s1
 80138fe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013902:	1e5a      	subs	r2, r3, #1
 8013904:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013908:	d206      	bcs.n	8013918 <__ieee754_fmodf+0x20>
 801390a:	ee10 4a10 	vmov	r4, s0
 801390e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 8013912:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8013916:	d304      	bcc.n	8013922 <__ieee754_fmodf+0x2a>
 8013918:	ee60 0a20 	vmul.f32	s1, s0, s1
 801391c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8013920:	bd70      	pop	{r4, r5, r6, pc}
 8013922:	4299      	cmp	r1, r3
 8013924:	dbfc      	blt.n	8013920 <__ieee754_fmodf+0x28>
 8013926:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 801392a:	d105      	bne.n	8013938 <__ieee754_fmodf+0x40>
 801392c:	4b32      	ldr	r3, [pc, #200]	@ (80139f8 <__ieee754_fmodf+0x100>)
 801392e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 8013932:	ed93 0a00 	vldr	s0, [r3]
 8013936:	e7f3      	b.n	8013920 <__ieee754_fmodf+0x28>
 8013938:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 801393c:	d146      	bne.n	80139cc <__ieee754_fmodf+0xd4>
 801393e:	020a      	lsls	r2, r1, #8
 8013940:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 8013944:	2a00      	cmp	r2, #0
 8013946:	dc3e      	bgt.n	80139c6 <__ieee754_fmodf+0xce>
 8013948:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801394c:	bf01      	itttt	eq
 801394e:	021a      	lsleq	r2, r3, #8
 8013950:	fab2 f282 	clzeq	r2, r2
 8013954:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 8013958:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 801395c:	bf16      	itet	ne
 801395e:	15da      	asrne	r2, r3, #23
 8013960:	3282      	addeq	r2, #130	@ 0x82
 8013962:	3a7f      	subne	r2, #127	@ 0x7f
 8013964:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 8013968:	bfbb      	ittet	lt
 801396a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 801396e:	1a24      	sublt	r4, r4, r0
 8013970:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 8013974:	40a1      	lsllt	r1, r4
 8013976:	bfa8      	it	ge
 8013978:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 801397c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 8013980:	bfb5      	itete	lt
 8013982:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 8013986:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 801398a:	1aa4      	sublt	r4, r4, r2
 801398c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 8013990:	bfb8      	it	lt
 8013992:	fa03 f404 	lsllt.w	r4, r3, r4
 8013996:	1a80      	subs	r0, r0, r2
 8013998:	1b0b      	subs	r3, r1, r4
 801399a:	b9d0      	cbnz	r0, 80139d2 <__ieee754_fmodf+0xda>
 801399c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80139a0:	bf28      	it	cs
 80139a2:	460b      	movcs	r3, r1
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d0c1      	beq.n	801392c <__ieee754_fmodf+0x34>
 80139a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80139ac:	db19      	blt.n	80139e2 <__ieee754_fmodf+0xea>
 80139ae:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 80139b2:	db19      	blt.n	80139e8 <__ieee754_fmodf+0xf0>
 80139b4:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80139b8:	327f      	adds	r2, #127	@ 0x7f
 80139ba:	432b      	orrs	r3, r5
 80139bc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80139c0:	ee00 3a10 	vmov	s0, r3
 80139c4:	e7ac      	b.n	8013920 <__ieee754_fmodf+0x28>
 80139c6:	3801      	subs	r0, #1
 80139c8:	0052      	lsls	r2, r2, #1
 80139ca:	e7bb      	b.n	8013944 <__ieee754_fmodf+0x4c>
 80139cc:	15c8      	asrs	r0, r1, #23
 80139ce:	387f      	subs	r0, #127	@ 0x7f
 80139d0:	e7ba      	b.n	8013948 <__ieee754_fmodf+0x50>
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	da02      	bge.n	80139dc <__ieee754_fmodf+0xe4>
 80139d6:	0049      	lsls	r1, r1, #1
 80139d8:	3801      	subs	r0, #1
 80139da:	e7dd      	b.n	8013998 <__ieee754_fmodf+0xa0>
 80139dc:	d0a6      	beq.n	801392c <__ieee754_fmodf+0x34>
 80139de:	0059      	lsls	r1, r3, #1
 80139e0:	e7fa      	b.n	80139d8 <__ieee754_fmodf+0xe0>
 80139e2:	005b      	lsls	r3, r3, #1
 80139e4:	3a01      	subs	r2, #1
 80139e6:	e7df      	b.n	80139a8 <__ieee754_fmodf+0xb0>
 80139e8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 80139ec:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80139f0:	3282      	adds	r2, #130	@ 0x82
 80139f2:	4113      	asrs	r3, r2
 80139f4:	432b      	orrs	r3, r5
 80139f6:	e7e3      	b.n	80139c0 <__ieee754_fmodf+0xc8>
 80139f8:	08014d60 	.word	0x08014d60

080139fc <__ieee754_rem_pio2f>:
 80139fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139fe:	ee10 6a10 	vmov	r6, s0
 8013a02:	4b88      	ldr	r3, [pc, #544]	@ (8013c24 <__ieee754_rem_pio2f+0x228>)
 8013a04:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8013a08:	429d      	cmp	r5, r3
 8013a0a:	b087      	sub	sp, #28
 8013a0c:	4604      	mov	r4, r0
 8013a0e:	d805      	bhi.n	8013a1c <__ieee754_rem_pio2f+0x20>
 8013a10:	2300      	movs	r3, #0
 8013a12:	ed80 0a00 	vstr	s0, [r0]
 8013a16:	6043      	str	r3, [r0, #4]
 8013a18:	2000      	movs	r0, #0
 8013a1a:	e022      	b.n	8013a62 <__ieee754_rem_pio2f+0x66>
 8013a1c:	4b82      	ldr	r3, [pc, #520]	@ (8013c28 <__ieee754_rem_pio2f+0x22c>)
 8013a1e:	429d      	cmp	r5, r3
 8013a20:	d83a      	bhi.n	8013a98 <__ieee754_rem_pio2f+0x9c>
 8013a22:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013a26:	2e00      	cmp	r6, #0
 8013a28:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8013c2c <__ieee754_rem_pio2f+0x230>
 8013a2c:	4a80      	ldr	r2, [pc, #512]	@ (8013c30 <__ieee754_rem_pio2f+0x234>)
 8013a2e:	f023 030f 	bic.w	r3, r3, #15
 8013a32:	dd18      	ble.n	8013a66 <__ieee754_rem_pio2f+0x6a>
 8013a34:	4293      	cmp	r3, r2
 8013a36:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013a3a:	bf09      	itett	eq
 8013a3c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8013c34 <__ieee754_rem_pio2f+0x238>
 8013a40:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8013c38 <__ieee754_rem_pio2f+0x23c>
 8013a44:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8013c3c <__ieee754_rem_pio2f+0x240>
 8013a48:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013a4c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8013a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a54:	ed80 7a00 	vstr	s14, [r0]
 8013a58:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013a5c:	edc0 7a01 	vstr	s15, [r0, #4]
 8013a60:	2001      	movs	r0, #1
 8013a62:	b007      	add	sp, #28
 8013a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a66:	4293      	cmp	r3, r2
 8013a68:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013a6c:	bf09      	itett	eq
 8013a6e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8013c34 <__ieee754_rem_pio2f+0x238>
 8013a72:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8013c38 <__ieee754_rem_pio2f+0x23c>
 8013a76:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8013c3c <__ieee754_rem_pio2f+0x240>
 8013a7a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013a7e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8013a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a86:	ed80 7a00 	vstr	s14, [r0]
 8013a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013a8e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013a92:	f04f 30ff 	mov.w	r0, #4294967295
 8013a96:	e7e4      	b.n	8013a62 <__ieee754_rem_pio2f+0x66>
 8013a98:	4b69      	ldr	r3, [pc, #420]	@ (8013c40 <__ieee754_rem_pio2f+0x244>)
 8013a9a:	429d      	cmp	r5, r3
 8013a9c:	d873      	bhi.n	8013b86 <__ieee754_rem_pio2f+0x18a>
 8013a9e:	f000 f8dd 	bl	8013c5c <fabsf>
 8013aa2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8013c44 <__ieee754_rem_pio2f+0x248>
 8013aa6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8013aaa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013aae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ab6:	ee17 0a90 	vmov	r0, s15
 8013aba:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013c2c <__ieee754_rem_pio2f+0x230>
 8013abe:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013ac2:	281f      	cmp	r0, #31
 8013ac4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8013c38 <__ieee754_rem_pio2f+0x23c>
 8013ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013acc:	eeb1 6a47 	vneg.f32	s12, s14
 8013ad0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013ad4:	ee16 1a90 	vmov	r1, s13
 8013ad8:	dc09      	bgt.n	8013aee <__ieee754_rem_pio2f+0xf2>
 8013ada:	4a5b      	ldr	r2, [pc, #364]	@ (8013c48 <__ieee754_rem_pio2f+0x24c>)
 8013adc:	1e47      	subs	r7, r0, #1
 8013ade:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8013ae2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8013ae6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8013aea:	4293      	cmp	r3, r2
 8013aec:	d107      	bne.n	8013afe <__ieee754_rem_pio2f+0x102>
 8013aee:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8013af2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8013af6:	2a08      	cmp	r2, #8
 8013af8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013afc:	dc14      	bgt.n	8013b28 <__ieee754_rem_pio2f+0x12c>
 8013afe:	6021      	str	r1, [r4, #0]
 8013b00:	ed94 7a00 	vldr	s14, [r4]
 8013b04:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013b08:	2e00      	cmp	r6, #0
 8013b0a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013b0e:	ed84 0a01 	vstr	s0, [r4, #4]
 8013b12:	daa6      	bge.n	8013a62 <__ieee754_rem_pio2f+0x66>
 8013b14:	eeb1 7a47 	vneg.f32	s14, s14
 8013b18:	eeb1 0a40 	vneg.f32	s0, s0
 8013b1c:	ed84 7a00 	vstr	s14, [r4]
 8013b20:	ed84 0a01 	vstr	s0, [r4, #4]
 8013b24:	4240      	negs	r0, r0
 8013b26:	e79c      	b.n	8013a62 <__ieee754_rem_pio2f+0x66>
 8013b28:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8013c34 <__ieee754_rem_pio2f+0x238>
 8013b2c:	eef0 6a40 	vmov.f32	s13, s0
 8013b30:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013b34:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013b38:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013b3c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8013c3c <__ieee754_rem_pio2f+0x240>
 8013b40:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013b44:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013b48:	ee15 2a90 	vmov	r2, s11
 8013b4c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013b50:	1a5b      	subs	r3, r3, r1
 8013b52:	2b19      	cmp	r3, #25
 8013b54:	dc04      	bgt.n	8013b60 <__ieee754_rem_pio2f+0x164>
 8013b56:	edc4 5a00 	vstr	s11, [r4]
 8013b5a:	eeb0 0a66 	vmov.f32	s0, s13
 8013b5e:	e7cf      	b.n	8013b00 <__ieee754_rem_pio2f+0x104>
 8013b60:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8013c4c <__ieee754_rem_pio2f+0x250>
 8013b64:	eeb0 0a66 	vmov.f32	s0, s13
 8013b68:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013b6c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013b70:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8013c50 <__ieee754_rem_pio2f+0x254>
 8013b74:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013b78:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013b7c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013b80:	ed84 7a00 	vstr	s14, [r4]
 8013b84:	e7bc      	b.n	8013b00 <__ieee754_rem_pio2f+0x104>
 8013b86:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8013b8a:	d306      	bcc.n	8013b9a <__ieee754_rem_pio2f+0x19e>
 8013b8c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013b90:	edc0 7a01 	vstr	s15, [r0, #4]
 8013b94:	edc0 7a00 	vstr	s15, [r0]
 8013b98:	e73e      	b.n	8013a18 <__ieee754_rem_pio2f+0x1c>
 8013b9a:	15ea      	asrs	r2, r5, #23
 8013b9c:	3a86      	subs	r2, #134	@ 0x86
 8013b9e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013ba2:	ee07 3a90 	vmov	s15, r3
 8013ba6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013baa:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8013c54 <__ieee754_rem_pio2f+0x258>
 8013bae:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013bb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013bb6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013bba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013bbe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013bc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013bc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013bca:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013bce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013bd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bda:	edcd 7a05 	vstr	s15, [sp, #20]
 8013bde:	d11e      	bne.n	8013c1e <__ieee754_rem_pio2f+0x222>
 8013be0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013be8:	bf0c      	ite	eq
 8013bea:	2301      	moveq	r3, #1
 8013bec:	2302      	movne	r3, #2
 8013bee:	491a      	ldr	r1, [pc, #104]	@ (8013c58 <__ieee754_rem_pio2f+0x25c>)
 8013bf0:	9101      	str	r1, [sp, #4]
 8013bf2:	2102      	movs	r1, #2
 8013bf4:	9100      	str	r1, [sp, #0]
 8013bf6:	a803      	add	r0, sp, #12
 8013bf8:	4621      	mov	r1, r4
 8013bfa:	f000 fc69 	bl	80144d0 <__kernel_rem_pio2f>
 8013bfe:	2e00      	cmp	r6, #0
 8013c00:	f6bf af2f 	bge.w	8013a62 <__ieee754_rem_pio2f+0x66>
 8013c04:	edd4 7a00 	vldr	s15, [r4]
 8013c08:	eef1 7a67 	vneg.f32	s15, s15
 8013c0c:	edc4 7a00 	vstr	s15, [r4]
 8013c10:	edd4 7a01 	vldr	s15, [r4, #4]
 8013c14:	eef1 7a67 	vneg.f32	s15, s15
 8013c18:	edc4 7a01 	vstr	s15, [r4, #4]
 8013c1c:	e782      	b.n	8013b24 <__ieee754_rem_pio2f+0x128>
 8013c1e:	2303      	movs	r3, #3
 8013c20:	e7e5      	b.n	8013bee <__ieee754_rem_pio2f+0x1f2>
 8013c22:	bf00      	nop
 8013c24:	3f490fd8 	.word	0x3f490fd8
 8013c28:	4016cbe3 	.word	0x4016cbe3
 8013c2c:	3fc90f80 	.word	0x3fc90f80
 8013c30:	3fc90fd0 	.word	0x3fc90fd0
 8013c34:	37354400 	.word	0x37354400
 8013c38:	37354443 	.word	0x37354443
 8013c3c:	2e85a308 	.word	0x2e85a308
 8013c40:	43490f80 	.word	0x43490f80
 8013c44:	3f22f984 	.word	0x3f22f984
 8013c48:	08014d68 	.word	0x08014d68
 8013c4c:	2e85a300 	.word	0x2e85a300
 8013c50:	248d3132 	.word	0x248d3132
 8013c54:	43800000 	.word	0x43800000
 8013c58:	08014de8 	.word	0x08014de8

08013c5c <fabsf>:
 8013c5c:	ee10 3a10 	vmov	r3, s0
 8013c60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013c64:	ee00 3a10 	vmov	s0, r3
 8013c68:	4770      	bx	lr
 8013c6a:	0000      	movs	r0, r0
 8013c6c:	0000      	movs	r0, r0
	...

08013c70 <scalbn>:
 8013c70:	b570      	push	{r4, r5, r6, lr}
 8013c72:	ec55 4b10 	vmov	r4, r5, d0
 8013c76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8013c7a:	4606      	mov	r6, r0
 8013c7c:	462b      	mov	r3, r5
 8013c7e:	b991      	cbnz	r1, 8013ca6 <scalbn+0x36>
 8013c80:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8013c84:	4323      	orrs	r3, r4
 8013c86:	d03b      	beq.n	8013d00 <scalbn+0x90>
 8013c88:	4b33      	ldr	r3, [pc, #204]	@ (8013d58 <scalbn+0xe8>)
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	4629      	mov	r1, r5
 8013c8e:	2200      	movs	r2, #0
 8013c90:	f7ec fc7e 	bl	8000590 <__aeabi_dmul>
 8013c94:	4b31      	ldr	r3, [pc, #196]	@ (8013d5c <scalbn+0xec>)
 8013c96:	429e      	cmp	r6, r3
 8013c98:	4604      	mov	r4, r0
 8013c9a:	460d      	mov	r5, r1
 8013c9c:	da0f      	bge.n	8013cbe <scalbn+0x4e>
 8013c9e:	a326      	add	r3, pc, #152	@ (adr r3, 8013d38 <scalbn+0xc8>)
 8013ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ca4:	e01e      	b.n	8013ce4 <scalbn+0x74>
 8013ca6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8013caa:	4291      	cmp	r1, r2
 8013cac:	d10b      	bne.n	8013cc6 <scalbn+0x56>
 8013cae:	4622      	mov	r2, r4
 8013cb0:	4620      	mov	r0, r4
 8013cb2:	4629      	mov	r1, r5
 8013cb4:	f7ec fab6 	bl	8000224 <__adddf3>
 8013cb8:	4604      	mov	r4, r0
 8013cba:	460d      	mov	r5, r1
 8013cbc:	e020      	b.n	8013d00 <scalbn+0x90>
 8013cbe:	460b      	mov	r3, r1
 8013cc0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8013cc4:	3936      	subs	r1, #54	@ 0x36
 8013cc6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8013cca:	4296      	cmp	r6, r2
 8013ccc:	dd0d      	ble.n	8013cea <scalbn+0x7a>
 8013cce:	2d00      	cmp	r5, #0
 8013cd0:	a11b      	add	r1, pc, #108	@ (adr r1, 8013d40 <scalbn+0xd0>)
 8013cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cd6:	da02      	bge.n	8013cde <scalbn+0x6e>
 8013cd8:	a11b      	add	r1, pc, #108	@ (adr r1, 8013d48 <scalbn+0xd8>)
 8013cda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cde:	a318      	add	r3, pc, #96	@ (adr r3, 8013d40 <scalbn+0xd0>)
 8013ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ce4:	f7ec fc54 	bl	8000590 <__aeabi_dmul>
 8013ce8:	e7e6      	b.n	8013cb8 <scalbn+0x48>
 8013cea:	1872      	adds	r2, r6, r1
 8013cec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8013cf0:	428a      	cmp	r2, r1
 8013cf2:	dcec      	bgt.n	8013cce <scalbn+0x5e>
 8013cf4:	2a00      	cmp	r2, #0
 8013cf6:	dd06      	ble.n	8013d06 <scalbn+0x96>
 8013cf8:	f36f 531e 	bfc	r3, #20, #11
 8013cfc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013d00:	ec45 4b10 	vmov	d0, r4, r5
 8013d04:	bd70      	pop	{r4, r5, r6, pc}
 8013d06:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8013d0a:	da08      	bge.n	8013d1e <scalbn+0xae>
 8013d0c:	2d00      	cmp	r5, #0
 8013d0e:	a10a      	add	r1, pc, #40	@ (adr r1, 8013d38 <scalbn+0xc8>)
 8013d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d14:	dac3      	bge.n	8013c9e <scalbn+0x2e>
 8013d16:	a10e      	add	r1, pc, #56	@ (adr r1, 8013d50 <scalbn+0xe0>)
 8013d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d1c:	e7bf      	b.n	8013c9e <scalbn+0x2e>
 8013d1e:	3236      	adds	r2, #54	@ 0x36
 8013d20:	f36f 531e 	bfc	r3, #20, #11
 8013d24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013d28:	4620      	mov	r0, r4
 8013d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8013d60 <scalbn+0xf0>)
 8013d2c:	4629      	mov	r1, r5
 8013d2e:	2200      	movs	r2, #0
 8013d30:	e7d8      	b.n	8013ce4 <scalbn+0x74>
 8013d32:	bf00      	nop
 8013d34:	f3af 8000 	nop.w
 8013d38:	c2f8f359 	.word	0xc2f8f359
 8013d3c:	01a56e1f 	.word	0x01a56e1f
 8013d40:	8800759c 	.word	0x8800759c
 8013d44:	7e37e43c 	.word	0x7e37e43c
 8013d48:	8800759c 	.word	0x8800759c
 8013d4c:	fe37e43c 	.word	0xfe37e43c
 8013d50:	c2f8f359 	.word	0xc2f8f359
 8013d54:	81a56e1f 	.word	0x81a56e1f
 8013d58:	43500000 	.word	0x43500000
 8013d5c:	ffff3cb0 	.word	0xffff3cb0
 8013d60:	3c900000 	.word	0x3c900000

08013d64 <scalbnf>:
 8013d64:	ee10 3a10 	vmov	r3, s0
 8013d68:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8013d6c:	d02b      	beq.n	8013dc6 <scalbnf+0x62>
 8013d6e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8013d72:	d302      	bcc.n	8013d7a <scalbnf+0x16>
 8013d74:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013d78:	4770      	bx	lr
 8013d7a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8013d7e:	d123      	bne.n	8013dc8 <scalbnf+0x64>
 8013d80:	4b24      	ldr	r3, [pc, #144]	@ (8013e14 <scalbnf+0xb0>)
 8013d82:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8013e18 <scalbnf+0xb4>
 8013d86:	4298      	cmp	r0, r3
 8013d88:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013d8c:	db17      	blt.n	8013dbe <scalbnf+0x5a>
 8013d8e:	ee10 3a10 	vmov	r3, s0
 8013d92:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8013d96:	3a19      	subs	r2, #25
 8013d98:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013d9c:	4288      	cmp	r0, r1
 8013d9e:	dd15      	ble.n	8013dcc <scalbnf+0x68>
 8013da0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8013e1c <scalbnf+0xb8>
 8013da4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8013e20 <scalbnf+0xbc>
 8013da8:	ee10 3a10 	vmov	r3, s0
 8013dac:	eeb0 7a67 	vmov.f32	s14, s15
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	bfb8      	it	lt
 8013db4:	eef0 7a66 	vmovlt.f32	s15, s13
 8013db8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8013dbc:	4770      	bx	lr
 8013dbe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8013e24 <scalbnf+0xc0>
 8013dc2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013dc6:	4770      	bx	lr
 8013dc8:	0dd2      	lsrs	r2, r2, #23
 8013dca:	e7e5      	b.n	8013d98 <scalbnf+0x34>
 8013dcc:	4410      	add	r0, r2
 8013dce:	28fe      	cmp	r0, #254	@ 0xfe
 8013dd0:	dce6      	bgt.n	8013da0 <scalbnf+0x3c>
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	dd06      	ble.n	8013de4 <scalbnf+0x80>
 8013dd6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013dda:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013dde:	ee00 3a10 	vmov	s0, r3
 8013de2:	4770      	bx	lr
 8013de4:	f110 0f16 	cmn.w	r0, #22
 8013de8:	da09      	bge.n	8013dfe <scalbnf+0x9a>
 8013dea:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8013e24 <scalbnf+0xc0>
 8013dee:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8013e28 <scalbnf+0xc4>
 8013df2:	ee10 3a10 	vmov	r3, s0
 8013df6:	eeb0 7a67 	vmov.f32	s14, s15
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	e7d9      	b.n	8013db2 <scalbnf+0x4e>
 8013dfe:	3019      	adds	r0, #25
 8013e00:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8013e04:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8013e08:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8013e2c <scalbnf+0xc8>
 8013e0c:	ee07 3a90 	vmov	s15, r3
 8013e10:	e7d7      	b.n	8013dc2 <scalbnf+0x5e>
 8013e12:	bf00      	nop
 8013e14:	ffff3cb0 	.word	0xffff3cb0
 8013e18:	4c000000 	.word	0x4c000000
 8013e1c:	7149f2ca 	.word	0x7149f2ca
 8013e20:	f149f2ca 	.word	0xf149f2ca
 8013e24:	0da24260 	.word	0x0da24260
 8013e28:	8da24260 	.word	0x8da24260
 8013e2c:	33000000 	.word	0x33000000

08013e30 <__kernel_rem_pio2>:
 8013e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e34:	ed2d 8b02 	vpush	{d8}
 8013e38:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8013e3c:	f112 0f14 	cmn.w	r2, #20
 8013e40:	9306      	str	r3, [sp, #24]
 8013e42:	9104      	str	r1, [sp, #16]
 8013e44:	4bc2      	ldr	r3, [pc, #776]	@ (8014150 <__kernel_rem_pio2+0x320>)
 8013e46:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8013e48:	9008      	str	r0, [sp, #32]
 8013e4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013e4e:	9300      	str	r3, [sp, #0]
 8013e50:	9b06      	ldr	r3, [sp, #24]
 8013e52:	f103 33ff 	add.w	r3, r3, #4294967295
 8013e56:	bfa8      	it	ge
 8013e58:	1ed4      	subge	r4, r2, #3
 8013e5a:	9305      	str	r3, [sp, #20]
 8013e5c:	bfb2      	itee	lt
 8013e5e:	2400      	movlt	r4, #0
 8013e60:	2318      	movge	r3, #24
 8013e62:	fb94 f4f3 	sdivge	r4, r4, r3
 8013e66:	f06f 0317 	mvn.w	r3, #23
 8013e6a:	fb04 3303 	mla	r3, r4, r3, r3
 8013e6e:	eb03 0b02 	add.w	fp, r3, r2
 8013e72:	9b00      	ldr	r3, [sp, #0]
 8013e74:	9a05      	ldr	r2, [sp, #20]
 8013e76:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8014140 <__kernel_rem_pio2+0x310>
 8013e7a:	eb03 0802 	add.w	r8, r3, r2
 8013e7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013e80:	1aa7      	subs	r7, r4, r2
 8013e82:	ae20      	add	r6, sp, #128	@ 0x80
 8013e84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013e88:	2500      	movs	r5, #0
 8013e8a:	4545      	cmp	r5, r8
 8013e8c:	dd12      	ble.n	8013eb4 <__kernel_rem_pio2+0x84>
 8013e8e:	9b06      	ldr	r3, [sp, #24]
 8013e90:	aa20      	add	r2, sp, #128	@ 0x80
 8013e92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8013e96:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8013e9a:	2700      	movs	r7, #0
 8013e9c:	9b00      	ldr	r3, [sp, #0]
 8013e9e:	429f      	cmp	r7, r3
 8013ea0:	dc2e      	bgt.n	8013f00 <__kernel_rem_pio2+0xd0>
 8013ea2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8014140 <__kernel_rem_pio2+0x310>
 8013ea6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013eaa:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013eae:	46a8      	mov	r8, r5
 8013eb0:	2600      	movs	r6, #0
 8013eb2:	e01b      	b.n	8013eec <__kernel_rem_pio2+0xbc>
 8013eb4:	42ef      	cmn	r7, r5
 8013eb6:	d407      	bmi.n	8013ec8 <__kernel_rem_pio2+0x98>
 8013eb8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8013ebc:	f7ec fafe 	bl	80004bc <__aeabi_i2d>
 8013ec0:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013ec4:	3501      	adds	r5, #1
 8013ec6:	e7e0      	b.n	8013e8a <__kernel_rem_pio2+0x5a>
 8013ec8:	ec51 0b18 	vmov	r0, r1, d8
 8013ecc:	e7f8      	b.n	8013ec0 <__kernel_rem_pio2+0x90>
 8013ece:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8013ed2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8013ed6:	f7ec fb5b 	bl	8000590 <__aeabi_dmul>
 8013eda:	4602      	mov	r2, r0
 8013edc:	460b      	mov	r3, r1
 8013ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ee2:	f7ec f99f 	bl	8000224 <__adddf3>
 8013ee6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013eea:	3601      	adds	r6, #1
 8013eec:	9b05      	ldr	r3, [sp, #20]
 8013eee:	429e      	cmp	r6, r3
 8013ef0:	dded      	ble.n	8013ece <__kernel_rem_pio2+0x9e>
 8013ef2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013ef6:	3701      	adds	r7, #1
 8013ef8:	ecaa 7b02 	vstmia	sl!, {d7}
 8013efc:	3508      	adds	r5, #8
 8013efe:	e7cd      	b.n	8013e9c <__kernel_rem_pio2+0x6c>
 8013f00:	9b00      	ldr	r3, [sp, #0]
 8013f02:	f8dd 8000 	ldr.w	r8, [sp]
 8013f06:	aa0c      	add	r2, sp, #48	@ 0x30
 8013f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013f0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8013f0e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8013f10:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8013f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f16:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8013f1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013f1c:	ab98      	add	r3, sp, #608	@ 0x260
 8013f1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013f22:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8013f26:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013f2a:	ac0c      	add	r4, sp, #48	@ 0x30
 8013f2c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8013f2e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8013f32:	46a1      	mov	r9, r4
 8013f34:	46c2      	mov	sl, r8
 8013f36:	f1ba 0f00 	cmp.w	sl, #0
 8013f3a:	dc77      	bgt.n	801402c <__kernel_rem_pio2+0x1fc>
 8013f3c:	4658      	mov	r0, fp
 8013f3e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8013f42:	f7ff fe95 	bl	8013c70 <scalbn>
 8013f46:	ec57 6b10 	vmov	r6, r7, d0
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8013f50:	4630      	mov	r0, r6
 8013f52:	4639      	mov	r1, r7
 8013f54:	f7ec fb1c 	bl	8000590 <__aeabi_dmul>
 8013f58:	ec41 0b10 	vmov	d0, r0, r1
 8013f5c:	f000 fd20 	bl	80149a0 <floor>
 8013f60:	4b7c      	ldr	r3, [pc, #496]	@ (8014154 <__kernel_rem_pio2+0x324>)
 8013f62:	ec51 0b10 	vmov	r0, r1, d0
 8013f66:	2200      	movs	r2, #0
 8013f68:	f7ec fb12 	bl	8000590 <__aeabi_dmul>
 8013f6c:	4602      	mov	r2, r0
 8013f6e:	460b      	mov	r3, r1
 8013f70:	4630      	mov	r0, r6
 8013f72:	4639      	mov	r1, r7
 8013f74:	f7ec f954 	bl	8000220 <__aeabi_dsub>
 8013f78:	460f      	mov	r7, r1
 8013f7a:	4606      	mov	r6, r0
 8013f7c:	f7ec fda2 	bl	8000ac4 <__aeabi_d2iz>
 8013f80:	9002      	str	r0, [sp, #8]
 8013f82:	f7ec fa9b 	bl	80004bc <__aeabi_i2d>
 8013f86:	4602      	mov	r2, r0
 8013f88:	460b      	mov	r3, r1
 8013f8a:	4630      	mov	r0, r6
 8013f8c:	4639      	mov	r1, r7
 8013f8e:	f7ec f947 	bl	8000220 <__aeabi_dsub>
 8013f92:	f1bb 0f00 	cmp.w	fp, #0
 8013f96:	4606      	mov	r6, r0
 8013f98:	460f      	mov	r7, r1
 8013f9a:	dd6c      	ble.n	8014076 <__kernel_rem_pio2+0x246>
 8013f9c:	f108 31ff 	add.w	r1, r8, #4294967295
 8013fa0:	ab0c      	add	r3, sp, #48	@ 0x30
 8013fa2:	9d02      	ldr	r5, [sp, #8]
 8013fa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013fa8:	f1cb 0018 	rsb	r0, fp, #24
 8013fac:	fa43 f200 	asr.w	r2, r3, r0
 8013fb0:	4415      	add	r5, r2
 8013fb2:	4082      	lsls	r2, r0
 8013fb4:	1a9b      	subs	r3, r3, r2
 8013fb6:	aa0c      	add	r2, sp, #48	@ 0x30
 8013fb8:	9502      	str	r5, [sp, #8]
 8013fba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8013fbe:	f1cb 0217 	rsb	r2, fp, #23
 8013fc2:	fa43 f902 	asr.w	r9, r3, r2
 8013fc6:	f1b9 0f00 	cmp.w	r9, #0
 8013fca:	dd64      	ble.n	8014096 <__kernel_rem_pio2+0x266>
 8013fcc:	9b02      	ldr	r3, [sp, #8]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	9302      	str	r3, [sp, #8]
 8013fd4:	4615      	mov	r5, r2
 8013fd6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8013fda:	4590      	cmp	r8, r2
 8013fdc:	f300 80a1 	bgt.w	8014122 <__kernel_rem_pio2+0x2f2>
 8013fe0:	f1bb 0f00 	cmp.w	fp, #0
 8013fe4:	dd07      	ble.n	8013ff6 <__kernel_rem_pio2+0x1c6>
 8013fe6:	f1bb 0f01 	cmp.w	fp, #1
 8013fea:	f000 80c1 	beq.w	8014170 <__kernel_rem_pio2+0x340>
 8013fee:	f1bb 0f02 	cmp.w	fp, #2
 8013ff2:	f000 80c8 	beq.w	8014186 <__kernel_rem_pio2+0x356>
 8013ff6:	f1b9 0f02 	cmp.w	r9, #2
 8013ffa:	d14c      	bne.n	8014096 <__kernel_rem_pio2+0x266>
 8013ffc:	4632      	mov	r2, r6
 8013ffe:	463b      	mov	r3, r7
 8014000:	4955      	ldr	r1, [pc, #340]	@ (8014158 <__kernel_rem_pio2+0x328>)
 8014002:	2000      	movs	r0, #0
 8014004:	f7ec f90c 	bl	8000220 <__aeabi_dsub>
 8014008:	4606      	mov	r6, r0
 801400a:	460f      	mov	r7, r1
 801400c:	2d00      	cmp	r5, #0
 801400e:	d042      	beq.n	8014096 <__kernel_rem_pio2+0x266>
 8014010:	4658      	mov	r0, fp
 8014012:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8014148 <__kernel_rem_pio2+0x318>
 8014016:	f7ff fe2b 	bl	8013c70 <scalbn>
 801401a:	4630      	mov	r0, r6
 801401c:	4639      	mov	r1, r7
 801401e:	ec53 2b10 	vmov	r2, r3, d0
 8014022:	f7ec f8fd 	bl	8000220 <__aeabi_dsub>
 8014026:	4606      	mov	r6, r0
 8014028:	460f      	mov	r7, r1
 801402a:	e034      	b.n	8014096 <__kernel_rem_pio2+0x266>
 801402c:	4b4b      	ldr	r3, [pc, #300]	@ (801415c <__kernel_rem_pio2+0x32c>)
 801402e:	2200      	movs	r2, #0
 8014030:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014034:	f7ec faac 	bl	8000590 <__aeabi_dmul>
 8014038:	f7ec fd44 	bl	8000ac4 <__aeabi_d2iz>
 801403c:	f7ec fa3e 	bl	80004bc <__aeabi_i2d>
 8014040:	4b47      	ldr	r3, [pc, #284]	@ (8014160 <__kernel_rem_pio2+0x330>)
 8014042:	2200      	movs	r2, #0
 8014044:	4606      	mov	r6, r0
 8014046:	460f      	mov	r7, r1
 8014048:	f7ec faa2 	bl	8000590 <__aeabi_dmul>
 801404c:	4602      	mov	r2, r0
 801404e:	460b      	mov	r3, r1
 8014050:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014054:	f7ec f8e4 	bl	8000220 <__aeabi_dsub>
 8014058:	f7ec fd34 	bl	8000ac4 <__aeabi_d2iz>
 801405c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8014060:	f849 0b04 	str.w	r0, [r9], #4
 8014064:	4639      	mov	r1, r7
 8014066:	4630      	mov	r0, r6
 8014068:	f7ec f8dc 	bl	8000224 <__adddf3>
 801406c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014074:	e75f      	b.n	8013f36 <__kernel_rem_pio2+0x106>
 8014076:	d107      	bne.n	8014088 <__kernel_rem_pio2+0x258>
 8014078:	f108 33ff 	add.w	r3, r8, #4294967295
 801407c:	aa0c      	add	r2, sp, #48	@ 0x30
 801407e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014082:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8014086:	e79e      	b.n	8013fc6 <__kernel_rem_pio2+0x196>
 8014088:	4b36      	ldr	r3, [pc, #216]	@ (8014164 <__kernel_rem_pio2+0x334>)
 801408a:	2200      	movs	r2, #0
 801408c:	f7ec fd06 	bl	8000a9c <__aeabi_dcmpge>
 8014090:	2800      	cmp	r0, #0
 8014092:	d143      	bne.n	801411c <__kernel_rem_pio2+0x2ec>
 8014094:	4681      	mov	r9, r0
 8014096:	2200      	movs	r2, #0
 8014098:	2300      	movs	r3, #0
 801409a:	4630      	mov	r0, r6
 801409c:	4639      	mov	r1, r7
 801409e:	f7ec fcdf 	bl	8000a60 <__aeabi_dcmpeq>
 80140a2:	2800      	cmp	r0, #0
 80140a4:	f000 80c1 	beq.w	801422a <__kernel_rem_pio2+0x3fa>
 80140a8:	f108 33ff 	add.w	r3, r8, #4294967295
 80140ac:	2200      	movs	r2, #0
 80140ae:	9900      	ldr	r1, [sp, #0]
 80140b0:	428b      	cmp	r3, r1
 80140b2:	da70      	bge.n	8014196 <__kernel_rem_pio2+0x366>
 80140b4:	2a00      	cmp	r2, #0
 80140b6:	f000 808b 	beq.w	80141d0 <__kernel_rem_pio2+0x3a0>
 80140ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80140be:	ab0c      	add	r3, sp, #48	@ 0x30
 80140c0:	f1ab 0b18 	sub.w	fp, fp, #24
 80140c4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d0f6      	beq.n	80140ba <__kernel_rem_pio2+0x28a>
 80140cc:	4658      	mov	r0, fp
 80140ce:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8014148 <__kernel_rem_pio2+0x318>
 80140d2:	f7ff fdcd 	bl	8013c70 <scalbn>
 80140d6:	f108 0301 	add.w	r3, r8, #1
 80140da:	00da      	lsls	r2, r3, #3
 80140dc:	9205      	str	r2, [sp, #20]
 80140de:	ec55 4b10 	vmov	r4, r5, d0
 80140e2:	aa70      	add	r2, sp, #448	@ 0x1c0
 80140e4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 801415c <__kernel_rem_pio2+0x32c>
 80140e8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80140ec:	4646      	mov	r6, r8
 80140ee:	f04f 0a00 	mov.w	sl, #0
 80140f2:	2e00      	cmp	r6, #0
 80140f4:	f280 80d1 	bge.w	801429a <__kernel_rem_pio2+0x46a>
 80140f8:	4644      	mov	r4, r8
 80140fa:	2c00      	cmp	r4, #0
 80140fc:	f2c0 80ff 	blt.w	80142fe <__kernel_rem_pio2+0x4ce>
 8014100:	4b19      	ldr	r3, [pc, #100]	@ (8014168 <__kernel_rem_pio2+0x338>)
 8014102:	461f      	mov	r7, r3
 8014104:	ab70      	add	r3, sp, #448	@ 0x1c0
 8014106:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801410a:	9306      	str	r3, [sp, #24]
 801410c:	f04f 0a00 	mov.w	sl, #0
 8014110:	f04f 0b00 	mov.w	fp, #0
 8014114:	2600      	movs	r6, #0
 8014116:	eba8 0504 	sub.w	r5, r8, r4
 801411a:	e0e4      	b.n	80142e6 <__kernel_rem_pio2+0x4b6>
 801411c:	f04f 0902 	mov.w	r9, #2
 8014120:	e754      	b.n	8013fcc <__kernel_rem_pio2+0x19c>
 8014122:	f854 3b04 	ldr.w	r3, [r4], #4
 8014126:	bb0d      	cbnz	r5, 801416c <__kernel_rem_pio2+0x33c>
 8014128:	b123      	cbz	r3, 8014134 <__kernel_rem_pio2+0x304>
 801412a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 801412e:	f844 3c04 	str.w	r3, [r4, #-4]
 8014132:	2301      	movs	r3, #1
 8014134:	3201      	adds	r2, #1
 8014136:	461d      	mov	r5, r3
 8014138:	e74f      	b.n	8013fda <__kernel_rem_pio2+0x1aa>
 801413a:	bf00      	nop
 801413c:	f3af 8000 	nop.w
	...
 801414c:	3ff00000 	.word	0x3ff00000
 8014150:	08015140 	.word	0x08015140
 8014154:	40200000 	.word	0x40200000
 8014158:	3ff00000 	.word	0x3ff00000
 801415c:	3e700000 	.word	0x3e700000
 8014160:	41700000 	.word	0x41700000
 8014164:	3fe00000 	.word	0x3fe00000
 8014168:	08015100 	.word	0x08015100
 801416c:	1acb      	subs	r3, r1, r3
 801416e:	e7de      	b.n	801412e <__kernel_rem_pio2+0x2fe>
 8014170:	f108 32ff 	add.w	r2, r8, #4294967295
 8014174:	ab0c      	add	r3, sp, #48	@ 0x30
 8014176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801417a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801417e:	a90c      	add	r1, sp, #48	@ 0x30
 8014180:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014184:	e737      	b.n	8013ff6 <__kernel_rem_pio2+0x1c6>
 8014186:	f108 32ff 	add.w	r2, r8, #4294967295
 801418a:	ab0c      	add	r3, sp, #48	@ 0x30
 801418c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014190:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014194:	e7f3      	b.n	801417e <__kernel_rem_pio2+0x34e>
 8014196:	a90c      	add	r1, sp, #48	@ 0x30
 8014198:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801419c:	3b01      	subs	r3, #1
 801419e:	430a      	orrs	r2, r1
 80141a0:	e785      	b.n	80140ae <__kernel_rem_pio2+0x27e>
 80141a2:	3401      	adds	r4, #1
 80141a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80141a8:	2a00      	cmp	r2, #0
 80141aa:	d0fa      	beq.n	80141a2 <__kernel_rem_pio2+0x372>
 80141ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80141ae:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80141b2:	eb0d 0503 	add.w	r5, sp, r3
 80141b6:	9b06      	ldr	r3, [sp, #24]
 80141b8:	aa20      	add	r2, sp, #128	@ 0x80
 80141ba:	4443      	add	r3, r8
 80141bc:	f108 0701 	add.w	r7, r8, #1
 80141c0:	3d98      	subs	r5, #152	@ 0x98
 80141c2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80141c6:	4444      	add	r4, r8
 80141c8:	42bc      	cmp	r4, r7
 80141ca:	da04      	bge.n	80141d6 <__kernel_rem_pio2+0x3a6>
 80141cc:	46a0      	mov	r8, r4
 80141ce:	e6a2      	b.n	8013f16 <__kernel_rem_pio2+0xe6>
 80141d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80141d2:	2401      	movs	r4, #1
 80141d4:	e7e6      	b.n	80141a4 <__kernel_rem_pio2+0x374>
 80141d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80141d8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80141dc:	f7ec f96e 	bl	80004bc <__aeabi_i2d>
 80141e0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80144a0 <__kernel_rem_pio2+0x670>
 80141e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80141e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80141ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80141f0:	46b2      	mov	sl, r6
 80141f2:	f04f 0800 	mov.w	r8, #0
 80141f6:	9b05      	ldr	r3, [sp, #20]
 80141f8:	4598      	cmp	r8, r3
 80141fa:	dd05      	ble.n	8014208 <__kernel_rem_pio2+0x3d8>
 80141fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014200:	3701      	adds	r7, #1
 8014202:	eca5 7b02 	vstmia	r5!, {d7}
 8014206:	e7df      	b.n	80141c8 <__kernel_rem_pio2+0x398>
 8014208:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801420c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014210:	f7ec f9be 	bl	8000590 <__aeabi_dmul>
 8014214:	4602      	mov	r2, r0
 8014216:	460b      	mov	r3, r1
 8014218:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801421c:	f7ec f802 	bl	8000224 <__adddf3>
 8014220:	f108 0801 	add.w	r8, r8, #1
 8014224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014228:	e7e5      	b.n	80141f6 <__kernel_rem_pio2+0x3c6>
 801422a:	f1cb 0000 	rsb	r0, fp, #0
 801422e:	ec47 6b10 	vmov	d0, r6, r7
 8014232:	f7ff fd1d 	bl	8013c70 <scalbn>
 8014236:	ec55 4b10 	vmov	r4, r5, d0
 801423a:	4b9b      	ldr	r3, [pc, #620]	@ (80144a8 <__kernel_rem_pio2+0x678>)
 801423c:	2200      	movs	r2, #0
 801423e:	4620      	mov	r0, r4
 8014240:	4629      	mov	r1, r5
 8014242:	f7ec fc2b 	bl	8000a9c <__aeabi_dcmpge>
 8014246:	b300      	cbz	r0, 801428a <__kernel_rem_pio2+0x45a>
 8014248:	4b98      	ldr	r3, [pc, #608]	@ (80144ac <__kernel_rem_pio2+0x67c>)
 801424a:	2200      	movs	r2, #0
 801424c:	4620      	mov	r0, r4
 801424e:	4629      	mov	r1, r5
 8014250:	f7ec f99e 	bl	8000590 <__aeabi_dmul>
 8014254:	f7ec fc36 	bl	8000ac4 <__aeabi_d2iz>
 8014258:	4606      	mov	r6, r0
 801425a:	f7ec f92f 	bl	80004bc <__aeabi_i2d>
 801425e:	4b92      	ldr	r3, [pc, #584]	@ (80144a8 <__kernel_rem_pio2+0x678>)
 8014260:	2200      	movs	r2, #0
 8014262:	f7ec f995 	bl	8000590 <__aeabi_dmul>
 8014266:	460b      	mov	r3, r1
 8014268:	4602      	mov	r2, r0
 801426a:	4629      	mov	r1, r5
 801426c:	4620      	mov	r0, r4
 801426e:	f7eb ffd7 	bl	8000220 <__aeabi_dsub>
 8014272:	f7ec fc27 	bl	8000ac4 <__aeabi_d2iz>
 8014276:	ab0c      	add	r3, sp, #48	@ 0x30
 8014278:	f10b 0b18 	add.w	fp, fp, #24
 801427c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014280:	f108 0801 	add.w	r8, r8, #1
 8014284:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8014288:	e720      	b.n	80140cc <__kernel_rem_pio2+0x29c>
 801428a:	4620      	mov	r0, r4
 801428c:	4629      	mov	r1, r5
 801428e:	f7ec fc19 	bl	8000ac4 <__aeabi_d2iz>
 8014292:	ab0c      	add	r3, sp, #48	@ 0x30
 8014294:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8014298:	e718      	b.n	80140cc <__kernel_rem_pio2+0x29c>
 801429a:	ab0c      	add	r3, sp, #48	@ 0x30
 801429c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80142a0:	f7ec f90c 	bl	80004bc <__aeabi_i2d>
 80142a4:	4622      	mov	r2, r4
 80142a6:	462b      	mov	r3, r5
 80142a8:	f7ec f972 	bl	8000590 <__aeabi_dmul>
 80142ac:	4652      	mov	r2, sl
 80142ae:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80142b2:	465b      	mov	r3, fp
 80142b4:	4620      	mov	r0, r4
 80142b6:	4629      	mov	r1, r5
 80142b8:	f7ec f96a 	bl	8000590 <__aeabi_dmul>
 80142bc:	3e01      	subs	r6, #1
 80142be:	4604      	mov	r4, r0
 80142c0:	460d      	mov	r5, r1
 80142c2:	e716      	b.n	80140f2 <__kernel_rem_pio2+0x2c2>
 80142c4:	9906      	ldr	r1, [sp, #24]
 80142c6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80142ca:	9106      	str	r1, [sp, #24]
 80142cc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80142d0:	f7ec f95e 	bl	8000590 <__aeabi_dmul>
 80142d4:	4602      	mov	r2, r0
 80142d6:	460b      	mov	r3, r1
 80142d8:	4650      	mov	r0, sl
 80142da:	4659      	mov	r1, fp
 80142dc:	f7eb ffa2 	bl	8000224 <__adddf3>
 80142e0:	3601      	adds	r6, #1
 80142e2:	4682      	mov	sl, r0
 80142e4:	468b      	mov	fp, r1
 80142e6:	9b00      	ldr	r3, [sp, #0]
 80142e8:	429e      	cmp	r6, r3
 80142ea:	dc01      	bgt.n	80142f0 <__kernel_rem_pio2+0x4c0>
 80142ec:	42ae      	cmp	r6, r5
 80142ee:	dde9      	ble.n	80142c4 <__kernel_rem_pio2+0x494>
 80142f0:	ab48      	add	r3, sp, #288	@ 0x120
 80142f2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80142f6:	e9c5 ab00 	strd	sl, fp, [r5]
 80142fa:	3c01      	subs	r4, #1
 80142fc:	e6fd      	b.n	80140fa <__kernel_rem_pio2+0x2ca>
 80142fe:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8014300:	2b02      	cmp	r3, #2
 8014302:	dc0b      	bgt.n	801431c <__kernel_rem_pio2+0x4ec>
 8014304:	2b00      	cmp	r3, #0
 8014306:	dc35      	bgt.n	8014374 <__kernel_rem_pio2+0x544>
 8014308:	d059      	beq.n	80143be <__kernel_rem_pio2+0x58e>
 801430a:	9b02      	ldr	r3, [sp, #8]
 801430c:	f003 0007 	and.w	r0, r3, #7
 8014310:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8014314:	ecbd 8b02 	vpop	{d8}
 8014318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801431c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801431e:	2b03      	cmp	r3, #3
 8014320:	d1f3      	bne.n	801430a <__kernel_rem_pio2+0x4da>
 8014322:	9b05      	ldr	r3, [sp, #20]
 8014324:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8014328:	eb0d 0403 	add.w	r4, sp, r3
 801432c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8014330:	4625      	mov	r5, r4
 8014332:	46c2      	mov	sl, r8
 8014334:	f1ba 0f00 	cmp.w	sl, #0
 8014338:	dc69      	bgt.n	801440e <__kernel_rem_pio2+0x5de>
 801433a:	4645      	mov	r5, r8
 801433c:	2d01      	cmp	r5, #1
 801433e:	f300 8087 	bgt.w	8014450 <__kernel_rem_pio2+0x620>
 8014342:	9c05      	ldr	r4, [sp, #20]
 8014344:	ab48      	add	r3, sp, #288	@ 0x120
 8014346:	441c      	add	r4, r3
 8014348:	2000      	movs	r0, #0
 801434a:	2100      	movs	r1, #0
 801434c:	f1b8 0f01 	cmp.w	r8, #1
 8014350:	f300 809c 	bgt.w	801448c <__kernel_rem_pio2+0x65c>
 8014354:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8014358:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 801435c:	f1b9 0f00 	cmp.w	r9, #0
 8014360:	f040 80a6 	bne.w	80144b0 <__kernel_rem_pio2+0x680>
 8014364:	9b04      	ldr	r3, [sp, #16]
 8014366:	e9c3 5600 	strd	r5, r6, [r3]
 801436a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801436e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014372:	e7ca      	b.n	801430a <__kernel_rem_pio2+0x4da>
 8014374:	9d05      	ldr	r5, [sp, #20]
 8014376:	ab48      	add	r3, sp, #288	@ 0x120
 8014378:	441d      	add	r5, r3
 801437a:	4644      	mov	r4, r8
 801437c:	2000      	movs	r0, #0
 801437e:	2100      	movs	r1, #0
 8014380:	2c00      	cmp	r4, #0
 8014382:	da35      	bge.n	80143f0 <__kernel_rem_pio2+0x5c0>
 8014384:	f1b9 0f00 	cmp.w	r9, #0
 8014388:	d038      	beq.n	80143fc <__kernel_rem_pio2+0x5cc>
 801438a:	4602      	mov	r2, r0
 801438c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014390:	9c04      	ldr	r4, [sp, #16]
 8014392:	e9c4 2300 	strd	r2, r3, [r4]
 8014396:	4602      	mov	r2, r0
 8014398:	460b      	mov	r3, r1
 801439a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 801439e:	f7eb ff3f 	bl	8000220 <__aeabi_dsub>
 80143a2:	ad4a      	add	r5, sp, #296	@ 0x128
 80143a4:	2401      	movs	r4, #1
 80143a6:	45a0      	cmp	r8, r4
 80143a8:	da2b      	bge.n	8014402 <__kernel_rem_pio2+0x5d2>
 80143aa:	f1b9 0f00 	cmp.w	r9, #0
 80143ae:	d002      	beq.n	80143b6 <__kernel_rem_pio2+0x586>
 80143b0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80143b4:	4619      	mov	r1, r3
 80143b6:	9b04      	ldr	r3, [sp, #16]
 80143b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80143bc:	e7a5      	b.n	801430a <__kernel_rem_pio2+0x4da>
 80143be:	9c05      	ldr	r4, [sp, #20]
 80143c0:	ab48      	add	r3, sp, #288	@ 0x120
 80143c2:	441c      	add	r4, r3
 80143c4:	2000      	movs	r0, #0
 80143c6:	2100      	movs	r1, #0
 80143c8:	f1b8 0f00 	cmp.w	r8, #0
 80143cc:	da09      	bge.n	80143e2 <__kernel_rem_pio2+0x5b2>
 80143ce:	f1b9 0f00 	cmp.w	r9, #0
 80143d2:	d002      	beq.n	80143da <__kernel_rem_pio2+0x5aa>
 80143d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80143d8:	4619      	mov	r1, r3
 80143da:	9b04      	ldr	r3, [sp, #16]
 80143dc:	e9c3 0100 	strd	r0, r1, [r3]
 80143e0:	e793      	b.n	801430a <__kernel_rem_pio2+0x4da>
 80143e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80143e6:	f7eb ff1d 	bl	8000224 <__adddf3>
 80143ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80143ee:	e7eb      	b.n	80143c8 <__kernel_rem_pio2+0x598>
 80143f0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80143f4:	f7eb ff16 	bl	8000224 <__adddf3>
 80143f8:	3c01      	subs	r4, #1
 80143fa:	e7c1      	b.n	8014380 <__kernel_rem_pio2+0x550>
 80143fc:	4602      	mov	r2, r0
 80143fe:	460b      	mov	r3, r1
 8014400:	e7c6      	b.n	8014390 <__kernel_rem_pio2+0x560>
 8014402:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8014406:	f7eb ff0d 	bl	8000224 <__adddf3>
 801440a:	3401      	adds	r4, #1
 801440c:	e7cb      	b.n	80143a6 <__kernel_rem_pio2+0x576>
 801440e:	ed35 7b02 	vldmdb	r5!, {d7}
 8014412:	ed8d 7b00 	vstr	d7, [sp]
 8014416:	ed95 7b02 	vldr	d7, [r5, #8]
 801441a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801441e:	ec53 2b17 	vmov	r2, r3, d7
 8014422:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014426:	f7eb fefd 	bl	8000224 <__adddf3>
 801442a:	4602      	mov	r2, r0
 801442c:	460b      	mov	r3, r1
 801442e:	4606      	mov	r6, r0
 8014430:	460f      	mov	r7, r1
 8014432:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014436:	f7eb fef3 	bl	8000220 <__aeabi_dsub>
 801443a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801443e:	f7eb fef1 	bl	8000224 <__adddf3>
 8014442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014446:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801444a:	e9c5 6700 	strd	r6, r7, [r5]
 801444e:	e771      	b.n	8014334 <__kernel_rem_pio2+0x504>
 8014450:	ed34 7b02 	vldmdb	r4!, {d7}
 8014454:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8014458:	ec51 0b17 	vmov	r0, r1, d7
 801445c:	4652      	mov	r2, sl
 801445e:	465b      	mov	r3, fp
 8014460:	ed8d 7b00 	vstr	d7, [sp]
 8014464:	f7eb fede 	bl	8000224 <__adddf3>
 8014468:	4602      	mov	r2, r0
 801446a:	460b      	mov	r3, r1
 801446c:	4606      	mov	r6, r0
 801446e:	460f      	mov	r7, r1
 8014470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014474:	f7eb fed4 	bl	8000220 <__aeabi_dsub>
 8014478:	4652      	mov	r2, sl
 801447a:	465b      	mov	r3, fp
 801447c:	f7eb fed2 	bl	8000224 <__adddf3>
 8014480:	3d01      	subs	r5, #1
 8014482:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014486:	e9c4 6700 	strd	r6, r7, [r4]
 801448a:	e757      	b.n	801433c <__kernel_rem_pio2+0x50c>
 801448c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014490:	f7eb fec8 	bl	8000224 <__adddf3>
 8014494:	f108 38ff 	add.w	r8, r8, #4294967295
 8014498:	e758      	b.n	801434c <__kernel_rem_pio2+0x51c>
 801449a:	bf00      	nop
 801449c:	f3af 8000 	nop.w
	...
 80144a8:	41700000 	.word	0x41700000
 80144ac:	3e700000 	.word	0x3e700000
 80144b0:	9b04      	ldr	r3, [sp, #16]
 80144b2:	9a04      	ldr	r2, [sp, #16]
 80144b4:	601d      	str	r5, [r3, #0]
 80144b6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80144ba:	605c      	str	r4, [r3, #4]
 80144bc:	609f      	str	r7, [r3, #8]
 80144be:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80144c2:	60d3      	str	r3, [r2, #12]
 80144c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80144c8:	6110      	str	r0, [r2, #16]
 80144ca:	6153      	str	r3, [r2, #20]
 80144cc:	e71d      	b.n	801430a <__kernel_rem_pio2+0x4da>
 80144ce:	bf00      	nop

080144d0 <__kernel_rem_pio2f>:
 80144d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d4:	ed2d 8b04 	vpush	{d8-d9}
 80144d8:	b0d9      	sub	sp, #356	@ 0x164
 80144da:	4690      	mov	r8, r2
 80144dc:	9001      	str	r0, [sp, #4]
 80144de:	4ab6      	ldr	r2, [pc, #728]	@ (80147b8 <__kernel_rem_pio2f+0x2e8>)
 80144e0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80144e2:	f118 0f04 	cmn.w	r8, #4
 80144e6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80144ea:	460f      	mov	r7, r1
 80144ec:	f103 3bff 	add.w	fp, r3, #4294967295
 80144f0:	db26      	blt.n	8014540 <__kernel_rem_pio2f+0x70>
 80144f2:	f1b8 0203 	subs.w	r2, r8, #3
 80144f6:	bf48      	it	mi
 80144f8:	f108 0204 	addmi.w	r2, r8, #4
 80144fc:	10d2      	asrs	r2, r2, #3
 80144fe:	1c55      	adds	r5, r2, #1
 8014500:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8014502:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80147c8 <__kernel_rem_pio2f+0x2f8>
 8014506:	00e8      	lsls	r0, r5, #3
 8014508:	eba2 060b 	sub.w	r6, r2, fp
 801450c:	9002      	str	r0, [sp, #8]
 801450e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8014512:	eb0a 0c0b 	add.w	ip, sl, fp
 8014516:	ac1c      	add	r4, sp, #112	@ 0x70
 8014518:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801451c:	2000      	movs	r0, #0
 801451e:	4560      	cmp	r0, ip
 8014520:	dd10      	ble.n	8014544 <__kernel_rem_pio2f+0x74>
 8014522:	a91c      	add	r1, sp, #112	@ 0x70
 8014524:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8014528:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801452c:	2600      	movs	r6, #0
 801452e:	4556      	cmp	r6, sl
 8014530:	dc24      	bgt.n	801457c <__kernel_rem_pio2f+0xac>
 8014532:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014536:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80147c8 <__kernel_rem_pio2f+0x2f8>
 801453a:	4684      	mov	ip, r0
 801453c:	2400      	movs	r4, #0
 801453e:	e016      	b.n	801456e <__kernel_rem_pio2f+0x9e>
 8014540:	2200      	movs	r2, #0
 8014542:	e7dc      	b.n	80144fe <__kernel_rem_pio2f+0x2e>
 8014544:	42c6      	cmn	r6, r0
 8014546:	bf5d      	ittte	pl
 8014548:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801454c:	ee07 1a90 	vmovpl	s15, r1
 8014550:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014554:	eef0 7a47 	vmovmi.f32	s15, s14
 8014558:	ece4 7a01 	vstmia	r4!, {s15}
 801455c:	3001      	adds	r0, #1
 801455e:	e7de      	b.n	801451e <__kernel_rem_pio2f+0x4e>
 8014560:	ecfe 6a01 	vldmia	lr!, {s13}
 8014564:	ed3c 7a01 	vldmdb	ip!, {s14}
 8014568:	eee6 7a87 	vfma.f32	s15, s13, s14
 801456c:	3401      	adds	r4, #1
 801456e:	455c      	cmp	r4, fp
 8014570:	ddf6      	ble.n	8014560 <__kernel_rem_pio2f+0x90>
 8014572:	ece9 7a01 	vstmia	r9!, {s15}
 8014576:	3601      	adds	r6, #1
 8014578:	3004      	adds	r0, #4
 801457a:	e7d8      	b.n	801452e <__kernel_rem_pio2f+0x5e>
 801457c:	a908      	add	r1, sp, #32
 801457e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014582:	9104      	str	r1, [sp, #16]
 8014584:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8014586:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80147c4 <__kernel_rem_pio2f+0x2f4>
 801458a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80147c0 <__kernel_rem_pio2f+0x2f0>
 801458e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8014592:	9203      	str	r2, [sp, #12]
 8014594:	4654      	mov	r4, sl
 8014596:	00a2      	lsls	r2, r4, #2
 8014598:	9205      	str	r2, [sp, #20]
 801459a:	aa58      	add	r2, sp, #352	@ 0x160
 801459c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80145a0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80145a4:	a944      	add	r1, sp, #272	@ 0x110
 80145a6:	aa08      	add	r2, sp, #32
 80145a8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80145ac:	4694      	mov	ip, r2
 80145ae:	4626      	mov	r6, r4
 80145b0:	2e00      	cmp	r6, #0
 80145b2:	dc4c      	bgt.n	801464e <__kernel_rem_pio2f+0x17e>
 80145b4:	4628      	mov	r0, r5
 80145b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80145ba:	f7ff fbd3 	bl	8013d64 <scalbnf>
 80145be:	eeb0 8a40 	vmov.f32	s16, s0
 80145c2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80145c6:	ee28 0a00 	vmul.f32	s0, s16, s0
 80145ca:	f000 fa65 	bl	8014a98 <floorf>
 80145ce:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80145d2:	eea0 8a67 	vfms.f32	s16, s0, s15
 80145d6:	2d00      	cmp	r5, #0
 80145d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80145dc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80145e0:	ee17 9a90 	vmov	r9, s15
 80145e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145e8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80145ec:	dd41      	ble.n	8014672 <__kernel_rem_pio2f+0x1a2>
 80145ee:	f104 3cff 	add.w	ip, r4, #4294967295
 80145f2:	a908      	add	r1, sp, #32
 80145f4:	f1c5 0e08 	rsb	lr, r5, #8
 80145f8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80145fc:	fa46 f00e 	asr.w	r0, r6, lr
 8014600:	4481      	add	r9, r0
 8014602:	fa00 f00e 	lsl.w	r0, r0, lr
 8014606:	1a36      	subs	r6, r6, r0
 8014608:	f1c5 0007 	rsb	r0, r5, #7
 801460c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8014610:	4106      	asrs	r6, r0
 8014612:	2e00      	cmp	r6, #0
 8014614:	dd3c      	ble.n	8014690 <__kernel_rem_pio2f+0x1c0>
 8014616:	f04f 0e00 	mov.w	lr, #0
 801461a:	f109 0901 	add.w	r9, r9, #1
 801461e:	4670      	mov	r0, lr
 8014620:	4574      	cmp	r4, lr
 8014622:	dc68      	bgt.n	80146f6 <__kernel_rem_pio2f+0x226>
 8014624:	2d00      	cmp	r5, #0
 8014626:	dd03      	ble.n	8014630 <__kernel_rem_pio2f+0x160>
 8014628:	2d01      	cmp	r5, #1
 801462a:	d074      	beq.n	8014716 <__kernel_rem_pio2f+0x246>
 801462c:	2d02      	cmp	r5, #2
 801462e:	d07d      	beq.n	801472c <__kernel_rem_pio2f+0x25c>
 8014630:	2e02      	cmp	r6, #2
 8014632:	d12d      	bne.n	8014690 <__kernel_rem_pio2f+0x1c0>
 8014634:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8014638:	ee30 8a48 	vsub.f32	s16, s0, s16
 801463c:	b340      	cbz	r0, 8014690 <__kernel_rem_pio2f+0x1c0>
 801463e:	4628      	mov	r0, r5
 8014640:	9306      	str	r3, [sp, #24]
 8014642:	f7ff fb8f 	bl	8013d64 <scalbnf>
 8014646:	9b06      	ldr	r3, [sp, #24]
 8014648:	ee38 8a40 	vsub.f32	s16, s16, s0
 801464c:	e020      	b.n	8014690 <__kernel_rem_pio2f+0x1c0>
 801464e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014652:	3e01      	subs	r6, #1
 8014654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014658:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801465c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014660:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014664:	ecac 0a01 	vstmia	ip!, {s0}
 8014668:	ed30 0a01 	vldmdb	r0!, {s0}
 801466c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014670:	e79e      	b.n	80145b0 <__kernel_rem_pio2f+0xe0>
 8014672:	d105      	bne.n	8014680 <__kernel_rem_pio2f+0x1b0>
 8014674:	1e60      	subs	r0, r4, #1
 8014676:	a908      	add	r1, sp, #32
 8014678:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801467c:	11f6      	asrs	r6, r6, #7
 801467e:	e7c8      	b.n	8014612 <__kernel_rem_pio2f+0x142>
 8014680:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8014684:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801468c:	da31      	bge.n	80146f2 <__kernel_rem_pio2f+0x222>
 801468e:	2600      	movs	r6, #0
 8014690:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014698:	f040 8098 	bne.w	80147cc <__kernel_rem_pio2f+0x2fc>
 801469c:	1e60      	subs	r0, r4, #1
 801469e:	2200      	movs	r2, #0
 80146a0:	4550      	cmp	r0, sl
 80146a2:	da4b      	bge.n	801473c <__kernel_rem_pio2f+0x26c>
 80146a4:	2a00      	cmp	r2, #0
 80146a6:	d065      	beq.n	8014774 <__kernel_rem_pio2f+0x2a4>
 80146a8:	3c01      	subs	r4, #1
 80146aa:	ab08      	add	r3, sp, #32
 80146ac:	3d08      	subs	r5, #8
 80146ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d0f8      	beq.n	80146a8 <__kernel_rem_pio2f+0x1d8>
 80146b6:	4628      	mov	r0, r5
 80146b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80146bc:	f7ff fb52 	bl	8013d64 <scalbnf>
 80146c0:	1c63      	adds	r3, r4, #1
 80146c2:	aa44      	add	r2, sp, #272	@ 0x110
 80146c4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80147c4 <__kernel_rem_pio2f+0x2f4>
 80146c8:	0099      	lsls	r1, r3, #2
 80146ca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80146ce:	4623      	mov	r3, r4
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	f280 80a9 	bge.w	8014828 <__kernel_rem_pio2f+0x358>
 80146d6:	4623      	mov	r3, r4
 80146d8:	2b00      	cmp	r3, #0
 80146da:	f2c0 80c7 	blt.w	801486c <__kernel_rem_pio2f+0x39c>
 80146de:	aa44      	add	r2, sp, #272	@ 0x110
 80146e0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80146e4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80147bc <__kernel_rem_pio2f+0x2ec>
 80146e8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80147c8 <__kernel_rem_pio2f+0x2f8>
 80146ec:	2000      	movs	r0, #0
 80146ee:	1ae2      	subs	r2, r4, r3
 80146f0:	e0b1      	b.n	8014856 <__kernel_rem_pio2f+0x386>
 80146f2:	2602      	movs	r6, #2
 80146f4:	e78f      	b.n	8014616 <__kernel_rem_pio2f+0x146>
 80146f6:	f852 1b04 	ldr.w	r1, [r2], #4
 80146fa:	b948      	cbnz	r0, 8014710 <__kernel_rem_pio2f+0x240>
 80146fc:	b121      	cbz	r1, 8014708 <__kernel_rem_pio2f+0x238>
 80146fe:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8014702:	f842 1c04 	str.w	r1, [r2, #-4]
 8014706:	2101      	movs	r1, #1
 8014708:	f10e 0e01 	add.w	lr, lr, #1
 801470c:	4608      	mov	r0, r1
 801470e:	e787      	b.n	8014620 <__kernel_rem_pio2f+0x150>
 8014710:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8014714:	e7f5      	b.n	8014702 <__kernel_rem_pio2f+0x232>
 8014716:	f104 3cff 	add.w	ip, r4, #4294967295
 801471a:	aa08      	add	r2, sp, #32
 801471c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014720:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014724:	a908      	add	r1, sp, #32
 8014726:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801472a:	e781      	b.n	8014630 <__kernel_rem_pio2f+0x160>
 801472c:	f104 3cff 	add.w	ip, r4, #4294967295
 8014730:	aa08      	add	r2, sp, #32
 8014732:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8014736:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801473a:	e7f3      	b.n	8014724 <__kernel_rem_pio2f+0x254>
 801473c:	a908      	add	r1, sp, #32
 801473e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8014742:	3801      	subs	r0, #1
 8014744:	430a      	orrs	r2, r1
 8014746:	e7ab      	b.n	80146a0 <__kernel_rem_pio2f+0x1d0>
 8014748:	3201      	adds	r2, #1
 801474a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801474e:	2e00      	cmp	r6, #0
 8014750:	d0fa      	beq.n	8014748 <__kernel_rem_pio2f+0x278>
 8014752:	9905      	ldr	r1, [sp, #20]
 8014754:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8014758:	eb0d 0001 	add.w	r0, sp, r1
 801475c:	18e6      	adds	r6, r4, r3
 801475e:	a91c      	add	r1, sp, #112	@ 0x70
 8014760:	f104 0c01 	add.w	ip, r4, #1
 8014764:	384c      	subs	r0, #76	@ 0x4c
 8014766:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801476a:	4422      	add	r2, r4
 801476c:	4562      	cmp	r2, ip
 801476e:	da04      	bge.n	801477a <__kernel_rem_pio2f+0x2aa>
 8014770:	4614      	mov	r4, r2
 8014772:	e710      	b.n	8014596 <__kernel_rem_pio2f+0xc6>
 8014774:	9804      	ldr	r0, [sp, #16]
 8014776:	2201      	movs	r2, #1
 8014778:	e7e7      	b.n	801474a <__kernel_rem_pio2f+0x27a>
 801477a:	9903      	ldr	r1, [sp, #12]
 801477c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8014780:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8014784:	9105      	str	r1, [sp, #20]
 8014786:	ee07 1a90 	vmov	s15, r1
 801478a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801478e:	2400      	movs	r4, #0
 8014790:	ece6 7a01 	vstmia	r6!, {s15}
 8014794:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80147c8 <__kernel_rem_pio2f+0x2f8>
 8014798:	46b1      	mov	r9, r6
 801479a:	455c      	cmp	r4, fp
 801479c:	dd04      	ble.n	80147a8 <__kernel_rem_pio2f+0x2d8>
 801479e:	ece0 7a01 	vstmia	r0!, {s15}
 80147a2:	f10c 0c01 	add.w	ip, ip, #1
 80147a6:	e7e1      	b.n	801476c <__kernel_rem_pio2f+0x29c>
 80147a8:	ecfe 6a01 	vldmia	lr!, {s13}
 80147ac:	ed39 7a01 	vldmdb	r9!, {s14}
 80147b0:	3401      	adds	r4, #1
 80147b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80147b6:	e7f0      	b.n	801479a <__kernel_rem_pio2f+0x2ca>
 80147b8:	0801517c 	.word	0x0801517c
 80147bc:	08015150 	.word	0x08015150
 80147c0:	43800000 	.word	0x43800000
 80147c4:	3b800000 	.word	0x3b800000
 80147c8:	00000000 	.word	0x00000000
 80147cc:	9b02      	ldr	r3, [sp, #8]
 80147ce:	eeb0 0a48 	vmov.f32	s0, s16
 80147d2:	eba3 0008 	sub.w	r0, r3, r8
 80147d6:	f7ff fac5 	bl	8013d64 <scalbnf>
 80147da:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80147c0 <__kernel_rem_pio2f+0x2f0>
 80147de:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80147e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e6:	db19      	blt.n	801481c <__kernel_rem_pio2f+0x34c>
 80147e8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80147c4 <__kernel_rem_pio2f+0x2f4>
 80147ec:	ee60 7a27 	vmul.f32	s15, s0, s15
 80147f0:	aa08      	add	r2, sp, #32
 80147f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80147f6:	3508      	adds	r5, #8
 80147f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80147fc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014804:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014808:	ee10 3a10 	vmov	r3, s0
 801480c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014810:	ee17 3a90 	vmov	r3, s15
 8014814:	3401      	adds	r4, #1
 8014816:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801481a:	e74c      	b.n	80146b6 <__kernel_rem_pio2f+0x1e6>
 801481c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014820:	aa08      	add	r2, sp, #32
 8014822:	ee10 3a10 	vmov	r3, s0
 8014826:	e7f6      	b.n	8014816 <__kernel_rem_pio2f+0x346>
 8014828:	a808      	add	r0, sp, #32
 801482a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801482e:	9001      	str	r0, [sp, #4]
 8014830:	ee07 0a90 	vmov	s15, r0
 8014834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014838:	3b01      	subs	r3, #1
 801483a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801483e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014842:	ed62 7a01 	vstmdb	r2!, {s15}
 8014846:	e743      	b.n	80146d0 <__kernel_rem_pio2f+0x200>
 8014848:	ecfc 6a01 	vldmia	ip!, {s13}
 801484c:	ecb5 7a01 	vldmia	r5!, {s14}
 8014850:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014854:	3001      	adds	r0, #1
 8014856:	4550      	cmp	r0, sl
 8014858:	dc01      	bgt.n	801485e <__kernel_rem_pio2f+0x38e>
 801485a:	4290      	cmp	r0, r2
 801485c:	ddf4      	ble.n	8014848 <__kernel_rem_pio2f+0x378>
 801485e:	a858      	add	r0, sp, #352	@ 0x160
 8014860:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014864:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8014868:	3b01      	subs	r3, #1
 801486a:	e735      	b.n	80146d8 <__kernel_rem_pio2f+0x208>
 801486c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801486e:	2b02      	cmp	r3, #2
 8014870:	dc09      	bgt.n	8014886 <__kernel_rem_pio2f+0x3b6>
 8014872:	2b00      	cmp	r3, #0
 8014874:	dc27      	bgt.n	80148c6 <__kernel_rem_pio2f+0x3f6>
 8014876:	d040      	beq.n	80148fa <__kernel_rem_pio2f+0x42a>
 8014878:	f009 0007 	and.w	r0, r9, #7
 801487c:	b059      	add	sp, #356	@ 0x164
 801487e:	ecbd 8b04 	vpop	{d8-d9}
 8014882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014886:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8014888:	2b03      	cmp	r3, #3
 801488a:	d1f5      	bne.n	8014878 <__kernel_rem_pio2f+0x3a8>
 801488c:	aa30      	add	r2, sp, #192	@ 0xc0
 801488e:	1f0b      	subs	r3, r1, #4
 8014890:	4413      	add	r3, r2
 8014892:	461a      	mov	r2, r3
 8014894:	4620      	mov	r0, r4
 8014896:	2800      	cmp	r0, #0
 8014898:	dc50      	bgt.n	801493c <__kernel_rem_pio2f+0x46c>
 801489a:	4622      	mov	r2, r4
 801489c:	2a01      	cmp	r2, #1
 801489e:	dc5d      	bgt.n	801495c <__kernel_rem_pio2f+0x48c>
 80148a0:	ab30      	add	r3, sp, #192	@ 0xc0
 80148a2:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80147c8 <__kernel_rem_pio2f+0x2f8>
 80148a6:	440b      	add	r3, r1
 80148a8:	2c01      	cmp	r4, #1
 80148aa:	dc67      	bgt.n	801497c <__kernel_rem_pio2f+0x4ac>
 80148ac:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80148b0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80148b4:	2e00      	cmp	r6, #0
 80148b6:	d167      	bne.n	8014988 <__kernel_rem_pio2f+0x4b8>
 80148b8:	edc7 6a00 	vstr	s13, [r7]
 80148bc:	ed87 7a01 	vstr	s14, [r7, #4]
 80148c0:	edc7 7a02 	vstr	s15, [r7, #8]
 80148c4:	e7d8      	b.n	8014878 <__kernel_rem_pio2f+0x3a8>
 80148c6:	ab30      	add	r3, sp, #192	@ 0xc0
 80148c8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80147c8 <__kernel_rem_pio2f+0x2f8>
 80148cc:	440b      	add	r3, r1
 80148ce:	4622      	mov	r2, r4
 80148d0:	2a00      	cmp	r2, #0
 80148d2:	da24      	bge.n	801491e <__kernel_rem_pio2f+0x44e>
 80148d4:	b34e      	cbz	r6, 801492a <__kernel_rem_pio2f+0x45a>
 80148d6:	eef1 7a47 	vneg.f32	s15, s14
 80148da:	edc7 7a00 	vstr	s15, [r7]
 80148de:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80148e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80148e6:	aa31      	add	r2, sp, #196	@ 0xc4
 80148e8:	2301      	movs	r3, #1
 80148ea:	429c      	cmp	r4, r3
 80148ec:	da20      	bge.n	8014930 <__kernel_rem_pio2f+0x460>
 80148ee:	b10e      	cbz	r6, 80148f4 <__kernel_rem_pio2f+0x424>
 80148f0:	eef1 7a67 	vneg.f32	s15, s15
 80148f4:	edc7 7a01 	vstr	s15, [r7, #4]
 80148f8:	e7be      	b.n	8014878 <__kernel_rem_pio2f+0x3a8>
 80148fa:	ab30      	add	r3, sp, #192	@ 0xc0
 80148fc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80147c8 <__kernel_rem_pio2f+0x2f8>
 8014900:	440b      	add	r3, r1
 8014902:	2c00      	cmp	r4, #0
 8014904:	da05      	bge.n	8014912 <__kernel_rem_pio2f+0x442>
 8014906:	b10e      	cbz	r6, 801490c <__kernel_rem_pio2f+0x43c>
 8014908:	eef1 7a67 	vneg.f32	s15, s15
 801490c:	edc7 7a00 	vstr	s15, [r7]
 8014910:	e7b2      	b.n	8014878 <__kernel_rem_pio2f+0x3a8>
 8014912:	ed33 7a01 	vldmdb	r3!, {s14}
 8014916:	3c01      	subs	r4, #1
 8014918:	ee77 7a87 	vadd.f32	s15, s15, s14
 801491c:	e7f1      	b.n	8014902 <__kernel_rem_pio2f+0x432>
 801491e:	ed73 7a01 	vldmdb	r3!, {s15}
 8014922:	3a01      	subs	r2, #1
 8014924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014928:	e7d2      	b.n	80148d0 <__kernel_rem_pio2f+0x400>
 801492a:	eef0 7a47 	vmov.f32	s15, s14
 801492e:	e7d4      	b.n	80148da <__kernel_rem_pio2f+0x40a>
 8014930:	ecb2 7a01 	vldmia	r2!, {s14}
 8014934:	3301      	adds	r3, #1
 8014936:	ee77 7a87 	vadd.f32	s15, s15, s14
 801493a:	e7d6      	b.n	80148ea <__kernel_rem_pio2f+0x41a>
 801493c:	ed72 7a01 	vldmdb	r2!, {s15}
 8014940:	edd2 6a01 	vldr	s13, [r2, #4]
 8014944:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014948:	3801      	subs	r0, #1
 801494a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801494e:	ed82 7a00 	vstr	s14, [r2]
 8014952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014956:	edc2 7a01 	vstr	s15, [r2, #4]
 801495a:	e79c      	b.n	8014896 <__kernel_rem_pio2f+0x3c6>
 801495c:	ed73 7a01 	vldmdb	r3!, {s15}
 8014960:	edd3 6a01 	vldr	s13, [r3, #4]
 8014964:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014968:	3a01      	subs	r2, #1
 801496a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801496e:	ed83 7a00 	vstr	s14, [r3]
 8014972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014976:	edc3 7a01 	vstr	s15, [r3, #4]
 801497a:	e78f      	b.n	801489c <__kernel_rem_pio2f+0x3cc>
 801497c:	ed33 7a01 	vldmdb	r3!, {s14}
 8014980:	3c01      	subs	r4, #1
 8014982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014986:	e78f      	b.n	80148a8 <__kernel_rem_pio2f+0x3d8>
 8014988:	eef1 6a66 	vneg.f32	s13, s13
 801498c:	eeb1 7a47 	vneg.f32	s14, s14
 8014990:	edc7 6a00 	vstr	s13, [r7]
 8014994:	ed87 7a01 	vstr	s14, [r7, #4]
 8014998:	eef1 7a67 	vneg.f32	s15, s15
 801499c:	e790      	b.n	80148c0 <__kernel_rem_pio2f+0x3f0>
 801499e:	bf00      	nop

080149a0 <floor>:
 80149a0:	ec51 0b10 	vmov	r0, r1, d0
 80149a4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80149a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149ac:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80149b0:	2e13      	cmp	r6, #19
 80149b2:	460c      	mov	r4, r1
 80149b4:	4605      	mov	r5, r0
 80149b6:	4680      	mov	r8, r0
 80149b8:	dc34      	bgt.n	8014a24 <floor+0x84>
 80149ba:	2e00      	cmp	r6, #0
 80149bc:	da17      	bge.n	80149ee <floor+0x4e>
 80149be:	a332      	add	r3, pc, #200	@ (adr r3, 8014a88 <floor+0xe8>)
 80149c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c4:	f7eb fc2e 	bl	8000224 <__adddf3>
 80149c8:	2200      	movs	r2, #0
 80149ca:	2300      	movs	r3, #0
 80149cc:	f7ec f870 	bl	8000ab0 <__aeabi_dcmpgt>
 80149d0:	b150      	cbz	r0, 80149e8 <floor+0x48>
 80149d2:	2c00      	cmp	r4, #0
 80149d4:	da55      	bge.n	8014a82 <floor+0xe2>
 80149d6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80149da:	432c      	orrs	r4, r5
 80149dc:	2500      	movs	r5, #0
 80149de:	42ac      	cmp	r4, r5
 80149e0:	4c2b      	ldr	r4, [pc, #172]	@ (8014a90 <floor+0xf0>)
 80149e2:	bf08      	it	eq
 80149e4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80149e8:	4621      	mov	r1, r4
 80149ea:	4628      	mov	r0, r5
 80149ec:	e023      	b.n	8014a36 <floor+0x96>
 80149ee:	4f29      	ldr	r7, [pc, #164]	@ (8014a94 <floor+0xf4>)
 80149f0:	4137      	asrs	r7, r6
 80149f2:	ea01 0307 	and.w	r3, r1, r7
 80149f6:	4303      	orrs	r3, r0
 80149f8:	d01d      	beq.n	8014a36 <floor+0x96>
 80149fa:	a323      	add	r3, pc, #140	@ (adr r3, 8014a88 <floor+0xe8>)
 80149fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a00:	f7eb fc10 	bl	8000224 <__adddf3>
 8014a04:	2200      	movs	r2, #0
 8014a06:	2300      	movs	r3, #0
 8014a08:	f7ec f852 	bl	8000ab0 <__aeabi_dcmpgt>
 8014a0c:	2800      	cmp	r0, #0
 8014a0e:	d0eb      	beq.n	80149e8 <floor+0x48>
 8014a10:	2c00      	cmp	r4, #0
 8014a12:	bfbe      	ittt	lt
 8014a14:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8014a18:	4133      	asrlt	r3, r6
 8014a1a:	18e4      	addlt	r4, r4, r3
 8014a1c:	ea24 0407 	bic.w	r4, r4, r7
 8014a20:	2500      	movs	r5, #0
 8014a22:	e7e1      	b.n	80149e8 <floor+0x48>
 8014a24:	2e33      	cmp	r6, #51	@ 0x33
 8014a26:	dd0a      	ble.n	8014a3e <floor+0x9e>
 8014a28:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8014a2c:	d103      	bne.n	8014a36 <floor+0x96>
 8014a2e:	4602      	mov	r2, r0
 8014a30:	460b      	mov	r3, r1
 8014a32:	f7eb fbf7 	bl	8000224 <__adddf3>
 8014a36:	ec41 0b10 	vmov	d0, r0, r1
 8014a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a3e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8014a42:	f04f 37ff 	mov.w	r7, #4294967295
 8014a46:	40df      	lsrs	r7, r3
 8014a48:	4207      	tst	r7, r0
 8014a4a:	d0f4      	beq.n	8014a36 <floor+0x96>
 8014a4c:	a30e      	add	r3, pc, #56	@ (adr r3, 8014a88 <floor+0xe8>)
 8014a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a52:	f7eb fbe7 	bl	8000224 <__adddf3>
 8014a56:	2200      	movs	r2, #0
 8014a58:	2300      	movs	r3, #0
 8014a5a:	f7ec f829 	bl	8000ab0 <__aeabi_dcmpgt>
 8014a5e:	2800      	cmp	r0, #0
 8014a60:	d0c2      	beq.n	80149e8 <floor+0x48>
 8014a62:	2c00      	cmp	r4, #0
 8014a64:	da0a      	bge.n	8014a7c <floor+0xdc>
 8014a66:	2e14      	cmp	r6, #20
 8014a68:	d101      	bne.n	8014a6e <floor+0xce>
 8014a6a:	3401      	adds	r4, #1
 8014a6c:	e006      	b.n	8014a7c <floor+0xdc>
 8014a6e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8014a72:	2301      	movs	r3, #1
 8014a74:	40b3      	lsls	r3, r6
 8014a76:	441d      	add	r5, r3
 8014a78:	4545      	cmp	r5, r8
 8014a7a:	d3f6      	bcc.n	8014a6a <floor+0xca>
 8014a7c:	ea25 0507 	bic.w	r5, r5, r7
 8014a80:	e7b2      	b.n	80149e8 <floor+0x48>
 8014a82:	2500      	movs	r5, #0
 8014a84:	462c      	mov	r4, r5
 8014a86:	e7af      	b.n	80149e8 <floor+0x48>
 8014a88:	8800759c 	.word	0x8800759c
 8014a8c:	7e37e43c 	.word	0x7e37e43c
 8014a90:	bff00000 	.word	0xbff00000
 8014a94:	000fffff 	.word	0x000fffff

08014a98 <floorf>:
 8014a98:	ee10 3a10 	vmov	r3, s0
 8014a9c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014aa0:	3a7f      	subs	r2, #127	@ 0x7f
 8014aa2:	2a16      	cmp	r2, #22
 8014aa4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8014aa8:	dc2b      	bgt.n	8014b02 <floorf+0x6a>
 8014aaa:	2a00      	cmp	r2, #0
 8014aac:	da12      	bge.n	8014ad4 <floorf+0x3c>
 8014aae:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8014b14 <floorf+0x7c>
 8014ab2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ab6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014abe:	dd06      	ble.n	8014ace <floorf+0x36>
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	da24      	bge.n	8014b0e <floorf+0x76>
 8014ac4:	2900      	cmp	r1, #0
 8014ac6:	4b14      	ldr	r3, [pc, #80]	@ (8014b18 <floorf+0x80>)
 8014ac8:	bf08      	it	eq
 8014aca:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8014ace:	ee00 3a10 	vmov	s0, r3
 8014ad2:	4770      	bx	lr
 8014ad4:	4911      	ldr	r1, [pc, #68]	@ (8014b1c <floorf+0x84>)
 8014ad6:	4111      	asrs	r1, r2
 8014ad8:	420b      	tst	r3, r1
 8014ada:	d0fa      	beq.n	8014ad2 <floorf+0x3a>
 8014adc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8014b14 <floorf+0x7c>
 8014ae0:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014ae4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014aec:	ddef      	ble.n	8014ace <floorf+0x36>
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	bfbe      	ittt	lt
 8014af2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8014af6:	fa40 f202 	asrlt.w	r2, r0, r2
 8014afa:	189b      	addlt	r3, r3, r2
 8014afc:	ea23 0301 	bic.w	r3, r3, r1
 8014b00:	e7e5      	b.n	8014ace <floorf+0x36>
 8014b02:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8014b06:	d3e4      	bcc.n	8014ad2 <floorf+0x3a>
 8014b08:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014b0c:	4770      	bx	lr
 8014b0e:	2300      	movs	r3, #0
 8014b10:	e7dd      	b.n	8014ace <floorf+0x36>
 8014b12:	bf00      	nop
 8014b14:	7149f2ca 	.word	0x7149f2ca
 8014b18:	bf800000 	.word	0xbf800000
 8014b1c:	007fffff 	.word	0x007fffff

08014b20 <_init>:
 8014b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b22:	bf00      	nop
 8014b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b26:	bc08      	pop	{r3}
 8014b28:	469e      	mov	lr, r3
 8014b2a:	4770      	bx	lr

08014b2c <_fini>:
 8014b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b2e:	bf00      	nop
 8014b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b32:	bc08      	pop	{r3}
 8014b34:	469e      	mov	lr, r3
 8014b36:	4770      	bx	lr
