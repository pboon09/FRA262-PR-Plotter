
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c044  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800c21c  0800c21c  0000d21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c67c  0800c67c  0000e1b8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c67c  0800c67c  0000d67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c684  0800c684  0000e1b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c684  0800c684  0000d684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c688  0800c688  0000d688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b8  20000000  0800c68c  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a4c  200001b8  0800c844  0000e1b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c04  0800c844  0000ec04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029382  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d78  00000000  00000000  0003756a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  0003c2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a9  00000000  00000000  0003dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c9cd  00000000  00000000  0003f229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027614  00000000  00000000  0006bbf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00118ba6  00000000  00000000  0009320a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001abdb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000769c  00000000  00000000  001abdf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001b3490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001b8 	.word	0x200001b8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c204 	.word	0x0800c204

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001bc 	.word	0x200001bc
 8000214:	0800c204 	.word	0x0800c204

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2uiz>:
 80009b4:	004a      	lsls	r2, r1, #1
 80009b6:	d211      	bcs.n	80009dc <__aeabi_d2uiz+0x28>
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d211      	bcs.n	80009e2 <__aeabi_d2uiz+0x2e>
 80009be:	d50d      	bpl.n	80009dc <__aeabi_d2uiz+0x28>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d40e      	bmi.n	80009e8 <__aeabi_d2uiz+0x34>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	fa23 f002 	lsr.w	r0, r3, r2
 80009da:	4770      	bx	lr
 80009dc:	f04f 0000 	mov.w	r0, #0
 80009e0:	4770      	bx	lr
 80009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009e6:	d102      	bne.n	80009ee <__aeabi_d2uiz+0x3a>
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	4770      	bx	lr
 80009ee:	f04f 0000 	mov.w	r0, #0
 80009f2:	4770      	bx	lr

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b988 	b.w	8000dbc <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	468e      	mov	lr, r1
 8000acc:	4604      	mov	r4, r0
 8000ace:	4688      	mov	r8, r1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d14a      	bne.n	8000b6a <__udivmoddi4+0xa6>
 8000ad4:	428a      	cmp	r2, r1
 8000ad6:	4617      	mov	r7, r2
 8000ad8:	d962      	bls.n	8000ba0 <__udivmoddi4+0xdc>
 8000ada:	fab2 f682 	clz	r6, r2
 8000ade:	b14e      	cbz	r6, 8000af4 <__udivmoddi4+0x30>
 8000ae0:	f1c6 0320 	rsb	r3, r6, #32
 8000ae4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ae8:	fa20 f303 	lsr.w	r3, r0, r3
 8000aec:	40b7      	lsls	r7, r6
 8000aee:	ea43 0808 	orr.w	r8, r3, r8
 8000af2:	40b4      	lsls	r4, r6
 8000af4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000af8:	fa1f fc87 	uxth.w	ip, r7
 8000afc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000b00:	0c23      	lsrs	r3, r4, #16
 8000b02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000b06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000b0e:	429a      	cmp	r2, r3
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0x62>
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000b18:	f080 80ea 	bcs.w	8000cf0 <__udivmoddi4+0x22c>
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	f240 80e7 	bls.w	8000cf0 <__udivmoddi4+0x22c>
 8000b22:	3902      	subs	r1, #2
 8000b24:	443b      	add	r3, r7
 8000b26:	1a9a      	subs	r2, r3, r2
 8000b28:	b2a3      	uxth	r3, r4
 8000b2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b3a:	459c      	cmp	ip, r3
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0x8e>
 8000b3e:	18fb      	adds	r3, r7, r3
 8000b40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b44:	f080 80d6 	bcs.w	8000cf4 <__udivmoddi4+0x230>
 8000b48:	459c      	cmp	ip, r3
 8000b4a:	f240 80d3 	bls.w	8000cf4 <__udivmoddi4+0x230>
 8000b4e:	443b      	add	r3, r7
 8000b50:	3802      	subs	r0, #2
 8000b52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b56:	eba3 030c 	sub.w	r3, r3, ip
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	b11d      	cbz	r5, 8000b66 <__udivmoddi4+0xa2>
 8000b5e:	40f3      	lsrs	r3, r6
 8000b60:	2200      	movs	r2, #0
 8000b62:	e9c5 3200 	strd	r3, r2, [r5]
 8000b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d905      	bls.n	8000b7a <__udivmoddi4+0xb6>
 8000b6e:	b10d      	cbz	r5, 8000b74 <__udivmoddi4+0xb0>
 8000b70:	e9c5 0100 	strd	r0, r1, [r5]
 8000b74:	2100      	movs	r1, #0
 8000b76:	4608      	mov	r0, r1
 8000b78:	e7f5      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000b7a:	fab3 f183 	clz	r1, r3
 8000b7e:	2900      	cmp	r1, #0
 8000b80:	d146      	bne.n	8000c10 <__udivmoddi4+0x14c>
 8000b82:	4573      	cmp	r3, lr
 8000b84:	d302      	bcc.n	8000b8c <__udivmoddi4+0xc8>
 8000b86:	4282      	cmp	r2, r0
 8000b88:	f200 8105 	bhi.w	8000d96 <__udivmoddi4+0x2d2>
 8000b8c:	1a84      	subs	r4, r0, r2
 8000b8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b92:	2001      	movs	r0, #1
 8000b94:	4690      	mov	r8, r2
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d0e5      	beq.n	8000b66 <__udivmoddi4+0xa2>
 8000b9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000b9e:	e7e2      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000ba0:	2a00      	cmp	r2, #0
 8000ba2:	f000 8090 	beq.w	8000cc6 <__udivmoddi4+0x202>
 8000ba6:	fab2 f682 	clz	r6, r2
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	f040 80a4 	bne.w	8000cf8 <__udivmoddi4+0x234>
 8000bb0:	1a8a      	subs	r2, r1, r2
 8000bb2:	0c03      	lsrs	r3, r0, #16
 8000bb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bb8:	b280      	uxth	r0, r0
 8000bba:	b2bc      	uxth	r4, r7
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000bc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bca:	fb04 f20c 	mul.w	r2, r4, ip
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x11e>
 8000bd2:	18fb      	adds	r3, r7, r3
 8000bd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x11c>
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	f200 80e0 	bhi.w	8000da0 <__udivmoddi4+0x2dc>
 8000be0:	46c4      	mov	ip, r8
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000be8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bf0:	fb02 f404 	mul.w	r4, r2, r4
 8000bf4:	429c      	cmp	r4, r3
 8000bf6:	d907      	bls.n	8000c08 <__udivmoddi4+0x144>
 8000bf8:	18fb      	adds	r3, r7, r3
 8000bfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x142>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f200 80ca 	bhi.w	8000d9a <__udivmoddi4+0x2d6>
 8000c06:	4602      	mov	r2, r0
 8000c08:	1b1b      	subs	r3, r3, r4
 8000c0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000c0e:	e7a5      	b.n	8000b5c <__udivmoddi4+0x98>
 8000c10:	f1c1 0620 	rsb	r6, r1, #32
 8000c14:	408b      	lsls	r3, r1
 8000c16:	fa22 f706 	lsr.w	r7, r2, r6
 8000c1a:	431f      	orrs	r7, r3
 8000c1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000c20:	fa20 f306 	lsr.w	r3, r0, r6
 8000c24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c2c:	4323      	orrs	r3, r4
 8000c2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c32:	fa1f fc87 	uxth.w	ip, r7
 8000c36:	fbbe f0f9 	udiv	r0, lr, r9
 8000c3a:	0c1c      	lsrs	r4, r3, #16
 8000c3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c48:	45a6      	cmp	lr, r4
 8000c4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x1a0>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c56:	f080 809c 	bcs.w	8000d92 <__udivmoddi4+0x2ce>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8099 	bls.w	8000d92 <__udivmoddi4+0x2ce>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 040e 	sub.w	r4, r4, lr
 8000c68:	fa1f fe83 	uxth.w	lr, r3
 8000c6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c70:	fb09 4413 	mls	r4, r9, r3, r4
 8000c74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7c:	45a4      	cmp	ip, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x1ce>
 8000c80:	193c      	adds	r4, r7, r4
 8000c82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c86:	f080 8082 	bcs.w	8000d8e <__udivmoddi4+0x2ca>
 8000c8a:	45a4      	cmp	ip, r4
 8000c8c:	d97f      	bls.n	8000d8e <__udivmoddi4+0x2ca>
 8000c8e:	3b02      	subs	r3, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c9e:	4564      	cmp	r4, ip
 8000ca0:	4673      	mov	r3, lr
 8000ca2:	46e1      	mov	r9, ip
 8000ca4:	d362      	bcc.n	8000d6c <__udivmoddi4+0x2a8>
 8000ca6:	d05f      	beq.n	8000d68 <__udivmoddi4+0x2a4>
 8000ca8:	b15d      	cbz	r5, 8000cc2 <__udivmoddi4+0x1fe>
 8000caa:	ebb8 0203 	subs.w	r2, r8, r3
 8000cae:	eb64 0409 	sbc.w	r4, r4, r9
 8000cb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000cba:	431e      	orrs	r6, r3
 8000cbc:	40cc      	lsrs	r4, r1
 8000cbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	e74f      	b.n	8000b66 <__udivmoddi4+0xa2>
 8000cc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000cca:	0c01      	lsrs	r1, r0, #16
 8000ccc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000cd0:	b280      	uxth	r0, r0
 8000cd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	4638      	mov	r0, r7
 8000cda:	463c      	mov	r4, r7
 8000cdc:	46b8      	mov	r8, r7
 8000cde:	46be      	mov	lr, r7
 8000ce0:	2620      	movs	r6, #32
 8000ce2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ce6:	eba2 0208 	sub.w	r2, r2, r8
 8000cea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cee:	e766      	b.n	8000bbe <__udivmoddi4+0xfa>
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	e718      	b.n	8000b26 <__udivmoddi4+0x62>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	e72c      	b.n	8000b52 <__udivmoddi4+0x8e>
 8000cf8:	f1c6 0220 	rsb	r2, r6, #32
 8000cfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	40b1      	lsls	r1, r6
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d12:	b2bc      	uxth	r4, r7
 8000d14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d18:	0c11      	lsrs	r1, r2, #16
 8000d1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d1e:	fb08 f904 	mul.w	r9, r8, r4
 8000d22:	40b0      	lsls	r0, r6
 8000d24:	4589      	cmp	r9, r1
 8000d26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d2a:	b280      	uxth	r0, r0
 8000d2c:	d93e      	bls.n	8000dac <__udivmoddi4+0x2e8>
 8000d2e:	1879      	adds	r1, r7, r1
 8000d30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d34:	d201      	bcs.n	8000d3a <__udivmoddi4+0x276>
 8000d36:	4589      	cmp	r9, r1
 8000d38:	d81f      	bhi.n	8000d7a <__udivmoddi4+0x2b6>
 8000d3a:	eba1 0109 	sub.w	r1, r1, r9
 8000d3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d42:	fb09 f804 	mul.w	r8, r9, r4
 8000d46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d4a:	b292      	uxth	r2, r2
 8000d4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d50:	4542      	cmp	r2, r8
 8000d52:	d229      	bcs.n	8000da8 <__udivmoddi4+0x2e4>
 8000d54:	18ba      	adds	r2, r7, r2
 8000d56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d5a:	d2c4      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d5c:	4542      	cmp	r2, r8
 8000d5e:	d2c2      	bcs.n	8000ce6 <__udivmoddi4+0x222>
 8000d60:	f1a9 0102 	sub.w	r1, r9, #2
 8000d64:	443a      	add	r2, r7
 8000d66:	e7be      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000d68:	45f0      	cmp	r8, lr
 8000d6a:	d29d      	bcs.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000d70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d74:	3801      	subs	r0, #1
 8000d76:	46e1      	mov	r9, ip
 8000d78:	e796      	b.n	8000ca8 <__udivmoddi4+0x1e4>
 8000d7a:	eba7 0909 	sub.w	r9, r7, r9
 8000d7e:	4449      	add	r1, r9
 8000d80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d88:	fb09 f804 	mul.w	r8, r9, r4
 8000d8c:	e7db      	b.n	8000d46 <__udivmoddi4+0x282>
 8000d8e:	4673      	mov	r3, lr
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1ce>
 8000d92:	4650      	mov	r0, sl
 8000d94:	e766      	b.n	8000c64 <__udivmoddi4+0x1a0>
 8000d96:	4608      	mov	r0, r1
 8000d98:	e6fd      	b.n	8000b96 <__udivmoddi4+0xd2>
 8000d9a:	443b      	add	r3, r7
 8000d9c:	3a02      	subs	r2, #2
 8000d9e:	e733      	b.n	8000c08 <__udivmoddi4+0x144>
 8000da0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	e71c      	b.n	8000be2 <__udivmoddi4+0x11e>
 8000da8:	4649      	mov	r1, r9
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x222>
 8000dac:	eba1 0109 	sub.w	r1, r1, r9
 8000db0:	46c4      	mov	ip, r8
 8000db2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000db6:	fb09 f804 	mul.w	r8, r9, r4
 8000dba:	e7c4      	b.n	8000d46 <__udivmoddi4+0x282>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000dc0:	b480      	push	{r7}
 8000dc2:	b089      	sub	sp, #36	@ 0x24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6178      	str	r0, [r7, #20]
 8000dc8:	6139      	str	r1, [r7, #16]
 8000dca:	60fa      	str	r2, [r7, #12]
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dd2:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000dee:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	615a      	str	r2, [r3, #20]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e008      	b.n	8000e14 <ADC_DMA_Init+0x54>
        buffer[i] = 0;
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	68fa      	ldr	r2, [r7, #12]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3301      	adds	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	69fa      	ldr	r2, [r7, #28]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d3f2      	bcc.n	8000e02 <ADC_DMA_Init+0x42>
    }
}
 8000e1c:	bf00      	nop
 8000e1e:	bf00      	nop
 8000e20:	3724      	adds	r7, #36	@ 0x24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	217f      	movs	r1, #127	@ 0x7f
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f004 fc7d 	bl	8005738 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6818      	ldr	r0, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6859      	ldr	r1, [r3, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	f003 fd66 	bl	800491c <HAL_ADC_Start_DMA>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e62:	60b8      	str	r0, [r7, #8]
 8000e64:	6079      	str	r1, [r7, #4]
  if (_u > _upper_limit) return _upper_limit;
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	ee07 3a90 	vmov	s15, r3
 8000e6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e70:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	dd01      	ble.n	8000e82 <PWM_Satuation+0x2a>
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	e013      	b.n	8000eaa <PWM_Satuation+0x52>
  else if (_u < _lower_limit) return _lower_limit;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	ee07 3a90 	vmov	s15, r3
 8000e88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e98:	d501      	bpl.n	8000e9e <PWM_Satuation+0x46>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	e005      	b.n	8000eaa <PWM_Satuation+0x52>
  return (int32_t)_u;
 8000e9e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ea2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ea6:	ee17 3a90 	vmov	r3, s15
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000eb6:	b480      	push	{r7}
 8000eb8:	b087      	sub	sp, #28
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6178      	str	r0, [r7, #20]
 8000ebe:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ec2:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ec6:	ed87 1a02 	vstr	s2, [r7, #8]
 8000eca:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f04f 0200 	mov.w	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f04f 0200 	mov.w	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]

}
 8000efe:	bf00      	nop
 8000f00:	371c      	adds	r7, #28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	ed87 0a00 	vstr	s0, [r7]
    if (!((controller->u >= controller->u_max && ek > 0) || (controller->u <= -controller->u_max && ek < 0))) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f22:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2a:	bfac      	ite	ge
 8000f2c:	2301      	movge	r3, #1
 8000f2e:	2300      	movlt	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	f083 0301 	eor.w	r3, r3, #1
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10e      	bne.n	8000f5a <PID_CONTROLLER_Compute+0x50>
 8000f3c:	edd7 7a00 	vldr	s15, [r7]
 8000f40:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f48:	bfcc      	ite	gt
 8000f4a:	2301      	movgt	r3, #1
 8000f4c:	2300      	movle	r3, #0
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f083 0301 	eor.w	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d057      	beq.n	800100a <PID_CONTROLLER_Compute+0x100>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	ed93 7a06 	vldr	s14, [r3, #24]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f66:	eef1 7a67 	vneg.f32	s15, s15
 8000f6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	bf94      	ite	ls
 8000f74:	2301      	movls	r3, #1
 8000f76:	2300      	movhi	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	f083 0301 	eor.w	r3, r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d10e      	bne.n	8000fa2 <PID_CONTROLLER_Compute+0x98>
 8000f84:	edd7 7a00 	vldr	s15, [r7]
 8000f88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f90:	bf4c      	ite	mi
 8000f92:	2301      	movmi	r3, #1
 8000f94:	2300      	movpl	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f083 0301 	eor.w	r3, r3, #1
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d033      	beq.n	800100a <PID_CONTROLLER_Compute+0x100>
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	ed93 7a06 	vldr	s14, [r3, #24]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	edd3 6a00 	vldr	s13, [r3]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fb4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fbe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000fc2:	edd7 7a00 	vldr	s15, [r7]
 8000fc6:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         - ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	ed93 6a00 	vldr	s12, [r3]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000fda:	ee36 6a27 	vadd.f32	s12, s12, s15
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fe4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000fe8:	ee76 6ae7 	vsub.f32	s13, s13, s15
                         + (controller->Kd * controller->ek_2);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	ed93 6a02 	vldr	s12, [r3, #8]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ff8:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000ffc:	ee76 7aa7 	vadd.f32	s15, s13, s15
        controller->u += ((controller->Kp + controller->Ki + controller->Kd) * ek)
 8001000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	edc3 7a06 	vstr	s15, [r3, #24]
    }
    controller->ek_2 = controller->ek_1;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	691a      	ldr	r2, [r3, #16]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	615a      	str	r2, [r3, #20]
    controller->ek_1 = ek;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	683a      	ldr	r2, [r7, #0]
 8001016:	611a      	str	r2, [r3, #16]
    return controller->u;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	ee07 3a90 	vmov	s15, r3
}
 8001020:	eeb0 0a67 	vmov.f32	s0, s15
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr

0800102e <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800102e:	b580      	push	{r7, lr}
 8001030:	b084      	sub	sp, #16
 8001032:	af00      	add	r7, sp, #0
 8001034:	60f8      	str	r0, [r7, #12]
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4613      	mov	r3, r2
 800103c:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	68ba      	ldr	r2, [r7, #8]
 8001042:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	88fa      	ldrh	r2, [r7, #6]
 8001048:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3328      	adds	r3, #40	@ 0x28
 800104e:	88fa      	ldrh	r2, [r7, #6]
 8001050:	68b9      	ldr	r1, [r7, #8]
 8001052:	4618      	mov	r0, r3
 8001054:	f000 fb4c 	bl	80016f0 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	8b3a      	ldrh	r2, [r7, #24]
 8001062:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2201      	movs	r2, #1
 800106a:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	ed87 0a02 	vstr	s0, [r7, #8]
 8001084:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800108e:	2b00      	cmp	r3, #0
 8001090:	d15f      	bne.n	8001152 <MDXX_set_range+0xda>
		if (duty == 0) {
 8001092:	edd7 7a01 	vldr	s15, [r7, #4]
 8001096:	eef5 7a40 	vcmp.f32	s15, #0.0
 800109a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109e:	d115      	bne.n	80010cc <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	3310      	adds	r3, #16
 80010a4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001224 <MDXX_set_range+0x1ac>
 80010a8:	ed97 0a02 	vldr	s0, [r7, #8]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fc47 	bl	8001940 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	3328      	adds	r3, #40	@ 0x28
 80010b6:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001224 <MDXX_set_range+0x1ac>
 80010ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 fc3e 	bl	8001940 <PWM_write_range>
			mdxx->cmd = 0;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	2200      	movs	r2, #0
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 80010ca:	e0a6      	b.n	800121a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80010cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d8:	dd1a      	ble.n	8001110 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3310      	adds	r3, #16
 80010de:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001224 <MDXX_set_range+0x1ac>
 80010e2:	ed97 0a02 	vldr	s0, [r7, #8]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f000 fc2a 	bl	8001940 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	3328      	adds	r3, #40	@ 0x28
 80010f0:	edd7 0a01 	vldr	s1, [r7, #4]
 80010f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f000 fc21 	bl	8001940 <PWM_write_range>
			mdxx->cmd = duty;
 80010fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8001102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001106:	ee17 2a90 	vmov	r2, s15
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800110e:	e084      	b.n	800121a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	3310      	adds	r3, #16
 8001114:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001228 <MDXX_set_range+0x1b0>
 8001118:	ed97 0a02 	vldr	s0, [r7, #8]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fc0f 	bl	8001940 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	3328      	adds	r3, #40	@ 0x28
 8001126:	edd7 7a01 	vldr	s15, [r7, #4]
 800112a:	eef0 7ae7 	vabs.f32	s15, s15
 800112e:	eef0 0a67 	vmov.f32	s1, s15
 8001132:	ed97 0a02 	vldr	s0, [r7, #8]
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fc02 	bl	8001940 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800113c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001140:	eef0 7ae7 	vabs.f32	s15, s15
 8001144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001148:	ee17 2a90 	vmov	r2, s15
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001150:	e063      	b.n	800121a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001158:	2b01      	cmp	r3, #1
 800115a:	d15e      	bne.n	800121a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 800115c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001160:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001168:	d115      	bne.n	8001196 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001174:	2200      	movs	r2, #0
 8001176:	4619      	mov	r1, r3
 8001178:	f005 fa24 	bl	80065c4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3328      	adds	r3, #40	@ 0x28
 8001180:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001224 <MDXX_set_range+0x1ac>
 8001184:	ed97 0a02 	vldr	s0, [r7, #8]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 fbd9 	bl	8001940 <PWM_write_range>
			mdxx->cmd = 0;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001194:	e041      	b.n	800121a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001196:	edd7 7a01 	vldr	s15, [r7, #4]
 800119a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800119e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a2:	dd1a      	ble.n	80011da <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80011ae:	2200      	movs	r2, #0
 80011b0:	4619      	mov	r1, r3
 80011b2:	f005 fa07 	bl	80065c4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3328      	adds	r3, #40	@ 0x28
 80011ba:	edd7 0a01 	vldr	s1, [r7, #4]
 80011be:	ed97 0a02 	vldr	s0, [r7, #8]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 fbbc 	bl	8001940 <PWM_write_range>
			mdxx->cmd = duty;
 80011c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80011cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011d0:	ee17 2a90 	vmov	r2, s15
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80011d8:	e01f      	b.n	800121a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80011e4:	2201      	movs	r2, #1
 80011e6:	4619      	mov	r1, r3
 80011e8:	f005 f9ec 	bl	80065c4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3328      	adds	r3, #40	@ 0x28
 80011f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f4:	eef0 7ae7 	vabs.f32	s15, s15
 80011f8:	eef0 0a67 	vmov.f32	s1, s15
 80011fc:	ed97 0a02 	vldr	s0, [r7, #8]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fb9d 	bl	8001940 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001206:	edd7 7a01 	vldr	s15, [r7, #4]
 800120a:	eef0 7ae7 	vabs.f32	s15, s15
 800120e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001212:	ee17 2a90 	vmov	r2, s15
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	00000000 	.word	0x00000000
 8001228:	42c80000 	.word	0x42c80000

0800122c <REVOLUTE_MOTOR_FFD_Init>:
    .slide_rail_mass = 1893.96e-3, // kg
    .c = 64.83e-3,           // m
    .prismatic_pulley = 1.5915e-2 // m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	601a      	str	r2, [r3, #0]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <REVOLUTE_MOTOR_DFD_Init>:
    float v = qd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	68ba      	ldr	r2, [r7, #8]
 8001258:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	605a      	str	r2, [r3, #4]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <PRISMATIC_MOTOR_FFD_Init>:
    float v = (gravity_compensate_plotter + gravity_compensate_rail + mass_torque) * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	601a      	str	r2, [r3, #0]
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	605a      	str	r2, [r3, #4]
}
 80012a0:	bf00      	nop
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	ed2d 8b02 	vpush	{d8}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	460b      	mov	r3, r1
 80012ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80012be:	edc7 0a00 	vstr	s1, [r7]
 80012c2:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80012c4:	897b      	ldrh	r3, [r7, #10]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <FIR_init+0x2a>
        numTaps += 1;
 80012d0:	897b      	ldrh	r3, [r7, #10]
 80012d2:	3301      	adds	r3, #1
 80012d4:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	897a      	ldrh	r2, [r7, #10]
 80012da:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2200      	movs	r2, #0
 80012e0:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80012e2:	897b      	ldrh	r3, [r7, #10]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f00a f8fc 	bl	800b4e4 <malloc>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 80012f4:	897b      	ldrh	r3, [r7, #10]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00a f8f3 	bl	800b4e4 <malloc>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	f000 80e0 	beq.w	80014d0 <FIR_init+0x224>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80db 	beq.w	80014d0 <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 800131a:	2300      	movs	r3, #0
 800131c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800131e:	e00a      	b.n	8001336 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001330:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001332:	3301      	adds	r3, #1
 8001334:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001336:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001338:	897b      	ldrh	r3, [r7, #10]
 800133a:	429a      	cmp	r2, r3
 800133c:	d3f0      	bcc.n	8001320 <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 800133e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001342:	ed97 7a00 	vldr	s14, [r7]
 8001346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134a:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 800134e:	897b      	ldrh	r3, [r7, #10]
 8001350:	085b      	lsrs	r3, r3, #1
 8001352:	b29b      	uxth	r3, r3
 8001354:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001356:	2300      	movs	r3, #0
 8001358:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800135a:	e077      	b.n	800144c <FIR_init+0x1a0>
            if (i == half_taps) {
 800135c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001360:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001364:	429a      	cmp	r2, r3
 8001366:	d10c      	bne.n	8001382 <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	edd7 7a06 	vldr	s15, [r7, #24]
 8001378:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800137c:	edc3 7a00 	vstr	s15, [r3]
 8001380:	e02c      	b.n	80013dc <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 8001382:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001384:	8afb      	ldrh	r3, [r7, #22]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	b29b      	uxth	r3, r3
 800138a:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 800138c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001390:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80014dc <FIR_init+0x230>
 8001394:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001398:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	f00a f9f6 	bl	800b79c <sinf>
 80013b0:	eef0 6a40 	vmov.f32	s13, s0
 80013b4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013b8:	ee07 3a90 	vmov	s15, r3
 80013bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c0:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80014e0 <FIR_init+0x234>
 80013c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d8:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	ed93 8a00 	vldr	s16, [r3]
 80013ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80014dc <FIR_init+0x230>
 80013fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001400:	897b      	ldrh	r3, [r7, #10]
 8001402:	3b01      	subs	r3, #1
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800140c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001410:	eeb0 0a66 	vmov.f32	s0, s13
 8001414:	f00a f97e 	bl	800b714 <cosf>
 8001418:	eef0 7a40 	vmov.f32	s15, s0
 800141c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80014e4 <FIR_init+0x238>
 8001420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001424:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80014e8 <FIR_init+0x23c>
 8001428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	ee68 7a27 	vmul.f32	s15, s16, s15
 800143c:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 8001440:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001444:	b29b      	uxth	r3, r3
 8001446:	3301      	adds	r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800144c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001450:	897b      	ldrh	r3, [r7, #10]
 8001452:	429a      	cmp	r2, r3
 8001454:	db82      	blt.n	800135c <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 800145c:	2300      	movs	r3, #0
 800145e:	83fb      	strh	r3, [r7, #30]
 8001460:	e00f      	b.n	8001482 <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	8bfb      	ldrh	r3, [r7, #30]
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	4413      	add	r3, r2
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	ed97 7a08 	vldr	s14, [r7, #32]
 8001474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001478:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 800147c:	8bfb      	ldrh	r3, [r7, #30]
 800147e:	3301      	adds	r3, #1
 8001480:	83fb      	strh	r3, [r7, #30]
 8001482:	8bfa      	ldrh	r2, [r7, #30]
 8001484:	897b      	ldrh	r3, [r7, #10]
 8001486:	429a      	cmp	r2, r3
 8001488:	d3eb      	bcc.n	8001462 <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 800148a:	edd7 7a08 	vldr	s15, [r7, #32]
 800148e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	d01b      	beq.n	80014d0 <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	83bb      	strh	r3, [r7, #28]
 800149c:	e014      	b.n	80014c8 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	8bbb      	ldrh	r3, [r7, #28]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	edd3 6a00 	vldr	s13, [r3]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	8bbb      	ldrh	r3, [r7, #28]
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	4413      	add	r3, r2
 80014b6:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014be:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80014c2:	8bbb      	ldrh	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	83bb      	strh	r3, [r7, #28]
 80014c8:	8bba      	ldrh	r2, [r7, #28]
 80014ca:	897b      	ldrh	r3, [r7, #10]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d3e6      	bcc.n	800149e <FIR_init+0x1f2>
            }
        }
    }
}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	ecbd 8b02 	vpop	{d8}
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40c90fdb 	.word	0x40c90fdb
 80014e0:	40490fdb 	.word	0x40490fdb
 80014e4:	3eeb851f 	.word	0x3eeb851f
 80014e8:	3f0a3d71 	.word	0x3f0a3d71

080014ec <FIR_process>:

float FIR_process(FIR *fir, float input) {
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	ed87 0a00 	vstr	s0, [r7]
    // Update circular buffer with new input
    fir->buffer[fir->bufferIndex] = input;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	895b      	ldrh	r3, [r3, #10]
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	601a      	str	r2, [r3, #0]

    // Compute output (convolution)
    float output = 0.0f;
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
    uint16_t index = fir->bufferIndex;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	895b      	ldrh	r3, [r3, #10]
 8001512:	817b      	strh	r3, [r7, #10]

    for (uint16_t i = 0; i < fir->numTaps; i++) {
 8001514:	2300      	movs	r3, #0
 8001516:	813b      	strh	r3, [r7, #8]
 8001518:	e023      	b.n	8001562 <FIR_process+0x76>
        output += fir->buffer[index] * fir->coeffs[i];
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	897b      	ldrh	r3, [r7, #10]
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	ed93 7a00 	vldr	s14, [r3]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	893b      	ldrh	r3, [r7, #8]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153a:	ed97 7a03 	vldr	s14, [r7, #12]
 800153e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001542:	edc7 7a03 	vstr	s15, [r7, #12]

        // Move back in circular buffer
        if (index == 0) {
 8001546:	897b      	ldrh	r3, [r7, #10]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d104      	bne.n	8001556 <FIR_process+0x6a>
            index = fir->numTaps - 1;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	891b      	ldrh	r3, [r3, #8]
 8001550:	3b01      	subs	r3, #1
 8001552:	817b      	strh	r3, [r7, #10]
 8001554:	e002      	b.n	800155c <FIR_process+0x70>
        } else {
            index--;
 8001556:	897b      	ldrh	r3, [r7, #10]
 8001558:	3b01      	subs	r3, #1
 800155a:	817b      	strh	r3, [r7, #10]
    for (uint16_t i = 0; i < fir->numTaps; i++) {
 800155c:	893b      	ldrh	r3, [r7, #8]
 800155e:	3301      	adds	r3, #1
 8001560:	813b      	strh	r3, [r7, #8]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	891b      	ldrh	r3, [r3, #8]
 8001566:	893a      	ldrh	r2, [r7, #8]
 8001568:	429a      	cmp	r2, r3
 800156a:	d3d6      	bcc.n	800151a <FIR_process+0x2e>
        }
    }

    // Update buffer index for next input
    fir->bufferIndex++;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	895b      	ldrh	r3, [r3, #10]
 8001570:	3301      	adds	r3, #1
 8001572:	b29a      	uxth	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	815a      	strh	r2, [r3, #10]
    if (fir->bufferIndex >= fir->numTaps) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	895a      	ldrh	r2, [r3, #10]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	891b      	ldrh	r3, [r3, #8]
 8001580:	429a      	cmp	r2, r3
 8001582:	d302      	bcc.n	800158a <FIR_process+0x9e>
        fir->bufferIndex = 0;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	815a      	strh	r2, [r3, #10]
    }

    return output;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	ee07 3a90 	vmov	s15, r3
}
 8001590:	eeb0 0a67 	vmov.f32	s0, s15
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
	...

080015a0 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 80015a4:	4b0d      	ldr	r3, [pc, #52]	@ (80015dc <modbus_1t5_Timeout+0x3c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2201      	movs	r2, #1
 80015aa:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <modbus_1t5_Timeout+0x3c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <modbus_1t5_Timeout+0x3c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <modbus_1t5_Timeout+0x3c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	200001d4 	.word	0x200001d4

080015e0 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 80015e8:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <modbus_3t5_Timeout+0x1c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2201      	movs	r2, #1
 80015ee:	755a      	strb	r2, [r3, #21]

}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr
 80015fc:	200001d4 	.word	0x200001d4

08001600 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f008 fe8f 	bl	800a32c <HAL_UART_GetError>
 800160e:	4603      	mov	r3, r0
 8001610:	2b20      	cmp	r3, #32
 8001612:	d101      	bne.n	8001618 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001614:	f7ff ffc4 	bl	80015a0 <modbus_1t5_Timeout>

	}
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 800162e:	4a2d      	ldr	r2, [pc, #180]	@ (80016e4 <Modbus_init+0xc4>)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001634:	4b2b      	ldr	r3, [pc, #172]	@ (80016e4 <Modbus_init+0xc4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68ba      	ldr	r2, [r7, #8]
 800163a:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 800163c:	4b29      	ldr	r3, [pc, #164]	@ (80016e4 <Modbus_init+0xc4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	687a      	ldr	r2, [r7, #4]
 8001642:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001644:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <Modbus_init+0xc4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	683a      	ldr	r2, [r7, #0]
 800164a:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 800164c:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <Modbus_init+0xc4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	7e3a      	ldrb	r2, [r7, #24]
 8001652:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001654:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <Modbus_init+0xc4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	4a21      	ldr	r2, [pc, #132]	@ (80016e8 <Modbus_init+0xc8>)
 8001662:	210e      	movs	r1, #14
 8001664:	4618      	mov	r0, r3
 8001666:	f007 f90f 	bl	8008888 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2110      	movs	r1, #16
 8001670:	4618      	mov	r0, r3
 8001672:	f008 fe05 	bl	800a280 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	4618      	mov	r0, r3
 800167c:	f008 fe1c 	bl	800a2b8 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	4a19      	ldr	r2, [pc, #100]	@ (80016ec <Modbus_init+0xcc>)
 8001686:	2104      	movs	r1, #4
 8001688:	4618      	mov	r0, r3
 800168a:	f008 f94d 	bl	8009928 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <Modbus_init+0xc4>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001694:	4b13      	ldr	r3, [pc, #76]	@ (80016e4 <Modbus_init+0xc4>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b12      	ldr	r3, [pc, #72]	@ (80016e4 <Modbus_init+0xc4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80016a0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80016a4:	4413      	add	r3, r2
 80016a6:	3302      	adds	r3, #2
 80016a8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016ac:	4619      	mov	r1, r3
 80016ae:	f008 f9f5 	bl	8009a9c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80016b2:	4b0c      	ldr	r3, [pc, #48]	@ (80016e4 <Modbus_init+0xc4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d10c      	bne.n	80016dc <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 80016c2:	4b08      	ldr	r3, [pc, #32]	@ (80016e4 <Modbus_init+0xc4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f006 f8af 	bl	800782c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 80016ce:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <Modbus_init+0xc4>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f006 fb08 	bl	8007cec <HAL_TIM_OnePulse_Start_IT>
    	}

}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200001d4 	.word	0x200001d4
 80016e8:	080015e1 	.word	0x080015e1
 80016ec:	08001601 	.word	0x08001601

080016f0 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	4613      	mov	r3, r2
 80016fc:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4a0b      	ldr	r2, [pc, #44]	@ (8001730 <PWM_init+0x40>)
 8001702:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	88fa      	ldrh	r2, [r7, #6]
 800170e:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 8001716:	68b8      	ldr	r0, [r7, #8]
 8001718:	f006 f818 	bl	800774c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 800171c:	88fb      	ldrh	r3, [r7, #6]
 800171e:	4619      	mov	r1, r3
 8001720:	68b8      	ldr	r0, [r7, #8]
 8001722:	f006 f969 	bl	80079f8 <HAL_TIM_PWM_Start>
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	0a21fe80 	.word	0x0a21fe80

08001734 <PWM_write_duty>:

void PWM_write_duty(PWM* pwm, float freq, float percent_duty){
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001740:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001744:	edd7 7a02 	vldr	s15, [r7, #8]
 8001748:	eef5 7a40 	vcmp.f32	s15, #0.0
 800174c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001750:	d137      	bne.n	80017c2 <PWM_write_duty+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	889b      	ldrh	r3, [r3, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d105      	bne.n	8001766 <PWM_write_duty+0x32>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001764:	e0e1      	b.n	800192a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	889b      	ldrh	r3, [r3, #4]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d105      	bne.n	800177a <PWM_write_duty+0x46>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2300      	movs	r3, #0
 8001776:	6393      	str	r3, [r2, #56]	@ 0x38
 8001778:	e0d7      	b.n	800192a <PWM_write_duty+0x1f6>
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	889b      	ldrh	r3, [r3, #4]
 800177e:	2b08      	cmp	r3, #8
 8001780:	d105      	bne.n	800178e <PWM_write_duty+0x5a>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2300      	movs	r3, #0
 800178a:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800178c:	e0cd      	b.n	800192a <PWM_write_duty+0x1f6>
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	889b      	ldrh	r3, [r3, #4]
 8001792:	2b0c      	cmp	r3, #12
 8001794:	d105      	bne.n	80017a2 <PWM_write_duty+0x6e>
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2300      	movs	r3, #0
 800179e:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a0:	e0c3      	b.n	800192a <PWM_write_duty+0x1f6>
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	889b      	ldrh	r3, [r3, #4]
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d105      	bne.n	80017b6 <PWM_write_duty+0x82>
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2300      	movs	r3, #0
 80017b2:	6493      	str	r3, [r2, #72]	@ 0x48
 80017b4:	e0b9      	b.n	800192a <PWM_write_duty+0x1f6>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	2300      	movs	r3, #0
 80017be:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80017c0:	e0b3      	b.n	800192a <PWM_write_duty+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80017ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80017d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017da:	ee17 2a90 	vmov	r2, s15
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80017ea:	33fe      	adds	r3, #254	@ 0xfe
 80017ec:	4a51      	ldr	r2, [pc, #324]	@ (8001934 <PWM_write_duty+0x200>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	0bdb      	lsrs	r3, r3, #15
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	899b      	ldrh	r3, [r3, #12]
 800180e:	3301      	adds	r3, #1
 8001810:	ee07 3a90 	vmov	s15, r3
 8001814:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001818:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800181c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001820:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001824:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001828:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	ee17 3a90 	vmov	r3, s15
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(percent_duty) / 100.0);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	89db      	ldrh	r3, [r3, #14]
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe3c 	bl	80004bc <__aeabi_i2d>
 8001844:	4604      	mov	r4, r0
 8001846:	460d      	mov	r5, r1
 8001848:	edd7 7a01 	vldr	s15, [r7, #4]
 800184c:	eef0 7ae7 	vabs.f32	s15, s15
 8001850:	ee17 0a90 	vmov	r0, s15
 8001854:	f7fe fe44 	bl	80004e0 <__aeabi_f2d>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4620      	mov	r0, r4
 800185e:	4629      	mov	r1, r5
 8001860:	f7fe fe96 	bl	8000590 <__aeabi_dmul>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	4b31      	ldr	r3, [pc, #196]	@ (8001938 <PWM_write_duty+0x204>)
 8001872:	f7fe ffb7 	bl	80007e4 <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	f7ff f899 	bl	80009b4 <__aeabi_d2uiz>
 8001882:	4603      	mov	r3, r0
 8001884:	b29b      	uxth	r3, r3
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	899a      	ldrh	r2, [r3, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	89da      	ldrh	r2, [r3, #14]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	89da      	ldrh	r2, [r3, #14]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <PWM_write_duty+0x190>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	6952      	ldr	r2, [r2, #20]
 80018c0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80018c2:	e032      	b.n	800192a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	889b      	ldrh	r3, [r3, #4]
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d106      	bne.n	80018da <PWM_write_duty+0x1a6>
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80018d8:	e027      	b.n	800192a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	889b      	ldrh	r3, [r3, #4]
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d106      	bne.n	80018f0 <PWM_write_duty+0x1bc>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80018ee:	e01c      	b.n	800192a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	889b      	ldrh	r3, [r3, #4]
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	d106      	bne.n	8001906 <PWM_write_duty+0x1d2>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001904:	e011      	b.n	800192a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	889b      	ldrh	r3, [r3, #4]
 800190a:	2b10      	cmp	r3, #16
 800190c:	d106      	bne.n	800191c <PWM_write_duty+0x1e8>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800191a:	e006      	b.n	800192a <PWM_write_duty+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001928:	e7ff      	b.n	800192a <PWM_write_duty+0x1f6>
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bdb0      	pop	{r4, r5, r7, pc}
 8001932:	bf00      	nop
 8001934:	80008001 	.word	0x80008001
 8001938:	40590000 	.word	0x40590000
 800193c:	00000000 	.word	0x00000000

08001940 <PWM_write_range>:

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	ed87 0a02 	vstr	s0, [r7, #8]
 800194c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001950:	edd7 7a02 	vldr	s15, [r7, #8]
 8001954:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	d137      	bne.n	80019ce <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	889b      	ldrh	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d105      	bne.n	8001972 <PWM_write_range+0x32>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2200      	movs	r2, #0
 800196e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001970:	e0e1      	b.n	8001b36 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	889b      	ldrh	r3, [r3, #4]
 8001976:	2b04      	cmp	r3, #4
 8001978:	d105      	bne.n	8001986 <PWM_write_range+0x46>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2300      	movs	r3, #0
 8001982:	6393      	str	r3, [r2, #56]	@ 0x38
 8001984:	e0d7      	b.n	8001b36 <PWM_write_range+0x1f6>
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	889b      	ldrh	r3, [r3, #4]
 800198a:	2b08      	cmp	r3, #8
 800198c:	d105      	bne.n	800199a <PWM_write_range+0x5a>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	2300      	movs	r3, #0
 8001996:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001998:	e0cd      	b.n	8001b36 <PWM_write_range+0x1f6>
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	889b      	ldrh	r3, [r3, #4]
 800199e:	2b0c      	cmp	r3, #12
 80019a0:	d105      	bne.n	80019ae <PWM_write_range+0x6e>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	2300      	movs	r3, #0
 80019aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ac:	e0c3      	b.n	8001b36 <PWM_write_range+0x1f6>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	889b      	ldrh	r3, [r3, #4]
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	d105      	bne.n	80019c2 <PWM_write_range+0x82>
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	6493      	str	r3, [r2, #72]	@ 0x48
 80019c0:	e0b9      	b.n	8001b36 <PWM_write_range+0x1f6>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	2300      	movs	r3, #0
 80019ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80019cc:	e0b3      	b.n	8001b36 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	ee07 3a90 	vmov	s15, r3
 80019d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019da:	ed97 7a02 	vldr	s14, [r7, #8]
 80019de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019e6:	ee17 2a90 	vmov	r2, s15
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80019f6:	33fe      	adds	r3, #254	@ 0xfe
 80019f8:	4a53      	ldr	r2, [pc, #332]	@ (8001b48 <PWM_write_range+0x208>)
 80019fa:	fba2 2303 	umull	r2, r3, r2, r3
 80019fe:	0bdb      	lsrs	r3, r3, #15
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	ee07 3a90 	vmov	s15, r3
 8001a12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	899b      	ldrh	r3, [r3, #12]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a24:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001a28:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001a34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a3c:	ee17 3a90 	vmov	r3, s15
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	89db      	ldrh	r3, [r3, #14]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7fe fd36 	bl	80004bc <__aeabi_i2d>
 8001a50:	4604      	mov	r4, r0
 8001a52:	460d      	mov	r5, r1
 8001a54:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a58:	eef0 7ae7 	vabs.f32	s15, s15
 8001a5c:	ee17 0a90 	vmov	r0, s15
 8001a60:	f7fe fd3e 	bl	80004e0 <__aeabi_f2d>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7fe fd90 	bl	8000590 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	a331      	add	r3, pc, #196	@ (adr r3, 8001b40 <PWM_write_range+0x200>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7fe feb1 	bl	80007e4 <__aeabi_ddiv>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	4610      	mov	r0, r2
 8001a88:	4619      	mov	r1, r3
 8001a8a:	f7fe ff93 	bl	80009b4 <__aeabi_d2uiz>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	899a      	ldrh	r2, [r3, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	89da      	ldrh	r2, [r3, #14]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	89da      	ldrh	r2, [r3, #14]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	889b      	ldrh	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d106      	bne.n	8001ad0 <PWM_write_range+0x190>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	6952      	ldr	r2, [r2, #20]
 8001acc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ace:	e032      	b.n	8001b36 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	889b      	ldrh	r3, [r3, #4]
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d106      	bne.n	8001ae6 <PWM_write_range+0x1a6>
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001ae4:	e027      	b.n	8001b36 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	889b      	ldrh	r3, [r3, #4]
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d106      	bne.n	8001afc <PWM_write_range+0x1bc>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	695b      	ldr	r3, [r3, #20]
 8001af8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001afa:	e01c      	b.n	8001b36 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	889b      	ldrh	r3, [r3, #4]
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	d106      	bne.n	8001b12 <PWM_write_range+0x1d2>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001b10:	e011      	b.n	8001b36 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	889b      	ldrh	r3, [r3, #4]
 8001b16:	2b10      	cmp	r3, #16
 8001b18:	d106      	bne.n	8001b28 <PWM_write_range+0x1e8>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001b26:	e006      	b.n	8001b36 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001b34:	e7ff      	b.n	8001b36 <PWM_write_range+0x1f6>
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	00000000 	.word	0x00000000
 8001b44:	40efffe0 	.word	0x40efffe0
 8001b48:	80008001 	.word	0x80008001

08001b4c <QEI_init>:
* Created on: Mar 30, 2024
* Author: beamk
*/
#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6178      	str	r0, [r7, #20]
 8001b54:	6139      	str	r1, [r7, #16]
 8001b56:	60fa      	str	r2, [r7, #12]
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	ed87 0a01 	vstr	s0, [r7, #4]
    qei->htimx = htimx;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	611a      	str	r2, [r3, #16]
    qei->ppr = ppr;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	619a      	str	r2, [r3, #24]
    qei->freq = freq;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	621a      	str	r2, [r3, #32]
    qei->c[NOW] = 0;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	605a      	str	r2, [r3, #4]
    qei->pps = 0;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = 0;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->enc_period = 65536 - (65536 % ppr);
 8001b94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b98:	68fa      	ldr	r2, [r7, #12]
 8001b9a:	fb93 f2f2 	sdiv	r2, r3, r2
 8001b9e:	68f9      	ldr	r1, [r7, #12]
 8001ba0:	fb01 f202 	mul.w	r2, r1, r2
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	615a      	str	r2, [r3, #20]
    qei->pulses = 0;
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf = 0;
    qei->revs = 0;
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->rads = 0;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->mm = 0;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mmps = 0;
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	645a      	str	r2, [r3, #68]	@ 0x44

    qei->ratio = ratio;  // Gear ratio or scaling factor
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	649a      	str	r2, [r3, #72]	@ 0x48
    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 8001bda:	213c      	movs	r1, #60	@ 0x3c
 8001bdc:	6938      	ldr	r0, [r7, #16]
 8001bde:	f006 f9c7 	bl	8007f70 <HAL_TIM_Encoder_Start>
}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	0000      	movs	r0, r0
 8001bec:	0000      	movs	r0, r0
	...

08001bf0 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 8001bf0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx); // Update the current count
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	601a      	str	r2, [r3, #0]

    // Calculate the difference in counts
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	60fb      	str	r3, [r7, #12]

    //Unwrap
    if (diff_counts > qei->enc_period / 2) {
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	0fda      	lsrs	r2, r3, #31
 8001c18:	4413      	add	r3, r2
 8001c1a:	105b      	asrs	r3, r3, #1
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4293      	cmp	r3, r2
 8001c22:	dd05      	ble.n	8001c30 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e00e      	b.n	8001c4e <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period) / 2) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	425b      	negs	r3, r3
 8001c36:	0fda      	lsrs	r2, r3, #31
 8001c38:	4413      	add	r3, r2
 8001c3a:	105b      	asrs	r3, r3, #1
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4293      	cmp	r3, r2
 8001c42:	da04      	bge.n	8001c4e <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	61da      	str	r2, [r3, #28]
    //qei->diff_countsf = (float)diff_counts*1.25;

    // Calculate Position with ratio adjustment
    qei->pulses += qei->diff_counts;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	441a      	add	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	631a      	str	r2, [r3, #48]	@ 0x30
    //qei->pulsesf += qei->diff_countsf;

    // Apply ratio to all position calculations
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->ratio;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	ee07 3a90 	vmov	s15, r3
 8001c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c80:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001c8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * 10.0 * qei->ratio;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc1f 	bl	80004e0 <__aeabi_f2d>
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	ee07 3a90 	vmov	s15, r3
 8001cae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cc2:	ee16 0a90 	vmov	r0, s13
 8001cc6:	f7fe fc0b 	bl	80004e0 <__aeabi_f2d>
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	4b36      	ldr	r3, [pc, #216]	@ (8001da8 <QEI_get_diff_count+0x1b8>)
 8001cd0:	f7fe fc5e 	bl	8000590 <__aeabi_dmul>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4690      	mov	r8, r2
 8001cda:	4699      	mov	r9, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7fe fbfd 	bl	80004e0 <__aeabi_f2d>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	460b      	mov	r3, r1
 8001cea:	4640      	mov	r0, r8
 8001cec:	4649      	mov	r1, r9
 8001cee:	f7fe fc4f 	bl	8000590 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	f7fe fa93 	bl	8000224 <__adddf3>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe fe75 	bl	80009f4 <__aeabi_d2f>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->ratio;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fbe3 	bl	80004e0 <__aeabi_f2d>
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	460d      	mov	r5, r1
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	69db      	ldr	r3, [r3, #28]
 8001d22:	ee07 3a90 	vmov	s15, r3
 8001d26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d3a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d3e:	ee17 0a90 	vmov	r0, s15
 8001d42:	f7fe fbcd 	bl	80004e0 <__aeabi_f2d>
 8001d46:	a316      	add	r3, pc, #88	@ (adr r3, 8001da0 <QEI_get_diff_count+0x1b0>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fc20 	bl	8000590 <__aeabi_dmul>
 8001d50:	4602      	mov	r2, r0
 8001d52:	460b      	mov	r3, r1
 8001d54:	4690      	mov	r8, r2
 8001d56:	4699      	mov	r9, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbbf 	bl	80004e0 <__aeabi_f2d>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4640      	mov	r0, r8
 8001d68:	4649      	mov	r1, r9
 8001d6a:	f7fe fc11 	bl	8000590 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4620      	mov	r0, r4
 8001d74:	4629      	mov	r1, r5
 8001d76:	f7fe fa55 	bl	8000224 <__adddf3>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe fe37 	bl	80009f4 <__aeabi_d2f>
 8001d86:	4602      	mov	r2, r0
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	639a      	str	r2, [r3, #56]	@ 0x38

    qei->c[PREV] = qei->c[NOW]; // Store the previous count
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	605a      	str	r2, [r3, #4]
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d9e:	bf00      	nop
 8001da0:	54442d18 	.word	0x54442d18
 8001da4:	400921fb 	.word	0x400921fb
 8001da8:	40240000 	.word	0x40240000
 8001dac:	00000000 	.word	0x00000000

08001db0 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8001db0:	b5b0      	push	{r4, r5, r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
    // Calculate Velocity with ratio adjustment
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6a12      	ldr	r2, [r2, #32]
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Apply ratio to all velocity calculations
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->ratio;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fb82 	bl	80004e0 <__aeabi_f2d>
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	4b6b      	ldr	r3, [pc, #428]	@ (8001f90 <QEI_compute_data+0x1e0>)
 8001de2:	f7fe fbd5 	bl	8000590 <__aeabi_dmul>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4614      	mov	r4, r2
 8001dec:	461d      	mov	r5, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	ee07 3a90 	vmov	s15, r3
 8001df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfa:	ee17 0a90 	vmov	r0, s15
 8001dfe:	f7fe fb6f 	bl	80004e0 <__aeabi_f2d>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f7fe fceb 	bl	80007e4 <__aeabi_ddiv>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4614      	mov	r4, r2
 8001e14:	461d      	mov	r5, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fb60 	bl	80004e0 <__aeabi_f2d>
 8001e20:	4602      	mov	r2, r0
 8001e22:	460b      	mov	r3, r1
 8001e24:	4620      	mov	r0, r4
 8001e26:	4629      	mov	r1, r5
 8001e28:	f7fe fbb2 	bl	8000590 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	f7fe fdde 	bl	80009f4 <__aeabi_d2f>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->ratio;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001e44:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e48:	ee17 0a90 	vmov	r0, s15
 8001e4c:	f7fe fb48 	bl	80004e0 <__aeabi_f2d>
 8001e50:	a34d      	add	r3, pc, #308	@ (adr r3, 8001f88 <QEI_compute_data+0x1d8>)
 8001e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e56:	f7fe fb9b 	bl	8000590 <__aeabi_dmul>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4614      	mov	r4, r2
 8001e60:	461d      	mov	r5, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6e:	ee17 0a90 	vmov	r0, s15
 8001e72:	f7fe fb35 	bl	80004e0 <__aeabi_f2d>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	f7fe fcb1 	bl	80007e4 <__aeabi_ddiv>
 8001e82:	4602      	mov	r2, r0
 8001e84:	460b      	mov	r3, r1
 8001e86:	4614      	mov	r4, r2
 8001e88:	461d      	mov	r5, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb26 	bl	80004e0 <__aeabi_f2d>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4620      	mov	r0, r4
 8001e9a:	4629      	mov	r1, r5
 8001e9c:	f7fe fb78 	bl	8000590 <__aeabi_dmul>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4610      	mov	r0, r2
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	f7fe fda4 	bl	80009f4 <__aeabi_d2f>
 8001eac:	4602      	mov	r2, r0
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->mmps = qei->pps * 10.0 / (float)(qei->ppr) * qei->ratio;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fb12 	bl	80004e0 <__aeabi_f2d>
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b34      	ldr	r3, [pc, #208]	@ (8001f94 <QEI_compute_data+0x1e4>)
 8001ec2:	f7fe fb65 	bl	8000590 <__aeabi_dmul>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	4614      	mov	r4, r2
 8001ecc:	461d      	mov	r5, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	ee07 3a90 	vmov	s15, r3
 8001ed6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eda:	ee17 0a90 	vmov	r0, s15
 8001ede:	f7fe faff 	bl	80004e0 <__aeabi_f2d>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	4629      	mov	r1, r5
 8001eea:	f7fe fc7b 	bl	80007e4 <__aeabi_ddiv>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4614      	mov	r4, r2
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7fe faf0 	bl	80004e0 <__aeabi_f2d>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4620      	mov	r0, r4
 8001f06:	4629      	mov	r1, r5
 8001f08:	f7fe fb42 	bl	8000590 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f7fe fd6e 	bl	80009f4 <__aeabi_d2f>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	645a      	str	r2, [r3, #68]	@ 0x44

    // Calculate Acceleration with ratio adjustment
    qei->r[NOW] = qei->radps;  // radps already has ratio applied
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	609a      	str	r2, [r3, #8]
    float diff_velocity = (qei->r[NOW] - qei->r[PREV]);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f36:	edc7 7a03 	vstr	s15, [r7, #12]
    if (diff_velocity == 0) {
 8001f3a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f46:	d104      	bne.n	8001f52 <QEI_compute_data+0x1a2>
        qei->radpss = 0;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f50:	e00f      	b.n	8001f72 <QEI_compute_data+0x1c2>
    } else {
        qei->radpss = diff_velocity / (1 / (qei->freq));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d102      	bne.n	8001f60 <QEI_compute_data+0x1b0>
 8001f5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f5e:	e001      	b.n	8001f64 <QEI_compute_data+0x1b4>
 8001f60:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001f98 <QEI_compute_data+0x1e8>
 8001f64:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
        // No need to multiply by ratio again since diff_velocity already includes it
    }
    qei->r[PREV] = qei->r[NOW]; // Store the previous count
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	60da      	str	r2, [r3, #12]
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bdb0      	pop	{r4, r5, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	f3af 8000 	nop.w
 8001f88:	54442d18 	.word	0x54442d18
 8001f8c:	400921fb 	.word	0x400921fb
 8001f90:	404e0000 	.word	0x404e0000
 8001f94:	40240000 	.word	0x40240000
 8001f98:	00000000 	.word	0x00000000

08001f9c <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	@ 0x38
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6178      	str	r0, [r7, #20]
 8001fa4:	ed87 0a04 	vstr	s0, [r7, #16]
 8001fa8:	edc7 0a03 	vstr	s1, [r7, #12]
 8001fac:	ed87 1a02 	vstr	s2, [r7, #8]
 8001fb0:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f04f 0200 	mov.w	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8001fda:	ed97 7a03 	vldr	s14, [r7, #12]
 8001fde:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fe2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fe6:	eef0 7ae7 	vabs.f32	s15, s15
 8001fea:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8001fee:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ff2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002002:	d503      	bpl.n	800200c <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	22ff      	movs	r2, #255	@ 0xff
 8002008:	741a      	strb	r2, [r3, #16]
 800200a:	e002      	b.n	8002012 <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	2201      	movs	r2, #1
 8002010:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8002012:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002016:	eef5 7a40 	vcmp.f32	s15, #0.0
 800201a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201e:	d006      	beq.n	800202e <Trapezoidal_Generator+0x92>
 8002020:	edd7 7a01 	vldr	s15, [r7, #4]
 8002024:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	d104      	bne.n	8002038 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
        return;
 8002036:	e06f      	b.n	8002118 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8002038:	edd7 6a02 	vldr	s13, [r7, #8]
 800203c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002044:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8002048:	edd7 7a01 	vldr	s15, [r7, #4]
 800204c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002050:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002054:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002064:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8002068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 800206c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002070:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002074:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002078:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 800207c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002080:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208c:	db27      	blt.n	80020de <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 800208e:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002092:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002096:	ee77 7a67 	vsub.f32	s15, s14, s15
 800209a:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 800209e:	edd7 6a07 	vldr	s13, [r7, #28]
 80020a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80020a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020aa:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80020b2:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 80020b4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80020b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80020bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 80020c6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80020ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80020ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	edc3 7a02 	vstr	s15, [r3, #8]
 80020dc:	e018      	b.n	8002110 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 80020de:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80020e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020ea:	eeb0 0a66 	vmov.f32	s0, s13
 80020ee:	f009 faf3 	bl	800b6d8 <sqrtf>
 80020f2:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	6a3a      	ldr	r2, [r7, #32]
 80020fa:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	6a3a      	ldr	r2, [r7, #32]
 8002100:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8002102:	edd7 7a08 	vldr	s15, [r7, #32]
 8002106:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	60da      	str	r2, [r3, #12]
}
 8002118:	3738      	adds	r7, #56	@ 0x38
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
	...

08002120 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8002120:	b480      	push	{r7}
 8002122:	b08d      	sub	sp, #52	@ 0x34
 8002124:	af00      	add	r7, sp, #0
 8002126:	6178      	str	r0, [r7, #20]
 8002128:	6139      	str	r1, [r7, #16]
 800212a:	ed87 0a03 	vstr	s0, [r7, #12]
 800212e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002132:	ed87 1a01 	vstr	s2, [r7, #4]
 8002136:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002140:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80023c4 <Trapezoidal_Evaluated+0x2a4>
 8002144:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	ed93 7a03 	vldr	s14, [r3, #12]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	edd3 7a03 	vldr	s15, [r3, #12]
 800215a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800215e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002162:	f200 811b 	bhi.w	800239c <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2200      	movs	r2, #0
 800216a:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	7c1b      	ldrb	r3, [r3, #16]
 8002170:	b25b      	sxtb	r3, r3
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217a:	ed97 7a00 	vldr	s14, [r7]
 800217e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002182:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	ed93 7a00 	vldr	s14, [r3]
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002192:	eeb4 7a67 	vcmp.f32	s14, s15
 8002196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800219a:	d109      	bne.n	80021b0 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80021a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021aa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80021ae:	e00c      	b.n	80021ca <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	7c1b      	ldrb	r3, [r3, #16]
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021be:	ed97 7a01 	vldr	s14, [r7, #4]
 80021c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	ed93 7a03 	vldr	s14, [r3, #12]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	edd3 7a00 	vldr	s15, [r3]
 80021d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021de:	d824      	bhi.n	800222a <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 80021e0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80021e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80021e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	edd3 7a03 	vldr	s15, [r3, #12]
 80021f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	edd3 7a03 	vldr	s15, [r3, #12]
 80021fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002200:	edd7 7a03 	vldr	s15, [r7, #12]
 8002204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	ed93 7a03 	vldr	s14, [r3, #12]
 8002214:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002226:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8002228:	e0c6      	b.n	80023b8 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	edd3 7a01 	vldr	s15, [r3, #4]
 8002236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800223e:	d830      	bhi.n	80022a2 <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8002240:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002244:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002248:	ee27 7a87 	vmul.f32	s14, s15, s14
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002260:	ed97 7a03 	vldr	s14, [r7, #12]
 8002264:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002268:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	ee37 7a67 	vsub.f32	s14, s14, s15
 800227c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002280:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002284:	edd7 7a06 	vldr	s15, [r7, #24]
 8002288:	ee77 7a27 	vadd.f32	s15, s14, s15
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002296:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	609a      	str	r2, [r3, #8]
}
 80022a0:	e08a      	b.n	80023b8 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	ed93 7a03 	vldr	s14, [r3, #12]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80022ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b6:	d900      	bls.n	80022ba <Trapezoidal_Evaluated+0x19a>
}
 80022b8:	e07e      	b.n	80023b8 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 80022ba:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80022be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80022c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	edd3 7a00 	vldr	s15, [r3]
 80022cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022da:	ed97 7a03 	vldr	s14, [r7, #12]
 80022de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e2:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	ed93 7a01 	vldr	s14, [r3, #4]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	edd3 7a00 	vldr	s15, [r3]
 80022f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fe:	dd11      	ble.n	8002324 <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	ed93 7a01 	vldr	s14, [r3, #4]
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	edd3 7a00 	vldr	s15, [r3]
 800230c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002310:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002318:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800231c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002320:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	ed93 7a03 	vldr	s14, [r3, #12]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002334:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8002338:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800233c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002340:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002344:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800234c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002350:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002354:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002358:	edd7 7a07 	vldr	s15, [r7, #28]
 800235c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002360:	edd7 7a07 	vldr	s15, [r7, #28]
 8002364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 8002372:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002376:	edd7 7a07 	vldr	s15, [r7, #28]
 800237a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 800238c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002390:	eef1 7a67 	vneg.f32	s15, s15
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800239a:	e00d      	b.n	80023b8 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2201      	movs	r2, #1
 80023a0:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	68ba      	ldr	r2, [r7, #8]
 80023a6:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
}
 80023b8:	bf00      	nop
 80023ba:	3734      	adds	r7, #52	@ 0x34
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	3a83126f 	.word	0x3a83126f

080023c8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08c      	sub	sp, #48	@ 0x30
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80023ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	2220      	movs	r2, #32
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f009 f935 	bl	800b650 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80023e6:	4b39      	ldr	r3, [pc, #228]	@ (80024cc <MX_ADC1_Init+0x104>)
 80023e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80023ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023ee:	4b37      	ldr	r3, [pc, #220]	@ (80024cc <MX_ADC1_Init+0x104>)
 80023f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023f6:	4b35      	ldr	r3, [pc, #212]	@ (80024cc <MX_ADC1_Init+0x104>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80023fc:	4b33      	ldr	r3, [pc, #204]	@ (80024cc <MX_ADC1_Init+0x104>)
 80023fe:	2200      	movs	r2, #0
 8002400:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002402:	4b32      	ldr	r3, [pc, #200]	@ (80024cc <MX_ADC1_Init+0x104>)
 8002404:	2200      	movs	r2, #0
 8002406:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002408:	4b30      	ldr	r3, [pc, #192]	@ (80024cc <MX_ADC1_Init+0x104>)
 800240a:	2201      	movs	r2, #1
 800240c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800240e:	4b2f      	ldr	r3, [pc, #188]	@ (80024cc <MX_ADC1_Init+0x104>)
 8002410:	2204      	movs	r2, #4
 8002412:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002414:	4b2d      	ldr	r3, [pc, #180]	@ (80024cc <MX_ADC1_Init+0x104>)
 8002416:	2200      	movs	r2, #0
 8002418:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800241a:	4b2c      	ldr	r3, [pc, #176]	@ (80024cc <MX_ADC1_Init+0x104>)
 800241c:	2201      	movs	r2, #1
 800241e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8002420:	4b2a      	ldr	r3, [pc, #168]	@ (80024cc <MX_ADC1_Init+0x104>)
 8002422:	2202      	movs	r2, #2
 8002424:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002426:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <MX_ADC1_Init+0x104>)
 8002428:	2200      	movs	r2, #0
 800242a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800242e:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <MX_ADC1_Init+0x104>)
 8002430:	2200      	movs	r2, #0
 8002432:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002434:	4b25      	ldr	r3, [pc, #148]	@ (80024cc <MX_ADC1_Init+0x104>)
 8002436:	2200      	movs	r2, #0
 8002438:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800243a:	4b24      	ldr	r3, [pc, #144]	@ (80024cc <MX_ADC1_Init+0x104>)
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002442:	4b22      	ldr	r3, [pc, #136]	@ (80024cc <MX_ADC1_Init+0x104>)
 8002444:	2200      	movs	r2, #0
 8002446:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002448:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <MX_ADC1_Init+0x104>)
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002450:	481e      	ldr	r0, [pc, #120]	@ (80024cc <MX_ADC1_Init+0x104>)
 8002452:	f002 f8a7 	bl	80045a4 <HAL_ADC_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800245c:	f000 fd3e 	bl	8002edc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002460:	2300      	movs	r3, #0
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002468:	4619      	mov	r1, r3
 800246a:	4818      	ldr	r0, [pc, #96]	@ (80024cc <MX_ADC1_Init+0x104>)
 800246c:	f003 f9c6 	bl	80057fc <HAL_ADCEx_MultiModeConfigChannel>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002476:	f000 fd31 	bl	8002edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800247a:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <MX_ADC1_Init+0x108>)
 800247c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800247e:	2306      	movs	r3, #6
 8002480:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002482:	2307      	movs	r3, #7
 8002484:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002486:	237f      	movs	r3, #127	@ 0x7f
 8002488:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800248a:	2304      	movs	r3, #4
 800248c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	4619      	mov	r1, r3
 8002496:	480d      	ldr	r0, [pc, #52]	@ (80024cc <MX_ADC1_Init+0x104>)
 8002498:	f002 fb32 	bl	8004b00 <HAL_ADC_ConfigChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80024a2:	f000 fd1b 	bl	8002edc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <MX_ADC1_Init+0x10c>)
 80024a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80024aa:	230c      	movs	r3, #12
 80024ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024ae:	1d3b      	adds	r3, r7, #4
 80024b0:	4619      	mov	r1, r3
 80024b2:	4806      	ldr	r0, [pc, #24]	@ (80024cc <MX_ADC1_Init+0x104>)
 80024b4:	f002 fb24 	bl	8004b00 <HAL_ADC_ConfigChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80024be:	f000 fd0d 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	3730      	adds	r7, #48	@ 0x30
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	200001d8 	.word	0x200001d8
 80024d0:	19200040 	.word	0x19200040
 80024d4:	1d500080 	.word	0x1d500080

080024d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b09e      	sub	sp, #120	@ 0x78
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	605a      	str	r2, [r3, #4]
 80024ea:	609a      	str	r2, [r3, #8]
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024f0:	f107 0310 	add.w	r3, r7, #16
 80024f4:	2254      	movs	r2, #84	@ 0x54
 80024f6:	2100      	movs	r1, #0
 80024f8:	4618      	mov	r0, r3
 80024fa:	f009 f8a9 	bl	800b650 <memset>
  if(adcHandle->Instance==ADC1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002506:	d15e      	bne.n	80025c6 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002508:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800250c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800250e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002512:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	4618      	mov	r0, r3
 800251a:	f004 fe65 	bl	80071e8 <HAL_RCCEx_PeriphCLKConfig>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002524:	f000 fcda 	bl	8002edc <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002528:	4b29      	ldr	r3, [pc, #164]	@ (80025d0 <HAL_ADC_MspInit+0xf8>)
 800252a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252c:	4a28      	ldr	r2, [pc, #160]	@ (80025d0 <HAL_ADC_MspInit+0xf8>)
 800252e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002534:	4b26      	ldr	r3, [pc, #152]	@ (80025d0 <HAL_ADC_MspInit+0xf8>)
 8002536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002540:	4b23      	ldr	r3, [pc, #140]	@ (80025d0 <HAL_ADC_MspInit+0xf8>)
 8002542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002544:	4a22      	ldr	r2, [pc, #136]	@ (80025d0 <HAL_ADC_MspInit+0xf8>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800254c:	4b20      	ldr	r3, [pc, #128]	@ (80025d0 <HAL_ADC_MspInit+0xf8>)
 800254e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002558:	2303      	movs	r3, #3
 800255a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255c:	2303      	movs	r3, #3
 800255e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002564:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002568:	4619      	mov	r1, r3
 800256a:	481a      	ldr	r0, [pc, #104]	@ (80025d4 <HAL_ADC_MspInit+0xfc>)
 800256c:	f003 fe90 	bl	8006290 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002570:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 8002572:	4a1a      	ldr	r2, [pc, #104]	@ (80025dc <HAL_ADC_MspInit+0x104>)
 8002574:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002576:	4b18      	ldr	r3, [pc, #96]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 8002578:	2205      	movs	r2, #5
 800257a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800257c:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 8002584:	2200      	movs	r2, #0
 8002586:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002588:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 800258a:	2280      	movs	r2, #128	@ 0x80
 800258c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800258e:	4b12      	ldr	r3, [pc, #72]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 8002590:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002594:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002596:	4b10      	ldr	r3, [pc, #64]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 8002598:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800259c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800259e:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 80025a0:	2220      	movs	r2, #32
 80025a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80025aa:	480b      	ldr	r0, [pc, #44]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 80025ac:	f003 fb3e 	bl	8005c2c <HAL_DMA_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 80025b6:	f000 fc91 	bl	8002edc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a06      	ldr	r2, [pc, #24]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 80025be:	655a      	str	r2, [r3, #84]	@ 0x54
 80025c0:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <HAL_ADC_MspInit+0x100>)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80025c6:	bf00      	nop
 80025c8:	3778      	adds	r7, #120	@ 0x78
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	48000800 	.word	0x48000800
 80025d8:	20000244 	.word	0x20000244
 80025dc:	40020008 	.word	0x40020008

080025e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <MX_DMA_Init+0x70>)
 80025e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ea:	4a19      	ldr	r2, [pc, #100]	@ (8002650 <MX_DMA_Init+0x70>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80025f2:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <MX_DMA_Init+0x70>)
 80025f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <MX_DMA_Init+0x70>)
 8002600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002602:	4a13      	ldr	r2, [pc, #76]	@ (8002650 <MX_DMA_Init+0x70>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6493      	str	r3, [r2, #72]	@ 0x48
 800260a:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <MX_DMA_Init+0x70>)
 800260c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	200b      	movs	r0, #11
 800261c:	f003 fad1 	bl	8005bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002620:	200b      	movs	r0, #11
 8002622:	f003 fae8 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	200c      	movs	r0, #12
 800262c:	f003 fac9 	bl	8005bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002630:	200c      	movs	r0, #12
 8002632:	f003 fae0 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	200d      	movs	r0, #13
 800263c:	f003 fac1 	bl	8005bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002640:	200d      	movs	r0, #13
 8002642:	f003 fad8 	bl	8005bf6 <HAL_NVIC_EnableIRQ>

}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000

08002654 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b08a      	sub	sp, #40	@ 0x28
 8002658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265a:	f107 0314 	add.w	r3, r7, #20
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]
 8002664:	609a      	str	r2, [r3, #8]
 8002666:	60da      	str	r2, [r3, #12]
 8002668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	4b4f      	ldr	r3, [pc, #316]	@ (80027a8 <MX_GPIO_Init+0x154>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266e:	4a4e      	ldr	r2, [pc, #312]	@ (80027a8 <MX_GPIO_Init+0x154>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002676:	4b4c      	ldr	r3, [pc, #304]	@ (80027a8 <MX_GPIO_Init+0x154>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002682:	4b49      	ldr	r3, [pc, #292]	@ (80027a8 <MX_GPIO_Init+0x154>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002686:	4a48      	ldr	r2, [pc, #288]	@ (80027a8 <MX_GPIO_Init+0x154>)
 8002688:	f043 0320 	orr.w	r3, r3, #32
 800268c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800268e:	4b46      	ldr	r3, [pc, #280]	@ (80027a8 <MX_GPIO_Init+0x154>)
 8002690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002692:	f003 0320 	and.w	r3, r3, #32
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800269a:	4b43      	ldr	r3, [pc, #268]	@ (80027a8 <MX_GPIO_Init+0x154>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269e:	4a42      	ldr	r2, [pc, #264]	@ (80027a8 <MX_GPIO_Init+0x154>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026a6:	4b40      	ldr	r3, [pc, #256]	@ (80027a8 <MX_GPIO_Init+0x154>)
 80026a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026b2:	4b3d      	ldr	r3, [pc, #244]	@ (80027a8 <MX_GPIO_Init+0x154>)
 80026b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b6:	4a3c      	ldr	r2, [pc, #240]	@ (80027a8 <MX_GPIO_Init+0x154>)
 80026b8:	f043 0302 	orr.w	r3, r3, #2
 80026bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026be:	4b3a      	ldr	r3, [pc, #232]	@ (80027a8 <MX_GPIO_Init+0x154>)
 80026c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	607b      	str	r3, [r7, #4]
 80026c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 80026ca:	2200      	movs	r2, #0
 80026cc:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80026d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026d4:	f003 ff76 	bl	80065c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80026d8:	2200      	movs	r2, #0
 80026da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026de:	4833      	ldr	r0, [pc, #204]	@ (80027ac <MX_GPIO_Init+0x158>)
 80026e0:	f003 ff70 	bl	80065c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80026e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80026ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80026f4:	f107 0314 	add.w	r3, r7, #20
 80026f8:	4619      	mov	r1, r3
 80026fa:	482c      	ldr	r0, [pc, #176]	@ (80027ac <MX_GPIO_Init+0x158>)
 80026fc:	f003 fdc8 	bl	8006290 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 8002700:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 8002704:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002706:	2301      	movs	r3, #1
 8002708:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800271c:	f003 fdb8 	bl	8006290 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_LIM_Pin LOWER_LIM_Pin PHOTO_REVO_Pin PB11
                           PB12 EMER_Pin PROX_Pin SAVE_Pin */
  GPIO_InitStruct.Pin = UPPER_LIM_Pin|LOWER_LIM_Pin|PHOTO_REVO_Pin|GPIO_PIN_11
 8002720:	f641 43b6 	movw	r3, #7350	@ 0x1cb6
 8002724:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|EMER_Pin|PROX_Pin|SAVE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002726:	2300      	movs	r3, #0
 8002728:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272e:	f107 0314 	add.w	r3, r7, #20
 8002732:	4619      	mov	r1, r3
 8002734:	481e      	ldr	r0, [pc, #120]	@ (80027b0 <MX_GPIO_Init+0x15c>)
 8002736:	f003 fdab 	bl	8006290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800273a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800273e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002740:	2301      	movs	r3, #1
 8002742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002744:	2300      	movs	r3, #0
 8002746:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002748:	2300      	movs	r3, #0
 800274a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	4619      	mov	r1, r3
 8002752:	4816      	ldr	r0, [pc, #88]	@ (80027ac <MX_GPIO_Init+0x158>)
 8002754:	f003 fd9c 	bl	8006290 <HAL_GPIO_Init>

  /*Configure GPIO pin : PHOTO_PRIS_Pin */
  GPIO_InitStruct.Pin = PHOTO_PRIS_Pin;
 8002758:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800275c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800275e:	2300      	movs	r3, #0
 8002760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PHOTO_PRIS_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	4619      	mov	r1, r3
 800276c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002770:	f003 fd8e 	bl	8006290 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_Pin DELETE_Pin RESET_SYS_Pin */
  GPIO_InitStruct.Pin = START_Pin|DELETE_Pin|RESET_SYS_Pin;
 8002774:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	4808      	ldr	r0, [pc, #32]	@ (80027ac <MX_GPIO_Init+0x158>)
 800278a:	f003 fd81 	bl	8006290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	2028      	movs	r0, #40	@ 0x28
 8002794:	f003 fa15 	bl	8005bc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002798:	2028      	movs	r0, #40	@ 0x28
 800279a:	f003 fa2c 	bl	8005bf6 <HAL_NVIC_EnableIRQ>

}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	@ 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000
 80027ac:	48000800 	.word	0x48000800
 80027b0:	48000400 	.word	0x48000400

080027b4 <Kalman_Start>:
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
	  filter->Kalman_Speed = filter->X_k[1];
	  return  filter->Kalman_Speed;
}

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix){
 80027b4:	b5b0      	push	{r4, r5, r7, lr}
 80027b6:	b0a2      	sub	sp, #136	@ 0x88
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
	filter->Q = 0.05f; //0.05
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a37      	ldr	r2, [pc, #220]	@ (80028a0 <Kalman_Start+0xec>)
 80027c4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = 0.1f;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4a36      	ldr	r2, [pc, #216]	@ (80028a4 <Kalman_Start+0xf0>)
 80027cc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {0.0f, 1.0f, 0.0f, 0.0f};
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80027d6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80027da:	67bb      	str	r3, [r7, #120]	@ 0x78
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

	float32_t g[4] = {0.0f,
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80027f0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80027f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	673b      	str	r3, [r7, #112]	@ 0x70
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8002802:	4b29      	ldr	r3, [pc, #164]	@ (80028a8 <Kalman_Start+0xf4>)
 8002804:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8002808:	461d      	mov	r5, r3
 800280a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800280c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800280e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002816:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800281a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 800281e:	f107 0314 	add.w	r3, r7, #20
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800283c:	e028      	b.n	8002890 <Kalman_Start+0xdc>
	{
		filter->A[i] = A_matrix[i];
 800283e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	68ba      	ldr	r2, [r7, #8]
 8002846:	4413      	add	r3, r2
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68f9      	ldr	r1, [r7, #12]
 800284c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002850:	3314      	adds	r3, #20
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8002858:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	3388      	adds	r3, #136	@ 0x88
 8002860:	443b      	add	r3, r7
 8002862:	3b64      	subs	r3, #100	@ 0x64
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800286c:	3398      	adds	r3, #152	@ 0x98
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800287a:	3304      	adds	r3, #4
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8002886:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800288a:	3301      	adds	r3, #1
 800288c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002890:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002894:	2b0f      	cmp	r3, #15
 8002896:	ddd2      	ble.n	800283e <Kalman_Start+0x8a>
	}

	for(i=0;i<4;i++)
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800289e:	e040      	b.n	8002922 <Kalman_Start+0x16e>
 80028a0:	3d4ccccd 	.word	0x3d4ccccd
 80028a4:	3dcccccd 	.word	0x3dcccccd
 80028a8:	0800c21c 	.word	0x0800c21c
	{
		filter->X_k[i] = x_k[i];
 80028ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	3388      	adds	r3, #136	@ 0x88
 80028b4:	443b      	add	r3, r7
 80028b6:	3b74      	subs	r3, #116	@ 0x74
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68f9      	ldr	r1, [r7, #12]
 80028bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 80028c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68f9      	ldr	r1, [r7, #12]
 80028d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028d8:	3324      	adds	r3, #36	@ 0x24
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 80028e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	3388      	adds	r3, #136	@ 0x88
 80028e8:	443b      	add	r3, r7
 80028ea:	3b14      	subs	r3, #20
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68f9      	ldr	r1, [r7, #12]
 80028f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028f4:	3328      	adds	r3, #40	@ 0x28
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	440b      	add	r3, r1
 80028fa:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 80028fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	3388      	adds	r3, #136	@ 0x88
 8002904:	443b      	add	r3, r7
 8002906:	3b24      	subs	r3, #36	@ 0x24
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68f9      	ldr	r1, [r7, #12]
 800290c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002910:	332c      	adds	r3, #44	@ 0x2c
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8002918:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800291c:	3301      	adds	r3, #1
 800291e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002922:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002926:	2b03      	cmp	r3, #3
 8002928:	ddc0      	ble.n	80028ac <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	2104      	movs	r1, #4
 8002936:	f008 fdbd 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	3310      	adds	r3, #16
 8002944:	2204      	movs	r2, #4
 8002946:	2104      	movs	r1, #4
 8002948:	f008 fdb4 	bl	800b4b4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3350      	adds	r3, #80	@ 0x50
 8002956:	2204      	movs	r2, #4
 8002958:	2104      	movs	r1, #4
 800295a:	f008 fdab 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3390      	adds	r3, #144	@ 0x90
 8002968:	2201      	movs	r2, #1
 800296a:	2104      	movs	r1, #4
 800296c:	f008 fda2 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	33a0      	adds	r3, #160	@ 0xa0
 800297a:	2204      	movs	r2, #4
 800297c:	2101      	movs	r1, #1
 800297e:	f008 fd99 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	33b0      	adds	r3, #176	@ 0xb0
 800298c:	2201      	movs	r2, #1
 800298e:	2104      	movs	r1, #4
 8002990:	f008 fd90 	bl	800b4b4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	33c8      	adds	r3, #200	@ 0xc8
 800299e:	2204      	movs	r2, #4
 80029a0:	2104      	movs	r1, #4
 80029a2:	f008 fd87 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 80029b2:	2201      	movs	r2, #1
 80029b4:	2104      	movs	r1, #4
 80029b6:	f008 fd7d 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 80029c6:	2204      	movs	r2, #4
 80029c8:	2101      	movs	r1, #1
 80029ca:	f008 fd73 	bl	800b4b4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 80029da:	2204      	movs	r2, #4
 80029dc:	2104      	movs	r1, #4
 80029de:	f008 fd69 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80029ee:	2204      	movs	r2, #4
 80029f0:	2104      	movs	r1, #4
 80029f2:	f008 fd5f 	bl	800b4b4 <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8002a02:	2201      	movs	r2, #1
 8002a04:	2104      	movs	r1, #4
 8002a06:	f008 fd55 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8002a16:	2201      	movs	r2, #1
 8002a18:	2104      	movs	r1, #4
 8002a1a:	f008 fd4b 	bl	800b4b4 <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	f008 fd41 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 8002a3e:	2201      	movs	r2, #1
 8002a40:	2101      	movs	r1, #1
 8002a42:	f008 fd37 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8002a52:	2201      	movs	r2, #1
 8002a54:	2101      	movs	r1, #1
 8002a56:	f008 fd2d 	bl	800b4b4 <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8002a66:	2201      	movs	r2, #1
 8002a68:	2104      	movs	r1, #4
 8002a6a:	f008 fd23 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	2104      	movs	r1, #4
 8002a7e:	f008 fd19 	bl	800b4b4 <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 8002a8e:	2201      	movs	r2, #1
 8002a90:	2101      	movs	r1, #1
 8002a92:	f008 fd0f 	bl	800b4b4 <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	2101      	movs	r1, #1
 8002aa6:	f008 fd05 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	2101      	movs	r1, #1
 8002aba:	f008 fcfb 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8002aca:	2201      	movs	r2, #1
 8002acc:	2104      	movs	r1, #4
 8002ace:	f008 fcf1 	bl	800b4b4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ade:	2201      	movs	r2, #1
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	f008 fce7 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002af2:	2204      	movs	r2, #4
 8002af4:	2104      	movs	r1, #4
 8002af6:	f008 fcdd 	bl	800b4b4 <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	33c4      	adds	r3, #196	@ 0xc4
 8002b04:	2201      	movs	r2, #1
 8002b06:	2101      	movs	r1, #1
 8002b08:	f008 fcd4 	bl	800b4b4 <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8002b18:	2201      	movs	r2, #1
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	f008 fcca 	bl	800b4b4 <arm_mat_init_f32>
}
 8002b20:	bf00      	nop
 8002b22:	3788      	adds	r7, #136	@ 0x88
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bdb0      	pop	{r4, r5, r7, pc}

08002b28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	ed2d 8b02 	vpush	{d8}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002b32:	f001 fa60 	bl	8003ff6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002b36:	f000 f895 	bl	8002c64 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002b3a:	f7ff fd8b 	bl	8002654 <MX_GPIO_Init>
	MX_DMA_Init();
 8002b3e:	f7ff fd4f 	bl	80025e0 <MX_DMA_Init>
	MX_ADC1_Init();
 8002b42:	f7ff fc41 	bl	80023c8 <MX_ADC1_Init>
	MX_TIM2_Init();
 8002b46:	f000 fda1 	bl	800368c <MX_TIM2_Init>
	MX_TIM3_Init();
 8002b4a:	f000 fded 	bl	8003728 <MX_TIM3_Init>
	MX_TIM4_Init();
 8002b4e:	f000 fe41 	bl	80037d4 <MX_TIM4_Init>
	MX_TIM5_Init();
 8002b52:	f000 fe95 	bl	8003880 <MX_TIM5_Init>
	MX_TIM8_Init();
 8002b56:	f000 fee1 	bl	800391c <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8002b5a:	f001 f919 	bl	8003d90 <MX_USART2_UART_Init>
	MX_TIM16_Init();
 8002b5e:	f000 ffa5 	bl	8003aac <MX_TIM16_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8002b62:	f000 f9c1 	bl	8002ee8 <plotter_begin>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
	    static uint8_t button_pressed_previous = 0;
	    uint8_t button_pressed_current = HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 8002b66:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b6a:	4832      	ldr	r0, [pc, #200]	@ (8002c34 <main+0x10c>)
 8002b6c:	f003 fd12 	bl	8006594 <HAL_GPIO_ReadPin>
 8002b70:	4603      	mov	r3, r0
 8002b72:	71fb      	strb	r3, [r7, #7]

	    // Detect button press (rising edge)
	    if (button_pressed_current && !button_pressed_previous && !trajectoryActive) {
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d055      	beq.n	8002c26 <main+0xfe>
 8002b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c38 <main+0x110>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d151      	bne.n	8002c26 <main+0xfe>
 8002b82:	4b2e      	ldr	r3, [pc, #184]	@ (8002c3c <main+0x114>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	f083 0301 	eor.w	r3, r3, #1
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d04a      	beq.n	8002c26 <main+0xfe>
	        // Initialize new trajectory
	        prisEva.t = 0.0f;
 8002b90:	4b2b      	ldr	r3, [pc, #172]	@ (8002c40 <main+0x118>)
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	60da      	str	r2, [r3, #12]
	        prisEva.isFinised = false;
 8002b98:	4b29      	ldr	r3, [pc, #164]	@ (8002c40 <main+0x118>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	741a      	strb	r2, [r3, #16]

	        // Set initial position to current position
	        initial_p = current_position;
 8002b9e:	4b29      	ldr	r3, [pc, #164]	@ (8002c44 <main+0x11c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a29      	ldr	r2, [pc, #164]	@ (8002c48 <main+0x120>)
 8002ba4:	6013      	str	r3, [r2, #0]

	        // Set target to next position in sequence
	        target_p = trajectory_sequence[trajectory_sequence_index];
 8002ba6:	4b29      	ldr	r3, [pc, #164]	@ (8002c4c <main+0x124>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	4a29      	ldr	r2, [pc, #164]	@ (8002c50 <main+0x128>)
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a28      	ldr	r2, [pc, #160]	@ (8002c54 <main+0x12c>)
 8002bb4:	6013      	str	r3, [r2, #0]

	        // Generate trapezoidal trajectory
	        Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002bb6:	4b24      	ldr	r3, [pc, #144]	@ (8002c48 <main+0x120>)
 8002bb8:	ed93 8a00 	vldr	s16, [r3]
 8002bbc:	4b25      	ldr	r3, [pc, #148]	@ (8002c54 <main+0x12c>)
 8002bbe:	edd3 8a00 	vldr	s17, [r3]
	                ZGX45RGG_400RPM_Constant.qd_max,
 8002bc2:	4b25      	ldr	r3, [pc, #148]	@ (8002c58 <main+0x130>)
 8002bc4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	        Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f7fd ff12 	bl	80009f4 <__aeabi_d2f>
 8002bd0:	4604      	mov	r4, r0
	                ZGX45RGG_400RPM_Constant.qd_max * 3.0);
 8002bd2:	4b21      	ldr	r3, [pc, #132]	@ (8002c58 <main+0x130>)
 8002bd4:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c5c <main+0x134>)
 8002bde:	f7fd fcd7 	bl	8000590 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
	        Trapezoidal_Generator(&prisGen, initial_p, target_p,
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	f7fd ff03 	bl	80009f4 <__aeabi_d2f>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	ee01 3a90 	vmov	s3, r3
 8002bf4:	ee01 4a10 	vmov	s2, r4
 8002bf8:	eef0 0a68 	vmov.f32	s1, s17
 8002bfc:	eeb0 0a48 	vmov.f32	s0, s16
 8002c00:	4817      	ldr	r0, [pc, #92]	@ (8002c60 <main+0x138>)
 8002c02:	f7ff f9cb 	bl	8001f9c <Trapezoidal_Generator>

	        // Activate trajectory
	        trajectoryActive = true;
 8002c06:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <main+0x114>)
 8002c08:	2201      	movs	r2, #1
 8002c0a:	701a      	strb	r2, [r3, #0]

	        // Increment index for next press (with wrap-around)
	        trajectory_sequence_index = (trajectory_sequence_index + 1) % 4;
 8002c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c4c <main+0x124>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	425a      	negs	r2, r3
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	f002 0203 	and.w	r2, r2, #3
 8002c1c:	bf58      	it	pl
 8002c1e:	4253      	negpl	r3, r2
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <main+0x124>)
 8002c24:	701a      	strb	r2, [r3, #0]
	    }

	    // Save current button state for next iteration
	    button_pressed_previous = button_pressed_current;
 8002c26:	4a04      	ldr	r2, [pc, #16]	@ (8002c38 <main+0x110>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	7013      	strb	r3, [r2, #0]

	    // Small delay to debounce button
	    HAL_Delay(50);
 8002c2c:	2032      	movs	r0, #50	@ 0x32
 8002c2e:	f001 fa53 	bl	80040d8 <HAL_Delay>
	while (1) {
 8002c32:	e798      	b.n	8002b66 <main+0x3e>
 8002c34:	48000800 	.word	0x48000800
 8002c38:	200002f8 	.word	0x200002f8
 8002c3c:	200002cc 	.word	0x200002cc
 8002c40:	200002b8 	.word	0x200002b8
 8002c44:	200002d4 	.word	0x200002d4
 8002c48:	200002d0 	.word	0x200002d0
 8002c4c:	200002e0 	.word	0x200002e0
 8002c50:	0800c25c 	.word	0x0800c25c
 8002c54:	200000b8 	.word	0x200000b8
 8002c58:	20000048 	.word	0x20000048
 8002c5c:	40080000 	.word	0x40080000
 8002c60:	200002a4 	.word	0x200002a4

08002c64 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b094      	sub	sp, #80	@ 0x50
 8002c68:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002c6a:	f107 0318 	add.w	r3, r7, #24
 8002c6e:	2238      	movs	r2, #56	@ 0x38
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f008 fcec 	bl	800b650 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002c78:	1d3b      	adds	r3, r7, #4
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	609a      	str	r2, [r3, #8]
 8002c82:	60da      	str	r2, [r3, #12]
 8002c84:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f003 fccc 	bl	8006624 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002c90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002c96:	2340      	movs	r3, #64	@ 0x40
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8002ca6:	2355      	movs	r3, #85	@ 0x55
 8002ca8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002caa:	2302      	movs	r3, #2
 8002cac:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002cb6:	f107 0318 	add.w	r3, r7, #24
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 fd66 	bl	800678c <HAL_RCC_OscConfig>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <SystemClock_Config+0x66>
		Error_Handler();
 8002cc6:	f000 f909 	bl	8002edc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002cca:	230f      	movs	r3, #15
 8002ccc:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002cde:	1d3b      	adds	r3, r7, #4
 8002ce0:	2104      	movs	r1, #4
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f004 f864 	bl	8006db0 <HAL_RCC_ClockConfig>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <SystemClock_Config+0x8e>
		Error_Handler();
 8002cee:	f000 f8f5 	bl	8002edc <Error_Handler>
	}
}
 8002cf2:	bf00      	nop
 8002cf4:	3750      	adds	r7, #80	@ 0x50
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	4603      	mov	r3, r0
 8002d02:	80fb      	strh	r3, [r7, #6]

}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]

}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002d24:	b590      	push	{r4, r7, lr}
 8002d26:	ed2d 8b02 	vpush	{d8}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a53      	ldr	r2, [pc, #332]	@ (8002e80 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	f040 809d 	bne.w	8002e74 <HAL_TIM_PeriodElapsedCallback+0x150>
		// Process trajectory
        if (trajectoryActive && !prisEva.isFinised) {
 8002d3a:	4b52      	ldr	r3, [pc, #328]	@ (8002e84 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d044      	beq.n	8002dcc <HAL_TIM_PeriodElapsedCallback+0xa8>
 8002d42:	4b51      	ldr	r3, [pc, #324]	@ (8002e88 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002d44:	7c1b      	ldrb	r3, [r3, #16]
 8002d46:	f083 0301 	eor.w	r3, r3, #1
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d03d      	beq.n	8002dcc <HAL_TIM_PeriodElapsedCallback+0xa8>
            Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8002d50:	4b4e      	ldr	r3, [pc, #312]	@ (8002e8c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002d52:	ed93 8a00 	vldr	s16, [r3]
 8002d56:	4b4e      	ldr	r3, [pc, #312]	@ (8002e90 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8002d58:	edd3 8a00 	vldr	s17, [r3]
                    ZGX45RGG_400RPM_Constant.qd_max,
 8002d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002e94 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002d5e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
            Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8002d62:	4610      	mov	r0, r2
 8002d64:	4619      	mov	r1, r3
 8002d66:	f7fd fe45 	bl	80009f4 <__aeabi_d2f>
 8002d6a:	4604      	mov	r4, r0
                    ZGX45RGG_400RPM_Constant.qd_max * 3.0);
 8002d6c:	4b49      	ldr	r3, [pc, #292]	@ (8002e94 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002d6e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	4b48      	ldr	r3, [pc, #288]	@ (8002e98 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8002d78:	f7fd fc0a 	bl	8000590 <__aeabi_dmul>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
            Trapezoidal_Evaluated(&prisGen, &prisEva, initial_p, target_p,
 8002d80:	4610      	mov	r0, r2
 8002d82:	4619      	mov	r1, r3
 8002d84:	f7fd fe36 	bl	80009f4 <__aeabi_d2f>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	ee01 3a90 	vmov	s3, r3
 8002d8e:	ee01 4a10 	vmov	s2, r4
 8002d92:	eef0 0a68 	vmov.f32	s1, s17
 8002d96:	eeb0 0a48 	vmov.f32	s0, s16
 8002d9a:	493b      	ldr	r1, [pc, #236]	@ (8002e88 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002d9c:	483f      	ldr	r0, [pc, #252]	@ (8002e9c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002d9e:	f7ff f9bf 	bl	8002120 <Trapezoidal_Evaluated>
            current_position = prisEva.setposition;
 8002da2:	4b39      	ldr	r3, [pc, #228]	@ (8002e88 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a3e      	ldr	r2, [pc, #248]	@ (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002da8:	6013      	str	r3, [r2, #0]
            current_velocity = prisEva.setvelocity;
 8002daa:	4b37      	ldr	r3, [pc, #220]	@ (8002e88 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4a3d      	ldr	r2, [pc, #244]	@ (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002db0:	6013      	str	r3, [r2, #0]
            current_acceleration = prisEva.setacceleration;
 8002db2:	4b35      	ldr	r3, [pc, #212]	@ (8002e88 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	4a3c      	ldr	r2, [pc, #240]	@ (8002ea8 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002db8:	6013      	str	r3, [r2, #0]

            setpoint_pos = current_position;
 8002dba:	4b39      	ldr	r3, [pc, #228]	@ (8002ea0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3b      	ldr	r2, [pc, #236]	@ (8002eac <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002dc0:	6013      	str	r3, [r2, #0]
            setpoint_vel = current_velocity;
 8002dc2:	4b38      	ldr	r3, [pc, #224]	@ (8002ea4 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a3a      	ldr	r2, [pc, #232]	@ (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e002      	b.n	8002dd2 <HAL_TIM_PeriodElapsedCallback+0xae>
        } else {
            trajectoryActive = false;
 8002dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002e84 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
        }

		QEI_get_diff_count(&prismatic_encoder);
 8002dd2:	4838      	ldr	r0, [pc, #224]	@ (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002dd4:	f7fe ff0c 	bl	8001bf0 <QEI_get_diff_count>
		QEI_compute_data(&prismatic_encoder);
 8002dd8:	4836      	ldr	r0, [pc, #216]	@ (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002dda:	f7fe ffe9 	bl	8001db0 <QEI_compute_data>

		lp_filt = FIR_process(&LP_prismatic_velocity, prismatic_encoder.radps);
 8002dde:	4b35      	ldr	r3, [pc, #212]	@ (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002de0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002de4:	eeb0 0a67 	vmov.f32	s0, s15
 8002de8:	4833      	ldr	r0, [pc, #204]	@ (8002eb8 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002dea:	f7fe fb7f 	bl	80014ec <FIR_process>
 8002dee:	eef0 7a40 	vmov.f32	s15, s0
 8002df2:	4b32      	ldr	r3, [pc, #200]	@ (8002ebc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002df4:	edc3 7a00 	vstr	s15, [r3]

		cmd_vx = PID_CONTROLLER_Compute(&prismatic_position_pid,
 8002df8:	4b2c      	ldr	r3, [pc, #176]	@ (8002eac <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002dfa:	ed93 7a00 	vldr	s14, [r3]
				setpoint_pos - prismatic_encoder.rads);
 8002dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb4 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002e00:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
		cmd_vx = PID_CONTROLLER_Compute(&prismatic_position_pid,
 8002e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e08:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0c:	482c      	ldr	r0, [pc, #176]	@ (8002ec0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002e0e:	f7fe f87c 	bl	8000f0a <PID_CONTROLLER_Compute>
 8002e12:	eef0 7a40 	vmov.f32	s15, s0
 8002e16:	4b2b      	ldr	r3, [pc, #172]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002e18:	edc3 7a00 	vstr	s15, [r3]
		cmd_ux = PWM_Satuation(
				PID_CONTROLLER_Compute(&prismatic_velocity_pid,
						cmd_vx + setpoint_vel - lp_filt), 65535, -65535);
 8002e1c:	4b29      	ldr	r3, [pc, #164]	@ (8002ec4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002e1e:	ed93 7a00 	vldr	s14, [r3]
 8002e22:	4b23      	ldr	r3, [pc, #140]	@ (8002eb0 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	ee37 7a27 	vadd.f32	s14, s14, s15
		cmd_ux = PWM_Satuation(
 8002e2c:	4b23      	ldr	r3, [pc, #140]	@ (8002ebc <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e36:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3a:	4823      	ldr	r0, [pc, #140]	@ (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002e3c:	f7fe f865 	bl	8000f0a <PID_CONTROLLER_Compute>
 8002e40:	eef0 7a40 	vmov.f32	s15, s0
 8002e44:	4921      	ldr	r1, [pc, #132]	@ (8002ecc <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002e46:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e4e:	f7fe f803 	bl	8000e58 <PWM_Satuation>
 8002e52:	ee07 0a90 	vmov	s15, r0
 8002e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002e5c:	edc3 7a00 	vstr	s15, [r3]

		MDXX_set_range(&prismatic_motor, 2000, cmd_ux);
 8002e60:	4b1b      	ldr	r3, [pc, #108]	@ (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002e62:	edd3 7a00 	vldr	s15, [r3]
 8002e66:	eef0 0a67 	vmov.f32	s1, s15
 8002e6a:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8002ed4 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8002e6e:	481a      	ldr	r0, [pc, #104]	@ (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002e70:	f7fe f902 	bl	8001078 <MDXX_set_range>
	}
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	ecbd 8b02 	vpop	{d8}
 8002e7e:	bd90      	pop	{r4, r7, pc}
 8002e80:	20001464 	.word	0x20001464
 8002e84:	200002cc 	.word	0x200002cc
 8002e88:	200002b8 	.word	0x200002b8
 8002e8c:	200002d0 	.word	0x200002d0
 8002e90:	200000b8 	.word	0x200000b8
 8002e94:	20000048 	.word	0x20000048
 8002e98:	40080000 	.word	0x40080000
 8002e9c:	200002a4 	.word	0x200002a4
 8002ea0:	200002d4 	.word	0x200002d4
 8002ea4:	200002d8 	.word	0x200002d8
 8002ea8:	200002dc 	.word	0x200002dc
 8002eac:	200002e4 	.word	0x200002e4
 8002eb0:	200002e8 	.word	0x200002e8
 8002eb4:	20000394 	.word	0x20000394
 8002eb8:	20000678 	.word	0x20000678
 8002ebc:	200002ec 	.word	0x200002ec
 8002ec0:	2000042c 	.word	0x2000042c
 8002ec4:	200002f4 	.word	0x200002f4
 8002ec8:	20000458 	.word	0x20000458
 8002ecc:	ffff0001 	.word	0xffff0001
 8002ed0:	200002f0 	.word	0x200002f0
 8002ed4:	44fa0000 	.word	0x44fa0000
 8002ed8:	200002fc 	.word	0x200002fc

08002edc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee0:	b672      	cpsid	i
}
 8002ee2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002ee4:	bf00      	nop
 8002ee6:	e7fd      	b.n	8002ee4 <Error_Handler+0x8>

08002ee8 <plotter_begin>:
float revolute_current = 0.0f;

int b1, b2, b3, b4, prox, emer, photo_pris, photo_revo, up_lim, low_lim;
float joy_x, joy_y;

void plotter_begin() {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af02      	add	r7, sp, #8
	SIGNAL_init(&sine_sg, SIGNAL_SINE);
 8002eee:	2100      	movs	r1, #0
 8002ef0:	489c      	ldr	r0, [pc, #624]	@ (8003164 <plotter_begin+0x27c>)
 8002ef2:	f000 f9b5 	bl	8003260 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8002ef6:	eddf 2a9c 	vldr	s5, [pc, #624]	@ 8003168 <plotter_begin+0x280>
 8002efa:	ed9f 2a9c 	vldr	s4, [pc, #624]	@ 800316c <plotter_begin+0x284>
 8002efe:	eddf 1a9c 	vldr	s3, [pc, #624]	@ 8003170 <plotter_begin+0x288>
 8002f02:	ed9f 1a9b 	vldr	s2, [pc, #620]	@ 8003170 <plotter_begin+0x288>
 8002f06:	eddf 0a9b 	vldr	s1, [pc, #620]	@ 8003174 <plotter_begin+0x28c>
 8002f0a:	ed9f 0a97 	vldr	s0, [pc, #604]	@ 8003168 <plotter_begin+0x280>
 8002f0e:	4895      	ldr	r0, [pc, #596]	@ (8003164 <plotter_begin+0x27c>)
 8002f10:	f000 fa04 	bl	800331c <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&chirp_linear_sg, SIGNAL_CHIRP);
 8002f14:	2101      	movs	r1, #1
 8002f16:	4898      	ldr	r0, [pc, #608]	@ (8003178 <plotter_begin+0x290>)
 8002f18:	f000 f9a2 	bl	8003260 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_linear_sg, CHIRP_LINEAR_AMPLITUDE,
 8002f1c:	eddf 2a92 	vldr	s5, [pc, #584]	@ 8003168 <plotter_begin+0x280>
 8002f20:	ed9f 2a92 	vldr	s4, [pc, #584]	@ 800316c <plotter_begin+0x284>
 8002f24:	2100      	movs	r1, #0
 8002f26:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002f2a:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002f2e:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002f32:	ed9f 0a8d 	vldr	s0, [pc, #564]	@ 8003168 <plotter_begin+0x280>
 8002f36:	4890      	ldr	r0, [pc, #576]	@ (8003178 <plotter_begin+0x290>)
 8002f38:	f000 fa1b 	bl	8003372 <SIGNAL_config_chirp>
	CHIRP_LINEAR_START_FREQ,
	CHIRP_LINEAR_END_FREQ, CHIRP_LINEAR_DURATION, CHIRP_LINEAR,
	CHIRP_LINEAR_MIN_SETPOINT, CHIRP_LINEAR_MAX_SETPOINT);

	SIGNAL_init(&chirp_log_sg, SIGNAL_CHIRP);
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	488f      	ldr	r0, [pc, #572]	@ (800317c <plotter_begin+0x294>)
 8002f40:	f000 f98e 	bl	8003260 <SIGNAL_init>
	SIGNAL_config_chirp(&chirp_log_sg, CHIRP_LOG_AMPLITUDE,
 8002f44:	eddf 2a88 	vldr	s5, [pc, #544]	@ 8003168 <plotter_begin+0x280>
 8002f48:	ed9f 2a88 	vldr	s4, [pc, #544]	@ 800316c <plotter_begin+0x284>
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	eef1 1a04 	vmov.f32	s3, #20	@ 0x40a00000  5.0
 8002f52:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 8002f56:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002f5a:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 8003168 <plotter_begin+0x280>
 8002f5e:	4887      	ldr	r0, [pc, #540]	@ (800317c <plotter_begin+0x294>)
 8002f60:	f000 fa07 	bl	8003372 <SIGNAL_config_chirp>
	CHIRP_LOG_START_FREQ,
	CHIRP_LOG_END_FREQ, CHIRP_LOG_DURATION, CHIRP_LOGARITHMIC,
	CHIRP_LOG_MIN_SETPOINT, CHIRP_LOG_MAX_SETPOINT);

	SIGNAL_init(&square_sg, SIGNAL_SQUARE);
 8002f64:	2102      	movs	r1, #2
 8002f66:	4886      	ldr	r0, [pc, #536]	@ (8003180 <plotter_begin+0x298>)
 8002f68:	f000 f97a 	bl	8003260 <SIGNAL_init>
	SIGNAL_config_square(&square_sg, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8002f6c:	ed9f 3a7e 	vldr	s6, [pc, #504]	@ 8003168 <plotter_begin+0x280>
 8002f70:	eddf 2a7e 	vldr	s5, [pc, #504]	@ 800316c <plotter_begin+0x284>
 8002f74:	ed9f 2a7e 	vldr	s4, [pc, #504]	@ 8003170 <plotter_begin+0x288>
 8002f78:	eddf 1a7d 	vldr	s3, [pc, #500]	@ 8003170 <plotter_begin+0x288>
 8002f7c:	ed9f 1a81 	vldr	s2, [pc, #516]	@ 8003184 <plotter_begin+0x29c>
 8002f80:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8002f84:	ed9f 0a78 	vldr	s0, [pc, #480]	@ 8003168 <plotter_begin+0x280>
 8002f88:	487d      	ldr	r0, [pc, #500]	@ (8003180 <plotter_begin+0x298>)
 8002f8a:	f000 fa26 	bl	80033da <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&ramp_sg, SIGNAL_RAMP);
 8002f8e:	2103      	movs	r1, #3
 8002f90:	487d      	ldr	r0, [pc, #500]	@ (8003188 <plotter_begin+0x2a0>)
 8002f92:	f000 f965 	bl	8003260 <SIGNAL_init>
	SIGNAL_config_ramp(&ramp_sg, RAMP_AMPLITUDE, RAMP_FREQUENCY,
 8002f96:	eddf 3a74 	vldr	s7, [pc, #464]	@ 8003168 <plotter_begin+0x280>
 8002f9a:	ed9f 3a74 	vldr	s6, [pc, #464]	@ 800316c <plotter_begin+0x284>
 8002f9e:	eddf 2a74 	vldr	s5, [pc, #464]	@ 8003170 <plotter_begin+0x288>
 8002fa2:	ed9f 2a73 	vldr	s4, [pc, #460]	@ 8003170 <plotter_begin+0x288>
 8002fa6:	eddf 1a70 	vldr	s3, [pc, #448]	@ 8003168 <plotter_begin+0x280>
 8002faa:	ed9f 1a70 	vldr	s2, [pc, #448]	@ 800316c <plotter_begin+0x284>
 8002fae:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002fb2:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 8003168 <plotter_begin+0x280>
 8002fb6:	4874      	ldr	r0, [pc, #464]	@ (8003188 <plotter_begin+0x2a0>)
 8002fb8:	f000 fa3f 	bl	800343a <SIGNAL_config_ramp>
	RAMP_START, RAMP_END, RAMP_PHASE, RAMP_OFFSET,
	RAMP_MIN_SETPOINT, RAMP_MAX_SETPOINT);

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR_RATIO1);
 8002fbc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002fc0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fc8:	4970      	ldr	r1, [pc, #448]	@ (800318c <plotter_begin+0x2a4>)
 8002fca:	4871      	ldr	r0, [pc, #452]	@ (8003190 <plotter_begin+0x2a8>)
 8002fcc:	f7fe fdbe 	bl	8001b4c <QEI_init>
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR_RATIO2);
 8002fd0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002fd4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fd8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fdc:	496d      	ldr	r1, [pc, #436]	@ (8003194 <plotter_begin+0x2ac>)
 8002fde:	486e      	ldr	r0, [pc, #440]	@ (8003198 <plotter_begin+0x2b0>)
 8002fe0:	f7fe fdb4 	bl	8001b4c <QEI_init>

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8002fe4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fe8:	9300      	str	r3, [sp, #0]
 8002fea:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002fee:	2204      	movs	r2, #4
 8002ff0:	496a      	ldr	r1, [pc, #424]	@ (800319c <plotter_begin+0x2b4>)
 8002ff2:	486b      	ldr	r0, [pc, #428]	@ (80031a0 <plotter_begin+0x2b8>)
 8002ff4:	f7fe f81b 	bl	800102e <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8002ff8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4b69      	ldr	r3, [pc, #420]	@ (80031a4 <plotter_begin+0x2bc>)
 8003000:	2200      	movs	r2, #0
 8003002:	4966      	ldr	r1, [pc, #408]	@ (800319c <plotter_begin+0x2b4>)
 8003004:	4868      	ldr	r0, [pc, #416]	@ (80031a8 <plotter_begin+0x2c0>)
 8003006:	f7fe f812 	bl	800102e <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 800300a:	2208      	movs	r2, #8
 800300c:	4963      	ldr	r1, [pc, #396]	@ (800319c <plotter_begin+0x2b4>)
 800300e:	4867      	ldr	r0, [pc, #412]	@ (80031ac <plotter_begin+0x2c4>)
 8003010:	f7fe fb6e 	bl	80016f0 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8003014:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8003170 <plotter_begin+0x288>
 8003018:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 80031b0 <plotter_begin+0x2c8>
 800301c:	4860      	ldr	r0, [pc, #384]	@ (80031a0 <plotter_begin+0x2b8>)
 800301e:	f7fe f82b 	bl	8001078 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8003022:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8003170 <plotter_begin+0x288>
 8003026:	ed9f 0a62 	vldr	s0, [pc, #392]	@ 80031b0 <plotter_begin+0x2c8>
 800302a:	485f      	ldr	r0, [pc, #380]	@ (80031a8 <plotter_begin+0x2c0>)
 800302c:	f7fe f824 	bl	8001078 <MDXX_set_range>
	pen_up();
 8003030:	f000 f906 	bl	8003240 <pen_up>

	PID_CONTROLLER_Init(&prismatic_position_pid, 2, 1e-7, 1, ZGX45RGG_400RPM_Constant.U_max);
 8003034:	4b5f      	ldr	r3, [pc, #380]	@ (80031b4 <plotter_begin+0x2cc>)
 8003036:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	f7fd fcd9 	bl	80009f4 <__aeabi_d2f>
 8003042:	4603      	mov	r3, r0
 8003044:	ee01 3a90 	vmov	s3, r3
 8003048:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 800304c:	eddf 0a5a 	vldr	s1, [pc, #360]	@ 80031b8 <plotter_begin+0x2d0>
 8003050:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8003054:	4859      	ldr	r0, [pc, #356]	@ (80031bc <plotter_begin+0x2d4>)
 8003056:	f7fd ff2e 	bl	8000eb6 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 500, 25, 0, ZGX45RGG_400RPM_Constant.U_max);
 800305a:	4b56      	ldr	r3, [pc, #344]	@ (80031b4 <plotter_begin+0x2cc>)
 800305c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8003060:	4610      	mov	r0, r2
 8003062:	4619      	mov	r1, r3
 8003064:	f7fd fcc6 	bl	80009f4 <__aeabi_d2f>
 8003068:	4603      	mov	r3, r0
 800306a:	ee01 3a90 	vmov	s3, r3
 800306e:	ed9f 1a40 	vldr	s2, [pc, #256]	@ 8003170 <plotter_begin+0x288>
 8003072:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8003076:	ed9f 0a52 	vldr	s0, [pc, #328]	@ 80031c0 <plotter_begin+0x2d8>
 800307a:	4852      	ldr	r0, [pc, #328]	@ (80031c4 <plotter_begin+0x2dc>)
 800307c:	f7fd ff1b 	bl	8000eb6 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 0, 0, 0, 65535);
 8003080:	eddf 1a51 	vldr	s3, [pc, #324]	@ 80031c8 <plotter_begin+0x2e0>
 8003084:	ed9f 1a3a 	vldr	s2, [pc, #232]	@ 8003170 <plotter_begin+0x288>
 8003088:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8003170 <plotter_begin+0x288>
 800308c:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8003170 <plotter_begin+0x288>
 8003090:	484e      	ldr	r0, [pc, #312]	@ (80031cc <plotter_begin+0x2e4>)
 8003092:	f7fd ff10 	bl	8000eb6 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 0, 0, 0, 65535);
 8003096:	eddf 1a4c 	vldr	s3, [pc, #304]	@ 80031c8 <plotter_begin+0x2e0>
 800309a:	ed9f 1a35 	vldr	s2, [pc, #212]	@ 8003170 <plotter_begin+0x288>
 800309e:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8003170 <plotter_begin+0x288>
 80030a2:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8003170 <plotter_begin+0x288>
 80030a6:	484a      	ldr	r0, [pc, #296]	@ (80031d0 <plotter_begin+0x2e8>)
 80030a8:	f7fd ff05 	bl	8000eb6 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 80030ac:	4949      	ldr	r1, [pc, #292]	@ (80031d4 <plotter_begin+0x2ec>)
 80030ae:	484a      	ldr	r0, [pc, #296]	@ (80031d8 <plotter_begin+0x2f0>)
 80030b0:	f7fe f8bc 	bl	800122c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 80030b4:	493f      	ldr	r1, [pc, #252]	@ (80031b4 <plotter_begin+0x2cc>)
 80030b6:	4849      	ldr	r0, [pc, #292]	@ (80031dc <plotter_begin+0x2f4>)
 80030b8:	f7fe f8d8 	bl	800126c <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 80030bc:	4a48      	ldr	r2, [pc, #288]	@ (80031e0 <plotter_begin+0x2f8>)
 80030be:	4945      	ldr	r1, [pc, #276]	@ (80031d4 <plotter_begin+0x2ec>)
 80030c0:	4848      	ldr	r0, [pc, #288]	@ (80031e4 <plotter_begin+0x2fc>)
 80030c2:	f7fe f8c1 	bl	8001248 <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 80030c6:	4a46      	ldr	r2, [pc, #280]	@ (80031e0 <plotter_begin+0x2f8>)
 80030c8:	493a      	ldr	r1, [pc, #232]	@ (80031b4 <plotter_begin+0x2cc>)
 80030ca:	4847      	ldr	r0, [pc, #284]	@ (80031e8 <plotter_begin+0x300>)
 80030cc:	f7fe f8dc 	bl	8001288 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&adc_dma, &hadc1, adc_dma_buffer, ADC_BUFFER_SIZE, ADC_CHANNELS, 3.3f, 4095.0f);
 80030d0:	2304      	movs	r3, #4
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	eddf 0a45 	vldr	s1, [pc, #276]	@ 80031ec <plotter_begin+0x304>
 80030d8:	ed9f 0a45 	vldr	s0, [pc, #276]	@ 80031f0 <plotter_begin+0x308>
 80030dc:	2328      	movs	r3, #40	@ 0x28
 80030de:	4a45      	ldr	r2, [pc, #276]	@ (80031f4 <plotter_begin+0x30c>)
 80030e0:	4945      	ldr	r1, [pc, #276]	@ (80031f8 <plotter_begin+0x310>)
 80030e2:	4846      	ldr	r0, [pc, #280]	@ (80031fc <plotter_begin+0x314>)
 80030e4:	f7fd fe6c 	bl	8000dc0 <ADC_DMA_Init>
	ADC_DMA_Start(&adc_dma);
 80030e8:	4844      	ldr	r0, [pc, #272]	@ (80031fc <plotter_begin+0x314>)
 80030ea:	f7fd fe9e 	bl	8000e2a <ADC_DMA_Start>

	FIR_init(&LP_prismatic_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80030ee:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8003200 <plotter_begin+0x318>
 80030f2:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80030f6:	211f      	movs	r1, #31
 80030f8:	4842      	ldr	r0, [pc, #264]	@ (8003204 <plotter_begin+0x31c>)
 80030fa:	f7fe f8d7 	bl	80012ac <FIR_init>
	FIR_init(&LP_prismatic_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 80030fe:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8003200 <plotter_begin+0x318>
 8003102:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003106:	211f      	movs	r1, #31
 8003108:	483f      	ldr	r0, [pc, #252]	@ (8003208 <plotter_begin+0x320>)
 800310a:	f7fe f8cf 	bl	80012ac <FIR_init>
	FIR_init(&LP_revolute_current, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800310e:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8003200 <plotter_begin+0x318>
 8003112:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003116:	211f      	movs	r1, #31
 8003118:	483c      	ldr	r0, [pc, #240]	@ (800320c <plotter_begin+0x324>)
 800311a:	f7fe f8c7 	bl	80012ac <FIR_init>
	FIR_init(&LP_revolute_velocity, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 800311e:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8003200 <plotter_begin+0x318>
 8003122:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8003126:	211f      	movs	r1, #31
 8003128:	4839      	ldr	r0, [pc, #228]	@ (8003210 <plotter_begin+0x328>)
 800312a:	f7fe f8bf 	bl	80012ac <FIR_init>

	Kalman_Start(&flit_revolute_velocity, revolute_A, revolute_B);
 800312e:	4a39      	ldr	r2, [pc, #228]	@ (8003214 <plotter_begin+0x32c>)
 8003130:	4939      	ldr	r1, [pc, #228]	@ (8003218 <plotter_begin+0x330>)
 8003132:	483a      	ldr	r0, [pc, #232]	@ (800321c <plotter_begin+0x334>)
 8003134:	f7ff fb3e 	bl	80027b4 <Kalman_Start>
	Kalman_Start(&flit_prismatic_velocity, prismatic_A, prismatic_B);
 8003138:	4a39      	ldr	r2, [pc, #228]	@ (8003220 <plotter_begin+0x338>)
 800313a:	493a      	ldr	r1, [pc, #232]	@ (8003224 <plotter_begin+0x33c>)
 800313c:	483a      	ldr	r0, [pc, #232]	@ (8003228 <plotter_begin+0x340>)
 800313e:	f7ff fb39 	bl	80027b4 <Kalman_Start>

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 8003142:	23c8      	movs	r3, #200	@ 0xc8
 8003144:	9301      	str	r3, [sp, #4]
 8003146:	2315      	movs	r3, #21
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	4b38      	ldr	r3, [pc, #224]	@ (800322c <plotter_begin+0x344>)
 800314c:	4a38      	ldr	r2, [pc, #224]	@ (8003230 <plotter_begin+0x348>)
 800314e:	4939      	ldr	r1, [pc, #228]	@ (8003234 <plotter_begin+0x34c>)
 8003150:	4839      	ldr	r0, [pc, #228]	@ (8003238 <plotter_begin+0x350>)
 8003152:	f7fe fa65 	bl	8001620 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8003156:	4839      	ldr	r0, [pc, #228]	@ (800323c <plotter_begin+0x354>)
 8003158:	f004 fb68 	bl	800782c <HAL_TIM_Base_Start_IT>
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000524 	.word	0x20000524
 8003168:	3e6eeeef 	.word	0x3e6eeeef
 800316c:	be6eeeef 	.word	0xbe6eeeef
 8003170:	00000000 	.word	0x00000000
 8003174:	3d4ccccd 	.word	0x3d4ccccd
 8003178:	20000568 	.word	0x20000568
 800317c:	200005ac 	.word	0x200005ac
 8003180:	200005f0 	.word	0x200005f0
 8003184:	3e99999a 	.word	0x3e99999a
 8003188:	20000634 	.word	0x20000634
 800318c:	200015fc 	.word	0x200015fc
 8003190:	20000394 	.word	0x20000394
 8003194:	20001530 	.word	0x20001530
 8003198:	200003e0 	.word	0x200003e0
 800319c:	20001794 	.word	0x20001794
 80031a0:	200002fc 	.word	0x200002fc
 80031a4:	48000800 	.word	0x48000800
 80031a8:	20000348 	.word	0x20000348
 80031ac:	200004f4 	.word	0x200004f4
 80031b0:	44fa0000 	.word	0x44fa0000
 80031b4:	20000048 	.word	0x20000048
 80031b8:	33d6bf95 	.word	0x33d6bf95
 80031bc:	2000042c 	.word	0x2000042c
 80031c0:	43fa0000 	.word	0x43fa0000
 80031c4:	20000458 	.word	0x20000458
 80031c8:	477fff00 	.word	0x477fff00
 80031cc:	20000484 	.word	0x20000484
 80031d0:	200004b0 	.word	0x200004b0
 80031d4:	20000000 	.word	0x20000000
 80031d8:	200004e8 	.word	0x200004e8
 80031dc:	200004dc 	.word	0x200004dc
 80031e0:	20000090 	.word	0x20000090
 80031e4:	200004ec 	.word	0x200004ec
 80031e8:	200004e0 	.word	0x200004e0
 80031ec:	457ff000 	.word	0x457ff000
 80031f0:	40533333 	.word	0x40533333
 80031f4:	20000da8 	.word	0x20000da8
 80031f8:	200001d8 	.word	0x200001d8
 80031fc:	2000050c 	.word	0x2000050c
 8003200:	447a0000 	.word	0x447a0000
 8003204:	20000684 	.word	0x20000684
 8003208:	20000678 	.word	0x20000678
 800320c:	2000069c 	.word	0x2000069c
 8003210:	20000690 	.word	0x20000690
 8003214:	2000014c 	.word	0x2000014c
 8003218:	2000010c 	.word	0x2000010c
 800321c:	20000a28 	.word	0x20000a28
 8003220:	200000fc 	.word	0x200000fc
 8003224:	200000bc 	.word	0x200000bc
 8003228:	200006a8 	.word	0x200006a8
 800322c:	200012d0 	.word	0x200012d0
 8003230:	20001860 	.word	0x20001860
 8003234:	2000192c 	.word	0x2000192c
 8003238:	20000df8 	.word	0x20000df8
 800323c:	20001464 	.word	0x20001464

08003240 <pen_up>:

	joy_x = joystick_x;
	joy_y = joystick_y;
}

void pen_up() {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
	PWM_write_duty(&servo, 50, 7);
 8003244:	eef1 0a0c 	vmov.f32	s1, #28	@ 0x40e00000  7.0
 8003248:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 8003258 <pen_up+0x18>
 800324c:	4803      	ldr	r0, [pc, #12]	@ (800325c <pen_up+0x1c>)
 800324e:	f7fe fa71 	bl	8001734 <PWM_write_duty>
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	42480000 	.word	0x42480000
 800325c:	200004f4 	.word	0x200004f4

08003260 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003278:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003280:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003314 <SIGNAL_init+0xb4>)
 80032a6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80032ae:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d828      	bhi.n	8003308 <SIGNAL_init+0xa8>
 80032b6:	a201      	add	r2, pc, #4	@ (adr r2, 80032bc <SIGNAL_init+0x5c>)
 80032b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032bc:	08003307 	.word	0x08003307
 80032c0:	080032cd 	.word	0x080032cd
 80032c4:	080032eb 	.word	0x080032eb
 80032c8:	080032f5 	.word	0x080032f5
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80032d8:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a0e      	ldr	r2, [pc, #56]	@ (8003318 <SIGNAL_init+0xb8>)
 80032de:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80032e6:	621a      	str	r2, [r3, #32]
            break;
 80032e8:	e00e      	b.n	8003308 <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80032f0:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80032f2:	e009      	b.n	8003308 <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003302:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8003304:	e000      	b.n	8003308 <SIGNAL_init+0xa8>
            break;
 8003306:	bf00      	nop
    }
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	bf800000 	.word	0xbf800000
 8003318:	41200000 	.word	0x41200000

0800331c <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 800331c:	b480      	push	{r7}
 800331e:	b089      	sub	sp, #36	@ 0x24
 8003320:	af00      	add	r7, sp, #0
 8003322:	61f8      	str	r0, [r7, #28]
 8003324:	ed87 0a06 	vstr	s0, [r7, #24]
 8003328:	edc7 0a05 	vstr	s1, [r7, #20]
 800332c:	ed87 1a04 	vstr	s2, [r7, #16]
 8003330:	edc7 1a03 	vstr	s3, [r7, #12]
 8003334:	ed87 2a02 	vstr	s4, [r7, #8]
 8003338:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003366:	bf00      	nop
 8003368:	3724      	adds	r7, #36	@ 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <SIGNAL_config_chirp>:
                         float32_t f_start,
                         float32_t f_end,
                         float32_t duration,
                         ChirpType chirp_type,
                         float32_t min_setpoint,
                         float32_t max_setpoint) {
 8003372:	b480      	push	{r7}
 8003374:	b089      	sub	sp, #36	@ 0x24
 8003376:	af00      	add	r7, sp, #0
 8003378:	61f8      	str	r0, [r7, #28]
 800337a:	ed87 0a06 	vstr	s0, [r7, #24]
 800337e:	edc7 0a05 	vstr	s1, [r7, #20]
 8003382:	ed87 1a04 	vstr	s2, [r7, #16]
 8003386:	edc7 1a03 	vstr	s3, [r7, #12]
 800338a:	460b      	mov	r3, r1
 800338c:	ed87 2a01 	vstr	s4, [r7, #4]
 8003390:	edc7 2a00 	vstr	s5, [r7]
 8003394:	72fb      	strb	r3, [r7, #11]
    sg->type = SIGNAL_CHIRP;
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	2201      	movs	r2, #1
 800339a:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	605a      	str	r2, [r3, #4]
    sg->f_start = f_start;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	619a      	str	r2, [r3, #24]
    sg->f_end = f_end;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	61da      	str	r2, [r3, #28]
    sg->duration = duration;
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	621a      	str	r2, [r3, #32]
    sg->chirp_type = chirp_type;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	7afa      	ldrb	r2, [r7, #11]
 80033b8:	751a      	strb	r2, [r3, #20]
    sg->t = 0.0f;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	625a      	str	r2, [r3, #36]	@ 0x24
    sg->min_setpoint = min_setpoint;
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80033ce:	bf00      	nop
 80033d0:	3724      	adds	r7, #36	@ 0x24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 80033da:	b480      	push	{r7}
 80033dc:	b089      	sub	sp, #36	@ 0x24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	61f8      	str	r0, [r7, #28]
 80033e2:	ed87 0a06 	vstr	s0, [r7, #24]
 80033e6:	edc7 0a05 	vstr	s1, [r7, #20]
 80033ea:	ed87 1a04 	vstr	s2, [r7, #16]
 80033ee:	edc7 1a03 	vstr	s3, [r7, #12]
 80033f2:	ed87 2a02 	vstr	s4, [r7, #8]
 80033f6:	edc7 2a01 	vstr	s5, [r7, #4]
 80033fa:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	2202      	movs	r2, #2
 8003402:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800342e:	bf00      	nop
 8003430:	3724      	adds	r7, #36	@ 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <SIGNAL_config_ramp>:
                        float32_t ramp_start,
                        float32_t ramp_end,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 800343a:	b480      	push	{r7}
 800343c:	b08b      	sub	sp, #44	@ 0x2c
 800343e:	af00      	add	r7, sp, #0
 8003440:	6278      	str	r0, [r7, #36]	@ 0x24
 8003442:	ed87 0a08 	vstr	s0, [r7, #32]
 8003446:	edc7 0a07 	vstr	s1, [r7, #28]
 800344a:	ed87 1a06 	vstr	s2, [r7, #24]
 800344e:	edc7 1a05 	vstr	s3, [r7, #20]
 8003452:	ed87 2a04 	vstr	s4, [r7, #16]
 8003456:	edc7 2a03 	vstr	s5, [r7, #12]
 800345a:	ed87 3a02 	vstr	s6, [r7, #8]
 800345e:	edc7 3a01 	vstr	s7, [r7, #4]
    sg->type = SIGNAL_RAMP;
 8003462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003464:	2203      	movs	r2, #3
 8003466:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8003468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346a:	6a3a      	ldr	r2, [r7, #32]
 800346c:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800346e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	609a      	str	r2, [r3, #8]
    sg->ramp_start = ramp_start;
 8003474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	62da      	str	r2, [r3, #44]	@ 0x2c
    sg->ramp_end = ramp_end;
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	631a      	str	r2, [r3, #48]	@ 0x30
    sg->phase = phase;
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8003486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8003492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8003498:	bf00      	nop
 800349a:	372c      	adds	r7, #44	@ 0x2c
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034aa:	4b0f      	ldr	r3, [pc, #60]	@ (80034e8 <HAL_MspInit+0x44>)
 80034ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ae:	4a0e      	ldr	r2, [pc, #56]	@ (80034e8 <HAL_MspInit+0x44>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80034b6:	4b0c      	ldr	r3, [pc, #48]	@ (80034e8 <HAL_MspInit+0x44>)
 80034b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034c2:	4b09      	ldr	r3, [pc, #36]	@ (80034e8 <HAL_MspInit+0x44>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	4a08      	ldr	r2, [pc, #32]	@ (80034e8 <HAL_MspInit+0x44>)
 80034c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ce:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <HAL_MspInit+0x44>)
 80034d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d6:	603b      	str	r3, [r7, #0]
 80034d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80034da:	f003 f947 	bl	800676c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000

080034ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <NMI_Handler+0x4>

080034f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034f8:	bf00      	nop
 80034fa:	e7fd      	b.n	80034f8 <HardFault_Handler+0x4>

080034fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003500:	bf00      	nop
 8003502:	e7fd      	b.n	8003500 <MemManage_Handler+0x4>

08003504 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003508:	bf00      	nop
 800350a:	e7fd      	b.n	8003508 <BusFault_Handler+0x4>

0800350c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <UsageFault_Handler+0x4>

08003514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003534:	bf00      	nop
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003542:	f000 fdab 	bl	800409c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003550:	4802      	ldr	r0, [pc, #8]	@ (800355c <DMA1_Channel1_IRQHandler+0x10>)
 8003552:	f002 fd4e 	bl	8005ff2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	20000244 	.word	0x20000244

08003560 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003564:	4802      	ldr	r0, [pc, #8]	@ (8003570 <DMA1_Channel2_IRQHandler+0x10>)
 8003566:	f002 fd44 	bl	8005ff2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200019f8 	.word	0x200019f8

08003574 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003578:	4802      	ldr	r0, [pc, #8]	@ (8003584 <DMA1_Channel3_IRQHandler+0x10>)
 800357a:	f002 fd3a 	bl	8005ff2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20001a58 	.word	0x20001a58

08003588 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800358c:	4802      	ldr	r0, [pc, #8]	@ (8003598 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800358e:	f004 fd7d 	bl	800808c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	20001860 	.word	0x20001860

0800359c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80035a0:	4802      	ldr	r0, [pc, #8]	@ (80035ac <TIM2_IRQHandler+0x10>)
 80035a2:	f004 fd73 	bl	800808c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20001464 	.word	0x20001464

080035b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035b4:	4802      	ldr	r0, [pc, #8]	@ (80035c0 <TIM3_IRQHandler+0x10>)
 80035b6:	f004 fd69 	bl	800808c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20001530 	.word	0x20001530

080035c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80035c8:	4802      	ldr	r0, [pc, #8]	@ (80035d4 <TIM4_IRQHandler+0x10>)
 80035ca:	f004 fd5f 	bl	800808c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200015fc 	.word	0x200015fc

080035d8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035dc:	4802      	ldr	r0, [pc, #8]	@ (80035e8 <USART2_IRQHandler+0x10>)
 80035de:	f006 faa9 	bl	8009b34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	2000192c 	.word	0x2000192c

080035ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80035f0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80035f4:	f002 fffe 	bl	80065f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035f8:	bf00      	nop
 80035fa:	bd80      	pop	{r7, pc}

080035fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003604:	4a14      	ldr	r2, [pc, #80]	@ (8003658 <_sbrk+0x5c>)
 8003606:	4b15      	ldr	r3, [pc, #84]	@ (800365c <_sbrk+0x60>)
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003610:	4b13      	ldr	r3, [pc, #76]	@ (8003660 <_sbrk+0x64>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003618:	4b11      	ldr	r3, [pc, #68]	@ (8003660 <_sbrk+0x64>)
 800361a:	4a12      	ldr	r2, [pc, #72]	@ (8003664 <_sbrk+0x68>)
 800361c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800361e:	4b10      	ldr	r3, [pc, #64]	@ (8003660 <_sbrk+0x64>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	429a      	cmp	r2, r3
 800362a:	d207      	bcs.n	800363c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800362c:	f008 f828 	bl	800b680 <__errno>
 8003630:	4603      	mov	r3, r0
 8003632:	220c      	movs	r2, #12
 8003634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003636:	f04f 33ff 	mov.w	r3, #4294967295
 800363a:	e009      	b.n	8003650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800363c:	4b08      	ldr	r3, [pc, #32]	@ (8003660 <_sbrk+0x64>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003642:	4b07      	ldr	r3, [pc, #28]	@ (8003660 <_sbrk+0x64>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	4a05      	ldr	r2, [pc, #20]	@ (8003660 <_sbrk+0x64>)
 800364c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}
 8003658:	20020000 	.word	0x20020000
 800365c:	00000400 	.word	0x00000400
 8003660:	20001460 	.word	0x20001460
 8003664:	20001c08 	.word	0x20001c08

08003668 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800366c:	4b06      	ldr	r3, [pc, #24]	@ (8003688 <SystemInit+0x20>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003672:	4a05      	ldr	r2, [pc, #20]	@ (8003688 <SystemInit+0x20>)
 8003674:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003678:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800367c:	bf00      	nop
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	e000ed00 	.word	0xe000ed00

0800368c <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003692:	f107 0310 	add.w	r3, r7, #16
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]
 800369c:	609a      	str	r2, [r3, #8]
 800369e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036a0:	1d3b      	adds	r3, r7, #4
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003724 <MX_TIM2_Init+0x98>)
 80036ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80036b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003724 <MX_TIM2_Init+0x98>)
 80036b4:	22a9      	movs	r2, #169	@ 0xa9
 80036b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003724 <MX_TIM2_Init+0x98>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80036be:	4b19      	ldr	r3, [pc, #100]	@ (8003724 <MX_TIM2_Init+0x98>)
 80036c0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80036c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036c6:	4b17      	ldr	r3, [pc, #92]	@ (8003724 <MX_TIM2_Init+0x98>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036cc:	4b15      	ldr	r3, [pc, #84]	@ (8003724 <MX_TIM2_Init+0x98>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036d2:	4814      	ldr	r0, [pc, #80]	@ (8003724 <MX_TIM2_Init+0x98>)
 80036d4:	f003 ffd6 	bl	8007684 <HAL_TIM_Base_Init>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80036de:	f7ff fbfd 	bl	8002edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80036e8:	f107 0310 	add.w	r3, r7, #16
 80036ec:	4619      	mov	r1, r3
 80036ee:	480d      	ldr	r0, [pc, #52]	@ (8003724 <MX_TIM2_Init+0x98>)
 80036f0:	f004 ff5a 	bl	80085a8 <HAL_TIM_ConfigClockSource>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80036fa:	f7ff fbef 	bl	8002edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003706:	1d3b      	adds	r3, r7, #4
 8003708:	4619      	mov	r1, r3
 800370a:	4806      	ldr	r0, [pc, #24]	@ (8003724 <MX_TIM2_Init+0x98>)
 800370c:	f005 ff32 	bl	8009574 <HAL_TIMEx_MasterConfigSynchronization>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003716:	f7ff fbe1 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800371a:	bf00      	nop
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	20001464 	.word	0x20001464

08003728 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b08c      	sub	sp, #48	@ 0x30
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800372e:	f107 030c 	add.w	r3, r7, #12
 8003732:	2224      	movs	r2, #36	@ 0x24
 8003734:	2100      	movs	r1, #0
 8003736:	4618      	mov	r0, r3
 8003738:	f007 ff8a 	bl	800b650 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800373c:	463b      	mov	r3, r7
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003746:	4b21      	ldr	r3, [pc, #132]	@ (80037cc <MX_TIM3_Init+0xa4>)
 8003748:	4a21      	ldr	r2, [pc, #132]	@ (80037d0 <MX_TIM3_Init+0xa8>)
 800374a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800374c:	4b1f      	ldr	r3, [pc, #124]	@ (80037cc <MX_TIM3_Init+0xa4>)
 800374e:	2200      	movs	r2, #0
 8003750:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003752:	4b1e      	ldr	r3, [pc, #120]	@ (80037cc <MX_TIM3_Init+0xa4>)
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003758:	4b1c      	ldr	r3, [pc, #112]	@ (80037cc <MX_TIM3_Init+0xa4>)
 800375a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800375e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003760:	4b1a      	ldr	r3, [pc, #104]	@ (80037cc <MX_TIM3_Init+0xa4>)
 8003762:	2200      	movs	r2, #0
 8003764:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003766:	4b19      	ldr	r3, [pc, #100]	@ (80037cc <MX_TIM3_Init+0xa4>)
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800376c:	2303      	movs	r3, #3
 800376e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003774:	2301      	movs	r3, #1
 8003776:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003778:	2300      	movs	r3, #0
 800377a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003780:	2300      	movs	r3, #0
 8003782:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003784:	2301      	movs	r3, #1
 8003786:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003788:	2300      	movs	r3, #0
 800378a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800378c:	2300      	movs	r3, #0
 800378e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	4619      	mov	r1, r3
 8003796:	480d      	ldr	r0, [pc, #52]	@ (80037cc <MX_TIM3_Init+0xa4>)
 8003798:	f004 fb36 	bl	8007e08 <HAL_TIM_Encoder_Init>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80037a2:	f7ff fb9b 	bl	8002edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037aa:	2300      	movs	r3, #0
 80037ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037ae:	463b      	mov	r3, r7
 80037b0:	4619      	mov	r1, r3
 80037b2:	4806      	ldr	r0, [pc, #24]	@ (80037cc <MX_TIM3_Init+0xa4>)
 80037b4:	f005 fede 	bl	8009574 <HAL_TIMEx_MasterConfigSynchronization>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80037be:	f7ff fb8d 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037c2:	bf00      	nop
 80037c4:	3730      	adds	r7, #48	@ 0x30
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20001530 	.word	0x20001530
 80037d0:	40000400 	.word	0x40000400

080037d4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b08c      	sub	sp, #48	@ 0x30
 80037d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80037da:	f107 030c 	add.w	r3, r7, #12
 80037de:	2224      	movs	r2, #36	@ 0x24
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f007 ff34 	bl	800b650 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037e8:	463b      	mov	r3, r7
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	605a      	str	r2, [r3, #4]
 80037f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80037f2:	4b21      	ldr	r3, [pc, #132]	@ (8003878 <MX_TIM4_Init+0xa4>)
 80037f4:	4a21      	ldr	r2, [pc, #132]	@ (800387c <MX_TIM4_Init+0xa8>)
 80037f6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80037f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003878 <MX_TIM4_Init+0xa4>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003878 <MX_TIM4_Init+0xa4>)
 8003800:	2200      	movs	r2, #0
 8003802:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003804:	4b1c      	ldr	r3, [pc, #112]	@ (8003878 <MX_TIM4_Init+0xa4>)
 8003806:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800380a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800380c:	4b1a      	ldr	r3, [pc, #104]	@ (8003878 <MX_TIM4_Init+0xa4>)
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003812:	4b19      	ldr	r3, [pc, #100]	@ (8003878 <MX_TIM4_Init+0xa4>)
 8003814:	2200      	movs	r2, #0
 8003816:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003818:	2303      	movs	r3, #3
 800381a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003820:	2301      	movs	r3, #1
 8003822:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800382c:	2300      	movs	r3, #0
 800382e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003830:	2301      	movs	r3, #1
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003834:	2300      	movs	r3, #0
 8003836:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800383c:	f107 030c 	add.w	r3, r7, #12
 8003840:	4619      	mov	r1, r3
 8003842:	480d      	ldr	r0, [pc, #52]	@ (8003878 <MX_TIM4_Init+0xa4>)
 8003844:	f004 fae0 	bl	8007e08 <HAL_TIM_Encoder_Init>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800384e:	f7ff fb45 	bl	8002edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003852:	2300      	movs	r3, #0
 8003854:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800385a:	463b      	mov	r3, r7
 800385c:	4619      	mov	r1, r3
 800385e:	4806      	ldr	r0, [pc, #24]	@ (8003878 <MX_TIM4_Init+0xa4>)
 8003860:	f005 fe88 	bl	8009574 <HAL_TIMEx_MasterConfigSynchronization>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800386a:	f7ff fb37 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800386e:	bf00      	nop
 8003870:	3730      	adds	r7, #48	@ 0x30
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200015fc 	.word	0x200015fc
 800387c:	40000800 	.word	0x40000800

08003880 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003886:	f107 0310 	add.w	r3, r7, #16
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	605a      	str	r2, [r3, #4]
 8003890:	609a      	str	r2, [r3, #8]
 8003892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003894:	1d3b      	adds	r3, r7, #4
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800389e:	4b1d      	ldr	r3, [pc, #116]	@ (8003914 <MX_TIM5_Init+0x94>)
 80038a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003918 <MX_TIM5_Init+0x98>)
 80038a2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 80038a4:	4b1b      	ldr	r3, [pc, #108]	@ (8003914 <MX_TIM5_Init+0x94>)
 80038a6:	22a9      	movs	r2, #169	@ 0xa9
 80038a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003914 <MX_TIM5_Init+0x94>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80038b0:	4b18      	ldr	r3, [pc, #96]	@ (8003914 <MX_TIM5_Init+0x94>)
 80038b2:	f04f 32ff 	mov.w	r2, #4294967295
 80038b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b8:	4b16      	ldr	r3, [pc, #88]	@ (8003914 <MX_TIM5_Init+0x94>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038be:	4b15      	ldr	r3, [pc, #84]	@ (8003914 <MX_TIM5_Init+0x94>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80038c4:	4813      	ldr	r0, [pc, #76]	@ (8003914 <MX_TIM5_Init+0x94>)
 80038c6:	f003 fedd 	bl	8007684 <HAL_TIM_Base_Init>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80038d0:	f7ff fb04 	bl	8002edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80038da:	f107 0310 	add.w	r3, r7, #16
 80038de:	4619      	mov	r1, r3
 80038e0:	480c      	ldr	r0, [pc, #48]	@ (8003914 <MX_TIM5_Init+0x94>)
 80038e2:	f004 fe61 	bl	80085a8 <HAL_TIM_ConfigClockSource>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80038ec:	f7ff faf6 	bl	8002edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f0:	2300      	movs	r3, #0
 80038f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	4619      	mov	r1, r3
 80038fc:	4805      	ldr	r0, [pc, #20]	@ (8003914 <MX_TIM5_Init+0x94>)
 80038fe:	f005 fe39 	bl	8009574 <HAL_TIMEx_MasterConfigSynchronization>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003908:	f7ff fae8 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800390c:	bf00      	nop
 800390e:	3720      	adds	r7, #32
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	200016c8 	.word	0x200016c8
 8003918:	40000c00 	.word	0x40000c00

0800391c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b09c      	sub	sp, #112	@ 0x70
 8003920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003922:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003930:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800393c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]
 800394c:	615a      	str	r2, [r3, #20]
 800394e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003950:	1d3b      	adds	r3, r7, #4
 8003952:	2234      	movs	r2, #52	@ 0x34
 8003954:	2100      	movs	r1, #0
 8003956:	4618      	mov	r0, r3
 8003958:	f007 fe7a 	bl	800b650 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800395c:	4b51      	ldr	r3, [pc, #324]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 800395e:	4a52      	ldr	r2, [pc, #328]	@ (8003aa8 <MX_TIM8_Init+0x18c>)
 8003960:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003962:	4b50      	ldr	r3, [pc, #320]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 8003964:	2200      	movs	r2, #0
 8003966:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003968:	4b4e      	ldr	r3, [pc, #312]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800396e:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 8003970:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003974:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003976:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800397c:	4b49      	ldr	r3, [pc, #292]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 800397e:	2200      	movs	r2, #0
 8003980:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003982:	4b48      	ldr	r3, [pc, #288]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003988:	4846      	ldr	r0, [pc, #280]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 800398a:	f003 fe7b 	bl	8007684 <HAL_TIM_Base_Init>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8003994:	f7ff faa2 	bl	8002edc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003998:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800399c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800399e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80039a2:	4619      	mov	r1, r3
 80039a4:	483f      	ldr	r0, [pc, #252]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 80039a6:	f004 fdff 	bl	80085a8 <HAL_TIM_ConfigClockSource>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80039b0:	f7ff fa94 	bl	8002edc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80039b4:	483b      	ldr	r0, [pc, #236]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 80039b6:	f003 ffb1 	bl	800791c <HAL_TIM_PWM_Init>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d001      	beq.n	80039c4 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80039c0:	f7ff fa8c 	bl	8002edc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c4:	2300      	movs	r3, #0
 80039c6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80039c8:	2300      	movs	r3, #0
 80039ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039cc:	2300      	movs	r3, #0
 80039ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80039d0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80039d4:	4619      	mov	r1, r3
 80039d6:	4833      	ldr	r0, [pc, #204]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 80039d8:	f005 fdcc 	bl	8009574 <HAL_TIMEx_MasterConfigSynchronization>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80039e2:	f7ff fa7b 	bl	8002edc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039e6:	2360      	movs	r3, #96	@ 0x60
 80039e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ee:	2300      	movs	r3, #0
 80039f0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039f2:	2300      	movs	r3, #0
 80039f4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039f6:	2300      	movs	r3, #0
 80039f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039fe:	2300      	movs	r3, #0
 8003a00:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a06:	2200      	movs	r2, #0
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4826      	ldr	r0, [pc, #152]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 8003a0c:	f004 fcb8 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8003a16:	f7ff fa61 	bl	8002edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a1e:	2204      	movs	r2, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4820      	ldr	r0, [pc, #128]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 8003a24:	f004 fcac 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8003a2e:	f7ff fa55 	bl	8002edc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003a36:	2208      	movs	r2, #8
 8003a38:	4619      	mov	r1, r3
 8003a3a:	481a      	ldr	r0, [pc, #104]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 8003a3c:	f004 fca0 	bl	8008380 <HAL_TIM_PWM_ConfigChannel>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8003a46:	f7ff fa49 	bl	8002edc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a52:	2300      	movs	r3, #0
 8003a54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003a62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003a70:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a74:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003a76:	2300      	movs	r3, #0
 8003a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003a82:	1d3b      	adds	r3, r7, #4
 8003a84:	4619      	mov	r1, r3
 8003a86:	4807      	ldr	r0, [pc, #28]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 8003a88:	f005 fe0a 	bl	80096a0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8003a92:	f7ff fa23 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003a96:	4803      	ldr	r0, [pc, #12]	@ (8003aa4 <MX_TIM8_Init+0x188>)
 8003a98:	f000 f924 	bl	8003ce4 <HAL_TIM_MspPostInit>

}
 8003a9c:	bf00      	nop
 8003a9e:	3770      	adds	r7, #112	@ 0x70
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	20001794 	.word	0x20001794
 8003aa8:	40013400 	.word	0x40013400

08003aac <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003ab0:	4b14      	ldr	r3, [pc, #80]	@ (8003b04 <MX_TIM16_Init+0x58>)
 8003ab2:	4a15      	ldr	r2, [pc, #84]	@ (8003b08 <MX_TIM16_Init+0x5c>)
 8003ab4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8003ab6:	4b13      	ldr	r3, [pc, #76]	@ (8003b04 <MX_TIM16_Init+0x58>)
 8003ab8:	22a9      	movs	r2, #169	@ 0xa9
 8003aba:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003abc:	4b11      	ldr	r3, [pc, #68]	@ (8003b04 <MX_TIM16_Init+0x58>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8003ac2:	4b10      	ldr	r3, [pc, #64]	@ (8003b04 <MX_TIM16_Init+0x58>)
 8003ac4:	f240 4279 	movw	r2, #1145	@ 0x479
 8003ac8:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aca:	4b0e      	ldr	r3, [pc, #56]	@ (8003b04 <MX_TIM16_Init+0x58>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <MX_TIM16_Init+0x58>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <MX_TIM16_Init+0x58>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003adc:	4809      	ldr	r0, [pc, #36]	@ (8003b04 <MX_TIM16_Init+0x58>)
 8003ade:	f003 fdd1 	bl	8007684 <HAL_TIM_Base_Init>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003ae8:	f7ff f9f8 	bl	8002edc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003aec:	2108      	movs	r1, #8
 8003aee:	4805      	ldr	r0, [pc, #20]	@ (8003b04 <MX_TIM16_Init+0x58>)
 8003af0:	f004 f894 	bl	8007c1c <HAL_TIM_OnePulse_Init>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003afa:	f7ff f9ef 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003afe:	bf00      	nop
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20001860 	.word	0x20001860
 8003b08:	40014400 	.word	0x40014400

08003b0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b1c:	d114      	bne.n	8003b48 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b1e:	4b2b      	ldr	r3, [pc, #172]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b22:	4a2a      	ldr	r2, [pc, #168]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b2a:	4b28      	ldr	r3, [pc, #160]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	2100      	movs	r1, #0
 8003b3a:	201c      	movs	r0, #28
 8003b3c:	f002 f841 	bl	8005bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b40:	201c      	movs	r0, #28
 8003b42:	f002 f858 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003b46:	e03c      	b.n	8003bc2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM5)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a20      	ldr	r2, [pc, #128]	@ (8003bd0 <HAL_TIM_Base_MspInit+0xc4>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d10c      	bne.n	8003b6c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b52:	4b1e      	ldr	r3, [pc, #120]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b56:	4a1d      	ldr	r2, [pc, #116]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003b58:	f043 0308 	orr.w	r3, r3, #8
 8003b5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
}
 8003b6a:	e02a      	b.n	8003bc2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM8)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a18      	ldr	r2, [pc, #96]	@ (8003bd4 <HAL_TIM_Base_MspInit+0xc8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10c      	bne.n	8003b90 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003b76:	4b15      	ldr	r3, [pc, #84]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b7a:	4a14      	ldr	r2, [pc, #80]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003b7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003b80:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b82:	4b12      	ldr	r3, [pc, #72]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b8a:	60fb      	str	r3, [r7, #12]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
}
 8003b8e:	e018      	b.n	8003bc2 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM16)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a10      	ldr	r2, [pc, #64]	@ (8003bd8 <HAL_TIM_Base_MspInit+0xcc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d113      	bne.n	8003bc2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003b9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ba6:	4b09      	ldr	r3, [pc, #36]	@ (8003bcc <HAL_TIM_Base_MspInit+0xc0>)
 8003ba8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bae:	60bb      	str	r3, [r7, #8]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	2019      	movs	r0, #25
 8003bb8:	f002 f803 	bl	8005bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003bbc:	2019      	movs	r0, #25
 8003bbe:	f002 f81a 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40000c00 	.word	0x40000c00
 8003bd4:	40013400 	.word	0x40013400
 8003bd8:	40014400 	.word	0x40014400

08003bdc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b08c      	sub	sp, #48	@ 0x30
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be4:	f107 031c 	add.w	r3, r7, #28
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a37      	ldr	r2, [pc, #220]	@ (8003cd8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d131      	bne.n	8003c62 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bfe:	4b37      	ldr	r3, [pc, #220]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c02:	4a36      	ldr	r2, [pc, #216]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c04:	f043 0302 	orr.w	r3, r3, #2
 8003c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0a:	4b34      	ldr	r3, [pc, #208]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	61bb      	str	r3, [r7, #24]
 8003c14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c16:	4b31      	ldr	r3, [pc, #196]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1a:	4a30      	ldr	r2, [pc, #192]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c22:	4b2e      	ldr	r3, [pc, #184]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c2e:	23c0      	movs	r3, #192	@ 0xc0
 8003c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c32:	2302      	movs	r3, #2
 8003c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c42:	f107 031c 	add.w	r3, r7, #28
 8003c46:	4619      	mov	r1, r3
 8003c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c4c:	f002 fb20 	bl	8006290 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2100      	movs	r1, #0
 8003c54:	201d      	movs	r0, #29
 8003c56:	f001 ffb4 	bl	8005bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c5a:	201d      	movs	r0, #29
 8003c5c:	f001 ffcb 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003c60:	e036      	b.n	8003cd0 <HAL_TIM_Encoder_MspInit+0xf4>
  else if(tim_encoderHandle->Instance==TIM4)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce0 <HAL_TIM_Encoder_MspInit+0x104>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d131      	bne.n	8003cd0 <HAL_TIM_Encoder_MspInit+0xf4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c70:	4a1a      	ldr	r2, [pc, #104]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c72:	f043 0304 	orr.w	r3, r3, #4
 8003c76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c78:	4b18      	ldr	r3, [pc, #96]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c84:	4b15      	ldr	r3, [pc, #84]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c88:	4a14      	ldr	r2, [pc, #80]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c90:	4b12      	ldr	r3, [pc, #72]	@ (8003cdc <HAL_TIM_Encoder_MspInit+0x100>)
 8003c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	60fb      	str	r3, [r7, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003c9c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003caa:	2300      	movs	r3, #0
 8003cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8003cae:	230a      	movs	r3, #10
 8003cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb2:	f107 031c 	add.w	r3, r7, #28
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003cbc:	f002 fae8 	bl	8006290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	201e      	movs	r0, #30
 8003cc6:	f001 ff7c 	bl	8005bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003cca:	201e      	movs	r0, #30
 8003ccc:	f001 ff93 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
}
 8003cd0:	bf00      	nop
 8003cd2:	3730      	adds	r7, #48	@ 0x30
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40000400 	.word	0x40000400
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	40000800 	.word	0x40000800

08003ce4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08a      	sub	sp, #40	@ 0x28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	609a      	str	r2, [r3, #8]
 8003cf8:	60da      	str	r2, [r3, #12]
 8003cfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a1f      	ldr	r2, [pc, #124]	@ (8003d80 <HAL_TIM_MspPostInit+0x9c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d138      	bne.n	8003d78 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d06:	4b1f      	ldr	r3, [pc, #124]	@ (8003d84 <HAL_TIM_MspPostInit+0xa0>)
 8003d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d84 <HAL_TIM_MspPostInit+0xa0>)
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d12:	4b1c      	ldr	r3, [pc, #112]	@ (8003d84 <HAL_TIM_MspPostInit+0xa0>)
 8003d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d1e:	4b19      	ldr	r3, [pc, #100]	@ (8003d84 <HAL_TIM_MspPostInit+0xa0>)
 8003d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d22:	4a18      	ldr	r2, [pc, #96]	@ (8003d84 <HAL_TIM_MspPostInit+0xa0>)
 8003d24:	f043 0302 	orr.w	r3, r3, #2
 8003d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d2a:	4b16      	ldr	r3, [pc, #88]	@ (8003d84 <HAL_TIM_MspPostInit+0xa0>)
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d36:	23c0      	movs	r3, #192	@ 0xc0
 8003d38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d42:	2300      	movs	r3, #0
 8003d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003d46:	2304      	movs	r3, #4
 8003d48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d4a:	f107 0314 	add.w	r3, r7, #20
 8003d4e:	4619      	mov	r1, r3
 8003d50:	480d      	ldr	r0, [pc, #52]	@ (8003d88 <HAL_TIM_MspPostInit+0xa4>)
 8003d52:	f002 fa9d 	bl	8006290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003d56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d60:	2300      	movs	r3, #0
 8003d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d64:	2300      	movs	r3, #0
 8003d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8003d68:	230a      	movs	r3, #10
 8003d6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d6c:	f107 0314 	add.w	r3, r7, #20
 8003d70:	4619      	mov	r1, r3
 8003d72:	4806      	ldr	r0, [pc, #24]	@ (8003d8c <HAL_TIM_MspPostInit+0xa8>)
 8003d74:	f002 fa8c 	bl	8006290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003d78:	bf00      	nop
 8003d7a:	3728      	adds	r7, #40	@ 0x28
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	40013400 	.word	0x40013400
 8003d84:	40021000 	.word	0x40021000
 8003d88:	48000800 	.word	0x48000800
 8003d8c:	48000400 	.word	0x48000400

08003d90 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003d94:	4b23      	ldr	r3, [pc, #140]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003d96:	4a24      	ldr	r2, [pc, #144]	@ (8003e28 <MX_USART2_UART_Init+0x98>)
 8003d98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8003d9a:	4b22      	ldr	r3, [pc, #136]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003d9c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8003da0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8003da2:	4b20      	ldr	r3, [pc, #128]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003da4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003da8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003daa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8003db0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003db2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003db6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003db8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003dba:	220c      	movs	r2, #12
 8003dbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003dbe:	4b19      	ldr	r3, [pc, #100]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dc4:	4b17      	ldr	r3, [pc, #92]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dca:	4b16      	ldr	r3, [pc, #88]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003dd0:	4b14      	ldr	r3, [pc, #80]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dd6:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ddc:	4811      	ldr	r0, [pc, #68]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003dde:	f005 fd43 	bl	8009868 <HAL_UART_Init>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8003de8:	f7ff f878 	bl	8002edc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dec:	2100      	movs	r1, #0
 8003dee:	480d      	ldr	r0, [pc, #52]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003df0:	f007 fa96 	bl	800b320 <HAL_UARTEx_SetTxFifoThreshold>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8003dfa:	f7ff f86f 	bl	8002edc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4808      	ldr	r0, [pc, #32]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003e02:	f007 facb 	bl	800b39c <HAL_UARTEx_SetRxFifoThreshold>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8003e0c:	f7ff f866 	bl	8002edc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003e10:	4804      	ldr	r0, [pc, #16]	@ (8003e24 <MX_USART2_UART_Init+0x94>)
 8003e12:	f007 fa4c 	bl	800b2ae <HAL_UARTEx_DisableFifoMode>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8003e1c:	f7ff f85e 	bl	8002edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	2000192c 	.word	0x2000192c
 8003e28:	40004400 	.word	0x40004400

08003e2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b09e      	sub	sp, #120	@ 0x78
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e44:	f107 0310 	add.w	r3, r7, #16
 8003e48:	2254      	movs	r2, #84	@ 0x54
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f007 fbff 	bl	800b650 <memset>
  if(uartHandle->Instance==USART2)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a4d      	ldr	r2, [pc, #308]	@ (8003f8c <HAL_UART_MspInit+0x160>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	f040 8092 	bne.w	8003f82 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e66:	f107 0310 	add.w	r3, r7, #16
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f003 f9bc 	bl	80071e8 <HAL_RCCEx_PeriphCLKConfig>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003e76:	f7ff f831 	bl	8002edc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e7a:	4b45      	ldr	r3, [pc, #276]	@ (8003f90 <HAL_UART_MspInit+0x164>)
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7e:	4a44      	ldr	r2, [pc, #272]	@ (8003f90 <HAL_UART_MspInit+0x164>)
 8003e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e84:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e86:	4b42      	ldr	r3, [pc, #264]	@ (8003f90 <HAL_UART_MspInit+0x164>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e92:	4b3f      	ldr	r3, [pc, #252]	@ (8003f90 <HAL_UART_MspInit+0x164>)
 8003e94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e96:	4a3e      	ldr	r2, [pc, #248]	@ (8003f90 <HAL_UART_MspInit+0x164>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003f90 <HAL_UART_MspInit+0x164>)
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003eaa:	230c      	movs	r3, #12
 8003eac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eae:	2302      	movs	r3, #2
 8003eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003eba:	2307      	movs	r3, #7
 8003ebc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ebe:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003ec8:	f002 f9e2 	bl	8006290 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003ecc:	4b31      	ldr	r3, [pc, #196]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003ece:	4a32      	ldr	r2, [pc, #200]	@ (8003f98 <HAL_UART_MspInit+0x16c>)
 8003ed0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003ed2:	4b30      	ldr	r3, [pc, #192]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003ed4:	221a      	movs	r2, #26
 8003ed6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ed8:	4b2e      	ldr	r3, [pc, #184]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ede:	4b2d      	ldr	r3, [pc, #180]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003ee6:	2280      	movs	r2, #128	@ 0x80
 8003ee8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003eea:	4b2a      	ldr	r3, [pc, #168]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ef0:	4b28      	ldr	r3, [pc, #160]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003ef6:	4b27      	ldr	r3, [pc, #156]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003efc:	4b25      	ldr	r3, [pc, #148]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003f02:	4824      	ldr	r0, [pc, #144]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003f04:	f001 fe92 	bl	8005c2c <HAL_DMA_Init>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003f0e:	f7fe ffe5 	bl	8002edc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1f      	ldr	r2, [pc, #124]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003f16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003f1a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f94 <HAL_UART_MspInit+0x168>)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8003f20:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f22:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa0 <HAL_UART_MspInit+0x174>)
 8003f24:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003f26:	4b1d      	ldr	r3, [pc, #116]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f28:	221b      	movs	r2, #27
 8003f2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f2e:	2210      	movs	r2, #16
 8003f30:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f32:	4b1a      	ldr	r3, [pc, #104]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f38:	4b18      	ldr	r3, [pc, #96]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f3a:	2280      	movs	r2, #128	@ 0x80
 8003f3c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f3e:	4b17      	ldr	r3, [pc, #92]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f44:	4b15      	ldr	r3, [pc, #84]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003f4a:	4b14      	ldr	r3, [pc, #80]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f50:	4b12      	ldr	r3, [pc, #72]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f56:	4811      	ldr	r0, [pc, #68]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f58:	f001 fe68 	bl	8005c2c <HAL_DMA_Init>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8003f62:	f7fe ffbb 	bl	8002edc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a0c      	ldr	r2, [pc, #48]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f6a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003f6c:	4a0b      	ldr	r2, [pc, #44]	@ (8003f9c <HAL_UART_MspInit+0x170>)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003f72:	2200      	movs	r2, #0
 8003f74:	2100      	movs	r1, #0
 8003f76:	2026      	movs	r0, #38	@ 0x26
 8003f78:	f001 fe23 	bl	8005bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003f7c:	2026      	movs	r0, #38	@ 0x26
 8003f7e:	f001 fe3a 	bl	8005bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003f82:	bf00      	nop
 8003f84:	3778      	adds	r7, #120	@ 0x78
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40004400 	.word	0x40004400
 8003f90:	40021000 	.word	0x40021000
 8003f94:	200019f8 	.word	0x200019f8
 8003f98:	4002001c 	.word	0x4002001c
 8003f9c:	20001a58 	.word	0x20001a58
 8003fa0:	40020030 	.word	0x40020030

08003fa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fa4:	480d      	ldr	r0, [pc, #52]	@ (8003fdc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fa6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fa8:	f7ff fb5e 	bl	8003668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fac:	480c      	ldr	r0, [pc, #48]	@ (8003fe0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fae:	490d      	ldr	r1, [pc, #52]	@ (8003fe4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe8 <LoopForever+0xe>)
  movs r3, #0
 8003fb2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003fb4:	e002      	b.n	8003fbc <LoopCopyDataInit>

08003fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fba:	3304      	adds	r3, #4

08003fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fc0:	d3f9      	bcc.n	8003fb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8003fec <LoopForever+0x12>)
  ldr r4, =_ebss
 8003fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8003ff0 <LoopForever+0x16>)
  movs r3, #0
 8003fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fc8:	e001      	b.n	8003fce <LoopFillZerobss>

08003fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fcc:	3204      	adds	r2, #4

08003fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fd0:	d3fb      	bcc.n	8003fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fd2:	f007 fb5b 	bl	800b68c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fd6:	f7fe fda7 	bl	8002b28 <main>

08003fda <LoopForever>:

LoopForever:
    b LoopForever
 8003fda:	e7fe      	b.n	8003fda <LoopForever>
  ldr   r0, =_estack
 8003fdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fe0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fe4:	200001b8 	.word	0x200001b8
  ldr r2, =_sidata
 8003fe8:	0800c68c 	.word	0x0800c68c
  ldr r2, =_sbss
 8003fec:	200001b8 	.word	0x200001b8
  ldr r4, =_ebss
 8003ff0:	20001c04 	.word	0x20001c04

08003ff4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ff4:	e7fe      	b.n	8003ff4 <ADC1_2_IRQHandler>

08003ff6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004000:	2003      	movs	r0, #3
 8004002:	f001 fdd3 	bl	8005bac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004006:	2000      	movs	r0, #0
 8004008:	f000 f80e 	bl	8004028 <HAL_InitTick>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	71fb      	strb	r3, [r7, #7]
 8004016:	e001      	b.n	800401c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004018:	f7ff fa44 	bl	80034a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800401c:	79fb      	ldrb	r3, [r7, #7]

}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004030:	2300      	movs	r3, #0
 8004032:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004034:	4b16      	ldr	r3, [pc, #88]	@ (8004090 <HAL_InitTick+0x68>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d022      	beq.n	8004082 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800403c:	4b15      	ldr	r3, [pc, #84]	@ (8004094 <HAL_InitTick+0x6c>)
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <HAL_InitTick+0x68>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004048:	fbb1 f3f3 	udiv	r3, r1, r3
 800404c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fdde 	bl	8005c12 <HAL_SYSTICK_Config>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10f      	bne.n	800407c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2b0f      	cmp	r3, #15
 8004060:	d809      	bhi.n	8004076 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004062:	2200      	movs	r2, #0
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	f04f 30ff 	mov.w	r0, #4294967295
 800406a:	f001 fdaa 	bl	8005bc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800406e:	4a0a      	ldr	r2, [pc, #40]	@ (8004098 <HAL_InitTick+0x70>)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e007      	b.n	8004086 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	e004      	b.n	8004086 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	73fb      	strb	r3, [r7, #15]
 8004080:	e001      	b.n	8004086 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004086:	7bfb      	ldrb	r3, [r7, #15]
}
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000164 	.word	0x20000164
 8004094:	2000015c 	.word	0x2000015c
 8004098:	20000160 	.word	0x20000160

0800409c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040a0:	4b05      	ldr	r3, [pc, #20]	@ (80040b8 <HAL_IncTick+0x1c>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b05      	ldr	r3, [pc, #20]	@ (80040bc <HAL_IncTick+0x20>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4413      	add	r3, r2
 80040aa:	4a03      	ldr	r2, [pc, #12]	@ (80040b8 <HAL_IncTick+0x1c>)
 80040ac:	6013      	str	r3, [r2, #0]
}
 80040ae:	bf00      	nop
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	20001ab8 	.word	0x20001ab8
 80040bc:	20000164 	.word	0x20000164

080040c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  return uwTick;
 80040c4:	4b03      	ldr	r3, [pc, #12]	@ (80040d4 <HAL_GetTick+0x14>)
 80040c6:	681b      	ldr	r3, [r3, #0]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	20001ab8 	.word	0x20001ab8

080040d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040e0:	f7ff ffee 	bl	80040c0 <HAL_GetTick>
 80040e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d004      	beq.n	80040fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80040f2:	4b09      	ldr	r3, [pc, #36]	@ (8004118 <HAL_Delay+0x40>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040fc:	bf00      	nop
 80040fe:	f7ff ffdf 	bl	80040c0 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	68fa      	ldr	r2, [r7, #12]
 800410a:	429a      	cmp	r2, r3
 800410c:	d8f7      	bhi.n	80040fe <HAL_Delay+0x26>
  {
  }
}
 800410e:	bf00      	nop
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20000164 	.word	0x20000164

0800411c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	609a      	str	r2, [r3, #8]
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	431a      	orrs	r2, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004178:	4618      	mov	r0, r3
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3360      	adds	r3, #96	@ 0x60
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4b08      	ldr	r3, [pc, #32]	@ (80041c8 <LL_ADC_SetOffset+0x44>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	430a      	orrs	r2, r1
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80041bc:	bf00      	nop
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	03fff000 	.word	0x03fff000

080041cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3360      	adds	r3, #96	@ 0x60
 80041da:	461a      	mov	r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3360      	adds	r3, #96	@ 0x60
 8004208:	461a      	mov	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	431a      	orrs	r2, r3
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800422e:	b480      	push	{r7}
 8004230:	b087      	sub	sp, #28
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3360      	adds	r3, #96	@ 0x60
 800423e:	461a      	mov	r2, r3
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	431a      	orrs	r2, r3
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004258:	bf00      	nop
 800425a:	371c      	adds	r7, #28
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	3360      	adds	r3, #96	@ 0x60
 8004274:	461a      	mov	r2, r3
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	431a      	orrs	r2, r3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800428e:	bf00      	nop
 8004290:	371c      	adds	r7, #28
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800429a:	b480      	push	{r7}
 800429c:	b083      	sub	sp, #12
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	615a      	str	r2, [r3, #20]
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042d4:	2301      	movs	r3, #1
 80042d6:	e000      	b.n	80042da <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	370c      	adds	r7, #12
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042e6:	b480      	push	{r7}
 80042e8:	b087      	sub	sp, #28
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	60f8      	str	r0, [r7, #12]
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3330      	adds	r3, #48	@ 0x30
 80042f6:	461a      	mov	r2, r3
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	0a1b      	lsrs	r3, r3, #8
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	f003 030c 	and.w	r3, r3, #12
 8004302:	4413      	add	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f003 031f 	and.w	r3, r3, #31
 8004310:	211f      	movs	r1, #31
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	401a      	ands	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	0e9b      	lsrs	r3, r3, #26
 800431e:	f003 011f 	and.w	r1, r3, #31
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f003 031f 	and.w	r3, r3, #31
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	431a      	orrs	r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004332:	bf00      	nop
 8004334:	371c      	adds	r7, #28
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800433e:	b480      	push	{r7}
 8004340:	b087      	sub	sp, #28
 8004342:	af00      	add	r7, sp, #0
 8004344:	60f8      	str	r0, [r7, #12]
 8004346:	60b9      	str	r1, [r7, #8]
 8004348:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3314      	adds	r3, #20
 800434e:	461a      	mov	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	0e5b      	lsrs	r3, r3, #25
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	4413      	add	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	0d1b      	lsrs	r3, r3, #20
 8004366:	f003 031f 	and.w	r3, r3, #31
 800436a:	2107      	movs	r1, #7
 800436c:	fa01 f303 	lsl.w	r3, r1, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	401a      	ands	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	0d1b      	lsrs	r3, r3, #20
 8004378:	f003 031f 	and.w	r3, r3, #31
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	431a      	orrs	r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004388:	bf00      	nop
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ac:	43db      	mvns	r3, r3
 80043ae:	401a      	ands	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0318 	and.w	r3, r3, #24
 80043b6:	4908      	ldr	r1, [pc, #32]	@ (80043d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80043b8:	40d9      	lsrs	r1, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	400b      	ands	r3, r1
 80043be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c2:	431a      	orrs	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	0007ffff 	.word	0x0007ffff

080043dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f003 031f 	and.w	r3, r3, #31
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004408:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6093      	str	r3, [r2, #8]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800442c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004430:	d101      	bne.n	8004436 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004432:	2301      	movs	r3, #1
 8004434:	e000      	b.n	8004438 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004454:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004458:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800447c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004480:	d101      	bne.n	8004486 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044a8:	f043 0201 	orr.w	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80044cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044d0:	f043 0202 	orr.w	r2, r3, #2
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d101      	bne.n	80044fc <LL_ADC_IsEnabled+0x18>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <LL_ADC_IsEnabled+0x1a>
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d101      	bne.n	8004522 <LL_ADC_IsDisableOngoing+0x18>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <LL_ADC_IsDisableOngoing+0x1a>
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004540:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004544:	f043 0204 	orr.w	r2, r3, #4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b04      	cmp	r3, #4
 800456a:	d101      	bne.n	8004570 <LL_ADC_REG_IsConversionOngoing+0x18>
 800456c:	2301      	movs	r3, #1
 800456e:	e000      	b.n	8004572 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b08      	cmp	r3, #8
 8004590:	d101      	bne.n	8004596 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b089      	sub	sp, #36	@ 0x24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e1a9      	b.n	8004912 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d109      	bne.n	80045e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7fd ff83 	bl	80024d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff ff19 	bl	800441c <LL_ADC_IsDeepPowerDownEnabled>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d004      	beq.n	80045fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff feff 	bl	80043f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff ff34 	bl	800446c <LL_ADC_IsInternalRegulatorEnabled>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d115      	bne.n	8004636 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff ff18 	bl	8004444 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004614:	4b9c      	ldr	r3, [pc, #624]	@ (8004888 <HAL_ADC_Init+0x2e4>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	099b      	lsrs	r3, r3, #6
 800461a:	4a9c      	ldr	r2, [pc, #624]	@ (800488c <HAL_ADC_Init+0x2e8>)
 800461c:	fba2 2303 	umull	r2, r3, r2, r3
 8004620:	099b      	lsrs	r3, r3, #6
 8004622:	3301      	adds	r3, #1
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004628:	e002      	b.n	8004630 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b01      	subs	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f9      	bne.n	800462a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff ff16 	bl	800446c <LL_ADC_IsInternalRegulatorEnabled>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10d      	bne.n	8004662 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800464a:	f043 0210 	orr.w	r2, r3, #16
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004656:	f043 0201 	orr.w	r2, r3, #1
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ff76 	bl	8004558 <LL_ADC_REG_IsConversionOngoing>
 800466c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	f040 8142 	bne.w	8004900 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b00      	cmp	r3, #0
 8004680:	f040 813e 	bne.w	8004900 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004688:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800468c:	f043 0202 	orr.w	r2, r3, #2
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff23 	bl	80044e4 <LL_ADC_IsEnabled>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d141      	bne.n	8004728 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046ac:	d004      	beq.n	80046b8 <HAL_ADC_Init+0x114>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a77      	ldr	r2, [pc, #476]	@ (8004890 <HAL_ADC_Init+0x2ec>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10f      	bne.n	80046d8 <HAL_ADC_Init+0x134>
 80046b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80046bc:	f7ff ff12 	bl	80044e4 <LL_ADC_IsEnabled>
 80046c0:	4604      	mov	r4, r0
 80046c2:	4873      	ldr	r0, [pc, #460]	@ (8004890 <HAL_ADC_Init+0x2ec>)
 80046c4:	f7ff ff0e 	bl	80044e4 <LL_ADC_IsEnabled>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4323      	orrs	r3, r4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e012      	b.n	80046fe <HAL_ADC_Init+0x15a>
 80046d8:	486e      	ldr	r0, [pc, #440]	@ (8004894 <HAL_ADC_Init+0x2f0>)
 80046da:	f7ff ff03 	bl	80044e4 <LL_ADC_IsEnabled>
 80046de:	4604      	mov	r4, r0
 80046e0:	486d      	ldr	r0, [pc, #436]	@ (8004898 <HAL_ADC_Init+0x2f4>)
 80046e2:	f7ff feff 	bl	80044e4 <LL_ADC_IsEnabled>
 80046e6:	4603      	mov	r3, r0
 80046e8:	431c      	orrs	r4, r3
 80046ea:	486c      	ldr	r0, [pc, #432]	@ (800489c <HAL_ADC_Init+0x2f8>)
 80046ec:	f7ff fefa 	bl	80044e4 <LL_ADC_IsEnabled>
 80046f0:	4603      	mov	r3, r0
 80046f2:	4323      	orrs	r3, r4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d012      	beq.n	8004728 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800470a:	d004      	beq.n	8004716 <HAL_ADC_Init+0x172>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a5f      	ldr	r2, [pc, #380]	@ (8004890 <HAL_ADC_Init+0x2ec>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d101      	bne.n	800471a <HAL_ADC_Init+0x176>
 8004716:	4a62      	ldr	r2, [pc, #392]	@ (80048a0 <HAL_ADC_Init+0x2fc>)
 8004718:	e000      	b.n	800471c <HAL_ADC_Init+0x178>
 800471a:	4a62      	ldr	r2, [pc, #392]	@ (80048a4 <HAL_ADC_Init+0x300>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4619      	mov	r1, r3
 8004722:	4610      	mov	r0, r2
 8004724:	f7ff fcfa 	bl	800411c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7f5b      	ldrb	r3, [r3, #29]
 800472c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004732:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004738:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800473e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004746:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004752:	2b01      	cmp	r3, #1
 8004754:	d106      	bne.n	8004764 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475a:	3b01      	subs	r3, #1
 800475c:	045b      	lsls	r3, r3, #17
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	4313      	orrs	r3, r2
 8004762:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004778:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	4b48      	ldr	r3, [pc, #288]	@ (80048a8 <HAL_ADC_Init+0x304>)
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6812      	ldr	r2, [r2, #0]
 800478e:	69b9      	ldr	r1, [r7, #24]
 8004790:	430b      	orrs	r3, r1
 8004792:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff fee5 	bl	800457e <LL_ADC_INJ_IsConversionOngoing>
 80047b4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d17f      	bne.n	80048bc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d17c      	bne.n	80048bc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047c6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80047ce:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047de:	f023 0302 	bic.w	r3, r3, #2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6812      	ldr	r2, [r2, #0]
 80047e6:	69b9      	ldr	r1, [r7, #24]
 80047e8:	430b      	orrs	r3, r1
 80047ea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d017      	beq.n	8004824 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004802:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800480c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004810:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6911      	ldr	r1, [r2, #16]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	430b      	orrs	r3, r1
 800481e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004822:	e013      	b.n	800484c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004832:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	6812      	ldr	r2, [r2, #0]
 8004840:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004844:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004848:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004852:	2b01      	cmp	r3, #1
 8004854:	d12a      	bne.n	80048ac <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004860:	f023 0304 	bic.w	r3, r3, #4
 8004864:	687a      	ldr	r2, [r7, #4]
 8004866:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800486c:	4311      	orrs	r1, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004872:	4311      	orrs	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004878:	430a      	orrs	r2, r1
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	611a      	str	r2, [r3, #16]
 8004886:	e019      	b.n	80048bc <HAL_ADC_Init+0x318>
 8004888:	2000015c 	.word	0x2000015c
 800488c:	053e2d63 	.word	0x053e2d63
 8004890:	50000100 	.word	0x50000100
 8004894:	50000400 	.word	0x50000400
 8004898:	50000500 	.word	0x50000500
 800489c:	50000600 	.word	0x50000600
 80048a0:	50000300 	.word	0x50000300
 80048a4:	50000700 	.word	0x50000700
 80048a8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d10c      	bne.n	80048de <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ca:	f023 010f 	bic.w	r1, r3, #15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	1e5a      	subs	r2, r3, #1
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
 80048dc:	e007      	b.n	80048ee <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f022 020f 	bic.w	r2, r2, #15
 80048ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	f043 0201 	orr.w	r2, r3, #1
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048fe:	e007      	b.n	8004910 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004904:	f043 0210 	orr.w	r2, r3, #16
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004910:	7ffb      	ldrb	r3, [r7, #31]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3724      	adds	r7, #36	@ 0x24
 8004916:	46bd      	mov	sp, r7
 8004918:	bd90      	pop	{r4, r7, pc}
 800491a:	bf00      	nop

0800491c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004930:	d004      	beq.n	800493c <HAL_ADC_Start_DMA+0x20>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a5a      	ldr	r2, [pc, #360]	@ (8004aa0 <HAL_ADC_Start_DMA+0x184>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d101      	bne.n	8004940 <HAL_ADC_Start_DMA+0x24>
 800493c:	4b59      	ldr	r3, [pc, #356]	@ (8004aa4 <HAL_ADC_Start_DMA+0x188>)
 800493e:	e000      	b.n	8004942 <HAL_ADC_Start_DMA+0x26>
 8004940:	4b59      	ldr	r3, [pc, #356]	@ (8004aa8 <HAL_ADC_Start_DMA+0x18c>)
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fd4a 	bl	80043dc <LL_ADC_GetMultimode>
 8004948:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fe02 	bl	8004558 <LL_ADC_REG_IsConversionOngoing>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	f040 809b 	bne.w	8004a92 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004962:	2b01      	cmp	r3, #1
 8004964:	d101      	bne.n	800496a <HAL_ADC_Start_DMA+0x4e>
 8004966:	2302      	movs	r3, #2
 8004968:	e096      	b.n	8004a98 <HAL_ADC_Start_DMA+0x17c>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a4d      	ldr	r2, [pc, #308]	@ (8004aac <HAL_ADC_Start_DMA+0x190>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d008      	beq.n	800498e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	2b05      	cmp	r3, #5
 8004986:	d002      	beq.n	800498e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	2b09      	cmp	r3, #9
 800498c:	d17a      	bne.n	8004a84 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 fcf6 	bl	8005380 <ADC_Enable>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004998:	7dfb      	ldrb	r3, [r7, #23]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d16d      	bne.n	8004a7a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80049a6:	f023 0301 	bic.w	r3, r3, #1
 80049aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a3a      	ldr	r2, [pc, #232]	@ (8004aa0 <HAL_ADC_Start_DMA+0x184>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_ADC_Start_DMA+0xb4>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ab0 <HAL_ADC_Start_DMA+0x194>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d002      	beq.n	80049cc <HAL_ADC_Start_DMA+0xb0>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	e003      	b.n	80049d4 <HAL_ADC_Start_DMA+0xb8>
 80049cc:	4b39      	ldr	r3, [pc, #228]	@ (8004ab4 <HAL_ADC_Start_DMA+0x198>)
 80049ce:	e001      	b.n	80049d4 <HAL_ADC_Start_DMA+0xb8>
 80049d0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	4293      	cmp	r3, r2
 80049da:	d002      	beq.n	80049e2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d105      	bne.n	80049ee <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d006      	beq.n	8004a08 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fe:	f023 0206 	bic.w	r2, r3, #6
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	661a      	str	r2, [r3, #96]	@ 0x60
 8004a06:	e002      	b.n	8004a0e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a12:	4a29      	ldr	r2, [pc, #164]	@ (8004ab8 <HAL_ADC_Start_DMA+0x19c>)
 8004a14:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a1a:	4a28      	ldr	r2, [pc, #160]	@ (8004abc <HAL_ADC_Start_DMA+0x1a0>)
 8004a1c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	4a27      	ldr	r2, [pc, #156]	@ (8004ac0 <HAL_ADC_Start_DMA+0x1a4>)
 8004a24:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	221c      	movs	r2, #28
 8004a2c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0210 	orr.w	r2, r2, #16
 8004a44:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3340      	adds	r3, #64	@ 0x40
 8004a60:	4619      	mov	r1, r3
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f001 f989 	bl	8005d7c <HAL_DMA_Start_IT>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff fd5c 	bl	8004530 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a78:	e00d      	b.n	8004a96 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004a82:	e008      	b.n	8004a96 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004a90:	e001      	b.n	8004a96 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a92:	2302      	movs	r3, #2
 8004a94:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	50000100 	.word	0x50000100
 8004aa4:	50000300 	.word	0x50000300
 8004aa8:	50000700 	.word	0x50000700
 8004aac:	50000600 	.word	0x50000600
 8004ab0:	50000500 	.word	0x50000500
 8004ab4:	50000400 	.word	0x50000400
 8004ab8:	0800556b 	.word	0x0800556b
 8004abc:	08005643 	.word	0x08005643
 8004ac0:	0800565f 	.word	0x0800565f

08004ac4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b0b6      	sub	sp, #216	@ 0xd8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d102      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x24>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	f000 bc13 	b.w	800534a <HAL_ADC_ConfigChannel+0x84a>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7ff fd11 	bl	8004558 <LL_ADC_REG_IsConversionOngoing>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f040 83f3 	bne.w	8005324 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f7ff fbcb 	bl	80042e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff fcff 	bl	8004558 <LL_ADC_REG_IsConversionOngoing>
 8004b5a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fd0b 	bl	800457e <LL_ADC_INJ_IsConversionOngoing>
 8004b68:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f040 81d9 	bne.w	8004f28 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 81d4 	bne.w	8004f28 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b88:	d10f      	bne.n	8004baa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2200      	movs	r2, #0
 8004b94:	4619      	mov	r1, r3
 8004b96:	f7ff fbd2 	bl	800433e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fb79 	bl	800429a <LL_ADC_SetSamplingTimeCommonConfig>
 8004ba8:	e00e      	b.n	8004bc8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	6819      	ldr	r1, [r3, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	f7ff fbc1 	bl	800433e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7ff fb69 	bl	800429a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	695a      	ldr	r2, [r3, #20]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	08db      	lsrs	r3, r3, #3
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	fa02 f303 	lsl.w	r3, r2, r3
 8004bde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d022      	beq.n	8004c30 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6919      	ldr	r1, [r3, #16]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004bfa:	f7ff fac3 	bl	8004184 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6919      	ldr	r1, [r3, #16]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f7ff fb0f 	bl	800422e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d102      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x126>
 8004c20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c24:	e000      	b.n	8004c28 <HAL_ADC_ConfigChannel+0x128>
 8004c26:	2300      	movs	r3, #0
 8004c28:	461a      	mov	r2, r3
 8004c2a:	f7ff fb1b 	bl	8004264 <LL_ADC_SetOffsetSaturation>
 8004c2e:	e17b      	b.n	8004f28 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2100      	movs	r1, #0
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fac8 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10a      	bne.n	8004c5c <HAL_ADC_ConfigChannel+0x15c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff fabd 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004c52:	4603      	mov	r3, r0
 8004c54:	0e9b      	lsrs	r3, r3, #26
 8004c56:	f003 021f 	and.w	r2, r3, #31
 8004c5a:	e01e      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x19a>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fab2 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c72:	fa93 f3a3 	rbit	r3, r3
 8004c76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	e004      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004c8e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c92:	fab3 f383 	clz	r3, r3
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d105      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x1b2>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	0e9b      	lsrs	r3, r3, #26
 8004cac:	f003 031f 	and.w	r3, r3, #31
 8004cb0:	e018      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x1e4>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004cbe:	fa93 f3a3 	rbit	r3, r3
 8004cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004cca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004cce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	e004      	b.n	8004ce4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cde:	fab3 f383 	clz	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d106      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	2100      	movs	r1, #0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff fa81 	bl	80041f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7ff fa65 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004d02:	4603      	mov	r3, r0
 8004d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x222>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2101      	movs	r1, #1
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7ff fa5a 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	0e9b      	lsrs	r3, r3, #26
 8004d1c:	f003 021f 	and.w	r2, r3, #31
 8004d20:	e01e      	b.n	8004d60 <HAL_ADC_ConfigChannel+0x260>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2101      	movs	r1, #1
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7ff fa4f 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004d38:	fa93 f3a3 	rbit	r3, r3
 8004d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004d40:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004d48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004d50:	2320      	movs	r3, #32
 8004d52:	e004      	b.n	8004d5e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d58:	fab3 f383 	clz	r3, r3
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d105      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x278>
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	0e9b      	lsrs	r3, r3, #26
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	e018      	b.n	8004daa <HAL_ADC_ConfigChannel+0x2aa>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d84:	fa93 f3a3 	rbit	r3, r3
 8004d88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004d8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004d94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004d9c:	2320      	movs	r3, #32
 8004d9e:	e004      	b.n	8004daa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004da4:	fab3 f383 	clz	r3, r3
 8004da8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d106      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	2101      	movs	r1, #1
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7ff fa1e 	bl	80041f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2102      	movs	r1, #2
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fa02 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <HAL_ADC_ConfigChannel+0x2e8>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2102      	movs	r1, #2
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff f9f7 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004dde:	4603      	mov	r3, r0
 8004de0:	0e9b      	lsrs	r3, r3, #26
 8004de2:	f003 021f 	and.w	r2, r3, #31
 8004de6:	e01e      	b.n	8004e26 <HAL_ADC_ConfigChannel+0x326>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2102      	movs	r1, #2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7ff f9ec 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004df4:	4603      	mov	r3, r0
 8004df6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dfe:	fa93 f3a3 	rbit	r3, r3
 8004e02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004e06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004e0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004e16:	2320      	movs	r3, #32
 8004e18:	e004      	b.n	8004e24 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004e1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004e1e:	fab3 f383 	clz	r3, r3
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d105      	bne.n	8004e3e <HAL_ADC_ConfigChannel+0x33e>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	0e9b      	lsrs	r3, r3, #26
 8004e38:	f003 031f 	and.w	r3, r3, #31
 8004e3c:	e016      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x36c>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e4a:	fa93 f3a3 	rbit	r3, r3
 8004e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004e50:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004e56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004e5e:	2320      	movs	r3, #32
 8004e60:	e004      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e66:	fab3 f383 	clz	r3, r3
 8004e6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d106      	bne.n	8004e7e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2200      	movs	r2, #0
 8004e76:	2102      	movs	r1, #2
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff f9bd 	bl	80041f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2103      	movs	r1, #3
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7ff f9a1 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <HAL_ADC_ConfigChannel+0x3aa>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2103      	movs	r1, #3
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff f996 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	0e9b      	lsrs	r3, r3, #26
 8004ea4:	f003 021f 	and.w	r2, r3, #31
 8004ea8:	e017      	b.n	8004eda <HAL_ADC_ConfigChannel+0x3da>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2103      	movs	r1, #3
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff f98b 	bl	80041cc <LL_ADC_GetOffsetChannel>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ebc:	fa93 f3a3 	rbit	r3, r3
 8004ec0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004ec2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ec4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004ec6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004ecc:	2320      	movs	r3, #32
 8004ece:	e003      	b.n	8004ed8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ed2:	fab3 f383 	clz	r3, r3
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d105      	bne.n	8004ef2 <HAL_ADC_ConfigChannel+0x3f2>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	0e9b      	lsrs	r3, r3, #26
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	e011      	b.n	8004f16 <HAL_ADC_ConfigChannel+0x416>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ef8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004efa:	fa93 f3a3 	rbit	r3, r3
 8004efe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004f00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f02:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d101      	bne.n	8004f0e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004f0a:	2320      	movs	r3, #32
 8004f0c:	e003      	b.n	8004f16 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f10:	fab3 f383 	clz	r3, r3
 8004f14:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d106      	bne.n	8004f28 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2103      	movs	r1, #3
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff f968 	bl	80041f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fad9 	bl	80044e4 <LL_ADC_IsEnabled>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 813d 	bne.w	80051b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	6819      	ldr	r1, [r3, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	461a      	mov	r2, r3
 8004f48:	f7ff fa24 	bl	8004394 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4aa2      	ldr	r2, [pc, #648]	@ (80051dc <HAL_ADC_ConfigChannel+0x6dc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	f040 812e 	bne.w	80051b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10b      	bne.n	8004f80 <HAL_ADC_ConfigChannel+0x480>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	0e9b      	lsrs	r3, r3, #26
 8004f6e:	3301      	adds	r3, #1
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	2b09      	cmp	r3, #9
 8004f76:	bf94      	ite	ls
 8004f78:	2301      	movls	r3, #1
 8004f7a:	2300      	movhi	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	e019      	b.n	8004fb4 <HAL_ADC_ConfigChannel+0x4b4>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f88:	fa93 f3a3 	rbit	r3, r3
 8004f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004f8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f90:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004f92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004f98:	2320      	movs	r3, #32
 8004f9a:	e003      	b.n	8004fa4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004f9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f9e:	fab3 f383 	clz	r3, r3
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	f003 031f 	and.w	r3, r3, #31
 8004faa:	2b09      	cmp	r3, #9
 8004fac:	bf94      	ite	ls
 8004fae:	2301      	movls	r3, #1
 8004fb0:	2300      	movhi	r3, #0
 8004fb2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d079      	beq.n	80050ac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d107      	bne.n	8004fd4 <HAL_ADC_ConfigChannel+0x4d4>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	0e9b      	lsrs	r3, r3, #26
 8004fca:	3301      	adds	r3, #1
 8004fcc:	069b      	lsls	r3, r3, #26
 8004fce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fd2:	e015      	b.n	8005000 <HAL_ADC_ConfigChannel+0x500>
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fdc:	fa93 f3a3 	rbit	r3, r3
 8004fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fe4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004fe6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004fec:	2320      	movs	r3, #32
 8004fee:	e003      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ff2:	fab3 f383 	clz	r3, r3
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	069b      	lsls	r3, r3, #26
 8004ffc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <HAL_ADC_ConfigChannel+0x520>
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	0e9b      	lsrs	r3, r3, #26
 8005012:	3301      	adds	r3, #1
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	2101      	movs	r1, #1
 800501a:	fa01 f303 	lsl.w	r3, r1, r3
 800501e:	e017      	b.n	8005050 <HAL_ADC_ConfigChannel+0x550>
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005026:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005028:	fa93 f3a3 	rbit	r3, r3
 800502c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800502e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005030:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005038:	2320      	movs	r3, #32
 800503a:	e003      	b.n	8005044 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800503c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800503e:	fab3 f383 	clz	r3, r3
 8005042:	b2db      	uxtb	r3, r3
 8005044:	3301      	adds	r3, #1
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	2101      	movs	r1, #1
 800504c:	fa01 f303 	lsl.w	r3, r1, r3
 8005050:	ea42 0103 	orr.w	r1, r2, r3
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <HAL_ADC_ConfigChannel+0x576>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	0e9b      	lsrs	r3, r3, #26
 8005066:	3301      	adds	r3, #1
 8005068:	f003 021f 	and.w	r2, r3, #31
 800506c:	4613      	mov	r3, r2
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	4413      	add	r3, r2
 8005072:	051b      	lsls	r3, r3, #20
 8005074:	e018      	b.n	80050a8 <HAL_ADC_ConfigChannel+0x5a8>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800507c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800507e:	fa93 f3a3 	rbit	r3, r3
 8005082:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005086:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005088:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800508e:	2320      	movs	r3, #32
 8005090:	e003      	b.n	800509a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8005092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005094:	fab3 f383 	clz	r3, r3
 8005098:	b2db      	uxtb	r3, r3
 800509a:	3301      	adds	r3, #1
 800509c:	f003 021f 	and.w	r2, r3, #31
 80050a0:	4613      	mov	r3, r2
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	4413      	add	r3, r2
 80050a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80050a8:	430b      	orrs	r3, r1
 80050aa:	e07e      	b.n	80051aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d107      	bne.n	80050c8 <HAL_ADC_ConfigChannel+0x5c8>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	0e9b      	lsrs	r3, r3, #26
 80050be:	3301      	adds	r3, #1
 80050c0:	069b      	lsls	r3, r3, #26
 80050c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050c6:	e015      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x5f4>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d0:	fa93 f3a3 	rbit	r3, r3
 80050d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80050d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050d8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80050e0:	2320      	movs	r3, #32
 80050e2:	e003      	b.n	80050ec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80050e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e6:	fab3 f383 	clz	r3, r3
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	3301      	adds	r3, #1
 80050ee:	069b      	lsls	r3, r3, #26
 80050f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d109      	bne.n	8005114 <HAL_ADC_ConfigChannel+0x614>
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	0e9b      	lsrs	r3, r3, #26
 8005106:	3301      	adds	r3, #1
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	2101      	movs	r1, #1
 800510e:	fa01 f303 	lsl.w	r3, r1, r3
 8005112:	e017      	b.n	8005144 <HAL_ADC_ConfigChannel+0x644>
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	fa93 f3a3 	rbit	r3, r3
 8005120:	61fb      	str	r3, [r7, #28]
  return result;
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800512c:	2320      	movs	r3, #32
 800512e:	e003      	b.n	8005138 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	fab3 f383 	clz	r3, r3
 8005136:	b2db      	uxtb	r3, r3
 8005138:	3301      	adds	r3, #1
 800513a:	f003 031f 	and.w	r3, r3, #31
 800513e:	2101      	movs	r1, #1
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	ea42 0103 	orr.w	r1, r2, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10d      	bne.n	8005170 <HAL_ADC_ConfigChannel+0x670>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	0e9b      	lsrs	r3, r3, #26
 800515a:	3301      	adds	r3, #1
 800515c:	f003 021f 	and.w	r2, r3, #31
 8005160:	4613      	mov	r3, r2
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	4413      	add	r3, r2
 8005166:	3b1e      	subs	r3, #30
 8005168:	051b      	lsls	r3, r3, #20
 800516a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800516e:	e01b      	b.n	80051a8 <HAL_ADC_ConfigChannel+0x6a8>
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	fa93 f3a3 	rbit	r3, r3
 800517c:	613b      	str	r3, [r7, #16]
  return result;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005188:	2320      	movs	r3, #32
 800518a:	e003      	b.n	8005194 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	fab3 f383 	clz	r3, r3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	3301      	adds	r3, #1
 8005196:	f003 021f 	and.w	r2, r3, #31
 800519a:	4613      	mov	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	3b1e      	subs	r3, #30
 80051a2:	051b      	lsls	r3, r3, #20
 80051a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80051ae:	4619      	mov	r1, r3
 80051b0:	f7ff f8c5 	bl	800433e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	4b09      	ldr	r3, [pc, #36]	@ (80051e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80051ba:	4013      	ands	r3, r2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80be 	beq.w	800533e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051ca:	d004      	beq.n	80051d6 <HAL_ADC_ConfigChannel+0x6d6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a04      	ldr	r2, [pc, #16]	@ (80051e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10a      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x6ec>
 80051d6:	4b04      	ldr	r3, [pc, #16]	@ (80051e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80051d8:	e009      	b.n	80051ee <HAL_ADC_ConfigChannel+0x6ee>
 80051da:	bf00      	nop
 80051dc:	407f0000 	.word	0x407f0000
 80051e0:	80080000 	.word	0x80080000
 80051e4:	50000100 	.word	0x50000100
 80051e8:	50000300 	.word	0x50000300
 80051ec:	4b59      	ldr	r3, [pc, #356]	@ (8005354 <HAL_ADC_ConfigChannel+0x854>)
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe ffba 	bl	8004168 <LL_ADC_GetCommonPathInternalCh>
 80051f4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a56      	ldr	r2, [pc, #344]	@ (8005358 <HAL_ADC_ConfigChannel+0x858>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d004      	beq.n	800520c <HAL_ADC_ConfigChannel+0x70c>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a55      	ldr	r2, [pc, #340]	@ (800535c <HAL_ADC_ConfigChannel+0x85c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d13a      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800520c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005210:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d134      	bne.n	8005282 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005220:	d005      	beq.n	800522e <HAL_ADC_ConfigChannel+0x72e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a4e      	ldr	r2, [pc, #312]	@ (8005360 <HAL_ADC_ConfigChannel+0x860>)
 8005228:	4293      	cmp	r3, r2
 800522a:	f040 8085 	bne.w	8005338 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005236:	d004      	beq.n	8005242 <HAL_ADC_ConfigChannel+0x742>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a49      	ldr	r2, [pc, #292]	@ (8005364 <HAL_ADC_ConfigChannel+0x864>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d101      	bne.n	8005246 <HAL_ADC_ConfigChannel+0x746>
 8005242:	4a49      	ldr	r2, [pc, #292]	@ (8005368 <HAL_ADC_ConfigChannel+0x868>)
 8005244:	e000      	b.n	8005248 <HAL_ADC_ConfigChannel+0x748>
 8005246:	4a43      	ldr	r2, [pc, #268]	@ (8005354 <HAL_ADC_ConfigChannel+0x854>)
 8005248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800524c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005250:	4619      	mov	r1, r3
 8005252:	4610      	mov	r0, r2
 8005254:	f7fe ff75 	bl	8004142 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005258:	4b44      	ldr	r3, [pc, #272]	@ (800536c <HAL_ADC_ConfigChannel+0x86c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	099b      	lsrs	r3, r3, #6
 800525e:	4a44      	ldr	r2, [pc, #272]	@ (8005370 <HAL_ADC_ConfigChannel+0x870>)
 8005260:	fba2 2303 	umull	r2, r3, r2, r3
 8005264:	099b      	lsrs	r3, r3, #6
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	4613      	mov	r3, r2
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005272:	e002      	b.n	800527a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3b01      	subs	r3, #1
 8005278:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1f9      	bne.n	8005274 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005280:	e05a      	b.n	8005338 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a3b      	ldr	r2, [pc, #236]	@ (8005374 <HAL_ADC_ConfigChannel+0x874>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d125      	bne.n	80052d8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800528c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005290:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d11f      	bne.n	80052d8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a31      	ldr	r2, [pc, #196]	@ (8005364 <HAL_ADC_ConfigChannel+0x864>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d104      	bne.n	80052ac <HAL_ADC_ConfigChannel+0x7ac>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a34      	ldr	r2, [pc, #208]	@ (8005378 <HAL_ADC_ConfigChannel+0x878>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d047      	beq.n	800533c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052b4:	d004      	beq.n	80052c0 <HAL_ADC_ConfigChannel+0x7c0>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005364 <HAL_ADC_ConfigChannel+0x864>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d101      	bne.n	80052c4 <HAL_ADC_ConfigChannel+0x7c4>
 80052c0:	4a29      	ldr	r2, [pc, #164]	@ (8005368 <HAL_ADC_ConfigChannel+0x868>)
 80052c2:	e000      	b.n	80052c6 <HAL_ADC_ConfigChannel+0x7c6>
 80052c4:	4a23      	ldr	r2, [pc, #140]	@ (8005354 <HAL_ADC_ConfigChannel+0x854>)
 80052c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f7fe ff36 	bl	8004142 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052d6:	e031      	b.n	800533c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a27      	ldr	r2, [pc, #156]	@ (800537c <HAL_ADC_ConfigChannel+0x87c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d12d      	bne.n	800533e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80052e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d127      	bne.n	800533e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005364 <HAL_ADC_ConfigChannel+0x864>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d022      	beq.n	800533e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005300:	d004      	beq.n	800530c <HAL_ADC_ConfigChannel+0x80c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a17      	ldr	r2, [pc, #92]	@ (8005364 <HAL_ADC_ConfigChannel+0x864>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d101      	bne.n	8005310 <HAL_ADC_ConfigChannel+0x810>
 800530c:	4a16      	ldr	r2, [pc, #88]	@ (8005368 <HAL_ADC_ConfigChannel+0x868>)
 800530e:	e000      	b.n	8005312 <HAL_ADC_ConfigChannel+0x812>
 8005310:	4a10      	ldr	r2, [pc, #64]	@ (8005354 <HAL_ADC_ConfigChannel+0x854>)
 8005312:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005316:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800531a:	4619      	mov	r1, r3
 800531c:	4610      	mov	r0, r2
 800531e:	f7fe ff10 	bl	8004142 <LL_ADC_SetCommonPathInternalCh>
 8005322:	e00c      	b.n	800533e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005328:	f043 0220 	orr.w	r2, r3, #32
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005336:	e002      	b.n	800533e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005338:	bf00      	nop
 800533a:	e000      	b.n	800533e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800533c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005346:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800534a:	4618      	mov	r0, r3
 800534c:	37d8      	adds	r7, #216	@ 0xd8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	50000700 	.word	0x50000700
 8005358:	c3210000 	.word	0xc3210000
 800535c:	90c00010 	.word	0x90c00010
 8005360:	50000600 	.word	0x50000600
 8005364:	50000100 	.word	0x50000100
 8005368:	50000300 	.word	0x50000300
 800536c:	2000015c 	.word	0x2000015c
 8005370:	053e2d63 	.word	0x053e2d63
 8005374:	c7520000 	.word	0xc7520000
 8005378:	50000500 	.word	0x50000500
 800537c:	cb840000 	.word	0xcb840000

08005380 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005388:	2300      	movs	r3, #0
 800538a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff f8a7 	bl	80044e4 <LL_ADC_IsEnabled>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d176      	bne.n	800548a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005494 <ADC_Enable+0x114>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00d      	beq.n	80053c6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ae:	f043 0210 	orr.w	r2, r3, #16
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ba:	f043 0201 	orr.w	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e062      	b.n	800548c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff f862 	bl	8004494 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053d8:	d004      	beq.n	80053e4 <ADC_Enable+0x64>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a2e      	ldr	r2, [pc, #184]	@ (8005498 <ADC_Enable+0x118>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d101      	bne.n	80053e8 <ADC_Enable+0x68>
 80053e4:	4b2d      	ldr	r3, [pc, #180]	@ (800549c <ADC_Enable+0x11c>)
 80053e6:	e000      	b.n	80053ea <ADC_Enable+0x6a>
 80053e8:	4b2d      	ldr	r3, [pc, #180]	@ (80054a0 <ADC_Enable+0x120>)
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7fe febc 	bl	8004168 <LL_ADC_GetCommonPathInternalCh>
 80053f0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d013      	beq.n	8005422 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053fa:	4b2a      	ldr	r3, [pc, #168]	@ (80054a4 <ADC_Enable+0x124>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	099b      	lsrs	r3, r3, #6
 8005400:	4a29      	ldr	r2, [pc, #164]	@ (80054a8 <ADC_Enable+0x128>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	099b      	lsrs	r3, r3, #6
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	4613      	mov	r3, r2
 800540c:	005b      	lsls	r3, r3, #1
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005414:	e002      	b.n	800541c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	3b01      	subs	r3, #1
 800541a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f9      	bne.n	8005416 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005422:	f7fe fe4d 	bl	80040c0 <HAL_GetTick>
 8005426:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005428:	e028      	b.n	800547c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f7ff f858 	bl	80044e4 <LL_ADC_IsEnabled>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d104      	bne.n	8005444 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff f828 	bl	8004494 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005444:	f7fe fe3c 	bl	80040c0 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d914      	bls.n	800547c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d00d      	beq.n	800547c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005464:	f043 0210 	orr.w	r2, r3, #16
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005470:	f043 0201 	orr.w	r2, r3, #1
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e007      	b.n	800548c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b01      	cmp	r3, #1
 8005488:	d1cf      	bne.n	800542a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	8000003f 	.word	0x8000003f
 8005498:	50000100 	.word	0x50000100
 800549c:	50000300 	.word	0x50000300
 80054a0:	50000700 	.word	0x50000700
 80054a4:	2000015c 	.word	0x2000015c
 80054a8:	053e2d63 	.word	0x053e2d63

080054ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff f826 	bl	800450a <LL_ADC_IsDisableOngoing>
 80054be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7ff f80d 	bl	80044e4 <LL_ADC_IsEnabled>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d047      	beq.n	8005560 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d144      	bne.n	8005560 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f003 030d 	and.w	r3, r3, #13
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d10c      	bne.n	80054fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fe ffe7 	bl	80044bc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2203      	movs	r2, #3
 80054f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054f6:	f7fe fde3 	bl	80040c0 <HAL_GetTick>
 80054fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054fc:	e029      	b.n	8005552 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005502:	f043 0210 	orr.w	r2, r3, #16
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800550e:	f043 0201 	orr.w	r2, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e023      	b.n	8005562 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800551a:	f7fe fdd1 	bl	80040c0 <HAL_GetTick>
 800551e:	4602      	mov	r2, r0
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	2b02      	cmp	r3, #2
 8005526:	d914      	bls.n	8005552 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553a:	f043 0210 	orr.w	r2, r3, #16
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005546:	f043 0201 	orr.w	r2, r3, #1
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e007      	b.n	8005562 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1dc      	bne.n	800551a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3710      	adds	r7, #16
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800557c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005580:	2b00      	cmp	r3, #0
 8005582:	d14b      	bne.n	800561c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005588:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d021      	beq.n	80055e2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fe fe8c 	bl	80042c0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d032      	beq.n	8005614 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d12b      	bne.n	8005614 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d11f      	bne.n	8005614 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d8:	f043 0201 	orr.w	r2, r3, #1
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80055e0:	e018      	b.n	8005614 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d111      	bne.n	8005614 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005600:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d105      	bne.n	8005614 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800560c:	f043 0201 	orr.w	r2, r3, #1
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff fa55 	bl	8004ac4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800561a:	e00e      	b.n	800563a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	d003      	beq.n	8005630 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005628:	68f8      	ldr	r0, [r7, #12]
 800562a:	f7ff fa5f 	bl	8004aec <HAL_ADC_ErrorCallback>
}
 800562e:	e004      	b.n	800563a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005634:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	4798      	blx	r3
}
 800563a:	bf00      	nop
 800563c:	3710      	adds	r7, #16
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}

08005642 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005642:	b580      	push	{r7, lr}
 8005644:	b084      	sub	sp, #16
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800564e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f7ff fa41 	bl	8004ad8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005656:	bf00      	nop
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005670:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800567c:	f043 0204 	orr.w	r2, r3, #4
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff fa31 	bl	8004aec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800568a:	bf00      	nop
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <LL_ADC_IsEnabled>:
{
 8005692:	b480      	push	{r7}
 8005694:	b083      	sub	sp, #12
 8005696:	af00      	add	r7, sp, #0
 8005698:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d101      	bne.n	80056aa <LL_ADC_IsEnabled+0x18>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <LL_ADC_IsEnabled+0x1a>
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <LL_ADC_StartCalibration>:
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80056ca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	609a      	str	r2, [r3, #8]
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <LL_ADC_IsCalibrationOnGoing>:
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056fe:	d101      	bne.n	8005704 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <LL_ADC_REG_IsConversionOngoing>:
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b04      	cmp	r3, #4
 8005724:	d101      	bne.n	800572a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005726:	2301      	movs	r3, #1
 8005728:	e000      	b.n	800572c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800574c:	2b01      	cmp	r3, #1
 800574e:	d101      	bne.n	8005754 <HAL_ADCEx_Calibration_Start+0x1c>
 8005750:	2302      	movs	r3, #2
 8005752:	e04d      	b.n	80057f0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff fea5 	bl	80054ac <ADC_Disable>
 8005762:	4603      	mov	r3, r0
 8005764:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d136      	bne.n	80057da <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005770:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005774:	f023 0302 	bic.w	r3, r3, #2
 8005778:	f043 0202 	orr.w	r2, r3, #2
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff ff96 	bl	80056b8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800578c:	e014      	b.n	80057b8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	3301      	adds	r3, #1
 8005792:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4a18      	ldr	r2, [pc, #96]	@ (80057f8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d90d      	bls.n	80057b8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a0:	f023 0312 	bic.w	r3, r3, #18
 80057a4:	f043 0210 	orr.w	r2, r3, #16
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e01b      	b.n	80057f0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff ff94 	bl	80056ea <LL_ADC_IsCalibrationOnGoing>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e2      	bne.n	800578e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057cc:	f023 0303 	bic.w	r3, r3, #3
 80057d0:	f043 0201 	orr.w	r2, r3, #1
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057d8:	e005      	b.n	80057e6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057de:	f043 0210 	orr.w	r2, r3, #16
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80057ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	0004de01 	.word	0x0004de01

080057fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80057fc:	b590      	push	{r4, r7, lr}
 80057fe:	b0a1      	sub	sp, #132	@ 0x84
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005806:	2300      	movs	r3, #0
 8005808:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005816:	2302      	movs	r3, #2
 8005818:	e0e7      	b.n	80059ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005822:	2300      	movs	r3, #0
 8005824:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005826:	2300      	movs	r3, #0
 8005828:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005832:	d102      	bne.n	800583a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005834:	4b6f      	ldr	r3, [pc, #444]	@ (80059f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	e009      	b.n	800584e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a6e      	ldr	r2, [pc, #440]	@ (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d102      	bne.n	800584a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005844:	4b6d      	ldr	r3, [pc, #436]	@ (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005846:	60bb      	str	r3, [r7, #8]
 8005848:	e001      	b.n	800584e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800584a:	2300      	movs	r3, #0
 800584c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e0be      	b.n	80059ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff ff4f 	bl	8005712 <LL_ADC_REG_IsConversionOngoing>
 8005874:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f7ff ff49 	bl	8005712 <LL_ADC_REG_IsConversionOngoing>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	f040 80a0 	bne.w	80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005888:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 809c 	bne.w	80059c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005898:	d004      	beq.n	80058a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a55      	ldr	r2, [pc, #340]	@ (80059f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d101      	bne.n	80058a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80058a4:	4b56      	ldr	r3, [pc, #344]	@ (8005a00 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80058a6:	e000      	b.n	80058aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80058a8:	4b56      	ldr	r3, [pc, #344]	@ (8005a04 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80058aa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d04b      	beq.n	800594c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80058b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	6859      	ldr	r1, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80058c6:	035b      	lsls	r3, r3, #13
 80058c8:	430b      	orrs	r3, r1
 80058ca:	431a      	orrs	r2, r3
 80058cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058d8:	d004      	beq.n	80058e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a45      	ldr	r2, [pc, #276]	@ (80059f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10f      	bne.n	8005904 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80058e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80058e8:	f7ff fed3 	bl	8005692 <LL_ADC_IsEnabled>
 80058ec:	4604      	mov	r4, r0
 80058ee:	4841      	ldr	r0, [pc, #260]	@ (80059f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058f0:	f7ff fecf 	bl	8005692 <LL_ADC_IsEnabled>
 80058f4:	4603      	mov	r3, r0
 80058f6:	4323      	orrs	r3, r4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bf0c      	ite	eq
 80058fc:	2301      	moveq	r3, #1
 80058fe:	2300      	movne	r3, #0
 8005900:	b2db      	uxtb	r3, r3
 8005902:	e012      	b.n	800592a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005904:	483c      	ldr	r0, [pc, #240]	@ (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005906:	f7ff fec4 	bl	8005692 <LL_ADC_IsEnabled>
 800590a:	4604      	mov	r4, r0
 800590c:	483b      	ldr	r0, [pc, #236]	@ (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800590e:	f7ff fec0 	bl	8005692 <LL_ADC_IsEnabled>
 8005912:	4603      	mov	r3, r0
 8005914:	431c      	orrs	r4, r3
 8005916:	483c      	ldr	r0, [pc, #240]	@ (8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005918:	f7ff febb 	bl	8005692 <LL_ADC_IsEnabled>
 800591c:	4603      	mov	r3, r0
 800591e:	4323      	orrs	r3, r4
 8005920:	2b00      	cmp	r3, #0
 8005922:	bf0c      	ite	eq
 8005924:	2301      	moveq	r3, #1
 8005926:	2300      	movne	r3, #0
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d056      	beq.n	80059dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800592e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005936:	f023 030f 	bic.w	r3, r3, #15
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	6811      	ldr	r1, [r2, #0]
 800593e:	683a      	ldr	r2, [r7, #0]
 8005940:	6892      	ldr	r2, [r2, #8]
 8005942:	430a      	orrs	r2, r1
 8005944:	431a      	orrs	r2, r3
 8005946:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005948:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800594a:	e047      	b.n	80059dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800594c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005954:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005956:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005960:	d004      	beq.n	800596c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a23      	ldr	r2, [pc, #140]	@ (80059f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d10f      	bne.n	800598c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800596c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005970:	f7ff fe8f 	bl	8005692 <LL_ADC_IsEnabled>
 8005974:	4604      	mov	r4, r0
 8005976:	481f      	ldr	r0, [pc, #124]	@ (80059f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005978:	f7ff fe8b 	bl	8005692 <LL_ADC_IsEnabled>
 800597c:	4603      	mov	r3, r0
 800597e:	4323      	orrs	r3, r4
 8005980:	2b00      	cmp	r3, #0
 8005982:	bf0c      	ite	eq
 8005984:	2301      	moveq	r3, #1
 8005986:	2300      	movne	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e012      	b.n	80059b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800598c:	481a      	ldr	r0, [pc, #104]	@ (80059f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800598e:	f7ff fe80 	bl	8005692 <LL_ADC_IsEnabled>
 8005992:	4604      	mov	r4, r0
 8005994:	4819      	ldr	r0, [pc, #100]	@ (80059fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005996:	f7ff fe7c 	bl	8005692 <LL_ADC_IsEnabled>
 800599a:	4603      	mov	r3, r0
 800599c:	431c      	orrs	r4, r3
 800599e:	481a      	ldr	r0, [pc, #104]	@ (8005a08 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80059a0:	f7ff fe77 	bl	8005692 <LL_ADC_IsEnabled>
 80059a4:	4603      	mov	r3, r0
 80059a6:	4323      	orrs	r3, r4
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	bf0c      	ite	eq
 80059ac:	2301      	moveq	r3, #1
 80059ae:	2300      	movne	r3, #0
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d012      	beq.n	80059dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80059b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80059be:	f023 030f 	bic.w	r3, r3, #15
 80059c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80059c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059c6:	e009      	b.n	80059dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059cc:	f043 0220 	orr.w	r2, r3, #32
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80059da:	e000      	b.n	80059de <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80059dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80059e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3784      	adds	r7, #132	@ 0x84
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd90      	pop	{r4, r7, pc}
 80059f2:	bf00      	nop
 80059f4:	50000100 	.word	0x50000100
 80059f8:	50000400 	.word	0x50000400
 80059fc:	50000500 	.word	0x50000500
 8005a00:	50000300 	.word	0x50000300
 8005a04:	50000700 	.word	0x50000700
 8005a08:	50000600 	.word	0x50000600

08005a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a50 <__NVIC_SetPriorityGrouping+0x44>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a28:	4013      	ands	r3, r2
 8005a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005a38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a3e:	4a04      	ldr	r2, [pc, #16]	@ (8005a50 <__NVIC_SetPriorityGrouping+0x44>)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	60d3      	str	r3, [r2, #12]
}
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	e000ed00 	.word	0xe000ed00

08005a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a54:	b480      	push	{r7}
 8005a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a58:	4b04      	ldr	r3, [pc, #16]	@ (8005a6c <__NVIC_GetPriorityGrouping+0x18>)
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	0a1b      	lsrs	r3, r3, #8
 8005a5e:	f003 0307 	and.w	r3, r3, #7
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	e000ed00 	.word	0xe000ed00

08005a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	db0b      	blt.n	8005a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a82:	79fb      	ldrb	r3, [r7, #7]
 8005a84:	f003 021f 	and.w	r2, r3, #31
 8005a88:	4907      	ldr	r1, [pc, #28]	@ (8005aa8 <__NVIC_EnableIRQ+0x38>)
 8005a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	2001      	movs	r0, #1
 8005a92:	fa00 f202 	lsl.w	r2, r0, r2
 8005a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	370c      	adds	r7, #12
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	e000e100 	.word	0xe000e100

08005aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	6039      	str	r1, [r7, #0]
 8005ab6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	db0a      	blt.n	8005ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	490c      	ldr	r1, [pc, #48]	@ (8005af8 <__NVIC_SetPriority+0x4c>)
 8005ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aca:	0112      	lsls	r2, r2, #4
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	440b      	add	r3, r1
 8005ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad4:	e00a      	b.n	8005aec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	4908      	ldr	r1, [pc, #32]	@ (8005afc <__NVIC_SetPriority+0x50>)
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	3b04      	subs	r3, #4
 8005ae4:	0112      	lsls	r2, r2, #4
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	440b      	add	r3, r1
 8005aea:	761a      	strb	r2, [r3, #24]
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	e000e100 	.word	0xe000e100
 8005afc:	e000ed00 	.word	0xe000ed00

08005b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b089      	sub	sp, #36	@ 0x24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f003 0307 	and.w	r3, r3, #7
 8005b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f1c3 0307 	rsb	r3, r3, #7
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	bf28      	it	cs
 8005b1e:	2304      	movcs	r3, #4
 8005b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	3304      	adds	r3, #4
 8005b26:	2b06      	cmp	r3, #6
 8005b28:	d902      	bls.n	8005b30 <NVIC_EncodePriority+0x30>
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	3b03      	subs	r3, #3
 8005b2e:	e000      	b.n	8005b32 <NVIC_EncodePriority+0x32>
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b34:	f04f 32ff 	mov.w	r2, #4294967295
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3e:	43da      	mvns	r2, r3
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	401a      	ands	r2, r3
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b48:	f04f 31ff 	mov.w	r1, #4294967295
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b52:	43d9      	mvns	r1, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b58:	4313      	orrs	r3, r2
         );
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3724      	adds	r7, #36	@ 0x24
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
	...

08005b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b78:	d301      	bcc.n	8005b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e00f      	b.n	8005b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8005ba8 <SysTick_Config+0x40>)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3b01      	subs	r3, #1
 8005b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b86:	210f      	movs	r1, #15
 8005b88:	f04f 30ff 	mov.w	r0, #4294967295
 8005b8c:	f7ff ff8e 	bl	8005aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b90:	4b05      	ldr	r3, [pc, #20]	@ (8005ba8 <SysTick_Config+0x40>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b96:	4b04      	ldr	r3, [pc, #16]	@ (8005ba8 <SysTick_Config+0x40>)
 8005b98:	2207      	movs	r2, #7
 8005b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	e000e010 	.word	0xe000e010

08005bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff ff29 	bl	8005a0c <__NVIC_SetPriorityGrouping>
}
 8005bba:	bf00      	nop
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b086      	sub	sp, #24
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	4603      	mov	r3, r0
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
 8005bce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005bd0:	f7ff ff40 	bl	8005a54 <__NVIC_GetPriorityGrouping>
 8005bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bd6:	687a      	ldr	r2, [r7, #4]
 8005bd8:	68b9      	ldr	r1, [r7, #8]
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f7ff ff90 	bl	8005b00 <NVIC_EncodePriority>
 8005be0:	4602      	mov	r2, r0
 8005be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff ff5f 	bl	8005aac <__NVIC_SetPriority>
}
 8005bee:	bf00      	nop
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff ff33 	bl	8005a70 <__NVIC_EnableIRQ>
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7ff ffa4 	bl	8005b68 <SysTick_Config>
 8005c20:	4603      	mov	r3, r0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e08d      	b.n	8005d5a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	4b47      	ldr	r3, [pc, #284]	@ (8005d64 <HAL_DMA_Init+0x138>)
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d80f      	bhi.n	8005c6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	461a      	mov	r2, r3
 8005c50:	4b45      	ldr	r3, [pc, #276]	@ (8005d68 <HAL_DMA_Init+0x13c>)
 8005c52:	4413      	add	r3, r2
 8005c54:	4a45      	ldr	r2, [pc, #276]	@ (8005d6c <HAL_DMA_Init+0x140>)
 8005c56:	fba2 2303 	umull	r2, r3, r2, r3
 8005c5a:	091b      	lsrs	r3, r3, #4
 8005c5c:	009a      	lsls	r2, r3, #2
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a42      	ldr	r2, [pc, #264]	@ (8005d70 <HAL_DMA_Init+0x144>)
 8005c66:	641a      	str	r2, [r3, #64]	@ 0x40
 8005c68:	e00e      	b.n	8005c88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4b40      	ldr	r3, [pc, #256]	@ (8005d74 <HAL_DMA_Init+0x148>)
 8005c72:	4413      	add	r3, r2
 8005c74:	4a3d      	ldr	r2, [pc, #244]	@ (8005d6c <HAL_DMA_Init+0x140>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	091b      	lsrs	r3, r3, #4
 8005c7c:	009a      	lsls	r2, r3, #2
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a3c      	ldr	r2, [pc, #240]	@ (8005d78 <HAL_DMA_Init+0x14c>)
 8005c86:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fa76 	bl	80061cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ce8:	d102      	bne.n	8005cf0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685a      	ldr	r2, [r3, #4]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cf8:	b2d2      	uxtb	r2, r2
 8005cfa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005d04:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d010      	beq.n	8005d30 <HAL_DMA_Init+0x104>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	2b04      	cmp	r3, #4
 8005d14:	d80c      	bhi.n	8005d30 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa96 	bl	8006248 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005d2c:	605a      	str	r2, [r3, #4]
 8005d2e:	e008      	b.n	8005d42 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	40020407 	.word	0x40020407
 8005d68:	bffdfff8 	.word	0xbffdfff8
 8005d6c:	cccccccd 	.word	0xcccccccd
 8005d70:	40020000 	.word	0x40020000
 8005d74:	bffdfbf8 	.word	0xbffdfbf8
 8005d78:	40020400 	.word	0x40020400

08005d7c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
 8005d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_DMA_Start_IT+0x20>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e066      	b.n	8005e6a <HAL_DMA_Start_IT+0xee>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d155      	bne.n	8005e5c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2202      	movs	r2, #2
 8005db4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0201 	bic.w	r2, r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	68b9      	ldr	r1, [r7, #8]
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 f9bb 	bl	8006150 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d008      	beq.n	8005df4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 020e 	orr.w	r2, r2, #14
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	e00f      	b.n	8005e14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0204 	bic.w	r2, r2, #4
 8005e02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 020a 	orr.w	r2, r2, #10
 8005e12:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d007      	beq.n	8005e32 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e30:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e48:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e005      	b.n	8005e68 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005e64:	2302      	movs	r3, #2
 8005e66:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b085      	sub	sp, #20
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d005      	beq.n	8005e96 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2204      	movs	r2, #4
 8005e8e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
 8005e94:	e037      	b.n	8005f06 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 020e 	bic.w	r2, r2, #14
 8005ea4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005eb4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0201 	bic.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eca:	f003 021f 	and.w	r2, r3, #31
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ed8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005ee2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00c      	beq.n	8005f06 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ef6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005efa:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005f04:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d00d      	beq.n	8005f58 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2204      	movs	r2, #4
 8005f40:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
 8005f56:	e047      	b.n	8005fe8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 020e 	bic.w	r2, r2, #14
 8005f66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8c:	f003 021f 	and.w	r2, r3, #31
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f94:	2101      	movs	r1, #1
 8005f96:	fa01 f202 	lsl.w	r2, r1, r2
 8005f9a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005fa4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fbc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005fc6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d003      	beq.n	8005fe8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	4798      	blx	r3
    }
  }
  return status;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ff2:	b580      	push	{r7, lr}
 8005ff4:	b084      	sub	sp, #16
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	2204      	movs	r2, #4
 8006014:	409a      	lsls	r2, r3
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4013      	ands	r3, r2
 800601a:	2b00      	cmp	r3, #0
 800601c:	d026      	beq.n	800606c <HAL_DMA_IRQHandler+0x7a>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f003 0304 	and.w	r3, r3, #4
 8006024:	2b00      	cmp	r3, #0
 8006026:	d021      	beq.n	800606c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0320 	and.w	r3, r3, #32
 8006032:	2b00      	cmp	r3, #0
 8006034:	d107      	bne.n	8006046 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0204 	bic.w	r2, r2, #4
 8006044:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604a:	f003 021f 	and.w	r2, r3, #31
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006052:	2104      	movs	r1, #4
 8006054:	fa01 f202 	lsl.w	r2, r1, r2
 8006058:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800605e:	2b00      	cmp	r3, #0
 8006060:	d071      	beq.n	8006146 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800606a:	e06c      	b.n	8006146 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	2202      	movs	r2, #2
 8006076:	409a      	lsls	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d02e      	beq.n	80060de <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d029      	beq.n	80060de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10b      	bne.n	80060b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 020a 	bic.w	r2, r2, #10
 80060a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b4:	f003 021f 	and.w	r2, r3, #31
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060bc:	2102      	movs	r1, #2
 80060be:	fa01 f202 	lsl.w	r2, r1, r2
 80060c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d038      	beq.n	8006146 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80060dc:	e033      	b.n	8006146 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e2:	f003 031f 	and.w	r3, r3, #31
 80060e6:	2208      	movs	r2, #8
 80060e8:	409a      	lsls	r2, r3
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4013      	ands	r3, r2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d02a      	beq.n	8006148 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f003 0308 	and.w	r3, r3, #8
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d025      	beq.n	8006148 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 020e 	bic.w	r2, r2, #14
 800610a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006110:	f003 021f 	and.w	r2, r3, #31
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	2101      	movs	r1, #1
 800611a:	fa01 f202 	lsl.w	r2, r1, r2
 800611e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800613a:	2b00      	cmp	r3, #0
 800613c:	d004      	beq.n	8006148 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006146:	bf00      	nop
 8006148:	bf00      	nop
}
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006166:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006178:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800617e:	f003 021f 	and.w	r2, r3, #31
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	2101      	movs	r1, #1
 8006188:	fa01 f202 	lsl.w	r2, r1, r2
 800618c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	683a      	ldr	r2, [r7, #0]
 8006194:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	2b10      	cmp	r3, #16
 800619c:	d108      	bne.n	80061b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80061ae:	e007      	b.n	80061c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	60da      	str	r2, [r3, #12]
}
 80061c0:	bf00      	nop
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	461a      	mov	r2, r3
 80061da:	4b16      	ldr	r3, [pc, #88]	@ (8006234 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80061dc:	429a      	cmp	r2, r3
 80061de:	d802      	bhi.n	80061e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80061e0:	4b15      	ldr	r3, [pc, #84]	@ (8006238 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	e001      	b.n	80061ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80061e6:	4b15      	ldr	r3, [pc, #84]	@ (800623c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80061e8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	3b08      	subs	r3, #8
 80061f6:	4a12      	ldr	r2, [pc, #72]	@ (8006240 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80061f8:	fba2 2303 	umull	r2, r3, r2, r3
 80061fc:	091b      	lsrs	r3, r3, #4
 80061fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006204:	089b      	lsrs	r3, r3, #2
 8006206:	009a      	lsls	r2, r3, #2
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	4413      	add	r3, r2
 800620c:	461a      	mov	r2, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a0b      	ldr	r2, [pc, #44]	@ (8006244 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006216:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f003 031f 	and.w	r3, r3, #31
 800621e:	2201      	movs	r2, #1
 8006220:	409a      	lsls	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	40020407 	.word	0x40020407
 8006238:	40020800 	.word	0x40020800
 800623c:	40020820 	.word	0x40020820
 8006240:	cccccccd 	.word	0xcccccccd
 8006244:	40020880 	.word	0x40020880

08006248 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4b0b      	ldr	r3, [pc, #44]	@ (8006288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a08      	ldr	r2, [pc, #32]	@ (800628c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800626a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	3b01      	subs	r3, #1
 8006270:	f003 031f 	and.w	r3, r3, #31
 8006274:	2201      	movs	r2, #1
 8006276:	409a      	lsls	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800627c:	bf00      	nop
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr
 8006288:	1000823f 	.word	0x1000823f
 800628c:	40020940 	.word	0x40020940

08006290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800629a:	2300      	movs	r3, #0
 800629c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800629e:	e15a      	b.n	8006556 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	2101      	movs	r1, #1
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	fa01 f303 	lsl.w	r3, r1, r3
 80062ac:	4013      	ands	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 814c 	beq.w	8006550 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f003 0303 	and.w	r3, r3, #3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d005      	beq.n	80062d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	d130      	bne.n	8006332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	2203      	movs	r2, #3
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	43db      	mvns	r3, r3
 80062e2:	693a      	ldr	r2, [r7, #16]
 80062e4:	4013      	ands	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	693a      	ldr	r2, [r7, #16]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006306:	2201      	movs	r2, #1
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	fa02 f303 	lsl.w	r3, r2, r3
 800630e:	43db      	mvns	r3, r3
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4013      	ands	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	091b      	lsrs	r3, r3, #4
 800631c:	f003 0201 	and.w	r2, r3, #1
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f003 0303 	and.w	r3, r3, #3
 800633a:	2b03      	cmp	r3, #3
 800633c:	d017      	beq.n	800636e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	2203      	movs	r2, #3
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	43db      	mvns	r3, r3
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4013      	ands	r3, r2
 8006354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d123      	bne.n	80063c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	08da      	lsrs	r2, r3, #3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3208      	adds	r2, #8
 8006382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	220f      	movs	r2, #15
 8006392:	fa02 f303 	lsl.w	r3, r2, r3
 8006396:	43db      	mvns	r3, r3
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	4013      	ands	r3, r2
 800639c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	691a      	ldr	r2, [r3, #16]
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	fa02 f303 	lsl.w	r3, r2, r3
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	08da      	lsrs	r2, r3, #3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	3208      	adds	r2, #8
 80063bc:	6939      	ldr	r1, [r7, #16]
 80063be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	2203      	movs	r2, #3
 80063ce:	fa02 f303 	lsl.w	r3, r2, r3
 80063d2:	43db      	mvns	r3, r3
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4013      	ands	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f003 0203 	and.w	r2, r3, #3
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 80a6 	beq.w	8006550 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006404:	4b5b      	ldr	r3, [pc, #364]	@ (8006574 <HAL_GPIO_Init+0x2e4>)
 8006406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006408:	4a5a      	ldr	r2, [pc, #360]	@ (8006574 <HAL_GPIO_Init+0x2e4>)
 800640a:	f043 0301 	orr.w	r3, r3, #1
 800640e:	6613      	str	r3, [r2, #96]	@ 0x60
 8006410:	4b58      	ldr	r3, [pc, #352]	@ (8006574 <HAL_GPIO_Init+0x2e4>)
 8006412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	60bb      	str	r3, [r7, #8]
 800641a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800641c:	4a56      	ldr	r2, [pc, #344]	@ (8006578 <HAL_GPIO_Init+0x2e8>)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	089b      	lsrs	r3, r3, #2
 8006422:	3302      	adds	r3, #2
 8006424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f003 0303 	and.w	r3, r3, #3
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	220f      	movs	r2, #15
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	43db      	mvns	r3, r3
 800643a:	693a      	ldr	r2, [r7, #16]
 800643c:	4013      	ands	r3, r2
 800643e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006446:	d01f      	beq.n	8006488 <HAL_GPIO_Init+0x1f8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a4c      	ldr	r2, [pc, #304]	@ (800657c <HAL_GPIO_Init+0x2ec>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d019      	beq.n	8006484 <HAL_GPIO_Init+0x1f4>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a4b      	ldr	r2, [pc, #300]	@ (8006580 <HAL_GPIO_Init+0x2f0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d013      	beq.n	8006480 <HAL_GPIO_Init+0x1f0>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a4a      	ldr	r2, [pc, #296]	@ (8006584 <HAL_GPIO_Init+0x2f4>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d00d      	beq.n	800647c <HAL_GPIO_Init+0x1ec>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a49      	ldr	r2, [pc, #292]	@ (8006588 <HAL_GPIO_Init+0x2f8>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d007      	beq.n	8006478 <HAL_GPIO_Init+0x1e8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a48      	ldr	r2, [pc, #288]	@ (800658c <HAL_GPIO_Init+0x2fc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d101      	bne.n	8006474 <HAL_GPIO_Init+0x1e4>
 8006470:	2305      	movs	r3, #5
 8006472:	e00a      	b.n	800648a <HAL_GPIO_Init+0x1fa>
 8006474:	2306      	movs	r3, #6
 8006476:	e008      	b.n	800648a <HAL_GPIO_Init+0x1fa>
 8006478:	2304      	movs	r3, #4
 800647a:	e006      	b.n	800648a <HAL_GPIO_Init+0x1fa>
 800647c:	2303      	movs	r3, #3
 800647e:	e004      	b.n	800648a <HAL_GPIO_Init+0x1fa>
 8006480:	2302      	movs	r3, #2
 8006482:	e002      	b.n	800648a <HAL_GPIO_Init+0x1fa>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <HAL_GPIO_Init+0x1fa>
 8006488:	2300      	movs	r3, #0
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	f002 0203 	and.w	r2, r2, #3
 8006490:	0092      	lsls	r2, r2, #2
 8006492:	4093      	lsls	r3, r2
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800649a:	4937      	ldr	r1, [pc, #220]	@ (8006578 <HAL_GPIO_Init+0x2e8>)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	089b      	lsrs	r3, r3, #2
 80064a0:	3302      	adds	r3, #2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064a8:	4b39      	ldr	r3, [pc, #228]	@ (8006590 <HAL_GPIO_Init+0x300>)
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	43db      	mvns	r3, r3
 80064b2:	693a      	ldr	r2, [r7, #16]
 80064b4:	4013      	ands	r3, r2
 80064b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80064cc:	4a30      	ldr	r2, [pc, #192]	@ (8006590 <HAL_GPIO_Init+0x300>)
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80064d2:	4b2f      	ldr	r3, [pc, #188]	@ (8006590 <HAL_GPIO_Init+0x300>)
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	43db      	mvns	r3, r3
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	4013      	ands	r3, r2
 80064e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80064f6:	4a26      	ldr	r2, [pc, #152]	@ (8006590 <HAL_GPIO_Init+0x300>)
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80064fc:	4b24      	ldr	r3, [pc, #144]	@ (8006590 <HAL_GPIO_Init+0x300>)
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	43db      	mvns	r3, r3
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4013      	ands	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006520:	4a1b      	ldr	r2, [pc, #108]	@ (8006590 <HAL_GPIO_Init+0x300>)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006526:	4b1a      	ldr	r3, [pc, #104]	@ (8006590 <HAL_GPIO_Init+0x300>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	43db      	mvns	r3, r3
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	4013      	ands	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d003      	beq.n	800654a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800654a:	4a11      	ldr	r2, [pc, #68]	@ (8006590 <HAL_GPIO_Init+0x300>)
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	3301      	adds	r3, #1
 8006554:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	fa22 f303 	lsr.w	r3, r2, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	f47f ae9d 	bne.w	80062a0 <HAL_GPIO_Init+0x10>
  }
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	40021000 	.word	0x40021000
 8006578:	40010000 	.word	0x40010000
 800657c:	48000400 	.word	0x48000400
 8006580:	48000800 	.word	0x48000800
 8006584:	48000c00 	.word	0x48000c00
 8006588:	48001000 	.word	0x48001000
 800658c:	48001400 	.word	0x48001400
 8006590:	40010400 	.word	0x40010400

08006594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691a      	ldr	r2, [r3, #16]
 80065a4:	887b      	ldrh	r3, [r7, #2]
 80065a6:	4013      	ands	r3, r2
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80065ac:	2301      	movs	r3, #1
 80065ae:	73fb      	strb	r3, [r7, #15]
 80065b0:	e001      	b.n	80065b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	807b      	strh	r3, [r7, #2]
 80065d0:	4613      	mov	r3, r2
 80065d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80065d4:	787b      	ldrb	r3, [r7, #1]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80065da:	887a      	ldrh	r2, [r7, #2]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80065e0:	e002      	b.n	80065e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80065e2:	887a      	ldrh	r2, [r7, #2]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	4603      	mov	r3, r0
 80065fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80065fe:	4b08      	ldr	r3, [pc, #32]	@ (8006620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006600:	695a      	ldr	r2, [r3, #20]
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	4013      	ands	r3, r2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d006      	beq.n	8006618 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800660a:	4a05      	ldr	r2, [pc, #20]	@ (8006620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800660c:	88fb      	ldrh	r3, [r7, #6]
 800660e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	4618      	mov	r0, r3
 8006614:	f7fc fb71 	bl	8002cfa <HAL_GPIO_EXTI_Callback>
  }
}
 8006618:	bf00      	nop
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}
 8006620:	40010400 	.word	0x40010400

08006624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d141      	bne.n	80066b6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006632:	4b4b      	ldr	r3, [pc, #300]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800663a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800663e:	d131      	bne.n	80066a4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006640:	4b47      	ldr	r3, [pc, #284]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006646:	4a46      	ldr	r2, [pc, #280]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800664c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006650:	4b43      	ldr	r3, [pc, #268]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006658:	4a41      	ldr	r2, [pc, #260]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800665a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800665e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006660:	4b40      	ldr	r3, [pc, #256]	@ (8006764 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2232      	movs	r2, #50	@ 0x32
 8006666:	fb02 f303 	mul.w	r3, r2, r3
 800666a:	4a3f      	ldr	r2, [pc, #252]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	0c9b      	lsrs	r3, r3, #18
 8006672:	3301      	adds	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006676:	e002      	b.n	800667e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3b01      	subs	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800667e:	4b38      	ldr	r3, [pc, #224]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800668a:	d102      	bne.n	8006692 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1f2      	bne.n	8006678 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006692:	4b33      	ldr	r3, [pc, #204]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800669a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669e:	d158      	bne.n	8006752 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e057      	b.n	8006754 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066aa:	4a2d      	ldr	r2, [pc, #180]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066b0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80066b4:	e04d      	b.n	8006752 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066bc:	d141      	bne.n	8006742 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066be:	4b28      	ldr	r3, [pc, #160]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80066c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066ca:	d131      	bne.n	8006730 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066cc:	4b24      	ldr	r3, [pc, #144]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d2:	4a23      	ldr	r2, [pc, #140]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066dc:	4b20      	ldr	r3, [pc, #128]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80066e4:	4a1e      	ldr	r2, [pc, #120]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80066ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006764 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2232      	movs	r2, #50	@ 0x32
 80066f2:	fb02 f303 	mul.w	r3, r2, r3
 80066f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006768 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80066f8:	fba2 2303 	umull	r2, r3, r2, r3
 80066fc:	0c9b      	lsrs	r3, r3, #18
 80066fe:	3301      	adds	r3, #1
 8006700:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006702:	e002      	b.n	800670a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3b01      	subs	r3, #1
 8006708:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800670a:	4b15      	ldr	r3, [pc, #84]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006716:	d102      	bne.n	800671e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f2      	bne.n	8006704 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800671e:	4b10      	ldr	r3, [pc, #64]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800672a:	d112      	bne.n	8006752 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	e011      	b.n	8006754 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006730:	4b0b      	ldr	r3, [pc, #44]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006732:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006736:	4a0a      	ldr	r2, [pc, #40]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800673c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006740:	e007      	b.n	8006752 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006742:	4b07      	ldr	r3, [pc, #28]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800674a:	4a05      	ldr	r2, [pc, #20]	@ (8006760 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800674c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006750:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	40007000 	.word	0x40007000
 8006764:	2000015c 	.word	0x2000015c
 8006768:	431bde83 	.word	0x431bde83

0800676c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006770:	4b05      	ldr	r3, [pc, #20]	@ (8006788 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	4a04      	ldr	r2, [pc, #16]	@ (8006788 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006776:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800677a:	6093      	str	r3, [r2, #8]
}
 800677c:	bf00      	nop
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop
 8006788:	40007000 	.word	0x40007000

0800678c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b088      	sub	sp, #32
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e2fe      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d075      	beq.n	8006896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067aa:	4b97      	ldr	r3, [pc, #604]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 030c 	and.w	r3, r3, #12
 80067b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067b4:	4b94      	ldr	r3, [pc, #592]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0303 	and.w	r3, r3, #3
 80067bc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	2b0c      	cmp	r3, #12
 80067c2:	d102      	bne.n	80067ca <HAL_RCC_OscConfig+0x3e>
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b03      	cmp	r3, #3
 80067c8:	d002      	beq.n	80067d0 <HAL_RCC_OscConfig+0x44>
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	2b08      	cmp	r3, #8
 80067ce:	d10b      	bne.n	80067e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d0:	4b8d      	ldr	r3, [pc, #564]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d05b      	beq.n	8006894 <HAL_RCC_OscConfig+0x108>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d157      	bne.n	8006894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e2d9      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067f0:	d106      	bne.n	8006800 <HAL_RCC_OscConfig+0x74>
 80067f2:	4b85      	ldr	r3, [pc, #532]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a84      	ldr	r2, [pc, #528]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80067f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	e01d      	b.n	800683c <HAL_RCC_OscConfig+0xb0>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006808:	d10c      	bne.n	8006824 <HAL_RCC_OscConfig+0x98>
 800680a:	4b7f      	ldr	r3, [pc, #508]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006810:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	4b7c      	ldr	r3, [pc, #496]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a7b      	ldr	r2, [pc, #492]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 800681c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	e00b      	b.n	800683c <HAL_RCC_OscConfig+0xb0>
 8006824:	4b78      	ldr	r3, [pc, #480]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a77      	ldr	r2, [pc, #476]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 800682a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	4b75      	ldr	r3, [pc, #468]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a74      	ldr	r2, [pc, #464]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006836:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800683a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d013      	beq.n	800686c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006844:	f7fd fc3c 	bl	80040c0 <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800684c:	f7fd fc38 	bl	80040c0 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b64      	cmp	r3, #100	@ 0x64
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e29e      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800685e:	4b6a      	ldr	r3, [pc, #424]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0xc0>
 800686a:	e014      	b.n	8006896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800686c:	f7fd fc28 	bl	80040c0 <HAL_GetTick>
 8006870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006874:	f7fd fc24 	bl	80040c0 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b64      	cmp	r3, #100	@ 0x64
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e28a      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006886:	4b60      	ldr	r3, [pc, #384]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1f0      	bne.n	8006874 <HAL_RCC_OscConfig+0xe8>
 8006892:	e000      	b.n	8006896 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d075      	beq.n	800698e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068a2:	4b59      	ldr	r3, [pc, #356]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 030c 	and.w	r3, r3, #12
 80068aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068ac:	4b56      	ldr	r3, [pc, #344]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f003 0303 	and.w	r3, r3, #3
 80068b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	2b0c      	cmp	r3, #12
 80068ba:	d102      	bne.n	80068c2 <HAL_RCC_OscConfig+0x136>
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d002      	beq.n	80068c8 <HAL_RCC_OscConfig+0x13c>
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	d11f      	bne.n	8006908 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068c8:	4b4f      	ldr	r3, [pc, #316]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d005      	beq.n	80068e0 <HAL_RCC_OscConfig+0x154>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e25d      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e0:	4b49      	ldr	r3, [pc, #292]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	061b      	lsls	r3, r3, #24
 80068ee:	4946      	ldr	r1, [pc, #280]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80068f0:	4313      	orrs	r3, r2
 80068f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80068f4:	4b45      	ldr	r3, [pc, #276]	@ (8006a0c <HAL_RCC_OscConfig+0x280>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f7fd fb95 	bl	8004028 <HAL_InitTick>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d043      	beq.n	800698c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e249      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d023      	beq.n	8006958 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006910:	4b3d      	ldr	r3, [pc, #244]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a3c      	ldr	r2, [pc, #240]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800691a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691c:	f7fd fbd0 	bl	80040c0 <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006924:	f7fd fbcc 	bl	80040c0 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e232      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006936:	4b34      	ldr	r3, [pc, #208]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800693e:	2b00      	cmp	r3, #0
 8006940:	d0f0      	beq.n	8006924 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006942:	4b31      	ldr	r3, [pc, #196]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	061b      	lsls	r3, r3, #24
 8006950:	492d      	ldr	r1, [pc, #180]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006952:	4313      	orrs	r3, r2
 8006954:	604b      	str	r3, [r1, #4]
 8006956:	e01a      	b.n	800698e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006958:	4b2b      	ldr	r3, [pc, #172]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a2a      	ldr	r2, [pc, #168]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 800695e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006964:	f7fd fbac 	bl	80040c0 <HAL_GetTick>
 8006968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800696a:	e008      	b.n	800697e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800696c:	f7fd fba8 	bl	80040c0 <HAL_GetTick>
 8006970:	4602      	mov	r2, r0
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	1ad3      	subs	r3, r2, r3
 8006976:	2b02      	cmp	r3, #2
 8006978:	d901      	bls.n	800697e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800697a:	2303      	movs	r3, #3
 800697c:	e20e      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800697e:	4b22      	ldr	r3, [pc, #136]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1f0      	bne.n	800696c <HAL_RCC_OscConfig+0x1e0>
 800698a:	e000      	b.n	800698e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800698c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0308 	and.w	r3, r3, #8
 8006996:	2b00      	cmp	r3, #0
 8006998:	d041      	beq.n	8006a1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d01c      	beq.n	80069dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069a2:	4b19      	ldr	r3, [pc, #100]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80069a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069a8:	4a17      	ldr	r2, [pc, #92]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80069aa:	f043 0301 	orr.w	r3, r3, #1
 80069ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b2:	f7fd fb85 	bl	80040c0 <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069b8:	e008      	b.n	80069cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ba:	f7fd fb81 	bl	80040c0 <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e1e7      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80069ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069d2:	f003 0302 	and.w	r3, r3, #2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d0ef      	beq.n	80069ba <HAL_RCC_OscConfig+0x22e>
 80069da:	e020      	b.n	8006a1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80069de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80069e2:	4a09      	ldr	r2, [pc, #36]	@ (8006a08 <HAL_RCC_OscConfig+0x27c>)
 80069e4:	f023 0301 	bic.w	r3, r3, #1
 80069e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ec:	f7fd fb68 	bl	80040c0 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069f2:	e00d      	b.n	8006a10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069f4:	f7fd fb64 	bl	80040c0 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d906      	bls.n	8006a10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e1ca      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
 8006a06:	bf00      	nop
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	20000160 	.word	0x20000160
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a10:	4b8c      	ldr	r3, [pc, #560]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1ea      	bne.n	80069f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0304 	and.w	r3, r3, #4
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 80a6 	beq.w	8006b78 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a30:	4b84      	ldr	r3, [pc, #528]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <HAL_RCC_OscConfig+0x2b4>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e000      	b.n	8006a42 <HAL_RCC_OscConfig+0x2b6>
 8006a40:	2300      	movs	r3, #0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00d      	beq.n	8006a62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a46:	4b7f      	ldr	r3, [pc, #508]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006a4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a50:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a52:	4b7c      	ldr	r3, [pc, #496]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a62:	4b79      	ldr	r3, [pc, #484]	@ (8006c48 <HAL_RCC_OscConfig+0x4bc>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d118      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a6e:	4b76      	ldr	r3, [pc, #472]	@ (8006c48 <HAL_RCC_OscConfig+0x4bc>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a75      	ldr	r2, [pc, #468]	@ (8006c48 <HAL_RCC_OscConfig+0x4bc>)
 8006a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a7a:	f7fd fb21 	bl	80040c0 <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a80:	e008      	b.n	8006a94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a82:	f7fd fb1d 	bl	80040c0 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e183      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a94:	4b6c      	ldr	r3, [pc, #432]	@ (8006c48 <HAL_RCC_OscConfig+0x4bc>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0f0      	beq.n	8006a82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d108      	bne.n	8006aba <HAL_RCC_OscConfig+0x32e>
 8006aa8:	4b66      	ldr	r3, [pc, #408]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aae:	4a65      	ldr	r2, [pc, #404]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ab8:	e024      	b.n	8006b04 <HAL_RCC_OscConfig+0x378>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	689b      	ldr	r3, [r3, #8]
 8006abe:	2b05      	cmp	r3, #5
 8006ac0:	d110      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x358>
 8006ac2:	4b60      	ldr	r3, [pc, #384]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac8:	4a5e      	ldr	r2, [pc, #376]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006aca:	f043 0304 	orr.w	r3, r3, #4
 8006ace:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ad8:	4a5a      	ldr	r2, [pc, #360]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006ada:	f043 0301 	orr.w	r3, r3, #1
 8006ade:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006ae2:	e00f      	b.n	8006b04 <HAL_RCC_OscConfig+0x378>
 8006ae4:	4b57      	ldr	r3, [pc, #348]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aea:	4a56      	ldr	r2, [pc, #344]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006aec:	f023 0301 	bic.w	r3, r3, #1
 8006af0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006af4:	4b53      	ldr	r3, [pc, #332]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006afa:	4a52      	ldr	r2, [pc, #328]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006afc:	f023 0304 	bic.w	r3, r3, #4
 8006b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d016      	beq.n	8006b3a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b0c:	f7fd fad8 	bl	80040c0 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b12:	e00a      	b.n	8006b2a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b14:	f7fd fad4 	bl	80040c0 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e138      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b2a:	4b46      	ldr	r3, [pc, #280]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d0ed      	beq.n	8006b14 <HAL_RCC_OscConfig+0x388>
 8006b38:	e015      	b.n	8006b66 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3a:	f7fd fac1 	bl	80040c0 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b40:	e00a      	b.n	8006b58 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b42:	f7fd fabd 	bl	80040c0 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d901      	bls.n	8006b58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006b54:	2303      	movs	r3, #3
 8006b56:	e121      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b58:	4b3a      	ldr	r3, [pc, #232]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1ed      	bne.n	8006b42 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b66:	7ffb      	ldrb	r3, [r7, #31]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d105      	bne.n	8006b78 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b6c:	4b35      	ldr	r3, [pc, #212]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b70:	4a34      	ldr	r2, [pc, #208]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b76:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d03c      	beq.n	8006bfe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01c      	beq.n	8006bc6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b92:	4a2c      	ldr	r2, [pc, #176]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006b94:	f043 0301 	orr.w	r3, r3, #1
 8006b98:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b9c:	f7fd fa90 	bl	80040c0 <HAL_GetTick>
 8006ba0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006ba2:	e008      	b.n	8006bb6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006ba4:	f7fd fa8c 	bl	80040c0 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	2b02      	cmp	r3, #2
 8006bb0:	d901      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e0f2      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bb6:	4b23      	ldr	r3, [pc, #140]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006bb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d0ef      	beq.n	8006ba4 <HAL_RCC_OscConfig+0x418>
 8006bc4:	e01b      	b.n	8006bfe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006bce:	f023 0301 	bic.w	r3, r3, #1
 8006bd2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bd6:	f7fd fa73 	bl	80040c0 <HAL_GetTick>
 8006bda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bde:	f7fd fa6f 	bl	80040c0 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d901      	bls.n	8006bf0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e0d5      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bf0:	4b14      	ldr	r3, [pc, #80]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006bf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1ef      	bne.n	8006bde <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	69db      	ldr	r3, [r3, #28]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 80c9 	beq.w	8006d9a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c08:	4b0e      	ldr	r3, [pc, #56]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f003 030c 	and.w	r3, r3, #12
 8006c10:	2b0c      	cmp	r3, #12
 8006c12:	f000 8083 	beq.w	8006d1c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	2b02      	cmp	r3, #2
 8006c1c:	d15e      	bne.n	8006cdc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1e:	4b09      	ldr	r3, [pc, #36]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a08      	ldr	r2, [pc, #32]	@ (8006c44 <HAL_RCC_OscConfig+0x4b8>)
 8006c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c2a:	f7fd fa49 	bl	80040c0 <HAL_GetTick>
 8006c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c30:	e00c      	b.n	8006c4c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c32:	f7fd fa45 	bl	80040c0 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d905      	bls.n	8006c4c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e0ab      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
 8006c44:	40021000 	.word	0x40021000
 8006c48:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c4c:	4b55      	ldr	r3, [pc, #340]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1ec      	bne.n	8006c32 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c58:	4b52      	ldr	r3, [pc, #328]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	4b52      	ldr	r3, [pc, #328]	@ (8006da8 <HAL_RCC_OscConfig+0x61c>)
 8006c5e:	4013      	ands	r3, r2
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6a11      	ldr	r1, [r2, #32]
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c68:	3a01      	subs	r2, #1
 8006c6a:	0112      	lsls	r2, r2, #4
 8006c6c:	4311      	orrs	r1, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006c72:	0212      	lsls	r2, r2, #8
 8006c74:	4311      	orrs	r1, r2
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006c7a:	0852      	lsrs	r2, r2, #1
 8006c7c:	3a01      	subs	r2, #1
 8006c7e:	0552      	lsls	r2, r2, #21
 8006c80:	4311      	orrs	r1, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006c86:	0852      	lsrs	r2, r2, #1
 8006c88:	3a01      	subs	r2, #1
 8006c8a:	0652      	lsls	r2, r2, #25
 8006c8c:	4311      	orrs	r1, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c92:	06d2      	lsls	r2, r2, #27
 8006c94:	430a      	orrs	r2, r1
 8006c96:	4943      	ldr	r1, [pc, #268]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c9c:	4b41      	ldr	r3, [pc, #260]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a40      	ldr	r2, [pc, #256]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006ca2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006ca6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006ca8:	4b3e      	ldr	r3, [pc, #248]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4a3d      	ldr	r2, [pc, #244]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006cae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006cb2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fd fa04 	bl	80040c0 <HAL_GetTick>
 8006cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cba:	e008      	b.n	8006cce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cbc:	f7fd fa00 	bl	80040c0 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d901      	bls.n	8006cce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e066      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cce:	4b35      	ldr	r3, [pc, #212]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d0f0      	beq.n	8006cbc <HAL_RCC_OscConfig+0x530>
 8006cda:	e05e      	b.n	8006d9a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cdc:	4b31      	ldr	r3, [pc, #196]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a30      	ldr	r2, [pc, #192]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006ce2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ce6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ce8:	f7fd f9ea 	bl	80040c0 <HAL_GetTick>
 8006cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cee:	e008      	b.n	8006d02 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf0:	f7fd f9e6 	bl	80040c0 <HAL_GetTick>
 8006cf4:	4602      	mov	r2, r0
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	1ad3      	subs	r3, r2, r3
 8006cfa:	2b02      	cmp	r3, #2
 8006cfc:	d901      	bls.n	8006d02 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e04c      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d02:	4b28      	ldr	r3, [pc, #160]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1f0      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006d0e:	4b25      	ldr	r3, [pc, #148]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	4924      	ldr	r1, [pc, #144]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006d14:	4b25      	ldr	r3, [pc, #148]	@ (8006dac <HAL_RCC_OscConfig+0x620>)
 8006d16:	4013      	ands	r3, r2
 8006d18:	60cb      	str	r3, [r1, #12]
 8006d1a:	e03e      	b.n	8006d9a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006d24:	2301      	movs	r3, #1
 8006d26:	e039      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006d28:	4b1e      	ldr	r3, [pc, #120]	@ (8006da4 <HAL_RCC_OscConfig+0x618>)
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f003 0203 	and.w	r2, r3, #3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d12c      	bne.n	8006d96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	3b01      	subs	r3, #1
 8006d48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d123      	bne.n	8006d96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d11b      	bne.n	8006d96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d113      	bne.n	8006d96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d78:	085b      	lsrs	r3, r3, #1
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d109      	bne.n	8006d96 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d8c:	085b      	lsrs	r3, r3, #1
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d001      	beq.n	8006d9a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3720      	adds	r7, #32
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40021000 	.word	0x40021000
 8006da8:	019f800c 	.word	0x019f800c
 8006dac:	feeefffc 	.word	0xfeeefffc

08006db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e11e      	b.n	8007006 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006dc8:	4b91      	ldr	r3, [pc, #580]	@ (8007010 <HAL_RCC_ClockConfig+0x260>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	683a      	ldr	r2, [r7, #0]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d910      	bls.n	8006df8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd6:	4b8e      	ldr	r3, [pc, #568]	@ (8007010 <HAL_RCC_ClockConfig+0x260>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f023 020f 	bic.w	r2, r3, #15
 8006dde:	498c      	ldr	r1, [pc, #560]	@ (8007010 <HAL_RCC_ClockConfig+0x260>)
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de6:	4b8a      	ldr	r3, [pc, #552]	@ (8007010 <HAL_RCC_ClockConfig+0x260>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 030f 	and.w	r3, r3, #15
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d001      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e106      	b.n	8007006 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d073      	beq.n	8006eec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d129      	bne.n	8006e60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e0c:	4b81      	ldr	r3, [pc, #516]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d101      	bne.n	8006e1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e0f4      	b.n	8007006 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006e1c:	f000 f99e 	bl	800715c <RCC_GetSysClockFreqFromPLLSource>
 8006e20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	4a7c      	ldr	r2, [pc, #496]	@ (8007018 <HAL_RCC_ClockConfig+0x268>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d93f      	bls.n	8006eaa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d033      	beq.n	8006eaa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d12f      	bne.n	8006eaa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e4a:	4b72      	ldr	r3, [pc, #456]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e52:	4a70      	ldr	r2, [pc, #448]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e5a:	2380      	movs	r3, #128	@ 0x80
 8006e5c:	617b      	str	r3, [r7, #20]
 8006e5e:	e024      	b.n	8006eaa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b02      	cmp	r3, #2
 8006e66:	d107      	bne.n	8006e78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e68:	4b6a      	ldr	r3, [pc, #424]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d109      	bne.n	8006e88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0c6      	b.n	8007006 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e78:	4b66      	ldr	r3, [pc, #408]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d101      	bne.n	8006e88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e0be      	b.n	8007006 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006e88:	f000 f8ce 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 8006e8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	4a61      	ldr	r2, [pc, #388]	@ (8007018 <HAL_RCC_ClockConfig+0x268>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d909      	bls.n	8006eaa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e96:	4b5f      	ldr	r3, [pc, #380]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e9e:	4a5d      	ldr	r2, [pc, #372]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ea4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006ea6:	2380      	movs	r3, #128	@ 0x80
 8006ea8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006eaa:	4b5a      	ldr	r3, [pc, #360]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f023 0203 	bic.w	r2, r3, #3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	4957      	ldr	r1, [pc, #348]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ebc:	f7fd f900 	bl	80040c0 <HAL_GetTick>
 8006ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ec2:	e00a      	b.n	8006eda <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ec4:	f7fd f8fc 	bl	80040c0 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d901      	bls.n	8006eda <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	e095      	b.n	8007006 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eda:	4b4e      	ldr	r3, [pc, #312]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f003 020c 	and.w	r2, r3, #12
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d1eb      	bne.n	8006ec4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d023      	beq.n	8006f40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f04:	4b43      	ldr	r3, [pc, #268]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	4a42      	ldr	r2, [pc, #264]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006f0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0308 	and.w	r3, r3, #8
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d007      	beq.n	8006f2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006f24:	4a3b      	ldr	r2, [pc, #236]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006f26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f2c:	4b39      	ldr	r3, [pc, #228]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	4936      	ldr	r1, [pc, #216]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	608b      	str	r3, [r1, #8]
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2b80      	cmp	r3, #128	@ 0x80
 8006f44:	d105      	bne.n	8006f52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006f46:	4b33      	ldr	r3, [pc, #204]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	4a32      	ldr	r2, [pc, #200]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006f4c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006f50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f52:	4b2f      	ldr	r3, [pc, #188]	@ (8007010 <HAL_RCC_ClockConfig+0x260>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 030f 	and.w	r3, r3, #15
 8006f5a:	683a      	ldr	r2, [r7, #0]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d21d      	bcs.n	8006f9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f60:	4b2b      	ldr	r3, [pc, #172]	@ (8007010 <HAL_RCC_ClockConfig+0x260>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f023 020f 	bic.w	r2, r3, #15
 8006f68:	4929      	ldr	r1, [pc, #164]	@ (8007010 <HAL_RCC_ClockConfig+0x260>)
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f70:	f7fd f8a6 	bl	80040c0 <HAL_GetTick>
 8006f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f76:	e00a      	b.n	8006f8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f78:	f7fd f8a2 	bl	80040c0 <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e03b      	b.n	8007006 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8e:	4b20      	ldr	r3, [pc, #128]	@ (8007010 <HAL_RCC_ClockConfig+0x260>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f003 030f 	and.w	r3, r3, #15
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d1ed      	bne.n	8006f78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d008      	beq.n	8006fba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	4917      	ldr	r1, [pc, #92]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0308 	and.w	r3, r3, #8
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d009      	beq.n	8006fda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fc6:	4b13      	ldr	r3, [pc, #76]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	490f      	ldr	r1, [pc, #60]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fda:	f000 f825 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8007014 <HAL_RCC_ClockConfig+0x264>)
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	091b      	lsrs	r3, r3, #4
 8006fe6:	f003 030f 	and.w	r3, r3, #15
 8006fea:	490c      	ldr	r1, [pc, #48]	@ (800701c <HAL_RCC_ClockConfig+0x26c>)
 8006fec:	5ccb      	ldrb	r3, [r1, r3]
 8006fee:	f003 031f 	and.w	r3, r3, #31
 8006ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8007020 <HAL_RCC_ClockConfig+0x270>)
 8006ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <HAL_RCC_ClockConfig+0x274>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f7fd f812 	bl	8004028 <HAL_InitTick>
 8007004:	4603      	mov	r3, r0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	40022000 	.word	0x40022000
 8007014:	40021000 	.word	0x40021000
 8007018:	04c4b400 	.word	0x04c4b400
 800701c:	0800c26c 	.word	0x0800c26c
 8007020:	2000015c 	.word	0x2000015c
 8007024:	20000160 	.word	0x20000160

08007028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007028:	b480      	push	{r7}
 800702a:	b087      	sub	sp, #28
 800702c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800702e:	4b2c      	ldr	r3, [pc, #176]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f003 030c 	and.w	r3, r3, #12
 8007036:	2b04      	cmp	r3, #4
 8007038:	d102      	bne.n	8007040 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800703a:	4b2a      	ldr	r3, [pc, #168]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800703c:	613b      	str	r3, [r7, #16]
 800703e:	e047      	b.n	80070d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007040:	4b27      	ldr	r3, [pc, #156]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 030c 	and.w	r3, r3, #12
 8007048:	2b08      	cmp	r3, #8
 800704a:	d102      	bne.n	8007052 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800704c:	4b26      	ldr	r3, [pc, #152]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800704e:	613b      	str	r3, [r7, #16]
 8007050:	e03e      	b.n	80070d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007052:	4b23      	ldr	r3, [pc, #140]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 030c 	and.w	r3, r3, #12
 800705a:	2b0c      	cmp	r3, #12
 800705c:	d136      	bne.n	80070cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800705e:	4b20      	ldr	r3, [pc, #128]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007068:	4b1d      	ldr	r3, [pc, #116]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	091b      	lsrs	r3, r3, #4
 800706e:	f003 030f 	and.w	r3, r3, #15
 8007072:	3301      	adds	r3, #1
 8007074:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2b03      	cmp	r3, #3
 800707a:	d10c      	bne.n	8007096 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800707c:	4a1a      	ldr	r2, [pc, #104]	@ (80070e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	fbb2 f3f3 	udiv	r3, r2, r3
 8007084:	4a16      	ldr	r2, [pc, #88]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007086:	68d2      	ldr	r2, [r2, #12]
 8007088:	0a12      	lsrs	r2, r2, #8
 800708a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800708e:	fb02 f303 	mul.w	r3, r2, r3
 8007092:	617b      	str	r3, [r7, #20]
      break;
 8007094:	e00c      	b.n	80070b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007096:	4a13      	ldr	r2, [pc, #76]	@ (80070e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	fbb2 f3f3 	udiv	r3, r2, r3
 800709e:	4a10      	ldr	r2, [pc, #64]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070a0:	68d2      	ldr	r2, [r2, #12]
 80070a2:	0a12      	lsrs	r2, r2, #8
 80070a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80070a8:	fb02 f303 	mul.w	r3, r2, r3
 80070ac:	617b      	str	r3, [r7, #20]
      break;
 80070ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070b0:	4b0b      	ldr	r3, [pc, #44]	@ (80070e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	0e5b      	lsrs	r3, r3, #25
 80070b6:	f003 0303 	and.w	r3, r3, #3
 80070ba:	3301      	adds	r3, #1
 80070bc:	005b      	lsls	r3, r3, #1
 80070be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	e001      	b.n	80070d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80070d0:	693b      	ldr	r3, [r7, #16]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	40021000 	.word	0x40021000
 80070e4:	00f42400 	.word	0x00f42400
 80070e8:	016e3600 	.word	0x016e3600

080070ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070f0:	4b03      	ldr	r3, [pc, #12]	@ (8007100 <HAL_RCC_GetHCLKFreq+0x14>)
 80070f2:	681b      	ldr	r3, [r3, #0]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	2000015c 	.word	0x2000015c

08007104 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007108:	f7ff fff0 	bl	80070ec <HAL_RCC_GetHCLKFreq>
 800710c:	4602      	mov	r2, r0
 800710e:	4b06      	ldr	r3, [pc, #24]	@ (8007128 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	0a1b      	lsrs	r3, r3, #8
 8007114:	f003 0307 	and.w	r3, r3, #7
 8007118:	4904      	ldr	r1, [pc, #16]	@ (800712c <HAL_RCC_GetPCLK1Freq+0x28>)
 800711a:	5ccb      	ldrb	r3, [r1, r3]
 800711c:	f003 031f 	and.w	r3, r3, #31
 8007120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	bd80      	pop	{r7, pc}
 8007128:	40021000 	.word	0x40021000
 800712c:	0800c27c 	.word	0x0800c27c

08007130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007134:	f7ff ffda 	bl	80070ec <HAL_RCC_GetHCLKFreq>
 8007138:	4602      	mov	r2, r0
 800713a:	4b06      	ldr	r3, [pc, #24]	@ (8007154 <HAL_RCC_GetPCLK2Freq+0x24>)
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	0adb      	lsrs	r3, r3, #11
 8007140:	f003 0307 	and.w	r3, r3, #7
 8007144:	4904      	ldr	r1, [pc, #16]	@ (8007158 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007146:	5ccb      	ldrb	r3, [r1, r3]
 8007148:	f003 031f 	and.w	r3, r3, #31
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007150:	4618      	mov	r0, r3
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40021000 	.word	0x40021000
 8007158:	0800c27c 	.word	0x0800c27c

0800715c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800715c:	b480      	push	{r7}
 800715e:	b087      	sub	sp, #28
 8007160:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007162:	4b1e      	ldr	r3, [pc, #120]	@ (80071dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f003 0303 	and.w	r3, r3, #3
 800716a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800716c:	4b1b      	ldr	r3, [pc, #108]	@ (80071dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	091b      	lsrs	r3, r3, #4
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	3301      	adds	r3, #1
 8007178:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d10c      	bne.n	800719a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007180:	4a17      	ldr	r2, [pc, #92]	@ (80071e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	fbb2 f3f3 	udiv	r3, r2, r3
 8007188:	4a14      	ldr	r2, [pc, #80]	@ (80071dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800718a:	68d2      	ldr	r2, [r2, #12]
 800718c:	0a12      	lsrs	r2, r2, #8
 800718e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007192:	fb02 f303 	mul.w	r3, r2, r3
 8007196:	617b      	str	r3, [r7, #20]
    break;
 8007198:	e00c      	b.n	80071b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800719a:	4a12      	ldr	r2, [pc, #72]	@ (80071e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a2:	4a0e      	ldr	r2, [pc, #56]	@ (80071dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071a4:	68d2      	ldr	r2, [r2, #12]
 80071a6:	0a12      	lsrs	r2, r2, #8
 80071a8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80071ac:	fb02 f303 	mul.w	r3, r2, r3
 80071b0:	617b      	str	r3, [r7, #20]
    break;
 80071b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071b4:	4b09      	ldr	r3, [pc, #36]	@ (80071dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	0e5b      	lsrs	r3, r3, #25
 80071ba:	f003 0303 	and.w	r3, r3, #3
 80071be:	3301      	adds	r3, #1
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80071ce:	687b      	ldr	r3, [r7, #4]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	40021000 	.word	0x40021000
 80071e0:	016e3600 	.word	0x016e3600
 80071e4:	00f42400 	.word	0x00f42400

080071e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80071f0:	2300      	movs	r3, #0
 80071f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80071f4:	2300      	movs	r3, #0
 80071f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007200:	2b00      	cmp	r3, #0
 8007202:	f000 8098 	beq.w	8007336 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007206:	2300      	movs	r3, #0
 8007208:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800720a:	4b43      	ldr	r3, [pc, #268]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800720c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800720e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10d      	bne.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007216:	4b40      	ldr	r3, [pc, #256]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007218:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800721a:	4a3f      	ldr	r2, [pc, #252]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800721c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007220:	6593      	str	r3, [r2, #88]	@ 0x58
 8007222:	4b3d      	ldr	r3, [pc, #244]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800722a:	60bb      	str	r3, [r7, #8]
 800722c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800722e:	2301      	movs	r3, #1
 8007230:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007232:	4b3a      	ldr	r3, [pc, #232]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4a39      	ldr	r2, [pc, #228]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800723c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800723e:	f7fc ff3f 	bl	80040c0 <HAL_GetTick>
 8007242:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007244:	e009      	b.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007246:	f7fc ff3b 	bl	80040c0 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	2b02      	cmp	r3, #2
 8007252:	d902      	bls.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	74fb      	strb	r3, [r7, #19]
        break;
 8007258:	e005      	b.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800725a:	4b30      	ldr	r3, [pc, #192]	@ (800731c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0ef      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007266:	7cfb      	ldrb	r3, [r7, #19]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d159      	bne.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800726c:	4b2a      	ldr	r3, [pc, #168]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800726e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007276:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01e      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007282:	697a      	ldr	r2, [r7, #20]
 8007284:	429a      	cmp	r2, r3
 8007286:	d019      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007288:	4b23      	ldr	r3, [pc, #140]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800728a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800728e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007292:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007294:	4b20      	ldr	r3, [pc, #128]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007296:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800729a:	4a1f      	ldr	r2, [pc, #124]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800729c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072aa:	4a1b      	ldr	r2, [pc, #108]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80072b4:	4a18      	ldr	r2, [pc, #96]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d016      	beq.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072c6:	f7fc fefb 	bl	80040c0 <HAL_GetTick>
 80072ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072cc:	e00b      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072ce:	f7fc fef7 	bl	80040c0 <HAL_GetTick>
 80072d2:	4602      	mov	r2, r0
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072dc:	4293      	cmp	r3, r2
 80072de:	d902      	bls.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	74fb      	strb	r3, [r7, #19]
            break;
 80072e4:	e006      	b.n	80072f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d0ec      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80072f4:	7cfb      	ldrb	r3, [r7, #19]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10b      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072fa:	4b07      	ldr	r3, [pc, #28]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007300:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007308:	4903      	ldr	r1, [pc, #12]	@ (8007318 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800730a:	4313      	orrs	r3, r2
 800730c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007310:	e008      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007312:	7cfb      	ldrb	r3, [r7, #19]
 8007314:	74bb      	strb	r3, [r7, #18]
 8007316:	e005      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007318:	40021000 	.word	0x40021000
 800731c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007320:	7cfb      	ldrb	r3, [r7, #19]
 8007322:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007324:	7c7b      	ldrb	r3, [r7, #17]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d105      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800732a:	4ba7      	ldr	r3, [pc, #668]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800732c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732e:	4aa6      	ldr	r2, [pc, #664]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007330:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007334:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00a      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007342:	4ba1      	ldr	r3, [pc, #644]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007348:	f023 0203 	bic.w	r2, r3, #3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	499d      	ldr	r1, [pc, #628]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007352:	4313      	orrs	r3, r2
 8007354:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00a      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007364:	4b98      	ldr	r3, [pc, #608]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800736a:	f023 020c 	bic.w	r2, r3, #12
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	4995      	ldr	r1, [pc, #596]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007374:	4313      	orrs	r3, r2
 8007376:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007386:	4b90      	ldr	r3, [pc, #576]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800738c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	498c      	ldr	r1, [pc, #560]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007396:	4313      	orrs	r3, r2
 8007398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d00a      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073a8:	4b87      	ldr	r3, [pc, #540]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073ae:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	4984      	ldr	r1, [pc, #528]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073b8:	4313      	orrs	r3, r2
 80073ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 0310 	and.w	r3, r3, #16
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073ca:	4b7f      	ldr	r3, [pc, #508]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	497b      	ldr	r1, [pc, #492]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073da:	4313      	orrs	r3, r2
 80073dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00a      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80073ec:	4b76      	ldr	r3, [pc, #472]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073f2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	4973      	ldr	r1, [pc, #460]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073fc:	4313      	orrs	r3, r2
 80073fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800740e:	4b6e      	ldr	r3, [pc, #440]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007410:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007414:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	69db      	ldr	r3, [r3, #28]
 800741c:	496a      	ldr	r1, [pc, #424]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007430:	4b65      	ldr	r3, [pc, #404]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007436:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	4962      	ldr	r1, [pc, #392]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007440:	4313      	orrs	r3, r2
 8007442:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007452:	4b5d      	ldr	r3, [pc, #372]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007458:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007460:	4959      	ldr	r1, [pc, #356]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007462:	4313      	orrs	r3, r2
 8007464:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00a      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007474:	4b54      	ldr	r3, [pc, #336]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007476:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800747a:	f023 0203 	bic.w	r2, r3, #3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007482:	4951      	ldr	r1, [pc, #324]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007496:	4b4c      	ldr	r3, [pc, #304]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a4:	4948      	ldr	r1, [pc, #288]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d015      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074b8:	4b43      	ldr	r3, [pc, #268]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c6:	4940      	ldr	r1, [pc, #256]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074d6:	d105      	bne.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074d8:	4b3b      	ldr	r3, [pc, #236]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	4a3a      	ldr	r2, [pc, #232]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80074e2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d015      	beq.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80074f0:	4b35      	ldr	r3, [pc, #212]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074fe:	4932      	ldr	r1, [pc, #200]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007500:	4313      	orrs	r3, r2
 8007502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800750a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800750e:	d105      	bne.n	800751c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007510:	4b2d      	ldr	r3, [pc, #180]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	4a2c      	ldr	r2, [pc, #176]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800751a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d015      	beq.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007528:	4b27      	ldr	r3, [pc, #156]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800752e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007536:	4924      	ldr	r1, [pc, #144]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007538:	4313      	orrs	r3, r2
 800753a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007546:	d105      	bne.n	8007554 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007548:	4b1f      	ldr	r3, [pc, #124]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	4a1e      	ldr	r2, [pc, #120]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800754e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007552:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d015      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007560:	4b19      	ldr	r3, [pc, #100]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007562:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007566:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800756e:	4916      	ldr	r1, [pc, #88]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007570:	4313      	orrs	r3, r2
 8007572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800757e:	d105      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007580:	4b11      	ldr	r3, [pc, #68]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	4a10      	ldr	r2, [pc, #64]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800758a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d019      	beq.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007598:	4b0b      	ldr	r3, [pc, #44]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800759e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a6:	4908      	ldr	r1, [pc, #32]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a8:	4313      	orrs	r3, r2
 80075aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80075b6:	d109      	bne.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075b8:	4b03      	ldr	r3, [pc, #12]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	4a02      	ldr	r2, [pc, #8]	@ (80075c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075c2:	60d3      	str	r3, [r2, #12]
 80075c4:	e002      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80075c6:	bf00      	nop
 80075c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d015      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80075d8:	4b29      	ldr	r3, [pc, #164]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075de:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e6:	4926      	ldr	r1, [pc, #152]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80075f6:	d105      	bne.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80075f8:	4b21      	ldr	r3, [pc, #132]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	4a20      	ldr	r2, [pc, #128]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007602:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800760c:	2b00      	cmp	r3, #0
 800760e:	d015      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007610:	4b1b      	ldr	r3, [pc, #108]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007616:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800761e:	4918      	ldr	r1, [pc, #96]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007620:	4313      	orrs	r3, r2
 8007622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800762a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800762e:	d105      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007630:	4b13      	ldr	r3, [pc, #76]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	4a12      	ldr	r2, [pc, #72]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007636:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800763a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d015      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007648:	4b0d      	ldr	r3, [pc, #52]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800764a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800764e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007656:	490a      	ldr	r1, [pc, #40]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007658:	4313      	orrs	r3, r2
 800765a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007662:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007666:	d105      	bne.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007668:	4b05      	ldr	r3, [pc, #20]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	4a04      	ldr	r2, [pc, #16]	@ (8007680 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800766e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007672:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007674:	7cbb      	ldrb	r3, [r7, #18]
}
 8007676:	4618      	mov	r0, r3
 8007678:	3718      	adds	r7, #24
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40021000 	.word	0x40021000

08007684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d101      	bne.n	8007696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007692:	2301      	movs	r3, #1
 8007694:	e054      	b.n	8007740 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d111      	bne.n	80076c6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 feec 	bl	8009488 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d102      	bne.n	80076be <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a23      	ldr	r2, [pc, #140]	@ (8007748 <HAL_TIM_Base_Init+0xc4>)
 80076bc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2202      	movs	r2, #2
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f001 fa35 	bl	8008b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2201      	movs	r2, #1
 8007732:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	3708      	adds	r7, #8
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	08003b0d 	.word	0x08003b0d

0800774c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b01      	cmp	r3, #1
 800775e:	d001      	beq.n	8007764 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	e04c      	b.n	80077fe <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a26      	ldr	r2, [pc, #152]	@ (800780c <HAL_TIM_Base_Start+0xc0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d022      	beq.n	80077bc <HAL_TIM_Base_Start+0x70>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800777e:	d01d      	beq.n	80077bc <HAL_TIM_Base_Start+0x70>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a22      	ldr	r2, [pc, #136]	@ (8007810 <HAL_TIM_Base_Start+0xc4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d018      	beq.n	80077bc <HAL_TIM_Base_Start+0x70>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a21      	ldr	r2, [pc, #132]	@ (8007814 <HAL_TIM_Base_Start+0xc8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d013      	beq.n	80077bc <HAL_TIM_Base_Start+0x70>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a1f      	ldr	r2, [pc, #124]	@ (8007818 <HAL_TIM_Base_Start+0xcc>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d00e      	beq.n	80077bc <HAL_TIM_Base_Start+0x70>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a1e      	ldr	r2, [pc, #120]	@ (800781c <HAL_TIM_Base_Start+0xd0>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d009      	beq.n	80077bc <HAL_TIM_Base_Start+0x70>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007820 <HAL_TIM_Base_Start+0xd4>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d004      	beq.n	80077bc <HAL_TIM_Base_Start+0x70>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a1b      	ldr	r2, [pc, #108]	@ (8007824 <HAL_TIM_Base_Start+0xd8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d115      	bne.n	80077e8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689a      	ldr	r2, [r3, #8]
 80077c2:	4b19      	ldr	r3, [pc, #100]	@ (8007828 <HAL_TIM_Base_Start+0xdc>)
 80077c4:	4013      	ands	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b06      	cmp	r3, #6
 80077cc:	d015      	beq.n	80077fa <HAL_TIM_Base_Start+0xae>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077d4:	d011      	beq.n	80077fa <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f042 0201 	orr.w	r2, r2, #1
 80077e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077e6:	e008      	b.n	80077fa <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0201 	orr.w	r2, r2, #1
 80077f6:	601a      	str	r2, [r3, #0]
 80077f8:	e000      	b.n	80077fc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40012c00 	.word	0x40012c00
 8007810:	40000400 	.word	0x40000400
 8007814:	40000800 	.word	0x40000800
 8007818:	40000c00 	.word	0x40000c00
 800781c:	40013400 	.word	0x40013400
 8007820:	40014000 	.word	0x40014000
 8007824:	40015000 	.word	0x40015000
 8007828:	00010007 	.word	0x00010007

0800782c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b01      	cmp	r3, #1
 800783e:	d001      	beq.n	8007844 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e054      	b.n	80078ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0201 	orr.w	r2, r2, #1
 800785a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a26      	ldr	r2, [pc, #152]	@ (80078fc <HAL_TIM_Base_Start_IT+0xd0>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d022      	beq.n	80078ac <HAL_TIM_Base_Start_IT+0x80>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800786e:	d01d      	beq.n	80078ac <HAL_TIM_Base_Start_IT+0x80>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a22      	ldr	r2, [pc, #136]	@ (8007900 <HAL_TIM_Base_Start_IT+0xd4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d018      	beq.n	80078ac <HAL_TIM_Base_Start_IT+0x80>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a21      	ldr	r2, [pc, #132]	@ (8007904 <HAL_TIM_Base_Start_IT+0xd8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d013      	beq.n	80078ac <HAL_TIM_Base_Start_IT+0x80>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1f      	ldr	r2, [pc, #124]	@ (8007908 <HAL_TIM_Base_Start_IT+0xdc>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d00e      	beq.n	80078ac <HAL_TIM_Base_Start_IT+0x80>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a1e      	ldr	r2, [pc, #120]	@ (800790c <HAL_TIM_Base_Start_IT+0xe0>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d009      	beq.n	80078ac <HAL_TIM_Base_Start_IT+0x80>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a1c      	ldr	r2, [pc, #112]	@ (8007910 <HAL_TIM_Base_Start_IT+0xe4>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d004      	beq.n	80078ac <HAL_TIM_Base_Start_IT+0x80>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a1b      	ldr	r2, [pc, #108]	@ (8007914 <HAL_TIM_Base_Start_IT+0xe8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d115      	bne.n	80078d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	689a      	ldr	r2, [r3, #8]
 80078b2:	4b19      	ldr	r3, [pc, #100]	@ (8007918 <HAL_TIM_Base_Start_IT+0xec>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2b06      	cmp	r3, #6
 80078bc:	d015      	beq.n	80078ea <HAL_TIM_Base_Start_IT+0xbe>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078c4:	d011      	beq.n	80078ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f042 0201 	orr.w	r2, r2, #1
 80078d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078d6:	e008      	b.n	80078ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	e000      	b.n	80078ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	40012c00 	.word	0x40012c00
 8007900:	40000400 	.word	0x40000400
 8007904:	40000800 	.word	0x40000800
 8007908:	40000c00 	.word	0x40000c00
 800790c:	40013400 	.word	0x40013400
 8007910:	40014000 	.word	0x40014000
 8007914:	40015000 	.word	0x40015000
 8007918:	00010007 	.word	0x00010007

0800791c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e054      	b.n	80079d8 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d111      	bne.n	800795e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f001 fda0 	bl	8009488 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800794c:	2b00      	cmp	r3, #0
 800794e:	d102      	bne.n	8007956 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4a23      	ldr	r2, [pc, #140]	@ (80079e0 <HAL_TIM_PWM_Init+0xc4>)
 8007954:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2202      	movs	r2, #2
 8007962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3304      	adds	r3, #4
 800796e:	4619      	mov	r1, r3
 8007970:	4610      	mov	r0, r2
 8007972:	f001 f8e9 	bl	8008b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2201      	movs	r2, #1
 8007982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2201      	movs	r2, #1
 8007992:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2201      	movs	r2, #1
 800799a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2201      	movs	r2, #1
 80079c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2201      	movs	r2, #1
 80079ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	080079e5 	.word	0x080079e5

080079e4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079ec:	bf00      	nop
 80079ee:	370c      	adds	r7, #12
 80079f0:	46bd      	mov	sp, r7
 80079f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f6:	4770      	bx	lr

080079f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <HAL_TIM_PWM_Start+0x24>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e03c      	b.n	8007a96 <HAL_TIM_PWM_Start+0x9e>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d109      	bne.n	8007a36 <HAL_TIM_PWM_Start+0x3e>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	bf14      	ite	ne
 8007a2e:	2301      	movne	r3, #1
 8007a30:	2300      	moveq	r3, #0
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	e02f      	b.n	8007a96 <HAL_TIM_PWM_Start+0x9e>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d109      	bne.n	8007a50 <HAL_TIM_PWM_Start+0x58>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	bf14      	ite	ne
 8007a48:	2301      	movne	r3, #1
 8007a4a:	2300      	moveq	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	e022      	b.n	8007a96 <HAL_TIM_PWM_Start+0x9e>
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	2b0c      	cmp	r3, #12
 8007a54:	d109      	bne.n	8007a6a <HAL_TIM_PWM_Start+0x72>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a5c:	b2db      	uxtb	r3, r3
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	bf14      	ite	ne
 8007a62:	2301      	movne	r3, #1
 8007a64:	2300      	moveq	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	e015      	b.n	8007a96 <HAL_TIM_PWM_Start+0x9e>
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b10      	cmp	r3, #16
 8007a6e:	d109      	bne.n	8007a84 <HAL_TIM_PWM_Start+0x8c>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	bf14      	ite	ne
 8007a7c:	2301      	movne	r3, #1
 8007a7e:	2300      	moveq	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	e008      	b.n	8007a96 <HAL_TIM_PWM_Start+0x9e>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	bf14      	ite	ne
 8007a90:	2301      	movne	r3, #1
 8007a92:	2300      	moveq	r3, #0
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d001      	beq.n	8007a9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e0a6      	b.n	8007bec <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d104      	bne.n	8007aae <HAL_TIM_PWM_Start+0xb6>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007aac:	e023      	b.n	8007af6 <HAL_TIM_PWM_Start+0xfe>
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d104      	bne.n	8007abe <HAL_TIM_PWM_Start+0xc6>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007abc:	e01b      	b.n	8007af6 <HAL_TIM_PWM_Start+0xfe>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	d104      	bne.n	8007ace <HAL_TIM_PWM_Start+0xd6>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007acc:	e013      	b.n	8007af6 <HAL_TIM_PWM_Start+0xfe>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b0c      	cmp	r3, #12
 8007ad2:	d104      	bne.n	8007ade <HAL_TIM_PWM_Start+0xe6>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2202      	movs	r2, #2
 8007ad8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007adc:	e00b      	b.n	8007af6 <HAL_TIM_PWM_Start+0xfe>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b10      	cmp	r3, #16
 8007ae2:	d104      	bne.n	8007aee <HAL_TIM_PWM_Start+0xf6>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007aec:	e003      	b.n	8007af6 <HAL_TIM_PWM_Start+0xfe>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2202      	movs	r2, #2
 8007af2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2201      	movs	r2, #1
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	4618      	mov	r0, r3
 8007b00:	f001 fc9c 	bl	800943c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a3a      	ldr	r2, [pc, #232]	@ (8007bf4 <HAL_TIM_PWM_Start+0x1fc>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d018      	beq.n	8007b40 <HAL_TIM_PWM_Start+0x148>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a39      	ldr	r2, [pc, #228]	@ (8007bf8 <HAL_TIM_PWM_Start+0x200>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d013      	beq.n	8007b40 <HAL_TIM_PWM_Start+0x148>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a37      	ldr	r2, [pc, #220]	@ (8007bfc <HAL_TIM_PWM_Start+0x204>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d00e      	beq.n	8007b40 <HAL_TIM_PWM_Start+0x148>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a36      	ldr	r2, [pc, #216]	@ (8007c00 <HAL_TIM_PWM_Start+0x208>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d009      	beq.n	8007b40 <HAL_TIM_PWM_Start+0x148>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a34      	ldr	r2, [pc, #208]	@ (8007c04 <HAL_TIM_PWM_Start+0x20c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d004      	beq.n	8007b40 <HAL_TIM_PWM_Start+0x148>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a33      	ldr	r2, [pc, #204]	@ (8007c08 <HAL_TIM_PWM_Start+0x210>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d101      	bne.n	8007b44 <HAL_TIM_PWM_Start+0x14c>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e000      	b.n	8007b46 <HAL_TIM_PWM_Start+0x14e>
 8007b44:	2300      	movs	r3, #0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a25      	ldr	r2, [pc, #148]	@ (8007bf4 <HAL_TIM_PWM_Start+0x1fc>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d022      	beq.n	8007baa <HAL_TIM_PWM_Start+0x1b2>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b6c:	d01d      	beq.n	8007baa <HAL_TIM_PWM_Start+0x1b2>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a26      	ldr	r2, [pc, #152]	@ (8007c0c <HAL_TIM_PWM_Start+0x214>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d018      	beq.n	8007baa <HAL_TIM_PWM_Start+0x1b2>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a24      	ldr	r2, [pc, #144]	@ (8007c10 <HAL_TIM_PWM_Start+0x218>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d013      	beq.n	8007baa <HAL_TIM_PWM_Start+0x1b2>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a23      	ldr	r2, [pc, #140]	@ (8007c14 <HAL_TIM_PWM_Start+0x21c>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00e      	beq.n	8007baa <HAL_TIM_PWM_Start+0x1b2>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a19      	ldr	r2, [pc, #100]	@ (8007bf8 <HAL_TIM_PWM_Start+0x200>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d009      	beq.n	8007baa <HAL_TIM_PWM_Start+0x1b2>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a18      	ldr	r2, [pc, #96]	@ (8007bfc <HAL_TIM_PWM_Start+0x204>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d004      	beq.n	8007baa <HAL_TIM_PWM_Start+0x1b2>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a18      	ldr	r2, [pc, #96]	@ (8007c08 <HAL_TIM_PWM_Start+0x210>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d115      	bne.n	8007bd6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	689a      	ldr	r2, [r3, #8]
 8007bb0:	4b19      	ldr	r3, [pc, #100]	@ (8007c18 <HAL_TIM_PWM_Start+0x220>)
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b06      	cmp	r3, #6
 8007bba:	d015      	beq.n	8007be8 <HAL_TIM_PWM_Start+0x1f0>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bc2:	d011      	beq.n	8007be8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f042 0201 	orr.w	r2, r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd4:	e008      	b.n	8007be8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f042 0201 	orr.w	r2, r2, #1
 8007be4:	601a      	str	r2, [r3, #0]
 8007be6:	e000      	b.n	8007bea <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007be8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3710      	adds	r7, #16
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	40012c00 	.word	0x40012c00
 8007bf8:	40013400 	.word	0x40013400
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40014400 	.word	0x40014400
 8007c04:	40014800 	.word	0x40014800
 8007c08:	40015000 	.word	0x40015000
 8007c0c:	40000400 	.word	0x40000400
 8007c10:	40000800 	.word	0x40000800
 8007c14:	40000c00 	.word	0x40000c00
 8007c18:	00010007 	.word	0x00010007

08007c1c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d101      	bne.n	8007c30 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e04c      	b.n	8007cca <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d111      	bne.n	8007c60 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 fc1f 	bl	8009488 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d102      	bne.n	8007c58 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	4a1f      	ldr	r2, [pc, #124]	@ (8007cd4 <HAL_TIM_OnePulse_Init+0xb8>)
 8007c56:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2202      	movs	r2, #2
 8007c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3304      	adds	r3, #4
 8007c70:	4619      	mov	r1, r3
 8007c72:	4610      	mov	r0, r2
 8007c74:	f000 ff68 	bl	8008b48 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f022 0208 	bic.w	r2, r2, #8
 8007c86:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	430a      	orrs	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	08007cd9 	.word	0x08007cd9

08007cd8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cfc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007d04:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d0c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d14:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d16:	7bfb      	ldrb	r3, [r7, #15]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d108      	bne.n	8007d2e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d1c:	7bbb      	ldrb	r3, [r7, #14]
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d105      	bne.n	8007d2e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d22:	7b7b      	ldrb	r3, [r7, #13]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d102      	bne.n	8007d2e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d28:	7b3b      	ldrb	r3, [r7, #12]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d001      	beq.n	8007d32 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e059      	b.n	8007de6 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2202      	movs	r2, #2
 8007d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2202      	movs	r2, #2
 8007d4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f042 0202 	orr.w	r2, r2, #2
 8007d60:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68da      	ldr	r2, [r3, #12]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 0204 	orr.w	r2, r2, #4
 8007d70:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2201      	movs	r2, #1
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f001 fb5e 	bl	800943c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2201      	movs	r2, #1
 8007d86:	2104      	movs	r1, #4
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 fb57 	bl	800943c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a17      	ldr	r2, [pc, #92]	@ (8007df0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d018      	beq.n	8007dca <HAL_TIM_OnePulse_Start_IT+0xde>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a15      	ldr	r2, [pc, #84]	@ (8007df4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <HAL_TIM_OnePulse_Start_IT+0xde>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a14      	ldr	r2, [pc, #80]	@ (8007df8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00e      	beq.n	8007dca <HAL_TIM_OnePulse_Start_IT+0xde>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a12      	ldr	r2, [pc, #72]	@ (8007dfc <HAL_TIM_OnePulse_Start_IT+0x110>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d009      	beq.n	8007dca <HAL_TIM_OnePulse_Start_IT+0xde>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a11      	ldr	r2, [pc, #68]	@ (8007e00 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d004      	beq.n	8007dca <HAL_TIM_OnePulse_Start_IT+0xde>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a0f      	ldr	r2, [pc, #60]	@ (8007e04 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d101      	bne.n	8007dce <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d007      	beq.n	8007de4 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007de2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40012c00 	.word	0x40012c00
 8007df4:	40013400 	.word	0x40013400
 8007df8:	40014000 	.word	0x40014000
 8007dfc:	40014400 	.word	0x40014400
 8007e00:	40014800 	.word	0x40014800
 8007e04:	40015000 	.word	0x40015000

08007e08 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d101      	bne.n	8007e1c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e0a2      	b.n	8007f62 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d111      	bne.n	8007e4c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f001 fb29 	bl	8009488 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d102      	bne.n	8007e44 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a4a      	ldr	r2, [pc, #296]	@ (8007f6c <HAL_TIM_Encoder_Init+0x164>)
 8007e42:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6812      	ldr	r2, [r2, #0]
 8007e5e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8007e62:	f023 0307 	bic.w	r3, r3, #7
 8007e66:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3304      	adds	r3, #4
 8007e70:	4619      	mov	r1, r3
 8007e72:	4610      	mov	r0, r2
 8007e74:	f000 fe68 	bl	8008b48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	689b      	ldr	r3, [r3, #8]
 8007e7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ea0:	f023 0303 	bic.w	r3, r3, #3
 8007ea4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	021b      	lsls	r3, r3, #8
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007ebe:	f023 030c 	bic.w	r3, r3, #12
 8007ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	021b      	lsls	r3, r3, #8
 8007eda:	4313      	orrs	r3, r2
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	011a      	lsls	r2, r3, #4
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	031b      	lsls	r3, r3, #12
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007efc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007f04:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	011b      	lsls	r3, r3, #4
 8007f10:	4313      	orrs	r3, r2
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	08003bdd 	.word	0x08003bdd

08007f70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007f80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d110      	bne.n	8007fc2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d102      	bne.n	8007fac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fa6:	7b7b      	ldrb	r3, [r7, #13]
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d001      	beq.n	8007fb0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007fac:	2301      	movs	r3, #1
 8007fae:	e069      	b.n	8008084 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007fc0:	e031      	b.n	8008026 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	d110      	bne.n	8007fea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d102      	bne.n	8007fd4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007fce:	7b3b      	ldrb	r3, [r7, #12]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d001      	beq.n	8007fd8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e055      	b.n	8008084 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2202      	movs	r2, #2
 8007fdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007fe8:	e01d      	b.n	8008026 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d108      	bne.n	8008002 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d105      	bne.n	8008002 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ff6:	7b7b      	ldrb	r3, [r7, #13]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d102      	bne.n	8008002 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ffc:	7b3b      	ldrb	r3, [r7, #12]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d001      	beq.n	8008006 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e03e      	b.n	8008084 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2202      	movs	r2, #2
 800800a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2202      	movs	r2, #2
 8008012:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2202      	movs	r2, #2
 800801a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2202      	movs	r2, #2
 8008022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <HAL_TIM_Encoder_Start+0xc4>
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	2b04      	cmp	r3, #4
 8008030:	d008      	beq.n	8008044 <HAL_TIM_Encoder_Start+0xd4>
 8008032:	e00f      	b.n	8008054 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	2201      	movs	r2, #1
 800803a:	2100      	movs	r1, #0
 800803c:	4618      	mov	r0, r3
 800803e:	f001 f9fd 	bl	800943c <TIM_CCxChannelCmd>
      break;
 8008042:	e016      	b.n	8008072 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2201      	movs	r2, #1
 800804a:	2104      	movs	r1, #4
 800804c:	4618      	mov	r0, r3
 800804e:	f001 f9f5 	bl	800943c <TIM_CCxChannelCmd>
      break;
 8008052:	e00e      	b.n	8008072 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	2201      	movs	r2, #1
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f001 f9ed 	bl	800943c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2201      	movs	r2, #1
 8008068:	2104      	movs	r1, #4
 800806a:	4618      	mov	r0, r3
 800806c:	f001 f9e6 	bl	800943c <TIM_CCxChannelCmd>
      break;
 8008070:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f042 0201 	orr.w	r2, r2, #1
 8008080:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b084      	sub	sp, #16
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d026      	beq.n	80080fc <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d021      	beq.n	80080fc <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f06f 0202 	mvn.w	r2, #2
 80080c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2201      	movs	r2, #1
 80080c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	4798      	blx	r3
 80080e0:	e009      	b.n	80080f6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2200      	movs	r2, #0
 80080fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b00      	cmp	r3, #0
 8008104:	d026      	beq.n	8008154 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f003 0304 	and.w	r3, r3, #4
 800810c:	2b00      	cmp	r3, #0
 800810e:	d021      	beq.n	8008154 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f06f 0204 	mvn.w	r2, #4
 8008118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2202      	movs	r2, #2
 800811e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800812a:	2b00      	cmp	r3, #0
 800812c:	d005      	beq.n	800813a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	4798      	blx	r3
 8008138:	e009      	b.n	800814e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d026      	beq.n	80081ac <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b00      	cmp	r3, #0
 8008166:	d021      	beq.n	80081ac <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f06f 0208 	mvn.w	r2, #8
 8008170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2204      	movs	r2, #4
 8008176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	f003 0303 	and.w	r3, r3, #3
 8008182:	2b00      	cmp	r3, #0
 8008184:	d005      	beq.n	8008192 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	4798      	blx	r3
 8008190:	e009      	b.n	80081a6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f003 0310 	and.w	r3, r3, #16
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d026      	beq.n	8008204 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f003 0310 	and.w	r3, r3, #16
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d021      	beq.n	8008204 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f06f 0210 	mvn.w	r2, #16
 80081c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2208      	movs	r2, #8
 80081ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	69db      	ldr	r3, [r3, #28]
 80081d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d005      	beq.n	80081ea <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
 80081e8:	e009      	b.n	80081fe <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f003 0301 	and.w	r3, r3, #1
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00e      	beq.n	800822c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f003 0301 	and.w	r3, r3, #1
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f06f 0201 	mvn.w	r2, #1
 8008220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008232:	2b00      	cmp	r3, #0
 8008234:	d104      	bne.n	8008240 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800823c:	2b00      	cmp	r3, #0
 800823e:	d00e      	beq.n	800825e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008246:	2b00      	cmp	r3, #0
 8008248:	d009      	beq.n	800825e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008264:	2b00      	cmp	r3, #0
 8008266:	d00e      	beq.n	8008286 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800826e:	2b00      	cmp	r3, #0
 8008270:	d009      	beq.n	8008286 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800827a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00e      	beq.n	80082ae <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	d009      	beq.n	80082ae <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80082a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f003 0320 	and.w	r3, r3, #32
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d00e      	beq.n	80082d6 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f003 0320 	and.w	r3, r3, #32
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d009      	beq.n	80082d6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f06f 0220 	mvn.w	r2, #32
 80082ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00e      	beq.n	80082fe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d009      	beq.n	80082fe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80082f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00e      	beq.n	8008326 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800830e:	2b00      	cmp	r3, #0
 8008310:	d009      	beq.n	8008326 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800831a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00e      	beq.n	800834e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d009      	beq.n	800834e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8008342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00e      	beq.n	8008376 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800836a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800838c:	2300      	movs	r3, #0
 800838e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008396:	2b01      	cmp	r3, #1
 8008398:	d101      	bne.n	800839e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800839a:	2302      	movs	r3, #2
 800839c:	e0ff      	b.n	800859e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b14      	cmp	r3, #20
 80083aa:	f200 80f0 	bhi.w	800858e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083ae:	a201      	add	r2, pc, #4	@ (adr r2, 80083b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	08008409 	.word	0x08008409
 80083b8:	0800858f 	.word	0x0800858f
 80083bc:	0800858f 	.word	0x0800858f
 80083c0:	0800858f 	.word	0x0800858f
 80083c4:	08008449 	.word	0x08008449
 80083c8:	0800858f 	.word	0x0800858f
 80083cc:	0800858f 	.word	0x0800858f
 80083d0:	0800858f 	.word	0x0800858f
 80083d4:	0800848b 	.word	0x0800848b
 80083d8:	0800858f 	.word	0x0800858f
 80083dc:	0800858f 	.word	0x0800858f
 80083e0:	0800858f 	.word	0x0800858f
 80083e4:	080084cb 	.word	0x080084cb
 80083e8:	0800858f 	.word	0x0800858f
 80083ec:	0800858f 	.word	0x0800858f
 80083f0:	0800858f 	.word	0x0800858f
 80083f4:	0800850d 	.word	0x0800850d
 80083f8:	0800858f 	.word	0x0800858f
 80083fc:	0800858f 	.word	0x0800858f
 8008400:	0800858f 	.word	0x0800858f
 8008404:	0800854d 	.word	0x0800854d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68b9      	ldr	r1, [r7, #8]
 800840e:	4618      	mov	r0, r3
 8008410:	f000 fc4e 	bl	8008cb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	699a      	ldr	r2, [r3, #24]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f042 0208 	orr.w	r2, r2, #8
 8008422:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0204 	bic.w	r2, r2, #4
 8008432:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	6999      	ldr	r1, [r3, #24]
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	691a      	ldr	r2, [r3, #16]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	430a      	orrs	r2, r1
 8008444:	619a      	str	r2, [r3, #24]
      break;
 8008446:	e0a5      	b.n	8008594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68b9      	ldr	r1, [r7, #8]
 800844e:	4618      	mov	r0, r3
 8008450:	f000 fcc8 	bl	8008de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	699a      	ldr	r2, [r3, #24]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	6999      	ldr	r1, [r3, #24]
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	021a      	lsls	r2, r3, #8
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	619a      	str	r2, [r3, #24]
      break;
 8008488:	e084      	b.n	8008594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68b9      	ldr	r1, [r7, #8]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fd3b 	bl	8008f0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	69da      	ldr	r2, [r3, #28]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f042 0208 	orr.w	r2, r2, #8
 80084a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0204 	bic.w	r2, r2, #4
 80084b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69d9      	ldr	r1, [r3, #28]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	691a      	ldr	r2, [r3, #16]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	61da      	str	r2, [r3, #28]
      break;
 80084c8:	e064      	b.n	8008594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	68b9      	ldr	r1, [r7, #8]
 80084d0:	4618      	mov	r0, r3
 80084d2:	f000 fdad 	bl	8009030 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	69da      	ldr	r2, [r3, #28]
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69da      	ldr	r2, [r3, #28]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69d9      	ldr	r1, [r3, #28]
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	691b      	ldr	r3, [r3, #16]
 8008500:	021a      	lsls	r2, r3, #8
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	61da      	str	r2, [r3, #28]
      break;
 800850a:	e043      	b.n	8008594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68b9      	ldr	r1, [r7, #8]
 8008512:	4618      	mov	r0, r3
 8008514:	f000 fe20 	bl	8009158 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f042 0208 	orr.w	r2, r2, #8
 8008526:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f022 0204 	bic.w	r2, r2, #4
 8008536:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	691a      	ldr	r2, [r3, #16]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800854a:	e023      	b.n	8008594 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	68b9      	ldr	r1, [r7, #8]
 8008552:	4618      	mov	r0, r3
 8008554:	f000 fe6a 	bl	800922c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008566:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008576:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	021a      	lsls	r2, r3, #8
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800858c:	e002      	b.n	8008594 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	75fb      	strb	r3, [r7, #23]
      break;
 8008592:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800859c:	7dfb      	ldrb	r3, [r7, #23]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3718      	adds	r7, #24
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop

080085a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_TIM_ConfigClockSource+0x1c>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e0f6      	b.n	80087b2 <HAL_TIM_ConfigClockSource+0x20a>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80085e2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80085e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80085ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a6f      	ldr	r2, [pc, #444]	@ (80087bc <HAL_TIM_ConfigClockSource+0x214>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	f000 80c1 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 8008604:	4a6d      	ldr	r2, [pc, #436]	@ (80087bc <HAL_TIM_ConfigClockSource+0x214>)
 8008606:	4293      	cmp	r3, r2
 8008608:	f200 80c6 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 800860c:	4a6c      	ldr	r2, [pc, #432]	@ (80087c0 <HAL_TIM_ConfigClockSource+0x218>)
 800860e:	4293      	cmp	r3, r2
 8008610:	f000 80b9 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 8008614:	4a6a      	ldr	r2, [pc, #424]	@ (80087c0 <HAL_TIM_ConfigClockSource+0x218>)
 8008616:	4293      	cmp	r3, r2
 8008618:	f200 80be 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 800861c:	4a69      	ldr	r2, [pc, #420]	@ (80087c4 <HAL_TIM_ConfigClockSource+0x21c>)
 800861e:	4293      	cmp	r3, r2
 8008620:	f000 80b1 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 8008624:	4a67      	ldr	r2, [pc, #412]	@ (80087c4 <HAL_TIM_ConfigClockSource+0x21c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	f200 80b6 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 800862c:	4a66      	ldr	r2, [pc, #408]	@ (80087c8 <HAL_TIM_ConfigClockSource+0x220>)
 800862e:	4293      	cmp	r3, r2
 8008630:	f000 80a9 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 8008634:	4a64      	ldr	r2, [pc, #400]	@ (80087c8 <HAL_TIM_ConfigClockSource+0x220>)
 8008636:	4293      	cmp	r3, r2
 8008638:	f200 80ae 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 800863c:	4a63      	ldr	r2, [pc, #396]	@ (80087cc <HAL_TIM_ConfigClockSource+0x224>)
 800863e:	4293      	cmp	r3, r2
 8008640:	f000 80a1 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 8008644:	4a61      	ldr	r2, [pc, #388]	@ (80087cc <HAL_TIM_ConfigClockSource+0x224>)
 8008646:	4293      	cmp	r3, r2
 8008648:	f200 80a6 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 800864c:	4a60      	ldr	r2, [pc, #384]	@ (80087d0 <HAL_TIM_ConfigClockSource+0x228>)
 800864e:	4293      	cmp	r3, r2
 8008650:	f000 8099 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 8008654:	4a5e      	ldr	r2, [pc, #376]	@ (80087d0 <HAL_TIM_ConfigClockSource+0x228>)
 8008656:	4293      	cmp	r3, r2
 8008658:	f200 809e 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 800865c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008660:	f000 8091 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 8008664:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008668:	f200 8096 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 800866c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008670:	f000 8089 	beq.w	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 8008674:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008678:	f200 808e 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 800867c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008680:	d03e      	beq.n	8008700 <HAL_TIM_ConfigClockSource+0x158>
 8008682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008686:	f200 8087 	bhi.w	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 800868a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800868e:	f000 8086 	beq.w	800879e <HAL_TIM_ConfigClockSource+0x1f6>
 8008692:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008696:	d87f      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 8008698:	2b70      	cmp	r3, #112	@ 0x70
 800869a:	d01a      	beq.n	80086d2 <HAL_TIM_ConfigClockSource+0x12a>
 800869c:	2b70      	cmp	r3, #112	@ 0x70
 800869e:	d87b      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 80086a0:	2b60      	cmp	r3, #96	@ 0x60
 80086a2:	d050      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0x19e>
 80086a4:	2b60      	cmp	r3, #96	@ 0x60
 80086a6:	d877      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 80086a8:	2b50      	cmp	r3, #80	@ 0x50
 80086aa:	d03c      	beq.n	8008726 <HAL_TIM_ConfigClockSource+0x17e>
 80086ac:	2b50      	cmp	r3, #80	@ 0x50
 80086ae:	d873      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 80086b0:	2b40      	cmp	r3, #64	@ 0x40
 80086b2:	d058      	beq.n	8008766 <HAL_TIM_ConfigClockSource+0x1be>
 80086b4:	2b40      	cmp	r3, #64	@ 0x40
 80086b6:	d86f      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 80086b8:	2b30      	cmp	r3, #48	@ 0x30
 80086ba:	d064      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 80086bc:	2b30      	cmp	r3, #48	@ 0x30
 80086be:	d86b      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	d060      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 80086c4:	2b20      	cmp	r3, #32
 80086c6:	d867      	bhi.n	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d05c      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d05a      	beq.n	8008786 <HAL_TIM_ConfigClockSource+0x1de>
 80086d0:	e062      	b.n	8008798 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086e2:	f000 fe8b 	bl	80093fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	689b      	ldr	r3, [r3, #8]
 80086ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	609a      	str	r2, [r3, #8]
      break;
 80086fe:	e04f      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008710:	f000 fe74 	bl	80093fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689a      	ldr	r2, [r3, #8]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008722:	609a      	str	r2, [r3, #8]
      break;
 8008724:	e03c      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008732:	461a      	mov	r2, r3
 8008734:	f000 fde6 	bl	8009304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2150      	movs	r1, #80	@ 0x50
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fe3f 	bl	80093c2 <TIM_ITRx_SetConfig>
      break;
 8008744:	e02c      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008752:	461a      	mov	r2, r3
 8008754:	f000 fe05 	bl	8009362 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2160      	movs	r1, #96	@ 0x60
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fe2f 	bl	80093c2 <TIM_ITRx_SetConfig>
      break;
 8008764:	e01c      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008772:	461a      	mov	r2, r3
 8008774:	f000 fdc6 	bl	8009304 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2140      	movs	r1, #64	@ 0x40
 800877e:	4618      	mov	r0, r3
 8008780:	f000 fe1f 	bl	80093c2 <TIM_ITRx_SetConfig>
      break;
 8008784:	e00c      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4619      	mov	r1, r3
 8008790:	4610      	mov	r0, r2
 8008792:	f000 fe16 	bl	80093c2 <TIM_ITRx_SetConfig>
      break;
 8008796:	e003      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	73fb      	strb	r3, [r7, #15]
      break;
 800879c:	e000      	b.n	80087a0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800879e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	00100070 	.word	0x00100070
 80087c0:	00100060 	.word	0x00100060
 80087c4:	00100050 	.word	0x00100050
 80087c8:	00100040 	.word	0x00100040
 80087cc:	00100030 	.word	0x00100030
 80087d0:	00100020 	.word	0x00100020

080087d4 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008804:	bf00      	nop
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008810:	b480      	push	{r7}
 8008812:	b083      	sub	sp, #12
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8008818:	bf00      	nop
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008840:	bf00      	nop
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	460b      	mov	r3, r1
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e14a      	b.n	8008b3a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	f040 80dd 	bne.w	8008a6c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 80088b2:	7afb      	ldrb	r3, [r7, #11]
 80088b4:	2b1f      	cmp	r3, #31
 80088b6:	f200 80d6 	bhi.w	8008a66 <HAL_TIM_RegisterCallback+0x1de>
 80088ba:	a201      	add	r2, pc, #4	@ (adr r2, 80088c0 <HAL_TIM_RegisterCallback+0x38>)
 80088bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c0:	08008941 	.word	0x08008941
 80088c4:	08008949 	.word	0x08008949
 80088c8:	08008951 	.word	0x08008951
 80088cc:	08008959 	.word	0x08008959
 80088d0:	08008961 	.word	0x08008961
 80088d4:	08008969 	.word	0x08008969
 80088d8:	08008971 	.word	0x08008971
 80088dc:	08008979 	.word	0x08008979
 80088e0:	08008981 	.word	0x08008981
 80088e4:	08008989 	.word	0x08008989
 80088e8:	08008991 	.word	0x08008991
 80088ec:	08008999 	.word	0x08008999
 80088f0:	080089a1 	.word	0x080089a1
 80088f4:	080089a9 	.word	0x080089a9
 80088f8:	080089b3 	.word	0x080089b3
 80088fc:	080089bd 	.word	0x080089bd
 8008900:	080089c7 	.word	0x080089c7
 8008904:	080089d1 	.word	0x080089d1
 8008908:	080089db 	.word	0x080089db
 800890c:	080089e5 	.word	0x080089e5
 8008910:	080089ef 	.word	0x080089ef
 8008914:	080089f9 	.word	0x080089f9
 8008918:	08008a03 	.word	0x08008a03
 800891c:	08008a0d 	.word	0x08008a0d
 8008920:	08008a17 	.word	0x08008a17
 8008924:	08008a21 	.word	0x08008a21
 8008928:	08008a2b 	.word	0x08008a2b
 800892c:	08008a35 	.word	0x08008a35
 8008930:	08008a3f 	.word	0x08008a3f
 8008934:	08008a49 	.word	0x08008a49
 8008938:	08008a53 	.word	0x08008a53
 800893c:	08008a5d 	.word	0x08008a5d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008946:	e0f7      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800894e:	e0f3      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008956:	e0ef      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800895e:	e0eb      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008966:	e0e7      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800896e:	e0e3      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008976:	e0df      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800897e:	e0db      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008986:	e0d7      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800898e:	e0d3      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008996:	e0cf      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800899e:	e0cb      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80089a6:	e0c7      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80089b0:	e0c2      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 80089ba:	e0bd      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 80089c4:	e0b8      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 80089ce:	e0b3      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 80089d8:	e0ae      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80089e2:	e0a9      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80089ec:	e0a4      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80089f6:	e09f      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008a00:	e09a      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008a0a:	e095      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008a14:	e090      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008a1e:	e08b      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008a28:	e086      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008a32:	e081      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008a3c:	e07c      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008a46:	e077      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8008a50:	e072      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008a5a:	e06d      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008a64:	e068      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	75fb      	strb	r3, [r7, #23]
        break;
 8008a6a:	e065      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d15d      	bne.n	8008b34 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8008a78:	7afb      	ldrb	r3, [r7, #11]
 8008a7a:	2b0d      	cmp	r3, #13
 8008a7c:	d857      	bhi.n	8008b2e <HAL_TIM_RegisterCallback+0x2a6>
 8008a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a84 <HAL_TIM_RegisterCallback+0x1fc>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008abd 	.word	0x08008abd
 8008a88:	08008ac5 	.word	0x08008ac5
 8008a8c:	08008acd 	.word	0x08008acd
 8008a90:	08008ad5 	.word	0x08008ad5
 8008a94:	08008add 	.word	0x08008add
 8008a98:	08008ae5 	.word	0x08008ae5
 8008a9c:	08008aed 	.word	0x08008aed
 8008aa0:	08008af5 	.word	0x08008af5
 8008aa4:	08008afd 	.word	0x08008afd
 8008aa8:	08008b05 	.word	0x08008b05
 8008aac:	08008b0d 	.word	0x08008b0d
 8008ab0:	08008b15 	.word	0x08008b15
 8008ab4:	08008b1d 	.word	0x08008b1d
 8008ab8:	08008b25 	.word	0x08008b25
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8008ac2:	e039      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8008aca:	e035      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8008ad2:	e031      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8008ada:	e02d      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8008ae2:	e029      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8008aea:	e025      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	687a      	ldr	r2, [r7, #4]
 8008af0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8008af2:	e021      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8008afa:	e01d      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8008b02:	e019      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8008b0a:	e015      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8008b12:	e011      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8008b1a:	e00d      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8008b22:	e009      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8008b2c:	e004      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	75fb      	strb	r3, [r7, #23]
        break;
 8008b32:	e001      	b.n	8008b38 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	371c      	adds	r7, #28
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop

08008b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a4c      	ldr	r2, [pc, #304]	@ (8008c8c <TIM_Base_SetConfig+0x144>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d017      	beq.n	8008b90 <TIM_Base_SetConfig+0x48>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b66:	d013      	beq.n	8008b90 <TIM_Base_SetConfig+0x48>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a49      	ldr	r2, [pc, #292]	@ (8008c90 <TIM_Base_SetConfig+0x148>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d00f      	beq.n	8008b90 <TIM_Base_SetConfig+0x48>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a48      	ldr	r2, [pc, #288]	@ (8008c94 <TIM_Base_SetConfig+0x14c>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d00b      	beq.n	8008b90 <TIM_Base_SetConfig+0x48>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a47      	ldr	r2, [pc, #284]	@ (8008c98 <TIM_Base_SetConfig+0x150>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d007      	beq.n	8008b90 <TIM_Base_SetConfig+0x48>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a46      	ldr	r2, [pc, #280]	@ (8008c9c <TIM_Base_SetConfig+0x154>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d003      	beq.n	8008b90 <TIM_Base_SetConfig+0x48>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a45      	ldr	r2, [pc, #276]	@ (8008ca0 <TIM_Base_SetConfig+0x158>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d108      	bne.n	8008ba2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a39      	ldr	r2, [pc, #228]	@ (8008c8c <TIM_Base_SetConfig+0x144>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d023      	beq.n	8008bf2 <TIM_Base_SetConfig+0xaa>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bb0:	d01f      	beq.n	8008bf2 <TIM_Base_SetConfig+0xaa>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a36      	ldr	r2, [pc, #216]	@ (8008c90 <TIM_Base_SetConfig+0x148>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d01b      	beq.n	8008bf2 <TIM_Base_SetConfig+0xaa>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a35      	ldr	r2, [pc, #212]	@ (8008c94 <TIM_Base_SetConfig+0x14c>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d017      	beq.n	8008bf2 <TIM_Base_SetConfig+0xaa>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a34      	ldr	r2, [pc, #208]	@ (8008c98 <TIM_Base_SetConfig+0x150>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d013      	beq.n	8008bf2 <TIM_Base_SetConfig+0xaa>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a33      	ldr	r2, [pc, #204]	@ (8008c9c <TIM_Base_SetConfig+0x154>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d00f      	beq.n	8008bf2 <TIM_Base_SetConfig+0xaa>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a33      	ldr	r2, [pc, #204]	@ (8008ca4 <TIM_Base_SetConfig+0x15c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d00b      	beq.n	8008bf2 <TIM_Base_SetConfig+0xaa>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a32      	ldr	r2, [pc, #200]	@ (8008ca8 <TIM_Base_SetConfig+0x160>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d007      	beq.n	8008bf2 <TIM_Base_SetConfig+0xaa>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a31      	ldr	r2, [pc, #196]	@ (8008cac <TIM_Base_SetConfig+0x164>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d003      	beq.n	8008bf2 <TIM_Base_SetConfig+0xaa>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a2c      	ldr	r2, [pc, #176]	@ (8008ca0 <TIM_Base_SetConfig+0x158>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d108      	bne.n	8008c04 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	689a      	ldr	r2, [r3, #8]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a18      	ldr	r2, [pc, #96]	@ (8008c8c <TIM_Base_SetConfig+0x144>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d013      	beq.n	8008c58 <TIM_Base_SetConfig+0x110>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a1a      	ldr	r2, [pc, #104]	@ (8008c9c <TIM_Base_SetConfig+0x154>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00f      	beq.n	8008c58 <TIM_Base_SetConfig+0x110>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8008ca4 <TIM_Base_SetConfig+0x15c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d00b      	beq.n	8008c58 <TIM_Base_SetConfig+0x110>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a19      	ldr	r2, [pc, #100]	@ (8008ca8 <TIM_Base_SetConfig+0x160>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d007      	beq.n	8008c58 <TIM_Base_SetConfig+0x110>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a18      	ldr	r2, [pc, #96]	@ (8008cac <TIM_Base_SetConfig+0x164>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d003      	beq.n	8008c58 <TIM_Base_SetConfig+0x110>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a13      	ldr	r2, [pc, #76]	@ (8008ca0 <TIM_Base_SetConfig+0x158>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d103      	bne.n	8008c60 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	691a      	ldr	r2, [r3, #16]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d105      	bne.n	8008c7e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	f023 0201 	bic.w	r2, r3, #1
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	611a      	str	r2, [r3, #16]
  }
}
 8008c7e:	bf00      	nop
 8008c80:	3714      	adds	r7, #20
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	40012c00 	.word	0x40012c00
 8008c90:	40000400 	.word	0x40000400
 8008c94:	40000800 	.word	0x40000800
 8008c98:	40000c00 	.word	0x40000c00
 8008c9c:	40013400 	.word	0x40013400
 8008ca0:	40015000 	.word	0x40015000
 8008ca4:	40014000 	.word	0x40014000
 8008ca8:	40014400 	.word	0x40014400
 8008cac:	40014800 	.word	0x40014800

08008cb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a1b      	ldr	r3, [r3, #32]
 8008cc4:	f023 0201 	bic.w	r2, r3, #1
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0303 	bic.w	r3, r3, #3
 8008cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	f023 0302 	bic.w	r3, r3, #2
 8008cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a30      	ldr	r2, [pc, #192]	@ (8008dcc <TIM_OC1_SetConfig+0x11c>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d013      	beq.n	8008d38 <TIM_OC1_SetConfig+0x88>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a2f      	ldr	r2, [pc, #188]	@ (8008dd0 <TIM_OC1_SetConfig+0x120>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d00f      	beq.n	8008d38 <TIM_OC1_SetConfig+0x88>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a2e      	ldr	r2, [pc, #184]	@ (8008dd4 <TIM_OC1_SetConfig+0x124>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d00b      	beq.n	8008d38 <TIM_OC1_SetConfig+0x88>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a2d      	ldr	r2, [pc, #180]	@ (8008dd8 <TIM_OC1_SetConfig+0x128>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d007      	beq.n	8008d38 <TIM_OC1_SetConfig+0x88>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8008ddc <TIM_OC1_SetConfig+0x12c>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d003      	beq.n	8008d38 <TIM_OC1_SetConfig+0x88>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a2b      	ldr	r2, [pc, #172]	@ (8008de0 <TIM_OC1_SetConfig+0x130>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d10c      	bne.n	8008d52 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	f023 0308 	bic.w	r3, r3, #8
 8008d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	f023 0304 	bic.w	r3, r3, #4
 8008d50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a1d      	ldr	r2, [pc, #116]	@ (8008dcc <TIM_OC1_SetConfig+0x11c>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d013      	beq.n	8008d82 <TIM_OC1_SetConfig+0xd2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8008dd0 <TIM_OC1_SetConfig+0x120>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d00f      	beq.n	8008d82 <TIM_OC1_SetConfig+0xd2>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a1b      	ldr	r2, [pc, #108]	@ (8008dd4 <TIM_OC1_SetConfig+0x124>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d00b      	beq.n	8008d82 <TIM_OC1_SetConfig+0xd2>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8008dd8 <TIM_OC1_SetConfig+0x128>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d007      	beq.n	8008d82 <TIM_OC1_SetConfig+0xd2>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a19      	ldr	r2, [pc, #100]	@ (8008ddc <TIM_OC1_SetConfig+0x12c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d003      	beq.n	8008d82 <TIM_OC1_SetConfig+0xd2>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a18      	ldr	r2, [pc, #96]	@ (8008de0 <TIM_OC1_SetConfig+0x130>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d111      	bne.n	8008da6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	699b      	ldr	r3, [r3, #24]
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	693a      	ldr	r2, [r7, #16]
 8008daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	68fa      	ldr	r2, [r7, #12]
 8008db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	621a      	str	r2, [r3, #32]
}
 8008dc0:	bf00      	nop
 8008dc2:	371c      	adds	r7, #28
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr
 8008dcc:	40012c00 	.word	0x40012c00
 8008dd0:	40013400 	.word	0x40013400
 8008dd4:	40014000 	.word	0x40014000
 8008dd8:	40014400 	.word	0x40014400
 8008ddc:	40014800 	.word	0x40014800
 8008de0:	40015000 	.word	0x40015000

08008de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b087      	sub	sp, #28
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a1b      	ldr	r3, [r3, #32]
 8008df8:	f023 0210 	bic.w	r2, r3, #16
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	021b      	lsls	r3, r3, #8
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	f023 0320 	bic.w	r3, r3, #32
 8008e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	011b      	lsls	r3, r3, #4
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a2c      	ldr	r2, [pc, #176]	@ (8008ef4 <TIM_OC2_SetConfig+0x110>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d007      	beq.n	8008e58 <TIM_OC2_SetConfig+0x74>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8008ef8 <TIM_OC2_SetConfig+0x114>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d003      	beq.n	8008e58 <TIM_OC2_SetConfig+0x74>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a2a      	ldr	r2, [pc, #168]	@ (8008efc <TIM_OC2_SetConfig+0x118>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d10d      	bne.n	8008e74 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	011b      	lsls	r3, r3, #4
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a1f      	ldr	r2, [pc, #124]	@ (8008ef4 <TIM_OC2_SetConfig+0x110>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d013      	beq.n	8008ea4 <TIM_OC2_SetConfig+0xc0>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8008ef8 <TIM_OC2_SetConfig+0x114>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00f      	beq.n	8008ea4 <TIM_OC2_SetConfig+0xc0>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a1e      	ldr	r2, [pc, #120]	@ (8008f00 <TIM_OC2_SetConfig+0x11c>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00b      	beq.n	8008ea4 <TIM_OC2_SetConfig+0xc0>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8008f04 <TIM_OC2_SetConfig+0x120>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d007      	beq.n	8008ea4 <TIM_OC2_SetConfig+0xc0>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	4a1c      	ldr	r2, [pc, #112]	@ (8008f08 <TIM_OC2_SetConfig+0x124>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d003      	beq.n	8008ea4 <TIM_OC2_SetConfig+0xc0>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a17      	ldr	r2, [pc, #92]	@ (8008efc <TIM_OC2_SetConfig+0x118>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d113      	bne.n	8008ecc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008eaa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008eb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	695b      	ldr	r3, [r3, #20]
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685a      	ldr	r2, [r3, #4]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	621a      	str	r2, [r3, #32]
}
 8008ee6:	bf00      	nop
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	40012c00 	.word	0x40012c00
 8008ef8:	40013400 	.word	0x40013400
 8008efc:	40015000 	.word	0x40015000
 8008f00:	40014000 	.word	0x40014000
 8008f04:	40014400 	.word	0x40014400
 8008f08:	40014800 	.word	0x40014800

08008f0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b087      	sub	sp, #28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a1b      	ldr	r3, [r3, #32]
 8008f1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f023 0303 	bic.w	r3, r3, #3
 8008f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	021b      	lsls	r3, r3, #8
 8008f60:	697a      	ldr	r2, [r7, #20]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a2b      	ldr	r2, [pc, #172]	@ (8009018 <TIM_OC3_SetConfig+0x10c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d007      	beq.n	8008f7e <TIM_OC3_SetConfig+0x72>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a2a      	ldr	r2, [pc, #168]	@ (800901c <TIM_OC3_SetConfig+0x110>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d003      	beq.n	8008f7e <TIM_OC3_SetConfig+0x72>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a29      	ldr	r2, [pc, #164]	@ (8009020 <TIM_OC3_SetConfig+0x114>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d10d      	bne.n	8008f9a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	021b      	lsls	r3, r3, #8
 8008f8c:	697a      	ldr	r2, [r7, #20]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8009018 <TIM_OC3_SetConfig+0x10c>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d013      	beq.n	8008fca <TIM_OC3_SetConfig+0xbe>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800901c <TIM_OC3_SetConfig+0x110>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d00f      	beq.n	8008fca <TIM_OC3_SetConfig+0xbe>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a1d      	ldr	r2, [pc, #116]	@ (8009024 <TIM_OC3_SetConfig+0x118>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d00b      	beq.n	8008fca <TIM_OC3_SetConfig+0xbe>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a1c      	ldr	r2, [pc, #112]	@ (8009028 <TIM_OC3_SetConfig+0x11c>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d007      	beq.n	8008fca <TIM_OC3_SetConfig+0xbe>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800902c <TIM_OC3_SetConfig+0x120>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d003      	beq.n	8008fca <TIM_OC3_SetConfig+0xbe>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	4a16      	ldr	r2, [pc, #88]	@ (8009020 <TIM_OC3_SetConfig+0x114>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d113      	bne.n	8008ff2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	011b      	lsls	r3, r3, #4
 8008fec:	693a      	ldr	r2, [r7, #16]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	693a      	ldr	r2, [r7, #16]
 8008ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	621a      	str	r2, [r3, #32]
}
 800900c:	bf00      	nop
 800900e:	371c      	adds	r7, #28
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr
 8009018:	40012c00 	.word	0x40012c00
 800901c:	40013400 	.word	0x40013400
 8009020:	40015000 	.word	0x40015000
 8009024:	40014000 	.word	0x40014000
 8009028:	40014400 	.word	0x40014400
 800902c:	40014800 	.word	0x40014800

08009030 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a1b      	ldr	r3, [r3, #32]
 8009044:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800905e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800906a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	021b      	lsls	r3, r3, #8
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	4313      	orrs	r3, r2
 8009076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800907e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	031b      	lsls	r3, r3, #12
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	4313      	orrs	r3, r2
 800908a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a2c      	ldr	r2, [pc, #176]	@ (8009140 <TIM_OC4_SetConfig+0x110>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d007      	beq.n	80090a4 <TIM_OC4_SetConfig+0x74>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	4a2b      	ldr	r2, [pc, #172]	@ (8009144 <TIM_OC4_SetConfig+0x114>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d003      	beq.n	80090a4 <TIM_OC4_SetConfig+0x74>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a2a      	ldr	r2, [pc, #168]	@ (8009148 <TIM_OC4_SetConfig+0x118>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d10d      	bne.n	80090c0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	031b      	lsls	r3, r3, #12
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009140 <TIM_OC4_SetConfig+0x110>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d013      	beq.n	80090f0 <TIM_OC4_SetConfig+0xc0>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a1e      	ldr	r2, [pc, #120]	@ (8009144 <TIM_OC4_SetConfig+0x114>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d00f      	beq.n	80090f0 <TIM_OC4_SetConfig+0xc0>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a1e      	ldr	r2, [pc, #120]	@ (800914c <TIM_OC4_SetConfig+0x11c>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d00b      	beq.n	80090f0 <TIM_OC4_SetConfig+0xc0>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a1d      	ldr	r2, [pc, #116]	@ (8009150 <TIM_OC4_SetConfig+0x120>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d007      	beq.n	80090f0 <TIM_OC4_SetConfig+0xc0>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4a1c      	ldr	r2, [pc, #112]	@ (8009154 <TIM_OC4_SetConfig+0x124>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d003      	beq.n	80090f0 <TIM_OC4_SetConfig+0xc0>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4a17      	ldr	r2, [pc, #92]	@ (8009148 <TIM_OC4_SetConfig+0x118>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d113      	bne.n	8009118 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80090fe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	695b      	ldr	r3, [r3, #20]
 8009104:	019b      	lsls	r3, r3, #6
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	4313      	orrs	r3, r2
 800910a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	019b      	lsls	r3, r3, #6
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	4313      	orrs	r3, r2
 8009116:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	621a      	str	r2, [r3, #32]
}
 8009132:	bf00      	nop
 8009134:	371c      	adds	r7, #28
 8009136:	46bd      	mov	sp, r7
 8009138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	40012c00 	.word	0x40012c00
 8009144:	40013400 	.word	0x40013400
 8009148:	40015000 	.word	0x40015000
 800914c:	40014000 	.word	0x40014000
 8009150:	40014400 	.word	0x40014400
 8009154:	40014800 	.word	0x40014800

08009158 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009158:	b480      	push	{r7}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a1b      	ldr	r3, [r3, #32]
 800916c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800917e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800918a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	4313      	orrs	r3, r2
 8009194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800919c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	041b      	lsls	r3, r3, #16
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	4a19      	ldr	r2, [pc, #100]	@ (8009214 <TIM_OC5_SetConfig+0xbc>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d013      	beq.n	80091da <TIM_OC5_SetConfig+0x82>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a18      	ldr	r2, [pc, #96]	@ (8009218 <TIM_OC5_SetConfig+0xc0>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d00f      	beq.n	80091da <TIM_OC5_SetConfig+0x82>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a17      	ldr	r2, [pc, #92]	@ (800921c <TIM_OC5_SetConfig+0xc4>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d00b      	beq.n	80091da <TIM_OC5_SetConfig+0x82>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a16      	ldr	r2, [pc, #88]	@ (8009220 <TIM_OC5_SetConfig+0xc8>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d007      	beq.n	80091da <TIM_OC5_SetConfig+0x82>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a15      	ldr	r2, [pc, #84]	@ (8009224 <TIM_OC5_SetConfig+0xcc>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d003      	beq.n	80091da <TIM_OC5_SetConfig+0x82>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a14      	ldr	r2, [pc, #80]	@ (8009228 <TIM_OC5_SetConfig+0xd0>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d109      	bne.n	80091ee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	695b      	ldr	r3, [r3, #20]
 80091e6:	021b      	lsls	r3, r3, #8
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	697a      	ldr	r2, [r7, #20]
 80091f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	685a      	ldr	r2, [r3, #4]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	693a      	ldr	r2, [r7, #16]
 8009206:	621a      	str	r2, [r3, #32]
}
 8009208:	bf00      	nop
 800920a:	371c      	adds	r7, #28
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	40012c00 	.word	0x40012c00
 8009218:	40013400 	.word	0x40013400
 800921c:	40014000 	.word	0x40014000
 8009220:	40014400 	.word	0x40014400
 8009224:	40014800 	.word	0x40014800
 8009228:	40015000 	.word	0x40015000

0800922c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800922c:	b480      	push	{r7}
 800922e:	b087      	sub	sp, #28
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a1b      	ldr	r3, [r3, #32]
 8009240:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800925a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800925e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	021b      	lsls	r3, r3, #8
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009272:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	689b      	ldr	r3, [r3, #8]
 8009278:	051b      	lsls	r3, r3, #20
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	4313      	orrs	r3, r2
 800927e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a1a      	ldr	r2, [pc, #104]	@ (80092ec <TIM_OC6_SetConfig+0xc0>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d013      	beq.n	80092b0 <TIM_OC6_SetConfig+0x84>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a19      	ldr	r2, [pc, #100]	@ (80092f0 <TIM_OC6_SetConfig+0xc4>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d00f      	beq.n	80092b0 <TIM_OC6_SetConfig+0x84>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a18      	ldr	r2, [pc, #96]	@ (80092f4 <TIM_OC6_SetConfig+0xc8>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d00b      	beq.n	80092b0 <TIM_OC6_SetConfig+0x84>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a17      	ldr	r2, [pc, #92]	@ (80092f8 <TIM_OC6_SetConfig+0xcc>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d007      	beq.n	80092b0 <TIM_OC6_SetConfig+0x84>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a16      	ldr	r2, [pc, #88]	@ (80092fc <TIM_OC6_SetConfig+0xd0>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d003      	beq.n	80092b0 <TIM_OC6_SetConfig+0x84>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a15      	ldr	r2, [pc, #84]	@ (8009300 <TIM_OC6_SetConfig+0xd4>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d109      	bne.n	80092c4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80092b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	029b      	lsls	r3, r3, #10
 80092be:	697a      	ldr	r2, [r7, #20]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	697a      	ldr	r2, [r7, #20]
 80092c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	621a      	str	r2, [r3, #32]
}
 80092de:	bf00      	nop
 80092e0:	371c      	adds	r7, #28
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr
 80092ea:	bf00      	nop
 80092ec:	40012c00 	.word	0x40012c00
 80092f0:	40013400 	.word	0x40013400
 80092f4:	40014000 	.word	0x40014000
 80092f8:	40014400 	.word	0x40014400
 80092fc:	40014800 	.word	0x40014800
 8009300:	40015000 	.word	0x40015000

08009304 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009304:	b480      	push	{r7}
 8009306:	b087      	sub	sp, #28
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	f023 0201 	bic.w	r2, r3, #1
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800932e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	011b      	lsls	r3, r3, #4
 8009334:	693a      	ldr	r2, [r7, #16]
 8009336:	4313      	orrs	r3, r2
 8009338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f023 030a 	bic.w	r3, r3, #10
 8009340:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009342:	697a      	ldr	r2, [r7, #20]
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	4313      	orrs	r3, r2
 8009348:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	693a      	ldr	r2, [r7, #16]
 800934e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	621a      	str	r2, [r3, #32]
}
 8009356:	bf00      	nop
 8009358:	371c      	adds	r7, #28
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009362:	b480      	push	{r7}
 8009364:	b087      	sub	sp, #28
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	6a1b      	ldr	r3, [r3, #32]
 8009378:	f023 0210 	bic.w	r2, r3, #16
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800938c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	031b      	lsls	r3, r3, #12
 8009392:	693a      	ldr	r2, [r7, #16]
 8009394:	4313      	orrs	r3, r2
 8009396:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009398:	697b      	ldr	r3, [r7, #20]
 800939a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800939e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	011b      	lsls	r3, r3, #4
 80093a4:	697a      	ldr	r2, [r7, #20]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	697a      	ldr	r2, [r7, #20]
 80093b4:	621a      	str	r2, [r3, #32]
}
 80093b6:	bf00      	nop
 80093b8:	371c      	adds	r7, #28
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b085      	sub	sp, #20
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
 80093ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80093d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093de:	683a      	ldr	r2, [r7, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	f043 0307 	orr.w	r3, r3, #7
 80093e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	68fa      	ldr	r2, [r7, #12]
 80093ee:	609a      	str	r2, [r3, #8]
}
 80093f0:	bf00      	nop
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b087      	sub	sp, #28
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009416:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	021a      	lsls	r2, r3, #8
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	431a      	orrs	r2, r3
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4313      	orrs	r3, r2
 8009424:	697a      	ldr	r2, [r7, #20]
 8009426:	4313      	orrs	r3, r2
 8009428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	609a      	str	r2, [r3, #8]
}
 8009430:	bf00      	nop
 8009432:	371c      	adds	r7, #28
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	60f8      	str	r0, [r7, #12]
 8009444:	60b9      	str	r1, [r7, #8]
 8009446:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	f003 031f 	and.w	r3, r3, #31
 800944e:	2201      	movs	r2, #1
 8009450:	fa02 f303 	lsl.w	r3, r2, r3
 8009454:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6a1a      	ldr	r2, [r3, #32]
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	43db      	mvns	r3, r3
 800945e:	401a      	ands	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6a1a      	ldr	r2, [r3, #32]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	f003 031f 	and.w	r3, r3, #31
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	fa01 f303 	lsl.w	r3, r1, r3
 8009474:	431a      	orrs	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	621a      	str	r2, [r3, #32]
}
 800947a:	bf00      	nop
 800947c:	371c      	adds	r7, #28
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
	...

08009488 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a26      	ldr	r2, [pc, #152]	@ (800952c <TIM_ResetCallback+0xa4>)
 8009494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a25      	ldr	r2, [pc, #148]	@ (8009530 <TIM_ResetCallback+0xa8>)
 800949c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a24      	ldr	r2, [pc, #144]	@ (8009534 <TIM_ResetCallback+0xac>)
 80094a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a23      	ldr	r2, [pc, #140]	@ (8009538 <TIM_ResetCallback+0xb0>)
 80094ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a22      	ldr	r2, [pc, #136]	@ (800953c <TIM_ResetCallback+0xb4>)
 80094b4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a21      	ldr	r2, [pc, #132]	@ (8009540 <TIM_ResetCallback+0xb8>)
 80094bc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a20      	ldr	r2, [pc, #128]	@ (8009544 <TIM_ResetCallback+0xbc>)
 80094c4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a1f      	ldr	r2, [pc, #124]	@ (8009548 <TIM_ResetCallback+0xc0>)
 80094cc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a1e      	ldr	r2, [pc, #120]	@ (800954c <TIM_ResetCallback+0xc4>)
 80094d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a1d      	ldr	r2, [pc, #116]	@ (8009550 <TIM_ResetCallback+0xc8>)
 80094dc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a1c      	ldr	r2, [pc, #112]	@ (8009554 <TIM_ResetCallback+0xcc>)
 80094e4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009558 <TIM_ResetCallback+0xd0>)
 80094ec:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a1a      	ldr	r2, [pc, #104]	@ (800955c <TIM_ResetCallback+0xd4>)
 80094f4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a19      	ldr	r2, [pc, #100]	@ (8009560 <TIM_ResetCallback+0xd8>)
 80094fc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4a18      	ldr	r2, [pc, #96]	@ (8009564 <TIM_ResetCallback+0xdc>)
 8009504:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4a17      	ldr	r2, [pc, #92]	@ (8009568 <TIM_ResetCallback+0xe0>)
 800950c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	4a16      	ldr	r2, [pc, #88]	@ (800956c <TIM_ResetCallback+0xe4>)
 8009514:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a15      	ldr	r2, [pc, #84]	@ (8009570 <TIM_ResetCallback+0xe8>)
 800951c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	08002d25 	.word	0x08002d25
 8009530:	080087d5 	.word	0x080087d5
 8009534:	0800884d 	.word	0x0800884d
 8009538:	08008861 	.word	0x08008861
 800953c:	080087fd 	.word	0x080087fd
 8009540:	08008811 	.word	0x08008811
 8009544:	080087e9 	.word	0x080087e9
 8009548:	08008825 	.word	0x08008825
 800954c:	08008839 	.word	0x08008839
 8009550:	08008875 	.word	0x08008875
 8009554:	080097c9 	.word	0x080097c9
 8009558:	080097dd 	.word	0x080097dd
 800955c:	080097f1 	.word	0x080097f1
 8009560:	08009805 	.word	0x08009805
 8009564:	08009819 	.word	0x08009819
 8009568:	0800982d 	.word	0x0800982d
 800956c:	08009841 	.word	0x08009841
 8009570:	08009855 	.word	0x08009855

08009574 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009574:	b480      	push	{r7}
 8009576:	b085      	sub	sp, #20
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009584:	2b01      	cmp	r3, #1
 8009586:	d101      	bne.n	800958c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009588:	2302      	movs	r3, #2
 800958a:	e074      	b.n	8009676 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2202      	movs	r2, #2
 8009598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a34      	ldr	r2, [pc, #208]	@ (8009684 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d009      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a33      	ldr	r2, [pc, #204]	@ (8009688 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d004      	beq.n	80095ca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a31      	ldr	r2, [pc, #196]	@ (800968c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d108      	bne.n	80095dc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80095d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	68fa      	ldr	r2, [r7, #12]
 80095d8:	4313      	orrs	r3, r2
 80095da:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80095e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a21      	ldr	r2, [pc, #132]	@ (8009684 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d022      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800960c:	d01d      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a1f      	ldr	r2, [pc, #124]	@ (8009690 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d018      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a1d      	ldr	r2, [pc, #116]	@ (8009694 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d013      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a1c      	ldr	r2, [pc, #112]	@ (8009698 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d00e      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a15      	ldr	r2, [pc, #84]	@ (8009688 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d009      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a18      	ldr	r2, [pc, #96]	@ (800969c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d004      	beq.n	800964a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4a11      	ldr	r2, [pc, #68]	@ (800968c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d10c      	bne.n	8009664 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	4313      	orrs	r3, r2
 800965a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2200      	movs	r2, #0
 8009670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	40012c00 	.word	0x40012c00
 8009688:	40013400 	.word	0x40013400
 800968c:	40015000 	.word	0x40015000
 8009690:	40000400 	.word	0x40000400
 8009694:	40000800 	.word	0x40000800
 8009698:	40000c00 	.word	0x40000c00
 800969c:	40014000 	.word	0x40014000

080096a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80096aa:	2300      	movs	r3, #0
 80096ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d101      	bne.n	80096bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80096b8:	2302      	movs	r3, #2
 80096ba:	e078      	b.n	80097ae <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	4313      	orrs	r3, r2
 80096de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4313      	orrs	r3, r2
 80096fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	4313      	orrs	r3, r2
 8009708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	4313      	orrs	r3, r2
 8009716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009722:	4313      	orrs	r3, r2
 8009724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	041b      	lsls	r3, r3, #16
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	69db      	ldr	r3, [r3, #28]
 8009740:	4313      	orrs	r3, r2
 8009742:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4a1c      	ldr	r2, [pc, #112]	@ (80097bc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d009      	beq.n	8009762 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4a1b      	ldr	r2, [pc, #108]	@ (80097c0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d004      	beq.n	8009762 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a19      	ldr	r2, [pc, #100]	@ (80097c4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d11c      	bne.n	800979c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800976c:	051b      	lsls	r3, r3, #20
 800976e:	4313      	orrs	r3, r2
 8009770:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	4313      	orrs	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978a:	4313      	orrs	r3, r2
 800978c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009798:	4313      	orrs	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3714      	adds	r7, #20
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	40012c00 	.word	0x40012c00
 80097c0:	40013400 	.word	0x40013400
 80097c4:	40015000 	.word	0x40015000

080097c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097d0:	bf00      	nop
 80097d2:	370c      	adds	r7, #12
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e050      	b.n	800991c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009880:	2b00      	cmp	r3, #0
 8009882:	d114      	bne.n	80098ae <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 fd5b 	bl	800a348 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a21      	ldr	r2, [pc, #132]	@ (8009924 <HAL_UART_Init+0xbc>)
 80098a0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2224      	movs	r2, #36	@ 0x24
 80098b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f022 0201 	bic.w	r2, r2, #1
 80098c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d002      	beq.n	80098d4 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f001 f888 	bl	800a9e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 fd89 	bl	800a3ec <UART_SetConfig>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d101      	bne.n	80098e4 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e01b      	b.n	800991c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	685a      	ldr	r2, [r3, #4]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80098f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	689a      	ldr	r2, [r3, #8]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009902:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f042 0201 	orr.w	r2, r2, #1
 8009912:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f001 f907 	bl	800ab28 <UART_CheckIdleState>
 800991a:	4603      	mov	r3, r0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3708      	adds	r7, #8
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}
 8009924:	08003e2d 	.word	0x08003e2d

08009928 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8009928:	b480      	push	{r7}
 800992a:	b087      	sub	sp, #28
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	460b      	mov	r3, r1
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d109      	bne.n	8009954 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009946:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e09c      	b.n	8009a8e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800995a:	2b20      	cmp	r3, #32
 800995c:	d16c      	bne.n	8009a38 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800995e:	7afb      	ldrb	r3, [r7, #11]
 8009960:	2b0c      	cmp	r3, #12
 8009962:	d85e      	bhi.n	8009a22 <HAL_UART_RegisterCallback+0xfa>
 8009964:	a201      	add	r2, pc, #4	@ (adr r2, 800996c <HAL_UART_RegisterCallback+0x44>)
 8009966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800996a:	bf00      	nop
 800996c:	080099a1 	.word	0x080099a1
 8009970:	080099ab 	.word	0x080099ab
 8009974:	080099b5 	.word	0x080099b5
 8009978:	080099bf 	.word	0x080099bf
 800997c:	080099c9 	.word	0x080099c9
 8009980:	080099d3 	.word	0x080099d3
 8009984:	080099dd 	.word	0x080099dd
 8009988:	080099e7 	.word	0x080099e7
 800998c:	080099f1 	.word	0x080099f1
 8009990:	080099fb 	.word	0x080099fb
 8009994:	08009a05 	.word	0x08009a05
 8009998:	08009a0f 	.word	0x08009a0f
 800999c:	08009a19 	.word	0x08009a19
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80099a8:	e070      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80099b2:	e06b      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80099bc:	e066      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80099c6:	e061      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80099d0:	e05c      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80099da:	e057      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	687a      	ldr	r2, [r7, #4]
 80099e0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80099e4:	e052      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80099ee:	e04d      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80099f8:	e048      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8009a02:	e043      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8009a0c:	e03e      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009a16:	e039      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009a20:	e034      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a28:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	75fb      	strb	r3, [r7, #23]
        break;
 8009a36:	e029      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d11a      	bne.n	8009a78 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8009a42:	7afb      	ldrb	r3, [r7, #11]
 8009a44:	2b0b      	cmp	r3, #11
 8009a46:	d002      	beq.n	8009a4e <HAL_UART_RegisterCallback+0x126>
 8009a48:	2b0c      	cmp	r3, #12
 8009a4a:	d005      	beq.n	8009a58 <HAL_UART_RegisterCallback+0x130>
 8009a4c:	e009      	b.n	8009a62 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8009a56:	e019      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8009a60:	e014      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a68:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	75fb      	strb	r3, [r7, #23]
        break;
 8009a76:	e009      	b.n	8009a8c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	371c      	adds	r7, #28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop

08009a9c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b08a      	sub	sp, #40	@ 0x28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ab0:	2b20      	cmp	r3, #32
 8009ab2:	d137      	bne.n	8009b24 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <HAL_UART_Receive_DMA+0x24>
 8009aba:	88fb      	ldrh	r3, [r7, #6]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e030      	b.n	8009b26 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	4a18      	ldr	r2, [pc, #96]	@ (8009b30 <HAL_UART_Receive_DMA+0x94>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d01f      	beq.n	8009b14 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d018      	beq.n	8009b14 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	e853 3f00 	ldrex	r3, [r3]
 8009aee:	613b      	str	r3, [r7, #16]
   return(result);
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	461a      	mov	r2, r3
 8009afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b00:	623b      	str	r3, [r7, #32]
 8009b02:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b04:	69f9      	ldr	r1, [r7, #28]
 8009b06:	6a3a      	ldr	r2, [r7, #32]
 8009b08:	e841 2300 	strex	r3, r2, [r1]
 8009b0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d1e6      	bne.n	8009ae2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009b14:	88fb      	ldrh	r3, [r7, #6]
 8009b16:	461a      	mov	r2, r3
 8009b18:	68b9      	ldr	r1, [r7, #8]
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f001 f91c 	bl	800ad58 <UART_Start_Receive_DMA>
 8009b20:	4603      	mov	r3, r0
 8009b22:	e000      	b.n	8009b26 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b24:	2302      	movs	r3, #2
  }
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3728      	adds	r7, #40	@ 0x28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	40008000 	.word	0x40008000

08009b34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b0ba      	sub	sp, #232	@ 0xe8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	69db      	ldr	r3, [r3, #28]
 8009b42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b5a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009b5e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009b62:	4013      	ands	r3, r2
 8009b64:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d11b      	bne.n	8009ba8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009b74:	f003 0320 	and.w	r3, r3, #32
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d015      	beq.n	8009ba8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d105      	bne.n	8009b94 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d009      	beq.n	8009ba8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f000 8312 	beq.w	800a1c2 <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	4798      	blx	r3
      }
      return;
 8009ba6:	e30c      	b.n	800a1c2 <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ba8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 8129 	beq.w	8009e04 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009bb2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009bb6:	4b90      	ldr	r3, [pc, #576]	@ (8009df8 <HAL_UART_IRQHandler+0x2c4>)
 8009bb8:	4013      	ands	r3, r2
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d106      	bne.n	8009bcc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009bbe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009bc2:	4b8e      	ldr	r3, [pc, #568]	@ (8009dfc <HAL_UART_IRQHandler+0x2c8>)
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	f000 811c 	beq.w	8009e04 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009bcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d011      	beq.n	8009bfc <HAL_UART_IRQHandler+0xc8>
 8009bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00b      	beq.n	8009bfc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2201      	movs	r2, #1
 8009bea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bf2:	f043 0201 	orr.w	r2, r3, #1
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c00:	f003 0302 	and.w	r3, r3, #2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d011      	beq.n	8009c2c <HAL_UART_IRQHandler+0xf8>
 8009c08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c0c:	f003 0301 	and.w	r3, r3, #1
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2202      	movs	r2, #2
 8009c1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c22:	f043 0204 	orr.w	r2, r3, #4
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c30:	f003 0304 	and.w	r3, r3, #4
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d011      	beq.n	8009c5c <HAL_UART_IRQHandler+0x128>
 8009c38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009c3c:	f003 0301 	and.w	r3, r3, #1
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00b      	beq.n	8009c5c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2204      	movs	r2, #4
 8009c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c52:	f043 0202 	orr.w	r2, r3, #2
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c60:	f003 0308 	and.w	r3, r3, #8
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d017      	beq.n	8009c98 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d105      	bne.n	8009c80 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009c74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009c78:	4b5f      	ldr	r3, [pc, #380]	@ (8009df8 <HAL_UART_IRQHandler+0x2c4>)
 8009c7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00b      	beq.n	8009c98 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2208      	movs	r2, #8
 8009c86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009c8e:	f043 0208 	orr.w	r2, r3, #8
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d012      	beq.n	8009cca <HAL_UART_IRQHandler+0x196>
 8009ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ca8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00c      	beq.n	8009cca <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009cb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cc0:	f043 0220 	orr.w	r2, r3, #32
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f000 8278 	beq.w	800a1c6 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cda:	f003 0320 	and.w	r3, r3, #32
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d013      	beq.n	8009d0a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ce6:	f003 0320 	and.w	r3, r3, #32
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d105      	bne.n	8009cfa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d007      	beq.n	8009d0a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d1e:	2b40      	cmp	r3, #64	@ 0x40
 8009d20:	d005      	beq.n	8009d2e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009d26:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d058      	beq.n	8009de0 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f001 f8f9 	bl	800af26 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d3e:	2b40      	cmp	r3, #64	@ 0x40
 8009d40:	d148      	bne.n	8009dd4 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3308      	adds	r3, #8
 8009d48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d50:	e853 3f00 	ldrex	r3, [r3]
 8009d54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009d58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3308      	adds	r3, #8
 8009d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009d6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009d72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009d7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009d7e:	e841 2300 	strex	r3, r2, [r1]
 8009d82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009d86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1d9      	bne.n	8009d42 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d017      	beq.n	8009dc8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d9e:	4a18      	ldr	r2, [pc, #96]	@ (8009e00 <HAL_UART_IRQHandler+0x2cc>)
 8009da0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fc f8bb 	bl	8005f24 <HAL_DMA_Abort_IT>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d01f      	beq.n	8009df4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dc6:	e015      	b.n	8009df4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dd2:	e00f      	b.n	8009df4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009dde:	e009      	b.n	8009df4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009df2:	e1e8      	b.n	800a1c6 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df4:	bf00      	nop
    return;
 8009df6:	e1e6      	b.n	800a1c6 <HAL_UART_IRQHandler+0x692>
 8009df8:	10000001 	.word	0x10000001
 8009dfc:	04000120 	.word	0x04000120
 8009e00:	0800b1f1 	.word	0x0800b1f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	f040 8176 	bne.w	800a0fa <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e12:	f003 0310 	and.w	r3, r3, #16
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f000 816f 	beq.w	800a0fa <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e20:	f003 0310 	and.w	r3, r3, #16
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	f000 8168 	beq.w	800a0fa <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	2210      	movs	r2, #16
 8009e30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e3c:	2b40      	cmp	r3, #64	@ 0x40
 8009e3e:	f040 80dc 	bne.w	8009ffa <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 80b1 	beq.w	8009fbc <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e64:	429a      	cmp	r2, r3
 8009e66:	f080 80a9 	bcs.w	8009fbc <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009e70:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 0320 	and.w	r3, r3, #32
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f040 8087 	bne.w	8009f96 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e90:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009e9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009ea0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ea4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	461a      	mov	r2, r3
 8009eae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009eb2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009eb6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eba:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009ec2:	e841 2300 	strex	r3, r2, [r1]
 8009ec6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1da      	bne.n	8009e88 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009edc:	e853 3f00 	ldrex	r3, [r3]
 8009ee0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009ee2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ee4:	f023 0301 	bic.w	r3, r3, #1
 8009ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	3308      	adds	r3, #8
 8009ef2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009ef6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009efa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009efc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009efe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009f02:	e841 2300 	strex	r3, r2, [r1]
 8009f06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009f08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d1e1      	bne.n	8009ed2 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3308      	adds	r3, #8
 8009f14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009f1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	3308      	adds	r3, #8
 8009f2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009f32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009f34:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f36:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009f38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009f3a:	e841 2300 	strex	r3, r2, [r1]
 8009f3e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e3      	bne.n	8009f0e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2220      	movs	r2, #32
 8009f4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f5c:	e853 3f00 	ldrex	r3, [r3]
 8009f60:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f64:	f023 0310 	bic.w	r3, r3, #16
 8009f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	461a      	mov	r2, r3
 8009f72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009f76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009f78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009f7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009f7e:	e841 2300 	strex	r3, r2, [r1]
 8009f82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1e4      	bne.n	8009f54 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f90:	4618      	mov	r0, r3
 8009f92:	f7fb ff6e 	bl	8005e72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2202      	movs	r2, #2
 8009f9a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009fa2:	687a      	ldr	r2, [r7, #4]
 8009fa4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8009fae:	b292      	uxth	r2, r2
 8009fb0:	1a8a      	subs	r2, r1, r2
 8009fb2:	b292      	uxth	r2, r2
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009fba:	e106      	b.n	800a1ca <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009fc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	f040 80ff 	bne.w	800a1ca <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0320 	and.w	r3, r3, #32
 8009fda:	2b20      	cmp	r3, #32
 8009fdc:	f040 80f5 	bne.w	800a1ca <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009ff2:	4611      	mov	r1, r2
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	4798      	blx	r3
      return;
 8009ff8:	e0e7      	b.n	800a1ca <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a006:	b29b      	uxth	r3, r3
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a014:	b29b      	uxth	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 80d9 	beq.w	800a1ce <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800a01c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 80d4 	beq.w	800a1ce <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a02e:	e853 3f00 	ldrex	r3, [r3]
 800a032:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a03a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	461a      	mov	r2, r3
 800a044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a048:	647b      	str	r3, [r7, #68]	@ 0x44
 800a04a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a04e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e4      	bne.n	800a026 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	3308      	adds	r3, #8
 800a062:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a066:	e853 3f00 	ldrex	r3, [r3]
 800a06a:	623b      	str	r3, [r7, #32]
   return(result);
 800a06c:	6a3b      	ldr	r3, [r7, #32]
 800a06e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a072:	f023 0301 	bic.w	r3, r3, #1
 800a076:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	3308      	adds	r3, #8
 800a080:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a084:	633a      	str	r2, [r7, #48]	@ 0x30
 800a086:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a088:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a08a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a08c:	e841 2300 	strex	r3, r2, [r1]
 800a090:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a094:	2b00      	cmp	r3, #0
 800a096:	d1e1      	bne.n	800a05c <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2220      	movs	r2, #32
 800a09c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	e853 3f00 	ldrex	r3, [r3]
 800a0b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f023 0310 	bic.w	r3, r3, #16
 800a0c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a0ce:	61fb      	str	r3, [r7, #28]
 800a0d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d2:	69b9      	ldr	r1, [r7, #24]
 800a0d4:	69fa      	ldr	r2, [r7, #28]
 800a0d6:	e841 2300 	strex	r3, r2, [r1]
 800a0da:	617b      	str	r3, [r7, #20]
   return(result);
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d1e4      	bne.n	800a0ac <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a0ee:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800a0f2:	4611      	mov	r1, r2
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a0f8:	e069      	b.n	800a1ce <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a0fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a0fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d010      	beq.n	800a128 <HAL_UART_IRQHandler+0x5f4>
 800a106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a10a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00a      	beq.n	800a128 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a11a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a126:	e055      	b.n	800a1d4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a12c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a130:	2b00      	cmp	r3, #0
 800a132:	d014      	beq.n	800a15e <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a138:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d105      	bne.n	800a14c <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a144:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d008      	beq.n	800a15e <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a150:	2b00      	cmp	r3, #0
 800a152:	d03e      	beq.n	800a1d2 <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	4798      	blx	r3
    }
    return;
 800a15c:	e039      	b.n	800a1d2 <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a166:	2b00      	cmp	r3, #0
 800a168:	d009      	beq.n	800a17e <HAL_UART_IRQHandler+0x64a>
 800a16a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a16e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f001 f84e 	bl	800b218 <UART_EndTransmit_IT>
    return;
 800a17c:	e02a      	b.n	800a1d4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a17e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a182:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00b      	beq.n	800a1a2 <HAL_UART_IRQHandler+0x66e>
 800a18a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a18e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d005      	beq.n	800a1a2 <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1a0:	e018      	b.n	800a1d4 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a1a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d012      	beq.n	800a1d4 <HAL_UART_IRQHandler+0x6a0>
 800a1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	da0e      	bge.n	800a1d4 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a1c0:	e008      	b.n	800a1d4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a1c2:	bf00      	nop
 800a1c4:	e006      	b.n	800a1d4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a1c6:	bf00      	nop
 800a1c8:	e004      	b.n	800a1d4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a1ca:	bf00      	nop
 800a1cc:	e002      	b.n	800a1d4 <HAL_UART_IRQHandler+0x6a0>
      return;
 800a1ce:	bf00      	nop
 800a1d0:	e000      	b.n	800a1d4 <HAL_UART_IRQHandler+0x6a0>
    return;
 800a1d2:	bf00      	nop
  }
}
 800a1d4:	37e8      	adds	r7, #232	@ 0xe8
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop

0800a1dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800a1f8:	bf00      	nop
 800a1fa:	370c      	adds	r7, #12
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a202:	4770      	bx	lr

0800a204 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr

0800a22c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800a234:	bf00      	nop
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800a248:	bf00      	nop
 800a24a:	370c      	adds	r7, #12
 800a24c:	46bd      	mov	sp, r7
 800a24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a252:	4770      	bx	lr

0800a254 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800a25c:	bf00      	nop
 800a25e:	370c      	adds	r7, #12
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	460b      	mov	r3, r1
 800a272:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a274:	bf00      	nop
 800a276:	370c      	adds	r7, #12
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr

0800a280 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800a280:	b480      	push	{r7}
 800a282:	b083      	sub	sp, #12
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a09      	ldr	r2, [pc, #36]	@ (800a2b4 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d009      	beq.n	800a2a8 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	695b      	ldr	r3, [r3, #20]
 800a29a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	615a      	str	r2, [r3, #20]
  }
}
 800a2a8:	bf00      	nop
 800a2aa:	370c      	adds	r7, #12
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b2:	4770      	bx	lr
 800a2b4:	40008000 	.word	0x40008000

0800a2b8 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a18      	ldr	r2, [pc, #96]	@ (800a328 <HAL_UART_EnableReceiverTimeout+0x70>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d027      	beq.n	800a31a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	d120      	bne.n	800a316 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <HAL_UART_EnableReceiverTimeout+0x2a>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e01c      	b.n	800a31c <HAL_UART_EnableReceiverTimeout+0x64>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2224      	movs	r2, #36	@ 0x24
 800a2ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	685a      	ldr	r2, [r3, #4]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800a300:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2220      	movs	r2, #32
 800a306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800a312:	2300      	movs	r3, #0
 800a314:	e002      	b.n	800a31c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800a316:	2302      	movs	r3, #2
 800a318:	e000      	b.n	800a31c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800a31a:	2301      	movs	r3, #1
  }
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	40008000 	.word	0x40008000

0800a32c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	370c      	adds	r7, #12
 800a33e:	46bd      	mov	sp, r7
 800a340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a344:	4770      	bx	lr
	...

0800a348 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a1a      	ldr	r2, [pc, #104]	@ (800a3bc <UART_InitCallbacksToDefault+0x74>)
 800a354:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a19      	ldr	r2, [pc, #100]	@ (800a3c0 <UART_InitCallbacksToDefault+0x78>)
 800a35c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a18      	ldr	r2, [pc, #96]	@ (800a3c4 <UART_InitCallbacksToDefault+0x7c>)
 800a364:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a17      	ldr	r2, [pc, #92]	@ (800a3c8 <UART_InitCallbacksToDefault+0x80>)
 800a36c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a16      	ldr	r2, [pc, #88]	@ (800a3cc <UART_InitCallbacksToDefault+0x84>)
 800a374:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	4a15      	ldr	r2, [pc, #84]	@ (800a3d0 <UART_InitCallbacksToDefault+0x88>)
 800a37c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a14      	ldr	r2, [pc, #80]	@ (800a3d4 <UART_InitCallbacksToDefault+0x8c>)
 800a384:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a13      	ldr	r2, [pc, #76]	@ (800a3d8 <UART_InitCallbacksToDefault+0x90>)
 800a38c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4a12      	ldr	r2, [pc, #72]	@ (800a3dc <UART_InitCallbacksToDefault+0x94>)
 800a394:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a11      	ldr	r2, [pc, #68]	@ (800a3e0 <UART_InitCallbacksToDefault+0x98>)
 800a39c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4a10      	ldr	r2, [pc, #64]	@ (800a3e4 <UART_InitCallbacksToDefault+0x9c>)
 800a3a4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	4a0f      	ldr	r2, [pc, #60]	@ (800a3e8 <UART_InitCallbacksToDefault+0xa0>)
 800a3ac:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr
 800a3bc:	0800a1f1 	.word	0x0800a1f1
 800a3c0:	0800a1dd 	.word	0x0800a1dd
 800a3c4:	0800a205 	.word	0x0800a205
 800a3c8:	08002d11 	.word	0x08002d11
 800a3cc:	0800a219 	.word	0x0800a219
 800a3d0:	0800a22d 	.word	0x0800a22d
 800a3d4:	0800a241 	.word	0x0800a241
 800a3d8:	0800a255 	.word	0x0800a255
 800a3dc:	0800b273 	.word	0x0800b273
 800a3e0:	0800b287 	.word	0x0800b287
 800a3e4:	0800b29b 	.word	0x0800b29b
 800a3e8:	0800a269 	.word	0x0800a269

0800a3ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3f0:	b08c      	sub	sp, #48	@ 0x30
 800a3f2:	af00      	add	r7, sp, #0
 800a3f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	689a      	ldr	r2, [r3, #8]
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	691b      	ldr	r3, [r3, #16]
 800a404:	431a      	orrs	r2, r3
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	695b      	ldr	r3, [r3, #20]
 800a40a:	431a      	orrs	r2, r3
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	69db      	ldr	r3, [r3, #28]
 800a410:	4313      	orrs	r3, r2
 800a412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	4baa      	ldr	r3, [pc, #680]	@ (800a6c4 <UART_SetConfig+0x2d8>)
 800a41c:	4013      	ands	r3, r2
 800a41e:	697a      	ldr	r2, [r7, #20]
 800a420:	6812      	ldr	r2, [r2, #0]
 800a422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a424:	430b      	orrs	r3, r1
 800a426:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	699b      	ldr	r3, [r3, #24]
 800a442:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a9f      	ldr	r2, [pc, #636]	@ (800a6c8 <UART_SetConfig+0x2dc>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d004      	beq.n	800a458 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a454:	4313      	orrs	r3, r2
 800a456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a462:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	6812      	ldr	r2, [r2, #0]
 800a46a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a46c:	430b      	orrs	r3, r1
 800a46e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a476:	f023 010f 	bic.w	r1, r3, #15
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	430a      	orrs	r2, r1
 800a484:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a90      	ldr	r2, [pc, #576]	@ (800a6cc <UART_SetConfig+0x2e0>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d125      	bne.n	800a4dc <UART_SetConfig+0xf0>
 800a490:	4b8f      	ldr	r3, [pc, #572]	@ (800a6d0 <UART_SetConfig+0x2e4>)
 800a492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a496:	f003 0303 	and.w	r3, r3, #3
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d81a      	bhi.n	800a4d4 <UART_SetConfig+0xe8>
 800a49e:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a4 <UART_SetConfig+0xb8>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4b5 	.word	0x0800a4b5
 800a4a8:	0800a4c5 	.word	0x0800a4c5
 800a4ac:	0800a4bd 	.word	0x0800a4bd
 800a4b0:	0800a4cd 	.word	0x0800a4cd
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4ba:	e116      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4c2:	e112      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4ca:	e10e      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a4cc:	2308      	movs	r3, #8
 800a4ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4d2:	e10a      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a4d4:	2310      	movs	r3, #16
 800a4d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a4da:	e106      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	4a7c      	ldr	r2, [pc, #496]	@ (800a6d4 <UART_SetConfig+0x2e8>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d138      	bne.n	800a558 <UART_SetConfig+0x16c>
 800a4e6:	4b7a      	ldr	r3, [pc, #488]	@ (800a6d0 <UART_SetConfig+0x2e4>)
 800a4e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a4ec:	f003 030c 	and.w	r3, r3, #12
 800a4f0:	2b0c      	cmp	r3, #12
 800a4f2:	d82d      	bhi.n	800a550 <UART_SetConfig+0x164>
 800a4f4:	a201      	add	r2, pc, #4	@ (adr r2, 800a4fc <UART_SetConfig+0x110>)
 800a4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4fa:	bf00      	nop
 800a4fc:	0800a531 	.word	0x0800a531
 800a500:	0800a551 	.word	0x0800a551
 800a504:	0800a551 	.word	0x0800a551
 800a508:	0800a551 	.word	0x0800a551
 800a50c:	0800a541 	.word	0x0800a541
 800a510:	0800a551 	.word	0x0800a551
 800a514:	0800a551 	.word	0x0800a551
 800a518:	0800a551 	.word	0x0800a551
 800a51c:	0800a539 	.word	0x0800a539
 800a520:	0800a551 	.word	0x0800a551
 800a524:	0800a551 	.word	0x0800a551
 800a528:	0800a551 	.word	0x0800a551
 800a52c:	0800a549 	.word	0x0800a549
 800a530:	2300      	movs	r3, #0
 800a532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a536:	e0d8      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a538:	2302      	movs	r3, #2
 800a53a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a53e:	e0d4      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a540:	2304      	movs	r3, #4
 800a542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a546:	e0d0      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a548:	2308      	movs	r3, #8
 800a54a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a54e:	e0cc      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a550:	2310      	movs	r3, #16
 800a552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a556:	e0c8      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a5e      	ldr	r2, [pc, #376]	@ (800a6d8 <UART_SetConfig+0x2ec>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d125      	bne.n	800a5ae <UART_SetConfig+0x1c2>
 800a562:	4b5b      	ldr	r3, [pc, #364]	@ (800a6d0 <UART_SetConfig+0x2e4>)
 800a564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a568:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a56c:	2b30      	cmp	r3, #48	@ 0x30
 800a56e:	d016      	beq.n	800a59e <UART_SetConfig+0x1b2>
 800a570:	2b30      	cmp	r3, #48	@ 0x30
 800a572:	d818      	bhi.n	800a5a6 <UART_SetConfig+0x1ba>
 800a574:	2b20      	cmp	r3, #32
 800a576:	d00a      	beq.n	800a58e <UART_SetConfig+0x1a2>
 800a578:	2b20      	cmp	r3, #32
 800a57a:	d814      	bhi.n	800a5a6 <UART_SetConfig+0x1ba>
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <UART_SetConfig+0x19a>
 800a580:	2b10      	cmp	r3, #16
 800a582:	d008      	beq.n	800a596 <UART_SetConfig+0x1aa>
 800a584:	e00f      	b.n	800a5a6 <UART_SetConfig+0x1ba>
 800a586:	2300      	movs	r3, #0
 800a588:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a58c:	e0ad      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a58e:	2302      	movs	r3, #2
 800a590:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a594:	e0a9      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a596:	2304      	movs	r3, #4
 800a598:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a59c:	e0a5      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a59e:	2308      	movs	r3, #8
 800a5a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5a4:	e0a1      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a5a6:	2310      	movs	r3, #16
 800a5a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ac:	e09d      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a4a      	ldr	r2, [pc, #296]	@ (800a6dc <UART_SetConfig+0x2f0>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d125      	bne.n	800a604 <UART_SetConfig+0x218>
 800a5b8:	4b45      	ldr	r3, [pc, #276]	@ (800a6d0 <UART_SetConfig+0x2e4>)
 800a5ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a5be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a5c2:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5c4:	d016      	beq.n	800a5f4 <UART_SetConfig+0x208>
 800a5c6:	2bc0      	cmp	r3, #192	@ 0xc0
 800a5c8:	d818      	bhi.n	800a5fc <UART_SetConfig+0x210>
 800a5ca:	2b80      	cmp	r3, #128	@ 0x80
 800a5cc:	d00a      	beq.n	800a5e4 <UART_SetConfig+0x1f8>
 800a5ce:	2b80      	cmp	r3, #128	@ 0x80
 800a5d0:	d814      	bhi.n	800a5fc <UART_SetConfig+0x210>
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d002      	beq.n	800a5dc <UART_SetConfig+0x1f0>
 800a5d6:	2b40      	cmp	r3, #64	@ 0x40
 800a5d8:	d008      	beq.n	800a5ec <UART_SetConfig+0x200>
 800a5da:	e00f      	b.n	800a5fc <UART_SetConfig+0x210>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5e2:	e082      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5ea:	e07e      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a5ec:	2304      	movs	r3, #4
 800a5ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5f2:	e07a      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a5f4:	2308      	movs	r3, #8
 800a5f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a5fa:	e076      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a5fc:	2310      	movs	r3, #16
 800a5fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a602:	e072      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a35      	ldr	r2, [pc, #212]	@ (800a6e0 <UART_SetConfig+0x2f4>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d12a      	bne.n	800a664 <UART_SetConfig+0x278>
 800a60e:	4b30      	ldr	r3, [pc, #192]	@ (800a6d0 <UART_SetConfig+0x2e4>)
 800a610:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a614:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a61c:	d01a      	beq.n	800a654 <UART_SetConfig+0x268>
 800a61e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a622:	d81b      	bhi.n	800a65c <UART_SetConfig+0x270>
 800a624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a628:	d00c      	beq.n	800a644 <UART_SetConfig+0x258>
 800a62a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a62e:	d815      	bhi.n	800a65c <UART_SetConfig+0x270>
 800a630:	2b00      	cmp	r3, #0
 800a632:	d003      	beq.n	800a63c <UART_SetConfig+0x250>
 800a634:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a638:	d008      	beq.n	800a64c <UART_SetConfig+0x260>
 800a63a:	e00f      	b.n	800a65c <UART_SetConfig+0x270>
 800a63c:	2300      	movs	r3, #0
 800a63e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a642:	e052      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a644:	2302      	movs	r3, #2
 800a646:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a64a:	e04e      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a64c:	2304      	movs	r3, #4
 800a64e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a652:	e04a      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a654:	2308      	movs	r3, #8
 800a656:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a65a:	e046      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a65c:	2310      	movs	r3, #16
 800a65e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a662:	e042      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4a17      	ldr	r2, [pc, #92]	@ (800a6c8 <UART_SetConfig+0x2dc>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d13a      	bne.n	800a6e4 <UART_SetConfig+0x2f8>
 800a66e:	4b18      	ldr	r3, [pc, #96]	@ (800a6d0 <UART_SetConfig+0x2e4>)
 800a670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a674:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a678:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a67c:	d01a      	beq.n	800a6b4 <UART_SetConfig+0x2c8>
 800a67e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a682:	d81b      	bhi.n	800a6bc <UART_SetConfig+0x2d0>
 800a684:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a688:	d00c      	beq.n	800a6a4 <UART_SetConfig+0x2b8>
 800a68a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a68e:	d815      	bhi.n	800a6bc <UART_SetConfig+0x2d0>
 800a690:	2b00      	cmp	r3, #0
 800a692:	d003      	beq.n	800a69c <UART_SetConfig+0x2b0>
 800a694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a698:	d008      	beq.n	800a6ac <UART_SetConfig+0x2c0>
 800a69a:	e00f      	b.n	800a6bc <UART_SetConfig+0x2d0>
 800a69c:	2300      	movs	r3, #0
 800a69e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6a2:	e022      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6aa:	e01e      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a6ac:	2304      	movs	r3, #4
 800a6ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6b2:	e01a      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a6b4:	2308      	movs	r3, #8
 800a6b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6ba:	e016      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a6bc:	2310      	movs	r3, #16
 800a6be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a6c2:	e012      	b.n	800a6ea <UART_SetConfig+0x2fe>
 800a6c4:	cfff69f3 	.word	0xcfff69f3
 800a6c8:	40008000 	.word	0x40008000
 800a6cc:	40013800 	.word	0x40013800
 800a6d0:	40021000 	.word	0x40021000
 800a6d4:	40004400 	.word	0x40004400
 800a6d8:	40004800 	.word	0x40004800
 800a6dc:	40004c00 	.word	0x40004c00
 800a6e0:	40005000 	.word	0x40005000
 800a6e4:	2310      	movs	r3, #16
 800a6e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4aae      	ldr	r2, [pc, #696]	@ (800a9a8 <UART_SetConfig+0x5bc>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	f040 8097 	bne.w	800a824 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a6f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a6fa:	2b08      	cmp	r3, #8
 800a6fc:	d823      	bhi.n	800a746 <UART_SetConfig+0x35a>
 800a6fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a704 <UART_SetConfig+0x318>)
 800a700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a704:	0800a729 	.word	0x0800a729
 800a708:	0800a747 	.word	0x0800a747
 800a70c:	0800a731 	.word	0x0800a731
 800a710:	0800a747 	.word	0x0800a747
 800a714:	0800a737 	.word	0x0800a737
 800a718:	0800a747 	.word	0x0800a747
 800a71c:	0800a747 	.word	0x0800a747
 800a720:	0800a747 	.word	0x0800a747
 800a724:	0800a73f 	.word	0x0800a73f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a728:	f7fc fcec 	bl	8007104 <HAL_RCC_GetPCLK1Freq>
 800a72c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a72e:	e010      	b.n	800a752 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a730:	4b9e      	ldr	r3, [pc, #632]	@ (800a9ac <UART_SetConfig+0x5c0>)
 800a732:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a734:	e00d      	b.n	800a752 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a736:	f7fc fc77 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 800a73a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a73c:	e009      	b.n	800a752 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a73e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a742:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a744:	e005      	b.n	800a752 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a750:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 8130 	beq.w	800a9ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a75e:	4a94      	ldr	r2, [pc, #592]	@ (800a9b0 <UART_SetConfig+0x5c4>)
 800a760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a764:	461a      	mov	r2, r3
 800a766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a768:	fbb3 f3f2 	udiv	r3, r3, r2
 800a76c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	685a      	ldr	r2, [r3, #4]
 800a772:	4613      	mov	r3, r2
 800a774:	005b      	lsls	r3, r3, #1
 800a776:	4413      	add	r3, r2
 800a778:	69ba      	ldr	r2, [r7, #24]
 800a77a:	429a      	cmp	r2, r3
 800a77c:	d305      	bcc.n	800a78a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a784:	69ba      	ldr	r2, [r7, #24]
 800a786:	429a      	cmp	r2, r3
 800a788:	d903      	bls.n	800a792 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a790:	e113      	b.n	800a9ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a794:	2200      	movs	r2, #0
 800a796:	60bb      	str	r3, [r7, #8]
 800a798:	60fa      	str	r2, [r7, #12]
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a79e:	4a84      	ldr	r2, [pc, #528]	@ (800a9b0 <UART_SetConfig+0x5c4>)
 800a7a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	603b      	str	r3, [r7, #0]
 800a7aa:	607a      	str	r2, [r7, #4]
 800a7ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a7b4:	f7f6 f96e 	bl	8000a94 <__aeabi_uldivmod>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4610      	mov	r0, r2
 800a7be:	4619      	mov	r1, r3
 800a7c0:	f04f 0200 	mov.w	r2, #0
 800a7c4:	f04f 0300 	mov.w	r3, #0
 800a7c8:	020b      	lsls	r3, r1, #8
 800a7ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a7ce:	0202      	lsls	r2, r0, #8
 800a7d0:	6979      	ldr	r1, [r7, #20]
 800a7d2:	6849      	ldr	r1, [r1, #4]
 800a7d4:	0849      	lsrs	r1, r1, #1
 800a7d6:	2000      	movs	r0, #0
 800a7d8:	460c      	mov	r4, r1
 800a7da:	4605      	mov	r5, r0
 800a7dc:	eb12 0804 	adds.w	r8, r2, r4
 800a7e0:	eb43 0905 	adc.w	r9, r3, r5
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	469a      	mov	sl, r3
 800a7ec:	4693      	mov	fp, r2
 800a7ee:	4652      	mov	r2, sl
 800a7f0:	465b      	mov	r3, fp
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	4649      	mov	r1, r9
 800a7f6:	f7f6 f94d 	bl	8000a94 <__aeabi_uldivmod>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	4613      	mov	r3, r2
 800a800:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a802:	6a3b      	ldr	r3, [r7, #32]
 800a804:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a808:	d308      	bcc.n	800a81c <UART_SetConfig+0x430>
 800a80a:	6a3b      	ldr	r3, [r7, #32]
 800a80c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a810:	d204      	bcs.n	800a81c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6a3a      	ldr	r2, [r7, #32]
 800a818:	60da      	str	r2, [r3, #12]
 800a81a:	e0ce      	b.n	800a9ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a822:	e0ca      	b.n	800a9ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a82c:	d166      	bne.n	800a8fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a82e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a832:	2b08      	cmp	r3, #8
 800a834:	d827      	bhi.n	800a886 <UART_SetConfig+0x49a>
 800a836:	a201      	add	r2, pc, #4	@ (adr r2, 800a83c <UART_SetConfig+0x450>)
 800a838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83c:	0800a861 	.word	0x0800a861
 800a840:	0800a869 	.word	0x0800a869
 800a844:	0800a871 	.word	0x0800a871
 800a848:	0800a887 	.word	0x0800a887
 800a84c:	0800a877 	.word	0x0800a877
 800a850:	0800a887 	.word	0x0800a887
 800a854:	0800a887 	.word	0x0800a887
 800a858:	0800a887 	.word	0x0800a887
 800a85c:	0800a87f 	.word	0x0800a87f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a860:	f7fc fc50 	bl	8007104 <HAL_RCC_GetPCLK1Freq>
 800a864:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a866:	e014      	b.n	800a892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a868:	f7fc fc62 	bl	8007130 <HAL_RCC_GetPCLK2Freq>
 800a86c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a86e:	e010      	b.n	800a892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a870:	4b4e      	ldr	r3, [pc, #312]	@ (800a9ac <UART_SetConfig+0x5c0>)
 800a872:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a874:	e00d      	b.n	800a892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a876:	f7fc fbd7 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 800a87a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a87c:	e009      	b.n	800a892 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a87e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a882:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a884:	e005      	b.n	800a892 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a886:	2300      	movs	r3, #0
 800a888:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a890:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a894:	2b00      	cmp	r3, #0
 800a896:	f000 8090 	beq.w	800a9ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89e:	4a44      	ldr	r2, [pc, #272]	@ (800a9b0 <UART_SetConfig+0x5c4>)
 800a8a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8ac:	005a      	lsls	r2, r3, #1
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	085b      	lsrs	r3, r3, #1
 800a8b4:	441a      	add	r2, r3
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	2b0f      	cmp	r3, #15
 800a8c4:	d916      	bls.n	800a8f4 <UART_SetConfig+0x508>
 800a8c6:	6a3b      	ldr	r3, [r7, #32]
 800a8c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8cc:	d212      	bcs.n	800a8f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	f023 030f 	bic.w	r3, r3, #15
 800a8d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	085b      	lsrs	r3, r3, #1
 800a8dc:	b29b      	uxth	r3, r3
 800a8de:	f003 0307 	and.w	r3, r3, #7
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	8bfb      	ldrh	r3, [r7, #30]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	8bfa      	ldrh	r2, [r7, #30]
 800a8f0:	60da      	str	r2, [r3, #12]
 800a8f2:	e062      	b.n	800a9ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a8fa:	e05e      	b.n	800a9ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a8fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a900:	2b08      	cmp	r3, #8
 800a902:	d828      	bhi.n	800a956 <UART_SetConfig+0x56a>
 800a904:	a201      	add	r2, pc, #4	@ (adr r2, 800a90c <UART_SetConfig+0x520>)
 800a906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90a:	bf00      	nop
 800a90c:	0800a931 	.word	0x0800a931
 800a910:	0800a939 	.word	0x0800a939
 800a914:	0800a941 	.word	0x0800a941
 800a918:	0800a957 	.word	0x0800a957
 800a91c:	0800a947 	.word	0x0800a947
 800a920:	0800a957 	.word	0x0800a957
 800a924:	0800a957 	.word	0x0800a957
 800a928:	0800a957 	.word	0x0800a957
 800a92c:	0800a94f 	.word	0x0800a94f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a930:	f7fc fbe8 	bl	8007104 <HAL_RCC_GetPCLK1Freq>
 800a934:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a936:	e014      	b.n	800a962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a938:	f7fc fbfa 	bl	8007130 <HAL_RCC_GetPCLK2Freq>
 800a93c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a93e:	e010      	b.n	800a962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a940:	4b1a      	ldr	r3, [pc, #104]	@ (800a9ac <UART_SetConfig+0x5c0>)
 800a942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a944:	e00d      	b.n	800a962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a946:	f7fc fb6f 	bl	8007028 <HAL_RCC_GetSysClockFreq>
 800a94a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a94c:	e009      	b.n	800a962 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a94e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a952:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a954:	e005      	b.n	800a962 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a956:	2300      	movs	r3, #0
 800a958:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a960:	bf00      	nop
    }

    if (pclk != 0U)
 800a962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a964:	2b00      	cmp	r3, #0
 800a966:	d028      	beq.n	800a9ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96c:	4a10      	ldr	r2, [pc, #64]	@ (800a9b0 <UART_SetConfig+0x5c4>)
 800a96e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a972:	461a      	mov	r2, r3
 800a974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a976:	fbb3 f2f2 	udiv	r2, r3, r2
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	685b      	ldr	r3, [r3, #4]
 800a97e:	085b      	lsrs	r3, r3, #1
 800a980:	441a      	add	r2, r3
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	fbb2 f3f3 	udiv	r3, r2, r3
 800a98a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a98c:	6a3b      	ldr	r3, [r7, #32]
 800a98e:	2b0f      	cmp	r3, #15
 800a990:	d910      	bls.n	800a9b4 <UART_SetConfig+0x5c8>
 800a992:	6a3b      	ldr	r3, [r7, #32]
 800a994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a998:	d20c      	bcs.n	800a9b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	60da      	str	r2, [r3, #12]
 800a9a4:	e009      	b.n	800a9ba <UART_SetConfig+0x5ce>
 800a9a6:	bf00      	nop
 800a9a8:	40008000 	.word	0x40008000
 800a9ac:	00f42400 	.word	0x00f42400
 800a9b0:	0800c284 	.word	0x0800c284
      }
      else
      {
        ret = HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a9ba:	697b      	ldr	r3, [r7, #20]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a9d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3730      	adds	r7, #48	@ 0x30
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a9e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f0:	f003 0308 	and.w	r3, r3, #8
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa12:	f003 0301 	and.w	r3, r3, #1
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa34:	f003 0302 	and.w	r3, r3, #2
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00a      	beq.n	800aa52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa56:	f003 0304 	and.w	r3, r3, #4
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	430a      	orrs	r2, r1
 800aa72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa78:	f003 0310 	and.w	r3, r3, #16
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d00a      	beq.n	800aa96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	430a      	orrs	r2, r1
 800aa94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa9a:	f003 0320 	and.w	r3, r3, #32
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00a      	beq.n	800aab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	689b      	ldr	r3, [r3, #8]
 800aaa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	430a      	orrs	r2, r1
 800aab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aabc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d01a      	beq.n	800aafa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	430a      	orrs	r2, r1
 800aad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aae2:	d10a      	bne.n	800aafa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aafe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00a      	beq.n	800ab1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	430a      	orrs	r2, r1
 800ab1a:	605a      	str	r2, [r3, #4]
  }
}
 800ab1c:	bf00      	nop
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b098      	sub	sp, #96	@ 0x60
 800ab2c:	af02      	add	r7, sp, #8
 800ab2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab38:	f7f9 fac2 	bl	80040c0 <HAL_GetTick>
 800ab3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0308 	and.w	r3, r3, #8
 800ab48:	2b08      	cmp	r3, #8
 800ab4a:	d12f      	bne.n	800abac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab50:	9300      	str	r3, [sp, #0]
 800ab52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab54:	2200      	movs	r2, #0
 800ab56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f88e 	bl	800ac7c <UART_WaitOnFlagUntilTimeout>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d022      	beq.n	800abac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab6e:	e853 3f00 	ldrex	r3, [r3]
 800ab72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ab74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab7a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	461a      	mov	r2, r3
 800ab82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab84:	647b      	str	r3, [r7, #68]	@ 0x44
 800ab86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab8c:	e841 2300 	strex	r3, r2, [r1]
 800ab90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1e6      	bne.n	800ab66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2220      	movs	r2, #32
 800ab9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aba8:	2303      	movs	r3, #3
 800abaa:	e063      	b.n	800ac74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0304 	and.w	r3, r3, #4
 800abb6:	2b04      	cmp	r3, #4
 800abb8:	d149      	bne.n	800ac4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800abba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800abc2:	2200      	movs	r2, #0
 800abc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f000 f857 	bl	800ac7c <UART_WaitOnFlagUntilTimeout>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d03c      	beq.n	800ac4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abdc:	e853 3f00 	ldrex	r3, [r3]
 800abe0:	623b      	str	r3, [r7, #32]
   return(result);
 800abe2:	6a3b      	ldr	r3, [r7, #32]
 800abe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800abe8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800abf2:	633b      	str	r3, [r7, #48]	@ 0x30
 800abf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800abf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abfa:	e841 2300 	strex	r3, r2, [r1]
 800abfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ac00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e6      	bne.n	800abd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	3308      	adds	r3, #8
 800ac0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	e853 3f00 	ldrex	r3, [r3]
 800ac14:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f023 0301 	bic.w	r3, r3, #1
 800ac1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3308      	adds	r3, #8
 800ac24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ac26:	61fa      	str	r2, [r7, #28]
 800ac28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2a:	69b9      	ldr	r1, [r7, #24]
 800ac2c:	69fa      	ldr	r2, [r7, #28]
 800ac2e:	e841 2300 	strex	r3, r2, [r1]
 800ac32:	617b      	str	r3, [r7, #20]
   return(result);
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1e5      	bne.n	800ac06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2220      	movs	r2, #32
 800ac3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e012      	b.n	800ac74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2220      	movs	r2, #32
 800ac52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2220      	movs	r2, #32
 800ac5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2200      	movs	r2, #0
 800ac68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3758      	adds	r7, #88	@ 0x58
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b084      	sub	sp, #16
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	603b      	str	r3, [r7, #0]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac8c:	e04f      	b.n	800ad2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac8e:	69bb      	ldr	r3, [r7, #24]
 800ac90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac94:	d04b      	beq.n	800ad2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac96:	f7f9 fa13 	bl	80040c0 <HAL_GetTick>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	69ba      	ldr	r2, [r7, #24]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d302      	bcc.n	800acac <UART_WaitOnFlagUntilTimeout+0x30>
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d101      	bne.n	800acb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800acac:	2303      	movs	r3, #3
 800acae:	e04e      	b.n	800ad4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 0304 	and.w	r3, r3, #4
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d037      	beq.n	800ad2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	2b80      	cmp	r3, #128	@ 0x80
 800acc2:	d034      	beq.n	800ad2e <UART_WaitOnFlagUntilTimeout+0xb2>
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b40      	cmp	r3, #64	@ 0x40
 800acc8:	d031      	beq.n	800ad2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	69db      	ldr	r3, [r3, #28]
 800acd0:	f003 0308 	and.w	r3, r3, #8
 800acd4:	2b08      	cmp	r3, #8
 800acd6:	d110      	bne.n	800acfa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	2208      	movs	r2, #8
 800acde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 f920 	bl	800af26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	2208      	movs	r2, #8
 800acea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e029      	b.n	800ad4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	69db      	ldr	r3, [r3, #28]
 800ad00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ad04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ad08:	d111      	bne.n	800ad2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ad12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f906 	bl	800af26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2220      	movs	r2, #32
 800ad1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2200      	movs	r2, #0
 800ad26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e00f      	b.n	800ad4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	69da      	ldr	r2, [r3, #28]
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	4013      	ands	r3, r2
 800ad38:	68ba      	ldr	r2, [r7, #8]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	bf0c      	ite	eq
 800ad3e:	2301      	moveq	r3, #1
 800ad40:	2300      	movne	r3, #0
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	461a      	mov	r2, r3
 800ad46:	79fb      	ldrb	r3, [r7, #7]
 800ad48:	429a      	cmp	r2, r3
 800ad4a:	d0a0      	beq.n	800ac8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
	...

0800ad58 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b096      	sub	sp, #88	@ 0x58
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	4613      	mov	r3, r2
 800ad64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	88fa      	ldrh	r2, [r7, #6]
 800ad70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2222      	movs	r2, #34	@ 0x22
 800ad80:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d02d      	beq.n	800adea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad94:	4a40      	ldr	r2, [pc, #256]	@ (800ae98 <UART_Start_Receive_DMA+0x140>)
 800ad96:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad9e:	4a3f      	ldr	r2, [pc, #252]	@ (800ae9c <UART_Start_Receive_DMA+0x144>)
 800ada0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ada8:	4a3d      	ldr	r2, [pc, #244]	@ (800aea0 <UART_Start_Receive_DMA+0x148>)
 800adaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800adb2:	2200      	movs	r2, #0
 800adb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3324      	adds	r3, #36	@ 0x24
 800adc2:	4619      	mov	r1, r3
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800adc8:	461a      	mov	r2, r3
 800adca:	88fb      	ldrh	r3, [r7, #6]
 800adcc:	f7fa ffd6 	bl	8005d7c <HAL_DMA_Start_IT>
 800add0:	4603      	mov	r3, r0
 800add2:	2b00      	cmp	r3, #0
 800add4:	d009      	beq.n	800adea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	2210      	movs	r2, #16
 800adda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2220      	movs	r2, #32
 800ade2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	e051      	b.n	800ae8e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d018      	beq.n	800ae24 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adfa:	e853 3f00 	ldrex	r3, [r3]
 800adfe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae06:	657b      	str	r3, [r7, #84]	@ 0x54
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ae10:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae12:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae14:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ae16:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae18:	e841 2300 	strex	r3, r2, [r1]
 800ae1c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ae1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1e6      	bne.n	800adf2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3308      	adds	r3, #8
 800ae2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2e:	e853 3f00 	ldrex	r3, [r3]
 800ae32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae36:	f043 0301 	orr.w	r3, r3, #1
 800ae3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	3308      	adds	r3, #8
 800ae42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ae44:	637a      	str	r2, [r7, #52]	@ 0x34
 800ae46:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae48:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ae4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae4c:	e841 2300 	strex	r3, r2, [r1]
 800ae50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800ae52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1e5      	bne.n	800ae24 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3308      	adds	r3, #8
 800ae5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	e853 3f00 	ldrex	r3, [r3]
 800ae66:	613b      	str	r3, [r7, #16]
   return(result);
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3308      	adds	r3, #8
 800ae76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ae78:	623a      	str	r2, [r7, #32]
 800ae7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	69f9      	ldr	r1, [r7, #28]
 800ae7e:	6a3a      	ldr	r2, [r7, #32]
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e5      	bne.n	800ae58 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3758      	adds	r7, #88	@ 0x58
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
 800ae96:	bf00      	nop
 800ae98:	0800aff3 	.word	0x0800aff3
 800ae9c:	0800b127 	.word	0x0800b127
 800aea0:	0800b16d 	.word	0x0800b16d

0800aea4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800aea4:	b480      	push	{r7}
 800aea6:	b08f      	sub	sp, #60	@ 0x3c
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb2:	6a3b      	ldr	r3, [r7, #32]
 800aeb4:	e853 3f00 	ldrex	r3, [r3]
 800aeb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800aec0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aecc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aece:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aed2:	e841 2300 	strex	r3, r2, [r1]
 800aed6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1e6      	bne.n	800aeac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	3308      	adds	r3, #8
 800aee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	e853 3f00 	ldrex	r3, [r3]
 800aeec:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800aef4:	633b      	str	r3, [r7, #48]	@ 0x30
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	3308      	adds	r3, #8
 800aefc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aefe:	61ba      	str	r2, [r7, #24]
 800af00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af02:	6979      	ldr	r1, [r7, #20]
 800af04:	69ba      	ldr	r2, [r7, #24]
 800af06:	e841 2300 	strex	r3, r2, [r1]
 800af0a:	613b      	str	r3, [r7, #16]
   return(result);
 800af0c:	693b      	ldr	r3, [r7, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1e5      	bne.n	800aede <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2220      	movs	r2, #32
 800af16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800af1a:	bf00      	nop
 800af1c:	373c      	adds	r7, #60	@ 0x3c
 800af1e:	46bd      	mov	sp, r7
 800af20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af24:	4770      	bx	lr

0800af26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800af26:	b480      	push	{r7}
 800af28:	b095      	sub	sp, #84	@ 0x54
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af36:	e853 3f00 	ldrex	r3, [r3]
 800af3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800af3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800af42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800af4e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800af52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800af54:	e841 2300 	strex	r3, r2, [r1]
 800af58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1e6      	bne.n	800af2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3308      	adds	r3, #8
 800af66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	6a3b      	ldr	r3, [r7, #32]
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	61fb      	str	r3, [r7, #28]
   return(result);
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800af76:	f023 0301 	bic.w	r3, r3, #1
 800af7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	3308      	adds	r3, #8
 800af82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800af86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af8c:	e841 2300 	strex	r3, r2, [r1]
 800af90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af94:	2b00      	cmp	r3, #0
 800af96:	d1e3      	bne.n	800af60 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d118      	bne.n	800afd2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	e853 3f00 	ldrex	r3, [r3]
 800afac:	60bb      	str	r3, [r7, #8]
   return(result);
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	f023 0310 	bic.w	r3, r3, #16
 800afb4:	647b      	str	r3, [r7, #68]	@ 0x44
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800afbe:	61bb      	str	r3, [r7, #24]
 800afc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc2:	6979      	ldr	r1, [r7, #20]
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	e841 2300 	strex	r3, r2, [r1]
 800afca:	613b      	str	r3, [r7, #16]
   return(result);
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1e6      	bne.n	800afa0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2220      	movs	r2, #32
 800afd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800afe6:	bf00      	nop
 800afe8:	3754      	adds	r7, #84	@ 0x54
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b09c      	sub	sp, #112	@ 0x70
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800affe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 0320 	and.w	r3, r3, #32
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d171      	bne.n	800b0f2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800b00e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b010:	2200      	movs	r2, #0
 800b012:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b01c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b01e:	e853 3f00 	ldrex	r3, [r3]
 800b022:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b026:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b02a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b02c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	461a      	mov	r2, r3
 800b032:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b034:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b036:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b038:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b03a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b03c:	e841 2300 	strex	r3, r2, [r1]
 800b040:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1e6      	bne.n	800b016 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b048:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	3308      	adds	r3, #8
 800b04e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b052:	e853 3f00 	ldrex	r3, [r3]
 800b056:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b05a:	f023 0301 	bic.w	r3, r3, #1
 800b05e:	667b      	str	r3, [r7, #100]	@ 0x64
 800b060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3308      	adds	r3, #8
 800b066:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b068:	647a      	str	r2, [r7, #68]	@ 0x44
 800b06a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b06c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b06e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b070:	e841 2300 	strex	r3, r2, [r1]
 800b074:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1e5      	bne.n	800b048 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b07c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	3308      	adds	r3, #8
 800b082:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b086:	e853 3f00 	ldrex	r3, [r3]
 800b08a:	623b      	str	r3, [r7, #32]
   return(result);
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b092:	663b      	str	r3, [r7, #96]	@ 0x60
 800b094:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	3308      	adds	r3, #8
 800b09a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b09c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b09e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0a4:	e841 2300 	strex	r3, r2, [r1]
 800b0a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d1e5      	bne.n	800b07c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b0b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0b2:	2220      	movs	r2, #32
 800b0b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d118      	bne.n	800b0f2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	e853 3f00 	ldrex	r3, [r3]
 800b0cc:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f023 0310 	bic.w	r3, r3, #16
 800b0d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b0d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	461a      	mov	r2, r3
 800b0dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0de:	61fb      	str	r3, [r7, #28]
 800b0e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e2:	69b9      	ldr	r1, [r7, #24]
 800b0e4:	69fa      	ldr	r2, [r7, #28]
 800b0e6:	e841 2300 	strex	r3, r2, [r1]
 800b0ea:	617b      	str	r3, [r7, #20]
   return(result);
 800b0ec:	697b      	ldr	r3, [r7, #20]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1e6      	bne.n	800b0c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b0f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d109      	bne.n	800b114 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800b100:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b102:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b106:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b108:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b10c:	4611      	mov	r1, r2
 800b10e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b110:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b112:	e004      	b.n	800b11e <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800b114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b116:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800b11a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b11c:	4798      	blx	r3
}
 800b11e:	bf00      	nop
 800b120:	3770      	adds	r7, #112	@ 0x70
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}

0800b126 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b126:	b580      	push	{r7, lr}
 800b128:	b084      	sub	sp, #16
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b132:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2201      	movs	r2, #1
 800b138:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d10b      	bne.n	800b15a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800b14e:	0852      	lsrs	r2, r2, #1
 800b150:	b292      	uxth	r2, r2
 800b152:	4611      	mov	r1, r2
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b158:	e004      	b.n	800b164 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	4798      	blx	r3
}
 800b164:	bf00      	nop
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b086      	sub	sp, #24
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b178:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b180:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b188:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b194:	2b80      	cmp	r3, #128	@ 0x80
 800b196:	d109      	bne.n	800b1ac <UART_DMAError+0x40>
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	2b21      	cmp	r3, #33	@ 0x21
 800b19c:	d106      	bne.n	800b1ac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b1a6:	6978      	ldr	r0, [r7, #20]
 800b1a8:	f7ff fe7c 	bl	800aea4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1b6:	2b40      	cmp	r3, #64	@ 0x40
 800b1b8:	d109      	bne.n	800b1ce <UART_DMAError+0x62>
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2b22      	cmp	r3, #34	@ 0x22
 800b1be:	d106      	bne.n	800b1ce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b1c8:	6978      	ldr	r0, [r7, #20]
 800b1ca:	f7ff feac 	bl	800af26 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1d4:	f043 0210 	orr.w	r2, r3, #16
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b1e4:	6978      	ldr	r0, [r7, #20]
 800b1e6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1e8:	bf00      	nop
 800b1ea:	3718      	adds	r7, #24
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b210:	bf00      	nop
 800b212:	3710      	adds	r7, #16
 800b214:	46bd      	mov	sp, r7
 800b216:	bd80      	pop	{r7, pc}

0800b218 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b088      	sub	sp, #32
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	e853 3f00 	ldrex	r3, [r3]
 800b22c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b234:	61fb      	str	r3, [r7, #28]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	61bb      	str	r3, [r7, #24]
 800b240:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b242:	6979      	ldr	r1, [r7, #20]
 800b244:	69ba      	ldr	r2, [r7, #24]
 800b246:	e841 2300 	strex	r3, r2, [r1]
 800b24a:	613b      	str	r3, [r7, #16]
   return(result);
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1e6      	bne.n	800b220 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2220      	movs	r2, #32
 800b256:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b26a:	bf00      	nop
 800b26c:	3720      	adds	r7, #32
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b272:	b480      	push	{r7}
 800b274:	b083      	sub	sp, #12
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b27a:	bf00      	nop
 800b27c:	370c      	adds	r7, #12
 800b27e:	46bd      	mov	sp, r7
 800b280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b284:	4770      	bx	lr

0800b286 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b286:	b480      	push	{r7}
 800b288:	b083      	sub	sp, #12
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b28e:	bf00      	nop
 800b290:	370c      	adds	r7, #12
 800b292:	46bd      	mov	sp, r7
 800b294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b298:	4770      	bx	lr

0800b29a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b29a:	b480      	push	{r7}
 800b29c:	b083      	sub	sp, #12
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b2a2:	bf00      	nop
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr

0800b2ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d101      	bne.n	800b2c4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	e027      	b.n	800b314 <HAL_UARTEx_DisableFifoMode+0x66>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2224      	movs	r2, #36	@ 0x24
 800b2d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f022 0201 	bic.w	r2, r2, #1
 800b2ea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b2f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	68fa      	ldr	r2, [r7, #12]
 800b300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2220      	movs	r2, #32
 800b306:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b330:	2b01      	cmp	r3, #1
 800b332:	d101      	bne.n	800b338 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b334:	2302      	movs	r3, #2
 800b336:	e02d      	b.n	800b394 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2224      	movs	r2, #36	@ 0x24
 800b344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f022 0201 	bic.w	r2, r2, #1
 800b35e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	430a      	orrs	r2, r1
 800b372:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f84f 	bl	800b418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2220      	movs	r2, #32
 800b386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b084      	sub	sp, #16
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d101      	bne.n	800b3b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	e02d      	b.n	800b410 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2224      	movs	r2, #36	@ 0x24
 800b3c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f022 0201 	bic.w	r2, r2, #1
 800b3da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	683a      	ldr	r2, [r7, #0]
 800b3ec:	430a      	orrs	r2, r1
 800b3ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 f811 	bl	800b418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	68fa      	ldr	r2, [r7, #12]
 800b3fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2220      	movs	r2, #32
 800b402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2200      	movs	r2, #0
 800b40a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3710      	adds	r7, #16
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b424:	2b00      	cmp	r3, #0
 800b426:	d108      	bne.n	800b43a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b438:	e031      	b.n	800b49e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b43a:	2308      	movs	r3, #8
 800b43c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b43e:	2308      	movs	r3, #8
 800b440:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	689b      	ldr	r3, [r3, #8]
 800b448:	0e5b      	lsrs	r3, r3, #25
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	f003 0307 	and.w	r3, r3, #7
 800b450:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	0f5b      	lsrs	r3, r3, #29
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	f003 0307 	and.w	r3, r3, #7
 800b460:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b462:	7bbb      	ldrb	r3, [r7, #14]
 800b464:	7b3a      	ldrb	r2, [r7, #12]
 800b466:	4911      	ldr	r1, [pc, #68]	@ (800b4ac <UARTEx_SetNbDataToProcess+0x94>)
 800b468:	5c8a      	ldrb	r2, [r1, r2]
 800b46a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b46e:	7b3a      	ldrb	r2, [r7, #12]
 800b470:	490f      	ldr	r1, [pc, #60]	@ (800b4b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b472:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b474:	fb93 f3f2 	sdiv	r3, r3, r2
 800b478:	b29a      	uxth	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	7b7a      	ldrb	r2, [r7, #13]
 800b484:	4909      	ldr	r1, [pc, #36]	@ (800b4ac <UARTEx_SetNbDataToProcess+0x94>)
 800b486:	5c8a      	ldrb	r2, [r1, r2]
 800b488:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b48c:	7b7a      	ldrb	r2, [r7, #13]
 800b48e:	4908      	ldr	r1, [pc, #32]	@ (800b4b0 <UARTEx_SetNbDataToProcess+0x98>)
 800b490:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b492:	fb93 f3f2 	sdiv	r3, r3, r2
 800b496:	b29a      	uxth	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b49e:	bf00      	nop
 800b4a0:	3714      	adds	r7, #20
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop
 800b4ac:	0800c29c 	.word	0x0800c29c
 800b4b0:	0800c2a4 	.word	0x0800c2a4

0800b4b4 <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	607b      	str	r3, [r7, #4]
 800b4be:	460b      	mov	r3, r1
 800b4c0:	817b      	strh	r3, [r7, #10]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	897a      	ldrh	r2, [r7, #10]
 800b4ca:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	893a      	ldrh	r2, [r7, #8]
 800b4d0:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	605a      	str	r2, [r3, #4]
}
 800b4d8:	bf00      	nop
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <malloc>:
 800b4e4:	4b02      	ldr	r3, [pc, #8]	@ (800b4f0 <malloc+0xc>)
 800b4e6:	4601      	mov	r1, r0
 800b4e8:	6818      	ldr	r0, [r3, #0]
 800b4ea:	f000 b825 	b.w	800b538 <_malloc_r>
 800b4ee:	bf00      	nop
 800b4f0:	20000168 	.word	0x20000168

0800b4f4 <sbrk_aligned>:
 800b4f4:	b570      	push	{r4, r5, r6, lr}
 800b4f6:	4e0f      	ldr	r6, [pc, #60]	@ (800b534 <sbrk_aligned+0x40>)
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	6831      	ldr	r1, [r6, #0]
 800b4fc:	4605      	mov	r5, r0
 800b4fe:	b911      	cbnz	r1, 800b506 <sbrk_aligned+0x12>
 800b500:	f000 f8ae 	bl	800b660 <_sbrk_r>
 800b504:	6030      	str	r0, [r6, #0]
 800b506:	4621      	mov	r1, r4
 800b508:	4628      	mov	r0, r5
 800b50a:	f000 f8a9 	bl	800b660 <_sbrk_r>
 800b50e:	1c43      	adds	r3, r0, #1
 800b510:	d103      	bne.n	800b51a <sbrk_aligned+0x26>
 800b512:	f04f 34ff 	mov.w	r4, #4294967295
 800b516:	4620      	mov	r0, r4
 800b518:	bd70      	pop	{r4, r5, r6, pc}
 800b51a:	1cc4      	adds	r4, r0, #3
 800b51c:	f024 0403 	bic.w	r4, r4, #3
 800b520:	42a0      	cmp	r0, r4
 800b522:	d0f8      	beq.n	800b516 <sbrk_aligned+0x22>
 800b524:	1a21      	subs	r1, r4, r0
 800b526:	4628      	mov	r0, r5
 800b528:	f000 f89a 	bl	800b660 <_sbrk_r>
 800b52c:	3001      	adds	r0, #1
 800b52e:	d1f2      	bne.n	800b516 <sbrk_aligned+0x22>
 800b530:	e7ef      	b.n	800b512 <sbrk_aligned+0x1e>
 800b532:	bf00      	nop
 800b534:	20001abc 	.word	0x20001abc

0800b538 <_malloc_r>:
 800b538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b53c:	1ccd      	adds	r5, r1, #3
 800b53e:	f025 0503 	bic.w	r5, r5, #3
 800b542:	3508      	adds	r5, #8
 800b544:	2d0c      	cmp	r5, #12
 800b546:	bf38      	it	cc
 800b548:	250c      	movcc	r5, #12
 800b54a:	2d00      	cmp	r5, #0
 800b54c:	4606      	mov	r6, r0
 800b54e:	db01      	blt.n	800b554 <_malloc_r+0x1c>
 800b550:	42a9      	cmp	r1, r5
 800b552:	d904      	bls.n	800b55e <_malloc_r+0x26>
 800b554:	230c      	movs	r3, #12
 800b556:	6033      	str	r3, [r6, #0]
 800b558:	2000      	movs	r0, #0
 800b55a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b55e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b634 <_malloc_r+0xfc>
 800b562:	f000 f869 	bl	800b638 <__malloc_lock>
 800b566:	f8d8 3000 	ldr.w	r3, [r8]
 800b56a:	461c      	mov	r4, r3
 800b56c:	bb44      	cbnz	r4, 800b5c0 <_malloc_r+0x88>
 800b56e:	4629      	mov	r1, r5
 800b570:	4630      	mov	r0, r6
 800b572:	f7ff ffbf 	bl	800b4f4 <sbrk_aligned>
 800b576:	1c43      	adds	r3, r0, #1
 800b578:	4604      	mov	r4, r0
 800b57a:	d158      	bne.n	800b62e <_malloc_r+0xf6>
 800b57c:	f8d8 4000 	ldr.w	r4, [r8]
 800b580:	4627      	mov	r7, r4
 800b582:	2f00      	cmp	r7, #0
 800b584:	d143      	bne.n	800b60e <_malloc_r+0xd6>
 800b586:	2c00      	cmp	r4, #0
 800b588:	d04b      	beq.n	800b622 <_malloc_r+0xea>
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	4639      	mov	r1, r7
 800b58e:	4630      	mov	r0, r6
 800b590:	eb04 0903 	add.w	r9, r4, r3
 800b594:	f000 f864 	bl	800b660 <_sbrk_r>
 800b598:	4581      	cmp	r9, r0
 800b59a:	d142      	bne.n	800b622 <_malloc_r+0xea>
 800b59c:	6821      	ldr	r1, [r4, #0]
 800b59e:	1a6d      	subs	r5, r5, r1
 800b5a0:	4629      	mov	r1, r5
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f7ff ffa6 	bl	800b4f4 <sbrk_aligned>
 800b5a8:	3001      	adds	r0, #1
 800b5aa:	d03a      	beq.n	800b622 <_malloc_r+0xea>
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	442b      	add	r3, r5
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b5b6:	685a      	ldr	r2, [r3, #4]
 800b5b8:	bb62      	cbnz	r2, 800b614 <_malloc_r+0xdc>
 800b5ba:	f8c8 7000 	str.w	r7, [r8]
 800b5be:	e00f      	b.n	800b5e0 <_malloc_r+0xa8>
 800b5c0:	6822      	ldr	r2, [r4, #0]
 800b5c2:	1b52      	subs	r2, r2, r5
 800b5c4:	d420      	bmi.n	800b608 <_malloc_r+0xd0>
 800b5c6:	2a0b      	cmp	r2, #11
 800b5c8:	d917      	bls.n	800b5fa <_malloc_r+0xc2>
 800b5ca:	1961      	adds	r1, r4, r5
 800b5cc:	42a3      	cmp	r3, r4
 800b5ce:	6025      	str	r5, [r4, #0]
 800b5d0:	bf18      	it	ne
 800b5d2:	6059      	strne	r1, [r3, #4]
 800b5d4:	6863      	ldr	r3, [r4, #4]
 800b5d6:	bf08      	it	eq
 800b5d8:	f8c8 1000 	streq.w	r1, [r8]
 800b5dc:	5162      	str	r2, [r4, r5]
 800b5de:	604b      	str	r3, [r1, #4]
 800b5e0:	4630      	mov	r0, r6
 800b5e2:	f000 f82f 	bl	800b644 <__malloc_unlock>
 800b5e6:	f104 000b 	add.w	r0, r4, #11
 800b5ea:	1d23      	adds	r3, r4, #4
 800b5ec:	f020 0007 	bic.w	r0, r0, #7
 800b5f0:	1ac2      	subs	r2, r0, r3
 800b5f2:	bf1c      	itt	ne
 800b5f4:	1a1b      	subne	r3, r3, r0
 800b5f6:	50a3      	strne	r3, [r4, r2]
 800b5f8:	e7af      	b.n	800b55a <_malloc_r+0x22>
 800b5fa:	6862      	ldr	r2, [r4, #4]
 800b5fc:	42a3      	cmp	r3, r4
 800b5fe:	bf0c      	ite	eq
 800b600:	f8c8 2000 	streq.w	r2, [r8]
 800b604:	605a      	strne	r2, [r3, #4]
 800b606:	e7eb      	b.n	800b5e0 <_malloc_r+0xa8>
 800b608:	4623      	mov	r3, r4
 800b60a:	6864      	ldr	r4, [r4, #4]
 800b60c:	e7ae      	b.n	800b56c <_malloc_r+0x34>
 800b60e:	463c      	mov	r4, r7
 800b610:	687f      	ldr	r7, [r7, #4]
 800b612:	e7b6      	b.n	800b582 <_malloc_r+0x4a>
 800b614:	461a      	mov	r2, r3
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	42a3      	cmp	r3, r4
 800b61a:	d1fb      	bne.n	800b614 <_malloc_r+0xdc>
 800b61c:	2300      	movs	r3, #0
 800b61e:	6053      	str	r3, [r2, #4]
 800b620:	e7de      	b.n	800b5e0 <_malloc_r+0xa8>
 800b622:	230c      	movs	r3, #12
 800b624:	6033      	str	r3, [r6, #0]
 800b626:	4630      	mov	r0, r6
 800b628:	f000 f80c 	bl	800b644 <__malloc_unlock>
 800b62c:	e794      	b.n	800b558 <_malloc_r+0x20>
 800b62e:	6005      	str	r5, [r0, #0]
 800b630:	e7d6      	b.n	800b5e0 <_malloc_r+0xa8>
 800b632:	bf00      	nop
 800b634:	20001ac0 	.word	0x20001ac0

0800b638 <__malloc_lock>:
 800b638:	4801      	ldr	r0, [pc, #4]	@ (800b640 <__malloc_lock+0x8>)
 800b63a:	f000 b84b 	b.w	800b6d4 <__retarget_lock_acquire_recursive>
 800b63e:	bf00      	nop
 800b640:	20001c00 	.word	0x20001c00

0800b644 <__malloc_unlock>:
 800b644:	4801      	ldr	r0, [pc, #4]	@ (800b64c <__malloc_unlock+0x8>)
 800b646:	f000 b846 	b.w	800b6d6 <__retarget_lock_release_recursive>
 800b64a:	bf00      	nop
 800b64c:	20001c00 	.word	0x20001c00

0800b650 <memset>:
 800b650:	4402      	add	r2, r0
 800b652:	4603      	mov	r3, r0
 800b654:	4293      	cmp	r3, r2
 800b656:	d100      	bne.n	800b65a <memset+0xa>
 800b658:	4770      	bx	lr
 800b65a:	f803 1b01 	strb.w	r1, [r3], #1
 800b65e:	e7f9      	b.n	800b654 <memset+0x4>

0800b660 <_sbrk_r>:
 800b660:	b538      	push	{r3, r4, r5, lr}
 800b662:	4d06      	ldr	r5, [pc, #24]	@ (800b67c <_sbrk_r+0x1c>)
 800b664:	2300      	movs	r3, #0
 800b666:	4604      	mov	r4, r0
 800b668:	4608      	mov	r0, r1
 800b66a:	602b      	str	r3, [r5, #0]
 800b66c:	f7f7 ffc6 	bl	80035fc <_sbrk>
 800b670:	1c43      	adds	r3, r0, #1
 800b672:	d102      	bne.n	800b67a <_sbrk_r+0x1a>
 800b674:	682b      	ldr	r3, [r5, #0]
 800b676:	b103      	cbz	r3, 800b67a <_sbrk_r+0x1a>
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	bd38      	pop	{r3, r4, r5, pc}
 800b67c:	20001bfc 	.word	0x20001bfc

0800b680 <__errno>:
 800b680:	4b01      	ldr	r3, [pc, #4]	@ (800b688 <__errno+0x8>)
 800b682:	6818      	ldr	r0, [r3, #0]
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	20000168 	.word	0x20000168

0800b68c <__libc_init_array>:
 800b68c:	b570      	push	{r4, r5, r6, lr}
 800b68e:	4d0d      	ldr	r5, [pc, #52]	@ (800b6c4 <__libc_init_array+0x38>)
 800b690:	4c0d      	ldr	r4, [pc, #52]	@ (800b6c8 <__libc_init_array+0x3c>)
 800b692:	1b64      	subs	r4, r4, r5
 800b694:	10a4      	asrs	r4, r4, #2
 800b696:	2600      	movs	r6, #0
 800b698:	42a6      	cmp	r6, r4
 800b69a:	d109      	bne.n	800b6b0 <__libc_init_array+0x24>
 800b69c:	4d0b      	ldr	r5, [pc, #44]	@ (800b6cc <__libc_init_array+0x40>)
 800b69e:	4c0c      	ldr	r4, [pc, #48]	@ (800b6d0 <__libc_init_array+0x44>)
 800b6a0:	f000 fdb0 	bl	800c204 <_init>
 800b6a4:	1b64      	subs	r4, r4, r5
 800b6a6:	10a4      	asrs	r4, r4, #2
 800b6a8:	2600      	movs	r6, #0
 800b6aa:	42a6      	cmp	r6, r4
 800b6ac:	d105      	bne.n	800b6ba <__libc_init_array+0x2e>
 800b6ae:	bd70      	pop	{r4, r5, r6, pc}
 800b6b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b4:	4798      	blx	r3
 800b6b6:	3601      	adds	r6, #1
 800b6b8:	e7ee      	b.n	800b698 <__libc_init_array+0xc>
 800b6ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6be:	4798      	blx	r3
 800b6c0:	3601      	adds	r6, #1
 800b6c2:	e7f2      	b.n	800b6aa <__libc_init_array+0x1e>
 800b6c4:	0800c684 	.word	0x0800c684
 800b6c8:	0800c684 	.word	0x0800c684
 800b6cc:	0800c684 	.word	0x0800c684
 800b6d0:	0800c688 	.word	0x0800c688

0800b6d4 <__retarget_lock_acquire_recursive>:
 800b6d4:	4770      	bx	lr

0800b6d6 <__retarget_lock_release_recursive>:
 800b6d6:	4770      	bx	lr

0800b6d8 <sqrtf>:
 800b6d8:	b508      	push	{r3, lr}
 800b6da:	ed2d 8b02 	vpush	{d8}
 800b6de:	eeb0 8a40 	vmov.f32	s16, s0
 800b6e2:	f000 f8a1 	bl	800b828 <__ieee754_sqrtf>
 800b6e6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ee:	d60c      	bvs.n	800b70a <sqrtf+0x32>
 800b6f0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b710 <sqrtf+0x38>
 800b6f4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fc:	d505      	bpl.n	800b70a <sqrtf+0x32>
 800b6fe:	f7ff ffbf 	bl	800b680 <__errno>
 800b702:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b706:	2321      	movs	r3, #33	@ 0x21
 800b708:	6003      	str	r3, [r0, #0]
 800b70a:	ecbd 8b02 	vpop	{d8}
 800b70e:	bd08      	pop	{r3, pc}
 800b710:	00000000 	.word	0x00000000

0800b714 <cosf>:
 800b714:	ee10 3a10 	vmov	r3, s0
 800b718:	b507      	push	{r0, r1, r2, lr}
 800b71a:	4a1e      	ldr	r2, [pc, #120]	@ (800b794 <cosf+0x80>)
 800b71c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b720:	4293      	cmp	r3, r2
 800b722:	d806      	bhi.n	800b732 <cosf+0x1e>
 800b724:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b798 <cosf+0x84>
 800b728:	b003      	add	sp, #12
 800b72a:	f85d eb04 	ldr.w	lr, [sp], #4
 800b72e:	f000 b87f 	b.w	800b830 <__kernel_cosf>
 800b732:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b736:	d304      	bcc.n	800b742 <cosf+0x2e>
 800b738:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b73c:	b003      	add	sp, #12
 800b73e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b742:	4668      	mov	r0, sp
 800b744:	f000 f914 	bl	800b970 <__ieee754_rem_pio2f>
 800b748:	f000 0003 	and.w	r0, r0, #3
 800b74c:	2801      	cmp	r0, #1
 800b74e:	d009      	beq.n	800b764 <cosf+0x50>
 800b750:	2802      	cmp	r0, #2
 800b752:	d010      	beq.n	800b776 <cosf+0x62>
 800b754:	b9b0      	cbnz	r0, 800b784 <cosf+0x70>
 800b756:	eddd 0a01 	vldr	s1, [sp, #4]
 800b75a:	ed9d 0a00 	vldr	s0, [sp]
 800b75e:	f000 f867 	bl	800b830 <__kernel_cosf>
 800b762:	e7eb      	b.n	800b73c <cosf+0x28>
 800b764:	eddd 0a01 	vldr	s1, [sp, #4]
 800b768:	ed9d 0a00 	vldr	s0, [sp]
 800b76c:	f000 f8b8 	bl	800b8e0 <__kernel_sinf>
 800b770:	eeb1 0a40 	vneg.f32	s0, s0
 800b774:	e7e2      	b.n	800b73c <cosf+0x28>
 800b776:	eddd 0a01 	vldr	s1, [sp, #4]
 800b77a:	ed9d 0a00 	vldr	s0, [sp]
 800b77e:	f000 f857 	bl	800b830 <__kernel_cosf>
 800b782:	e7f5      	b.n	800b770 <cosf+0x5c>
 800b784:	eddd 0a01 	vldr	s1, [sp, #4]
 800b788:	ed9d 0a00 	vldr	s0, [sp]
 800b78c:	2001      	movs	r0, #1
 800b78e:	f000 f8a7 	bl	800b8e0 <__kernel_sinf>
 800b792:	e7d3      	b.n	800b73c <cosf+0x28>
 800b794:	3f490fd8 	.word	0x3f490fd8
 800b798:	00000000 	.word	0x00000000

0800b79c <sinf>:
 800b79c:	ee10 3a10 	vmov	r3, s0
 800b7a0:	b507      	push	{r0, r1, r2, lr}
 800b7a2:	4a1f      	ldr	r2, [pc, #124]	@ (800b820 <sinf+0x84>)
 800b7a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d807      	bhi.n	800b7bc <sinf+0x20>
 800b7ac:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b824 <sinf+0x88>
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	b003      	add	sp, #12
 800b7b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7b8:	f000 b892 	b.w	800b8e0 <__kernel_sinf>
 800b7bc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b7c0:	d304      	bcc.n	800b7cc <sinf+0x30>
 800b7c2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b7c6:	b003      	add	sp, #12
 800b7c8:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7cc:	4668      	mov	r0, sp
 800b7ce:	f000 f8cf 	bl	800b970 <__ieee754_rem_pio2f>
 800b7d2:	f000 0003 	and.w	r0, r0, #3
 800b7d6:	2801      	cmp	r0, #1
 800b7d8:	d00a      	beq.n	800b7f0 <sinf+0x54>
 800b7da:	2802      	cmp	r0, #2
 800b7dc:	d00f      	beq.n	800b7fe <sinf+0x62>
 800b7de:	b9c0      	cbnz	r0, 800b812 <sinf+0x76>
 800b7e0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b7e4:	ed9d 0a00 	vldr	s0, [sp]
 800b7e8:	2001      	movs	r0, #1
 800b7ea:	f000 f879 	bl	800b8e0 <__kernel_sinf>
 800b7ee:	e7ea      	b.n	800b7c6 <sinf+0x2a>
 800b7f0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b7f4:	ed9d 0a00 	vldr	s0, [sp]
 800b7f8:	f000 f81a 	bl	800b830 <__kernel_cosf>
 800b7fc:	e7e3      	b.n	800b7c6 <sinf+0x2a>
 800b7fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800b802:	ed9d 0a00 	vldr	s0, [sp]
 800b806:	2001      	movs	r0, #1
 800b808:	f000 f86a 	bl	800b8e0 <__kernel_sinf>
 800b80c:	eeb1 0a40 	vneg.f32	s0, s0
 800b810:	e7d9      	b.n	800b7c6 <sinf+0x2a>
 800b812:	eddd 0a01 	vldr	s1, [sp, #4]
 800b816:	ed9d 0a00 	vldr	s0, [sp]
 800b81a:	f000 f809 	bl	800b830 <__kernel_cosf>
 800b81e:	e7f5      	b.n	800b80c <sinf+0x70>
 800b820:	3f490fd8 	.word	0x3f490fd8
 800b824:	00000000 	.word	0x00000000

0800b828 <__ieee754_sqrtf>:
 800b828:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b82c:	4770      	bx	lr
	...

0800b830 <__kernel_cosf>:
 800b830:	ee10 3a10 	vmov	r3, s0
 800b834:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b838:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b83c:	eef0 6a40 	vmov.f32	s13, s0
 800b840:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b844:	d204      	bcs.n	800b850 <__kernel_cosf+0x20>
 800b846:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b84a:	ee17 2a90 	vmov	r2, s15
 800b84e:	b342      	cbz	r2, 800b8a2 <__kernel_cosf+0x72>
 800b850:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b854:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800b8c0 <__kernel_cosf+0x90>
 800b858:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800b8c4 <__kernel_cosf+0x94>
 800b85c:	4a1a      	ldr	r2, [pc, #104]	@ (800b8c8 <__kernel_cosf+0x98>)
 800b85e:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b862:	4293      	cmp	r3, r2
 800b864:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b8cc <__kernel_cosf+0x9c>
 800b868:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b86c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800b8d0 <__kernel_cosf+0xa0>
 800b870:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b874:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800b8d4 <__kernel_cosf+0xa4>
 800b878:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b87c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800b8d8 <__kernel_cosf+0xa8>
 800b880:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b884:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800b888:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b88c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800b890:	eee7 0a06 	vfma.f32	s1, s14, s12
 800b894:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b898:	d804      	bhi.n	800b8a4 <__kernel_cosf+0x74>
 800b89a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b89e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b8a2:	4770      	bx	lr
 800b8a4:	4a0d      	ldr	r2, [pc, #52]	@ (800b8dc <__kernel_cosf+0xac>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	bf9a      	itte	ls
 800b8aa:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800b8ae:	ee07 3a10 	vmovls	s14, r3
 800b8b2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800b8b6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b8ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b8be:	e7ec      	b.n	800b89a <__kernel_cosf+0x6a>
 800b8c0:	ad47d74e 	.word	0xad47d74e
 800b8c4:	310f74f6 	.word	0x310f74f6
 800b8c8:	3e999999 	.word	0x3e999999
 800b8cc:	b493f27c 	.word	0xb493f27c
 800b8d0:	37d00d01 	.word	0x37d00d01
 800b8d4:	bab60b61 	.word	0xbab60b61
 800b8d8:	3d2aaaab 	.word	0x3d2aaaab
 800b8dc:	3f480000 	.word	0x3f480000

0800b8e0 <__kernel_sinf>:
 800b8e0:	ee10 3a10 	vmov	r3, s0
 800b8e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b8e8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b8ec:	d204      	bcs.n	800b8f8 <__kernel_sinf+0x18>
 800b8ee:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b8f2:	ee17 3a90 	vmov	r3, s15
 800b8f6:	b35b      	cbz	r3, 800b950 <__kernel_sinf+0x70>
 800b8f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b8fc:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800b954 <__kernel_sinf+0x74>
 800b900:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b958 <__kernel_sinf+0x78>
 800b904:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b908:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800b95c <__kernel_sinf+0x7c>
 800b90c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b910:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800b960 <__kernel_sinf+0x80>
 800b914:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b918:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800b964 <__kernel_sinf+0x84>
 800b91c:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b920:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b924:	b930      	cbnz	r0, 800b934 <__kernel_sinf+0x54>
 800b926:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800b968 <__kernel_sinf+0x88>
 800b92a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b92e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b932:	4770      	bx	lr
 800b934:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b938:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800b93c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b940:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b944:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800b96c <__kernel_sinf+0x8c>
 800b948:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b94c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	2f2ec9d3 	.word	0x2f2ec9d3
 800b958:	b2d72f34 	.word	0xb2d72f34
 800b95c:	3638ef1b 	.word	0x3638ef1b
 800b960:	b9500d01 	.word	0xb9500d01
 800b964:	3c088889 	.word	0x3c088889
 800b968:	be2aaaab 	.word	0xbe2aaaab
 800b96c:	3e2aaaab 	.word	0x3e2aaaab

0800b970 <__ieee754_rem_pio2f>:
 800b970:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b972:	ee10 6a10 	vmov	r6, s0
 800b976:	4b88      	ldr	r3, [pc, #544]	@ (800bb98 <__ieee754_rem_pio2f+0x228>)
 800b978:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800b97c:	429d      	cmp	r5, r3
 800b97e:	b087      	sub	sp, #28
 800b980:	4604      	mov	r4, r0
 800b982:	d805      	bhi.n	800b990 <__ieee754_rem_pio2f+0x20>
 800b984:	2300      	movs	r3, #0
 800b986:	ed80 0a00 	vstr	s0, [r0]
 800b98a:	6043      	str	r3, [r0, #4]
 800b98c:	2000      	movs	r0, #0
 800b98e:	e022      	b.n	800b9d6 <__ieee754_rem_pio2f+0x66>
 800b990:	4b82      	ldr	r3, [pc, #520]	@ (800bb9c <__ieee754_rem_pio2f+0x22c>)
 800b992:	429d      	cmp	r5, r3
 800b994:	d83a      	bhi.n	800ba0c <__ieee754_rem_pio2f+0x9c>
 800b996:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800b99a:	2e00      	cmp	r6, #0
 800b99c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800bba0 <__ieee754_rem_pio2f+0x230>
 800b9a0:	4a80      	ldr	r2, [pc, #512]	@ (800bba4 <__ieee754_rem_pio2f+0x234>)
 800b9a2:	f023 030f 	bic.w	r3, r3, #15
 800b9a6:	dd18      	ble.n	800b9da <__ieee754_rem_pio2f+0x6a>
 800b9a8:	4293      	cmp	r3, r2
 800b9aa:	ee70 7a47 	vsub.f32	s15, s0, s14
 800b9ae:	bf09      	itett	eq
 800b9b0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800bba8 <__ieee754_rem_pio2f+0x238>
 800b9b4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800bbac <__ieee754_rem_pio2f+0x23c>
 800b9b8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800bbb0 <__ieee754_rem_pio2f+0x240>
 800b9bc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800b9c0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800b9c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9c8:	ed80 7a00 	vstr	s14, [r0]
 800b9cc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b9d0:	edc0 7a01 	vstr	s15, [r0, #4]
 800b9d4:	2001      	movs	r0, #1
 800b9d6:	b007      	add	sp, #28
 800b9d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b9e0:	bf09      	itett	eq
 800b9e2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800bba8 <__ieee754_rem_pio2f+0x238>
 800b9e6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800bbac <__ieee754_rem_pio2f+0x23c>
 800b9ea:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800bbb0 <__ieee754_rem_pio2f+0x240>
 800b9ee:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800b9f2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b9f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9fa:	ed80 7a00 	vstr	s14, [r0]
 800b9fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba02:	edc0 7a01 	vstr	s15, [r0, #4]
 800ba06:	f04f 30ff 	mov.w	r0, #4294967295
 800ba0a:	e7e4      	b.n	800b9d6 <__ieee754_rem_pio2f+0x66>
 800ba0c:	4b69      	ldr	r3, [pc, #420]	@ (800bbb4 <__ieee754_rem_pio2f+0x244>)
 800ba0e:	429d      	cmp	r5, r3
 800ba10:	d873      	bhi.n	800bafa <__ieee754_rem_pio2f+0x18a>
 800ba12:	f000 f8dd 	bl	800bbd0 <fabsf>
 800ba16:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800bbb8 <__ieee754_rem_pio2f+0x248>
 800ba1a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ba1e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ba22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba2a:	ee17 0a90 	vmov	r0, s15
 800ba2e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bba0 <__ieee754_rem_pio2f+0x230>
 800ba32:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ba36:	281f      	cmp	r0, #31
 800ba38:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bbac <__ieee754_rem_pio2f+0x23c>
 800ba3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba40:	eeb1 6a47 	vneg.f32	s12, s14
 800ba44:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ba48:	ee16 1a90 	vmov	r1, s13
 800ba4c:	dc09      	bgt.n	800ba62 <__ieee754_rem_pio2f+0xf2>
 800ba4e:	4a5b      	ldr	r2, [pc, #364]	@ (800bbbc <__ieee754_rem_pio2f+0x24c>)
 800ba50:	1e47      	subs	r7, r0, #1
 800ba52:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ba56:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800ba5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ba5e:	4293      	cmp	r3, r2
 800ba60:	d107      	bne.n	800ba72 <__ieee754_rem_pio2f+0x102>
 800ba62:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800ba66:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800ba6a:	2a08      	cmp	r2, #8
 800ba6c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ba70:	dc14      	bgt.n	800ba9c <__ieee754_rem_pio2f+0x12c>
 800ba72:	6021      	str	r1, [r4, #0]
 800ba74:	ed94 7a00 	vldr	s14, [r4]
 800ba78:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ba7c:	2e00      	cmp	r6, #0
 800ba7e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba82:	ed84 0a01 	vstr	s0, [r4, #4]
 800ba86:	daa6      	bge.n	800b9d6 <__ieee754_rem_pio2f+0x66>
 800ba88:	eeb1 7a47 	vneg.f32	s14, s14
 800ba8c:	eeb1 0a40 	vneg.f32	s0, s0
 800ba90:	ed84 7a00 	vstr	s14, [r4]
 800ba94:	ed84 0a01 	vstr	s0, [r4, #4]
 800ba98:	4240      	negs	r0, r0
 800ba9a:	e79c      	b.n	800b9d6 <__ieee754_rem_pio2f+0x66>
 800ba9c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800bba8 <__ieee754_rem_pio2f+0x238>
 800baa0:	eef0 6a40 	vmov.f32	s13, s0
 800baa4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800baa8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800baac:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bab0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bbb0 <__ieee754_rem_pio2f+0x240>
 800bab4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bab8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800babc:	ee15 2a90 	vmov	r2, s11
 800bac0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bac4:	1a5b      	subs	r3, r3, r1
 800bac6:	2b19      	cmp	r3, #25
 800bac8:	dc04      	bgt.n	800bad4 <__ieee754_rem_pio2f+0x164>
 800baca:	edc4 5a00 	vstr	s11, [r4]
 800bace:	eeb0 0a66 	vmov.f32	s0, s13
 800bad2:	e7cf      	b.n	800ba74 <__ieee754_rem_pio2f+0x104>
 800bad4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800bbc0 <__ieee754_rem_pio2f+0x250>
 800bad8:	eeb0 0a66 	vmov.f32	s0, s13
 800badc:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bae0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bae4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800bbc4 <__ieee754_rem_pio2f+0x254>
 800bae8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800baec:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800baf0:	ee30 7a67 	vsub.f32	s14, s0, s15
 800baf4:	ed84 7a00 	vstr	s14, [r4]
 800baf8:	e7bc      	b.n	800ba74 <__ieee754_rem_pio2f+0x104>
 800bafa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bafe:	d306      	bcc.n	800bb0e <__ieee754_rem_pio2f+0x19e>
 800bb00:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bb04:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb08:	edc0 7a00 	vstr	s15, [r0]
 800bb0c:	e73e      	b.n	800b98c <__ieee754_rem_pio2f+0x1c>
 800bb0e:	15ea      	asrs	r2, r5, #23
 800bb10:	3a86      	subs	r2, #134	@ 0x86
 800bb12:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bb16:	ee07 3a90 	vmov	s15, r3
 800bb1a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bb1e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bbc8 <__ieee754_rem_pio2f+0x258>
 800bb22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb2a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bb2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bb36:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bb3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb3e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bb42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bb46:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb4e:	edcd 7a05 	vstr	s15, [sp, #20]
 800bb52:	d11e      	bne.n	800bb92 <__ieee754_rem_pio2f+0x222>
 800bb54:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb5c:	bf0c      	ite	eq
 800bb5e:	2301      	moveq	r3, #1
 800bb60:	2302      	movne	r3, #2
 800bb62:	491a      	ldr	r1, [pc, #104]	@ (800bbcc <__ieee754_rem_pio2f+0x25c>)
 800bb64:	9101      	str	r1, [sp, #4]
 800bb66:	2102      	movs	r1, #2
 800bb68:	9100      	str	r1, [sp, #0]
 800bb6a:	a803      	add	r0, sp, #12
 800bb6c:	4621      	mov	r1, r4
 800bb6e:	f000 f89d 	bl	800bcac <__kernel_rem_pio2f>
 800bb72:	2e00      	cmp	r6, #0
 800bb74:	f6bf af2f 	bge.w	800b9d6 <__ieee754_rem_pio2f+0x66>
 800bb78:	edd4 7a00 	vldr	s15, [r4]
 800bb7c:	eef1 7a67 	vneg.f32	s15, s15
 800bb80:	edc4 7a00 	vstr	s15, [r4]
 800bb84:	edd4 7a01 	vldr	s15, [r4, #4]
 800bb88:	eef1 7a67 	vneg.f32	s15, s15
 800bb8c:	edc4 7a01 	vstr	s15, [r4, #4]
 800bb90:	e782      	b.n	800ba98 <__ieee754_rem_pio2f+0x128>
 800bb92:	2303      	movs	r3, #3
 800bb94:	e7e5      	b.n	800bb62 <__ieee754_rem_pio2f+0x1f2>
 800bb96:	bf00      	nop
 800bb98:	3f490fd8 	.word	0x3f490fd8
 800bb9c:	4016cbe3 	.word	0x4016cbe3
 800bba0:	3fc90f80 	.word	0x3fc90f80
 800bba4:	3fc90fd0 	.word	0x3fc90fd0
 800bba8:	37354400 	.word	0x37354400
 800bbac:	37354443 	.word	0x37354443
 800bbb0:	2e85a308 	.word	0x2e85a308
 800bbb4:	43490f80 	.word	0x43490f80
 800bbb8:	3f22f984 	.word	0x3f22f984
 800bbbc:	0800c2ac 	.word	0x0800c2ac
 800bbc0:	2e85a300 	.word	0x2e85a300
 800bbc4:	248d3132 	.word	0x248d3132
 800bbc8:	43800000 	.word	0x43800000
 800bbcc:	0800c32c 	.word	0x0800c32c

0800bbd0 <fabsf>:
 800bbd0:	ee10 3a10 	vmov	r3, s0
 800bbd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bbd8:	ee00 3a10 	vmov	s0, r3
 800bbdc:	4770      	bx	lr
	...

0800bbe0 <scalbnf>:
 800bbe0:	ee10 3a10 	vmov	r3, s0
 800bbe4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bbe8:	d02b      	beq.n	800bc42 <scalbnf+0x62>
 800bbea:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800bbee:	d302      	bcc.n	800bbf6 <scalbnf+0x16>
 800bbf0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bbf4:	4770      	bx	lr
 800bbf6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800bbfa:	d123      	bne.n	800bc44 <scalbnf+0x64>
 800bbfc:	4b24      	ldr	r3, [pc, #144]	@ (800bc90 <scalbnf+0xb0>)
 800bbfe:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800bc94 <scalbnf+0xb4>
 800bc02:	4298      	cmp	r0, r3
 800bc04:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bc08:	db17      	blt.n	800bc3a <scalbnf+0x5a>
 800bc0a:	ee10 3a10 	vmov	r3, s0
 800bc0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bc12:	3a19      	subs	r2, #25
 800bc14:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800bc18:	4288      	cmp	r0, r1
 800bc1a:	dd15      	ble.n	800bc48 <scalbnf+0x68>
 800bc1c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800bc98 <scalbnf+0xb8>
 800bc20:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800bc9c <scalbnf+0xbc>
 800bc24:	ee10 3a10 	vmov	r3, s0
 800bc28:	eeb0 7a67 	vmov.f32	s14, s15
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	bfb8      	it	lt
 800bc30:	eef0 7a66 	vmovlt.f32	s15, s13
 800bc34:	ee27 0a87 	vmul.f32	s0, s15, s14
 800bc38:	4770      	bx	lr
 800bc3a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bca0 <scalbnf+0xc0>
 800bc3e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bc42:	4770      	bx	lr
 800bc44:	0dd2      	lsrs	r2, r2, #23
 800bc46:	e7e5      	b.n	800bc14 <scalbnf+0x34>
 800bc48:	4410      	add	r0, r2
 800bc4a:	28fe      	cmp	r0, #254	@ 0xfe
 800bc4c:	dce6      	bgt.n	800bc1c <scalbnf+0x3c>
 800bc4e:	2800      	cmp	r0, #0
 800bc50:	dd06      	ble.n	800bc60 <scalbnf+0x80>
 800bc52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bc56:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bc5a:	ee00 3a10 	vmov	s0, r3
 800bc5e:	4770      	bx	lr
 800bc60:	f110 0f16 	cmn.w	r0, #22
 800bc64:	da09      	bge.n	800bc7a <scalbnf+0x9a>
 800bc66:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800bca0 <scalbnf+0xc0>
 800bc6a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800bca4 <scalbnf+0xc4>
 800bc6e:	ee10 3a10 	vmov	r3, s0
 800bc72:	eeb0 7a67 	vmov.f32	s14, s15
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	e7d9      	b.n	800bc2e <scalbnf+0x4e>
 800bc7a:	3019      	adds	r0, #25
 800bc7c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bc80:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800bc84:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800bca8 <scalbnf+0xc8>
 800bc88:	ee07 3a90 	vmov	s15, r3
 800bc8c:	e7d7      	b.n	800bc3e <scalbnf+0x5e>
 800bc8e:	bf00      	nop
 800bc90:	ffff3cb0 	.word	0xffff3cb0
 800bc94:	4c000000 	.word	0x4c000000
 800bc98:	7149f2ca 	.word	0x7149f2ca
 800bc9c:	f149f2ca 	.word	0xf149f2ca
 800bca0:	0da24260 	.word	0x0da24260
 800bca4:	8da24260 	.word	0x8da24260
 800bca8:	33000000 	.word	0x33000000

0800bcac <__kernel_rem_pio2f>:
 800bcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb0:	ed2d 8b04 	vpush	{d8-d9}
 800bcb4:	b0d9      	sub	sp, #356	@ 0x164
 800bcb6:	4690      	mov	r8, r2
 800bcb8:	9001      	str	r0, [sp, #4]
 800bcba:	4ab6      	ldr	r2, [pc, #728]	@ (800bf94 <__kernel_rem_pio2f+0x2e8>)
 800bcbc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800bcbe:	f118 0f04 	cmn.w	r8, #4
 800bcc2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800bcc6:	460f      	mov	r7, r1
 800bcc8:	f103 3bff 	add.w	fp, r3, #4294967295
 800bccc:	db26      	blt.n	800bd1c <__kernel_rem_pio2f+0x70>
 800bcce:	f1b8 0203 	subs.w	r2, r8, #3
 800bcd2:	bf48      	it	mi
 800bcd4:	f108 0204 	addmi.w	r2, r8, #4
 800bcd8:	10d2      	asrs	r2, r2, #3
 800bcda:	1c55      	adds	r5, r2, #1
 800bcdc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bcde:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800bfa4 <__kernel_rem_pio2f+0x2f8>
 800bce2:	00e8      	lsls	r0, r5, #3
 800bce4:	eba2 060b 	sub.w	r6, r2, fp
 800bce8:	9002      	str	r0, [sp, #8]
 800bcea:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800bcee:	eb0a 0c0b 	add.w	ip, sl, fp
 800bcf2:	ac1c      	add	r4, sp, #112	@ 0x70
 800bcf4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800bcf8:	2000      	movs	r0, #0
 800bcfa:	4560      	cmp	r0, ip
 800bcfc:	dd10      	ble.n	800bd20 <__kernel_rem_pio2f+0x74>
 800bcfe:	a91c      	add	r1, sp, #112	@ 0x70
 800bd00:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bd04:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800bd08:	2600      	movs	r6, #0
 800bd0a:	4556      	cmp	r6, sl
 800bd0c:	dc24      	bgt.n	800bd58 <__kernel_rem_pio2f+0xac>
 800bd0e:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bd12:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800bfa4 <__kernel_rem_pio2f+0x2f8>
 800bd16:	4684      	mov	ip, r0
 800bd18:	2400      	movs	r4, #0
 800bd1a:	e016      	b.n	800bd4a <__kernel_rem_pio2f+0x9e>
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	e7dc      	b.n	800bcda <__kernel_rem_pio2f+0x2e>
 800bd20:	42c6      	cmn	r6, r0
 800bd22:	bf5d      	ittte	pl
 800bd24:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800bd28:	ee07 1a90 	vmovpl	s15, r1
 800bd2c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800bd30:	eef0 7a47 	vmovmi.f32	s15, s14
 800bd34:	ece4 7a01 	vstmia	r4!, {s15}
 800bd38:	3001      	adds	r0, #1
 800bd3a:	e7de      	b.n	800bcfa <__kernel_rem_pio2f+0x4e>
 800bd3c:	ecfe 6a01 	vldmia	lr!, {s13}
 800bd40:	ed3c 7a01 	vldmdb	ip!, {s14}
 800bd44:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bd48:	3401      	adds	r4, #1
 800bd4a:	455c      	cmp	r4, fp
 800bd4c:	ddf6      	ble.n	800bd3c <__kernel_rem_pio2f+0x90>
 800bd4e:	ece9 7a01 	vstmia	r9!, {s15}
 800bd52:	3601      	adds	r6, #1
 800bd54:	3004      	adds	r0, #4
 800bd56:	e7d8      	b.n	800bd0a <__kernel_rem_pio2f+0x5e>
 800bd58:	a908      	add	r1, sp, #32
 800bd5a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bd5e:	9104      	str	r1, [sp, #16]
 800bd60:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bd62:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800bfa0 <__kernel_rem_pio2f+0x2f4>
 800bd66:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800bf9c <__kernel_rem_pio2f+0x2f0>
 800bd6a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800bd6e:	9203      	str	r2, [sp, #12]
 800bd70:	4654      	mov	r4, sl
 800bd72:	00a2      	lsls	r2, r4, #2
 800bd74:	9205      	str	r2, [sp, #20]
 800bd76:	aa58      	add	r2, sp, #352	@ 0x160
 800bd78:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800bd7c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800bd80:	a944      	add	r1, sp, #272	@ 0x110
 800bd82:	aa08      	add	r2, sp, #32
 800bd84:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800bd88:	4694      	mov	ip, r2
 800bd8a:	4626      	mov	r6, r4
 800bd8c:	2e00      	cmp	r6, #0
 800bd8e:	dc4c      	bgt.n	800be2a <__kernel_rem_pio2f+0x17e>
 800bd90:	4628      	mov	r0, r5
 800bd92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd96:	f7ff ff23 	bl	800bbe0 <scalbnf>
 800bd9a:	eeb0 8a40 	vmov.f32	s16, s0
 800bd9e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800bda2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800bda6:	f000 f9e9 	bl	800c17c <floorf>
 800bdaa:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800bdae:	eea0 8a67 	vfms.f32	s16, s0, s15
 800bdb2:	2d00      	cmp	r5, #0
 800bdb4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdb8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bdbc:	ee17 9a90 	vmov	r9, s15
 800bdc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdc4:	ee38 8a67 	vsub.f32	s16, s16, s15
 800bdc8:	dd41      	ble.n	800be4e <__kernel_rem_pio2f+0x1a2>
 800bdca:	f104 3cff 	add.w	ip, r4, #4294967295
 800bdce:	a908      	add	r1, sp, #32
 800bdd0:	f1c5 0e08 	rsb	lr, r5, #8
 800bdd4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800bdd8:	fa46 f00e 	asr.w	r0, r6, lr
 800bddc:	4481      	add	r9, r0
 800bdde:	fa00 f00e 	lsl.w	r0, r0, lr
 800bde2:	1a36      	subs	r6, r6, r0
 800bde4:	f1c5 0007 	rsb	r0, r5, #7
 800bde8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800bdec:	4106      	asrs	r6, r0
 800bdee:	2e00      	cmp	r6, #0
 800bdf0:	dd3c      	ble.n	800be6c <__kernel_rem_pio2f+0x1c0>
 800bdf2:	f04f 0e00 	mov.w	lr, #0
 800bdf6:	f109 0901 	add.w	r9, r9, #1
 800bdfa:	4670      	mov	r0, lr
 800bdfc:	4574      	cmp	r4, lr
 800bdfe:	dc68      	bgt.n	800bed2 <__kernel_rem_pio2f+0x226>
 800be00:	2d00      	cmp	r5, #0
 800be02:	dd03      	ble.n	800be0c <__kernel_rem_pio2f+0x160>
 800be04:	2d01      	cmp	r5, #1
 800be06:	d074      	beq.n	800bef2 <__kernel_rem_pio2f+0x246>
 800be08:	2d02      	cmp	r5, #2
 800be0a:	d07d      	beq.n	800bf08 <__kernel_rem_pio2f+0x25c>
 800be0c:	2e02      	cmp	r6, #2
 800be0e:	d12d      	bne.n	800be6c <__kernel_rem_pio2f+0x1c0>
 800be10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800be14:	ee30 8a48 	vsub.f32	s16, s0, s16
 800be18:	b340      	cbz	r0, 800be6c <__kernel_rem_pio2f+0x1c0>
 800be1a:	4628      	mov	r0, r5
 800be1c:	9306      	str	r3, [sp, #24]
 800be1e:	f7ff fedf 	bl	800bbe0 <scalbnf>
 800be22:	9b06      	ldr	r3, [sp, #24]
 800be24:	ee38 8a40 	vsub.f32	s16, s16, s0
 800be28:	e020      	b.n	800be6c <__kernel_rem_pio2f+0x1c0>
 800be2a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800be2e:	3e01      	subs	r6, #1
 800be30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be38:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800be3c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800be40:	ecac 0a01 	vstmia	ip!, {s0}
 800be44:	ed30 0a01 	vldmdb	r0!, {s0}
 800be48:	ee37 0a80 	vadd.f32	s0, s15, s0
 800be4c:	e79e      	b.n	800bd8c <__kernel_rem_pio2f+0xe0>
 800be4e:	d105      	bne.n	800be5c <__kernel_rem_pio2f+0x1b0>
 800be50:	1e60      	subs	r0, r4, #1
 800be52:	a908      	add	r1, sp, #32
 800be54:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800be58:	11f6      	asrs	r6, r6, #7
 800be5a:	e7c8      	b.n	800bdee <__kernel_rem_pio2f+0x142>
 800be5c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800be60:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800be64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be68:	da31      	bge.n	800bece <__kernel_rem_pio2f+0x222>
 800be6a:	2600      	movs	r6, #0
 800be6c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800be70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be74:	f040 8098 	bne.w	800bfa8 <__kernel_rem_pio2f+0x2fc>
 800be78:	1e60      	subs	r0, r4, #1
 800be7a:	2200      	movs	r2, #0
 800be7c:	4550      	cmp	r0, sl
 800be7e:	da4b      	bge.n	800bf18 <__kernel_rem_pio2f+0x26c>
 800be80:	2a00      	cmp	r2, #0
 800be82:	d065      	beq.n	800bf50 <__kernel_rem_pio2f+0x2a4>
 800be84:	3c01      	subs	r4, #1
 800be86:	ab08      	add	r3, sp, #32
 800be88:	3d08      	subs	r5, #8
 800be8a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d0f8      	beq.n	800be84 <__kernel_rem_pio2f+0x1d8>
 800be92:	4628      	mov	r0, r5
 800be94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800be98:	f7ff fea2 	bl	800bbe0 <scalbnf>
 800be9c:	1c63      	adds	r3, r4, #1
 800be9e:	aa44      	add	r2, sp, #272	@ 0x110
 800bea0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800bfa0 <__kernel_rem_pio2f+0x2f4>
 800bea4:	0099      	lsls	r1, r3, #2
 800bea6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800beaa:	4623      	mov	r3, r4
 800beac:	2b00      	cmp	r3, #0
 800beae:	f280 80a9 	bge.w	800c004 <__kernel_rem_pio2f+0x358>
 800beb2:	4623      	mov	r3, r4
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f2c0 80c7 	blt.w	800c048 <__kernel_rem_pio2f+0x39c>
 800beba:	aa44      	add	r2, sp, #272	@ 0x110
 800bebc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bec0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800bf98 <__kernel_rem_pio2f+0x2ec>
 800bec4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800bfa4 <__kernel_rem_pio2f+0x2f8>
 800bec8:	2000      	movs	r0, #0
 800beca:	1ae2      	subs	r2, r4, r3
 800becc:	e0b1      	b.n	800c032 <__kernel_rem_pio2f+0x386>
 800bece:	2602      	movs	r6, #2
 800bed0:	e78f      	b.n	800bdf2 <__kernel_rem_pio2f+0x146>
 800bed2:	f852 1b04 	ldr.w	r1, [r2], #4
 800bed6:	b948      	cbnz	r0, 800beec <__kernel_rem_pio2f+0x240>
 800bed8:	b121      	cbz	r1, 800bee4 <__kernel_rem_pio2f+0x238>
 800beda:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800bede:	f842 1c04 	str.w	r1, [r2, #-4]
 800bee2:	2101      	movs	r1, #1
 800bee4:	f10e 0e01 	add.w	lr, lr, #1
 800bee8:	4608      	mov	r0, r1
 800beea:	e787      	b.n	800bdfc <__kernel_rem_pio2f+0x150>
 800beec:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800bef0:	e7f5      	b.n	800bede <__kernel_rem_pio2f+0x232>
 800bef2:	f104 3cff 	add.w	ip, r4, #4294967295
 800bef6:	aa08      	add	r2, sp, #32
 800bef8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800befc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bf00:	a908      	add	r1, sp, #32
 800bf02:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bf06:	e781      	b.n	800be0c <__kernel_rem_pio2f+0x160>
 800bf08:	f104 3cff 	add.w	ip, r4, #4294967295
 800bf0c:	aa08      	add	r2, sp, #32
 800bf0e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bf12:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800bf16:	e7f3      	b.n	800bf00 <__kernel_rem_pio2f+0x254>
 800bf18:	a908      	add	r1, sp, #32
 800bf1a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800bf1e:	3801      	subs	r0, #1
 800bf20:	430a      	orrs	r2, r1
 800bf22:	e7ab      	b.n	800be7c <__kernel_rem_pio2f+0x1d0>
 800bf24:	3201      	adds	r2, #1
 800bf26:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800bf2a:	2e00      	cmp	r6, #0
 800bf2c:	d0fa      	beq.n	800bf24 <__kernel_rem_pio2f+0x278>
 800bf2e:	9905      	ldr	r1, [sp, #20]
 800bf30:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800bf34:	eb0d 0001 	add.w	r0, sp, r1
 800bf38:	18e6      	adds	r6, r4, r3
 800bf3a:	a91c      	add	r1, sp, #112	@ 0x70
 800bf3c:	f104 0c01 	add.w	ip, r4, #1
 800bf40:	384c      	subs	r0, #76	@ 0x4c
 800bf42:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800bf46:	4422      	add	r2, r4
 800bf48:	4562      	cmp	r2, ip
 800bf4a:	da04      	bge.n	800bf56 <__kernel_rem_pio2f+0x2aa>
 800bf4c:	4614      	mov	r4, r2
 800bf4e:	e710      	b.n	800bd72 <__kernel_rem_pio2f+0xc6>
 800bf50:	9804      	ldr	r0, [sp, #16]
 800bf52:	2201      	movs	r2, #1
 800bf54:	e7e7      	b.n	800bf26 <__kernel_rem_pio2f+0x27a>
 800bf56:	9903      	ldr	r1, [sp, #12]
 800bf58:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bf5c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800bf60:	9105      	str	r1, [sp, #20]
 800bf62:	ee07 1a90 	vmov	s15, r1
 800bf66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf6a:	2400      	movs	r4, #0
 800bf6c:	ece6 7a01 	vstmia	r6!, {s15}
 800bf70:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800bfa4 <__kernel_rem_pio2f+0x2f8>
 800bf74:	46b1      	mov	r9, r6
 800bf76:	455c      	cmp	r4, fp
 800bf78:	dd04      	ble.n	800bf84 <__kernel_rem_pio2f+0x2d8>
 800bf7a:	ece0 7a01 	vstmia	r0!, {s15}
 800bf7e:	f10c 0c01 	add.w	ip, ip, #1
 800bf82:	e7e1      	b.n	800bf48 <__kernel_rem_pio2f+0x29c>
 800bf84:	ecfe 6a01 	vldmia	lr!, {s13}
 800bf88:	ed39 7a01 	vldmdb	r9!, {s14}
 800bf8c:	3401      	adds	r4, #1
 800bf8e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bf92:	e7f0      	b.n	800bf76 <__kernel_rem_pio2f+0x2ca>
 800bf94:	0800c670 	.word	0x0800c670
 800bf98:	0800c644 	.word	0x0800c644
 800bf9c:	43800000 	.word	0x43800000
 800bfa0:	3b800000 	.word	0x3b800000
 800bfa4:	00000000 	.word	0x00000000
 800bfa8:	9b02      	ldr	r3, [sp, #8]
 800bfaa:	eeb0 0a48 	vmov.f32	s0, s16
 800bfae:	eba3 0008 	sub.w	r0, r3, r8
 800bfb2:	f7ff fe15 	bl	800bbe0 <scalbnf>
 800bfb6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800bf9c <__kernel_rem_pio2f+0x2f0>
 800bfba:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfc2:	db19      	blt.n	800bff8 <__kernel_rem_pio2f+0x34c>
 800bfc4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800bfa0 <__kernel_rem_pio2f+0x2f4>
 800bfc8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bfcc:	aa08      	add	r2, sp, #32
 800bfce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfd2:	3508      	adds	r5, #8
 800bfd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bfd8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bfdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bfe0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bfe4:	ee10 3a10 	vmov	r3, s0
 800bfe8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bfec:	ee17 3a90 	vmov	r3, s15
 800bff0:	3401      	adds	r4, #1
 800bff2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bff6:	e74c      	b.n	800be92 <__kernel_rem_pio2f+0x1e6>
 800bff8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bffc:	aa08      	add	r2, sp, #32
 800bffe:	ee10 3a10 	vmov	r3, s0
 800c002:	e7f6      	b.n	800bff2 <__kernel_rem_pio2f+0x346>
 800c004:	a808      	add	r0, sp, #32
 800c006:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c00a:	9001      	str	r0, [sp, #4]
 800c00c:	ee07 0a90 	vmov	s15, r0
 800c010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c014:	3b01      	subs	r3, #1
 800c016:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c01a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c01e:	ed62 7a01 	vstmdb	r2!, {s15}
 800c022:	e743      	b.n	800beac <__kernel_rem_pio2f+0x200>
 800c024:	ecfc 6a01 	vldmia	ip!, {s13}
 800c028:	ecb5 7a01 	vldmia	r5!, {s14}
 800c02c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c030:	3001      	adds	r0, #1
 800c032:	4550      	cmp	r0, sl
 800c034:	dc01      	bgt.n	800c03a <__kernel_rem_pio2f+0x38e>
 800c036:	4290      	cmp	r0, r2
 800c038:	ddf4      	ble.n	800c024 <__kernel_rem_pio2f+0x378>
 800c03a:	a858      	add	r0, sp, #352	@ 0x160
 800c03c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c040:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c044:	3b01      	subs	r3, #1
 800c046:	e735      	b.n	800beb4 <__kernel_rem_pio2f+0x208>
 800c048:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	dc09      	bgt.n	800c062 <__kernel_rem_pio2f+0x3b6>
 800c04e:	2b00      	cmp	r3, #0
 800c050:	dc27      	bgt.n	800c0a2 <__kernel_rem_pio2f+0x3f6>
 800c052:	d040      	beq.n	800c0d6 <__kernel_rem_pio2f+0x42a>
 800c054:	f009 0007 	and.w	r0, r9, #7
 800c058:	b059      	add	sp, #356	@ 0x164
 800c05a:	ecbd 8b04 	vpop	{d8-d9}
 800c05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c062:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c064:	2b03      	cmp	r3, #3
 800c066:	d1f5      	bne.n	800c054 <__kernel_rem_pio2f+0x3a8>
 800c068:	aa30      	add	r2, sp, #192	@ 0xc0
 800c06a:	1f0b      	subs	r3, r1, #4
 800c06c:	4413      	add	r3, r2
 800c06e:	461a      	mov	r2, r3
 800c070:	4620      	mov	r0, r4
 800c072:	2800      	cmp	r0, #0
 800c074:	dc50      	bgt.n	800c118 <__kernel_rem_pio2f+0x46c>
 800c076:	4622      	mov	r2, r4
 800c078:	2a01      	cmp	r2, #1
 800c07a:	dc5d      	bgt.n	800c138 <__kernel_rem_pio2f+0x48c>
 800c07c:	ab30      	add	r3, sp, #192	@ 0xc0
 800c07e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800bfa4 <__kernel_rem_pio2f+0x2f8>
 800c082:	440b      	add	r3, r1
 800c084:	2c01      	cmp	r4, #1
 800c086:	dc67      	bgt.n	800c158 <__kernel_rem_pio2f+0x4ac>
 800c088:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c08c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c090:	2e00      	cmp	r6, #0
 800c092:	d167      	bne.n	800c164 <__kernel_rem_pio2f+0x4b8>
 800c094:	edc7 6a00 	vstr	s13, [r7]
 800c098:	ed87 7a01 	vstr	s14, [r7, #4]
 800c09c:	edc7 7a02 	vstr	s15, [r7, #8]
 800c0a0:	e7d8      	b.n	800c054 <__kernel_rem_pio2f+0x3a8>
 800c0a2:	ab30      	add	r3, sp, #192	@ 0xc0
 800c0a4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800bfa4 <__kernel_rem_pio2f+0x2f8>
 800c0a8:	440b      	add	r3, r1
 800c0aa:	4622      	mov	r2, r4
 800c0ac:	2a00      	cmp	r2, #0
 800c0ae:	da24      	bge.n	800c0fa <__kernel_rem_pio2f+0x44e>
 800c0b0:	b34e      	cbz	r6, 800c106 <__kernel_rem_pio2f+0x45a>
 800c0b2:	eef1 7a47 	vneg.f32	s15, s14
 800c0b6:	edc7 7a00 	vstr	s15, [r7]
 800c0ba:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c0be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c0c2:	aa31      	add	r2, sp, #196	@ 0xc4
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	429c      	cmp	r4, r3
 800c0c8:	da20      	bge.n	800c10c <__kernel_rem_pio2f+0x460>
 800c0ca:	b10e      	cbz	r6, 800c0d0 <__kernel_rem_pio2f+0x424>
 800c0cc:	eef1 7a67 	vneg.f32	s15, s15
 800c0d0:	edc7 7a01 	vstr	s15, [r7, #4]
 800c0d4:	e7be      	b.n	800c054 <__kernel_rem_pio2f+0x3a8>
 800c0d6:	ab30      	add	r3, sp, #192	@ 0xc0
 800c0d8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800bfa4 <__kernel_rem_pio2f+0x2f8>
 800c0dc:	440b      	add	r3, r1
 800c0de:	2c00      	cmp	r4, #0
 800c0e0:	da05      	bge.n	800c0ee <__kernel_rem_pio2f+0x442>
 800c0e2:	b10e      	cbz	r6, 800c0e8 <__kernel_rem_pio2f+0x43c>
 800c0e4:	eef1 7a67 	vneg.f32	s15, s15
 800c0e8:	edc7 7a00 	vstr	s15, [r7]
 800c0ec:	e7b2      	b.n	800c054 <__kernel_rem_pio2f+0x3a8>
 800c0ee:	ed33 7a01 	vldmdb	r3!, {s14}
 800c0f2:	3c01      	subs	r4, #1
 800c0f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c0f8:	e7f1      	b.n	800c0de <__kernel_rem_pio2f+0x432>
 800c0fa:	ed73 7a01 	vldmdb	r3!, {s15}
 800c0fe:	3a01      	subs	r2, #1
 800c100:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c104:	e7d2      	b.n	800c0ac <__kernel_rem_pio2f+0x400>
 800c106:	eef0 7a47 	vmov.f32	s15, s14
 800c10a:	e7d4      	b.n	800c0b6 <__kernel_rem_pio2f+0x40a>
 800c10c:	ecb2 7a01 	vldmia	r2!, {s14}
 800c110:	3301      	adds	r3, #1
 800c112:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c116:	e7d6      	b.n	800c0c6 <__kernel_rem_pio2f+0x41a>
 800c118:	ed72 7a01 	vldmdb	r2!, {s15}
 800c11c:	edd2 6a01 	vldr	s13, [r2, #4]
 800c120:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c124:	3801      	subs	r0, #1
 800c126:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c12a:	ed82 7a00 	vstr	s14, [r2]
 800c12e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c132:	edc2 7a01 	vstr	s15, [r2, #4]
 800c136:	e79c      	b.n	800c072 <__kernel_rem_pio2f+0x3c6>
 800c138:	ed73 7a01 	vldmdb	r3!, {s15}
 800c13c:	edd3 6a01 	vldr	s13, [r3, #4]
 800c140:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c144:	3a01      	subs	r2, #1
 800c146:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c14a:	ed83 7a00 	vstr	s14, [r3]
 800c14e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c152:	edc3 7a01 	vstr	s15, [r3, #4]
 800c156:	e78f      	b.n	800c078 <__kernel_rem_pio2f+0x3cc>
 800c158:	ed33 7a01 	vldmdb	r3!, {s14}
 800c15c:	3c01      	subs	r4, #1
 800c15e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c162:	e78f      	b.n	800c084 <__kernel_rem_pio2f+0x3d8>
 800c164:	eef1 6a66 	vneg.f32	s13, s13
 800c168:	eeb1 7a47 	vneg.f32	s14, s14
 800c16c:	edc7 6a00 	vstr	s13, [r7]
 800c170:	ed87 7a01 	vstr	s14, [r7, #4]
 800c174:	eef1 7a67 	vneg.f32	s15, s15
 800c178:	e790      	b.n	800c09c <__kernel_rem_pio2f+0x3f0>
 800c17a:	bf00      	nop

0800c17c <floorf>:
 800c17c:	ee10 3a10 	vmov	r3, s0
 800c180:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c184:	3a7f      	subs	r2, #127	@ 0x7f
 800c186:	2a16      	cmp	r2, #22
 800c188:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c18c:	dc2b      	bgt.n	800c1e6 <floorf+0x6a>
 800c18e:	2a00      	cmp	r2, #0
 800c190:	da12      	bge.n	800c1b8 <floorf+0x3c>
 800c192:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c1f8 <floorf+0x7c>
 800c196:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c19a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c19e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1a2:	dd06      	ble.n	800c1b2 <floorf+0x36>
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	da24      	bge.n	800c1f2 <floorf+0x76>
 800c1a8:	2900      	cmp	r1, #0
 800c1aa:	4b14      	ldr	r3, [pc, #80]	@ (800c1fc <floorf+0x80>)
 800c1ac:	bf08      	it	eq
 800c1ae:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c1b2:	ee00 3a10 	vmov	s0, r3
 800c1b6:	4770      	bx	lr
 800c1b8:	4911      	ldr	r1, [pc, #68]	@ (800c200 <floorf+0x84>)
 800c1ba:	4111      	asrs	r1, r2
 800c1bc:	420b      	tst	r3, r1
 800c1be:	d0fa      	beq.n	800c1b6 <floorf+0x3a>
 800c1c0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c1f8 <floorf+0x7c>
 800c1c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c1c8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c1cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1d0:	ddef      	ble.n	800c1b2 <floorf+0x36>
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	bfbe      	ittt	lt
 800c1d6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c1da:	fa40 f202 	asrlt.w	r2, r0, r2
 800c1de:	189b      	addlt	r3, r3, r2
 800c1e0:	ea23 0301 	bic.w	r3, r3, r1
 800c1e4:	e7e5      	b.n	800c1b2 <floorf+0x36>
 800c1e6:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c1ea:	d3e4      	bcc.n	800c1b6 <floorf+0x3a>
 800c1ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c1f0:	4770      	bx	lr
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	e7dd      	b.n	800c1b2 <floorf+0x36>
 800c1f6:	bf00      	nop
 800c1f8:	7149f2ca 	.word	0x7149f2ca
 800c1fc:	bf800000 	.word	0xbf800000
 800c200:	007fffff 	.word	0x007fffff

0800c204 <_init>:
 800c204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c206:	bf00      	nop
 800c208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c20a:	bc08      	pop	{r3}
 800c20c:	469e      	mov	lr, r3
 800c20e:	4770      	bx	lr

0800c210 <_fini>:
 800c210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c212:	bf00      	nop
 800c214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c216:	bc08      	pop	{r3}
 800c218:	469e      	mov	lr, r3
 800c21a:	4770      	bx	lr
