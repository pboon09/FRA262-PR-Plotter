
verticle_plotter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fe70  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000648  08010048  08010048  00011048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010690  08010690  00012190  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010690  08010690  00011690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010698  08010698  00012190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010698  08010698  00011698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801069c  0801069c  0001169c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000190  20000000  080106a0  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020ac  20000190  08010830  00012190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000223c  08010830  0001223c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b5fe  00000000  00000000  000121c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000552a  00000000  00000000  0003d7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  00042ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001604  00000000  00000000  00044950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002db54  00000000  00000000  00045f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002abd3  00000000  00000000  00073aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00119891  00000000  00000000  0009e67b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b7f0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080bc  00000000  00000000  001b7f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  001c000c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000190 	.word	0x20000190
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08010030 	.word	0x08010030

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000194 	.word	0x20000194
 8000214:	08010030 	.word	0x08010030

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b988 	b.w	8000f1c <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	468e      	mov	lr, r1
 8000c2c:	4604      	mov	r4, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14a      	bne.n	8000cca <__udivmoddi4+0xa6>
 8000c34:	428a      	cmp	r2, r1
 8000c36:	4617      	mov	r7, r2
 8000c38:	d962      	bls.n	8000d00 <__udivmoddi4+0xdc>
 8000c3a:	fab2 f682 	clz	r6, r2
 8000c3e:	b14e      	cbz	r6, 8000c54 <__udivmoddi4+0x30>
 8000c40:	f1c6 0320 	rsb	r3, r6, #32
 8000c44:	fa01 f806 	lsl.w	r8, r1, r6
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	40b7      	lsls	r7, r6
 8000c4e:	ea43 0808 	orr.w	r8, r3, r8
 8000c52:	40b4      	lsls	r4, r6
 8000c54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c58:	fa1f fc87 	uxth.w	ip, r7
 8000c5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c6e:	429a      	cmp	r2, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x62>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c78:	f080 80ea 	bcs.w	8000e50 <__udivmoddi4+0x22c>
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	f240 80e7 	bls.w	8000e50 <__udivmoddi4+0x22c>
 8000c82:	3902      	subs	r1, #2
 8000c84:	443b      	add	r3, r7
 8000c86:	1a9a      	subs	r2, r3, r2
 8000c88:	b2a3      	uxth	r3, r4
 8000c8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c9a:	459c      	cmp	ip, r3
 8000c9c:	d909      	bls.n	8000cb2 <__udivmoddi4+0x8e>
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca4:	f080 80d6 	bcs.w	8000e54 <__udivmoddi4+0x230>
 8000ca8:	459c      	cmp	ip, r3
 8000caa:	f240 80d3 	bls.w	8000e54 <__udivmoddi4+0x230>
 8000cae:	443b      	add	r3, r7
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cb6:	eba3 030c 	sub.w	r3, r3, ip
 8000cba:	2100      	movs	r1, #0
 8000cbc:	b11d      	cbz	r5, 8000cc6 <__udivmoddi4+0xa2>
 8000cbe:	40f3      	lsrs	r3, r6
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d905      	bls.n	8000cda <__udivmoddi4+0xb6>
 8000cce:	b10d      	cbz	r5, 8000cd4 <__udivmoddi4+0xb0>
 8000cd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	e7f5      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000cda:	fab3 f183 	clz	r1, r3
 8000cde:	2900      	cmp	r1, #0
 8000ce0:	d146      	bne.n	8000d70 <__udivmoddi4+0x14c>
 8000ce2:	4573      	cmp	r3, lr
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xc8>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 8105 	bhi.w	8000ef6 <__udivmoddi4+0x2d2>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	4690      	mov	r8, r2
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e5      	beq.n	8000cc6 <__udivmoddi4+0xa2>
 8000cfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000cfe:	e7e2      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000d00:	2a00      	cmp	r2, #0
 8000d02:	f000 8090 	beq.w	8000e26 <__udivmoddi4+0x202>
 8000d06:	fab2 f682 	clz	r6, r2
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	f040 80a4 	bne.w	8000e58 <__udivmoddi4+0x234>
 8000d10:	1a8a      	subs	r2, r1, r2
 8000d12:	0c03      	lsrs	r3, r0, #16
 8000d14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d18:	b280      	uxth	r0, r0
 8000d1a:	b2bc      	uxth	r4, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d907      	bls.n	8000d42 <__udivmoddi4+0x11e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d38:	d202      	bcs.n	8000d40 <__udivmoddi4+0x11c>
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	f200 80e0 	bhi.w	8000f00 <__udivmoddi4+0x2dc>
 8000d40:	46c4      	mov	ip, r8
 8000d42:	1a9b      	subs	r3, r3, r2
 8000d44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d50:	fb02 f404 	mul.w	r4, r2, r4
 8000d54:	429c      	cmp	r4, r3
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x144>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x142>
 8000d60:	429c      	cmp	r4, r3
 8000d62:	f200 80ca 	bhi.w	8000efa <__udivmoddi4+0x2d6>
 8000d66:	4602      	mov	r2, r0
 8000d68:	1b1b      	subs	r3, r3, r4
 8000d6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d6e:	e7a5      	b.n	8000cbc <__udivmoddi4+0x98>
 8000d70:	f1c1 0620 	rsb	r6, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7a:	431f      	orrs	r7, r3
 8000d7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d80:	fa20 f306 	lsr.w	r3, r0, r6
 8000d84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	fa1f fc87 	uxth.w	ip, r7
 8000d96:	fbbe f0f9 	udiv	r0, lr, r9
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000da0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000da4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	fa02 f201 	lsl.w	r2, r2, r1
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x1a0>
 8000db0:	193c      	adds	r4, r7, r4
 8000db2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000db6:	f080 809c 	bcs.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	f240 8099 	bls.w	8000ef2 <__udivmoddi4+0x2ce>
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	443c      	add	r4, r7
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	fa1f fe83 	uxth.w	lr, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dd8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ddc:	45a4      	cmp	ip, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1ce>
 8000de0:	193c      	adds	r4, r7, r4
 8000de2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000de6:	f080 8082 	bcs.w	8000eee <__udivmoddi4+0x2ca>
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d97f      	bls.n	8000eee <__udivmoddi4+0x2ca>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	443c      	add	r4, r7
 8000df2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000df6:	eba4 040c 	sub.w	r4, r4, ip
 8000dfa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dfe:	4564      	cmp	r4, ip
 8000e00:	4673      	mov	r3, lr
 8000e02:	46e1      	mov	r9, ip
 8000e04:	d362      	bcc.n	8000ecc <__udivmoddi4+0x2a8>
 8000e06:	d05f      	beq.n	8000ec8 <__udivmoddi4+0x2a4>
 8000e08:	b15d      	cbz	r5, 8000e22 <__udivmoddi4+0x1fe>
 8000e0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000e0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000e12:	fa04 f606 	lsl.w	r6, r4, r6
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431e      	orrs	r6, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e74f      	b.n	8000cc6 <__udivmoddi4+0xa2>
 8000e26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e2a:	0c01      	lsrs	r1, r0, #16
 8000e2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e30:	b280      	uxth	r0, r0
 8000e32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e36:	463b      	mov	r3, r7
 8000e38:	4638      	mov	r0, r7
 8000e3a:	463c      	mov	r4, r7
 8000e3c:	46b8      	mov	r8, r7
 8000e3e:	46be      	mov	lr, r7
 8000e40:	2620      	movs	r6, #32
 8000e42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e46:	eba2 0208 	sub.w	r2, r2, r8
 8000e4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e4e:	e766      	b.n	8000d1e <__udivmoddi4+0xfa>
 8000e50:	4601      	mov	r1, r0
 8000e52:	e718      	b.n	8000c86 <__udivmoddi4+0x62>
 8000e54:	4610      	mov	r0, r2
 8000e56:	e72c      	b.n	8000cb2 <__udivmoddi4+0x8e>
 8000e58:	f1c6 0220 	rsb	r2, r6, #32
 8000e5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000e60:	40b7      	lsls	r7, r6
 8000e62:	40b1      	lsls	r1, r6
 8000e64:	fa20 f202 	lsr.w	r2, r0, r2
 8000e68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e72:	b2bc      	uxth	r4, r7
 8000e74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e78:	0c11      	lsrs	r1, r2, #16
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb08 f904 	mul.w	r9, r8, r4
 8000e82:	40b0      	lsls	r0, r6
 8000e84:	4589      	cmp	r9, r1
 8000e86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e8a:	b280      	uxth	r0, r0
 8000e8c:	d93e      	bls.n	8000f0c <__udivmoddi4+0x2e8>
 8000e8e:	1879      	adds	r1, r7, r1
 8000e90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e94:	d201      	bcs.n	8000e9a <__udivmoddi4+0x276>
 8000e96:	4589      	cmp	r9, r1
 8000e98:	d81f      	bhi.n	8000eda <__udivmoddi4+0x2b6>
 8000e9a:	eba1 0109 	sub.w	r1, r1, r9
 8000e9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ea2:	fb09 f804 	mul.w	r8, r9, r4
 8000ea6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d229      	bcs.n	8000f08 <__udivmoddi4+0x2e4>
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eba:	d2c4      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ebc:	4542      	cmp	r2, r8
 8000ebe:	d2c2      	bcs.n	8000e46 <__udivmoddi4+0x222>
 8000ec0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ec4:	443a      	add	r2, r7
 8000ec6:	e7be      	b.n	8000e46 <__udivmoddi4+0x222>
 8000ec8:	45f0      	cmp	r8, lr
 8000eca:	d29d      	bcs.n	8000e08 <__udivmoddi4+0x1e4>
 8000ecc:	ebbe 0302 	subs.w	r3, lr, r2
 8000ed0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	46e1      	mov	r9, ip
 8000ed8:	e796      	b.n	8000e08 <__udivmoddi4+0x1e4>
 8000eda:	eba7 0909 	sub.w	r9, r7, r9
 8000ede:	4449      	add	r1, r9
 8000ee0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ee4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ee8:	fb09 f804 	mul.w	r8, r9, r4
 8000eec:	e7db      	b.n	8000ea6 <__udivmoddi4+0x282>
 8000eee:	4673      	mov	r3, lr
 8000ef0:	e77f      	b.n	8000df2 <__udivmoddi4+0x1ce>
 8000ef2:	4650      	mov	r0, sl
 8000ef4:	e766      	b.n	8000dc4 <__udivmoddi4+0x1a0>
 8000ef6:	4608      	mov	r0, r1
 8000ef8:	e6fd      	b.n	8000cf6 <__udivmoddi4+0xd2>
 8000efa:	443b      	add	r3, r7
 8000efc:	3a02      	subs	r2, #2
 8000efe:	e733      	b.n	8000d68 <__udivmoddi4+0x144>
 8000f00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	e71c      	b.n	8000d42 <__udivmoddi4+0x11e>
 8000f08:	4649      	mov	r1, r9
 8000f0a:	e79c      	b.n	8000e46 <__udivmoddi4+0x222>
 8000f0c:	eba1 0109 	sub.w	r1, r1, r9
 8000f10:	46c4      	mov	ip, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c4      	b.n	8000ea6 <__udivmoddi4+0x282>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <ADC_DMA_Init>:

#include "ADC_DMA.h"

void ADC_DMA_Init(ADC_DMA *adc_dma, ADC_HandleTypeDef *hadc,
                 uint16_t *buffer, uint32_t buffer_length,
                 uint8_t num_channels, float vref, float resolution) {
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	@ 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6178      	str	r0, [r7, #20]
 8000f28:	6139      	str	r1, [r7, #16]
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f32:	edc7 0a00 	vstr	s1, [r7]

    adc_dma->hadc = hadc;
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	601a      	str	r2, [r3, #0]
    adc_dma->dma_buffer = buffer;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	605a      	str	r2, [r3, #4]
    adc_dma->buffer_length = buffer_length;
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	68ba      	ldr	r2, [r7, #8]
 8000f46:	609a      	str	r2, [r3, #8]
    adc_dma->num_channels = num_channels;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000f4e:	731a      	strb	r2, [r3, #12]
    adc_dma->adc_vref = vref;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	611a      	str	r2, [r3, #16]
    adc_dma->adc_resolution = resolution;
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	683a      	ldr	r2, [r7, #0]
 8000f5a:	615a      	str	r2, [r3, #20]

    // Default center point and error percentage
    adc_dma->center_point = resolution / 2.0f;  // Typically 2048 for 12-bit ADC
 8000f5c:	ed97 7a00 	vldr	s14, [r7]
 8000f60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000f64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	edc3 7a06 	vstr	s15, [r3, #24]
    adc_dma->error_percentage = 5;              // 5% error by default
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2205      	movs	r2, #5
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f84:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000fcc <ADC_DMA_Init+0xac>
 8000f88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	edc3 7a07 	vstr	s15, [r3, #28]

    // Initialize DMA buffer
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
 8000fa0:	e008      	b.n	8000fb4 <ADC_DMA_Init+0x94>
        buffer[i] = 0;
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	4413      	add	r3, r2
 8000faa:	2200      	movs	r2, #0
 8000fac:	801a      	strh	r2, [r3, #0]
    for (uint32_t i = 0; i < buffer_length; i++) {
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d3f2      	bcc.n	8000fa2 <ADC_DMA_Init+0x82>
    }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3724      	adds	r7, #36	@ 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	42c80000 	.word	0x42c80000

08000fd0 <ADC_DMA_Start>:

void ADC_DMA_Start(ADC_DMA *adc_dma) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    // Perform ADC calibration
    HAL_ADCEx_Calibration_Start(adc_dma->hadc, ADC_SINGLE_ENDED);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	217f      	movs	r1, #127	@ 0x7f
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f006 fd32 	bl	8007a48 <HAL_ADCEx_Calibration_Start>

    // Start ADC with DMA
    HAL_ADC_Start_DMA(adc_dma->hadc, (uint32_t*)adc_dma->dma_buffer, adc_dma->buffer_length);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6859      	ldr	r1, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	f005 fe1b 	bl	8006c2c <HAL_ADC_Start_DMA>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <ADC_DMA_SetCenterPoint>:
    }

    return 0.0f;
}

void ADC_DMA_SetCenterPoint(ADC_DMA *adc_dma, float center_point, uint8_t error_percentage) {
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	ed87 0a02 	vstr	s0, [r7, #8]
 800100c:	460b      	mov	r3, r1
 800100e:	71fb      	strb	r3, [r7, #7]
    adc_dma->center_point = center_point;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	619a      	str	r2, [r3, #24]
    adc_dma->error_percentage = error_percentage;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	79fa      	ldrb	r2, [r7, #7]
 800101a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update threshold
    adc_dma->threshold = (adc_dma->error_percentage / 100.0f) * adc_dma->center_point;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102c:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001050 <ADC_DMA_SetCenterPoint+0x50>
 8001030:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	edd3 7a06 	vldr	s15, [r3, #24]
 800103a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	42c80000 	.word	0x42c80000

08001054 <PWM_Satuation>:
 *  Created on: Apr 14, 2024
 *      Author: beamk
 */
#include "Controller.h"

int32_t PWM_Satuation(float _u, int32_t _upper_limit, int32_t _lower_limit) {
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	ed87 0a03 	vstr	s0, [r7, #12]
 800105e:	60b8      	str	r0, [r7, #8]
 8001060:	6079      	str	r1, [r7, #4]
	if (_u > _upper_limit)
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	ee07 3a90 	vmov	s15, r3
 8001068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001070:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	dd01      	ble.n	800107e <PWM_Satuation+0x2a>
		return _upper_limit;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	e013      	b.n	80010a6 <PWM_Satuation+0x52>
	else if (_u < _lower_limit)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001088:	ed97 7a03 	vldr	s14, [r7, #12]
 800108c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001094:	d501      	bpl.n	800109a <PWM_Satuation+0x46>
		return _lower_limit;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	e005      	b.n	80010a6 <PWM_Satuation+0x52>
	return (int32_t) _u;
 800109a:	edd7 7a03 	vldr	s15, [r7, #12]
 800109e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a2:	ee17 3a90 	vmov	r3, s15
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <PID_CONTROLLER_Init>:

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki,
		float _Kd, float _u_max) {
 80010b2:	b480      	push	{r7}
 80010b4:	b087      	sub	sp, #28
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6178      	str	r0, [r7, #20]
 80010ba:	ed87 0a04 	vstr	s0, [r7, #16]
 80010be:	edc7 0a03 	vstr	s1, [r7, #12]
 80010c2:	ed87 1a02 	vstr	s2, [r7, #8]
 80010c6:	edc7 1a01 	vstr	s3, [r7, #4]
	controller->Kp = _Kp;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	601a      	str	r2, [r3, #0]
	controller->Ki = _Ki;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	605a      	str	r2, [r3, #4]
	controller->Kd = _Kd;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	609a      	str	r2, [r3, #8]
	controller->prev_Kp = _Kp;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	60da      	str	r2, [r3, #12]
	controller->prev_Ki = _Ki;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	68fa      	ldr	r2, [r7, #12]
 80010e6:	611a      	str	r2, [r3, #16]
	controller->prev_Kd = _Kd;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	615a      	str	r2, [r3, #20]
	controller->u_max = _u_max;
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	619a      	str	r2, [r3, #24]
	controller->ek_1 = 0.0;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
	controller->ek_2 = 0.0;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
	controller->u = 0.0;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800110c:	bf00      	nop
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <PID_CONTROLLER_Compute>:

float PID_CONTROLLER_Compute(PID_CONTROLLER *controller, float ek) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	ed87 0a00 	vstr	s0, [r7]
	if (!((controller->u >= controller->u_max && ek > 0)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	bfac      	ite	ge
 800113a:	2301      	movge	r3, #1
 800113c:	2300      	movlt	r3, #0
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f083 0301 	eor.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10e      	bne.n	8001168 <PID_CONTROLLER_Compute+0x50>
 800114a:	edd7 7a00 	vldr	s15, [r7]
 800114e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001156:	bfcc      	ite	gt
 8001158:	2301      	movgt	r3, #1
 800115a:	2300      	movle	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f083 0301 	eor.w	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	d057      	beq.n	8001218 <PID_CONTROLLER_Compute+0x100>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	edd3 7a06 	vldr	s15, [r3, #24]
 8001174:	eef1 7a67 	vneg.f32	s15, s15
 8001178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	bf94      	ite	ls
 8001182:	2301      	movls	r3, #1
 8001184:	2300      	movhi	r3, #0
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
	if (!((controller->u >= controller->u_max && ek > 0)
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10e      	bne.n	80011b0 <PID_CONTROLLER_Compute+0x98>
			|| (controller->u <= -controller->u_max && ek < 0))) {
 8001192:	edd7 7a00 	vldr	s15, [r7]
 8001196:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800119a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800119e:	bf4c      	ite	mi
 80011a0:	2301      	movmi	r3, #1
 80011a2:	2300      	movpl	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	f083 0301 	eor.w	r3, r3, #1
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d033      	beq.n	8001218 <PID_CONTROLLER_Compute+0x100>
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	edd3 6a00 	vldr	s13, [r3]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80011cc:	ee76 6aa7 	vadd.f32	s13, s13, s15
				* ek)
 80011d0:	edd7 7a00 	vldr	s15, [r7]
 80011d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
				- ((controller->Kp + (2 * controller->Kd)) * controller->ek_1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	ed93 6a00 	vldr	s12, [r3]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80011e4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	edd3 7a07 	vldr	s15, [r3, #28]
 80011f2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
				+ (controller->Kd * controller->ek_2);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	ed93 6a02 	vldr	s12, [r3, #8]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	edd3 7a08 	vldr	s15, [r3, #32]
 8001206:	ee66 7a27 	vmul.f32	s15, s12, s15
 800120a:	ee76 7aa7 	vadd.f32	s15, s13, s15
		controller->u += ((controller->Kp + controller->Ki + controller->Kd)
 800120e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	}
	controller->ek_2 = controller->ek_1;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	69da      	ldr	r2, [r3, #28]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	621a      	str	r2, [r3, #32]
	controller->ek_1 = ek;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	61da      	str	r2, [r3, #28]
	return controller->u;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122a:	ee07 3a90 	vmov	s15, r3
}
 800122e:	eeb0 0a67 	vmov.f32	s0, s15
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <PID_CONTROLLER_Reset>:

void PID_CONTROLLER_Reset(PID_CONTROLLER *controller) {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    controller->ek_1 = 0.0f;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
    controller->ek_2 = 0.0f;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	621a      	str	r2, [r3, #32]
    controller->u = 0.0f;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	625a      	str	r2, [r3, #36]	@ 0x24
    controller->prev_Kp = controller->Kp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	60da      	str	r2, [r3, #12]
    controller->prev_Ki = controller->Ki;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685a      	ldr	r2, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	611a      	str	r2, [r3, #16]
    controller->prev_Kd = controller->Kd;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	615a      	str	r2, [r3, #20]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	4613      	mov	r3, r2
 800128e:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	88fa      	ldrh	r2, [r7, #6]
 800129a:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3328      	adds	r3, #40	@ 0x28
 80012a0:	88fa      	ldrh	r2, [r7, #6]
 80012a2:	68b9      	ldr	r1, [r7, #8]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 f985 	bl	80025b4 <PWM_init>
	mdxx->GPIOx = GPIOx;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8b3a      	ldrh	r2, [r7, #24]
 80012b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80012d4:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d15f      	bne.n	80013a2 <MDXX_set_range+0xda>
		if (duty == 0) {
 80012e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80012ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ee:	d115      	bne.n	800131c <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3310      	adds	r3, #16
 80012f4:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 8001474 <MDXX_set_range+0x1ac>
 80012f8:	ed97 0a02 	vldr	s0, [r7, #8]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f001 f97b 	bl	80025f8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	3328      	adds	r3, #40	@ 0x28
 8001306:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8001474 <MDXX_set_range+0x1ac>
 800130a:	ed97 0a02 	vldr	s0, [r7, #8]
 800130e:	4618      	mov	r0, r3
 8001310:	f001 f972 	bl	80025f8 <PWM_write_range>
			mdxx->cmd = 0;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 800131a:	e0a6      	b.n	800146a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 800131c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001320:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001328:	dd1a      	ble.n	8001360 <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	3310      	adds	r3, #16
 800132e:	eddf 0a51 	vldr	s1, [pc, #324]	@ 8001474 <MDXX_set_range+0x1ac>
 8001332:	ed97 0a02 	vldr	s0, [r7, #8]
 8001336:	4618      	mov	r0, r3
 8001338:	f001 f95e 	bl	80025f8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3328      	adds	r3, #40	@ 0x28
 8001340:	edd7 0a01 	vldr	s1, [r7, #4]
 8001344:	ed97 0a02 	vldr	s0, [r7, #8]
 8001348:	4618      	mov	r0, r3
 800134a:	f001 f955 	bl	80025f8 <PWM_write_range>
			mdxx->cmd = duty;
 800134e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001356:	ee17 2a90 	vmov	r2, s15
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800135e:	e084      	b.n	800146a <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3310      	adds	r3, #16
 8001364:	eddf 0a44 	vldr	s1, [pc, #272]	@ 8001478 <MDXX_set_range+0x1b0>
 8001368:	ed97 0a02 	vldr	s0, [r7, #8]
 800136c:	4618      	mov	r0, r3
 800136e:	f001 f943 	bl	80025f8 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3328      	adds	r3, #40	@ 0x28
 8001376:	edd7 7a01 	vldr	s15, [r7, #4]
 800137a:	eef0 7ae7 	vabs.f32	s15, s15
 800137e:	eef0 0a67 	vmov.f32	s1, s15
 8001382:	ed97 0a02 	vldr	s0, [r7, #8]
 8001386:	4618      	mov	r0, r3
 8001388:	f001 f936 	bl	80025f8 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 800138c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001390:	eef0 7ae7 	vabs.f32	s15, s15
 8001394:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001398:	ee17 2a90 	vmov	r2, s15
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013a0:	e063      	b.n	800146a <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d15e      	bne.n	800146a <MDXX_set_range+0x1a2>
		if (duty == 0) {
 80013ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80013b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b8:	d115      	bne.n	80013e6 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013c4:	2200      	movs	r2, #0
 80013c6:	4619      	mov	r1, r3
 80013c8:	f007 fa6c 	bl	80088a4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	3328      	adds	r3, #40	@ 0x28
 80013d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001474 <MDXX_set_range+0x1ac>
 80013d4:	ed97 0a02 	vldr	s0, [r7, #8]
 80013d8:	4618      	mov	r0, r3
 80013da:	f001 f90d 	bl	80025f8 <PWM_write_range>
			mdxx->cmd = 0;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80013e4:	e041      	b.n	800146a <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f2:	dd1a      	ble.n	800142a <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80013fe:	2200      	movs	r2, #0
 8001400:	4619      	mov	r1, r3
 8001402:	f007 fa4f 	bl	80088a4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3328      	adds	r3, #40	@ 0x28
 800140a:	edd7 0a01 	vldr	s1, [r7, #4]
 800140e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001412:	4618      	mov	r0, r3
 8001414:	f001 f8f0 	bl	80025f8 <PWM_write_range>
			mdxx->cmd = duty;
 8001418:	edd7 7a01 	vldr	s15, [r7, #4]
 800141c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001420:	ee17 2a90 	vmov	r2, s15
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001428:	e01f      	b.n	800146a <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001434:	2201      	movs	r2, #1
 8001436:	4619      	mov	r1, r3
 8001438:	f007 fa34 	bl	80088a4 <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3328      	adds	r3, #40	@ 0x28
 8001440:	edd7 7a01 	vldr	s15, [r7, #4]
 8001444:	eef0 7ae7 	vabs.f32	s15, s15
 8001448:	eef0 0a67 	vmov.f32	s1, s15
 800144c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001450:	4618      	mov	r0, r3
 8001452:	f001 f8d1 	bl	80025f8 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8001456:	edd7 7a01 	vldr	s15, [r7, #4]
 800145a:	eef0 7ae7 	vabs.f32	s15, s15
 800145e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001462:	ee17 2a90 	vmov	r2, s15
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800146a:	bf00      	nop
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	00000000 	.word	0x00000000
 8001478:	42c80000 	.word	0x42c80000

0800147c <REVOLUTE_MOTOR_FFD_Init>:
	.offset = 30.07e-3,
    .c = 24.13e-3,
    .prismatic_pulley_radius = 1.5915e-2 		// m
};

void REVOLUTE_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx){
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <REVOLUTE_MOTOR_FFD_Compute>:

float REVOLUTE_MOTOR_FFD_Compute(DC_MOTOR_FFeedward *motor, float qd){
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	ed2d 8b02 	vpush	{d8}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	ed87 0a00 	vstr	s0, [r7]
    float transfer_function = (motor->Mx->B * motor->Mx->R + motor->Mx->Ke * motor->Mx->Kt) / motor->Mx->Kt;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014b8:	f7ff f86a 	bl	8000590 <__aeabi_dmul>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4614      	mov	r4, r2
 80014c2:	461d      	mov	r5, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014d4:	f7ff f85c 	bl	8000590 <__aeabi_dmul>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4620      	mov	r0, r4
 80014de:	4629      	mov	r1, r5
 80014e0:	f7fe fea0 	bl	8000224 <__adddf3>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014f4:	f7ff f976 	bl	80007e4 <__aeabi_ddiv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fb28 	bl	8000b54 <__aeabi_d2f>
 8001504:	4603      	mov	r3, r0
 8001506:	60fb      	str	r3, [r7, #12]

    float v = qd * transfer_function;
 8001508:	ed97 7a00 	vldr	s14, [r7]
 800150c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001510:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001514:	edc7 7a02 	vstr	s15, [r7, #8]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	f7ff fb16 	bl	8000b54 <__aeabi_d2f>
 8001528:	4603      	mov	r3, r0
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eeb1 8a67 	vneg.f32	s16, s15
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff fb09 	bl	8000b54 <__aeabi_d2f>
 8001542:	4604      	mov	r4, r0
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	f7ff fb00 	bl	8000b54 <__aeabi_d2f>
 8001554:	4603      	mov	r3, r0
 8001556:	ee07 3a90 	vmov	s15, r3
 800155a:	eef1 8a67 	vneg.f32	s17, s15
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff faf3 	bl	8000b54 <__aeabi_d2f>
 800156e:	4603      	mov	r3, r0
 8001570:	ee02 3a10 	vmov	s4, r3
 8001574:	eef0 1a68 	vmov.f32	s3, s17
 8001578:	ee01 4a10 	vmov	s2, r4
 800157c:	eef0 0a48 	vmov.f32	s1, s16
 8001580:	ed97 0a02 	vldr	s0, [r7, #8]
 8001584:	f000 fa38 	bl	80019f8 <mapf>
 8001588:	eef0 7a40 	vmov.f32	s15, s0
}
 800158c:	eeb0 0a67 	vmov.f32	s0, s15
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	ecbd 8b02 	vpop	{d8}
 8001598:	bdb0      	pop	{r4, r5, r7, pc}

0800159a <REVOLUTE_MOTOR_DFD_Init>:

void REVOLUTE_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 800159a:	b480      	push	{r7}
 800159c:	b085      	sub	sp, #20
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	605a      	str	r2, [r3, #4]
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <REVOLUTE_MOTOR_DFD_Compute>:

float REVOLUTE_MOTOR_DFD_Compute(DC_MOTOR_DFeedward *motor, float q, float s){
 80015be:	b5b0      	push	{r4, r5, r7, lr}
 80015c0:	ed2d 8b02 	vpush	{d8}
 80015c4:	b088      	sub	sp, #32
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	ed87 0a02 	vstr	s0, [r7, #8]
 80015ce:	edc7 0a01 	vstr	s1, [r7, #4]
    float gravity_compensate_plotter = motor->En->plotter_mass * motor->En->g * sin(q) * (s + motor->En->offset);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	ed93 7a01 	vldr	s14, [r3, #4]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	edd3 7a00 	vldr	s15, [r3]
 80015e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015e6:	ee17 0a90 	vmov	r0, s15
 80015ea:	f7fe ff79 	bl	80004e0 <__aeabi_f2d>
 80015ee:	4604      	mov	r4, r0
 80015f0:	460d      	mov	r5, r1
 80015f2:	68b8      	ldr	r0, [r7, #8]
 80015f4:	f7fe ff74 	bl	80004e0 <__aeabi_f2d>
 80015f8:	4602      	mov	r2, r0
 80015fa:	460b      	mov	r3, r1
 80015fc:	ec43 2b10 	vmov	d0, r2, r3
 8001600:	f00c feba 	bl	800e378 <sin>
 8001604:	ec53 2b10 	vmov	r2, r3, d0
 8001608:	4620      	mov	r0, r4
 800160a:	4629      	mov	r1, r5
 800160c:	f7fe ffc0 	bl	8000590 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4614      	mov	r4, r2
 8001616:	461d      	mov	r5, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001620:	edd7 7a01 	vldr	s15, [r7, #4]
 8001624:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001628:	ee17 0a90 	vmov	r0, s15
 800162c:	f7fe ff58 	bl	80004e0 <__aeabi_f2d>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4620      	mov	r0, r4
 8001636:	4629      	mov	r1, r5
 8001638:	f7fe ffaa 	bl	8000590 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff fa86 	bl	8000b54 <__aeabi_d2f>
 8001648:	4603      	mov	r3, r0
 800164a:	61fb      	str	r3, [r7, #28]

    float gravity_compensate_rail = motor->En->slide_rail_mass * motor->En->g * sin(q) * (motor->En->c);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	ed93 7a02 	vldr	s14, [r3, #8]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001660:	ee17 0a90 	vmov	r0, s15
 8001664:	f7fe ff3c 	bl	80004e0 <__aeabi_f2d>
 8001668:	4604      	mov	r4, r0
 800166a:	460d      	mov	r5, r1
 800166c:	68b8      	ldr	r0, [r7, #8]
 800166e:	f7fe ff37 	bl	80004e0 <__aeabi_f2d>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	ec43 2b10 	vmov	d0, r2, r3
 800167a:	f00c fe7d 	bl	800e378 <sin>
 800167e:	ec53 2b10 	vmov	r2, r3, d0
 8001682:	4620      	mov	r0, r4
 8001684:	4629      	mov	r1, r5
 8001686:	f7fe ff83 	bl	8000590 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4614      	mov	r4, r2
 8001690:	461d      	mov	r5, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff21 	bl	80004e0 <__aeabi_f2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4620      	mov	r0, r4
 80016a4:	4629      	mov	r1, r5
 80016a6:	f7fe ff73 	bl	8000590 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4610      	mov	r0, r2
 80016b0:	4619      	mov	r1, r3
 80016b2:	f7ff fa4f 	bl	8000b54 <__aeabi_d2f>
 80016b6:	4603      	mov	r3, r0
 80016b8:	61bb      	str	r3, [r7, #24]

    float transfer_function = motor->Mx->R / motor->Mx->Kt;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80016ca:	f7ff f88b 	bl	80007e4 <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fa3d 	bl	8000b54 <__aeabi_d2f>
 80016da:	4603      	mov	r3, r0
 80016dc:	617b      	str	r3, [r7, #20]

    float v = (gravity_compensate_plotter - gravity_compensate_rail) * transfer_function;
 80016de:	ed97 7a07 	vldr	s14, [r7, #28]
 80016e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80016e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80016ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f2:	edc7 7a04 	vstr	s15, [r7, #16]

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f7ff fa27 	bl	8000b54 <__aeabi_d2f>
 8001706:	4603      	mov	r3, r0
 8001708:	ee07 3a90 	vmov	s15, r3
 800170c:	eeb1 8a67 	vneg.f32	s16, s15
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa1a 	bl	8000b54 <__aeabi_d2f>
 8001720:	4604      	mov	r4, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff fa11 	bl	8000b54 <__aeabi_d2f>
 8001732:	4603      	mov	r3, r0
 8001734:	ee07 3a90 	vmov	s15, r3
 8001738:	eef1 8a67 	vneg.f32	s17, s15
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f7ff fa04 	bl	8000b54 <__aeabi_d2f>
 800174c:	4603      	mov	r3, r0
 800174e:	ee02 3a10 	vmov	s4, r3
 8001752:	eef0 1a68 	vmov.f32	s3, s17
 8001756:	ee01 4a10 	vmov	s2, r4
 800175a:	eef0 0a48 	vmov.f32	s1, s16
 800175e:	ed97 0a04 	vldr	s0, [r7, #16]
 8001762:	f000 f949 	bl	80019f8 <mapf>
 8001766:	eef0 7a40 	vmov.f32	s15, s0
}
 800176a:	eeb0 0a67 	vmov.f32	s0, s15
 800176e:	3720      	adds	r7, #32
 8001770:	46bd      	mov	sp, r7
 8001772:	ecbd 8b02 	vpop	{d8}
 8001776:	bdb0      	pop	{r4, r5, r7, pc}

08001778 <PRISMATIC_MOTOR_FFD_Init>:

void PRISMATIC_MOTOR_FFD_Init(DC_MOTOR_FFeedward *motor, Motor_Constant_Structure *_Mx) {
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    motor->Mx = _Mx;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	601a      	str	r2, [r3, #0]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <PRISMATIC_MOTOR_DFD_Init>:
    float v = sd * transfer_function;

    return mapf(v, -motor->Mx->V_max, motor->Mx->V_max, -motor->Mx->U_max, motor->Mx->U_max);
}

void PRISMATIC_MOTOR_DFD_Init(DC_MOTOR_DFeedward *motor, Motor_Constant_Structure *_Mx, Environment *_En){
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
    motor->Mx = _Mx;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	601a      	str	r2, [r3, #0]
    motor->En = _En;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	605a      	str	r2, [r3, #4]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <FIR_init>:
 *      Author: transporter
 */
#include "FIR.h"
#include "arm_math.h"

void FIR_init(FIR *fir, uint16_t numTaps, float cutoffFreq, float samplingFreq) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	ed2d 8b02 	vpush	{d8}
 80017be:	b08a      	sub	sp, #40	@ 0x28
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	460b      	mov	r3, r1
 80017c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ca:	edc7 0a00 	vstr	s1, [r7]
 80017ce:	817b      	strh	r3, [r7, #10]
    // Make sure numTaps is odd
    if (numTaps % 2 == 0) {
 80017d0:	897b      	ldrh	r3, [r7, #10]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <FIR_init+0x2a>
        numTaps += 1;
 80017dc:	897b      	ldrh	r3, [r7, #10]
 80017de:	3301      	adds	r3, #1
 80017e0:	817b      	strh	r3, [r7, #10]
    }

    fir->numTaps = numTaps;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	897a      	ldrh	r2, [r7, #10]
 80017e6:	811a      	strh	r2, [r3, #8]
    fir->bufferIndex = 0;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	815a      	strh	r2, [r3, #10]

    // Allocate memory for coefficients and buffer
    fir->coeffs = (float*)malloc(numTaps * sizeof(float));
 80017ee:	897b      	ldrh	r3, [r7, #10]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f00c fcc4 	bl	800e180 <malloc>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]
    fir->buffer = (float*)malloc(numTaps * sizeof(float));
 8001800:	897b      	ldrh	r3, [r7, #10]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4618      	mov	r0, r3
 8001806:	f00c fcbb 	bl	800e180 <malloc>
 800180a:	4603      	mov	r3, r0
 800180c:	461a      	mov	r2, r3
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	605a      	str	r2, [r3, #4]

    if (fir->coeffs != NULL && fir->buffer != NULL) {
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	f000 80e0 	beq.w	80019dc <FIR_init+0x224>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80db 	beq.w	80019dc <FIR_init+0x224>
        // Clear buffer
        for (uint16_t i = 0; i < numTaps; i++) {
 8001826:	2300      	movs	r3, #0
 8001828:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800182a:	e00a      	b.n	8001842 <FIR_init+0x8a>
            fir->buffer[i] = 0.0f;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < numTaps; i++) {
 800183c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800183e:	3301      	adds	r3, #1
 8001840:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001842:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001844:	897b      	ldrh	r3, [r7, #10]
 8001846:	429a      	cmp	r2, r3
 8001848:	d3f0      	bcc.n	800182c <FIR_init+0x74>
        }

        // Calculate normalized cutoff frequency (0 to 0.5)
        float omega = cutoffFreq / samplingFreq;
 800184a:	edd7 6a01 	vldr	s13, [r7, #4]
 800184e:	ed97 7a00 	vldr	s14, [r7]
 8001852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001856:	edc7 7a06 	vstr	s15, [r7, #24]

        // Calculate filter coefficients (low-pass)
        int16_t half_taps = numTaps / 2;
 800185a:	897b      	ldrh	r3, [r7, #10]
 800185c:	085b      	lsrs	r3, r3, #1
 800185e:	b29b      	uxth	r3, r3
 8001860:	82fb      	strh	r3, [r7, #22]
        for (int16_t i = 0; i < numTaps; i++) {
 8001862:	2300      	movs	r3, #0
 8001864:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001866:	e077      	b.n	8001958 <FIR_init+0x1a0>
            if (i == half_taps) {
 8001868:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800186c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001870:	429a      	cmp	r2, r3
 8001872:	d10c      	bne.n	800188e <FIR_init+0xd6>
                // Center tap
                fir->coeffs[i] = 2.0f * omega;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	4413      	add	r3, r2
 8001880:	edd7 7a06 	vldr	s15, [r7, #24]
 8001884:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001888:	edc3 7a00 	vstr	s15, [r3]
 800188c:	e02c      	b.n	80018e8 <FIR_init+0x130>
            } else {
                // Side taps
                int16_t n = i - half_taps;
 800188e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001890:	8afb      	ldrh	r3, [r7, #22]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	b29b      	uxth	r3, r3
 8001896:	82bb      	strh	r3, [r7, #20]
                fir->coeffs[i] = sinf(2.0f * PI * omega * n) / (PI * n);
 8001898:	edd7 7a06 	vldr	s15, [r7, #24]
 800189c:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 80019e8 <FIR_init+0x230>
 80018a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	f00c fe34 	bl	800e524 <sinf>
 80018bc:	eef0 6a40 	vmov.f32	s13, s0
 80018c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018cc:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80019ec <FIR_init+0x234>
 80018d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e4:	edc3 7a00 	vstr	s15, [r3]
            }

            // Apply Hamming window
            fir->coeffs[i] *= (0.54f - 0.46f * cosf(2.0f * PI * i / (numTaps - 1)));
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	ed93 8a00 	vldr	s16, [r3]
 80018f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80018fc:	ee07 3a90 	vmov	s15, r3
 8001900:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001904:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80019e8 <FIR_init+0x230>
 8001908:	ee27 7a87 	vmul.f32	s14, s15, s14
 800190c:	897b      	ldrh	r3, [r7, #10]
 800190e:	3b01      	subs	r3, #1
 8001910:	ee07 3a90 	vmov	s15, r3
 8001914:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001918:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800191c:	eeb0 0a66 	vmov.f32	s0, s13
 8001920:	f00c fdbc 	bl	800e49c <cosf>
 8001924:	eef0 7a40 	vmov.f32	s15, s0
 8001928:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80019f0 <FIR_init+0x238>
 800192c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001930:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80019f4 <FIR_init+0x23c>
 8001934:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001948:	edc3 7a00 	vstr	s15, [r3]
        for (int16_t i = 0; i < numTaps; i++) {
 800194c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001950:	b29b      	uxth	r3, r3
 8001952:	3301      	adds	r3, #1
 8001954:	b29b      	uxth	r3, r3
 8001956:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001958:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 800195c:	897b      	ldrh	r3, [r7, #10]
 800195e:	429a      	cmp	r2, r3
 8001960:	db82      	blt.n	8001868 <FIR_init+0xb0>
        }

        // Normalize gain
        float sum = 0.0f;
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001968:	2300      	movs	r3, #0
 800196a:	83fb      	strh	r3, [r7, #30]
 800196c:	e00f      	b.n	800198e <FIR_init+0x1d6>
            sum += fir->coeffs[i];
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	8bfb      	ldrh	r3, [r7, #30]
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	edd3 7a00 	vldr	s15, [r3]
 800197c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001984:	edc7 7a08 	vstr	s15, [r7, #32]
        for (uint16_t i = 0; i < numTaps; i++) {
 8001988:	8bfb      	ldrh	r3, [r7, #30]
 800198a:	3301      	adds	r3, #1
 800198c:	83fb      	strh	r3, [r7, #30]
 800198e:	8bfa      	ldrh	r2, [r7, #30]
 8001990:	897b      	ldrh	r3, [r7, #10]
 8001992:	429a      	cmp	r2, r3
 8001994:	d3eb      	bcc.n	800196e <FIR_init+0x1b6>
        }

        if (sum != 0.0f) {
 8001996:	edd7 7a08 	vldr	s15, [r7, #32]
 800199a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800199e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019a2:	d01b      	beq.n	80019dc <FIR_init+0x224>
            for (uint16_t i = 0; i < numTaps; i++) {
 80019a4:	2300      	movs	r3, #0
 80019a6:	83bb      	strh	r3, [r7, #28]
 80019a8:	e014      	b.n	80019d4 <FIR_init+0x21c>
                fir->coeffs[i] /= sum;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	8bbb      	ldrh	r3, [r7, #28]
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	edd3 6a00 	vldr	s13, [r3]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	8bbb      	ldrh	r3, [r7, #28]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80019c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ca:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t i = 0; i < numTaps; i++) {
 80019ce:	8bbb      	ldrh	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	83bb      	strh	r3, [r7, #28]
 80019d4:	8bba      	ldrh	r2, [r7, #28]
 80019d6:	897b      	ldrh	r3, [r7, #10]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d3e6      	bcc.n	80019aa <FIR_init+0x1f2>
            }
        }
    }
}
 80019dc:	bf00      	nop
 80019de:	3728      	adds	r7, #40	@ 0x28
 80019e0:	46bd      	mov	sp, r7
 80019e2:	ecbd 8b02 	vpop	{d8}
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40c90fdb 	.word	0x40c90fdb
 80019ec:	40490fdb 	.word	0x40490fdb
 80019f0:	3eeb851f 	.word	0x3eeb851f
 80019f4:	3f0a3d71 	.word	0x3f0a3d71

080019f8 <mapf>:

}

//Scaling a range of value
float mapf(float input, float min_input, float max_input, float min_output,
		float max_output) {
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8001a02:	edc7 0a04 	vstr	s1, [r7, #16]
 8001a06:	ed87 1a03 	vstr	s2, [r7, #12]
 8001a0a:	edc7 1a02 	vstr	s3, [r7, #8]
 8001a0e:	ed87 2a01 	vstr	s4, [r7, #4]

	// First, find the ratio of the input within the input range
	float input_ratio = (input - min_input) / (max_input - min_input);
 8001a12:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a16:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a1a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001a1e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001a22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a2e:	edc7 7a07 	vstr	s15, [r7, #28]
	// Then, scale this ratio to the output range
	float output = (input_ratio * (max_output - min_output)) + min_output;
 8001a32:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a46:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a4e:	edc7 7a06 	vstr	s15, [r7, #24]

	return output;
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	ee07 3a90 	vmov	s15, r3
}
 8001a58:	eeb0 0a67 	vmov.f32	s0, s15
 8001a5c:	3724      	adds	r7, #36	@ 0x24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <modbus_1t5_Timeout+0x3c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2201      	movs	r2, #1
 8001a72:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <modbus_1t5_Timeout+0x3c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <modbus_1t5_Timeout+0x3c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <modbus_1t5_Timeout+0x3c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0201 	orr.w	r2, r2, #1
 8001a96:	601a      	str	r2, [r3, #0]
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200001ac 	.word	0x200001ac

08001aa8 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001ab0:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <modbus_3t5_Timeout+0x1c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	755a      	strb	r2, [r3, #21]

}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	200001ac 	.word	0x200001ac

08001ac8 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f00a fd9b 	bl	800c60c <HAL_UART_GetError>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d101      	bne.n	8001ae0 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8001adc:	f7ff ffc4 	bl	8001a68 <modbus_1t5_Timeout>

	}
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,UART_HandleTypeDef* huart,TIM_HandleTypeDef* htim ,u16u8_t* RegisterStartAddress,uint8_t slaveAddress,uint32_t RegisterSize)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
	hModbus = hmodbus;
 8001af6:	4a2d      	ldr	r2, [pc, #180]	@ (8001bac <Modbus_init+0xc4>)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6013      	str	r3, [r2, #0]

	hModbus->huart = huart;
 8001afc:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <Modbus_init+0xc4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68ba      	ldr	r2, [r7, #8]
 8001b02:	60da      	str	r2, [r3, #12]
	hModbus->htim = htim;
 8001b04:	4b29      	ldr	r3, [pc, #164]	@ (8001bac <Modbus_init+0xc4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	611a      	str	r2, [r3, #16]
	hModbus->RegisterAddress = RegisterStartAddress;
 8001b0c:	4b27      	ldr	r3, [pc, #156]	@ (8001bac <Modbus_init+0xc4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	605a      	str	r2, [r3, #4]
	hModbus->slaveAddress = slaveAddress;
 8001b14:	4b25      	ldr	r3, [pc, #148]	@ (8001bac <Modbus_init+0xc4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	7e3a      	ldrb	r2, [r7, #24]
 8001b1a:	701a      	strb	r2, [r3, #0]
	hModbus->RegisterSize = RegisterSize;
 8001b1c:	4b23      	ldr	r3, [pc, #140]	@ (8001bac <Modbus_init+0xc4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	609a      	str	r2, [r3, #8]
	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	691b      	ldr	r3, [r3, #16]
 8001b28:	4a21      	ldr	r2, [pc, #132]	@ (8001bb0 <Modbus_init+0xc8>)
 8001b2a:	210e      	movs	r1, #14
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f009 f811 	bl	800ab54 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	2110      	movs	r1, #16
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f00a fd11 	bl	800c560 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f00a fd28 	bl	800c598 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	@ (8001bb4 <Modbus_init+0xcc>)
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4618      	mov	r0, r3
 8001b52:	f00a f84f 	bl	800bbf4 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <Modbus_init+0xc4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <Modbus_init+0xc4>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <Modbus_init+0xc4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8001b68:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b74:	4619      	mov	r1, r3
 8001b76:	f00a f8f7 	bl	800bd68 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <Modbus_init+0xc4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d10c      	bne.n	8001ba4 <Modbus_init+0xbc>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001b8a:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <Modbus_init+0xc4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f007 ffbb 	bl	8009b0c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001b96:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <Modbus_init+0xc4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f008 fa0a 	bl	8009fb8 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200001ac 	.word	0x200001ac
 8001bb0:	08001aa9 	.word	0x08001aa9
 8001bb4:	08001ac9 	.word	0x08001ac9

08001bb8 <MotorKalman_Init>:
#include <string.h>
#include "MotorMatrixGenerator.h"

void MotorKalman_Init(MotorKalman* filter, float32_t dt, float32_t J, float32_t b,
                      float32_t K_t, float32_t K_e, float32_t R_a, float32_t L_a,
                      float32_t Q, float32_t R) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	@ 0x30
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6278      	str	r0, [r7, #36]	@ 0x24
 8001bc0:	ed87 0a08 	vstr	s0, [r7, #32]
 8001bc4:	edc7 0a07 	vstr	s1, [r7, #28]
 8001bc8:	ed87 1a06 	vstr	s2, [r7, #24]
 8001bcc:	edc7 1a05 	vstr	s3, [r7, #20]
 8001bd0:	ed87 2a04 	vstr	s4, [r7, #16]
 8001bd4:	edc7 2a03 	vstr	s5, [r7, #12]
 8001bd8:	ed87 3a02 	vstr	s6, [r7, #8]
 8001bdc:	edc7 3a01 	vstr	s7, [r7, #4]
 8001be0:	ed87 4a00 	vstr	s8, [r7]
    // Store motor parameters
    filter->dt = dt;
 8001be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be6:	6a3a      	ldr	r2, [r7, #32]
 8001be8:	f8c3 2338 	str.w	r2, [r3, #824]	@ 0x338
    filter->J = J;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	f8c3 233c 	str.w	r2, [r3, #828]	@ 0x33c
    filter->b = b;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    filter->K_t = K_t;
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	f8c3 2344 	str.w	r2, [r3, #836]	@ 0x344
    filter->K_e = K_e;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	f8c3 2348 	str.w	r2, [r3, #840]	@ 0x348
    filter->R_a = R_a;
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    filter->L_a = L_a;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350

    // Initialize state vector to zeros
    memset(filter->X, 0, sizeof(filter->X));
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	2210      	movs	r2, #16
 8001c20:	2100      	movs	r1, #0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f00c fb62 	bl	800e2ec <memset>

    // Initialize covariance matrix with high values on diagonal to reflect uncertainty
    memset(filter->P, 0, sizeof(filter->P));
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	3310      	adds	r3, #16
 8001c2c:	2240      	movs	r2, #64	@ 0x40
 8001c2e:	2100      	movs	r1, #0
 8001c30:	4618      	mov	r0, r3
 8001c32:	f00c fb5b 	bl	800e2ec <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c36:	2300      	movs	r3, #0
 8001c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c3a:	e00c      	b.n	8001c56 <MotorKalman_Init+0x9e>
        filter->P[i * MOTOR_KALMAN_NUM_STATES + i] = 100.0f;
 8001c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c46:	3304      	adds	r3, #4
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	4a79      	ldr	r2, [pc, #484]	@ (8001e34 <MotorKalman_Init+0x27c>)
 8001c4e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c52:	3301      	adds	r3, #1
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	ddef      	ble.n	8001c3c <MotorKalman_Init+0x84>
    }

    // Initialize identity matrix
    memset(filter->I_data, 0, sizeof(filter->I_data));
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5e:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001c62:	2240      	movs	r2, #64	@ 0x40
 8001c64:	2100      	movs	r1, #0
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00c fb40 	bl	800e2ec <memset>
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c70:	e00d      	b.n	8001c8e <MotorKalman_Init+0xd6>
        filter->I_data[i * MOTOR_KALMAN_NUM_STATES + i] = 1.0f;
 8001c72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c7c:	33be      	adds	r3, #190	@ 0xbe
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4413      	add	r3, r2
 8001c82:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001c86:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MOTOR_KALMAN_NUM_STATES; i++) {
 8001c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	ddee      	ble.n	8001c72 <MotorKalman_Init+0xba>
    }

    // Initialize output matrix C - measuring only position by default
    memset(filter->C, 0, sizeof(filter->C));
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	33f0      	adds	r3, #240	@ 0xf0
 8001c98:	2210      	movs	r2, #16
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f00c fb25 	bl	800e2ec <memset>
    filter->C[0] = 1.0f; // We only measure the position (first state) by default
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ca8:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

    // Initialize process noise input matrix G
    memset(filter->G, 0, sizeof(filter->G));
 8001cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cae:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f00c fb18 	bl	800e2ec <memset>
    filter->G[1] = 1.0f; // Process noise primarily affects the velocity state (index 1)
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001cc2:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104


    // Set process and measurement noise values
    MotorKalman_SetProcessNoise(filter, Q);
 8001cc6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001cca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001ccc:	f000 f922 	bl	8001f14 <MotorKalman_SetProcessNoise>
    MotorKalman_SetMeasurementNoise(filter, R);
 8001cd0:	ed97 0a00 	vldr	s0, [r7]
 8001cd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cd6:	f000 f94d 	bl	8001f74 <MotorKalman_SetMeasurementNoise>

    // Initialize ARM CMSIS DSP matrix instances - essential for safely using the functions
    arm_mat_init_f32(&filter->X_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->X);
 8001cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cdc:	f503 70d2 	add.w	r0, r3, #420	@ 0x1a4
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	f00b fd90 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->P_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->P);
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	f503 70d6 	add.w	r0, r3, #428	@ 0x1ac
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf2:	3310      	adds	r3, #16
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	f00b fd87 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->I_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->I_data);
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfe:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	f503 733e 	add.w	r3, r3, #760	@ 0x2f8
 8001d08:	2204      	movs	r2, #4
 8001d0a:	2104      	movs	r1, #4
 8001d0c:	f00b fd7d 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->R_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->R);
 8001d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d12:	f503 70e6 	add.w	r0, r3, #460	@ 0x1cc
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2101      	movs	r1, #1
 8001d20:	f00b fd73 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->measurement_matrix, MOTOR_KALMAN_NUM_OUTPUTS, 1, filter->measurement_data);
 8001d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d26:	f503 7036 	add.w	r0, r3, #728	@ 0x2d8
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	f503 733a 	add.w	r3, r3, #744	@ 0x2e8
 8001d30:	2201      	movs	r2, #1
 8001d32:	2101      	movs	r1, #1
 8001d34:	f00b fd69 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->input_matrix, MOTOR_KALMAN_NUM_INPUTS, 1, filter->input_data);
 8001d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3a:	f503 7038 	add.w	r0, r3, #736	@ 0x2e0
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8001d44:	2201      	movs	r2, #1
 8001d46:	2101      	movs	r1, #1
 8001d48:	f00b fd5f 	bl	800d80a <arm_mat_init_f32>

    // Initialize matrices for transposed versions
    arm_mat_init_f32(&filter->A_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_transpose_data);
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4e:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 8001d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d54:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8001d58:	2204      	movs	r2, #4
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	f00b fd55 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->C_transpose_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->C_transpose_data);
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	f503 70f2 	add.w	r0, r3, #484	@ 0x1e4
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	f503 730b 	add.w	r3, r3, #556	@ 0x22c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2104      	movs	r1, #4
 8001d70:	f00b fd4b 	bl	800d80a <arm_mat_init_f32>

    // Initialize temp matrices essential for calculations
    arm_mat_init_f32(&filter->temp_state_matrix, MOTOR_KALMAN_NUM_STATES, 1, filter->temp_state_data);
 8001d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d76:	f503 700f 	add.w	r0, r3, #572	@ 0x23c
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d80:	2201      	movs	r2, #1
 8001d82:	2104      	movs	r1, #4
 8001d84:	f00b fd41 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_state_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->temp_state_state_data);
 8001d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8a:	f503 7011 	add.w	r0, r3, #580	@ 0x244
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	f503 731d 	add.w	r3, r3, #628	@ 0x274
 8001d94:	2204      	movs	r2, #4
 8001d96:	2104      	movs	r1, #4
 8001d98:	f00b fd37 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_state_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_STATES, filter->temp_output_state_data);
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8001da8:	2204      	movs	r2, #4
 8001daa:	2101      	movs	r1, #1
 8001dac:	f00b fd2d 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_output_output_matrix, MOTOR_KALMAN_NUM_OUTPUTS, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_output_output_data);
 8001db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db2:	f503 7015 	add.w	r0, r3, #596	@ 0x254
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	f00b fd23 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->temp_state_output_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->temp_state_output_data);
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	f503 7017 	add.w	r0, r3, #604	@ 0x25c
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	f503 7332 	add.w	r3, r3, #712	@ 0x2c8
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2104      	movs	r1, #4
 8001dd4:	f00b fd19 	bl	800d80a <arm_mat_init_f32>

    // Generate continuous-time matrices and discretize the model
    MotorKalman_DiscretizeModel(filter);
 8001dd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001dda:	f000 f82d 	bl	8001e38 <MotorKalman_DiscretizeModel>

    // Initialize system matrices after discretization
    arm_mat_init_f32(&filter->A_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->A_d);
 8001dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de0:	f503 70da 	add.w	r0, r3, #436	@ 0x1b4
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de6:	3390      	adds	r3, #144	@ 0x90
 8001de8:	2204      	movs	r2, #4
 8001dea:	2104      	movs	r1, #4
 8001dec:	f00b fd0d 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->B_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_INPUTS, filter->B_d);
 8001df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df2:	f503 70de 	add.w	r0, r3, #444	@ 0x1bc
 8001df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001df8:	33e0      	adds	r3, #224	@ 0xe0
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	f00b fd04 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->Q_d_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_STATES, filter->Q_d);
 8001e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e04:	f503 70e2 	add.w	r0, r3, #452	@ 0x1c4
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e0e:	2204      	movs	r2, #4
 8001e10:	2104      	movs	r1, #4
 8001e12:	f00b fcfa 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&filter->K_matrix, MOTOR_KALMAN_NUM_STATES, MOTOR_KALMAN_NUM_OUTPUTS, filter->K);
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	f503 70ea 	add.w	r0, r3, #468	@ 0x1d4
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1e:	f503 73ca 	add.w	r3, r3, #404	@ 0x194
 8001e22:	2201      	movs	r2, #1
 8001e24:	2104      	movs	r1, #4
 8001e26:	f00b fcf0 	bl	800d80a <arm_mat_init_f32>
}
 8001e2a:	bf00      	nop
 8001e2c:	3730      	adds	r7, #48	@ 0x30
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	42c80000 	.word	0x42c80000

08001e38 <MotorKalman_DiscretizeModel>:

void MotorKalman_DiscretizeModel(MotorKalman* filter) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    // Use the GenerateMotorMatrices function to discretize the model
    GenerateMotorMatrices(
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	edd3 7ad3 	vldr	s15, [r3, #844]	@ 0x34c
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	ed93 7ad4 	vldr	s14, [r3, #848]	@ 0x350
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	edd3 6acf 	vldr	s13, [r3, #828]	@ 0x33c
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	ed93 6ad0 	vldr	s12, [r3, #832]	@ 0x340
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	edd3 5ad2 	vldr	s11, [r3, #840]	@ 0x348
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	ed93 5ad1 	vldr	s10, [r3, #836]	@ 0x344
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	edd3 4ace 	vldr	s9, [r3, #824]	@ 0x338
        filter->J,       // Motor inertia
        filter->b,       // Viscous friction coefficient
        filter->K_e,     // Back-EMF constant
        filter->K_t,     // Torque constant
        filter->dt,      // Sample time
        filter->A_d,     // Output discrete state matrix
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f103 0290 	add.w	r2, r3, #144	@ 0x90
        filter->B_d      // Output discrete input matrix
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	33e0      	adds	r3, #224	@ 0xe0
    GenerateMotorMatrices(
 8001e74:	4619      	mov	r1, r3
 8001e76:	4610      	mov	r0, r2
 8001e78:	eeb0 3a64 	vmov.f32	s6, s9
 8001e7c:	eef0 2a45 	vmov.f32	s5, s10
 8001e80:	eeb0 2a65 	vmov.f32	s4, s11
 8001e84:	eef0 1a46 	vmov.f32	s3, s12
 8001e88:	eeb0 1a66 	vmov.f32	s2, s13
 8001e8c:	eef0 0a47 	vmov.f32	s1, s14
 8001e90:	eeb0 0a67 	vmov.f32	s0, s15
 8001e94:	f000 fb26 	bl	80024e4 <GenerateMotorMatrices>
    );

    // Initialize discrete process noise matrix Q_d (simplified for stability)
    memset(filter->Q_d, 0, sizeof(filter->Q_d));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001e9e:	2240      	movs	r2, #64	@ 0x40
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f00c fa22 	bl	800e2ec <memset>

    // Set diagonal elements for process noise (simpler but reliable approach)
    filter->Q_d[0 * MOTOR_KALMAN_NUM_STATES + 0] = 0.01f * filter->dt * filter->dt; // Position noise
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001eae:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001f0c <MotorKalman_DiscretizeModel+0xd4>
 8001eb2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	edc3 7a54 	vstr	s15, [r3, #336]	@ 0x150
    filter->Q_d[1 * MOTOR_KALMAN_NUM_STATES + 1] = filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] * filter->dt; // Velocity noise (main process noise)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	ed93 7a49 	vldr	s14, [r3, #292]	@ 0x124
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	edc3 7a59 	vstr	s15, [r3, #356]	@ 0x164
    filter->Q_d[2 * MOTOR_KALMAN_NUM_STATES + 2] = 0.1f * filter->dt; // Load torque noise
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001ee2:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001f10 <MotorKalman_DiscretizeModel+0xd8>
 8001ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	edc3 7a5e 	vstr	s15, [r3, #376]	@ 0x178
    filter->Q_d[3 * MOTOR_KALMAN_NUM_STATES + 3] = 0.01f * filter->dt; // Current noise
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	edd3 7ace 	vldr	s15, [r3, #824]	@ 0x338
 8001ef6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001f0c <MotorKalman_DiscretizeModel+0xd4>
 8001efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	edc3 7a63 	vstr	s15, [r3, #396]	@ 0x18c
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	3c23d70a 	.word	0x3c23d70a
 8001f10:	3dcccccd 	.word	0x3dcccccd

08001f14 <MotorKalman_SetProcessNoise>:

void MotorKalman_SetProcessNoise(MotorKalman* filter, float32_t Q) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	ed87 0a00 	vstr	s0, [r7]
    // Set the process noise covariance matrix Q (continuous)
    memset(filter->Q, 0, sizeof(filter->Q));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8001f26:	2240      	movs	r2, #64	@ 0x40
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f00c f9de 	bl	800e2ec <memset>

    // Only the velocity state (index 1) has process noise per G = [0;1;0;0]
    filter->Q[1 * MOTOR_KALMAN_NUM_STATES + 1] = Q * Q;
 8001f30:	edd7 7a00 	vldr	s15, [r7]
 8001f34:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
    filter->sigma_ml = Q;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354

    // Update the discrete process noise matrix if A_d has already been initialized
    if (filter->A_d[0] != 0.0f || filter->A_d[1] != 0.0f) {
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	edd3 7a24 	vldr	s15, [r3, #144]	@ 0x90
 8001f4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f54:	d107      	bne.n	8001f66 <MotorKalman_SetProcessNoise+0x52>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	edd3 7a25 	vldr	s15, [r3, #148]	@ 0x94
 8001f5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d002      	beq.n	8001f6c <MotorKalman_SetProcessNoise+0x58>
        MotorKalman_DiscretizeModel(filter); // Recompute discretization with new Q
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff ff66 	bl	8001e38 <MotorKalman_DiscretizeModel>
    }
}
 8001f6c:	bf00      	nop
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <MotorKalman_SetMeasurementNoise>:

void MotorKalman_SetMeasurementNoise(MotorKalman* filter, float32_t R) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	ed87 0a00 	vstr	s0, [r7]
    // Store the noise value
    filter->sigma_pos = sqrtf(R);
 8001f80:	ed97 0a00 	vldr	s0, [r7]
 8001f84:	f00c fa6c 	bl	800e460 <sqrtf>
 8001f88:	eef0 7a40 	vmov.f32	s15, s0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	edc3 7ad6 	vstr	s15, [r3, #856]	@ 0x358

    // Set the measurement noise covariance matrix R
    filter->R[0] = R;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	f8c3 2190 	str.w	r2, [r3, #400]	@ 0x190
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <matrix_copy>:

#include "MotorMatrixGenerator.h"
#include <math.h>
#include <string.h>

static void matrix_copy(float32_t *src, float32_t *dst, int size) {
 8001fa2:	b480      	push	{r7}
 8001fa4:	b087      	sub	sp, #28
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	60f8      	str	r0, [r7, #12]
 8001faa:	60b9      	str	r1, [r7, #8]
 8001fac:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < size; i++) {
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	e00c      	b.n	8001fce <matrix_copy+0x2c>
        dst[i] = src[i];
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	441a      	add	r2, r3
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	68b9      	ldr	r1, [r7, #8]
 8001fc2:	440b      	add	r3, r1
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dbee      	blt.n	8001fb4 <matrix_copy+0x12>
    }
}
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <discretize_system_with_arm>:

static void discretize_system_with_arm(float32_t *A_c, float32_t *B_c, float32_t dt,
                                      float32_t *A_d, float32_t *B_d) {
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	f5ad 7d2f 	sub.w	sp, sp, #700	@ 0x2bc
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	f507 742e 	add.w	r4, r7, #696	@ 0x2b8
 8001ff0:	f5a4 7429 	sub.w	r4, r4, #676	@ 0x2a4
 8001ff4:	6020      	str	r0, [r4, #0]
 8001ff6:	f507 702e 	add.w	r0, r7, #696	@ 0x2b8
 8001ffa:	f5a0 702a 	sub.w	r0, r0, #680	@ 0x2a8
 8001ffe:	6001      	str	r1, [r0, #0]
 8002000:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002004:	f5a1 712b 	sub.w	r1, r1, #684	@ 0x2ac
 8002008:	ed81 0a00 	vstr	s0, [r1]
 800200c:	f507 712e 	add.w	r1, r7, #696	@ 0x2b8
 8002010:	f5a1 712c 	sub.w	r1, r1, #688	@ 0x2b0
 8002014:	600a      	str	r2, [r1, #0]
 8002016:	f507 722e 	add.w	r2, r7, #696	@ 0x2b8
 800201a:	f5a2 722d 	sub.w	r2, r2, #692	@ 0x2b4
 800201e:	6013      	str	r3, [r2, #0]
    // Initialize ARM matrix instances
    arm_matrix_instance_f32 A_c_matrix, A_d_matrix, B_c_matrix, B_d_matrix;
    arm_mat_init_f32(&A_c_matrix, 4, 4, A_c);
 8002020:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002024:	f5a3 7329 	sub.w	r3, r3, #676	@ 0x2a4
 8002028:	f507 7029 	add.w	r0, r7, #676	@ 0x2a4
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2204      	movs	r2, #4
 8002030:	2104      	movs	r1, #4
 8002032:	f00b fbea 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&A_d_matrix, 4, 4, A_d);
 8002036:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800203a:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 800203e:	f507 7027 	add.w	r0, r7, #668	@ 0x29c
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2204      	movs	r2, #4
 8002046:	2104      	movs	r1, #4
 8002048:	f00b fbdf 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&B_c_matrix, 4, 1, B_c);
 800204c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002050:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8002054:	f507 7025 	add.w	r0, r7, #660	@ 0x294
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2201      	movs	r2, #1
 800205c:	2104      	movs	r1, #4
 800205e:	f00b fbd4 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&B_d_matrix, 4, 1, B_d);
 8002062:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002066:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800206a:	f507 7023 	add.w	r0, r7, #652	@ 0x28c
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2201      	movs	r2, #1
 8002072:	2104      	movs	r1, #4
 8002074:	f00b fbc9 	bl	800d80a <arm_mat_init_f32>

    // Create identity matrix
    float32_t I_data[16] = {0};
 8002078:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 800207c:	2240      	movs	r2, #64	@ 0x40
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f00c f933 	bl	800e2ec <memset>
    arm_matrix_instance_f32 I_matrix;
    arm_mat_init_f32(&I_matrix, 4, 4, I_data);
 8002086:	f507 7313 	add.w	r3, r7, #588	@ 0x24c
 800208a:	f507 7011 	add.w	r0, r7, #580	@ 0x244
 800208e:	2204      	movs	r2, #4
 8002090:	2104      	movs	r1, #4
 8002092:	f00b fbba 	bl	800d80a <arm_mat_init_f32>
    for (int i = 0; i < 4; i++) {
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800209c:	e011      	b.n	80020c2 <discretize_system_with_arm+0xde>
        I_data[i*4 + i] = 1.0f;
 800209e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	f503 732e 	add.w	r3, r3, #696	@ 0x2b8
 80020ae:	443b      	add	r3, r7
 80020b0:	3b6c      	subs	r3, #108	@ 0x6c
 80020b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80020b6:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80020b8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80020bc:	3301      	adds	r3, #1
 80020be:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 80020c2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	dde9      	ble.n	800209e <discretize_system_with_arm+0xba>
    }

    // Create scaled A matrix (A*dt)
    float32_t A_dt_data[16];
    arm_matrix_instance_f32 A_dt_matrix;
    arm_mat_init_f32(&A_dt_matrix, 4, 4, A_dt_data);
 80020ca:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 80020ce:	f507 70fe 	add.w	r0, r7, #508	@ 0x1fc
 80020d2:	2204      	movs	r2, #4
 80020d4:	2104      	movs	r1, #4
 80020d6:	f00b fb98 	bl	800d80a <arm_mat_init_f32>
    arm_mat_scale_f32(&A_c_matrix, dt, &A_dt_matrix);
 80020da:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 80020de:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80020e2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80020e6:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 80020ea:	ed93 0a00 	vldr	s0, [r3]
 80020ee:	4610      	mov	r0, r2
 80020f0:	f00b ff94 	bl	800e01c <arm_mat_scale_f32>

    // Calculate A_d = exp(A*dt) using Taylor series approximation
    // Initialize A_d to identity matrix
    matrix_copy(I_data, A_d, 16);
 80020f4:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80020f8:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 80020fc:	f507 7013 	add.w	r0, r7, #588	@ 0x24c
 8002100:	2210      	movs	r2, #16
 8002102:	6819      	ldr	r1, [r3, #0]
 8002104:	f7ff ff4d 	bl	8001fa2 <matrix_copy>

    // Calculate powers of A*dt and add them to A_d
    float32_t A_power_data[16];
    float32_t temp_data[16];
    arm_matrix_instance_f32 A_power_matrix, temp_matrix;
    arm_mat_init_f32(&A_power_matrix, 4, 4, A_power_data);
 8002108:	f507 73de 	add.w	r3, r7, #444	@ 0x1bc
 800210c:	f507 70ba 	add.w	r0, r7, #372	@ 0x174
 8002110:	2204      	movs	r2, #4
 8002112:	2104      	movs	r1, #4
 8002114:	f00b fb79 	bl	800d80a <arm_mat_init_f32>
    arm_mat_init_f32(&temp_matrix, 4, 4, temp_data);
 8002118:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800211c:	f507 70b6 	add.w	r0, r7, #364	@ 0x16c
 8002120:	2204      	movs	r2, #4
 8002122:	2104      	movs	r1, #4
 8002124:	f00b fb71 	bl	800d80a <arm_mat_init_f32>

    // First term: I + A*dt
    arm_mat_add_f32(&I_matrix, &A_dt_matrix, &A_d_matrix);
 8002128:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 800212c:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 8002130:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 8002134:	4618      	mov	r0, r3
 8002136:	f00b fb2d 	bl	800d794 <arm_mat_add_f32>

    // Copy A*dt to A_power for computing higher powers
    matrix_copy(A_dt_data, A_power_data, 16);
 800213a:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 800213e:	f507 7301 	add.w	r3, r7, #516	@ 0x204
 8002142:	2210      	movs	r2, #16
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff2c 	bl	8001fa2 <matrix_copy>

    // Compute higher order terms using Taylor series
    // A_d = I + A*dt + (A*dt)^2/2 + (A*dt)^3/6 + ...
    float32_t factorial = 1.0f;
 800214a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800214e:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 8002152:	2302      	movs	r3, #2
 8002154:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8002158:	e03a      	b.n	80021d0 <discretize_system_with_arm+0x1ec>
        factorial *= term;
 800215a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002166:	ed97 7aac 	vldr	s14, [r7, #688]	@ 0x2b0
 800216a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216e:	edc7 7aac 	vstr	s15, [r7, #688]	@ 0x2b0

        // Compute next power: A_power = A_power * A_dt
        arm_mat_mult_f32(&A_power_matrix, &A_dt_matrix, &temp_matrix);
 8002172:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 8002176:	f507 71fe 	add.w	r1, r7, #508	@ 0x1fc
 800217a:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 800217e:	4618      	mov	r0, r3
 8002180:	f00b fed2 	bl	800df28 <arm_mat_mult_f32>
        matrix_copy(temp_data, A_power_data, 16);
 8002184:	f507 71de 	add.w	r1, r7, #444	@ 0x1bc
 8002188:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800218c:	2210      	movs	r2, #16
 800218e:	4618      	mov	r0, r3
 8002190:	f7ff ff07 	bl	8001fa2 <matrix_copy>

        // Scale by 1/factorial
        arm_mat_scale_f32(&A_power_matrix, 1.0f/factorial, &temp_matrix);
 8002194:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002198:	edd7 7aac 	vldr	s15, [r7, #688]	@ 0x2b0
 800219c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021a0:	f507 72b6 	add.w	r2, r7, #364	@ 0x16c
 80021a4:	f507 73ba 	add.w	r3, r7, #372	@ 0x174
 80021a8:	4611      	mov	r1, r2
 80021aa:	eeb0 0a47 	vmov.f32	s0, s14
 80021ae:	4618      	mov	r0, r3
 80021b0:	f00b ff34 	bl	800e01c <arm_mat_scale_f32>

        // Add to A_d
        arm_mat_add_f32(&A_d_matrix, &temp_matrix, &A_d_matrix);
 80021b4:	f507 7227 	add.w	r2, r7, #668	@ 0x29c
 80021b8:	f507 71b6 	add.w	r1, r7, #364	@ 0x16c
 80021bc:	f507 7327 	add.w	r3, r7, #668	@ 0x29c
 80021c0:	4618      	mov	r0, r3
 80021c2:	f00b fae7 	bl	800d794 <arm_mat_add_f32>
    for (int term = 2; term <= 10; term++) {  // Using more terms for better accuracy
 80021c6:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80021ca:	3301      	adds	r3, #1
 80021cc:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 80021d0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	@ 0x2ac
 80021d4:	2b0a      	cmp	r3, #10
 80021d6:	ddc0      	ble.n	800215a <discretize_system_with_arm+0x176>

    // We can approximate this integral using the Taylor series for e^(A*s):
    // B_d = [dt*I + (A*dt^2)/2 + (A^2*dt^3)/6 + (A^3*dt^4)/24 + ...] * B_c

    // First term: dt*I * B_c = dt * B_c
    arm_mat_scale_f32(&B_c_matrix, dt, &B_d_matrix);
 80021d8:	f507 7123 	add.w	r1, r7, #652	@ 0x28c
 80021dc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80021e0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80021e4:	f507 7225 	add.w	r2, r7, #660	@ 0x294
 80021e8:	ed93 0a00 	vldr	s0, [r3]
 80021ec:	4610      	mov	r0, r2
 80021ee:	f00b ff15 	bl	800e01c <arm_mat_scale_f32>

    // Second term: (A*dt^2)/2 * B_c
    float32_t AB_c[4] = {0};
 80021f2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80021f6:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80021fa:	461a      	mov	r2, r3
 80021fc:	2300      	movs	r3, #0
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	6053      	str	r3, [r2, #4]
 8002202:	6093      	str	r3, [r2, #8]
 8002204:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 AB_c_matrix;
    arm_mat_init_f32(&AB_c_matrix, 4, 1, AB_c);
 8002206:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800220a:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 800220e:	2201      	movs	r2, #1
 8002210:	2104      	movs	r1, #4
 8002212:	f00b fafa 	bl	800d80a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &B_c_matrix, &AB_c_matrix);
 8002216:	f507 72aa 	add.w	r2, r7, #340	@ 0x154
 800221a:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800221e:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 8002222:	4618      	mov	r0, r3
 8002224:	f00b fe80 	bl	800df28 <arm_mat_mult_f32>

    float32_t temp_B[4];
    arm_matrix_instance_f32 temp_B_matrix;
    arm_mat_init_f32(&temp_B_matrix, 4, 1, temp_B);
 8002228:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 800222c:	f507 709e 	add.w	r0, r7, #316	@ 0x13c
 8002230:	2201      	movs	r2, #1
 8002232:	2104      	movs	r1, #4
 8002234:	f00b fae9 	bl	800d80a <arm_mat_init_f32>
    arm_mat_scale_f32(&AB_c_matrix, dt*dt/2.0f, &temp_B_matrix);
 8002238:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800223c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002248:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800224c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002250:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8002254:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8002258:	4611      	mov	r1, r2
 800225a:	eeb0 0a47 	vmov.f32	s0, s14
 800225e:	4618      	mov	r0, r3
 8002260:	f00b fedc 	bl	800e01c <arm_mat_scale_f32>

    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 8002264:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002268:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 800226c:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 8002270:	4618      	mov	r0, r3
 8002272:	f00b fa8f 	bl	800d794 <arm_mat_add_f32>

    // Third term: (A^2*dt^3)/6 * B_c
    float32_t A2_data[16] = {0};
 8002276:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800227a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800227e:	4618      	mov	r0, r3
 8002280:	2340      	movs	r3, #64	@ 0x40
 8002282:	461a      	mov	r2, r3
 8002284:	2100      	movs	r1, #0
 8002286:	f00c f831 	bl	800e2ec <memset>
    arm_matrix_instance_f32 A2_matrix;
    arm_mat_init_f32(&A2_matrix, 4, 4, A2_data);
 800228a:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 800228e:	f107 00f4 	add.w	r0, r7, #244	@ 0xf4
 8002292:	2204      	movs	r2, #4
 8002294:	2104      	movs	r1, #4
 8002296:	f00b fab8 	bl	800d80a <arm_mat_init_f32>
    arm_mat_mult_f32(&A_c_matrix, &A_c_matrix, &A2_matrix);
 800229a:	f107 02f4 	add.w	r2, r7, #244	@ 0xf4
 800229e:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 80022a2:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80022a6:	4618      	mov	r0, r3
 80022a8:	f00b fe3e 	bl	800df28 <arm_mat_mult_f32>

    float32_t A2B_c[4] = {0};
 80022ac:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80022b0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80022b4:	461a      	mov	r2, r3
 80022b6:	2300      	movs	r3, #0
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	6053      	str	r3, [r2, #4]
 80022bc:	6093      	str	r3, [r2, #8]
 80022be:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A2B_c_matrix;
    arm_mat_init_f32(&A2B_c_matrix, 4, 1, A2B_c);
 80022c0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80022c4:	f107 00dc 	add.w	r0, r7, #220	@ 0xdc
 80022c8:	2201      	movs	r2, #1
 80022ca:	2104      	movs	r1, #4
 80022cc:	f00b fa9d 	bl	800d80a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &B_c_matrix, &A2B_c_matrix);
 80022d0:	f107 02dc 	add.w	r2, r7, #220	@ 0xdc
 80022d4:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 80022d8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80022dc:	4618      	mov	r0, r3
 80022de:	f00b fe23 	bl	800df28 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A2B_c_matrix, dt*dt*dt/6.0f, &temp_B_matrix);
 80022e2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80022e6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80022ea:	edd3 7a00 	vldr	s15, [r3]
 80022ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80022f2:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80022f6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002302:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 8002306:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800230a:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 800230e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002312:	4611      	mov	r1, r2
 8002314:	eeb0 0a47 	vmov.f32	s0, s14
 8002318:	4618      	mov	r0, r3
 800231a:	f00b fe7f 	bl	800e01c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 800231e:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 8002322:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 8002326:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 800232a:	4618      	mov	r0, r3
 800232c:	f00b fa32 	bl	800d794 <arm_mat_add_f32>

    // Fourth term: (A^3*dt^4)/24 * B_c
    float32_t A3_data[16] = {0};
 8002330:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002334:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8002338:	4618      	mov	r0, r3
 800233a:	2340      	movs	r3, #64	@ 0x40
 800233c:	461a      	mov	r2, r3
 800233e:	2100      	movs	r1, #0
 8002340:	f00b ffd4 	bl	800e2ec <memset>
    arm_matrix_instance_f32 A3_matrix;
    arm_mat_init_f32(&A3_matrix, 4, 4, A3_data);
 8002344:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002348:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 800234c:	2204      	movs	r2, #4
 800234e:	2104      	movs	r1, #4
 8002350:	f00b fa5b 	bl	800d80a <arm_mat_init_f32>
    arm_mat_mult_f32(&A2_matrix, &A_c_matrix, &A3_matrix);
 8002354:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8002358:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 800235c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8002360:	4618      	mov	r0, r3
 8002362:	f00b fde1 	bl	800df28 <arm_mat_mult_f32>

    float32_t A3B_c[4] = {0};
 8002366:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800236a:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800236e:	461a      	mov	r2, r3
 8002370:	2300      	movs	r3, #0
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	6053      	str	r3, [r2, #4]
 8002376:	6093      	str	r3, [r2, #8]
 8002378:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A3B_c_matrix;
    arm_mat_init_f32(&A3B_c_matrix, 4, 1, A3B_c);
 800237a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800237e:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8002382:	2201      	movs	r2, #1
 8002384:	2104      	movs	r1, #4
 8002386:	f00b fa40 	bl	800d80a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &B_c_matrix, &A3B_c_matrix);
 800238a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800238e:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8002392:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002396:	4618      	mov	r0, r3
 8002398:	f00b fdc6 	bl	800df28 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A3B_c_matrix, dt*dt*dt*dt/24.0f, &temp_B_matrix);
 800239c:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80023a0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80023ac:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80023b0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023bc:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80023c0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023cc:	eef3 6a08 	vmov.f32	s13, #56	@ 0x41c00000  24.0
 80023d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80023d4:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80023d8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80023dc:	4611      	mov	r1, r2
 80023de:	eeb0 0a47 	vmov.f32	s0, s14
 80023e2:	4618      	mov	r0, r3
 80023e4:	f00b fe1a 	bl	800e01c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80023e8:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80023ec:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80023f0:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80023f4:	4618      	mov	r0, r3
 80023f6:	f00b f9cd 	bl	800d794 <arm_mat_add_f32>

    // Fifth term: (A^4*dt^5)/120 * B_c
    float32_t A4_data[16] = {0};
 80023fa:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 80023fe:	f5a3 731f 	sub.w	r3, r3, #636	@ 0x27c
 8002402:	4618      	mov	r0, r3
 8002404:	2340      	movs	r3, #64	@ 0x40
 8002406:	461a      	mov	r2, r3
 8002408:	2100      	movs	r1, #0
 800240a:	f00b ff6f 	bl	800e2ec <memset>
    arm_matrix_instance_f32 A4_matrix;
    arm_mat_init_f32(&A4_matrix, 4, 4, A4_data);
 800240e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002412:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002416:	2204      	movs	r2, #4
 8002418:	2104      	movs	r1, #4
 800241a:	f00b f9f6 	bl	800d80a <arm_mat_init_f32>
    arm_mat_mult_f32(&A3_matrix, &A_c_matrix, &A4_matrix);
 800241e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002422:	f507 7129 	add.w	r1, r7, #676	@ 0x2a4
 8002426:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800242a:	4618      	mov	r0, r3
 800242c:	f00b fd7c 	bl	800df28 <arm_mat_mult_f32>

    float32_t A4B_c[4] = {0};
 8002430:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 8002434:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8002438:	461a      	mov	r2, r3
 800243a:	2300      	movs	r3, #0
 800243c:	6013      	str	r3, [r2, #0]
 800243e:	6053      	str	r3, [r2, #4]
 8002440:	6093      	str	r3, [r2, #8]
 8002442:	60d3      	str	r3, [r2, #12]
    arm_matrix_instance_f32 A4B_c_matrix;
    arm_mat_init_f32(&A4B_c_matrix, 4, 1, A4B_c);
 8002444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002448:	f107 001c 	add.w	r0, r7, #28
 800244c:	2201      	movs	r2, #1
 800244e:	2104      	movs	r1, #4
 8002450:	f00b f9db 	bl	800d80a <arm_mat_init_f32>
    arm_mat_mult_f32(&A4_matrix, &B_c_matrix, &A4B_c_matrix);
 8002454:	f107 021c 	add.w	r2, r7, #28
 8002458:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 800245c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002460:	4618      	mov	r0, r3
 8002462:	f00b fd61 	bl	800df28 <arm_mat_mult_f32>

    arm_mat_scale_f32(&A4B_c_matrix, dt*dt*dt*dt*dt/120.0f, &temp_B_matrix);
 8002466:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800246a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800246e:	edd3 7a00 	vldr	s15, [r3]
 8002472:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002476:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800247a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800247e:	edd3 7a00 	vldr	s15, [r3]
 8002482:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002486:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800248a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800248e:	edd3 7a00 	vldr	s15, [r3]
 8002492:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002496:	f507 732e 	add.w	r3, r7, #696	@ 0x2b8
 800249a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80024e0 <discretize_system_with_arm+0x4fc>
 80024aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024ae:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80024b2:	f107 031c 	add.w	r3, r7, #28
 80024b6:	4611      	mov	r1, r2
 80024b8:	eeb0 0a47 	vmov.f32	s0, s14
 80024bc:	4618      	mov	r0, r3
 80024be:	f00b fdad 	bl	800e01c <arm_mat_scale_f32>
    arm_mat_add_f32(&B_d_matrix, &temp_B_matrix, &B_d_matrix);
 80024c2:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 80024c6:	f507 719e 	add.w	r1, r7, #316	@ 0x13c
 80024ca:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00b f960 	bl	800d794 <arm_mat_add_f32>
}
 80024d4:	bf00      	nop
 80024d6:	f507 772f 	add.w	r7, r7, #700	@ 0x2bc
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd90      	pop	{r4, r7, pc}
 80024de:	bf00      	nop
 80024e0:	42f00000 	.word	0x42f00000

080024e4 <GenerateMotorMatrices>:

void GenerateMotorMatrices(float32_t R_a, float32_t L_a, float32_t J, float32_t b,
                          float32_t ke, float32_t kt, float32_t dt,
                          float32_t *A, float32_t *B) {
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b09e      	sub	sp, #120	@ 0x78
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80024ee:	edc7 0a08 	vstr	s1, [r7, #32]
 80024f2:	ed87 1a07 	vstr	s2, [r7, #28]
 80024f6:	edc7 1a06 	vstr	s3, [r7, #24]
 80024fa:	ed87 2a05 	vstr	s4, [r7, #20]
 80024fe:	edc7 2a04 	vstr	s5, [r7, #16]
 8002502:	ed87 3a03 	vstr	s6, [r7, #12]
 8002506:	60b8      	str	r0, [r7, #8]
 8002508:	6079      	str	r1, [r7, #4]
    // Generate continuous time matrices
    float32_t A_c[16] = {0}; // 4x4 matrix
 800250a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800250e:	2240      	movs	r2, #64	@ 0x40
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f00b feea 	bl	800e2ec <memset>
    float32_t B_c[4] = {0};  // 4x1 matrix
 8002518:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
    // State Transition Matrix
    // Ac = [0 1 0 0;
    //       0 -b/J -1/J kt/J;
    //       0 0 0 0;
    //       0 -ke/L 0 -R/L];
    A_c[0*4 + 1] = 1.0f;
 8002526:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800252a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    A_c[1*4 + 1] = -b/J;
 800252c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002530:	eef1 6a67 	vneg.f32	s13, s15
 8002534:	ed97 7a07 	vldr	s14, [r7, #28]
 8002538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800253c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    A_c[1*4 + 2] = -1.0f/J;
 8002540:	eeff 6a00 	vmov.f32	s13, #240	@ 0xbf800000 -1.0
 8002544:	ed97 7a07 	vldr	s14, [r7, #28]
 8002548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    A_c[1*4 + 3] = kt/J;
 8002550:	edd7 6a04 	vldr	s13, [r7, #16]
 8002554:	ed97 7a07 	vldr	s14, [r7, #28]
 8002558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800255c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    // Third row all zeros (for load torque state)

    A_c[3*4 + 1] = -ke/L_a;
 8002560:	edd7 7a05 	vldr	s15, [r7, #20]
 8002564:	eef1 6a67 	vneg.f32	s13, s15
 8002568:	ed97 7a08 	vldr	s14, [r7, #32]
 800256c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002570:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    A_c[3*4 + 3] = -R_a/L_a;
 8002574:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002578:	eef1 6a67 	vneg.f32	s13, s15
 800257c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002580:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002584:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    // Input Matrix
    // Bc = [0; 0; 0; 1/L];
    B_c[3] = 1.0f/L_a;
 8002588:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800258c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002594:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Discretize the system using ARM CMSIS DSP
    discretize_system_with_arm(A_c, B_c, dt, A, B);
 8002598:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800259c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	ed97 0a03 	vldr	s0, [r7, #12]
 80025a8:	f7ff fd1c 	bl	8001fe4 <discretize_system_with_arm>
}
 80025ac:	bf00      	nop
 80025ae:	3778      	adds	r7, #120	@ 0x78
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4a0b      	ldr	r2, [pc, #44]	@ (80025f4 <PWM_init+0x40>)
 80025c6:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68ba      	ldr	r2, [r7, #8]
 80025cc:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	88fa      	ldrh	r2, [r7, #6]
 80025d2:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 80025da:	68b8      	ldr	r0, [r7, #8]
 80025dc:	f007 fa26 	bl	8009a2c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	4619      	mov	r1, r3
 80025e4:	68b8      	ldr	r0, [r7, #8]
 80025e6:	f007 fb6d 	bl	8009cc4 <HAL_TIM_PWM_Start>
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	0a21fe80 	.word	0x0a21fe80

080025f8 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 80025f8:	b5b0      	push	{r4, r5, r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	ed87 0a02 	vstr	s0, [r7, #8]
 8002604:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8002608:	edd7 7a02 	vldr	s15, [r7, #8]
 800260c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002614:	d137      	bne.n	8002686 <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	889b      	ldrh	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d105      	bne.n	800262a <PWM_write_range+0x32>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2200      	movs	r2, #0
 8002626:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8002628:	e0e1      	b.n	80027ee <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	889b      	ldrh	r3, [r3, #4]
 800262e:	2b04      	cmp	r3, #4
 8002630:	d105      	bne.n	800263e <PWM_write_range+0x46>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2300      	movs	r3, #0
 800263a:	6393      	str	r3, [r2, #56]	@ 0x38
 800263c:	e0d7      	b.n	80027ee <PWM_write_range+0x1f6>
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	889b      	ldrh	r3, [r3, #4]
 8002642:	2b08      	cmp	r3, #8
 8002644:	d105      	bne.n	8002652 <PWM_write_range+0x5a>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2300      	movs	r3, #0
 800264e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002650:	e0cd      	b.n	80027ee <PWM_write_range+0x1f6>
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	889b      	ldrh	r3, [r3, #4]
 8002656:	2b0c      	cmp	r3, #12
 8002658:	d105      	bne.n	8002666 <PWM_write_range+0x6e>
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	2300      	movs	r3, #0
 8002662:	6413      	str	r3, [r2, #64]	@ 0x40
 8002664:	e0c3      	b.n	80027ee <PWM_write_range+0x1f6>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	889b      	ldrh	r3, [r3, #4]
 800266a:	2b10      	cmp	r3, #16
 800266c:	d105      	bne.n	800267a <PWM_write_range+0x82>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2300      	movs	r3, #0
 8002676:	6493      	str	r3, [r2, #72]	@ 0x48
 8002678:	e0b9      	b.n	80027ee <PWM_write_range+0x1f6>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2300      	movs	r3, #0
 8002682:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8002684:	e0b3      	b.n	80027ee <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002692:	ed97 7a02 	vldr	s14, [r7, #8]
 8002696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800269a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800269e:	ee17 2a90 	vmov	r2, s15
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80026ae:	33fe      	adds	r3, #254	@ 0xfe
 80026b0:	4a53      	ldr	r2, [pc, #332]	@ (8002800 <PWM_write_range+0x208>)
 80026b2:	fba2 2303 	umull	r2, r3, r2, r3
 80026b6:	0bdb      	lsrs	r3, r3, #15
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	3b01      	subs	r3, #1
 80026bc:	b29a      	uxth	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	899b      	ldrh	r3, [r3, #12]
 80026d2:	3301      	adds	r3, #1
 80026d4:	ee07 3a90 	vmov	s15, r3
 80026d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80026e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80026ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026f4:	ee17 3a90 	vmov	r3, s15
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	89db      	ldrh	r3, [r3, #14]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fd feda 	bl	80004bc <__aeabi_i2d>
 8002708:	4604      	mov	r4, r0
 800270a:	460d      	mov	r5, r1
 800270c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002710:	eef0 7ae7 	vabs.f32	s15, s15
 8002714:	ee17 0a90 	vmov	r0, s15
 8002718:	f7fd fee2 	bl	80004e0 <__aeabi_f2d>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4620      	mov	r0, r4
 8002722:	4629      	mov	r1, r5
 8002724:	f7fd ff34 	bl	8000590 <__aeabi_dmul>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4610      	mov	r0, r2
 800272e:	4619      	mov	r1, r3
 8002730:	a331      	add	r3, pc, #196	@ (adr r3, 80027f8 <PWM_write_range+0x200>)
 8002732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002736:	f7fe f855 	bl	80007e4 <__aeabi_ddiv>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4610      	mov	r0, r2
 8002740:	4619      	mov	r1, r3
 8002742:	f7fe f9e7 	bl	8000b14 <__aeabi_d2uiz>
 8002746:	4603      	mov	r3, r0
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	899a      	ldrh	r2, [r3, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	89da      	ldrh	r2, [r3, #14]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	89da      	ldrh	r2, [r3, #14]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	889b      	ldrh	r3, [r3, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <PWM_write_range+0x190>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	6952      	ldr	r2, [r2, #20]
 8002784:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002786:	e032      	b.n	80027ee <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	889b      	ldrh	r3, [r3, #4]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d106      	bne.n	800279e <PWM_write_range+0x1a6>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800279c:	e027      	b.n	80027ee <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	889b      	ldrh	r3, [r3, #4]
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d106      	bne.n	80027b4 <PWM_write_range+0x1bc>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80027b2:	e01c      	b.n	80027ee <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	889b      	ldrh	r3, [r3, #4]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d106      	bne.n	80027ca <PWM_write_range+0x1d2>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80027c8:	e011      	b.n	80027ee <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	889b      	ldrh	r3, [r3, #4]
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d106      	bne.n	80027e0 <PWM_write_range+0x1e8>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80027de:	e006      	b.n	80027ee <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80027ec:	e7ff      	b.n	80027ee <PWM_write_range+0x1f6>
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bdb0      	pop	{r4, r5, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	00000000 	.word	0x00000000
 80027fc:	40efffe0 	.word	0x40efffe0
 8002800:	80008001 	.word	0x80008001

08002804 <QEI_init>:
* Author: pboon
*/

#include "QEI.h"

void QEI_init(QEI *qei, TIM_HandleTypeDef *htimx, int32_t ppr, uint32_t freq, float ratio, float pulley_diameter) {
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6178      	str	r0, [r7, #20]
 800280c:	6139      	str	r1, [r7, #16]
 800280e:	60fa      	str	r2, [r7, #12]
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	ed87 0a01 	vstr	s0, [r7, #4]
 8002816:	edc7 0a00 	vstr	s1, [r7]
    qei->htimx = htimx;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	619a      	str	r2, [r3, #24]
    qei->ppr = ppr;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	621a      	str	r2, [r3, #32]
    qei->freq = freq;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	629a      	str	r2, [r3, #40]	@ 0x28
    qei->gear_ratio = ratio;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54
    qei->pulley_diameter = pulley_diameter;
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	659a      	str	r2, [r3, #88]	@ 0x58

    qei->c[NOW] = 0;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
    qei->r[NOW] = 0;
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f04f 0200 	mov.w	r2, #0
 8002852:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	615a      	str	r2, [r3, #20]

    qei->enc_period = 65536 - (65536 % ppr);
 8002864:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	fb93 f2f2 	sdiv	r2, r3, r2
 800286e:	68f9      	ldr	r1, [r7, #12]
 8002870:	fb01 f202 	mul.w	r2, r1, r2
 8002874:	1a9b      	subs	r3, r3, r2
 8002876:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	61da      	str	r2, [r3, #28]

    qei->diff_counts = 0;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	2200      	movs	r2, #0
 8002882:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->pulses = 0;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2200      	movs	r2, #0
 8002888:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->rads = 0;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	649a      	str	r2, [r3, #72]	@ 0x48
    qei->revs = 0;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    qei->pps = 0;
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    qei->radps = 0;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	635a      	str	r2, [r3, #52]	@ 0x34
    qei->mmps = 0;
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	64da      	str	r2, [r3, #76]	@ 0x4c
    qei->rpm = 0;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	631a      	str	r2, [r3, #48]	@ 0x30

    qei->radpss = 0;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	f04f 0200 	mov.w	r2, #0
 80028c8:	645a      	str	r2, [r3, #68]	@ 0x44
    qei->mmpss = 0;
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	651a      	str	r2, [r3, #80]	@ 0x50

    HAL_TIM_Encoder_Start(htimx, TIM_CHANNEL_ALL);
 80028d2:	213c      	movs	r1, #60	@ 0x3c
 80028d4:	6938      	ldr	r0, [r7, #16]
 80028d6:	f007 fcb1 	bl	800a23c <HAL_TIM_Encoder_Start>
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	0000      	movs	r0, r0
 80028e4:	0000      	movs	r0, r0
	...

080028e8 <QEI_get_diff_count>:

void QEI_get_diff_count(QEI *qei) {
 80028e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
    // Get current counter value
    qei->c[NOW] = __HAL_TIM_GET_COUNTER(qei->htimx);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	601a      	str	r2, [r3, #0]

    // Calculate difference with handling for timer overflow/underflow
    int32_t diff_counts = qei->c[NOW] - qei->c[PREV];
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	60fb      	str	r3, [r7, #12]

    // Handle counter overflow/underflow
    if (diff_counts > qei->enc_period / 2) {
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69db      	ldr	r3, [r3, #28]
 800290e:	0fda      	lsrs	r2, r3, #31
 8002910:	4413      	add	r3, r2
 8002912:	105b      	asrs	r3, r3, #1
 8002914:	461a      	mov	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4293      	cmp	r3, r2
 800291a:	dd05      	ble.n	8002928 <QEI_get_diff_count+0x40>
        diff_counts -= qei->enc_period;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e00e      	b.n	8002946 <QEI_get_diff_count+0x5e>
    } else if (diff_counts < -(qei->enc_period / 2)) {
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69db      	ldr	r3, [r3, #28]
 800292c:	0fda      	lsrs	r2, r3, #31
 800292e:	4413      	add	r3, r2
 8002930:	105b      	asrs	r3, r3, #1
 8002932:	425b      	negs	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4293      	cmp	r3, r2
 800293a:	da04      	bge.n	8002946 <QEI_get_diff_count+0x5e>
        diff_counts += qei->enc_period;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
    }

    qei->diff_counts = diff_counts;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24

    // Update position counters
    qei->pulses += qei->diff_counts;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	441a      	add	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs += (qei->diff_counts / (float)(qei->ppr)) * qei->gear_ratio;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	ee07 3a90 	vmov	s15, r3
 8002968:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002978:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8002982:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    qei->rads += (qei->diff_counts / (float)(qei->ppr)) * 2 * M_PI * qei->gear_ratio;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	4618      	mov	r0, r3
 8002996:	f7fd fda3 	bl	80004e0 <__aeabi_f2d>
 800299a:	4604      	mov	r4, r0
 800299c:	460d      	mov	r5, r1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	ee07 3a90 	vmov	s15, r3
 80029a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	ee07 3a90 	vmov	s15, r3
 80029b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029be:	ee17 0a90 	vmov	r0, s15
 80029c2:	f7fd fd8d 	bl	80004e0 <__aeabi_f2d>
 80029c6:	a33c      	add	r3, pc, #240	@ (adr r3, 8002ab8 <QEI_get_diff_count+0x1d0>)
 80029c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029cc:	f7fd fde0 	bl	8000590 <__aeabi_dmul>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4690      	mov	r8, r2
 80029d6:	4699      	mov	r9, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fd7f 	bl	80004e0 <__aeabi_f2d>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4640      	mov	r0, r8
 80029e8:	4649      	mov	r1, r9
 80029ea:	f7fd fdd1 	bl	8000590 <__aeabi_dmul>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4620      	mov	r0, r4
 80029f4:	4629      	mov	r1, r5
 80029f6:	f7fd fc15 	bl	8000224 <__adddf3>
 80029fa:	4602      	mov	r2, r0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	f7fe f8a7 	bl	8000b54 <__aeabi_d2f>
 8002a06:	4602      	mov	r2, r0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm += (qei->diff_counts / (float)(qei->ppr)) * M_PI * qei->pulley_diameter * qei->gear_ratio;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fd fd65 	bl	80004e0 <__aeabi_f2d>
 8002a16:	4604      	mov	r4, r0
 8002a18:	460d      	mov	r5, r1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	ee07 3a90 	vmov	s15, r3
 8002a22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	ee07 3a90 	vmov	s15, r3
 8002a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a32:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a36:	ee16 0a90 	vmov	r0, s13
 8002a3a:	f7fd fd51 	bl	80004e0 <__aeabi_f2d>
 8002a3e:	a31e      	add	r3, pc, #120	@ (adr r3, 8002ab8 <QEI_get_diff_count+0x1d0>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fda4 	bl	8000590 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4690      	mov	r8, r2
 8002a4e:	4699      	mov	r9, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fd fd43 	bl	80004e0 <__aeabi_f2d>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	4640      	mov	r0, r8
 8002a60:	4649      	mov	r1, r9
 8002a62:	f7fd fd95 	bl	8000590 <__aeabi_dmul>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4690      	mov	r8, r2
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fd fd34 	bl	80004e0 <__aeabi_f2d>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4640      	mov	r0, r8
 8002a7e:	4649      	mov	r1, r9
 8002a80:	f7fd fd86 	bl	8000590 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fbca 	bl	8000224 <__adddf3>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f85c 	bl	8000b54 <__aeabi_d2f>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	649a      	str	r2, [r3, #72]	@ 0x48

    // Store the current counter value for next calculation
    qei->c[PREV] = qei->c[NOW];
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	605a      	str	r2, [r3, #4]
}
 8002aaa:	bf00      	nop
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002ab4:	f3af 8000 	nop.w
 8002ab8:	54442d18 	.word	0x54442d18
 8002abc:	400921fb 	.word	0x400921fb

08002ac0 <QEI_compute_data>:

void QEI_compute_data(QEI *qei) {
 8002ac0:	b5b0      	push	{r4, r5, r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
    // Calculate velocity in pulses per second
    qei->pps = qei->diff_counts * ((int)(qei->freq));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002ad0:	fb02 f303 	mul.w	r3, r2, r3
 8002ad4:	ee07 3a90 	vmov	s15, r3
 8002ad8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

    // Calculate angular velocity in different units
    qei->rpm = qei->pps * 60.0 / (float)(qei->ppr) * qei->gear_ratio;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fd fcfa 	bl	80004e0 <__aeabi_f2d>
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	4b83      	ldr	r3, [pc, #524]	@ (8002d00 <QEI_compute_data+0x240>)
 8002af2:	f7fd fd4d 	bl	8000590 <__aeabi_dmul>
 8002af6:	4602      	mov	r2, r0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4614      	mov	r4, r2
 8002afc:	461d      	mov	r5, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0a:	ee17 0a90 	vmov	r0, s15
 8002b0e:	f7fd fce7 	bl	80004e0 <__aeabi_f2d>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4620      	mov	r0, r4
 8002b18:	4629      	mov	r1, r5
 8002b1a:	f7fd fe63 	bl	80007e4 <__aeabi_ddiv>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4614      	mov	r4, r2
 8002b24:	461d      	mov	r5, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fcd8 	bl	80004e0 <__aeabi_f2d>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4620      	mov	r0, r4
 8002b36:	4629      	mov	r1, r5
 8002b38:	f7fd fd2a 	bl	8000590 <__aeabi_dmul>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4610      	mov	r0, r2
 8002b42:	4619      	mov	r1, r3
 8002b44:	f7fe f806 	bl	8000b54 <__aeabi_d2f>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->radps = qei->pps * 2 * M_PI / (float)(qei->ppr) * qei->gear_ratio;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002b58:	ee17 0a90 	vmov	r0, s15
 8002b5c:	f7fd fcc0 	bl	80004e0 <__aeabi_f2d>
 8002b60:	a365      	add	r3, pc, #404	@ (adr r3, 8002cf8 <QEI_compute_data+0x238>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f7fd fd13 	bl	8000590 <__aeabi_dmul>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4614      	mov	r4, r2
 8002b70:	461d      	mov	r5, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b7e:	ee17 0a90 	vmov	r0, s15
 8002b82:	f7fd fcad 	bl	80004e0 <__aeabi_f2d>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f7fd fe29 	bl	80007e4 <__aeabi_ddiv>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4614      	mov	r4, r2
 8002b98:	461d      	mov	r5, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7fd fc9e 	bl	80004e0 <__aeabi_f2d>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4620      	mov	r0, r4
 8002baa:	4629      	mov	r1, r5
 8002bac:	f7fd fcf0 	bl	8000590 <__aeabi_dmul>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f7fd ffcc 	bl	8000b54 <__aeabi_d2f>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	635a      	str	r2, [r3, #52]	@ 0x34

    // Calculate linear velocity
    qei->mmps = qei->pps * M_PI * qei->pulley_diameter / (float)(qei->ppr) * qei->gear_ratio;  // Assuming 10mm per rev
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fc8a 	bl	80004e0 <__aeabi_f2d>
 8002bcc:	a34a      	add	r3, pc, #296	@ (adr r3, 8002cf8 <QEI_compute_data+0x238>)
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	f7fd fcdd 	bl	8000590 <__aeabi_dmul>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4614      	mov	r4, r2
 8002bdc:	461d      	mov	r5, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fd fc7c 	bl	80004e0 <__aeabi_f2d>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4620      	mov	r0, r4
 8002bee:	4629      	mov	r1, r5
 8002bf0:	f7fd fcce 	bl	8000590 <__aeabi_dmul>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4614      	mov	r4, r2
 8002bfa:	461d      	mov	r5, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a1b      	ldr	r3, [r3, #32]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c08:	ee17 0a90 	vmov	r0, s15
 8002c0c:	f7fd fc68 	bl	80004e0 <__aeabi_f2d>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4620      	mov	r0, r4
 8002c16:	4629      	mov	r1, r5
 8002c18:	f7fd fde4 	bl	80007e4 <__aeabi_ddiv>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4614      	mov	r4, r2
 8002c22:	461d      	mov	r5, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc59 	bl	80004e0 <__aeabi_f2d>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	4620      	mov	r0, r4
 8002c34:	4629      	mov	r1, r5
 8002c36:	f7fd fcab 	bl	8000590 <__aeabi_dmul>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4610      	mov	r0, r2
 8002c40:	4619      	mov	r1, r3
 8002c42:	f7fd ff87 	bl	8000b54 <__aeabi_d2f>
 8002c46:	4602      	mov	r2, r0
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	64da      	str	r2, [r3, #76]	@ 0x4c

    // Store current angular velocity for acceleration calculation
    qei->r[NOW] = qei->radps;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	609a      	str	r2, [r3, #8]

    // Store current linear velocity for acceleration calculation
    qei->m[NOW] = qei->mmps;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	611a      	str	r2, [r3, #16]

    // Calculate acceleration
    float diff_angular_velocity = qei->r[NOW] - qei->r[PREV];
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	edd3 7a03 	vldr	s15, [r3, #12]
 8002c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c6c:	edc7 7a03 	vstr	s15, [r7, #12]
    qei->radpss = (diff_angular_velocity == 0) ? 0 : diff_angular_velocity * qei->freq;
 8002c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c7c:	d00a      	beq.n	8002c94 <QEI_compute_data+0x1d4>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c92:	e001      	b.n	8002c98 <QEI_compute_data+0x1d8>
 8002c94:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 8002d04 <QEI_compute_data+0x244>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

    float diff_linear_velocity = qei->m[NOW] - qei->m[PREV];
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	ed93 7a04 	vldr	s14, [r3, #16]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	edd3 7a05 	vldr	s15, [r3, #20]
 8002caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cae:	edc7 7a02 	vstr	s15, [r7, #8]
    qei->mmpss = (diff_linear_velocity == 0) ? 0 : diff_linear_velocity * qei->freq;
 8002cb2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbe:	d00a      	beq.n	8002cd6 <QEI_compute_data+0x216>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	ee07 3a90 	vmov	s15, r3
 8002cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ccc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd4:	e001      	b.n	8002cda <QEI_compute_data+0x21a>
 8002cd6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8002d04 <QEI_compute_data+0x244>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50

    // Store current velocity for next acceleration calculation
    qei->r[PREV] = qei->r[NOW];
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	60da      	str	r2, [r3, #12]
    qei->m[PREV] = qei->m[NOW];
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	615a      	str	r2, [r3, #20]
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf8:	54442d18 	.word	0x54442d18
 8002cfc:	400921fb 	.word	0x400921fb
 8002d00:	404e0000 	.word	0x404e0000
 8002d04:	00000000 	.word	0x00000000

08002d08 <QEI_reset>:

void QEI_reset(QEI *qei) {
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
    // Reset counter history
    qei->c[NOW] = 0;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	601a      	str	r2, [r3, #0]
    qei->c[PREV] = 0;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	605a      	str	r2, [r3, #4]

    // Reset all position and velocity values
    qei->diff_counts = 0;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	625a      	str	r2, [r3, #36]	@ 0x24
    qei->rpm = 0;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f04f 0200 	mov.w	r2, #0
 8002d28:	631a      	str	r2, [r3, #48]	@ 0x30
    qei->pulses = 0;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	639a      	str	r2, [r3, #56]	@ 0x38
    qei->revs = 0;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f04f 0200 	mov.w	r2, #0
 8002d36:	63da      	str	r2, [r3, #60]	@ 0x3c
    qei->rads = 0;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40
    qei->mm = 0;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	649a      	str	r2, [r3, #72]	@ 0x48

    // Reset velocity history
    qei->r[NOW] = 0;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
    qei->r[PREV] = 0;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	60da      	str	r2, [r3, #12]
    qei->m[NOW] = 0;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
    qei->m[PREV] = 0;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	615a      	str	r2, [r3, #20]
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <Trapezoidal_Generator>:
 */

#include "Trapezoidal.h"

void Trapezoidal_Generator(volatile Trapezoidal_GenStruct *trapGen,
        float32_t initial_p, float32_t target_p, float32_t vmax, float32_t amax) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08e      	sub	sp, #56	@ 0x38
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6178      	str	r0, [r7, #20]
 8002d7c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002d80:	edc7 0a03 	vstr	s1, [r7, #12]
 8002d84:	ed87 1a02 	vstr	s2, [r7, #8]
 8002d88:	edc7 1a01 	vstr	s3, [r7, #4]
    // Set default values
    trapGen->dir = 0;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	741a      	strb	r2, [r3, #16]
    trapGen->time_total = 0.0f;
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	60da      	str	r2, [r3, #12]
    trapGen->t1 = 0.0f;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f04f 0200 	mov.w	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
    trapGen->t2 = 0.0f;
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	605a      	str	r2, [r3, #4]
    trapGen->t3 = 0.0f;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]

    // Calculate the distance to travel
    float32_t distance = fabsf(target_p - initial_p);
 8002db2:	ed97 7a03 	vldr	s14, [r7, #12]
 8002db6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dbe:	eef0 7ae7 	vabs.f32	s15, s15
 8002dc2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // Determine the direction of the motion
    if (target_p - initial_p < 0) {
 8002dc6:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dca:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dda:	d503      	bpl.n	8002de4 <Trapezoidal_Generator+0x70>
        trapGen->dir = -1;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	22ff      	movs	r2, #255	@ 0xff
 8002de0:	741a      	strb	r2, [r3, #16]
 8002de2:	e002      	b.n	8002dea <Trapezoidal_Generator+0x76>
    } else {
        trapGen->dir = 1;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	2201      	movs	r2, #1
 8002de8:	741a      	strb	r2, [r3, #16]
    }

    // If no movement required or zero acceleration
    if (distance == 0.0f || amax == 0.0f) {
 8002dea:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002dee:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df6:	d006      	beq.n	8002e06 <Trapezoidal_Generator+0x92>
 8002df8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002dfc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e04:	d104      	bne.n	8002e10 <Trapezoidal_Generator+0x9c>
        trapGen->time_total = 0.0f;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	60da      	str	r2, [r3, #12]
        return;
 8002e0e:	e06f      	b.n	8002ef0 <Trapezoidal_Generator+0x17c>
    }

    // Time to reach maximum velocity (assuming we can)
    float32_t ta = vmax / amax;
 8002e10:	edd7 6a02 	vldr	s13, [r7, #8]
 8002e14:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e1c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

    // Distance traveled during acceleration and deceleration phases
    float32_t sa = 0.5f * amax * ta * ta;  // Distance in acceleration phase
 8002e20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e24:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e2c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e34:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float32_t sd = sa;                     // Distance in deceleration phase (same as acceleration)
 8002e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e42:	62bb      	str	r3, [r7, #40]	@ 0x28
    float32_t s_accdec = sa + sd;          // Total distance for acceleration + deceleration
 8002e44:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002e48:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e50:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Check if we have enough distance to reach maximum velocity
    if (distance >= s_accdec) {
 8002e54:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002e58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e64:	db27      	blt.n	8002eb6 <Trapezoidal_Generator+0x142>
        // Trapezoidal profile - we can reach maximum velocity
        float32_t sc = distance - s_accdec;  // Distance at constant velocity
 8002e66:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002e6a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e72:	edc7 7a07 	vstr	s15, [r7, #28]
        float32_t tc = sc / vmax;            // Time at constant velocity
 8002e76:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e7a:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e82:	edc7 7a06 	vstr	s15, [r7, #24]

        trapGen->t1 = ta;                    // End of acceleration phase
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e8a:	601a      	str	r2, [r3, #0]
        trapGen->t2 = ta + tc;               // End of constant velocity phase
 8002e8c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8002e90:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	edc3 7a01 	vstr	s15, [r3, #4]
        trapGen->t3 = 2 * ta + tc;           // End of deceleration phase
 8002e9e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002ea2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ea6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	edc3 7a02 	vstr	s15, [r3, #8]
 8002eb4:	e018      	b.n	8002ee8 <Trapezoidal_Generator+0x174>
        // For a triangular profile, we need to find the time to reach peak velocity
        // and the peak velocity itself

        // Using distance = 2 * (0.5 * amax * tp^2) and solving for tp
        // where tp is the time to reach peak velocity (half the total time)
        float32_t tp = sqrtf(distance / amax);
 8002eb6:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8002eba:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ebe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ec2:	eeb0 0a66 	vmov.f32	s0, s13
 8002ec6:	f00b facb 	bl	800e460 <sqrtf>
 8002eca:	ed87 0a08 	vstr	s0, [r7, #32]

        trapGen->t1 = tp;                    // End of acceleration phase
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	601a      	str	r2, [r3, #0]
        trapGen->t2 = tp;                    // No constant velocity phase
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	6a3a      	ldr	r2, [r7, #32]
 8002ed8:	605a      	str	r2, [r3, #4]
        trapGen->t3 = 2 * tp;                // End of deceleration phase
 8002eda:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ede:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	edc3 7a02 	vstr	s15, [r3, #8]
    }

    trapGen->time_total = trapGen->t3;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	60da      	str	r2, [r3, #12]
}
 8002ef0:	3738      	adds	r7, #56	@ 0x38
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <Trapezoidal_Evaluated>:

void Trapezoidal_Evaluated(volatile Trapezoidal_GenStruct *trapGen,
        volatile Trapezoidal_EvaStruct *evaTrapezoidal, float32_t initial_p,
        float32_t target_p, float32_t vmax, float32_t amax) {
 8002ef8:	b480      	push	{r7}
 8002efa:	b08d      	sub	sp, #52	@ 0x34
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6178      	str	r0, [r7, #20]
 8002f00:	6139      	str	r1, [r7, #16]
 8002f02:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f06:	edc7 0a02 	vstr	s1, [r7, #8]
 8002f0a:	ed87 1a01 	vstr	s2, [r7, #4]
 8002f0e:	edc7 1a00 	vstr	s3, [r7]

    // Update current time (assuming 1ms intervals)
    evaTrapezoidal->t += 1.0f / 1000.0f;
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f18:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800319c <Trapezoidal_Evaluated+0x2a4>
 8002f1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	edc3 7a03 	vstr	s15, [r3, #12]

    // Check if trajectory is still active
    if (evaTrapezoidal->t <= trapGen->time_total) {
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f3a:	f200 811b 	bhi.w	8003174 <Trapezoidal_Evaluated+0x27c>
        evaTrapezoidal->isFinised = false;
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	2200      	movs	r2, #0
 8002f42:	741a      	strb	r2, [r3, #16]

        // Calculate direction-adjusted acceleration
        float32_t accel = amax * trapGen->dir;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	7c1b      	ldrb	r3, [r3, #16]
 8002f48:	b25b      	sxtb	r3, r3
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f52:	ed97 7a00 	vldr	s14, [r7]
 8002f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f5a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

        // Calculate peak velocity (might be vmax or lower for triangular profile)
        float32_t peak_vel;
        if (trapGen->t1 == trapGen->t2) {
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	ed93 7a00 	vldr	s14, [r3]
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f6a:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f72:	d109      	bne.n	8002f88 <Trapezoidal_Evaluated+0x90>
            // Triangular profile - peak velocity is at t1
            peak_vel = accel * trapGen->t1;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	edd3 7a00 	vldr	s15, [r3]
 8002f7a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f82:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8002f86:	e00c      	b.n	8002fa2 <Trapezoidal_Evaluated+0xaa>
        } else {
            // Trapezoidal profile - peak velocity is vmax with direction
            peak_vel = vmax * trapGen->dir;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	7c1b      	ldrb	r3, [r3, #16]
 8002f8c:	b25b      	sxtb	r3, r3
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f96:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        }

        // Acceleration phase
        if (evaTrapezoidal->t <= trapGen->t1) {
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	ed93 7a03 	vldr	s14, [r3, #12]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb6:	d824      	bhi.n	8003002 <Trapezoidal_Evaluated+0x10a>
            // Position calculation: p = p0 + 0.5*a*t²
            evaTrapezoidal->setposition = initial_p + 0.5f * accel * evaTrapezoidal->t * evaTrapezoidal->t;
 8002fb8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002fbc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002fc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	edc3 7a00 	vstr	s15, [r3]

            // Velocity calculation: v = a*t
            evaTrapezoidal->setvelocity = accel * evaTrapezoidal->t;
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	ed93 7a03 	vldr	s14, [r3, #12]
 8002fec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	edc3 7a01 	vstr	s15, [r3, #4]

            // Constant acceleration
            evaTrapezoidal->setacceleration = accel;
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffe:	609a      	str	r2, [r3, #8]
        // Ensure final position is exactly target_p
        evaTrapezoidal->setposition = target_p;
        evaTrapezoidal->setvelocity = 0.0f;
        evaTrapezoidal->setacceleration = 0.0f;
    }
}
 8003000:	e0c6      	b.n	8003190 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t2) {
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	ed93 7a03 	vldr	s14, [r3, #12]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	edd3 7a01 	vldr	s15, [r3, #4]
 800300e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003016:	d830      	bhi.n	800307a <Trapezoidal_Evaluated+0x182>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003018:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800301c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003020:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	edd3 7a00 	vldr	s15, [r3]
 8003034:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003038:	ed97 7a03 	vldr	s14, [r7, #12]
 800303c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003040:	edc7 7a06 	vstr	s15, [r7, #24]
            evaTrapezoidal->setposition = p1 + peak_vel * (evaTrapezoidal->t - trapGen->t1);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	ed93 7a03 	vldr	s14, [r3, #12]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	edd3 7a00 	vldr	s15, [r3]
 8003050:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003054:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003058:	ee27 7a27 	vmul.f32	s14, s14, s15
 800305c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800306e:	605a      	str	r2, [r3, #4]
            evaTrapezoidal->setacceleration = 0.0f;
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	609a      	str	r2, [r3, #8]
}
 8003078:	e08a      	b.n	8003190 <Trapezoidal_Evaluated+0x298>
        else if (evaTrapezoidal->t <= trapGen->t3) {
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	edd3 7a02 	vldr	s15, [r3, #8]
 8003086:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308e:	d900      	bls.n	8003092 <Trapezoidal_Evaluated+0x19a>
}
 8003090:	e07e      	b.n	8003190 <Trapezoidal_Evaluated+0x298>
            float32_t p1 = initial_p + 0.5f * accel * trapGen->t1 * trapGen->t1;
 8003092:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003096:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800309a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	edd3 7a00 	vldr	s15, [r3]
 80030a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80030b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ba:	edc7 7a08 	vstr	s15, [r7, #32]
            float32_t p2 = p1;
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	62bb      	str	r3, [r7, #40]	@ 0x28
            if (trapGen->t2 > trapGen->t1) {
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	edd3 7a00 	vldr	s15, [r3]
 80030ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d6:	dd11      	ble.n	80030fc <Trapezoidal_Evaluated+0x204>
                p2 += peak_vel * (trapGen->t2 - trapGen->t1);
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	ed93 7a01 	vldr	s14, [r3, #4]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030e8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80030ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80030f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            float32_t td = evaTrapezoidal->t - trapGen->t2;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	edd3 7a01 	vldr	s15, [r3, #4]
 8003108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310c:	edc7 7a07 	vstr	s15, [r7, #28]
            evaTrapezoidal->setposition = p2 + peak_vel * td - 0.5f * accel * td * td;
 8003110:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003114:	edd7 7a07 	vldr	s15, [r7, #28]
 8003118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800311c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003124:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003128:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800312c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003130:	edd7 7a07 	vldr	s15, [r7, #28]
 8003134:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003138:	edd7 7a07 	vldr	s15, [r7, #28]
 800313c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	edc3 7a00 	vstr	s15, [r3]
            evaTrapezoidal->setvelocity = peak_vel - accel * td;
 800314a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800314e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003156:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800315a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	edc3 7a01 	vstr	s15, [r3, #4]
            evaTrapezoidal->setacceleration = -accel;
 8003164:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003168:	eef1 7a67 	vneg.f32	s15, s15
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8003172:	e00d      	b.n	8003190 <Trapezoidal_Evaluated+0x298>
        evaTrapezoidal->isFinised = true;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	2201      	movs	r2, #1
 8003178:	741a      	strb	r2, [r3, #16]
        evaTrapezoidal->setposition = target_p;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	601a      	str	r2, [r3, #0]
        evaTrapezoidal->setvelocity = 0.0f;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	605a      	str	r2, [r3, #4]
        evaTrapezoidal->setacceleration = 0.0f;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
}
 8003190:	bf00      	nop
 8003192:	3734      	adds	r7, #52	@ 0x34
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr
 800319c:	3a83126f 	.word	0x3a83126f

080031a0 <temperature_to_base>:
    "ns", "us", "ms", "s", "min", "hour", "day",
    "C", "F", "K"
};

/* Custom conversion functions for temperature */
static float temperature_to_base(float value, Unit from_unit) {
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	ed87 0a01 	vstr	s0, [r7, #4]
 80031aa:	4603      	mov	r3, r0
 80031ac:	70fb      	strb	r3, [r7, #3]
    switch (from_unit) {
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	2b1a      	cmp	r3, #26
 80031b2:	d018      	beq.n	80031e6 <temperature_to_base+0x46>
 80031b4:	2b1a      	cmp	r3, #26
 80031b6:	dc1d      	bgt.n	80031f4 <temperature_to_base+0x54>
 80031b8:	2b18      	cmp	r3, #24
 80031ba:	d002      	beq.n	80031c2 <temperature_to_base+0x22>
 80031bc:	2b19      	cmp	r3, #25
 80031be:	d003      	beq.n	80031c8 <temperature_to_base+0x28>
 80031c0:	e018      	b.n	80031f4 <temperature_to_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 80031c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80031c6:	e017      	b.n	80031f8 <temperature_to_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value - 32.0f) * 5.0f / 9.0f;
 80031c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80031cc:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8003208 <temperature_to_base+0x68>
 80031d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031d4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80031d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031dc:	eef2 6a02 	vmov.f32	s13, #34	@ 0x41100000  9.0
 80031e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031e4:	e008      	b.n	80031f8 <temperature_to_base+0x58>
        case UNIT_KELVIN:
            return value - 273.15f;
 80031e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80031ea:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800320c <temperature_to_base+0x6c>
 80031ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031f2:	e001      	b.n	80031f8 <temperature_to_base+0x58>
        default:
            return value;
 80031f4:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 80031f8:	eeb0 0a67 	vmov.f32	s0, s15
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	42000000 	.word	0x42000000
 800320c:	43889333 	.word	0x43889333

08003210 <temperature_from_base>:

static float temperature_from_base(float value, Unit to_unit) {
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	ed87 0a01 	vstr	s0, [r7, #4]
 800321a:	4603      	mov	r3, r0
 800321c:	70fb      	strb	r3, [r7, #3]
    switch (to_unit) {
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	2b1a      	cmp	r3, #26
 8003222:	d018      	beq.n	8003256 <temperature_from_base+0x46>
 8003224:	2b1a      	cmp	r3, #26
 8003226:	dc1d      	bgt.n	8003264 <temperature_from_base+0x54>
 8003228:	2b18      	cmp	r3, #24
 800322a:	d002      	beq.n	8003232 <temperature_from_base+0x22>
 800322c:	2b19      	cmp	r3, #25
 800322e:	d003      	beq.n	8003238 <temperature_from_base+0x28>
 8003230:	e018      	b.n	8003264 <temperature_from_base+0x54>
        case UNIT_CELSIUS:
            return value;  /* Base unit is Celsius */
 8003232:	edd7 7a01 	vldr	s15, [r7, #4]
 8003236:	e017      	b.n	8003268 <temperature_from_base+0x58>
        case UNIT_FAHRENHEIT:
            return (value * 9.0f / 5.0f) + 32.0f;
 8003238:	edd7 7a01 	vldr	s15, [r7, #4]
 800323c:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8003240:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003244:	eef1 6a04 	vmov.f32	s13, #20	@ 0x40a00000  5.0
 8003248:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800324c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003278 <temperature_from_base+0x68>
 8003250:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003254:	e008      	b.n	8003268 <temperature_from_base+0x58>
        case UNIT_KELVIN:
            return value + 273.15f;
 8003256:	edd7 7a01 	vldr	s15, [r7, #4]
 800325a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800327c <temperature_from_base+0x6c>
 800325e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003262:	e001      	b.n	8003268 <temperature_from_base+0x58>
        default:
            return value;
 8003264:	edd7 7a01 	vldr	s15, [r7, #4]
    }
}
 8003268:	eeb0 0a67 	vmov.f32	s0, s15
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	42000000 	.word	0x42000000
 800327c:	43889333 	.word	0x43889333

08003280 <init_length_converter>:

/* Initialize unit converters with conversion factors */
static void init_length_converter(UnitConverter *converter) {
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_LENGTH;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_M;  /* Meter is the base unit */
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2202      	movs	r2, #2
 8003292:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	e00a      	b.n	80032b0 <init_length_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	3304      	adds	r3, #4
 80032a4:	f04f 0200 	mov.w	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3301      	adds	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b1a      	cmp	r3, #26
 80032b4:	ddf1      	ble.n	800329a <init_length_converter+0x1a>
    }

    /* Set conversion factors for length units (to convert to meters) */
    converter->conversion_factors[UNIT_MM] = 0.001f;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a11      	ldr	r2, [pc, #68]	@ (8003300 <init_length_converter+0x80>)
 80032ba:	605a      	str	r2, [r3, #4]
    converter->conversion_factors[UNIT_CM] = 0.01f;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a11      	ldr	r2, [pc, #68]	@ (8003304 <init_length_converter+0x84>)
 80032c0:	609a      	str	r2, [r3, #8]
    converter->conversion_factors[UNIT_M] = 1.0f;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80032c8:	60da      	str	r2, [r3, #12]
    converter->conversion_factors[UNIT_KM] = 1000.0f;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003308 <init_length_converter+0x88>)
 80032ce:	611a      	str	r2, [r3, #16]
    converter->conversion_factors[UNIT_INCH] = 0.0254f;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a0e      	ldr	r2, [pc, #56]	@ (800330c <init_length_converter+0x8c>)
 80032d4:	615a      	str	r2, [r3, #20]
    converter->conversion_factors[UNIT_FOOT] = 0.3048f;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003310 <init_length_converter+0x90>)
 80032da:	619a      	str	r2, [r3, #24]
    converter->conversion_factors[UNIT_YARD] = 0.9144f;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a0d      	ldr	r2, [pc, #52]	@ (8003314 <init_length_converter+0x94>)
 80032e0:	61da      	str	r2, [r3, #28]
    converter->conversion_factors[UNIT_MILE] = 1609.344f;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a0c      	ldr	r2, [pc, #48]	@ (8003318 <init_length_converter+0x98>)
 80032e6:	621a      	str	r2, [r3, #32]

    converter->to_base = NULL;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	3a83126f 	.word	0x3a83126f
 8003304:	3c23d70a 	.word	0x3c23d70a
 8003308:	447a0000 	.word	0x447a0000
 800330c:	3cd013a9 	.word	0x3cd013a9
 8003310:	3e9c0ebf 	.word	0x3e9c0ebf
 8003314:	3f6a161e 	.word	0x3f6a161e
 8003318:	44c92b02 	.word	0x44c92b02

0800331c <init_mass_converter>:

static void init_mass_converter(UnitConverter *converter) {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_MASS;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_KG;  /* Kilogram is the base unit */
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	220a      	movs	r2, #10
 800332e:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	e00a      	b.n	800334c <init_mass_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	3304      	adds	r3, #4
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3301      	adds	r3, #1
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b1a      	cmp	r3, #26
 8003350:	ddf1      	ble.n	8003336 <init_mass_converter+0x1a>
    }

    /* Set conversion factors for mass units (to convert to kilograms) */
    converter->conversion_factors[UNIT_MG] = 0.000001f;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a0e      	ldr	r2, [pc, #56]	@ (8003390 <init_mass_converter+0x74>)
 8003356:	625a      	str	r2, [r3, #36]	@ 0x24
    converter->conversion_factors[UNIT_G] = 0.001f;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a0e      	ldr	r2, [pc, #56]	@ (8003394 <init_mass_converter+0x78>)
 800335c:	629a      	str	r2, [r3, #40]	@ 0x28
    converter->conversion_factors[UNIT_KG] = 1.0f;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003364:	62da      	str	r2, [r3, #44]	@ 0x2c
    converter->conversion_factors[UNIT_TON] = 1000.0f;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a0b      	ldr	r2, [pc, #44]	@ (8003398 <init_mass_converter+0x7c>)
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
    converter->conversion_factors[UNIT_OZ] = 0.0283495f;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a0b      	ldr	r2, [pc, #44]	@ (800339c <init_mass_converter+0x80>)
 8003370:	635a      	str	r2, [r3, #52]	@ 0x34
    converter->conversion_factors[UNIT_LB] = 0.453592f;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a0a      	ldr	r2, [pc, #40]	@ (80033a0 <init_mass_converter+0x84>)
 8003376:	639a      	str	r2, [r3, #56]	@ 0x38

    converter->to_base = NULL;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	358637bd 	.word	0x358637bd
 8003394:	3a83126f 	.word	0x3a83126f
 8003398:	447a0000 	.word	0x447a0000
 800339c:	3ce83d36 	.word	0x3ce83d36
 80033a0:	3ee83d36 	.word	0x3ee83d36

080033a4 <init_angle_converter>:

static void init_angle_converter(UnitConverter *converter) {
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_ANGLE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_RADIAN;  /* Radian is the base unit */
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	220f      	movs	r2, #15
 80033b6:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e00a      	b.n	80033d4 <init_angle_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	3304      	adds	r3, #4
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3301      	adds	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2b1a      	cmp	r3, #26
 80033d8:	ddf1      	ble.n	80033be <init_angle_converter+0x1a>
    }

    /* Set conversion factors for angle units (to convert to radians) */
    converter->conversion_factors[UNIT_DEGREE] = M_PI / 180.0f;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003408 <init_angle_converter+0x64>)
 80033de:	63da      	str	r2, [r3, #60]	@ 0x3c
    converter->conversion_factors[UNIT_RADIAN] = 1.0f;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40
    converter->conversion_factors[UNIT_GRADIAN] = M_PI / 200.0f;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a08      	ldr	r2, [pc, #32]	@ (800340c <init_angle_converter+0x68>)
 80033ec:	645a      	str	r2, [r3, #68]	@ 0x44

    converter->to_base = NULL;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80033fa:	bf00      	nop
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	3c8efa35 	.word	0x3c8efa35
 800340c:	3c80adfd 	.word	0x3c80adfd

08003410 <init_time_converter>:

static void init_time_converter(UnitConverter *converter) {
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TIME;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2203      	movs	r2, #3
 800341c:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_SECOND;  /* Second is the base unit */
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2214      	movs	r2, #20
 8003422:	705a      	strb	r2, [r3, #1]

    /* Initialize all conversion factors to 0.0 */
    for (int i = 0; i < UNIT_COUNT; i++) {
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e00a      	b.n	8003440 <init_time_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	3304      	adds	r3, #4
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2b1a      	cmp	r3, #26
 8003444:	ddf1      	ble.n	800342a <init_time_converter+0x1a>
    }

    /* Set conversion factors for time units (to convert to seconds) */
    converter->conversion_factors[UNIT_NANOSECOND] = 1e-9f;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a10      	ldr	r2, [pc, #64]	@ (800348c <init_time_converter+0x7c>)
 800344a:	649a      	str	r2, [r3, #72]	@ 0x48
    converter->conversion_factors[UNIT_MICROSECOND] = 1e-6f;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a10      	ldr	r2, [pc, #64]	@ (8003490 <init_time_converter+0x80>)
 8003450:	64da      	str	r2, [r3, #76]	@ 0x4c
    converter->conversion_factors[UNIT_MILLISECOND] = 1e-3f;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a0f      	ldr	r2, [pc, #60]	@ (8003494 <init_time_converter+0x84>)
 8003456:	651a      	str	r2, [r3, #80]	@ 0x50
    converter->conversion_factors[UNIT_SECOND] = 1.0f;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800345e:	655a      	str	r2, [r3, #84]	@ 0x54
    converter->conversion_factors[UNIT_MINUTE] = 60.0f;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a0d      	ldr	r2, [pc, #52]	@ (8003498 <init_time_converter+0x88>)
 8003464:	659a      	str	r2, [r3, #88]	@ 0x58
    converter->conversion_factors[UNIT_HOUR] = 3600.0f;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a0c      	ldr	r2, [pc, #48]	@ (800349c <init_time_converter+0x8c>)
 800346a:	65da      	str	r2, [r3, #92]	@ 0x5c
    converter->conversion_factors[UNIT_DAY] = 86400.0f;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a0c      	ldr	r2, [pc, #48]	@ (80034a0 <init_time_converter+0x90>)
 8003470:	661a      	str	r2, [r3, #96]	@ 0x60

    converter->to_base = NULL;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = NULL;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	3089705f 	.word	0x3089705f
 8003490:	358637bd 	.word	0x358637bd
 8003494:	3a83126f 	.word	0x3a83126f
 8003498:	42700000 	.word	0x42700000
 800349c:	45610000 	.word	0x45610000
 80034a0:	47a8c000 	.word	0x47a8c000

080034a4 <init_temperature_converter>:

static void init_temperature_converter(UnitConverter *converter) {
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
    converter->type = UNIT_TYPE_TEMPERATURE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2204      	movs	r2, #4
 80034b0:	701a      	strb	r2, [r3, #0]
    converter->base_unit = UNIT_CELSIUS;  /* Celsius is the base unit */
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2218      	movs	r2, #24
 80034b6:	705a      	strb	r2, [r3, #1]

    /* For temperature, all conversion factors are 0 because we use custom functions */
    for (int i = 0; i < UNIT_COUNT; i++) {
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	e00a      	b.n	80034d4 <init_temperature_converter+0x30>
        converter->conversion_factors[i] = 0.0f;
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	3304      	adds	r3, #4
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < UNIT_COUNT; i++) {
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	3301      	adds	r3, #1
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b1a      	cmp	r3, #26
 80034d8:	ddf1      	ble.n	80034be <init_temperature_converter+0x1a>
    }

    /* Set custom conversion functions for temperature */
    converter->to_base = temperature_to_base;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a05      	ldr	r2, [pc, #20]	@ (80034f4 <init_temperature_converter+0x50>)
 80034de:	671a      	str	r2, [r3, #112]	@ 0x70
    converter->from_base = temperature_from_base;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a05      	ldr	r2, [pc, #20]	@ (80034f8 <init_temperature_converter+0x54>)
 80034e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	080031a1 	.word	0x080031a1
 80034f8:	08003211 	.word	0x08003211

080034fc <UnitConverter_init>:

/* Initialize the unit converter system */
void UnitConverter_init(UnitConverterSystem *system) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    /* Initialize each unit type converter */
    init_length_converter(&system->converters[UNIT_TYPE_LENGTH]);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff feba 	bl	8003280 <init_length_converter>
    init_mass_converter(&system->converters[UNIT_TYPE_MASS]);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3378      	adds	r3, #120	@ 0x78
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff ff03 	bl	800331c <init_mass_converter>
    init_angle_converter(&system->converters[UNIT_TYPE_ANGLE]);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	33f0      	adds	r3, #240	@ 0xf0
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff ff42 	bl	80033a4 <init_angle_converter>
    init_time_converter(&system->converters[UNIT_TYPE_TIME]);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff72 	bl	8003410 <init_time_converter>
    init_temperature_converter(&system->converters[UNIT_TYPE_TEMPERATURE]);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff ffb6 	bl	80034a4 <init_temperature_converter>
}
 8003538:	bf00      	nop
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <UnitConverter_get_unit_type>:

/* Get the unit type for a given unit */
UnitType UnitConverter_get_unit_type(Unit unit) {
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
    if (unit < UNIT_COUNT) {
 800354a:	79fb      	ldrb	r3, [r7, #7]
 800354c:	2b1a      	cmp	r3, #26
 800354e:	d803      	bhi.n	8003558 <UnitConverter_get_unit_type+0x18>
        return unit_types[unit];
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	4a05      	ldr	r2, [pc, #20]	@ (8003568 <UnitConverter_get_unit_type+0x28>)
 8003554:	5cd3      	ldrb	r3, [r2, r3]
 8003556:	e000      	b.n	800355a <UnitConverter_get_unit_type+0x1a>
    }
    return UNIT_TYPE_LENGTH; /* Default to length if invalid */
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000118 	.word	0x20000118

0800356c <UnitConverter_convert>:

/* Convert a value from one unit to another */
float UnitConverter_convert(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b088      	sub	sp, #32
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	ed87 0a02 	vstr	s0, [r7, #8]
 8003578:	460b      	mov	r3, r1
 800357a:	71fb      	strb	r3, [r7, #7]
 800357c:	4613      	mov	r3, r2
 800357e:	71bb      	strb	r3, [r7, #6]
    /* Check if units are of the same type */
    UnitType from_type = UnitConverter_get_unit_type(from_unit);
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff ffdc 	bl	8003540 <UnitConverter_get_unit_type>
 8003588:	4603      	mov	r3, r0
 800358a:	76fb      	strb	r3, [r7, #27]
    UnitType to_type = UnitConverter_get_unit_type(to_unit);
 800358c:	79bb      	ldrb	r3, [r7, #6]
 800358e:	4618      	mov	r0, r3
 8003590:	f7ff ffd6 	bl	8003540 <UnitConverter_get_unit_type>
 8003594:	4603      	mov	r3, r0
 8003596:	76bb      	strb	r3, [r7, #26]

    if (from_type != to_type) {
 8003598:	7efa      	ldrb	r2, [r7, #27]
 800359a:	7ebb      	ldrb	r3, [r7, #26]
 800359c:	429a      	cmp	r2, r3
 800359e:	d002      	beq.n	80035a6 <UnitConverter_convert+0x3a>
        /* Cannot convert between different unit types */
        return value;
 80035a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80035a4:	e03b      	b.n	800361e <UnitConverter_convert+0xb2>
    }

    /* Get the appropriate converter */
    UnitConverter *converter = &system->converters[from_type];
 80035a6:	7efa      	ldrb	r2, [r7, #27]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4413      	add	r3, r2
 80035b4:	617b      	str	r3, [r7, #20]

    /* Convert to base unit */
    float base_value;
    if (converter->to_base) {
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d009      	beq.n	80035d2 <UnitConverter_convert+0x66>
        /* Use custom function if available */
        base_value = converter->to_base(value, from_unit);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c2:	79fa      	ldrb	r2, [r7, #7]
 80035c4:	4610      	mov	r0, r2
 80035c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80035ca:	4798      	blx	r3
 80035cc:	ed87 0a07 	vstr	s0, [r7, #28]
 80035d0:	e00c      	b.n	80035ec <UnitConverter_convert+0x80>
    } else {
        /* Use conversion factor */
        base_value = value * converter->conversion_factors[from_unit];
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	4413      	add	r3, r2
 80035da:	3304      	adds	r3, #4
 80035dc:	edd3 7a00 	vldr	s15, [r3]
 80035e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80035e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035e8:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    /* Convert from base unit to target unit */
    if (converter->from_base) {
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <UnitConverter_convert+0x9c>
        /* Use custom function if available */
        return converter->from_base(base_value, to_unit);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f8:	79ba      	ldrb	r2, [r7, #6]
 80035fa:	4610      	mov	r0, r2
 80035fc:	ed97 0a07 	vldr	s0, [r7, #28]
 8003600:	4798      	blx	r3
 8003602:	eef0 7a40 	vmov.f32	s15, s0
 8003606:	e00a      	b.n	800361e <UnitConverter_convert+0xb2>
    } else {
        /* Use conversion factor */
        return base_value / converter->conversion_factors[to_unit];
 8003608:	79bb      	ldrb	r3, [r7, #6]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	4413      	add	r3, r2
 8003610:	3304      	adds	r3, #4
 8003612:	ed93 7a00 	vldr	s14, [r3]
 8003616:	edd7 6a07 	vldr	s13, [r7, #28]
 800361a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    }
}
 800361e:	eeb0 0a67 	vmov.f32	s0, s15
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <UnitConverter_angle>:
        return UnitConverter_convert(system, value, from_unit, to_unit);
    }
    return value;
}

float UnitConverter_angle(UnitConverterSystem *system, float value, Unit from_unit, Unit to_unit) {
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	ed87 0a02 	vstr	s0, [r7, #8]
 8003634:	460b      	mov	r3, r1
 8003636:	71fb      	strb	r3, [r7, #7]
 8003638:	4613      	mov	r3, r2
 800363a:	71bb      	strb	r3, [r7, #6]
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 800363c:	79fb      	ldrb	r3, [r7, #7]
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff ff7e 	bl	8003540 <UnitConverter_get_unit_type>
 8003644:	4603      	mov	r3, r0
 8003646:	2b02      	cmp	r3, #2
 8003648:	d111      	bne.n	800366e <UnitConverter_angle+0x46>
        UnitConverter_get_unit_type(to_unit) == UNIT_TYPE_ANGLE) {
 800364a:	79bb      	ldrb	r3, [r7, #6]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff ff77 	bl	8003540 <UnitConverter_get_unit_type>
 8003652:	4603      	mov	r3, r0
    if (UnitConverter_get_unit_type(from_unit) == UNIT_TYPE_ANGLE &&
 8003654:	2b02      	cmp	r3, #2
 8003656:	d10a      	bne.n	800366e <UnitConverter_angle+0x46>
        return UnitConverter_convert(system, value, from_unit, to_unit);
 8003658:	79ba      	ldrb	r2, [r7, #6]
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	4619      	mov	r1, r3
 800365e:	ed97 0a02 	vldr	s0, [r7, #8]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7ff ff82 	bl	800356c <UnitConverter_convert>
 8003668:	eef0 7a40 	vmov.f32	s15, s0
 800366c:	e001      	b.n	8003672 <UnitConverter_angle+0x4a>
    }
    return value;
 800366e:	edd7 7a02 	vldr	s15, [r7, #8]
}
 8003672:	eeb0 0a67 	vmov.f32	s0, s15
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08c      	sub	sp, #48	@ 0x30
 8003680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003682:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	605a      	str	r2, [r3, #4]
 800368c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800368e:	1d3b      	adds	r3, r7, #4
 8003690:	2220      	movs	r2, #32
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f00a fe29 	bl	800e2ec <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800369a:	4b39      	ldr	r3, [pc, #228]	@ (8003780 <MX_ADC1_Init+0x104>)
 800369c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80036a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80036a2:	4b37      	ldr	r3, [pc, #220]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036a4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80036a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80036aa:	4b35      	ldr	r3, [pc, #212]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036b0:	4b33      	ldr	r3, [pc, #204]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80036b6:	4b32      	ldr	r3, [pc, #200]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80036bc:	4b30      	ldr	r3, [pc, #192]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036be:	2201      	movs	r2, #1
 80036c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036c4:	2204      	movs	r2, #4
 80036c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80036c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80036ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036d0:	2201      	movs	r2, #1
 80036d2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80036d4:	4b2a      	ldr	r3, [pc, #168]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036d6:	2202      	movs	r2, #2
 80036d8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80036da:	4b29      	ldr	r3, [pc, #164]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036e2:	4b27      	ldr	r3, [pc, #156]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036e8:	4b25      	ldr	r3, [pc, #148]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80036ee:	4b24      	ldr	r3, [pc, #144]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036f6:	4b22      	ldr	r3, [pc, #136]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80036fc:	4b20      	ldr	r3, [pc, #128]	@ (8003780 <MX_ADC1_Init+0x104>)
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003704:	481e      	ldr	r0, [pc, #120]	@ (8003780 <MX_ADC1_Init+0x104>)
 8003706:	f003 f8d5 	bl	80068b4 <HAL_ADC_Init>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003710:	f001 f9da 	bl	8004ac8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003714:	2300      	movs	r3, #0
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003718:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800371c:	4619      	mov	r1, r3
 800371e:	4818      	ldr	r0, [pc, #96]	@ (8003780 <MX_ADC1_Init+0x104>)
 8003720:	f004 f9f4 	bl	8007b0c <HAL_ADCEx_MultiModeConfigChannel>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800372a:	f001 f9cd 	bl	8004ac8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800372e:	4b15      	ldr	r3, [pc, #84]	@ (8003784 <MX_ADC1_Init+0x108>)
 8003730:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003732:	2306      	movs	r3, #6
 8003734:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8003736:	2307      	movs	r3, #7
 8003738:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800373a:	237f      	movs	r3, #127	@ 0x7f
 800373c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800373e:	2304      	movs	r3, #4
 8003740:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	4619      	mov	r1, r3
 800374a:	480d      	ldr	r0, [pc, #52]	@ (8003780 <MX_ADC1_Init+0x104>)
 800374c:	f003 fb60 	bl	8006e10 <HAL_ADC_ConfigChannel>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003756:	f001 f9b7 	bl	8004ac8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800375a:	4b0b      	ldr	r3, [pc, #44]	@ (8003788 <MX_ADC1_Init+0x10c>)
 800375c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800375e:	230c      	movs	r3, #12
 8003760:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003762:	1d3b      	adds	r3, r7, #4
 8003764:	4619      	mov	r1, r3
 8003766:	4806      	ldr	r0, [pc, #24]	@ (8003780 <MX_ADC1_Init+0x104>)
 8003768:	f003 fb52 	bl	8006e10 <HAL_ADC_ConfigChannel>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8003772:	f001 f9a9 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003776:	bf00      	nop
 8003778:	3730      	adds	r7, #48	@ 0x30
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	200001b0 	.word	0x200001b0
 8003784:	19200040 	.word	0x19200040
 8003788:	1d500080 	.word	0x1d500080

0800378c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b09e      	sub	sp, #120	@ 0x78
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003794:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	60da      	str	r2, [r3, #12]
 80037a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037a4:	f107 0310 	add.w	r3, r7, #16
 80037a8:	2254      	movs	r2, #84	@ 0x54
 80037aa:	2100      	movs	r1, #0
 80037ac:	4618      	mov	r0, r3
 80037ae:	f00a fd9d 	bl	800e2ec <memset>
  if(adcHandle->Instance==ADC1)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037ba:	d15e      	bne.n	800387a <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80037bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80037c2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80037c6:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037c8:	f107 0310 	add.w	r3, r7, #16
 80037cc:	4618      	mov	r0, r3
 80037ce:	f005 fe7b 	bl	80094c8 <HAL_RCCEx_PeriphCLKConfig>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80037d8:	f001 f976 	bl	8004ac8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80037dc:	4b29      	ldr	r3, [pc, #164]	@ (8003884 <HAL_ADC_MspInit+0xf8>)
 80037de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e0:	4a28      	ldr	r2, [pc, #160]	@ (8003884 <HAL_ADC_MspInit+0xf8>)
 80037e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80037e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037e8:	4b26      	ldr	r3, [pc, #152]	@ (8003884 <HAL_ADC_MspInit+0xf8>)
 80037ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037f4:	4b23      	ldr	r3, [pc, #140]	@ (8003884 <HAL_ADC_MspInit+0xf8>)
 80037f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f8:	4a22      	ldr	r2, [pc, #136]	@ (8003884 <HAL_ADC_MspInit+0xf8>)
 80037fa:	f043 0304 	orr.w	r3, r3, #4
 80037fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003800:	4b20      	ldr	r3, [pc, #128]	@ (8003884 <HAL_ADC_MspInit+0xf8>)
 8003802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	60bb      	str	r3, [r7, #8]
 800380a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    PC1     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800380c:	2303      	movs	r3, #3
 800380e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003810:	2303      	movs	r3, #3
 8003812:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003818:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800381c:	4619      	mov	r1, r3
 800381e:	481a      	ldr	r0, [pc, #104]	@ (8003888 <HAL_ADC_MspInit+0xfc>)
 8003820:	f004 febe 	bl	80085a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003824:	4b19      	ldr	r3, [pc, #100]	@ (800388c <HAL_ADC_MspInit+0x100>)
 8003826:	4a1a      	ldr	r2, [pc, #104]	@ (8003890 <HAL_ADC_MspInit+0x104>)
 8003828:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800382a:	4b18      	ldr	r3, [pc, #96]	@ (800388c <HAL_ADC_MspInit+0x100>)
 800382c:	2205      	movs	r2, #5
 800382e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003830:	4b16      	ldr	r3, [pc, #88]	@ (800388c <HAL_ADC_MspInit+0x100>)
 8003832:	2200      	movs	r2, #0
 8003834:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003836:	4b15      	ldr	r3, [pc, #84]	@ (800388c <HAL_ADC_MspInit+0x100>)
 8003838:	2200      	movs	r2, #0
 800383a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800383c:	4b13      	ldr	r3, [pc, #76]	@ (800388c <HAL_ADC_MspInit+0x100>)
 800383e:	2280      	movs	r2, #128	@ 0x80
 8003840:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_ADC_MspInit+0x100>)
 8003844:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003848:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800384a:	4b10      	ldr	r3, [pc, #64]	@ (800388c <HAL_ADC_MspInit+0x100>)
 800384c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003850:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003852:	4b0e      	ldr	r3, [pc, #56]	@ (800388c <HAL_ADC_MspInit+0x100>)
 8003854:	2220      	movs	r2, #32
 8003856:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003858:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <HAL_ADC_MspInit+0x100>)
 800385a:	2200      	movs	r2, #0
 800385c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800385e:	480b      	ldr	r0, [pc, #44]	@ (800388c <HAL_ADC_MspInit+0x100>)
 8003860:	f004 fb6c 	bl	8007f3c <HAL_DMA_Init>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 800386a:	f001 f92d 	bl	8004ac8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a06      	ldr	r2, [pc, #24]	@ (800388c <HAL_ADC_MspInit+0x100>)
 8003872:	655a      	str	r2, [r3, #84]	@ 0x54
 8003874:	4a05      	ldr	r2, [pc, #20]	@ (800388c <HAL_ADC_MspInit+0x100>)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800387a:	bf00      	nop
 800387c:	3778      	adds	r7, #120	@ 0x78
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40021000 	.word	0x40021000
 8003888:	48000800 	.word	0x48000800
 800388c:	2000021c 	.word	0x2000021c
 8003890:	40020008 	.word	0x40020008

08003894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800389a:	4b22      	ldr	r3, [pc, #136]	@ (8003924 <MX_DMA_Init+0x90>)
 800389c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389e:	4a21      	ldr	r2, [pc, #132]	@ (8003924 <MX_DMA_Init+0x90>)
 80038a0:	f043 0304 	orr.w	r3, r3, #4
 80038a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80038a6:	4b1f      	ldr	r3, [pc, #124]	@ (8003924 <MX_DMA_Init+0x90>)
 80038a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038aa:	f003 0304 	and.w	r3, r3, #4
 80038ae:	607b      	str	r3, [r7, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003924 <MX_DMA_Init+0x90>)
 80038b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003924 <MX_DMA_Init+0x90>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80038be:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <MX_DMA_Init+0x90>)
 80038c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	603b      	str	r3, [r7, #0]
 80038c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2100      	movs	r1, #0
 80038ce:	200b      	movs	r0, #11
 80038d0:	f004 faff 	bl	8007ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80038d4:	200b      	movs	r0, #11
 80038d6:	f004 fb16 	bl	8007f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80038da:	2200      	movs	r2, #0
 80038dc:	2100      	movs	r1, #0
 80038de:	200c      	movs	r0, #12
 80038e0:	f004 faf7 	bl	8007ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80038e4:	200c      	movs	r0, #12
 80038e6:	f004 fb0e 	bl	8007f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80038ea:	2200      	movs	r2, #0
 80038ec:	2100      	movs	r1, #0
 80038ee:	200d      	movs	r0, #13
 80038f0:	f004 faef 	bl	8007ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80038f4:	200d      	movs	r0, #13
 80038f6:	f004 fb06 	bl	8007f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80038fa:	2200      	movs	r2, #0
 80038fc:	2100      	movs	r1, #0
 80038fe:	200e      	movs	r0, #14
 8003900:	f004 fae7 	bl	8007ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003904:	200e      	movs	r0, #14
 8003906:	f004 fafe 	bl	8007f06 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800390a:	2200      	movs	r2, #0
 800390c:	2100      	movs	r1, #0
 800390e:	200f      	movs	r0, #15
 8003910:	f004 fadf 	bl	8007ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003914:	200f      	movs	r0, #15
 8003916:	f004 faf6 	bl	8007f06 <HAL_NVIC_EnableIRQ>

}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000

08003928 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	@ 0x28
 800392c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392e:	f107 0314 	add.w	r3, r7, #20
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	609a      	str	r2, [r3, #8]
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800393e:	4b75      	ldr	r3, [pc, #468]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 8003940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003942:	4a74      	ldr	r2, [pc, #464]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800394a:	4b72      	ldr	r3, [pc, #456]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 800394c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003956:	4b6f      	ldr	r3, [pc, #444]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800395a:	4a6e      	ldr	r2, [pc, #440]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 800395c:	f043 0320 	orr.w	r3, r3, #32
 8003960:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003962:	4b6c      	ldr	r3, [pc, #432]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 8003964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003966:	f003 0320 	and.w	r3, r3, #32
 800396a:	60fb      	str	r3, [r7, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800396e:	4b69      	ldr	r3, [pc, #420]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003972:	4a68      	ldr	r2, [pc, #416]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800397a:	4b66      	ldr	r3, [pc, #408]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 800397c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	60bb      	str	r3, [r7, #8]
 8003984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003986:	4b63      	ldr	r3, [pc, #396]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	4a62      	ldr	r2, [pc, #392]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003992:	4b60      	ldr	r3, [pc, #384]	@ (8003b14 <MX_GPIO_Init+0x1ec>)
 8003994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_9|PILOT_Pin, GPIO_PIN_RESET);
 800399e:	2200      	movs	r2, #0
 80039a0:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80039a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039a8:	f004 ff7c 	bl	80088a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80039ac:	2200      	movs	r2, #0
 80039ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80039b2:	4859      	ldr	r0, [pc, #356]	@ (8003b18 <MX_GPIO_Init+0x1f0>)
 80039b4:	f004 ff76 	bl	80088a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80039b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80039bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80039c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80039c8:	f107 0314 	add.w	r3, r7, #20
 80039cc:	4619      	mov	r1, r3
 80039ce:	4852      	ldr	r0, [pc, #328]	@ (8003b18 <MX_GPIO_Init+0x1f0>)
 80039d0:	f004 fde6 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA9 PILOT_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_9|PILOT_Pin;
 80039d4:	f44f 63c4 	mov.w	r3, #1568	@ 0x620
 80039d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039da:	2301      	movs	r3, #1
 80039dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e6:	f107 0314 	add.w	r3, r7, #20
 80039ea:	4619      	mov	r1, r3
 80039ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039f0:	f004 fdd6 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UPPER_PHOTO_Pin LOWER_PHOTO_Pin */
  GPIO_InitStruct.Pin = UPPER_PHOTO_Pin|LOWER_PHOTO_Pin;
 80039f4:	f241 0301 	movw	r3, #4097	@ 0x1001
 80039f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80039fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a04:	f107 0314 	add.w	r3, r7, #20
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4844      	ldr	r0, [pc, #272]	@ (8003b1c <MX_GPIO_Init+0x1f4>)
 8003a0c:	f004 fdc8 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LOWER_LIM_Pin UPPER_LIM_Pin */
  GPIO_InitStruct.Pin = LOWER_LIM_Pin|UPPER_LIM_Pin;
 8003a10:	2306      	movs	r3, #6
 8003a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a14:	2300      	movs	r3, #0
 8003a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	4619      	mov	r1, r3
 8003a22:	483e      	ldr	r0, [pc, #248]	@ (8003b1c <MX_GPIO_Init+0x1f4>)
 8003a24:	f004 fdbc 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003a28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a36:	2300      	movs	r3, #0
 8003a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a3a:	f107 0314 	add.w	r3, r7, #20
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4835      	ldr	r0, [pc, #212]	@ (8003b18 <MX_GPIO_Init+0x1f0>)
 8003a42:	f004 fdad 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : J3_Pin J4_Pin */
  GPIO_InitStruct.Pin = J3_Pin|J4_Pin;
 8003a46:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a4c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a52:	2302      	movs	r3, #2
 8003a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a56:	f107 0314 	add.w	r3, r7, #20
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	482e      	ldr	r0, [pc, #184]	@ (8003b18 <MX_GPIO_Init+0x1f0>)
 8003a5e:	f004 fd9f 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : J2_Pin */
  GPIO_InitStruct.Pin = J2_Pin;
 8003a62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J2_GPIO_Port, &GPIO_InitStruct);
 8003a70:	f107 0314 	add.w	r3, r7, #20
 8003a74:	4619      	mov	r1, r3
 8003a76:	4828      	ldr	r0, [pc, #160]	@ (8003b18 <MX_GPIO_Init+0x1f0>)
 8003a78:	f004 fd92 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EMER_Pin */
  GPIO_InitStruct.Pin = EMER_Pin;
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a80:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMER_GPIO_Port, &GPIO_InitStruct);
 8003a8a:	f107 0314 	add.w	r3, r7, #20
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4822      	ldr	r0, [pc, #136]	@ (8003b1c <MX_GPIO_Init+0x1f4>)
 8003a92:	f004 fd85 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PROX_Pin */
  GPIO_InitStruct.Pin = PROX_Pin;
 8003a96:	2340      	movs	r3, #64	@ 0x40
 8003a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a9a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003a9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PROX_GPIO_Port, &GPIO_InitStruct);
 8003aa4:	f107 0314 	add.w	r3, r7, #20
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	481c      	ldr	r0, [pc, #112]	@ (8003b1c <MX_GPIO_Init+0x1f4>)
 8003aac:	f004 fd78 	bl	80085a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : J1_Pin */
  GPIO_InitStruct.Pin = J1_Pin;
 8003ab0:	2380      	movs	r3, #128	@ 0x80
 8003ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ab4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003ab8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003aba:	2302      	movs	r3, #2
 8003abc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(J1_GPIO_Port, &GPIO_InitStruct);
 8003abe:	f107 0314 	add.w	r3, r7, #20
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4815      	ldr	r0, [pc, #84]	@ (8003b1c <MX_GPIO_Init+0x1f4>)
 8003ac6:	f004 fd6b 	bl	80085a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8003aca:	2200      	movs	r2, #0
 8003acc:	2100      	movs	r1, #0
 8003ace:	2006      	movs	r0, #6
 8003ad0:	f004 f9ff 	bl	8007ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003ad4:	2006      	movs	r0, #6
 8003ad6:	f004 fa16 	bl	8007f06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003ada:	2200      	movs	r2, #0
 8003adc:	2100      	movs	r1, #0
 8003ade:	200a      	movs	r0, #10
 8003ae0:	f004 f9f7 	bl	8007ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003ae4:	200a      	movs	r0, #10
 8003ae6:	f004 fa0e 	bl	8007f06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2100      	movs	r1, #0
 8003aee:	2017      	movs	r0, #23
 8003af0:	f004 f9ef 	bl	8007ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003af4:	2017      	movs	r0, #23
 8003af6:	f004 fa06 	bl	8007f06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003afa:	2200      	movs	r2, #0
 8003afc:	2100      	movs	r1, #0
 8003afe:	2028      	movs	r0, #40	@ 0x28
 8003b00:	f004 f9e7 	bl	8007ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003b04:	2028      	movs	r0, #40	@ 0x28
 8003b06:	f004 f9fe 	bl	8007f06 <HAL_NVIC_EnableIRQ>

}
 8003b0a:	bf00      	nop
 8003b0c:	3728      	adds	r7, #40	@ 0x28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	48000800 	.word	0x48000800
 8003b1c:	48000400 	.word	0x48000400

08003b20 <SteadyStateKalmanFilter>:
//arm_matrix_instance_f32 R_matrix;
//arm_matrix_instance_f32 Z_matrix;
//arm_matrix_instance_f32 Velocity_matrix;


float SteadyStateKalmanFilter(KalmanFilter* filter, float32_t Vin,float32_t Velocity){
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b096      	sub	sp, #88	@ 0x58
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b2c:	edc7 0a01 	vstr	s1, [r7, #4]
	  arm_mat_init_f32(&filter->Velocity_matrix, 1, 1,(float32_t*) &Velocity);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	2201      	movs	r2, #1
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	f009 fe65 	bl	800d80a <arm_mat_init_f32>
	  arm_mat_trans_f32(&filter->A_matrix, &filter->A_transpose_matrix);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f503 722d 	add.w	r2, r3, #692	@ 0x2b4
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f00a fad5 	bl	800e0fe <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->C_matrix, &filter->C_transpose_matrix);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f503 7235 	add.w	r2, r3, #724	@ 0x2d4
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8003b60:	4619      	mov	r1, r3
 8003b62:	4610      	mov	r0, r2
 8003b64:	f00a facb 	bl	800e0fe <arm_mat_trans_f32>
	  arm_mat_trans_f32(&filter->G_matrix, &filter->G_transpose_matrix);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 7239 	add.w	r2, r3, #740	@ 0x2e4
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f00a fac1 	bl	800e0fe <arm_mat_trans_f32>
	  // Compute Xk = Ax + Bu
	  arm_mat_scale_f32(&filter->B_matrix, Vin, &filter->Bu_matrix); 		   				// Bu
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f503 7233 	add.w	r2, r3, #716	@ 0x2cc
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f503 7343 	add.w	r3, r3, #780	@ 0x30c
 8003b88:	4619      	mov	r1, r3
 8003b8a:	ed97 0a02 	vldr	s0, [r7, #8]
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f00a fa44 	bl	800e01c <arm_mat_scale_f32>
	  arm_mat_mult_f32(&filter->A_matrix, &filter->X_k_matrix, &filter->Ax_matrix);  		   		// Ax
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f503 7345 	add.w	r3, r3, #788	@ 0x314
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	f00a f9be 	bl	800df28 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->Ax_matrix, &filter->Bu_matrix, &filter->X_k_matrix); 		   		// Xk = Ax + Bu
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f503 7143 	add.w	r1, r3, #780	@ 0x30c
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f009 fde8 	bl	800d794 <arm_mat_add_f32>

	  // Compute (A * P_pk * A^T + G * Q * G^T)
	  arm_mat_mult_f32(&filter->A_matrix, &filter->P_k_matrix, &filter->P_k_matrix);  		   		// Pk = A * P_pk
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f00a f9a6 	bl	800df28 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->A_transpose_matrix, &filter->P_k_matrix); 		// Pk = A * P_pk * A^T
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f503 712f 	add.w	r1, r3, #700	@ 0x2bc
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f00a f99a 	bl	800df28 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->G_matrix, &filter->G_transpose_matrix, &filter->GGT_matrix);        // G * G^T
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f503 713b 	add.w	r1, r3, #748	@ 0x2ec
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f503 733f 	add.w	r3, r3, #764	@ 0x2fc
 8003c06:	461a      	mov	r2, r3
 8003c08:	f00a f98e 	bl	800df28 <arm_mat_mult_f32>
	  arm_mat_scale_f32(&filter->GGT_matrix, filter->Q, &filter->GQGT_matrix); 				   	   	// G * Q
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f503 723f 	add.w	r2, r3, #764	@ 0x2fc
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	edd3 7a30 	vldr	s15, [r3, #192]	@ 0xc0
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f503 7341 	add.w	r3, r3, #772	@ 0x304
 8003c1e:	4619      	mov	r1, r3
 8003c20:	eeb0 0a67 	vmov.f32	s0, s15
 8003c24:	4610      	mov	r0, r2
 8003c26:	f00a f9f9 	bl	800e01c <arm_mat_scale_f32>
	  arm_mat_add_f32(&filter->P_k_matrix, &filter->GQGT_matrix, &filter->P_k_matrix); 	       		// A * P_pk * A^T + G * Q * G^T
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f503 7141 	add.w	r1, r3, #772	@ 0x304
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	f009 fda9 	bl	800d794 <arm_mat_add_f32>

	  // Compute (C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->C_matrix, &filter->P_k_matrix, &filter->CP_matrix);			     // C * Pk
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8003c54:	461a      	mov	r2, r3
 8003c56:	f00a f967 	bl	800df28 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->CP_matrix, &filter->C_transpose_matrix, &filter->CPCT_matrix);   // C * Pk * C^T
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f503 7349 	add.w	r3, r3, #804	@ 0x324
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	f00a f95b 	bl	800df28 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->CPCT_matrix, &filter->R_matrix, &filter->CPCTR_matrix);			 // C * P_k * C^T + R
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f503 7159 	add.w	r1, r3, #868	@ 0x364
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f503 734b 	add.w	r3, r3, #812	@ 0x32c
 8003c84:	461a      	mov	r2, r3
 8003c86:	f009 fd85 	bl	800d794 <arm_mat_add_f32>

	  // Compute inverse of (C * P_k * C^T + R)
	  arm_mat_inverse_f32(&filter->CPCTR_matrix, &filter->CPCTRinv_matrix);					 // inverse of (C * P_k * C^T + R)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f503 724b 	add.w	r2, r3, #812	@ 0x32c
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8003c96:	4619      	mov	r1, r3
 8003c98:	4610      	mov	r0, r2
 8003c9a:	f009 fdce 	bl	800d83a <arm_mat_inverse_f32>

	  // Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	  arm_mat_mult_f32(&filter->P_k_matrix, &filter->C_transpose_matrix, &filter->PCT_matrix); 		 // P_k * C^T
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f503 7137 	add.w	r1, r3, #732	@ 0x2dc
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f503 734f 	add.w	r3, r3, #828	@ 0x33c
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f00a f939 	bl	800df28 <arm_mat_mult_f32>
	  arm_mat_mult_f32(&filter->PCT_matrix, &filter->CPCTRinv_matrix, &filter->K_matrix);  			 // P_k * C^T * inv(C * P_k * C^T + R)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f503 7151 	add.w	r1, r3, #836	@ 0x344
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f00a f92d 	bl	800df28 <arm_mat_mult_f32>

	  // Computation of the estimated state
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Cx_matrix);				 // C * X_k
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f503 7353 	add.w	r3, r3, #844	@ 0x34c
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	f00a f921 	bl	800df28 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->Velocity_matrix,  &filter->Cx_matrix, &filter->yCx_matrix);			  // y - ( C * X_k )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f503 7153 	add.w	r1, r3, #844	@ 0x34c
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f503 7355 	add.w	r3, r3, #852	@ 0x354
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f00a f9c5 	bl	800e088 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&filter->K_matrix, &filter->yCx_matrix, &filter->KyCx_matrix);		     // K( y - ( C * X_k ) )
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f503 7155 	add.w	r1, r3, #852	@ 0x354
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f503 7357 	add.w	r3, r3, #860	@ 0x35c
 8003d10:	461a      	mov	r2, r3
 8003d12:	f00a f909 	bl	800df28 <arm_mat_mult_f32>
	  arm_mat_add_f32(&filter->X_k_matrix, &filter->KyCx_matrix, &filter->X_k_matrix);		 	 // X_k + K( y - ( C * X_k ) )
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f503 7157 	add.w	r1, r3, #860	@ 0x35c
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 7329 	add.w	r3, r3, #676	@ 0x2a4
 8003d28:	461a      	mov	r2, r3
 8003d2a:	f009 fd33 	bl	800d794 <arm_mat_add_f32>

	  // Computation of the estimated output
	  arm_mat_mult_f32(&filter->C_matrix, &filter->X_k_matrix, &filter->Output_matrix);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f503 7129 	add.w	r1, r3, #676	@ 0x2a4
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8003d40:	461a      	mov	r2, r3
 8003d42:	f00a f8f1 	bl	800df28 <arm_mat_mult_f32>

	  // Computation of the state covariance error
	  arm_matrix_instance_f32 temp_matrix4;
	  float32_t temp_data4[16];
	  arm_mat_init_f32(&temp_matrix4, 4, 4,(float32_t*) &temp_data4);
 8003d46:	f107 0310 	add.w	r3, r7, #16
 8003d4a:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8003d4e:	2204      	movs	r2, #4
 8003d50:	2104      	movs	r1, #4
 8003d52:	f009 fd5a 	bl	800d80a <arm_mat_init_f32>

	  arm_mat_mult_f32(&filter->K_matrix, &filter->C_matrix, &temp_matrix4);				// K * C
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8003d62:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003d66:	4619      	mov	r1, r3
 8003d68:	f00a f8de 	bl	800df28 <arm_mat_mult_f32>
	  arm_mat_sub_f32(&filter->eye_matrix, &temp_matrix4, &temp_matrix4);			// (I - (K * C))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f503 7331 	add.w	r3, r3, #708	@ 0x2c4
 8003d72:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8003d76:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f00a f984 	bl	800e088 <arm_mat_sub_f32>
	  arm_mat_mult_f32(&temp_matrix4, &filter->P_k_matrix, &filter->P_k_matrix);			// (I - (K * C)) * P_k
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f503 712b 	add.w	r1, r3, #684	@ 0x2ac
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f503 722b 	add.w	r2, r3, #684	@ 0x2ac
 8003d8c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8003d90:	4618      	mov	r0, r3
 8003d92:	f00a f8c9 	bl	800df28 <arm_mat_mult_f32>
	  filter->Kalman_Speed = filter->X_k[1];
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
	  return  filter->Kalman_Speed;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8003da6:	ee07 3a90 	vmov	s15, r3
}
 8003daa:	eeb0 0a67 	vmov.f32	s0, s15
 8003dae:	3758      	adds	r7, #88	@ 0x58
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <Kalman_Start>:

void Kalman_Start(KalmanFilter* filter, float32_t* A_matrix, float32_t* B_matrix, float32_t Q, float32_t R){
 8003db4:	b5b0      	push	{r4, r5, r7, lr}
 8003db6:	b0a4      	sub	sp, #144	@ 0x90
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6178      	str	r0, [r7, #20]
 8003dbc:	6139      	str	r1, [r7, #16]
 8003dbe:	60fa      	str	r2, [r7, #12]
 8003dc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003dc4:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->Q = Q; //1.0
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
	filter->R[0] = R; //0.05
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4

	float32_t c[4] = {1.0f, 0.0f, 0.0f, 0.0f};
 8003dd8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003ddc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dde:	f04f 0300 	mov.w	r3, #0
 8003de2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dee:	f04f 0300 	mov.w	r3, #0
 8003df2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	float32_t g[4] = {0.0f,
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dfc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003e00:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	67bb      	str	r3, [r7, #120]	@ 0x78
					  1.0f,
					  0.0f,
					  0.0f};

	float32_t iden[16] = {1.0f, 0.0f, 0.0f, 0.0f,
 8003e0e:	4bc6      	ldr	r3, [pc, #792]	@ (8004128 <Kalman_Start+0x374>)
 8003e10:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8003e14:	461d      	mov	r5, r3
 8003e16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003e26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			  	  	 0.0f, 1.0f, 0.0f, 0.0f,
					 0.0f, 0.0f, 1.0f, 0.0f,
					 0.0f, 0.0f, 0.0f, 1.0f,};

	float32_t x_k[4] = {0.0f, 0.0f, 0.0f, 0.0f};
 8003e2a:	f107 031c 	add.w	r3, r7, #28
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	60da      	str	r2, [r3, #12]

	filter->Es_velocity[1] = 0.0f;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260

	int i;
	for(i=0;i<16;i++)
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e48:	e028      	b.n	8003e9c <Kalman_Start+0xe8>
	{
		filter->A[i] = A_matrix[i];
 8003e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	6979      	ldr	r1, [r7, #20]
 8003e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e5c:	3314      	adds	r3, #20
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	601a      	str	r2, [r3, #0]
		filter->eye[i] = iden[i];
 8003e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	3390      	adds	r3, #144	@ 0x90
 8003e6c:	443b      	add	r3, r7
 8003e6e:	3b64      	subs	r3, #100	@ 0x64
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	6979      	ldr	r1, [r7, #20]
 8003e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e78:	3398      	adds	r3, #152	@ 0x98
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	601a      	str	r2, [r3, #0]
		filter->P_k[i] = 0.0f;
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e86:	3304      	adds	r3, #4
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]
	for(i=0;i<16;i++)
 8003e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e96:	3301      	adds	r3, #1
 8003e98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ea0:	2b0f      	cmp	r3, #15
 8003ea2:	ddd2      	ble.n	8003e4a <Kalman_Start+0x96>
	}

	for(i=0;i<4;i++)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003eaa:	e03a      	b.n	8003f22 <Kalman_Start+0x16e>
	{
		filter->X_k[i] = x_k[i];
 8003eac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	3390      	adds	r3, #144	@ 0x90
 8003eb4:	443b      	add	r3, r7
 8003eb6:	3b74      	subs	r3, #116	@ 0x74
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	6979      	ldr	r1, [r7, #20]
 8003ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	601a      	str	r2, [r3, #0]
		filter->B[i] = B_matrix[i];
 8003ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	4413      	add	r3, r2
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	6979      	ldr	r1, [r7, #20]
 8003ed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ed8:	3324      	adds	r3, #36	@ 0x24
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	440b      	add	r3, r1
 8003ede:	601a      	str	r2, [r3, #0]
		filter->C[i] = c[i];
 8003ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	3390      	adds	r3, #144	@ 0x90
 8003ee8:	443b      	add	r3, r7
 8003eea:	3b14      	subs	r3, #20
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	6979      	ldr	r1, [r7, #20]
 8003ef0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ef4:	3328      	adds	r3, #40	@ 0x28
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	601a      	str	r2, [r3, #0]
		filter->G[i] = g[i];
 8003efc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	3390      	adds	r3, #144	@ 0x90
 8003f04:	443b      	add	r3, r7
 8003f06:	3b24      	subs	r3, #36	@ 0x24
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	6979      	ldr	r1, [r7, #20]
 8003f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f10:	332c      	adds	r3, #44	@ 0x2c
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	440b      	add	r3, r1
 8003f16:	601a      	str	r2, [r3, #0]
	for(i=0;i<4;i++)
 8003f18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	ddc0      	ble.n	8003eac <Kalman_Start+0xf8>

	}

	arm_mat_init_f32(&filter->X_k_matrix, 4, 1,filter->X_k);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f503 7029 	add.w	r0, r3, #676	@ 0x2a4
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	2201      	movs	r2, #1
 8003f34:	2104      	movs	r1, #4
 8003f36:	f009 fc68 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->P_k_matrix, 4, 4,filter->P_k);
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	f503 702b 	add.w	r0, r3, #684	@ 0x2ac
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	3310      	adds	r3, #16
 8003f44:	2204      	movs	r2, #4
 8003f46:	2104      	movs	r1, #4
 8003f48:	f009 fc5f 	bl	800d80a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_matrix, 4, 4,filter->A);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f503 702d 	add.w	r0, r3, #692	@ 0x2b4
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	3350      	adds	r3, #80	@ 0x50
 8003f56:	2204      	movs	r2, #4
 8003f58:	2104      	movs	r1, #4
 8003f5a:	f009 fc56 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->B_matrix, 4, 1,filter->B);
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	f503 7033 	add.w	r0, r3, #716	@ 0x2cc
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	3390      	adds	r3, #144	@ 0x90
 8003f68:	2201      	movs	r2, #1
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	f009 fc4d 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_matrix, 1, 4,filter->C);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f503 7035 	add.w	r0, r3, #724	@ 0x2d4
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	33a0      	adds	r3, #160	@ 0xa0
 8003f7a:	2204      	movs	r2, #4
 8003f7c:	2101      	movs	r1, #1
 8003f7e:	f009 fc44 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_matrix, 4, 1,filter->G);
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f503 7039 	add.w	r0, r3, #740	@ 0x2e4
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	33b0      	adds	r3, #176	@ 0xb0
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	2104      	movs	r1, #4
 8003f90:	f009 fc3b 	bl	800d80a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->A_transpose_matrix, 4, 4, filter->A_transpose);
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	33c8      	adds	r3, #200	@ 0xc8
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	2104      	movs	r1, #4
 8003fa2:	f009 fc32 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->C_transpose_matrix, 4, 1, filter->C_transpose);
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f503 7037 	add.w	r0, r3, #732	@ 0x2dc
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	f009 fc28 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->G_transpose_matrix, 1, 4, filter->G_transpose);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f503 703b 	add.w	r0, r3, #748	@ 0x2ec
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8003fc6:	2204      	movs	r2, #4
 8003fc8:	2101      	movs	r1, #1
 8003fca:	f009 fc1e 	bl	800d80a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->GGT_matrix, 4, 4, filter->GGT);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f503 703f 	add.w	r0, r3, #764	@ 0x2fc
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8003fda:	2204      	movs	r2, #4
 8003fdc:	2104      	movs	r1, #4
 8003fde:	f009 fc14 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->GQGT_matrix, 4, 4, filter->GQGT);
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f503 7041 	add.w	r0, r3, #772	@ 0x304
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003fee:	2204      	movs	r2, #4
 8003ff0:	2104      	movs	r1, #4
 8003ff2:	f009 fc0a 	bl	800d80a <arm_mat_init_f32>

	// Compute Xk = Ax + Bu
	arm_mat_init_f32(&filter->Bu_matrix, 4, 1, filter->Bu_data);
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	f503 7043 	add.w	r0, r3, #780	@ 0x30c
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8004002:	2201      	movs	r2, #1
 8004004:	2104      	movs	r1, #4
 8004006:	f009 fc00 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Ax_matrix, 4, 1, filter->Ax_data);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f503 7045 	add.w	r0, r3, #788	@ 0x314
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f503 73d4 	add.w	r3, r3, #424	@ 0x1a8
 8004016:	2201      	movs	r2, #1
 8004018:	2104      	movs	r1, #4
 800401a:	f009 fbf6 	bl	800d80a <arm_mat_init_f32>

	// Compute (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CP_matrix, 1, 4, filter->CP);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f503 7047 	add.w	r0, r3, #796	@ 0x31c
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 800402a:	2204      	movs	r2, #4
 800402c:	2101      	movs	r1, #1
 800402e:	f009 fbec 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCT_matrix, 1, 1, filter->CPCT);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f503 7049 	add.w	r0, r3, #804	@ 0x324
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	f503 7306 	add.w	r3, r3, #536	@ 0x218
 800403e:	2201      	movs	r2, #1
 8004040:	2101      	movs	r1, #1
 8004042:	f009 fbe2 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->CPCTR_matrix, 1, 1, filter->CPCTR);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f503 704b 	add.w	r0, r3, #812	@ 0x32c
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8004052:	2201      	movs	r2, #1
 8004054:	2101      	movs	r1, #1
 8004056:	f009 fbd8 	bl	800d80a <arm_mat_init_f32>

	// Compute Kalman Gain: K = P_k * C^T * inv(C * P_k * C^T + R)
	arm_mat_init_f32(&filter->K_matrix, 4, 1, filter->K);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004066:	2201      	movs	r2, #1
 8004068:	2104      	movs	r1, #4
 800406a:	f009 fbce 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->PCT_matrix, 4, 1,filter->PCT);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f503 704f 	add.w	r0, r3, #828	@ 0x33c
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f503 730c 	add.w	r3, r3, #560	@ 0x230
 800407a:	2201      	movs	r2, #1
 800407c:	2104      	movs	r1, #4
 800407e:	f009 fbc4 	bl	800d80a <arm_mat_init_f32>

	// Compute inverse of (C * P_k * C^T + R)
	arm_mat_init_f32(&filter->CPCTRinv_matrix, 1, 1,filter->CPCTRinv);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f503 7051 	add.w	r0, r3, #836	@ 0x344
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800408e:	2201      	movs	r2, #1
 8004090:	2101      	movs	r1, #1
 8004092:	f009 fbba 	bl	800d80a <arm_mat_init_f32>

	// Computation of the estimated state
	arm_mat_init_f32(&filter->Cx_matrix, 1, 1, filter->Cx);
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f503 7053 	add.w	r0, r3, #844	@ 0x34c
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f503 7311 	add.w	r3, r3, #580	@ 0x244
 80040a2:	2201      	movs	r2, #1
 80040a4:	2101      	movs	r1, #1
 80040a6:	f009 fbb0 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->yCx_matrix, 1, 1, filter->yCx);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f503 7055 	add.w	r0, r3, #852	@ 0x354
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f503 7312 	add.w	r3, r3, #584	@ 0x248
 80040b6:	2201      	movs	r2, #1
 80040b8:	2101      	movs	r1, #1
 80040ba:	f009 fba6 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->KyCx_matrix, 4, 1, filter->KyCx);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f503 7057 	add.w	r0, r3, #860	@ 0x35c
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 80040ca:	2201      	movs	r2, #1
 80040cc:	2104      	movs	r1, #4
 80040ce:	f009 fb9c 	bl	800d80a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->Output_matrix, 1, 1, filter->Es_velocity);
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f503 703d 	add.w	r0, r3, #756	@ 0x2f4
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80040de:	2201      	movs	r2, #1
 80040e0:	2101      	movs	r1, #1
 80040e2:	f009 fb92 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->eye_matrix, 4, 4, filter->eye);
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f503 7031 	add.w	r0, r3, #708	@ 0x2c4
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80040f2:	2204      	movs	r2, #4
 80040f4:	2104      	movs	r1, #4
 80040f6:	f009 fb88 	bl	800d80a <arm_mat_init_f32>

	arm_mat_init_f32(&filter->R_matrix, 1, 1, filter->R);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f503 7059 	add.w	r0, r3, #868	@ 0x364
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	33c4      	adds	r3, #196	@ 0xc4
 8004104:	2201      	movs	r2, #1
 8004106:	2101      	movs	r1, #1
 8004108:	f009 fb7f 	bl	800d80a <arm_mat_init_f32>
	arm_mat_init_f32(&filter->Z_matrix, 1, 1, filter->Z);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f503 7328 	add.w	r3, r3, #672	@ 0x2a0
 8004118:	2201      	movs	r2, #1
 800411a:	2101      	movs	r1, #1
 800411c:	f009 fb75 	bl	800d80a <arm_mat_init_f32>
}
 8004120:	bf00      	nop
 8004122:	3790      	adds	r7, #144	@ 0x90
 8004124:	46bd      	mov	sp, r7
 8004126:	bdb0      	pop	{r4, r5, r7, pc}
 8004128:	08010048 	.word	0x08010048

0800412c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004130:	f002 f90b 	bl	800634a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004134:	f000 f82a 	bl	800418c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004138:	f7ff fbf6 	bl	8003928 <MX_GPIO_Init>
	MX_DMA_Init();
 800413c:	f7ff fbaa 	bl	8003894 <MX_DMA_Init>
	MX_ADC1_Init();
 8004140:	f7ff fa9c 	bl	800367c <MX_ADC1_Init>
	MX_TIM2_Init();
 8004144:	f001 fb16 	bl	8005774 <MX_TIM2_Init>
	MX_TIM3_Init();
 8004148:	f001 fb62 	bl	8005810 <MX_TIM3_Init>
	MX_TIM4_Init();
 800414c:	f001 fbb6 	bl	80058bc <MX_TIM4_Init>
	MX_TIM5_Init();
 8004150:	f001 fc0a 	bl	8005968 <MX_TIM5_Init>
	MX_TIM8_Init();
 8004154:	f001 fc5e 	bl	8005a14 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8004158:	f001 ff20 	bl	8005f9c <MX_USART2_UART_Init>
	MX_TIM16_Init();
 800415c:	f001 fd18 	bl	8005b90 <MX_TIM16_Init>
	MX_TIM1_Init();
 8004160:	f001 fa74 	bl	800564c <MX_TIM1_Init>
	MX_LPUART1_UART_Init();
 8004164:	f001 fed0 	bl	8005f08 <MX_LPUART1_UART_Init>
	/* USER CODE BEGIN 2 */
	plotter_begin();
 8004168:	f000 fcb6 	bl	8004ad8 <plotter_begin>

	revolute_axis.position = revolute_encoder.rads;
 800416c:	4b04      	ldr	r3, [pc, #16]	@ (8004180 <main+0x54>)
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	4a04      	ldr	r2, [pc, #16]	@ (8004184 <main+0x58>)
 8004172:	6013      	str	r3, [r2, #0]
	motion_sequence_state = MOTION_IDLE;
 8004174:	4b04      	ldr	r3, [pc, #16]	@ (8004188 <main+0x5c>)
 8004176:	2200      	movs	r2, #0
 8004178:	701a      	strb	r2, [r3, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800417a:	bf00      	nop
 800417c:	e7fd      	b.n	800417a <main+0x4e>
 800417e:	bf00      	nop
 8004180:	200003f4 	.word	0x200003f4
 8004184:	2000027c 	.word	0x2000027c
 8004188:	200002bc 	.word	0x200002bc

0800418c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b094      	sub	sp, #80	@ 0x50
 8004190:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004192:	f107 0318 	add.w	r3, r7, #24
 8004196:	2238      	movs	r2, #56	@ 0x38
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f00a f8a6 	bl	800e2ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	605a      	str	r2, [r3, #4]
 80041a8:	609a      	str	r2, [r3, #8]
 80041aa:	60da      	str	r2, [r3, #12]
 80041ac:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80041ae:	2000      	movs	r0, #0
 80041b0:	f004 fba8 	bl	8008904 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80041b4:	2302      	movs	r3, #2
 80041b6:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041be:	2340      	movs	r3, #64	@ 0x40
 80041c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041c2:	2302      	movs	r3, #2
 80041c4:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80041c6:	2302      	movs	r3, #2
 80041c8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80041ca:	2304      	movs	r3, #4
 80041cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80041ce:	2355      	movs	r3, #85	@ 0x55
 80041d0:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80041d2:	2302      	movs	r3, #2
 80041d4:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80041d6:	2302      	movs	r3, #2
 80041d8:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80041da:	2302      	movs	r3, #2
 80041dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80041de:	f107 0318 	add.w	r3, r7, #24
 80041e2:	4618      	mov	r0, r3
 80041e4:	f004 fc42 	bl	8008a6c <HAL_RCC_OscConfig>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <SystemClock_Config+0x66>
		Error_Handler();
 80041ee:	f000 fc6b 	bl	8004ac8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80041f2:	230f      	movs	r3, #15
 80041f4:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80041f6:	2303      	movs	r3, #3
 80041f8:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004202:	2300      	movs	r3, #0
 8004204:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	2104      	movs	r1, #4
 800420a:	4618      	mov	r0, r3
 800420c:	f004 ff40 	bl	8009090 <HAL_RCC_ClockConfig>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <SystemClock_Config+0x8e>
		Error_Handler();
 8004216:	f000 fc57 	bl	8004ac8 <Error_Handler>
	}
}
 800421a:	bf00      	nop
 800421c:	3750      	adds	r7, #80	@ 0x50
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <normalize_angle>:

/* USER CODE BEGIN 4 */
float normalize_angle(float angle_rad) {
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	ed87 0a01 	vstr	s0, [r7, #4]
	float result = fmodf(angle_rad, 2.0f * PI);
 800422e:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 800426c <normalize_angle+0x48>
 8004232:	ed97 0a01 	vldr	s0, [r7, #4]
 8004236:	f00a f8f3 	bl	800e420 <fmodf>
 800423a:	ed87 0a03 	vstr	s0, [r7, #12]
	if (result < 0.0f) {
 800423e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424a:	d507      	bpl.n	800425c <normalize_angle+0x38>
		result += 2.0f * PI;
 800424c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004250:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 800426c <normalize_angle+0x48>
 8004254:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004258:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	return result;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	ee07 3a90 	vmov	s15, r3
}
 8004262:	eeb0 0a67 	vmov.f32	s0, s15
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40c90fdb 	.word	0x40c90fdb

08004270 <calculate_movement_deg>:

float calculate_movement_deg(float current_deg, float target_deg) {
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	ed87 0a01 	vstr	s0, [r7, #4]
 800427a:	edc7 0a00 	vstr	s1, [r7]
	float movement = 0.0f;
 800427e:	f04f 0300 	mov.w	r3, #0
 8004282:	60fb      	str	r3, [r7, #12]

	// If both angles are on the same side of 180°
	if ((current_deg < 180.0f && target_deg < 180.0f)
 8004284:	edd7 7a01 	vldr	s15, [r7, #4]
 8004288:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80043ec <calculate_movement_deg+0x17c>
 800428c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004294:	d508      	bpl.n	80042a8 <calculate_movement_deg+0x38>
 8004296:	edd7 7a00 	vldr	s15, [r7]
 800429a:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80043ec <calculate_movement_deg+0x17c>
 800429e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	d411      	bmi.n	80042cc <calculate_movement_deg+0x5c>
			|| (current_deg >= 180.0f && target_deg >= 180.0f)) {
 80042a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80042ac:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80043ec <calculate_movement_deg+0x17c>
 80042b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	db33      	blt.n	8004322 <calculate_movement_deg+0xb2>
 80042ba:	edd7 7a00 	vldr	s15, [r7]
 80042be:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 80043ec <calculate_movement_deg+0x17c>
 80042c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ca:	db2a      	blt.n	8004322 <calculate_movement_deg+0xb2>
		// Simple case - take shortest path
		movement = target_deg - current_deg;
 80042cc:	ed97 7a00 	vldr	s14, [r7]
 80042d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80042d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042d8:	edc7 7a03 	vstr	s15, [r7, #12]

		// Ensure shortest path
		if (movement > 180.0f)
 80042dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80042e0:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 80043ec <calculate_movement_deg+0x17c>
 80042e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ec:	dd07      	ble.n	80042fe <calculate_movement_deg+0x8e>
			movement -= 360.0f;
 80042ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80042f2:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80043f0 <calculate_movement_deg+0x180>
 80042f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042fa:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 80042fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8004302:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80043f4 <calculate_movement_deg+0x184>
 8004306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430e:	d562      	bpl.n	80043d6 <calculate_movement_deg+0x166>
			movement += 360.0f;
 8004310:	edd7 7a03 	vldr	s15, [r7, #12]
 8004314:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80043f0 <calculate_movement_deg+0x180>
 8004318:	ee77 7a87 	vadd.f32	s15, s15, s14
 800431c:	edc7 7a03 	vstr	s15, [r7, #12]
		if (movement < -180.0f)
 8004320:	e059      	b.n	80043d6 <calculate_movement_deg+0x166>
	}
	// If we need to cross the 180° boundary
	else {
		if (current_deg < 180.0f) {
 8004322:	edd7 7a01 	vldr	s15, [r7, #4]
 8004326:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80043ec <calculate_movement_deg+0x17c>
 800432a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800432e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004332:	d52a      	bpl.n	800438a <calculate_movement_deg+0x11a>
			// Current < 180, target > 180
			// Go counterclockwise through 0°
			if (current_deg < target_deg - 180.0f) {
 8004334:	edd7 7a00 	vldr	s15, [r7]
 8004338:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80043ec <calculate_movement_deg+0x17c>
 800433c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004340:	ed97 7a01 	vldr	s14, [r7, #4]
 8004344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434c:	d50e      	bpl.n	800436c <calculate_movement_deg+0xfc>
				movement = -(current_deg + (360.0f - target_deg)); // Negative = clockwise
 800434e:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80043f0 <calculate_movement_deg+0x180>
 8004352:	edd7 7a00 	vldr	s15, [r7]
 8004356:	ee37 7a67 	vsub.f32	s14, s14, s15
 800435a:	edd7 7a01 	vldr	s15, [r7, #4]
 800435e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004362:	eef1 7a67 	vneg.f32	s15, s15
 8004366:	edc7 7a03 	vstr	s15, [r7, #12]
 800436a:	e034      	b.n	80043d6 <calculate_movement_deg+0x166>
			} else {
				movement = -(current_deg - target_deg + 360.0f); // Negative = clockwise
 800436c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004370:	edd7 7a00 	vldr	s15, [r7]
 8004374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004378:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80043f0 <calculate_movement_deg+0x180>
 800437c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004380:	eef1 7a67 	vneg.f32	s15, s15
 8004384:	edc7 7a03 	vstr	s15, [r7, #12]
 8004388:	e025      	b.n	80043d6 <calculate_movement_deg+0x166>
			}
		} else {
			// Current > 180, target < 180
			// Go clockwise through 0°
			if (target_deg < current_deg - 180.0f) {
 800438a:	edd7 7a01 	vldr	s15, [r7, #4]
 800438e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80043ec <calculate_movement_deg+0x17c>
 8004392:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004396:	ed97 7a00 	vldr	s14, [r7]
 800439a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	d50c      	bpl.n	80043be <calculate_movement_deg+0x14e>
				movement = 360.0f - current_deg + target_deg; // Positive = counterclockwise
 80043a4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80043f0 <calculate_movement_deg+0x180>
 80043a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80043ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043b0:	ed97 7a00 	vldr	s14, [r7]
 80043b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043b8:	edc7 7a03 	vstr	s15, [r7, #12]
 80043bc:	e00b      	b.n	80043d6 <calculate_movement_deg+0x166>
			} else {
				movement = target_deg - current_deg + 360.0f; // Positive = counterclockwise
 80043be:	ed97 7a00 	vldr	s14, [r7]
 80043c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80043c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043ca:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80043f0 <calculate_movement_deg+0x180>
 80043ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043d2:	edc7 7a03 	vstr	s15, [r7, #12]
			}
		}
	}

	return movement;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	ee07 3a90 	vmov	s15, r3
}
 80043dc:	eeb0 0a67 	vmov.f32	s0, s15
 80043e0:	3714      	adds	r7, #20
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	43340000 	.word	0x43340000
 80043f0:	43b40000 	.word	0x43b40000
 80043f4:	c3340000 	.word	0xc3340000

080043f8 <start_revolute_trajectory>:

void start_revolute_trajectory(float revolute_target_deg) {
 80043f8:	b590      	push	{r4, r7, lr}
 80043fa:	ed2d 8b02 	vpush	{d8}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	ed87 0a01 	vstr	s0, [r7, #4]
	float rev_current = revolute_encoder.rads;
 8004406:	4b37      	ldr	r3, [pc, #220]	@ (80044e4 <start_revolute_trajectory+0xec>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440a:	617b      	str	r3, [r7, #20]

	// Reset trajectory evaluation
	revEva.t = 0.0f;
 800440c:	4b36      	ldr	r3, [pc, #216]	@ (80044e8 <start_revolute_trajectory+0xf0>)
 800440e:	f04f 0200 	mov.w	r2, #0
 8004412:	60da      	str	r2, [r3, #12]
	revEva.isFinised = false;
 8004414:	4b34      	ldr	r3, [pc, #208]	@ (80044e8 <start_revolute_trajectory+0xf0>)
 8004416:	2200      	movs	r2, #0
 8004418:	741a      	strb	r2, [r3, #16]

	revolute_axis.initial_pos = rev_current;
 800441a:	4a34      	ldr	r2, [pc, #208]	@ (80044ec <start_revolute_trajectory+0xf4>)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	60d3      	str	r3, [r2, #12]

	// Calculate shortest path to target
	float normalized_current = normalize_angle(rev_current);
 8004420:	ed97 0a05 	vldr	s0, [r7, #20]
 8004424:	f7ff fefe 	bl	8004224 <normalize_angle>
 8004428:	ed87 0a04 	vstr	s0, [r7, #16]
	float current_deg = normalized_current * 180.0f / PI;
 800442c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004430:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80044f0 <start_revolute_trajectory+0xf8>
 8004434:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004438:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80044f4 <start_revolute_trajectory+0xfc>
 800443c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004440:	edc7 7a03 	vstr	s15, [r7, #12]
	movement_deg = calculate_movement_deg(current_deg, revolute_target_deg);
 8004444:	edd7 0a01 	vldr	s1, [r7, #4]
 8004448:	ed97 0a03 	vldr	s0, [r7, #12]
 800444c:	f7ff ff10 	bl	8004270 <calculate_movement_deg>
 8004450:	eef0 7a40 	vmov.f32	s15, s0
 8004454:	4b28      	ldr	r3, [pc, #160]	@ (80044f8 <start_revolute_trajectory+0x100>)
 8004456:	edc3 7a00 	vstr	s15, [r3]
	float movement_rad = movement_deg * PI / 180.0f;
 800445a:	4b27      	ldr	r3, [pc, #156]	@ (80044f8 <start_revolute_trajectory+0x100>)
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80044f4 <start_revolute_trajectory+0xfc>
 8004464:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004468:	eddf 6a21 	vldr	s13, [pc, #132]	@ 80044f0 <start_revolute_trajectory+0xf8>
 800446c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004470:	edc7 7a02 	vstr	s15, [r7, #8]
	revolute_axis.target_pos = revolute_axis.initial_pos + movement_rad;
 8004474:	4b1d      	ldr	r3, [pc, #116]	@ (80044ec <start_revolute_trajectory+0xf4>)
 8004476:	ed93 7a03 	vldr	s14, [r3, #12]
 800447a:	edd7 7a02 	vldr	s15, [r7, #8]
 800447e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004482:	4b1a      	ldr	r3, [pc, #104]	@ (80044ec <start_revolute_trajectory+0xf4>)
 8004484:	edc3 7a04 	vstr	s15, [r3, #16]

	// Generate trapezoidal trajectory
	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 8004488:	4b18      	ldr	r3, [pc, #96]	@ (80044ec <start_revolute_trajectory+0xf4>)
 800448a:	ed93 8a03 	vldr	s16, [r3, #12]
 800448e:	4b17      	ldr	r3, [pc, #92]	@ (80044ec <start_revolute_trajectory+0xf4>)
 8004490:	edd3 8a04 	vldr	s17, [r3, #16]
			revolute_axis.target_pos,
			ZGX45RGG_150RPM_Constant.traject_qd_max,
 8004494:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <start_revolute_trajectory+0x104>)
 8004496:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 800449a:	4610      	mov	r0, r2
 800449c:	4619      	mov	r1, r3
 800449e:	f7fc fb59 	bl	8000b54 <__aeabi_d2f>
 80044a2:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80044a4:	4b15      	ldr	r3, [pc, #84]	@ (80044fc <start_revolute_trajectory+0x104>)
 80044a6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
	Trapezoidal_Generator(&revGen, revolute_axis.initial_pos,
 80044aa:	4610      	mov	r0, r2
 80044ac:	4619      	mov	r1, r3
 80044ae:	f7fc fb51 	bl	8000b54 <__aeabi_d2f>
 80044b2:	4603      	mov	r3, r0
 80044b4:	ee01 3a90 	vmov	s3, r3
 80044b8:	ee01 4a10 	vmov	s2, r4
 80044bc:	eef0 0a68 	vmov.f32	s1, s17
 80044c0:	eeb0 0a48 	vmov.f32	s0, s16
 80044c4:	480e      	ldr	r0, [pc, #56]	@ (8004500 <start_revolute_trajectory+0x108>)
 80044c6:	f7fe fc55 	bl	8002d74 <Trapezoidal_Generator>

	revolute_axis.trajectory_active = true;
 80044ca:	4b08      	ldr	r3, [pc, #32]	@ (80044ec <start_revolute_trajectory+0xf4>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	motion_sequence_state = MOTION_REVOLUTE_ACTIVE;
 80044d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <start_revolute_trajectory+0x10c>)
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]
}
 80044d8:	bf00      	nop
 80044da:	371c      	adds	r7, #28
 80044dc:	46bd      	mov	sp, r7
 80044de:	ecbd 8b02 	vpop	{d8}
 80044e2:	bd90      	pop	{r4, r7, pc}
 80044e4:	200003f4 	.word	0x200003f4
 80044e8:	200002d4 	.word	0x200002d4
 80044ec:	2000027c 	.word	0x2000027c
 80044f0:	43340000 	.word	0x43340000
 80044f4:	40490fdb 	.word	0x40490fdb
 80044f8:	200002f4 	.word	0x200002f4
 80044fc:	20000000 	.word	0x20000000
 8004500:	200002c0 	.word	0x200002c0
 8004504:	200002bc 	.word	0x200002bc

08004508 <update_revolute_position_control>:

void update_revolute_position_control(void) {
 8004508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800450a:	ed2d 8b02 	vpush	{d8}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
	float normalized_position = normalize_angle(revolute_encoder.rads);
 8004512:	4b35      	ldr	r3, [pc, #212]	@ (80045e8 <update_revolute_position_control+0xe0>)
 8004514:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004518:	eeb0 0a67 	vmov.f32	s0, s15
 800451c:	f7ff fe82 	bl	8004224 <normalize_angle>
 8004520:	ed87 0a01 	vstr	s0, [r7, #4]
	revolute_axis.pos_error = revolute_axis.position - normalized_position;
 8004524:	4b31      	ldr	r3, [pc, #196]	@ (80045ec <update_revolute_position_control+0xe4>)
 8004526:	ed93 7a00 	vldr	s14, [r3]
 800452a:	edd7 7a01 	vldr	s15, [r7, #4]
 800452e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004532:	4b2e      	ldr	r3, [pc, #184]	@ (80045ec <update_revolute_position_control+0xe4>)
 8004534:	edc3 7a05 	vstr	s15, [r3, #20]

	// Handle angle wrapping
	if (revolute_axis.pos_error > PI)
 8004538:	4b2c      	ldr	r3, [pc, #176]	@ (80045ec <update_revolute_position_control+0xe4>)
 800453a:	edd3 7a05 	vldr	s15, [r3, #20]
 800453e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80045f0 <update_revolute_position_control+0xe8>
 8004542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454a:	dd09      	ble.n	8004560 <update_revolute_position_control+0x58>
		revolute_axis.pos_error -= 2.0f * PI;
 800454c:	4b27      	ldr	r3, [pc, #156]	@ (80045ec <update_revolute_position_control+0xe4>)
 800454e:	edd3 7a05 	vldr	s15, [r3, #20]
 8004552:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80045f4 <update_revolute_position_control+0xec>
 8004556:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800455a:	4b24      	ldr	r3, [pc, #144]	@ (80045ec <update_revolute_position_control+0xe4>)
 800455c:	edc3 7a05 	vstr	s15, [r3, #20]
	if (revolute_axis.pos_error < -PI)
 8004560:	4b22      	ldr	r3, [pc, #136]	@ (80045ec <update_revolute_position_control+0xe4>)
 8004562:	edd3 7a05 	vldr	s15, [r3, #20]
 8004566:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80045f8 <update_revolute_position_control+0xf0>
 800456a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004572:	d509      	bpl.n	8004588 <update_revolute_position_control+0x80>
		revolute_axis.pos_error += 2.0f * PI;
 8004574:	4b1d      	ldr	r3, [pc, #116]	@ (80045ec <update_revolute_position_control+0xe4>)
 8004576:	edd3 7a05 	vldr	s15, [r3, #20]
 800457a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80045f4 <update_revolute_position_control+0xec>
 800457e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004582:	4b1a      	ldr	r3, [pc, #104]	@ (80045ec <update_revolute_position_control+0xe4>)
 8004584:	edc3 7a05 	vstr	s15, [r3, #20]

	revolute_axis.command_vel = PWM_Satuation(
 8004588:	4b18      	ldr	r3, [pc, #96]	@ (80045ec <update_revolute_position_control+0xe4>)
 800458a:	edd3 7a05 	vldr	s15, [r3, #20]
 800458e:	eeb0 0a67 	vmov.f32	s0, s15
 8004592:	481a      	ldr	r0, [pc, #104]	@ (80045fc <update_revolute_position_control+0xf4>)
 8004594:	f7fc fdc0 	bl	8001118 <PID_CONTROLLER_Compute>
 8004598:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_position_pid,
					revolute_axis.pos_error), ZGX45RGG_150RPM_Constant.qd_max,
 800459c:	4b18      	ldr	r3, [pc, #96]	@ (8004600 <update_revolute_position_control+0xf8>)
 800459e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	revolute_axis.command_vel = PWM_Satuation(
 80045a2:	4610      	mov	r0, r2
 80045a4:	4619      	mov	r1, r3
 80045a6:	f7fc fa8d 	bl	8000ac4 <__aeabi_d2iz>
 80045aa:	4606      	mov	r6, r0
			-ZGX45RGG_150RPM_Constant.qd_max);
 80045ac:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <update_revolute_position_control+0xf8>)
 80045ae:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80045b2:	4614      	mov	r4, r2
 80045b4:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_vel = PWM_Satuation(
 80045b8:	4620      	mov	r0, r4
 80045ba:	4629      	mov	r1, r5
 80045bc:	f7fc fa82 	bl	8000ac4 <__aeabi_d2iz>
 80045c0:	4603      	mov	r3, r0
 80045c2:	4619      	mov	r1, r3
 80045c4:	4630      	mov	r0, r6
 80045c6:	eeb0 0a48 	vmov.f32	s0, s16
 80045ca:	f7fc fd43 	bl	8001054 <PWM_Satuation>
 80045ce:	ee07 0a90 	vmov	s15, r0
 80045d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045d6:	4b05      	ldr	r3, [pc, #20]	@ (80045ec <update_revolute_position_control+0xe4>)
 80045d8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
}
 80045dc:	bf00      	nop
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	ecbd 8b02 	vpop	{d8}
 80045e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045e8:	200003f4 	.word	0x200003f4
 80045ec:	2000027c 	.word	0x2000027c
 80045f0:	40490fdb 	.word	0x40490fdb
 80045f4:	40c90fdb 	.word	0x40c90fdb
 80045f8:	c0490fdb 	.word	0xc0490fdb
 80045fc:	200004a0 	.word	0x200004a0
 8004600:	20000000 	.word	0x20000000
 8004604:	00000000 	.word	0x00000000

08004608 <update_revolute_velocity_control>:

void update_revolute_velocity_control(void) {
 8004608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800460c:	ed2d 8b02 	vpush	{d8}
 8004610:	af00      	add	r7, sp, #0
	if (revolute_axis.trajectory_active) {
 8004612:	4b8b      	ldr	r3, [pc, #556]	@ (8004840 <update_revolute_velocity_control+0x238>)
 8004614:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <update_revolute_velocity_control+0x36>
		revolute_axis.vel_error = revolute_axis.command_vel
 800461c:	4b88      	ldr	r3, [pc, #544]	@ (8004840 <update_revolute_velocity_control+0x238>)
 800461e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				+ revolute_axis.velocity - revolute_axis.kalman_velocity;
 8004622:	4b87      	ldr	r3, [pc, #540]	@ (8004840 <update_revolute_velocity_control+0x238>)
 8004624:	edd3 7a01 	vldr	s15, [r3, #4]
 8004628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800462c:	4b84      	ldr	r3, [pc, #528]	@ (8004840 <update_revolute_velocity_control+0x238>)
 800462e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004632:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 8004636:	4b82      	ldr	r3, [pc, #520]	@ (8004840 <update_revolute_velocity_control+0x238>)
 8004638:	edc3 7a06 	vstr	s15, [r3, #24]
 800463c:	e00a      	b.n	8004654 <update_revolute_velocity_control+0x4c>
	} else {
		revolute_axis.vel_error = revolute_axis.command_vel
 800463e:	4b80      	ldr	r3, [pc, #512]	@ (8004840 <update_revolute_velocity_control+0x238>)
 8004640:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
				- revolute_axis.kalman_velocity;
 8004644:	4b7e      	ldr	r3, [pc, #504]	@ (8004840 <update_revolute_velocity_control+0x238>)
 8004646:	edd3 7a07 	vldr	s15, [r3, #28]
 800464a:	ee77 7a67 	vsub.f32	s15, s14, s15
		revolute_axis.vel_error = revolute_axis.command_vel
 800464e:	4b7c      	ldr	r3, [pc, #496]	@ (8004840 <update_revolute_velocity_control+0x238>)
 8004650:	edc3 7a06 	vstr	s15, [r3, #24]
	}

	revolute_axis.command_pos = PWM_Satuation(
 8004654:	4b7a      	ldr	r3, [pc, #488]	@ (8004840 <update_revolute_velocity_control+0x238>)
 8004656:	edd3 7a06 	vldr	s15, [r3, #24]
 800465a:	eeb0 0a67 	vmov.f32	s0, s15
 800465e:	4879      	ldr	r0, [pc, #484]	@ (8004844 <update_revolute_velocity_control+0x23c>)
 8004660:	f7fc fd5a 	bl	8001118 <PID_CONTROLLER_Compute>
 8004664:	eeb0 8a40 	vmov.f32	s16, s0
			PID_CONTROLLER_Compute(&revolute_velocity_pid, revolute_axis.vel_error),
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8004668:	4b77      	ldr	r3, [pc, #476]	@ (8004848 <update_revolute_velocity_control+0x240>)
 800466a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(
 800466e:	4610      	mov	r0, r2
 8004670:	4619      	mov	r1, r3
 8004672:	f7fc fa27 	bl	8000ac4 <__aeabi_d2iz>
 8004676:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 8004678:	4b73      	ldr	r3, [pc, #460]	@ (8004848 <update_revolute_velocity_control+0x240>)
 800467a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800467e:	4690      	mov	r8, r2
 8004680:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(
 8004684:	4640      	mov	r0, r8
 8004686:	4649      	mov	r1, r9
 8004688:	f7fc fa1c 	bl	8000ac4 <__aeabi_d2iz>
 800468c:	4603      	mov	r3, r0
 800468e:	4619      	mov	r1, r3
 8004690:	4630      	mov	r0, r6
 8004692:	eeb0 0a48 	vmov.f32	s0, s16
 8004696:	f7fc fcdd 	bl	8001054 <PWM_Satuation>
 800469a:	ee07 0a90 	vmov	s15, r0
 800469e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046a2:	4b67      	ldr	r3, [pc, #412]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80046a4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	if (revolute_axis.trajectory_active) {
 80046a8:	4b65      	ldr	r3, [pc, #404]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80046aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d01c      	beq.n	80046ec <update_revolute_velocity_control+0xe4>
		revolute_axis.ffd = REVOLUTE_MOTOR_FFD_Compute(&revolute_motor_ffd,
 80046b2:	4b63      	ldr	r3, [pc, #396]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80046b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80046b8:	eeb0 0a67 	vmov.f32	s0, s15
 80046bc:	4863      	ldr	r0, [pc, #396]	@ (800484c <update_revolute_velocity_control+0x244>)
 80046be:	f7fc feeb 	bl	8001498 <REVOLUTE_MOTOR_FFD_Compute>
 80046c2:	eef0 7a40 	vmov.f32	s15, s0
 80046c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80046c8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
				revolute_axis.velocity);
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80046cc:	4b60      	ldr	r3, [pc, #384]	@ (8004850 <update_revolute_velocity_control+0x248>)
 80046ce:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80046d2:	eddf 0a60 	vldr	s1, [pc, #384]	@ 8004854 <update_revolute_velocity_control+0x24c>
 80046d6:	eeb0 0a67 	vmov.f32	s0, s15
 80046da:	485f      	ldr	r0, [pc, #380]	@ (8004858 <update_revolute_velocity_control+0x250>)
 80046dc:	f7fc ff6f 	bl	80015be <REVOLUTE_MOTOR_DFD_Compute>
 80046e0:	eef0 7a40 	vmov.f32	s15, s0
 80046e4:	4b56      	ldr	r3, [pc, #344]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80046e6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80046ea:	e012      	b.n	8004712 <update_revolute_velocity_control+0x10a>
				revolute_encoder.rads, 300.0f / 1000.0f);
	} else {
		revolute_axis.ffd = 0.0f;
 80046ec:	4b54      	ldr	r3, [pc, #336]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	631a      	str	r2, [r3, #48]	@ 0x30
		revolute_axis.dfd = REVOLUTE_MOTOR_DFD_Compute(&revolute_motor_dfd,
 80046f4:	4b56      	ldr	r3, [pc, #344]	@ (8004850 <update_revolute_velocity_control+0x248>)
 80046f6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80046fa:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8004854 <update_revolute_velocity_control+0x24c>
 80046fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004702:	4855      	ldr	r0, [pc, #340]	@ (8004858 <update_revolute_velocity_control+0x250>)
 8004704:	f7fc ff5b 	bl	80015be <REVOLUTE_MOTOR_DFD_Compute>
 8004708:	eef0 7a40 	vmov.f32	s15, s0
 800470c:	4b4c      	ldr	r3, [pc, #304]	@ (8004840 <update_revolute_velocity_control+0x238>)
 800470e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}

    static float ffd_filtered = 0.0f;
    static float dfd_filtered = 0.0f;

    ffd_filtered = 0.8f * ffd_filtered + 0.2f * revolute_axis.ffd;
 8004712:	4b52      	ldr	r3, [pc, #328]	@ (800485c <update_revolute_velocity_control+0x254>)
 8004714:	edd3 7a00 	vldr	s15, [r3]
 8004718:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8004860 <update_revolute_velocity_control+0x258>
 800471c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004720:	4b47      	ldr	r3, [pc, #284]	@ (8004840 <update_revolute_velocity_control+0x238>)
 8004722:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004726:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004864 <update_revolute_velocity_control+0x25c>
 800472a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800472e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004732:	4b4a      	ldr	r3, [pc, #296]	@ (800485c <update_revolute_velocity_control+0x254>)
 8004734:	edc3 7a00 	vstr	s15, [r3]
    dfd_filtered = 0.8f * dfd_filtered + 0.2f * revolute_axis.dfd;
 8004738:	4b4b      	ldr	r3, [pc, #300]	@ (8004868 <update_revolute_velocity_control+0x260>)
 800473a:	edd3 7a00 	vldr	s15, [r3]
 800473e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8004860 <update_revolute_velocity_control+0x258>
 8004742:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004746:	4b3e      	ldr	r3, [pc, #248]	@ (8004840 <update_revolute_velocity_control+0x238>)
 8004748:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800474c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8004864 <update_revolute_velocity_control+0x25c>
 8004750:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004758:	4b43      	ldr	r3, [pc, #268]	@ (8004868 <update_revolute_velocity_control+0x260>)
 800475a:	edc3 7a00 	vstr	s15, [r3]

    revolute_axis.command_pos += 0.01 * (dfd_filtered + ffd_filtered);
 800475e:	4b38      	ldr	r3, [pc, #224]	@ (8004840 <update_revolute_velocity_control+0x238>)
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	4618      	mov	r0, r3
 8004764:	f7fb febc 	bl	80004e0 <__aeabi_f2d>
 8004768:	4680      	mov	r8, r0
 800476a:	4689      	mov	r9, r1
 800476c:	4b3e      	ldr	r3, [pc, #248]	@ (8004868 <update_revolute_velocity_control+0x260>)
 800476e:	ed93 7a00 	vldr	s14, [r3]
 8004772:	4b3a      	ldr	r3, [pc, #232]	@ (800485c <update_revolute_velocity_control+0x254>)
 8004774:	edd3 7a00 	vldr	s15, [r3]
 8004778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800477c:	ee17 0a90 	vmov	r0, s15
 8004780:	f7fb feae 	bl	80004e0 <__aeabi_f2d>
 8004784:	a32c      	add	r3, pc, #176	@ (adr r3, 8004838 <update_revolute_velocity_control+0x230>)
 8004786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478a:	f7fb ff01 	bl	8000590 <__aeabi_dmul>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4640      	mov	r0, r8
 8004794:	4649      	mov	r1, r9
 8004796:	f7fb fd45 	bl	8000224 <__adddf3>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4610      	mov	r0, r2
 80047a0:	4619      	mov	r1, r3
 80047a2:	f7fc f9d7 	bl	8000b54 <__aeabi_d2f>
 80047a6:	4603      	mov	r3, r0
 80047a8:	4a25      	ldr	r2, [pc, #148]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80047aa:	6253      	str	r3, [r2, #36]	@ 0x24

	revolute_axis.command_pos += revolute_axis.ffd + revolute_axis.dfd;
 80047ac:	4b24      	ldr	r3, [pc, #144]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80047ae:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80047b2:	4b23      	ldr	r3, [pc, #140]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80047b4:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80047b8:	4b21      	ldr	r3, [pc, #132]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80047ba:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c6:	4b1e      	ldr	r3, [pc, #120]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80047c8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80047cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004840 <update_revolute_velocity_control+0x238>)
 80047ce:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80047d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004848 <update_revolute_velocity_control+0x240>)
 80047d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	f7fc f972 	bl	8000ac4 <__aeabi_d2iz>
 80047e0:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.U_max, -ZGX45RGG_150RPM_Constant.U_max);
 80047e2:	4b19      	ldr	r3, [pc, #100]	@ (8004848 <update_revolute_velocity_control+0x240>)
 80047e4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80047e8:	4614      	mov	r4, r2
 80047ea:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
	revolute_axis.command_pos = PWM_Satuation(revolute_axis.command_pos,
 80047ee:	4620      	mov	r0, r4
 80047f0:	4629      	mov	r1, r5
 80047f2:	f7fc f967 	bl	8000ac4 <__aeabi_d2iz>
 80047f6:	4603      	mov	r3, r0
 80047f8:	4619      	mov	r1, r3
 80047fa:	4630      	mov	r0, r6
 80047fc:	eeb0 0a48 	vmov.f32	s0, s16
 8004800:	f7fc fc28 	bl	8001054 <PWM_Satuation>
 8004804:	ee07 0a90 	vmov	s15, r0
 8004808:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800480c:	4b0c      	ldr	r3, [pc, #48]	@ (8004840 <update_revolute_velocity_control+0x238>)
 800480e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

	MDXX_set_range(&revolute_motor, 2000, revolute_axis.command_pos);
 8004812:	4b0b      	ldr	r3, [pc, #44]	@ (8004840 <update_revolute_velocity_control+0x238>)
 8004814:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004818:	eef0 0a67 	vmov.f32	s1, s15
 800481c:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 800486c <update_revolute_velocity_control+0x264>
 8004820:	4813      	ldr	r0, [pc, #76]	@ (8004870 <update_revolute_velocity_control+0x268>)
 8004822:	f7fc fd51 	bl	80012c8 <MDXX_set_range>
}
 8004826:	bf00      	nop
 8004828:	46bd      	mov	sp, r7
 800482a:	ecbd 8b02 	vpop	{d8}
 800482e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004832:	bf00      	nop
 8004834:	f3af 8000 	nop.w
 8004838:	47ae147b 	.word	0x47ae147b
 800483c:	3f847ae1 	.word	0x3f847ae1
 8004840:	2000027c 	.word	0x2000027c
 8004844:	200004c8 	.word	0x200004c8
 8004848:	20000000 	.word	0x20000000
 800484c:	200004fc 	.word	0x200004fc
 8004850:	200003f4 	.word	0x200003f4
 8004854:	3e99999a 	.word	0x3e99999a
 8004858:	20000500 	.word	0x20000500
 800485c:	200002f8 	.word	0x200002f8
 8004860:	3f4ccccd 	.word	0x3f4ccccd
 8004864:	3e4ccccd 	.word	0x3e4ccccd
 8004868:	200002fc 	.word	0x200002fc
 800486c:	44fa0000 	.word	0x44fa0000
 8004870:	2000034c 	.word	0x2000034c

08004874 <update_revolute_control_loops>:

void update_revolute_control_loops(void) {
 8004874:	b598      	push	{r3, r4, r7, lr}
 8004876:	ed2d 8b02 	vpush	{d8}
 800487a:	af00      	add	r7, sp, #0
	normalized_position = normalize_angle(revolute_encoder.rads);
 800487c:	4b3d      	ldr	r3, [pc, #244]	@ (8004974 <update_revolute_control_loops+0x100>)
 800487e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004882:	eeb0 0a67 	vmov.f32	s0, s15
 8004886:	f7ff fccd 	bl	8004224 <normalize_angle>
 800488a:	eef0 7a40 	vmov.f32	s15, s0
 800488e:	4b3a      	ldr	r3, [pc, #232]	@ (8004978 <update_revolute_control_loops+0x104>)
 8004890:	edc3 7a00 	vstr	s15, [r3]

	switch (motion_sequence_state) {
 8004894:	4b39      	ldr	r3, [pc, #228]	@ (800497c <update_revolute_control_loops+0x108>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d002      	beq.n	80048a2 <update_revolute_control_loops+0x2e>
 800489c:	2b02      	cmp	r3, #2
 800489e:	d050      	beq.n	8004942 <update_revolute_control_loops+0xce>
	case MOTION_COMPLETE:
		motion_sequence_state = MOTION_IDLE;
		break;

	default:
		break;
 80048a0:	e054      	b.n	800494c <update_revolute_control_loops+0xd8>
		if (revolute_axis.trajectory_active && !revEva.isFinised) {
 80048a2:	4b37      	ldr	r3, [pc, #220]	@ (8004980 <update_revolute_control_loops+0x10c>)
 80048a4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d04e      	beq.n	800494a <update_revolute_control_loops+0xd6>
 80048ac:	4b35      	ldr	r3, [pc, #212]	@ (8004984 <update_revolute_control_loops+0x110>)
 80048ae:	7c1b      	ldrb	r3, [r3, #16]
 80048b0:	f083 0301 	eor.w	r3, r3, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d047      	beq.n	800494a <update_revolute_control_loops+0xd6>
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80048ba:	4b31      	ldr	r3, [pc, #196]	@ (8004980 <update_revolute_control_loops+0x10c>)
 80048bc:	ed93 8a03 	vldr	s16, [r3, #12]
 80048c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004980 <update_revolute_control_loops+0x10c>)
 80048c2:	edd3 8a04 	vldr	s17, [r3, #16]
					ZGX45RGG_150RPM_Constant.traject_qd_max,
 80048c6:	4b30      	ldr	r3, [pc, #192]	@ (8004988 <update_revolute_control_loops+0x114>)
 80048c8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	f7fc f940 	bl	8000b54 <__aeabi_d2f>
 80048d4:	4604      	mov	r4, r0
					ZGX45RGG_150RPM_Constant.traject_qdd_max);
 80048d6:	4b2c      	ldr	r3, [pc, #176]	@ (8004988 <update_revolute_control_loops+0x114>)
 80048d8:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
			Trapezoidal_Evaluated(&revGen, &revEva, revolute_axis.initial_pos,
 80048dc:	4610      	mov	r0, r2
 80048de:	4619      	mov	r1, r3
 80048e0:	f7fc f938 	bl	8000b54 <__aeabi_d2f>
 80048e4:	4603      	mov	r3, r0
 80048e6:	ee01 3a90 	vmov	s3, r3
 80048ea:	ee01 4a10 	vmov	s2, r4
 80048ee:	eef0 0a68 	vmov.f32	s1, s17
 80048f2:	eeb0 0a48 	vmov.f32	s0, s16
 80048f6:	4923      	ldr	r1, [pc, #140]	@ (8004984 <update_revolute_control_loops+0x110>)
 80048f8:	4824      	ldr	r0, [pc, #144]	@ (800498c <update_revolute_control_loops+0x118>)
 80048fa:	f7fe fafd 	bl	8002ef8 <Trapezoidal_Evaluated>
			revolute_axis.position = revEva.setposition;
 80048fe:	4b21      	ldr	r3, [pc, #132]	@ (8004984 <update_revolute_control_loops+0x110>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1f      	ldr	r2, [pc, #124]	@ (8004980 <update_revolute_control_loops+0x10c>)
 8004904:	6013      	str	r3, [r2, #0]
			revolute_axis.velocity = revEva.setvelocity;
 8004906:	4b1f      	ldr	r3, [pc, #124]	@ (8004984 <update_revolute_control_loops+0x110>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	4a1d      	ldr	r2, [pc, #116]	@ (8004980 <update_revolute_control_loops+0x10c>)
 800490c:	6053      	str	r3, [r2, #4]
			if (revEva.isFinised) {
 800490e:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <update_revolute_control_loops+0x110>)
 8004910:	7c1b      	ldrb	r3, [r3, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d019      	beq.n	800494a <update_revolute_control_loops+0xd6>
				revolute_axis.trajectory_active = false;
 8004916:	4b1a      	ldr	r3, [pc, #104]	@ (8004980 <update_revolute_control_loops+0x10c>)
 8004918:	2200      	movs	r2, #0
 800491a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
				revolute_axis.position = revEva.setposition;
 800491e:	4b19      	ldr	r3, [pc, #100]	@ (8004984 <update_revolute_control_loops+0x110>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a17      	ldr	r2, [pc, #92]	@ (8004980 <update_revolute_control_loops+0x10c>)
 8004924:	6013      	str	r3, [r2, #0]
				revolute_axis.velocity = 0.0f;
 8004926:	4b16      	ldr	r3, [pc, #88]	@ (8004980 <update_revolute_control_loops+0x10c>)
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	605a      	str	r2, [r3, #4]
				PID_CONTROLLER_Reset(&revolute_position_pid);
 800492e:	4818      	ldr	r0, [pc, #96]	@ (8004990 <update_revolute_control_loops+0x11c>)
 8004930:	f7fc fc84 	bl	800123c <PID_CONTROLLER_Reset>
				PID_CONTROLLER_Reset(&revolute_velocity_pid);
 8004934:	4817      	ldr	r0, [pc, #92]	@ (8004994 <update_revolute_control_loops+0x120>)
 8004936:	f7fc fc81 	bl	800123c <PID_CONTROLLER_Reset>
				motion_sequence_state = MOTION_COMPLETE;
 800493a:	4b10      	ldr	r3, [pc, #64]	@ (800497c <update_revolute_control_loops+0x108>)
 800493c:	2202      	movs	r2, #2
 800493e:	701a      	strb	r2, [r3, #0]
		break;
 8004940:	e003      	b.n	800494a <update_revolute_control_loops+0xd6>
		motion_sequence_state = MOTION_IDLE;
 8004942:	4b0e      	ldr	r3, [pc, #56]	@ (800497c <update_revolute_control_loops+0x108>)
 8004944:	2200      	movs	r2, #0
 8004946:	701a      	strb	r2, [r3, #0]
		break;
 8004948:	e000      	b.n	800494c <update_revolute_control_loops+0xd8>
		break;
 800494a:	bf00      	nop
	}

	revolute_axis.deg = UnitConverter_angle(&converter_system,
 800494c:	4b0a      	ldr	r3, [pc, #40]	@ (8004978 <update_revolute_control_loops+0x104>)
 800494e:	edd3 7a00 	vldr	s15, [r3]
 8004952:	220e      	movs	r2, #14
 8004954:	210f      	movs	r1, #15
 8004956:	eeb0 0a67 	vmov.f32	s0, s15
 800495a:	480f      	ldr	r0, [pc, #60]	@ (8004998 <update_revolute_control_loops+0x124>)
 800495c:	f7fe fe64 	bl	8003628 <UnitConverter_angle>
 8004960:	eef0 7a40 	vmov.f32	s15, s0
 8004964:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <update_revolute_control_loops+0x10c>)
 8004966:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
			normalized_position, UNIT_RADIAN, UNIT_DEGREE);
}
 800496a:	bf00      	nop
 800496c:	46bd      	mov	sp, r7
 800496e:	ecbd 8b02 	vpop	{d8}
 8004972:	bd98      	pop	{r3, r4, r7, pc}
 8004974:	200003f4 	.word	0x200003f4
 8004978:	200002f0 	.word	0x200002f0
 800497c:	200002bc 	.word	0x200002bc
 8004980:	2000027c 	.word	0x2000027c
 8004984:	200002d4 	.word	0x200002d4
 8004988:	20000000 	.word	0x20000000
 800498c:	200002c0 	.word	0x200002c0
 8004990:	200004a0 	.word	0x200004a0
 8004994:	200004c8 	.word	0x200004c8
 8004998:	20000764 	.word	0x20000764

0800499c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	4603      	mov	r3, r0
 80049a4:	80fb      	strh	r3, [r7, #6]
	// B1 button (J1_Pin) - Start revolute trajectory sequence
	if (GPIO_Pin == J1_Pin) {
 80049a6:	88fb      	ldrh	r3, [r7, #6]
 80049a8:	2b80      	cmp	r3, #128	@ 0x80
 80049aa:	d11f      	bne.n	80049ec <HAL_GPIO_EXTI_Callback+0x50>
		if (motion_sequence_state == MOTION_IDLE) {
 80049ac:	4b11      	ldr	r3, [pc, #68]	@ (80049f4 <HAL_GPIO_EXTI_Callback+0x58>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d11a      	bne.n	80049ea <HAL_GPIO_EXTI_Callback+0x4e>
			start_revolute_trajectory(sequence_rev_points[trajectory_sequence_index]);
 80049b4:	4b10      	ldr	r3, [pc, #64]	@ (80049f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	4a10      	ldr	r2, [pc, #64]	@ (80049fc <HAL_GPIO_EXTI_Callback+0x60>)
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	edd3 7a00 	vldr	s15, [r3]
 80049c2:	eeb0 0a67 	vmov.f32	s0, s15
 80049c6:	f7ff fd17 	bl	80043f8 <start_revolute_trajectory>
			trajectory_sequence_index = (trajectory_sequence_index + 1) % SEQUENCE_MAX_POINTS;
 80049ca:	4b0b      	ldr	r3, [pc, #44]	@ (80049f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	1c5a      	adds	r2, r3, #1
 80049d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004a00 <HAL_GPIO_EXTI_Callback+0x64>)
 80049d2:	fb83 3102 	smull	r3, r1, r3, r2
 80049d6:	17d3      	asrs	r3, r2, #31
 80049d8:	1ac9      	subs	r1, r1, r3
 80049da:	460b      	mov	r3, r1
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	440b      	add	r3, r1
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	1ad1      	subs	r1, r2, r3
 80049e4:	b2ca      	uxtb	r2, r1
 80049e6:	4b04      	ldr	r3, [pc, #16]	@ (80049f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80049e8:	701a      	strb	r2, [r3, #0]
		}
		return;
 80049ea:	bf00      	nop
	}
}
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	200002bc 	.word	0x200002bc
 80049f8:	200002e8 	.word	0x200002e8
 80049fc:	08010088 	.word	0x08010088
 8004a00:	2aaaaaab 	.word	0x2aaaaaab

08004a04 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
	if (htim == &htim2) {
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a27      	ldr	r2, [pc, #156]	@ (8004aac <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d147      	bne.n	8004aa4 <HAL_TIM_PeriodElapsedCallback+0xa0>
        QEI_get_diff_count(&revolute_encoder);
 8004a14:	4826      	ldr	r0, [pc, #152]	@ (8004ab0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004a16:	f7fd ff67 	bl	80028e8 <QEI_get_diff_count>
        QEI_compute_data(&revolute_encoder);
 8004a1a:	4825      	ldr	r0, [pc, #148]	@ (8004ab0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004a1c:	f7fe f850 	bl	8002ac0 <QEI_compute_data>

        revolute_axis.input_voltage = mapf(revolute_axis.command_pos, -65535.0f,
 8004a20:	4b24      	ldr	r3, [pc, #144]	@ (8004ab4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004a22:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004a26:	eeb2 2a08 	vmov.f32	s4, #40	@ 0x41400000  12.0
 8004a2a:	eefa 1a08 	vmov.f32	s3, #168	@ 0xc1400000 -12.0
 8004a2e:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8004ab8 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8004a32:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8004abc <HAL_TIM_PeriodElapsedCallback+0xb8>
 8004a36:	eeb0 0a67 	vmov.f32	s0, s15
 8004a3a:	f7fc ffdd 	bl	80019f8 <mapf>
 8004a3e:	eef0 7a40 	vmov.f32	s15, s0
 8004a42:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004a44:	edc3 7a08 	vstr	s15, [r3, #32]
                65535.0f, -12.0f, 12.0f);
        revolute_axis.kalman_velocity = SteadyStateKalmanFilter(
 8004a48:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004a4a:	edd3 7a08 	vldr	s15, [r3, #32]
 8004a4e:	4b18      	ldr	r3, [pc, #96]	@ (8004ab0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004a50:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8004a54:	eef0 0a47 	vmov.f32	s1, s14
 8004a58:	eeb0 0a67 	vmov.f32	s0, s15
 8004a5c:	4818      	ldr	r0, [pc, #96]	@ (8004ac0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004a5e:	f7ff f85f 	bl	8003b20 <SteadyStateKalmanFilter>
 8004a62:	eef0 7a40 	vmov.f32	s15, s0
 8004a66:	4b13      	ldr	r3, [pc, #76]	@ (8004ab4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004a68:	edc3 7a07 	vstr	s15, [r3, #28]
                &revolute_kalman, revolute_axis.input_voltage, revolute_encoder.rads);

        if (isnan(revolute_axis.kalman_velocity)) {
 8004a6c:	4b11      	ldr	r3, [pc, #68]	@ (8004ab4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004a6e:	edd3 7a07 	vldr	s15, [r3, #28]
 8004a72:	eef4 7a67 	vcmp.f32	s15, s15
 8004a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7a:	d703      	bvc.n	8004a84 <HAL_TIM_PeriodElapsedCallback+0x80>
            revolute_axis.kalman_velocity = 0.0f;
 8004a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	61da      	str	r2, [r3, #28]
        }

        // Update position control
        if (++position_control_tick >= POSITION_CONTROL_DIVIDER) {
 8004a84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ac4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	2b09      	cmp	r3, #9
 8004a90:	d904      	bls.n	8004a9c <HAL_TIM_PeriodElapsedCallback+0x98>
            position_control_tick = 0;
 8004a92:	4b0c      	ldr	r3, [pc, #48]	@ (8004ac4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
            update_revolute_position_control();
 8004a98:	f7ff fd36 	bl	8004508 <update_revolute_position_control>
        }

        // Velocity control at 1000 Hz (every iteration)
        update_revolute_velocity_control();
 8004a9c:	f7ff fdb4 	bl	8004608 <update_revolute_velocity_control>

        // Update control loops and trajectory
        update_revolute_control_loops();
 8004aa0:	f7ff fee8 	bl	8004874 <update_revolute_control_loops>
	}
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20001910 	.word	0x20001910
 8004ab0:	200003f4 	.word	0x200003f4
 8004ab4:	2000027c 	.word	0x2000027c
 8004ab8:	477fff00 	.word	0x477fff00
 8004abc:	c77fff00 	.word	0xc77fff00
 8004ac0:	20001470 	.word	0x20001470
 8004ac4:	200002ec 	.word	0x200002ec

08004ac8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004acc:	b672      	cpsid	i
}
 8004ace:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004ad0:	bf00      	nop
 8004ad2:	e7fd      	b.n	8004ad0 <Error_Handler+0x8>
 8004ad4:	0000      	movs	r0, r0
	...

08004ad8 <plotter_begin>:
float prismatic_current = 0.0f;
float revolute_current = 0.0f;

int up_lim, low_lim, b1, b2, b3, b4;

void plotter_begin() {
 8004ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004adc:	ed2d 8b02 	vpush	{d8}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af02      	add	r7, sp, #8
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8004ae4:	4bc6      	ldr	r3, [pc, #792]	@ (8004e00 <plotter_begin+0x328>)
 8004ae6:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
			* Disturbance_Constant.prismatic_pulley_radius * 1000;
 8004aea:	4bc6      	ldr	r3, [pc, #792]	@ (8004e04 <plotter_begin+0x32c>)
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fb fcf6 	bl	80004e0 <__aeabi_f2d>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4620      	mov	r0, r4
 8004afa:	4629      	mov	r1, r5
 8004afc:	f7fb fd48 	bl	8000590 <__aeabi_dmul>
 8004b00:	4602      	mov	r2, r0
 8004b02:	460b      	mov	r3, r1
 8004b04:	4610      	mov	r0, r2
 8004b06:	4619      	mov	r1, r3
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	4bbe      	ldr	r3, [pc, #760]	@ (8004e08 <plotter_begin+0x330>)
 8004b0e:	f7fb fd3f 	bl	8000590 <__aeabi_dmul>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
	ZGX45RGG_400RPM_Constant.sd_max = ZGX45RGG_400RPM_Constant.qd_max
 8004b16:	49ba      	ldr	r1, [pc, #744]	@ (8004e00 <plotter_begin+0x328>)
 8004b18:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	ZGX45RGG_400RPM_Constant.sdd_max = ZGX45RGG_400RPM_Constant.sd_max * 2;
 8004b1c:	4bb8      	ldr	r3, [pc, #736]	@ (8004e00 <plotter_begin+0x328>)
 8004b1e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8004b22:	4602      	mov	r2, r0
 8004b24:	460b      	mov	r3, r1
 8004b26:	f7fb fb7d 	bl	8000224 <__adddf3>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	49b4      	ldr	r1, [pc, #720]	@ (8004e00 <plotter_begin+0x328>)
 8004b30:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

	ZGX45RGG_400RPM_Constant.traject_sd_max = 500.0;
 8004b34:	49b2      	ldr	r1, [pc, #712]	@ (8004e00 <plotter_begin+0x328>)
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	4bb4      	ldr	r3, [pc, #720]	@ (8004e0c <plotter_begin+0x334>)
 8004b3c:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	ZGX45RGG_400RPM_Constant.traject_sdd_max = 1000.0;
 8004b40:	49af      	ldr	r1, [pc, #700]	@ (8004e00 <plotter_begin+0x328>)
 8004b42:	f04f 0200 	mov.w	r2, #0
 8004b46:	4bb0      	ldr	r3, [pc, #704]	@ (8004e08 <plotter_begin+0x330>)
 8004b48:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78

	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8004b4c:	4bb0      	ldr	r3, [pc, #704]	@ (8004e10 <plotter_begin+0x338>)
 8004b4e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
			* (24.0 / 36.0);
 8004b52:	a3a9      	add	r3, pc, #676	@ (adr r3, 8004df8 <plotter_begin+0x320>)
 8004b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b58:	f7fb fd1a 	bl	8000590 <__aeabi_dmul>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
	ZGX45RGG_150RPM_Constant.qd_max = ZGX45RGG_150RPM_Constant.qd_max
 8004b60:	49ab      	ldr	r1, [pc, #684]	@ (8004e10 <plotter_begin+0x338>)
 8004b62:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

	ZGX45RGG_150RPM_Constant.traject_qd_max = 5.0;
 8004b66:	49aa      	ldr	r1, [pc, #680]	@ (8004e10 <plotter_begin+0x338>)
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	4ba9      	ldr	r3, [pc, #676]	@ (8004e14 <plotter_begin+0x33c>)
 8004b6e:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	ZGX45RGG_150RPM_Constant.traject_qdd_max = 2.0;
 8004b72:	49a7      	ldr	r1, [pc, #668]	@ (8004e10 <plotter_begin+0x338>)
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004b7c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	SIGNAL_init(&sine_sg_PWM, SIGNAL_SINE);
 8004b80:	2100      	movs	r1, #0
 8004b82:	48a5      	ldr	r0, [pc, #660]	@ (8004e18 <plotter_begin+0x340>)
 8004b84:	f000 fb6e 	bl	8005264 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_PWM, SINE_AMPLITUDE, SINE_FREQUENCY, SINE_PHASE,
 8004b88:	eddf 2aa4 	vldr	s5, [pc, #656]	@ 8004e1c <plotter_begin+0x344>
 8004b8c:	ed9f 2aa4 	vldr	s4, [pc, #656]	@ 8004e20 <plotter_begin+0x348>
 8004b90:	eddf 1ab1 	vldr	s3, [pc, #708]	@ 8004e58 <plotter_begin+0x380>
 8004b94:	ed9f 1ab0 	vldr	s2, [pc, #704]	@ 8004e58 <plotter_begin+0x380>
 8004b98:	eddf 0aa2 	vldr	s1, [pc, #648]	@ 8004e24 <plotter_begin+0x34c>
 8004b9c:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 8004e1c <plotter_begin+0x344>
 8004ba0:	489d      	ldr	r0, [pc, #628]	@ (8004e18 <plotter_begin+0x340>)
 8004ba2:	f000 fbbd 	bl	8005320 <SIGNAL_config_sine>
	SINE_OFFSET, SINE_MIN_SETPOINT, SINE_MAX_SETPOINT);

	SIGNAL_init(&square_sg_PWM, SIGNAL_SQUARE);
 8004ba6:	2102      	movs	r1, #2
 8004ba8:	489f      	ldr	r0, [pc, #636]	@ (8004e28 <plotter_begin+0x350>)
 8004baa:	f000 fb5b 	bl	8005264 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_PWM, SQUARE_AMPLITUDE, SQUARE_FREQUENCY,
 8004bae:	ed9f 3a9b 	vldr	s6, [pc, #620]	@ 8004e1c <plotter_begin+0x344>
 8004bb2:	eddf 2a9b 	vldr	s5, [pc, #620]	@ 8004e20 <plotter_begin+0x348>
 8004bb6:	ed9f 2aa8 	vldr	s4, [pc, #672]	@ 8004e58 <plotter_begin+0x380>
 8004bba:	eddf 1aa7 	vldr	s3, [pc, #668]	@ 8004e58 <plotter_begin+0x380>
 8004bbe:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004bc2:	eddf 0a98 	vldr	s1, [pc, #608]	@ 8004e24 <plotter_begin+0x34c>
 8004bc6:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 8004e1c <plotter_begin+0x344>
 8004bca:	4897      	ldr	r0, [pc, #604]	@ (8004e28 <plotter_begin+0x350>)
 8004bcc:	f000 fbd3 	bl	8005376 <SIGNAL_config_square>
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT, SQUARE_MAX_SETPOINT);

	SIGNAL_init(&sine_sg_cascade, SIGNAL_SINE);
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	4896      	ldr	r0, [pc, #600]	@ (8004e2c <plotter_begin+0x354>)
 8004bd4:	f000 fb46 	bl	8005264 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_cascade, SINE_AMPLITUDE_CASCADE, SINE_FREQUENCY,
 8004bd8:	eddf 2a95 	vldr	s5, [pc, #596]	@ 8004e30 <plotter_begin+0x358>
 8004bdc:	ed9f 2a95 	vldr	s4, [pc, #596]	@ 8004e34 <plotter_begin+0x35c>
 8004be0:	eddf 1a9d 	vldr	s3, [pc, #628]	@ 8004e58 <plotter_begin+0x380>
 8004be4:	ed9f 1a9c 	vldr	s2, [pc, #624]	@ 8004e58 <plotter_begin+0x380>
 8004be8:	eddf 0a8e 	vldr	s1, [pc, #568]	@ 8004e24 <plotter_begin+0x34c>
 8004bec:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8004e30 <plotter_begin+0x358>
 8004bf0:	488e      	ldr	r0, [pc, #568]	@ (8004e2c <plotter_begin+0x354>)
 8004bf2:	f000 fb95 	bl	8005320 <SIGNAL_config_sine>
	SINE_PHASE,
	SINE_OFFSET, SINE_MIN_SETPOINT_CASCADE, SINE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&square_sg_cascade, SIGNAL_SQUARE);
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	488f      	ldr	r0, [pc, #572]	@ (8004e38 <plotter_begin+0x360>)
 8004bfa:	f000 fb33 	bl	8005264 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_cascade, SQUARE_AMPLITUDE_CASCADE,
 8004bfe:	eeb3 3a09 	vmov.f32	s6, #57	@ 0x41c80000  25.0
 8004c02:	eefb 2a09 	vmov.f32	s5, #185	@ 0xc1c80000 -25.0
 8004c06:	ed9f 2a94 	vldr	s4, [pc, #592]	@ 8004e58 <plotter_begin+0x380>
 8004c0a:	eddf 1a93 	vldr	s3, [pc, #588]	@ 8004e58 <plotter_begin+0x380>
 8004c0e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004c12:	eddf 0a84 	vldr	s1, [pc, #528]	@ 8004e24 <plotter_begin+0x34c>
 8004c16:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004c1a:	4887      	ldr	r0, [pc, #540]	@ (8004e38 <plotter_begin+0x360>)
 8004c1c:	f000 fbab 	bl	8005376 <SIGNAL_config_square>
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
	SQUARE_MIN_SETPOINT_CASCADE, SQUARE_MAX_SETPOINT_CASCADE);

	SIGNAL_init(&sine_sg_prismatic, SIGNAL_SINE);
 8004c20:	2100      	movs	r1, #0
 8004c22:	4886      	ldr	r0, [pc, #536]	@ (8004e3c <plotter_begin+0x364>)
 8004c24:	f000 fb1e 	bl	8005264 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8004c28:	4b75      	ldr	r3, [pc, #468]	@ (8004e00 <plotter_begin+0x328>)
 8004c2a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004c2e:	4610      	mov	r0, r2
 8004c30:	4619      	mov	r1, r3
 8004c32:	f7fb ff8f 	bl	8000b54 <__aeabi_d2f>
 8004c36:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_400RPM_Constant.qd_max,
 8004c38:	4b71      	ldr	r3, [pc, #452]	@ (8004e00 <plotter_begin+0x328>)
 8004c3a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004c3e:	4610      	mov	r0, r2
 8004c40:	4619      	mov	r1, r3
 8004c42:	f7fb ff87 	bl	8000b54 <__aeabi_d2f>
 8004c46:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8004c48:	ee07 3a90 	vmov	s15, r3
 8004c4c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_400RPM_Constant.qd_max);
 8004c50:	4b6b      	ldr	r3, [pc, #428]	@ (8004e00 <plotter_begin+0x328>)
 8004c52:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8004c56:	4610      	mov	r0, r2
 8004c58:	4619      	mov	r1, r3
 8004c5a:	f7fb ff7b 	bl	8000b54 <__aeabi_d2f>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	ee02 3a90 	vmov	s5, r3
 8004c64:	eeb0 2a48 	vmov.f32	s4, s16
 8004c68:	eddf 1a7b 	vldr	s3, [pc, #492]	@ 8004e58 <plotter_begin+0x380>
 8004c6c:	ed9f 1a7a 	vldr	s2, [pc, #488]	@ 8004e58 <plotter_begin+0x380>
 8004c70:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 8004e24 <plotter_begin+0x34c>
 8004c74:	ee00 4a10 	vmov	s0, r4
 8004c78:	4870      	ldr	r0, [pc, #448]	@ (8004e3c <plotter_begin+0x364>)
 8004c7a:	f000 fb51 	bl	8005320 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_prismatic, SIGNAL_SQUARE);
 8004c7e:	2102      	movs	r1, #2
 8004c80:	486f      	ldr	r0, [pc, #444]	@ (8004e40 <plotter_begin+0x368>)
 8004c82:	f000 faef 	bl	8005264 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8004c86:	4b5e      	ldr	r3, [pc, #376]	@ (8004e00 <plotter_begin+0x328>)
 8004c88:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004c8c:	4610      	mov	r0, r2
 8004c8e:	4619      	mov	r1, r3
 8004c90:	f7fb ff60 	bl	8000b54 <__aeabi_d2f>
 8004c94:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8004c96:	4b5a      	ldr	r3, [pc, #360]	@ (8004e00 <plotter_begin+0x328>)
 8004c98:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f7fb ff58 	bl	8000b54 <__aeabi_d2f>
 8004ca4:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8004ca6:	ee07 3a90 	vmov	s15, r3
 8004caa:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_400RPM_Constant.qd_max, ZGX45RGG_400RPM_Constant.qd_max);
 8004cae:	4b54      	ldr	r3, [pc, #336]	@ (8004e00 <plotter_begin+0x328>)
 8004cb0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_prismatic, ZGX45RGG_400RPM_Constant.qd_max,
 8004cb4:	4610      	mov	r0, r2
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f7fb ff4c 	bl	8000b54 <__aeabi_d2f>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	ee03 3a10 	vmov	s6, r3
 8004cc2:	eef0 2a48 	vmov.f32	s5, s16
 8004cc6:	ed9f 2a64 	vldr	s4, [pc, #400]	@ 8004e58 <plotter_begin+0x380>
 8004cca:	eddf 1a63 	vldr	s3, [pc, #396]	@ 8004e58 <plotter_begin+0x380>
 8004cce:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004cd2:	eddf 0a54 	vldr	s1, [pc, #336]	@ 8004e24 <plotter_begin+0x34c>
 8004cd6:	ee00 4a10 	vmov	s0, r4
 8004cda:	4859      	ldr	r0, [pc, #356]	@ (8004e40 <plotter_begin+0x368>)
 8004cdc:	f000 fb4b 	bl	8005376 <SIGNAL_config_square>

	SIGNAL_init(&sine_sg_revolute, SIGNAL_SINE);
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	4858      	ldr	r0, [pc, #352]	@ (8004e44 <plotter_begin+0x36c>)
 8004ce4:	f000 fabe 	bl	8005264 <SIGNAL_init>
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004ce8:	4b49      	ldr	r3, [pc, #292]	@ (8004e10 <plotter_begin+0x338>)
 8004cea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	f7fb ff2f 	bl	8000b54 <__aeabi_d2f>
 8004cf6:	4604      	mov	r4, r0
	SINE_FREQUENCY, SINE_PHASE,
	SINE_OFFSET, -ZGX45RGG_150RPM_Constant.qd_max,
 8004cf8:	4b45      	ldr	r3, [pc, #276]	@ (8004e10 <plotter_begin+0x338>)
 8004cfa:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004cfe:	4610      	mov	r0, r2
 8004d00:	4619      	mov	r1, r3
 8004d02:	f7fb ff27 	bl	8000b54 <__aeabi_d2f>
 8004d06:	4603      	mov	r3, r0
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004d08:	ee07 3a90 	vmov	s15, r3
 8004d0c:	eeb1 8a67 	vneg.f32	s16, s15
			ZGX45RGG_150RPM_Constant.qd_max);
 8004d10:	4b3f      	ldr	r3, [pc, #252]	@ (8004e10 <plotter_begin+0x338>)
 8004d12:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_sine(&sine_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004d16:	4610      	mov	r0, r2
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f7fb ff1b 	bl	8000b54 <__aeabi_d2f>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	ee02 3a90 	vmov	s5, r3
 8004d24:	eeb0 2a48 	vmov.f32	s4, s16
 8004d28:	eddf 1a4b 	vldr	s3, [pc, #300]	@ 8004e58 <plotter_begin+0x380>
 8004d2c:	ed9f 1a4a 	vldr	s2, [pc, #296]	@ 8004e58 <plotter_begin+0x380>
 8004d30:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 8004e24 <plotter_begin+0x34c>
 8004d34:	ee00 4a10 	vmov	s0, r4
 8004d38:	4842      	ldr	r0, [pc, #264]	@ (8004e44 <plotter_begin+0x36c>)
 8004d3a:	f000 faf1 	bl	8005320 <SIGNAL_config_sine>

	SIGNAL_init(&square_sg_revolute, SIGNAL_SQUARE);
 8004d3e:	2102      	movs	r1, #2
 8004d40:	4841      	ldr	r0, [pc, #260]	@ (8004e48 <plotter_begin+0x370>)
 8004d42:	f000 fa8f 	bl	8005264 <SIGNAL_init>
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004d46:	4b32      	ldr	r3, [pc, #200]	@ (8004e10 <plotter_begin+0x338>)
 8004d48:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	4619      	mov	r1, r3
 8004d50:	f7fb ff00 	bl	8000b54 <__aeabi_d2f>
 8004d54:	4604      	mov	r4, r0
	SQUARE_FREQUENCY,
	SQUARE_DUTY_CYCLE, SQUARE_PHASE, SQUARE_OFFSET,
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8004d56:	4b2e      	ldr	r3, [pc, #184]	@ (8004e10 <plotter_begin+0x338>)
 8004d58:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8004d5c:	4610      	mov	r0, r2
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f7fb fef8 	bl	8000b54 <__aeabi_d2f>
 8004d64:	4603      	mov	r3, r0
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004d66:	ee07 3a90 	vmov	s15, r3
 8004d6a:	eeb1 8a67 	vneg.f32	s16, s15
			-ZGX45RGG_150RPM_Constant.qd_max, ZGX45RGG_150RPM_Constant.qd_max);
 8004d6e:	4b28      	ldr	r3, [pc, #160]	@ (8004e10 <plotter_begin+0x338>)
 8004d70:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	SIGNAL_config_square(&square_sg_revolute, ZGX45RGG_150RPM_Constant.qd_max,
 8004d74:	4610      	mov	r0, r2
 8004d76:	4619      	mov	r1, r3
 8004d78:	f7fb feec 	bl	8000b54 <__aeabi_d2f>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	ee03 3a10 	vmov	s6, r3
 8004d82:	eef0 2a48 	vmov.f32	s5, s16
 8004d86:	ed9f 2a34 	vldr	s4, [pc, #208]	@ 8004e58 <plotter_begin+0x380>
 8004d8a:	eddf 1a33 	vldr	s3, [pc, #204]	@ 8004e58 <plotter_begin+0x380>
 8004d8e:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8004d92:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8004e24 <plotter_begin+0x34c>
 8004d96:	ee00 4a10 	vmov	s0, r4
 8004d9a:	482b      	ldr	r0, [pc, #172]	@ (8004e48 <plotter_begin+0x370>)
 8004d9c:	f000 faeb 	bl	8005376 <SIGNAL_config_square>

	UnitConverter_init(&converter_system);
 8004da0:	482a      	ldr	r0, [pc, #168]	@ (8004e4c <plotter_begin+0x374>)
 8004da2:	f7fe fbab 	bl	80034fc <UnitConverter_init>

	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
			Disturbance_Constant.prismatic_pulley_radius * 2.0 * 1000.0);
 8004da6:	4b17      	ldr	r3, [pc, #92]	@ (8004e04 <plotter_begin+0x32c>)
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fb fb98 	bl	80004e0 <__aeabi_f2d>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	f7fb fa36 	bl	8000224 <__adddf3>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f04f 0200 	mov.w	r2, #0
 8004dc4:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <plotter_begin+0x330>)
 8004dc6:	f7fb fbe3 	bl	8000590 <__aeabi_dmul>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
	QEI_init(&prismatic_encoder, ENC_TIM1, ENC_PPR, ENC_FREQ, MOTOR1_RATIO,
 8004dce:	4610      	mov	r0, r2
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	f7fb febf 	bl	8000b54 <__aeabi_d2f>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	ee00 3a90 	vmov	s1, r3
 8004ddc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004de0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004de4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004de8:	4919      	ldr	r1, [pc, #100]	@ (8004e50 <plotter_begin+0x378>)
 8004dea:	481a      	ldr	r0, [pc, #104]	@ (8004e54 <plotter_begin+0x37c>)
 8004dec:	f7fd fd0a 	bl	8002804 <QEI_init>
 8004df0:	e034      	b.n	8004e5c <plotter_begin+0x384>
 8004df2:	bf00      	nop
 8004df4:	f3af 8000 	nop.w
 8004df8:	55555555 	.word	0x55555555
 8004dfc:	3fe55555 	.word	0x3fe55555
 8004e00:	20000080 	.word	0x20000080
 8004e04:	20000100 	.word	0x20000100
 8004e08:	408f4000 	.word	0x408f4000
 8004e0c:	407f4000 	.word	0x407f4000
 8004e10:	20000000 	.word	0x20000000
 8004e14:	40140000 	.word	0x40140000
 8004e18:	20000544 	.word	0x20000544
 8004e1c:	477fff00 	.word	0x477fff00
 8004e20:	c77fff00 	.word	0xc77fff00
 8004e24:	3dcccccd 	.word	0x3dcccccd
 8004e28:	20000588 	.word	0x20000588
 8004e2c:	200005cc 	.word	0x200005cc
 8004e30:	43480000 	.word	0x43480000
 8004e34:	c3480000 	.word	0xc3480000
 8004e38:	20000610 	.word	0x20000610
 8004e3c:	20000654 	.word	0x20000654
 8004e40:	20000698 	.word	0x20000698
 8004e44:	200006dc 	.word	0x200006dc
 8004e48:	20000720 	.word	0x20000720
 8004e4c:	20000764 	.word	0x20000764
 8004e50:	20001b74 	.word	0x20001b74
 8004e54:	20000398 	.word	0x20000398
 8004e58:	00000000 	.word	0x00000000
	QEI_init(&revolute_encoder, ENC_TIM2, ENC_PPR, ENC_FREQ, MOTOR2_RATIO,
 8004e5c:	ed5f 0a02 	vldr	s1, [pc, #-8]	@ 8004e58 <plotter_begin+0x380>
 8004e60:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004e64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004e6c:	49ae      	ldr	r1, [pc, #696]	@ (8005128 <plotter_begin+0x650>)
 8004e6e:	48af      	ldr	r0, [pc, #700]	@ (800512c <plotter_begin+0x654>)
 8004e70:	f7fd fcc8 	bl	8002804 <QEI_init>
	MOTOR2_PULLEY_DIAMETER);

	MDXX_GPIO_init(&prismatic_motor, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx,
 8004e74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004e7e:	2204      	movs	r2, #4
 8004e80:	49ab      	ldr	r1, [pc, #684]	@ (8005130 <plotter_begin+0x658>)
 8004e82:	48ac      	ldr	r0, [pc, #688]	@ (8005134 <plotter_begin+0x65c>)
 8004e84:	f7fc f9fc 	bl	8001280 <MDXX_GPIO_init>
	MOTOR1_GPIO_Pin);
	MDXX_GPIO_init(&revolute_motor, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx,
 8004e88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e8c:	9300      	str	r3, [sp, #0]
 8004e8e:	4baa      	ldr	r3, [pc, #680]	@ (8005138 <plotter_begin+0x660>)
 8004e90:	2200      	movs	r2, #0
 8004e92:	49a7      	ldr	r1, [pc, #668]	@ (8005130 <plotter_begin+0x658>)
 8004e94:	48a9      	ldr	r0, [pc, #676]	@ (800513c <plotter_begin+0x664>)
 8004e96:	f7fc f9f3 	bl	8001280 <MDXX_GPIO_init>
	MOTOR2_GPIO_Pin);

	PWM_init(&servo, SERVO_TIM, SERVO_TIM_CH);
 8004e9a:	220c      	movs	r2, #12
 8004e9c:	49a8      	ldr	r1, [pc, #672]	@ (8005140 <plotter_begin+0x668>)
 8004e9e:	48a9      	ldr	r0, [pc, #676]	@ (8005144 <plotter_begin+0x66c>)
 8004ea0:	f7fd fb88 	bl	80025b4 <PWM_init>

	MDXX_set_range(&prismatic_motor, 2000, 0);
 8004ea4:	eddf 0aa8 	vldr	s1, [pc, #672]	@ 8005148 <plotter_begin+0x670>
 8004ea8:	ed9f 0aa8 	vldr	s0, [pc, #672]	@ 800514c <plotter_begin+0x674>
 8004eac:	48a1      	ldr	r0, [pc, #644]	@ (8005134 <plotter_begin+0x65c>)
 8004eae:	f7fc fa0b 	bl	80012c8 <MDXX_set_range>
	MDXX_set_range(&revolute_motor, 2000, 0);
 8004eb2:	eddf 0aa5 	vldr	s1, [pc, #660]	@ 8005148 <plotter_begin+0x670>
 8004eb6:	ed9f 0aa5 	vldr	s0, [pc, #660]	@ 800514c <plotter_begin+0x674>
 8004eba:	48a0      	ldr	r0, [pc, #640]	@ (800513c <plotter_begin+0x664>)
 8004ebc:	f7fc fa04 	bl	80012c8 <MDXX_set_range>

	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
			ZGX45RGG_400RPM_Constant.sd_max);
 8004ec0:	4ba3      	ldr	r3, [pc, #652]	@ (8005150 <plotter_begin+0x678>)
 8004ec2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
	PID_CONTROLLER_Init(&prismatic_position_pid, 75, 1e-10, 120,
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f7fb fe43 	bl	8000b54 <__aeabi_d2f>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	ee01 3a90 	vmov	s3, r3
 8004ed4:	ed9f 1a9f 	vldr	s2, [pc, #636]	@ 8005154 <plotter_begin+0x67c>
 8004ed8:	eddf 0a9f 	vldr	s1, [pc, #636]	@ 8005158 <plotter_begin+0x680>
 8004edc:	ed9f 0a9f 	vldr	s0, [pc, #636]	@ 800515c <plotter_begin+0x684>
 8004ee0:	489f      	ldr	r0, [pc, #636]	@ (8005160 <plotter_begin+0x688>)
 8004ee2:	f7fc f8e6 	bl	80010b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
			ZGX45RGG_400RPM_Constant.U_max);
 8004ee6:	4b9a      	ldr	r3, [pc, #616]	@ (8005150 <plotter_begin+0x678>)
 8004ee8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&prismatic_velocity_pid, 150, 1e-5, 0,
 8004eec:	4610      	mov	r0, r2
 8004eee:	4619      	mov	r1, r3
 8004ef0:	f7fb fe30 	bl	8000b54 <__aeabi_d2f>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	ee01 3a90 	vmov	s3, r3
 8004efa:	ed9f 1a93 	vldr	s2, [pc, #588]	@ 8005148 <plotter_begin+0x670>
 8004efe:	eddf 0a99 	vldr	s1, [pc, #612]	@ 8005164 <plotter_begin+0x68c>
 8004f02:	ed9f 0a99 	vldr	s0, [pc, #612]	@ 8005168 <plotter_begin+0x690>
 8004f06:	4899      	ldr	r0, [pc, #612]	@ (800516c <plotter_begin+0x694>)
 8004f08:	f7fc f8d3 	bl	80010b2 <PID_CONTROLLER_Init>

	PID_CONTROLLER_Init(&revolute_position_pid, 100, 0.1, 450,
			ZGX45RGG_150RPM_Constant.qd_max);
 8004f0c:	4b98      	ldr	r3, [pc, #608]	@ (8005170 <plotter_begin+0x698>)
 8004f0e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
	PID_CONTROLLER_Init(&revolute_position_pid, 100, 0.1, 450,
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	f7fb fe1d 	bl	8000b54 <__aeabi_d2f>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	ee01 3a90 	vmov	s3, r3
 8004f20:	ed9f 1a94 	vldr	s2, [pc, #592]	@ 8005174 <plotter_begin+0x69c>
 8004f24:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8005178 <plotter_begin+0x6a0>
 8004f28:	ed9f 0a94 	vldr	s0, [pc, #592]	@ 800517c <plotter_begin+0x6a4>
 8004f2c:	4894      	ldr	r0, [pc, #592]	@ (8005180 <plotter_begin+0x6a8>)
 8004f2e:	f7fc f8c0 	bl	80010b2 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
	        ZGX45RGG_150RPM_Constant.U_max);
 8004f32:	4b8f      	ldr	r3, [pc, #572]	@ (8005170 <plotter_begin+0x698>)
 8004f34:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
	PID_CONTROLLER_Init(&revolute_velocity_pid, 2000, 25, 500,
 8004f38:	4610      	mov	r0, r2
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	f7fb fe0a 	bl	8000b54 <__aeabi_d2f>
 8004f40:	4603      	mov	r3, r0
 8004f42:	ee01 3a90 	vmov	s3, r3
 8004f46:	ed9f 1a8f 	vldr	s2, [pc, #572]	@ 8005184 <plotter_begin+0x6ac>
 8004f4a:	eef3 0a09 	vmov.f32	s1, #57	@ 0x41c80000  25.0
 8004f4e:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 800514c <plotter_begin+0x674>
 8004f52:	488d      	ldr	r0, [pc, #564]	@ (8005188 <plotter_begin+0x6b0>)
 8004f54:	f7fc f8ad 	bl	80010b2 <PID_CONTROLLER_Init>

	REVOLUTE_MOTOR_FFD_Init(&revolute_motor_ffd, &ZGX45RGG_150RPM_Constant);
 8004f58:	4985      	ldr	r1, [pc, #532]	@ (8005170 <plotter_begin+0x698>)
 8004f5a:	488c      	ldr	r0, [pc, #560]	@ (800518c <plotter_begin+0x6b4>)
 8004f5c:	f7fc fa8e 	bl	800147c <REVOLUTE_MOTOR_FFD_Init>
	PRISMATIC_MOTOR_FFD_Init(&prismatic_motor_ffd, &ZGX45RGG_400RPM_Constant);
 8004f60:	497b      	ldr	r1, [pc, #492]	@ (8005150 <plotter_begin+0x678>)
 8004f62:	488b      	ldr	r0, [pc, #556]	@ (8005190 <plotter_begin+0x6b8>)
 8004f64:	f7fc fc08 	bl	8001778 <PRISMATIC_MOTOR_FFD_Init>

	REVOLUTE_MOTOR_DFD_Init(&revolute_motor_dfd, &ZGX45RGG_150RPM_Constant,
 8004f68:	4a8a      	ldr	r2, [pc, #552]	@ (8005194 <plotter_begin+0x6bc>)
 8004f6a:	4981      	ldr	r1, [pc, #516]	@ (8005170 <plotter_begin+0x698>)
 8004f6c:	488a      	ldr	r0, [pc, #552]	@ (8005198 <plotter_begin+0x6c0>)
 8004f6e:	f7fc fb14 	bl	800159a <REVOLUTE_MOTOR_DFD_Init>
			&Disturbance_Constant);
	PRISMATIC_MOTOR_DFD_Init(&prismatic_motor_dfd, &ZGX45RGG_400RPM_Constant,
 8004f72:	4a88      	ldr	r2, [pc, #544]	@ (8005194 <plotter_begin+0x6bc>)
 8004f74:	4976      	ldr	r1, [pc, #472]	@ (8005150 <plotter_begin+0x678>)
 8004f76:	4889      	ldr	r0, [pc, #548]	@ (800519c <plotter_begin+0x6c4>)
 8004f78:	f7fc fc0c 	bl	8001794 <PRISMATIC_MOTOR_DFD_Init>
			&Disturbance_Constant);

	ADC_DMA_Init(&joystick, &hadc1, joystick_buffer, ADC_BUFFER_SIZE,
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	eddf 0a87 	vldr	s1, [pc, #540]	@ 80051a0 <plotter_begin+0x6c8>
 8004f84:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 80051a4 <plotter_begin+0x6cc>
 8004f88:	2364      	movs	r3, #100	@ 0x64
 8004f8a:	4a87      	ldr	r2, [pc, #540]	@ (80051a8 <plotter_begin+0x6d0>)
 8004f8c:	4987      	ldr	r1, [pc, #540]	@ (80051ac <plotter_begin+0x6d4>)
 8004f8e:	4888      	ldr	r0, [pc, #544]	@ (80051b0 <plotter_begin+0x6d8>)
 8004f90:	f7fb ffc6 	bl	8000f20 <ADC_DMA_Init>
	ADC_CHANNELS, ADC_VREF, ADC_RESOLUTION);
	ADC_DMA_SetCenterPoint(&joystick, ADC_CENTERPOINT, ADC_ERROR);
 8004f94:	2105      	movs	r1, #5
 8004f96:	ed9f 0a87 	vldr	s0, [pc, #540]	@ 80051b4 <plotter_begin+0x6dc>
 8004f9a:	4885      	ldr	r0, [pc, #532]	@ (80051b0 <plotter_begin+0x6d8>)
 8004f9c:	f7fc f830 	bl	8001000 <ADC_DMA_SetCenterPoint>
	ADC_DMA_Start(&joystick);
 8004fa0:	4883      	ldr	r0, [pc, #524]	@ (80051b0 <plotter_begin+0x6d8>)
 8004fa2:	f7fc f815 	bl	8000fd0 <ADC_DMA_Start>

	FIR_init(&prismatic_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8004fa6:	eddf 0a84 	vldr	s1, [pc, #528]	@ 80051b8 <plotter_begin+0x6e0>
 8004faa:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004fae:	211f      	movs	r1, #31
 8004fb0:	4882      	ldr	r0, [pc, #520]	@ (80051bc <plotter_begin+0x6e4>)
 8004fb2:	f7fc fc01 	bl	80017b8 <FIR_init>
	FIR_init(&acceleration_lp_accel, NUM_TAPS, CUTOFF_FREQ, SAMPLE_RATE);
 8004fb6:	eddf 0a80 	vldr	s1, [pc, #512]	@ 80051b8 <plotter_begin+0x6e0>
 8004fba:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8004fbe:	211f      	movs	r1, #31
 8004fc0:	487f      	ldr	r0, [pc, #508]	@ (80051c0 <plotter_begin+0x6e8>)
 8004fc2:	f7fc fbf9 	bl	80017b8 <FIR_init>

	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004fc6:	4b62      	ldr	r3, [pc, #392]	@ (8005150 <plotter_begin+0x678>)
 8004fc8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fcc:	4610      	mov	r0, r2
 8004fce:	4619      	mov	r1, r3
 8004fd0:	f7fb fdc0 	bl	8000b54 <__aeabi_d2f>
 8004fd4:	4604      	mov	r4, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8004fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8005150 <plotter_begin+0x678>)
 8004fd8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004fdc:	4610      	mov	r0, r2
 8004fde:	4619      	mov	r1, r3
 8004fe0:	f7fb fdb8 	bl	8000b54 <__aeabi_d2f>
 8004fe4:	4605      	mov	r5, r0
			ZGX45RGG_400RPM_Constant.B, ZGX45RGG_400RPM_Constant.Kt,
 8004fe6:	4b5a      	ldr	r3, [pc, #360]	@ (8005150 <plotter_begin+0x678>)
 8004fe8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7fb fdb0 	bl	8000b54 <__aeabi_d2f>
 8004ff4:	4606      	mov	r6, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8004ff6:	4b56      	ldr	r3, [pc, #344]	@ (8005150 <plotter_begin+0x678>)
 8004ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	f7fb fda8 	bl	8000b54 <__aeabi_d2f>
 8005004:	4680      	mov	r8, r0
			ZGX45RGG_400RPM_Constant.Ke, ZGX45RGG_400RPM_Constant.R,
 8005006:	4b52      	ldr	r3, [pc, #328]	@ (8005150 <plotter_begin+0x678>)
 8005008:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800500c:	4610      	mov	r0, r2
 800500e:	4619      	mov	r1, r3
 8005010:	f7fb fda0 	bl	8000b54 <__aeabi_d2f>
 8005014:	4681      	mov	r9, r0
			ZGX45RGG_400RPM_Constant.L, 1.0, 1.0);
 8005016:	4b4e      	ldr	r3, [pc, #312]	@ (8005150 <plotter_begin+0x678>)
 8005018:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	MotorKalman_Init(&prismatic_kalman, 1e-3, ZGX45RGG_400RPM_Constant.J,
 800501c:	4610      	mov	r0, r2
 800501e:	4619      	mov	r1, r3
 8005020:	f7fb fd98 	bl	8000b54 <__aeabi_d2f>
 8005024:	4603      	mov	r3, r0
 8005026:	eeb7 4a00 	vmov.f32	s8, #112	@ 0x3f800000  1.0
 800502a:	eef7 3a00 	vmov.f32	s7, #112	@ 0x3f800000  1.0
 800502e:	ee03 3a10 	vmov	s6, r3
 8005032:	ee02 9a90 	vmov	s5, r9
 8005036:	ee02 8a10 	vmov	s4, r8
 800503a:	ee01 6a90 	vmov	s3, r6
 800503e:	ee01 5a10 	vmov	s2, r5
 8005042:	ee00 4a90 	vmov	s1, r4
 8005046:	ed9f 0a5f 	vldr	s0, [pc, #380]	@ 80051c4 <plotter_begin+0x6ec>
 800504a:	485f      	ldr	r0, [pc, #380]	@ (80051c8 <plotter_begin+0x6f0>)
 800504c:	f7fc fdb4 	bl	8001bb8 <MotorKalman_Init>

	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8005050:	4b47      	ldr	r3, [pc, #284]	@ (8005170 <plotter_begin+0x698>)
 8005052:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	f7fb fd7b 	bl	8000b54 <__aeabi_d2f>
 800505e:	4604      	mov	r4, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8005060:	4b43      	ldr	r3, [pc, #268]	@ (8005170 <plotter_begin+0x698>)
 8005062:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8005066:	4610      	mov	r0, r2
 8005068:	4619      	mov	r1, r3
 800506a:	f7fb fd73 	bl	8000b54 <__aeabi_d2f>
 800506e:	4605      	mov	r5, r0
			ZGX45RGG_150RPM_Constant.L, ZGX45RGG_150RPM_Constant.J,
 8005070:	4b3f      	ldr	r3, [pc, #252]	@ (8005170 <plotter_begin+0x698>)
 8005072:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	f7fb fd6b 	bl	8000b54 <__aeabi_d2f>
 800507e:	4606      	mov	r6, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 8005080:	4b3b      	ldr	r3, [pc, #236]	@ (8005170 <plotter_begin+0x698>)
 8005082:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8005086:	a326      	add	r3, pc, #152	@ (adr r3, 8005120 <plotter_begin+0x648>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	f7fb fa80 	bl	8000590 <__aeabi_dmul>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 8005094:	4610      	mov	r0, r2
 8005096:	4619      	mov	r1, r3
 8005098:	f7fb fd5c 	bl	8000b54 <__aeabi_d2f>
 800509c:	4680      	mov	r8, r0
			ZGX45RGG_150RPM_Constant.B * 2.2, ZGX45RGG_150RPM_Constant.Ke,
 800509e:	4b34      	ldr	r3, [pc, #208]	@ (8005170 <plotter_begin+0x698>)
 80050a0:	e9d3 2300 	ldrd	r2, r3, [r3]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	f7fb fd54 	bl	8000b54 <__aeabi_d2f>
 80050ac:	4681      	mov	r9, r0
			ZGX45RGG_150RPM_Constant.Kt, 0.001, &revolute_A, &revolute_B);
 80050ae:	4b30      	ldr	r3, [pc, #192]	@ (8005170 <plotter_begin+0x698>)
 80050b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
	GenerateMotorMatrices(ZGX45RGG_150RPM_Constant.R,
 80050b4:	4610      	mov	r0, r2
 80050b6:	4619      	mov	r1, r3
 80050b8:	f7fb fd4c 	bl	8000b54 <__aeabi_d2f>
 80050bc:	4603      	mov	r3, r0
 80050be:	4943      	ldr	r1, [pc, #268]	@ (80051cc <plotter_begin+0x6f4>)
 80050c0:	4843      	ldr	r0, [pc, #268]	@ (80051d0 <plotter_begin+0x6f8>)
 80050c2:	ed9f 3a40 	vldr	s6, [pc, #256]	@ 80051c4 <plotter_begin+0x6ec>
 80050c6:	ee02 3a90 	vmov	s5, r3
 80050ca:	ee02 9a10 	vmov	s4, r9
 80050ce:	ee01 8a90 	vmov	s3, r8
 80050d2:	ee01 6a10 	vmov	s2, r6
 80050d6:	ee00 5a90 	vmov	s1, r5
 80050da:	ee00 4a10 	vmov	s0, r4
 80050de:	f7fd fa01 	bl	80024e4 <GenerateMotorMatrices>

	Kalman_Start(&revolute_kalman, revolute_A, revolute_B, REVOLUTE_Q,
 80050e2:	eddf 0a3c 	vldr	s1, [pc, #240]	@ 80051d4 <plotter_begin+0x6fc>
 80050e6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80050ea:	4a38      	ldr	r2, [pc, #224]	@ (80051cc <plotter_begin+0x6f4>)
 80050ec:	4938      	ldr	r1, [pc, #224]	@ (80051d0 <plotter_begin+0x6f8>)
 80050ee:	483a      	ldr	r0, [pc, #232]	@ (80051d8 <plotter_begin+0x700>)
 80050f0:	f7fe fe60 	bl	8003db4 <Kalman_Start>
	REVOLUTE_R);

	Modbus_init(&ModBus, MODBUS_USART, MODBUS_DATA_SENDING_PERIOD_TIM,
 80050f4:	23c8      	movs	r3, #200	@ 0xc8
 80050f6:	9301      	str	r3, [sp, #4]
 80050f8:	2315      	movs	r3, #21
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	4b37      	ldr	r3, [pc, #220]	@ (80051dc <plotter_begin+0x704>)
 80050fe:	4a38      	ldr	r2, [pc, #224]	@ (80051e0 <plotter_begin+0x708>)
 8005100:	4938      	ldr	r1, [pc, #224]	@ (80051e4 <plotter_begin+0x70c>)
 8005102:	4839      	ldr	r0, [pc, #228]	@ (80051e8 <plotter_begin+0x710>)
 8005104:	f7fc fcf0 	bl	8001ae8 <Modbus_init>
			registerFrame, MODBUS_SLAVE_ADDRESS, MODBUS_REGISTER_FRAME_SIZE);

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 8005108:	4838      	ldr	r0, [pc, #224]	@ (80051ec <plotter_begin+0x714>)
 800510a:	f004 fcff 	bl	8009b0c <HAL_TIM_Base_Start_IT>

	plotter_reset();
 800510e:	f000 f86f 	bl	80051f0 <plotter_reset>
}
 8005112:	bf00      	nop
 8005114:	3704      	adds	r7, #4
 8005116:	46bd      	mov	sp, r7
 8005118:	ecbd 8b02 	vpop	{d8}
 800511c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005120:	9999999a 	.word	0x9999999a
 8005124:	40019999 	.word	0x40019999
 8005128:	20001aa8 	.word	0x20001aa8
 800512c:	200003f4 	.word	0x200003f4
 8005130:	20001c40 	.word	0x20001c40
 8005134:	20000300 	.word	0x20000300
 8005138:	48000800 	.word	0x48000800
 800513c:	2000034c 	.word	0x2000034c
 8005140:	20001844 	.word	0x20001844
 8005144:	20000508 	.word	0x20000508
 8005148:	00000000 	.word	0x00000000
 800514c:	44fa0000 	.word	0x44fa0000
 8005150:	20000080 	.word	0x20000080
 8005154:	42f00000 	.word	0x42f00000
 8005158:	2edbe6ff 	.word	0x2edbe6ff
 800515c:	42960000 	.word	0x42960000
 8005160:	20000450 	.word	0x20000450
 8005164:	3727c5ac 	.word	0x3727c5ac
 8005168:	43160000 	.word	0x43160000
 800516c:	20000478 	.word	0x20000478
 8005170:	20000000 	.word	0x20000000
 8005174:	43e10000 	.word	0x43e10000
 8005178:	3dcccccd 	.word	0x3dcccccd
 800517c:	42c80000 	.word	0x42c80000
 8005180:	200004a0 	.word	0x200004a0
 8005184:	43fa0000 	.word	0x43fa0000
 8005188:	200004c8 	.word	0x200004c8
 800518c:	200004fc 	.word	0x200004fc
 8005190:	200004f0 	.word	0x200004f0
 8005194:	20000100 	.word	0x20000100
 8005198:	20000500 	.word	0x20000500
 800519c:	200004f4 	.word	0x200004f4
 80051a0:	457ff000 	.word	0x457ff000
 80051a4:	40533333 	.word	0x40533333
 80051a8:	200009d4 	.word	0x200009d4
 80051ac:	200001b0 	.word	0x200001b0
 80051b0:	20000520 	.word	0x20000520
 80051b4:	45000000 	.word	0x45000000
 80051b8:	447a0000 	.word	0x447a0000
 80051bc:	200009bc 	.word	0x200009bc
 80051c0:	200009c8 	.word	0x200009c8
 80051c4:	3a83126f 	.word	0x3a83126f
 80051c8:	20001104 	.word	0x20001104
 80051cc:	20001830 	.word	0x20001830
 80051d0:	200017f0 	.word	0x200017f0
 80051d4:	3d4ccccd 	.word	0x3d4ccccd
 80051d8:	20001470 	.word	0x20001470
 80051dc:	20000f74 	.word	0x20000f74
 80051e0:	20001d0c 	.word	0x20001d0c
 80051e4:	20001ea4 	.word	0x20001ea4
 80051e8:	20000a9c 	.word	0x20000a9c
 80051ec:	20001910 	.word	0x20001910

080051f0 <plotter_reset>:

void plotter_reset() {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
	QEI_reset(&prismatic_encoder);
 80051f4:	4819      	ldr	r0, [pc, #100]	@ (800525c <plotter_reset+0x6c>)
 80051f6:	f7fd fd87 	bl	8002d08 <QEI_reset>
	QEI_reset(&prismatic_encoder);
 80051fa:	4818      	ldr	r0, [pc, #96]	@ (800525c <plotter_reset+0x6c>)
 80051fc:	f7fd fd84 	bl	8002d08 <QEI_reset>

	prismatic_encoder.diff_counts = 0;
 8005200:	4b16      	ldr	r3, [pc, #88]	@ (800525c <plotter_reset+0x6c>)
 8005202:	2200      	movs	r2, #0
 8005204:	625a      	str	r2, [r3, #36]	@ 0x24
	prismatic_encoder.rpm = 0;
 8005206:	4b15      	ldr	r3, [pc, #84]	@ (800525c <plotter_reset+0x6c>)
 8005208:	f04f 0200 	mov.w	r2, #0
 800520c:	631a      	str	r2, [r3, #48]	@ 0x30
	prismatic_encoder.pulses = 0;
 800520e:	4b13      	ldr	r3, [pc, #76]	@ (800525c <plotter_reset+0x6c>)
 8005210:	2200      	movs	r2, #0
 8005212:	639a      	str	r2, [r3, #56]	@ 0x38
	prismatic_encoder.revs = 0;
 8005214:	4b11      	ldr	r3, [pc, #68]	@ (800525c <plotter_reset+0x6c>)
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	63da      	str	r2, [r3, #60]	@ 0x3c
	prismatic_encoder.rads = 0;
 800521c:	4b0f      	ldr	r3, [pc, #60]	@ (800525c <plotter_reset+0x6c>)
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	641a      	str	r2, [r3, #64]	@ 0x40
	prismatic_encoder.mm = 0;
 8005224:	4b0d      	ldr	r3, [pc, #52]	@ (800525c <plotter_reset+0x6c>)
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	649a      	str	r2, [r3, #72]	@ 0x48

	revolute_encoder.diff_counts = 0;
 800522c:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <plotter_reset+0x70>)
 800522e:	2200      	movs	r2, #0
 8005230:	625a      	str	r2, [r3, #36]	@ 0x24
	revolute_encoder.rpm = 0;
 8005232:	4b0b      	ldr	r3, [pc, #44]	@ (8005260 <plotter_reset+0x70>)
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	@ 0x30
	revolute_encoder.pulses = 0;
 800523a:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <plotter_reset+0x70>)
 800523c:	2200      	movs	r2, #0
 800523e:	639a      	str	r2, [r3, #56]	@ 0x38
	revolute_encoder.revs = 0;
 8005240:	4b07      	ldr	r3, [pc, #28]	@ (8005260 <plotter_reset+0x70>)
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	63da      	str	r2, [r3, #60]	@ 0x3c
	revolute_encoder.rads = 0;
 8005248:	4b05      	ldr	r3, [pc, #20]	@ (8005260 <plotter_reset+0x70>)
 800524a:	f04f 0200 	mov.w	r2, #0
 800524e:	641a      	str	r2, [r3, #64]	@ 0x40
	revolute_encoder.mm = 0;
 8005250:	4b03      	ldr	r3, [pc, #12]	@ (8005260 <plotter_reset+0x70>)
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8005258:	bf00      	nop
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000398 	.word	0x20000398
 8005260:	200003f4 	.word	0x200003f4

08005264 <SIGNAL_init>:
    if (value > max_setpoint) return max_setpoint;
    return value;
}

// Initialization function
void SIGNAL_init(SignalGenerator* sg, SignalType type) {
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	70fb      	strb	r3, [r7, #3]
    // Reset all parameters
    sg->type = type;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	701a      	strb	r2, [r3, #0]
    sg->amplitude = 1.0f;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800527c:	605a      	str	r2, [r3, #4]
    sg->frequency = 1.0f;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005284:	609a      	str	r2, [r3, #8]
    sg->phase = 0.0f;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	60da      	str	r2, [r3, #12]
    sg->offset = 0.0f;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	611a      	str	r2, [r3, #16]
    sg->current_phase = 0.0f;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	635a      	str	r2, [r3, #52]	@ 0x34
    sg->time_elapsed = 0.0f;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	639a      	str	r2, [r3, #56]	@ 0x38
    sg->min_setpoint = -1.0f;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005318 <SIGNAL_init+0xb4>)
 80052aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = 1.0f;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80052b2:	641a      	str	r2, [r3, #64]	@ 0x40

    // Type-specific initializations
    switch (type) {
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d828      	bhi.n	800530c <SIGNAL_init+0xa8>
 80052ba:	a201      	add	r2, pc, #4	@ (adr r2, 80052c0 <SIGNAL_init+0x5c>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	0800530b 	.word	0x0800530b
 80052c4:	080052d1 	.word	0x080052d1
 80052c8:	080052ef 	.word	0x080052ef
 80052cc:	080052f9 	.word	0x080052f9
        case SIGNAL_SINE:
            break;
        case SIGNAL_CHIRP:
            sg->chirp_type = CHIRP_LINEAR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	751a      	strb	r2, [r3, #20]
            sg->f_start = 1.0f;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80052dc:	619a      	str	r2, [r3, #24]
            sg->f_end = 10.0f;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a0e      	ldr	r2, [pc, #56]	@ (800531c <SIGNAL_init+0xb8>)
 80052e2:	61da      	str	r2, [r3, #28]
            sg->duration = 1.0f;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80052ea:	621a      	str	r2, [r3, #32]
            break;
 80052ec:	e00e      	b.n	800530c <SIGNAL_init+0xa8>
        case SIGNAL_SQUARE:
            sg->duty_cycle = 0.5f;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
            break;
 80052f6:	e009      	b.n	800530c <SIGNAL_init+0xa8>
        case SIGNAL_RAMP:
            sg->ramp_start = 0.0f;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	62da      	str	r2, [r3, #44]	@ 0x2c
            sg->ramp_end = 1.0f;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005306:	631a      	str	r2, [r3, #48]	@ 0x30
            break;
 8005308:	e000      	b.n	800530c <SIGNAL_init+0xa8>
            break;
 800530a:	bf00      	nop
    }
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr
 8005318:	bf800000 	.word	0xbf800000
 800531c:	41200000 	.word	0x41200000

08005320 <SIGNAL_config_sine>:
                        float32_t amplitude,
                        float32_t frequency,
                        float32_t phase,
                        float32_t offset,
                        float32_t min_setpoint,
                        float32_t max_setpoint) {
 8005320:	b480      	push	{r7}
 8005322:	b089      	sub	sp, #36	@ 0x24
 8005324:	af00      	add	r7, sp, #0
 8005326:	61f8      	str	r0, [r7, #28]
 8005328:	ed87 0a06 	vstr	s0, [r7, #24]
 800532c:	edc7 0a05 	vstr	s1, [r7, #20]
 8005330:	ed87 1a04 	vstr	s2, [r7, #16]
 8005334:	edc7 1a03 	vstr	s3, [r7, #12]
 8005338:	ed87 2a02 	vstr	s4, [r7, #8]
 800533c:	edc7 2a01 	vstr	s5, [r7, #4]
    sg->type = SIGNAL_SINE;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	2200      	movs	r2, #0
 8005344:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	609a      	str	r2, [r3, #8]
    sg->phase = phase;
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800536a:	bf00      	nop
 800536c:	3724      	adds	r7, #36	@ 0x24
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <SIGNAL_config_square>:
                          float32_t frequency,
                          float32_t duty_cycle,
                          float32_t phase,
                          float32_t offset,
                          float32_t min_setpoint,
                          float32_t max_setpoint) {
 8005376:	b480      	push	{r7}
 8005378:	b089      	sub	sp, #36	@ 0x24
 800537a:	af00      	add	r7, sp, #0
 800537c:	61f8      	str	r0, [r7, #28]
 800537e:	ed87 0a06 	vstr	s0, [r7, #24]
 8005382:	edc7 0a05 	vstr	s1, [r7, #20]
 8005386:	ed87 1a04 	vstr	s2, [r7, #16]
 800538a:	edc7 1a03 	vstr	s3, [r7, #12]
 800538e:	ed87 2a02 	vstr	s4, [r7, #8]
 8005392:	edc7 2a01 	vstr	s5, [r7, #4]
 8005396:	ed87 3a00 	vstr	s6, [r7]
    sg->type = SIGNAL_SQUARE;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	2202      	movs	r2, #2
 800539e:	701a      	strb	r2, [r3, #0]
    sg->amplitude = amplitude;
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	605a      	str	r2, [r3, #4]
    sg->frequency = frequency;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	609a      	str	r2, [r3, #8]
    sg->duty_cycle = duty_cycle;
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	629a      	str	r2, [r3, #40]	@ 0x28
    sg->phase = phase;
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	60da      	str	r2, [r3, #12]
    sg->offset = offset;
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	611a      	str	r2, [r3, #16]
    sg->min_setpoint = min_setpoint;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	63da      	str	r2, [r3, #60]	@ 0x3c
    sg->max_setpoint = max_setpoint;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80053ca:	bf00      	nop
 80053cc:	3724      	adds	r7, #36	@ 0x24
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053de:	4b0f      	ldr	r3, [pc, #60]	@ (800541c <HAL_MspInit+0x44>)
 80053e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053e2:	4a0e      	ldr	r2, [pc, #56]	@ (800541c <HAL_MspInit+0x44>)
 80053e4:	f043 0301 	orr.w	r3, r3, #1
 80053e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80053ea:	4b0c      	ldr	r3, [pc, #48]	@ (800541c <HAL_MspInit+0x44>)
 80053ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	607b      	str	r3, [r7, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053f6:	4b09      	ldr	r3, [pc, #36]	@ (800541c <HAL_MspInit+0x44>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053fa:	4a08      	ldr	r2, [pc, #32]	@ (800541c <HAL_MspInit+0x44>)
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005400:	6593      	str	r3, [r2, #88]	@ 0x58
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <HAL_MspInit+0x44>)
 8005404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800540a:	603b      	str	r3, [r7, #0]
 800540c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800540e:	f003 fb1d 	bl	8008a4c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005412:	bf00      	nop
 8005414:	3708      	adds	r7, #8
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	40021000 	.word	0x40021000

08005420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005424:	bf00      	nop
 8005426:	e7fd      	b.n	8005424 <NMI_Handler+0x4>

08005428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <HardFault_Handler+0x4>

08005430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005434:	bf00      	nop
 8005436:	e7fd      	b.n	8005434 <MemManage_Handler+0x4>

08005438 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005438:	b480      	push	{r7}
 800543a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800543c:	bf00      	nop
 800543e:	e7fd      	b.n	800543c <BusFault_Handler+0x4>

08005440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005444:	bf00      	nop
 8005446:	e7fd      	b.n	8005444 <UsageFault_Handler+0x4>

08005448 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005456:	b480      	push	{r7}
 8005458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800545a:	bf00      	nop
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005464:	b480      	push	{r7}
 8005466:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005476:	f000 ffbb 	bl	80063f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	bd80      	pop	{r7, pc}

0800547e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UPPER_PHOTO_Pin);
 8005482:	2001      	movs	r0, #1
 8005484:	f003 fa26 	bl	80088d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005488:	bf00      	nop
 800548a:	bd80      	pop	{r7, pc}

0800548c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMER_Pin);
 8005490:	2010      	movs	r0, #16
 8005492:	f003 fa1f 	bl	80088d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8005496:	bf00      	nop
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80054a0:	4802      	ldr	r0, [pc, #8]	@ (80054ac <DMA1_Channel1_IRQHandler+0x10>)
 80054a2:	f002 ff2e 	bl	8008302 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	2000021c 	.word	0x2000021c

080054b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80054b4:	4802      	ldr	r0, [pc, #8]	@ (80054c0 <DMA1_Channel2_IRQHandler+0x10>)
 80054b6:	f002 ff24 	bl	8008302 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20002030 	.word	0x20002030

080054c4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80054c8:	4802      	ldr	r0, [pc, #8]	@ (80054d4 <DMA1_Channel3_IRQHandler+0x10>)
 80054ca:	f002 ff1a 	bl	8008302 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80054ce:	bf00      	nop
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20002090 	.word	0x20002090

080054d8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80054dc:	4802      	ldr	r0, [pc, #8]	@ (80054e8 <DMA1_Channel4_IRQHandler+0x10>)
 80054de:	f002 ff10 	bl	8008302 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80054e2:	bf00      	nop
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20001f70 	.word	0x20001f70

080054ec <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80054f0:	4802      	ldr	r0, [pc, #8]	@ (80054fc <DMA1_Channel5_IRQHandler+0x10>)
 80054f2:	f002 ff06 	bl	8008302 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80054f6:	bf00      	nop
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20001fd0 	.word	0x20001fd0

08005500 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PROX_Pin);
 8005504:	2040      	movs	r0, #64	@ 0x40
 8005506:	f003 f9e5 	bl	80088d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J1_Pin);
 800550a:	2080      	movs	r0, #128	@ 0x80
 800550c:	f003 f9e2 	bl	80088d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005510:	bf00      	nop
 8005512:	bd80      	pop	{r7, pc}

08005514 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005518:	4803      	ldr	r0, [pc, #12]	@ (8005528 <TIM1_UP_TIM16_IRQHandler+0x14>)
 800551a:	f004 ff1d 	bl	800a358 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800551e:	4803      	ldr	r0, [pc, #12]	@ (800552c <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005520:	f004 ff1a 	bl	800a358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005524:	bf00      	nop
 8005526:	bd80      	pop	{r7, pc}
 8005528:	20001844 	.word	0x20001844
 800552c:	20001d0c 	.word	0x20001d0c

08005530 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005534:	4802      	ldr	r0, [pc, #8]	@ (8005540 <TIM2_IRQHandler+0x10>)
 8005536:	f004 ff0f 	bl	800a358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800553a:	bf00      	nop
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20001910 	.word	0x20001910

08005544 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005548:	4802      	ldr	r0, [pc, #8]	@ (8005554 <TIM3_IRQHandler+0x10>)
 800554a:	f004 ff05 	bl	800a358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800554e:	bf00      	nop
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	200019dc 	.word	0x200019dc

08005558 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800555c:	4802      	ldr	r0, [pc, #8]	@ (8005568 <TIM4_IRQHandler+0x10>)
 800555e:	f004 fefb 	bl	800a358 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8005562:	bf00      	nop
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	20001aa8 	.word	0x20001aa8

0800556c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005570:	4802      	ldr	r0, [pc, #8]	@ (800557c <USART2_IRQHandler+0x10>)
 8005572:	f006 fc45 	bl	800be00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005576:	bf00      	nop
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20001ea4 	.word	0x20001ea4

08005580 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(J3_Pin);
 8005584:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8005588:	f003 f9a4 	bl	80088d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(J4_Pin);
 800558c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8005590:	f003 f9a0 	bl	80088d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LOWER_PHOTO_Pin);
 8005594:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8005598:	f003 f99c 	bl	80088d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800559c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80055a0:	f003 f998 	bl	80088d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80055a4:	bf00      	nop
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80055ac:	4802      	ldr	r0, [pc, #8]	@ (80055b8 <LPUART1_IRQHandler+0x10>)
 80055ae:	f006 fc27 	bl	800be00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80055b2:	bf00      	nop
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20001dd8 	.word	0x20001dd8

080055bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80055c4:	4a14      	ldr	r2, [pc, #80]	@ (8005618 <_sbrk+0x5c>)
 80055c6:	4b15      	ldr	r3, [pc, #84]	@ (800561c <_sbrk+0x60>)
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80055d0:	4b13      	ldr	r3, [pc, #76]	@ (8005620 <_sbrk+0x64>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d102      	bne.n	80055de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80055d8:	4b11      	ldr	r3, [pc, #68]	@ (8005620 <_sbrk+0x64>)
 80055da:	4a12      	ldr	r2, [pc, #72]	@ (8005624 <_sbrk+0x68>)
 80055dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80055de:	4b10      	ldr	r3, [pc, #64]	@ (8005620 <_sbrk+0x64>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	693a      	ldr	r2, [r7, #16]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d207      	bcs.n	80055fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80055ec:	f008 fe96 	bl	800e31c <__errno>
 80055f0:	4603      	mov	r3, r0
 80055f2:	220c      	movs	r2, #12
 80055f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80055f6:	f04f 33ff 	mov.w	r3, #4294967295
 80055fa:	e009      	b.n	8005610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80055fc:	4b08      	ldr	r3, [pc, #32]	@ (8005620 <_sbrk+0x64>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005602:	4b07      	ldr	r3, [pc, #28]	@ (8005620 <_sbrk+0x64>)
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4413      	add	r3, r2
 800560a:	4a05      	ldr	r2, [pc, #20]	@ (8005620 <_sbrk+0x64>)
 800560c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800560e:	68fb      	ldr	r3, [r7, #12]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3718      	adds	r7, #24
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20020000 	.word	0x20020000
 800561c:	00000400 	.word	0x00000400
 8005620:	20001840 	.word	0x20001840
 8005624:	20002240 	.word	0x20002240

08005628 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800562c:	4b06      	ldr	r3, [pc, #24]	@ (8005648 <SystemInit+0x20>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005632:	4a05      	ldr	r2, [pc, #20]	@ (8005648 <SystemInit+0x20>)
 8005634:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005638:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	e000ed00 	.word	0xe000ed00

0800564c <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b098      	sub	sp, #96	@ 0x60
 8005650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005652:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005656:	2200      	movs	r2, #0
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	605a      	str	r2, [r3, #4]
 800565c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800565e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005662:	2200      	movs	r2, #0
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	609a      	str	r2, [r3, #8]
 800566a:	60da      	str	r2, [r3, #12]
 800566c:	611a      	str	r2, [r3, #16]
 800566e:	615a      	str	r2, [r3, #20]
 8005670:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005672:	1d3b      	adds	r3, r7, #4
 8005674:	2234      	movs	r2, #52	@ 0x34
 8005676:	2100      	movs	r1, #0
 8005678:	4618      	mov	r0, r3
 800567a:	f008 fe37 	bl	800e2ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800567e:	4b3b      	ldr	r3, [pc, #236]	@ (800576c <MX_TIM1_Init+0x120>)
 8005680:	4a3b      	ldr	r2, [pc, #236]	@ (8005770 <MX_TIM1_Init+0x124>)
 8005682:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005684:	4b39      	ldr	r3, [pc, #228]	@ (800576c <MX_TIM1_Init+0x120>)
 8005686:	2200      	movs	r2, #0
 8005688:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800568a:	4b38      	ldr	r3, [pc, #224]	@ (800576c <MX_TIM1_Init+0x120>)
 800568c:	2200      	movs	r2, #0
 800568e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8005690:	4b36      	ldr	r3, [pc, #216]	@ (800576c <MX_TIM1_Init+0x120>)
 8005692:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005696:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005698:	4b34      	ldr	r3, [pc, #208]	@ (800576c <MX_TIM1_Init+0x120>)
 800569a:	2200      	movs	r2, #0
 800569c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800569e:	4b33      	ldr	r3, [pc, #204]	@ (800576c <MX_TIM1_Init+0x120>)
 80056a0:	2200      	movs	r2, #0
 80056a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056a4:	4b31      	ldr	r3, [pc, #196]	@ (800576c <MX_TIM1_Init+0x120>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80056aa:	4830      	ldr	r0, [pc, #192]	@ (800576c <MX_TIM1_Init+0x120>)
 80056ac:	f004 faa6 	bl	8009bfc <HAL_TIM_PWM_Init>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80056b6:	f7ff fa07 	bl	8004ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056ba:	2300      	movs	r3, #0
 80056bc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80056be:	2300      	movs	r3, #0
 80056c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056c2:	2300      	movs	r3, #0
 80056c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80056c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80056ca:	4619      	mov	r1, r3
 80056cc:	4827      	ldr	r0, [pc, #156]	@ (800576c <MX_TIM1_Init+0x120>)
 80056ce:	f006 f8b7 	bl	800b840 <HAL_TIMEx_MasterConfigSynchronization>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80056d8:	f7ff f9f6 	bl	8004ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056dc:	2360      	movs	r3, #96	@ 0x60
 80056de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80056e0:	2300      	movs	r3, #0
 80056e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056e4:	2300      	movs	r3, #0
 80056e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056e8:	2300      	movs	r3, #0
 80056ea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80056ec:	2300      	movs	r3, #0
 80056ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056f0:	2300      	movs	r3, #0
 80056f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056f4:	2300      	movs	r3, #0
 80056f6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80056f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80056fc:	220c      	movs	r2, #12
 80056fe:	4619      	mov	r1, r3
 8005700:	481a      	ldr	r0, [pc, #104]	@ (800576c <MX_TIM1_Init+0x120>)
 8005702:	f004 ffa3 	bl	800a64c <HAL_TIM_PWM_ConfigChannel>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800570c:	f7ff f9dc 	bl	8004ac8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005710:	2300      	movs	r3, #0
 8005712:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005714:	2300      	movs	r3, #0
 8005716:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005724:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005728:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800572a:	2300      	movs	r3, #0
 800572c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800572e:	2300      	movs	r3, #0
 8005730:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005736:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800573a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005740:	2300      	movs	r3, #0
 8005742:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005744:	2300      	movs	r3, #0
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005748:	1d3b      	adds	r3, r7, #4
 800574a:	4619      	mov	r1, r3
 800574c:	4807      	ldr	r0, [pc, #28]	@ (800576c <MX_TIM1_Init+0x120>)
 800574e:	f006 f90d 	bl	800b96c <HAL_TIMEx_ConfigBreakDeadTime>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d001      	beq.n	800575c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005758:	f7ff f9b6 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800575c:	4803      	ldr	r0, [pc, #12]	@ (800576c <MX_TIM1_Init+0x120>)
 800575e:	f000 fb77 	bl	8005e50 <HAL_TIM_MspPostInit>

}
 8005762:	bf00      	nop
 8005764:	3760      	adds	r7, #96	@ 0x60
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20001844 	.word	0x20001844
 8005770:	40012c00 	.word	0x40012c00

08005774 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800577a:	f107 0310 	add.w	r3, r7, #16
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	605a      	str	r2, [r3, #4]
 8005784:	609a      	str	r2, [r3, #8]
 8005786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005788:	1d3b      	adds	r3, r7, #4
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	605a      	str	r2, [r3, #4]
 8005790:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005792:	4b1e      	ldr	r3, [pc, #120]	@ (800580c <MX_TIM2_Init+0x98>)
 8005794:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005798:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 800579a:	4b1c      	ldr	r3, [pc, #112]	@ (800580c <MX_TIM2_Init+0x98>)
 800579c:	22a9      	movs	r2, #169	@ 0xa9
 800579e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057a0:	4b1a      	ldr	r3, [pc, #104]	@ (800580c <MX_TIM2_Init+0x98>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80057a6:	4b19      	ldr	r3, [pc, #100]	@ (800580c <MX_TIM2_Init+0x98>)
 80057a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80057ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057ae:	4b17      	ldr	r3, [pc, #92]	@ (800580c <MX_TIM2_Init+0x98>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057b4:	4b15      	ldr	r3, [pc, #84]	@ (800580c <MX_TIM2_Init+0x98>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80057ba:	4814      	ldr	r0, [pc, #80]	@ (800580c <MX_TIM2_Init+0x98>)
 80057bc:	f004 f8d2 	bl	8009964 <HAL_TIM_Base_Init>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80057c6:	f7ff f97f 	bl	8004ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80057ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057d0:	f107 0310 	add.w	r3, r7, #16
 80057d4:	4619      	mov	r1, r3
 80057d6:	480d      	ldr	r0, [pc, #52]	@ (800580c <MX_TIM2_Init+0x98>)
 80057d8:	f005 f84c 	bl	800a874 <HAL_TIM_ConfigClockSource>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80057e2:	f7ff f971 	bl	8004ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057e6:	2300      	movs	r3, #0
 80057e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80057ee:	1d3b      	adds	r3, r7, #4
 80057f0:	4619      	mov	r1, r3
 80057f2:	4806      	ldr	r0, [pc, #24]	@ (800580c <MX_TIM2_Init+0x98>)
 80057f4:	f006 f824 	bl	800b840 <HAL_TIMEx_MasterConfigSynchronization>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80057fe:	f7ff f963 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005802:	bf00      	nop
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	20001910 	.word	0x20001910

08005810 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08c      	sub	sp, #48	@ 0x30
 8005814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005816:	f107 030c 	add.w	r3, r7, #12
 800581a:	2224      	movs	r2, #36	@ 0x24
 800581c:	2100      	movs	r1, #0
 800581e:	4618      	mov	r0, r3
 8005820:	f008 fd64 	bl	800e2ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005824:	463b      	mov	r3, r7
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
 800582a:	605a      	str	r2, [r3, #4]
 800582c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800582e:	4b21      	ldr	r3, [pc, #132]	@ (80058b4 <MX_TIM3_Init+0xa4>)
 8005830:	4a21      	ldr	r2, [pc, #132]	@ (80058b8 <MX_TIM3_Init+0xa8>)
 8005832:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005834:	4b1f      	ldr	r3, [pc, #124]	@ (80058b4 <MX_TIM3_Init+0xa4>)
 8005836:	2200      	movs	r2, #0
 8005838:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800583a:	4b1e      	ldr	r3, [pc, #120]	@ (80058b4 <MX_TIM3_Init+0xa4>)
 800583c:	2200      	movs	r2, #0
 800583e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005840:	4b1c      	ldr	r3, [pc, #112]	@ (80058b4 <MX_TIM3_Init+0xa4>)
 8005842:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005846:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005848:	4b1a      	ldr	r3, [pc, #104]	@ (80058b4 <MX_TIM3_Init+0xa4>)
 800584a:	2200      	movs	r2, #0
 800584c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800584e:	4b19      	ldr	r3, [pc, #100]	@ (80058b4 <MX_TIM3_Init+0xa4>)
 8005850:	2200      	movs	r2, #0
 8005852:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005854:	2303      	movs	r3, #3
 8005856:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005860:	2300      	movs	r3, #0
 8005862:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005868:	2300      	movs	r3, #0
 800586a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800586c:	2301      	movs	r3, #1
 800586e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005870:	2300      	movs	r3, #0
 8005872:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005874:	2300      	movs	r3, #0
 8005876:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8005878:	f107 030c 	add.w	r3, r7, #12
 800587c:	4619      	mov	r1, r3
 800587e:	480d      	ldr	r0, [pc, #52]	@ (80058b4 <MX_TIM3_Init+0xa4>)
 8005880:	f004 fc28 	bl	800a0d4 <HAL_TIM_Encoder_Init>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800588a:	f7ff f91d 	bl	8004ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800588e:	2300      	movs	r3, #0
 8005890:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005892:	2300      	movs	r3, #0
 8005894:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005896:	463b      	mov	r3, r7
 8005898:	4619      	mov	r1, r3
 800589a:	4806      	ldr	r0, [pc, #24]	@ (80058b4 <MX_TIM3_Init+0xa4>)
 800589c:	f005 ffd0 	bl	800b840 <HAL_TIMEx_MasterConfigSynchronization>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80058a6:	f7ff f90f 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80058aa:	bf00      	nop
 80058ac:	3730      	adds	r7, #48	@ 0x30
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	200019dc 	.word	0x200019dc
 80058b8:	40000400 	.word	0x40000400

080058bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08c      	sub	sp, #48	@ 0x30
 80058c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80058c2:	f107 030c 	add.w	r3, r7, #12
 80058c6:	2224      	movs	r2, #36	@ 0x24
 80058c8:	2100      	movs	r1, #0
 80058ca:	4618      	mov	r0, r3
 80058cc:	f008 fd0e 	bl	800e2ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80058d0:	463b      	mov	r3, r7
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	605a      	str	r2, [r3, #4]
 80058d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80058da:	4b21      	ldr	r3, [pc, #132]	@ (8005960 <MX_TIM4_Init+0xa4>)
 80058dc:	4a21      	ldr	r2, [pc, #132]	@ (8005964 <MX_TIM4_Init+0xa8>)
 80058de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80058e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005960 <MX_TIM4_Init+0xa4>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058e6:	4b1e      	ldr	r3, [pc, #120]	@ (8005960 <MX_TIM4_Init+0xa4>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80058ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005960 <MX_TIM4_Init+0xa4>)
 80058ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005960 <MX_TIM4_Init+0xa4>)
 80058f6:	2200      	movs	r2, #0
 80058f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058fa:	4b19      	ldr	r3, [pc, #100]	@ (8005960 <MX_TIM4_Init+0xa4>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005900:	2303      	movs	r3, #3
 8005902:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005904:	2300      	movs	r3, #0
 8005906:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005908:	2301      	movs	r3, #1
 800590a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800590c:	2300      	movs	r3, #0
 800590e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005914:	2300      	movs	r3, #0
 8005916:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005918:	2301      	movs	r3, #1
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800591c:	2300      	movs	r3, #0
 800591e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8005920:	2300      	movs	r3, #0
 8005922:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005924:	f107 030c 	add.w	r3, r7, #12
 8005928:	4619      	mov	r1, r3
 800592a:	480d      	ldr	r0, [pc, #52]	@ (8005960 <MX_TIM4_Init+0xa4>)
 800592c:	f004 fbd2 	bl	800a0d4 <HAL_TIM_Encoder_Init>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8005936:	f7ff f8c7 	bl	8004ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800593a:	2300      	movs	r3, #0
 800593c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800593e:	2300      	movs	r3, #0
 8005940:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005942:	463b      	mov	r3, r7
 8005944:	4619      	mov	r1, r3
 8005946:	4806      	ldr	r0, [pc, #24]	@ (8005960 <MX_TIM4_Init+0xa4>)
 8005948:	f005 ff7a 	bl	800b840 <HAL_TIMEx_MasterConfigSynchronization>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8005952:	f7ff f8b9 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8005956:	bf00      	nop
 8005958:	3730      	adds	r7, #48	@ 0x30
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20001aa8 	.word	0x20001aa8
 8005964:	40000800 	.word	0x40000800

08005968 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	@ 0x30
 800596c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800596e:	f107 030c 	add.w	r3, r7, #12
 8005972:	2224      	movs	r2, #36	@ 0x24
 8005974:	2100      	movs	r1, #0
 8005976:	4618      	mov	r0, r3
 8005978:	f008 fcb8 	bl	800e2ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800597c:	463b      	mov	r3, r7
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	605a      	str	r2, [r3, #4]
 8005984:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005986:	4b21      	ldr	r3, [pc, #132]	@ (8005a0c <MX_TIM5_Init+0xa4>)
 8005988:	4a21      	ldr	r2, [pc, #132]	@ (8005a10 <MX_TIM5_Init+0xa8>)
 800598a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800598c:	4b1f      	ldr	r3, [pc, #124]	@ (8005a0c <MX_TIM5_Init+0xa4>)
 800598e:	2200      	movs	r2, #0
 8005990:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005992:	4b1e      	ldr	r3, [pc, #120]	@ (8005a0c <MX_TIM5_Init+0xa4>)
 8005994:	2200      	movs	r2, #0
 8005996:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8005998:	4b1c      	ldr	r3, [pc, #112]	@ (8005a0c <MX_TIM5_Init+0xa4>)
 800599a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800599e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80059a0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a0c <MX_TIM5_Init+0xa4>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80059a6:	4b19      	ldr	r3, [pc, #100]	@ (8005a0c <MX_TIM5_Init+0xa4>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80059ac:	2303      	movs	r3, #3
 80059ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80059b0:	2300      	movs	r3, #0
 80059b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80059b4:	2301      	movs	r3, #1
 80059b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80059c0:	2300      	movs	r3, #0
 80059c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80059c4:	2301      	movs	r3, #1
 80059c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80059c8:	2300      	movs	r3, #0
 80059ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80059d0:	f107 030c 	add.w	r3, r7, #12
 80059d4:	4619      	mov	r1, r3
 80059d6:	480d      	ldr	r0, [pc, #52]	@ (8005a0c <MX_TIM5_Init+0xa4>)
 80059d8:	f004 fb7c 	bl	800a0d4 <HAL_TIM_Encoder_Init>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80059e2:	f7ff f871 	bl	8004ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80059e6:	2300      	movs	r3, #0
 80059e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80059ee:	463b      	mov	r3, r7
 80059f0:	4619      	mov	r1, r3
 80059f2:	4806      	ldr	r0, [pc, #24]	@ (8005a0c <MX_TIM5_Init+0xa4>)
 80059f4:	f005 ff24 	bl	800b840 <HAL_TIMEx_MasterConfigSynchronization>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80059fe:	f7ff f863 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8005a02:	bf00      	nop
 8005a04:	3730      	adds	r7, #48	@ 0x30
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	20001b74 	.word	0x20001b74
 8005a10:	40000c00 	.word	0x40000c00

08005a14 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b09c      	sub	sp, #112	@ 0x70
 8005a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005a1a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005a1e:	2200      	movs	r2, #0
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	605a      	str	r2, [r3, #4]
 8005a24:	609a      	str	r2, [r3, #8]
 8005a26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a28:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	605a      	str	r2, [r3, #4]
 8005a32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005a34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	605a      	str	r2, [r3, #4]
 8005a3e:	609a      	str	r2, [r3, #8]
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	611a      	str	r2, [r3, #16]
 8005a44:	615a      	str	r2, [r3, #20]
 8005a46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005a48:	1d3b      	adds	r3, r7, #4
 8005a4a:	2234      	movs	r2, #52	@ 0x34
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f008 fc4c 	bl	800e2ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005a54:	4b4c      	ldr	r3, [pc, #304]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005a56:	4a4d      	ldr	r2, [pc, #308]	@ (8005b8c <MX_TIM8_Init+0x178>)
 8005a58:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a60:	4b49      	ldr	r3, [pc, #292]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005a66:	4b48      	ldr	r3, [pc, #288]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005a68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005a6c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8005a6e:	4b46      	ldr	r3, [pc, #280]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005a70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a74:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005a76:	4b44      	ldr	r3, [pc, #272]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005a78:	2200      	movs	r2, #0
 8005a7a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a7c:	4b42      	ldr	r3, [pc, #264]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005a82:	4841      	ldr	r0, [pc, #260]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005a84:	f003 ff6e 	bl	8009964 <HAL_TIM_Base_Init>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d001      	beq.n	8005a92 <MX_TIM8_Init+0x7e>
  {
    Error_Handler();
 8005a8e:	f7ff f81b 	bl	8004ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005a92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005a96:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005a98:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	483a      	ldr	r0, [pc, #232]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005aa0:	f004 fee8 	bl	800a874 <HAL_TIM_ConfigClockSource>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <MX_TIM8_Init+0x9a>
  {
    Error_Handler();
 8005aaa:	f7ff f80d 	bl	8004ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005aae:	4836      	ldr	r0, [pc, #216]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005ab0:	f004 f8a4 	bl	8009bfc <HAL_TIM_PWM_Init>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <MX_TIM8_Init+0xaa>
  {
    Error_Handler();
 8005aba:	f7ff f805 	bl	8004ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005aca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005ace:	4619      	mov	r1, r3
 8005ad0:	482d      	ldr	r0, [pc, #180]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005ad2:	f005 feb5 	bl	800b840 <HAL_TIMEx_MasterConfigSynchronization>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <MX_TIM8_Init+0xcc>
  {
    Error_Handler();
 8005adc:	f7fe fff4 	bl	8004ac8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005ae0:	2360      	movs	r3, #96	@ 0x60
 8005ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005aec:	2300      	movs	r3, #0
 8005aee:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005af0:	2300      	movs	r3, #0
 8005af2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005af4:	2300      	movs	r3, #0
 8005af6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005af8:	2300      	movs	r3, #0
 8005afa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005afc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005b00:	2200      	movs	r2, #0
 8005b02:	4619      	mov	r1, r3
 8005b04:	4820      	ldr	r0, [pc, #128]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005b06:	f004 fda1 	bl	800a64c <HAL_TIM_PWM_ConfigChannel>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <MX_TIM8_Init+0x100>
  {
    Error_Handler();
 8005b10:	f7fe ffda 	bl	8004ac8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005b14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005b18:	2204      	movs	r2, #4
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	481a      	ldr	r0, [pc, #104]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005b1e:	f004 fd95 	bl	800a64c <HAL_TIM_PWM_ConfigChannel>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <MX_TIM8_Init+0x118>
  {
    Error_Handler();
 8005b28:	f7fe ffce 	bl	8004ac8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005b40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005b44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005b52:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005b64:	1d3b      	adds	r3, r7, #4
 8005b66:	4619      	mov	r1, r3
 8005b68:	4807      	ldr	r0, [pc, #28]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005b6a:	f005 feff 	bl	800b96c <HAL_TIMEx_ConfigBreakDeadTime>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <MX_TIM8_Init+0x164>
  {
    Error_Handler();
 8005b74:	f7fe ffa8 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8005b78:	4803      	ldr	r0, [pc, #12]	@ (8005b88 <MX_TIM8_Init+0x174>)
 8005b7a:	f000 f969 	bl	8005e50 <HAL_TIM_MspPostInit>

}
 8005b7e:	bf00      	nop
 8005b80:	3770      	adds	r7, #112	@ 0x70
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20001c40 	.word	0x20001c40
 8005b8c:	40013400 	.word	0x40013400

08005b90 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8005b94:	4b14      	ldr	r3, [pc, #80]	@ (8005be8 <MX_TIM16_Init+0x58>)
 8005b96:	4a15      	ldr	r2, [pc, #84]	@ (8005bec <MX_TIM16_Init+0x5c>)
 8005b98:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8005b9a:	4b13      	ldr	r3, [pc, #76]	@ (8005be8 <MX_TIM16_Init+0x58>)
 8005b9c:	22a9      	movs	r2, #169	@ 0xa9
 8005b9e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ba0:	4b11      	ldr	r3, [pc, #68]	@ (8005be8 <MX_TIM16_Init+0x58>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8005ba6:	4b10      	ldr	r3, [pc, #64]	@ (8005be8 <MX_TIM16_Init+0x58>)
 8005ba8:	f240 4279 	movw	r2, #1145	@ 0x479
 8005bac:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bae:	4b0e      	ldr	r3, [pc, #56]	@ (8005be8 <MX_TIM16_Init+0x58>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8005be8 <MX_TIM16_Init+0x58>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bba:	4b0b      	ldr	r3, [pc, #44]	@ (8005be8 <MX_TIM16_Init+0x58>)
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005bc0:	4809      	ldr	r0, [pc, #36]	@ (8005be8 <MX_TIM16_Init+0x58>)
 8005bc2:	f003 fecf 	bl	8009964 <HAL_TIM_Base_Init>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005bcc:	f7fe ff7c 	bl	8004ac8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8005bd0:	2108      	movs	r1, #8
 8005bd2:	4805      	ldr	r0, [pc, #20]	@ (8005be8 <MX_TIM16_Init+0x58>)
 8005bd4:	f004 f988 	bl	8009ee8 <HAL_TIM_OnePulse_Init>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8005bde:	f7fe ff73 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005be2:	bf00      	nop
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20001d0c 	.word	0x20001d0c
 8005bec:	40014400 	.word	0x40014400

08005bf0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a0d      	ldr	r2, [pc, #52]	@ (8005c34 <HAL_TIM_PWM_MspInit+0x44>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d113      	bne.n	8005c2a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005c02:	4b0d      	ldr	r3, [pc, #52]	@ (8005c38 <HAL_TIM_PWM_MspInit+0x48>)
 8005c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c06:	4a0c      	ldr	r2, [pc, #48]	@ (8005c38 <HAL_TIM_PWM_MspInit+0x48>)
 8005c08:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005c0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8005c38 <HAL_TIM_PWM_MspInit+0x48>)
 8005c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	2019      	movs	r0, #25
 8005c20:	f002 f957 	bl	8007ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005c24:	2019      	movs	r0, #25
 8005c26:	f002 f96e 	bl	8007f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40012c00 	.word	0x40012c00
 8005c38:	40021000 	.word	0x40021000

08005c3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c4c:	d114      	bne.n	8005c78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c4e:	4b22      	ldr	r3, [pc, #136]	@ (8005cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8005c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c52:	4a21      	ldr	r2, [pc, #132]	@ (8005cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8005c54:	f043 0301 	orr.w	r3, r3, #1
 8005c58:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8005cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8005c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c5e:	f003 0301 	and.w	r3, r3, #1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005c66:	2200      	movs	r2, #0
 8005c68:	2100      	movs	r1, #0
 8005c6a:	201c      	movs	r0, #28
 8005c6c:	f002 f931 	bl	8007ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005c70:	201c      	movs	r0, #28
 8005c72:	f002 f948 	bl	8007f06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8005c76:	e02a      	b.n	8005cce <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM8)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a17      	ldr	r2, [pc, #92]	@ (8005cdc <HAL_TIM_Base_MspInit+0xa0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d10c      	bne.n	8005c9c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005c82:	4b15      	ldr	r3, [pc, #84]	@ (8005cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8005c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c86:	4a14      	ldr	r2, [pc, #80]	@ (8005cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8005c88:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005c8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8005c8e:	4b12      	ldr	r3, [pc, #72]	@ (8005cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8005c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	693b      	ldr	r3, [r7, #16]
}
 8005c9a:	e018      	b.n	8005cce <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM16)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8005ce0 <HAL_TIM_Base_MspInit+0xa4>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d113      	bne.n	8005cce <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8005ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005caa:	4a0b      	ldr	r2, [pc, #44]	@ (8005cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8005cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cb0:	6613      	str	r3, [r2, #96]	@ 0x60
 8005cb2:	4b09      	ldr	r3, [pc, #36]	@ (8005cd8 <HAL_TIM_Base_MspInit+0x9c>)
 8005cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	2019      	movs	r0, #25
 8005cc4:	f002 f905 	bl	8007ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005cc8:	2019      	movs	r0, #25
 8005cca:	f002 f91c 	bl	8007f06 <HAL_NVIC_EnableIRQ>
}
 8005cce:	bf00      	nop
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	40013400 	.word	0x40013400
 8005ce0:	40014400 	.word	0x40014400

08005ce4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08e      	sub	sp, #56	@ 0x38
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	601a      	str	r2, [r3, #0]
 8005cf4:	605a      	str	r2, [r3, #4]
 8005cf6:	609a      	str	r2, [r3, #8]
 8005cf8:	60da      	str	r2, [r3, #12]
 8005cfa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a4f      	ldr	r2, [pc, #316]	@ (8005e40 <HAL_TIM_Encoder_MspInit+0x15c>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d131      	bne.n	8005d6a <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d06:	4b4f      	ldr	r3, [pc, #316]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0a:	4a4e      	ldr	r2, [pc, #312]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d0c:	f043 0302 	orr.w	r3, r3, #2
 8005d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d12:	4b4c      	ldr	r3, [pc, #304]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d16:	f003 0302 	and.w	r3, r3, #2
 8005d1a:	623b      	str	r3, [r7, #32]
 8005d1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d1e:	4b49      	ldr	r3, [pc, #292]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d22:	4a48      	ldr	r2, [pc, #288]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d24:	f043 0301 	orr.w	r3, r3, #1
 8005d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d2a:	4b46      	ldr	r3, [pc, #280]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	61fb      	str	r3, [r7, #28]
 8005d34:	69fb      	ldr	r3, [r7, #28]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d36:	23c0      	movs	r3, #192	@ 0xc0
 8005d38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d3a:	2302      	movs	r3, #2
 8005d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d42:	2300      	movs	r3, #0
 8005d44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d46:	2302      	movs	r3, #2
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d4e:	4619      	mov	r1, r3
 8005d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005d54:	f002 fc24 	bl	80085a0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8005d58:	2200      	movs	r2, #0
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	201d      	movs	r0, #29
 8005d5e:	f002 f8b8 	bl	8007ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005d62:	201d      	movs	r0, #29
 8005d64:	f002 f8cf 	bl	8007f06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005d68:	e065      	b.n	8005e36 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM4)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a36      	ldr	r2, [pc, #216]	@ (8005e48 <HAL_TIM_Encoder_MspInit+0x164>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d132      	bne.n	8005dda <HAL_TIM_Encoder_MspInit+0xf6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005d74:	4b33      	ldr	r3, [pc, #204]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d78:	4a32      	ldr	r2, [pc, #200]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d7a:	f043 0304 	orr.w	r3, r3, #4
 8005d7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d80:	4b30      	ldr	r3, [pc, #192]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d84:	f003 0304 	and.w	r3, r3, #4
 8005d88:	61bb      	str	r3, [r7, #24]
 8005d8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d8c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d90:	4a2c      	ldr	r2, [pc, #176]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d92:	f043 0301 	orr.w	r3, r3, #1
 8005d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d98:	4b2a      	ldr	r3, [pc, #168]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005da4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005daa:	2302      	movs	r3, #2
 8005dac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005db2:	2300      	movs	r3, #0
 8005db4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8005db6:	230a      	movs	r3, #10
 8005db8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005dc4:	f002 fbec 	bl	80085a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2100      	movs	r1, #0
 8005dcc:	201e      	movs	r0, #30
 8005dce:	f002 f880 	bl	8007ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8005dd2:	201e      	movs	r0, #30
 8005dd4:	f002 f897 	bl	8007f06 <HAL_NVIC_EnableIRQ>
}
 8005dd8:	e02d      	b.n	8005e36 <HAL_TIM_Encoder_MspInit+0x152>
  else if(tim_encoderHandle->Instance==TIM5)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a1b      	ldr	r2, [pc, #108]	@ (8005e4c <HAL_TIM_Encoder_MspInit+0x168>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d128      	bne.n	8005e36 <HAL_TIM_Encoder_MspInit+0x152>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005de4:	4b17      	ldr	r3, [pc, #92]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005de8:	4a16      	ldr	r2, [pc, #88]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005dea:	f043 0308 	orr.w	r3, r3, #8
 8005dee:	6593      	str	r3, [r2, #88]	@ 0x58
 8005df0:	4b14      	ldr	r3, [pc, #80]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dfc:	4b11      	ldr	r3, [pc, #68]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e00:	4a10      	ldr	r2, [pc, #64]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005e02:	f043 0301 	orr.w	r3, r3, #1
 8005e06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e08:	4b0e      	ldr	r3, [pc, #56]	@ (8005e44 <HAL_TIM_Encoder_MspInit+0x160>)
 8005e0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	60fb      	str	r3, [r7, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e14:	2303      	movs	r3, #3
 8005e16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e18:	2302      	movs	r3, #2
 8005e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e20:	2300      	movs	r3, #0
 8005e22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005e24:	2302      	movs	r3, #2
 8005e26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005e32:	f002 fbb5 	bl	80085a0 <HAL_GPIO_Init>
}
 8005e36:	bf00      	nop
 8005e38:	3738      	adds	r7, #56	@ 0x38
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	40000400 	.word	0x40000400
 8005e44:	40021000 	.word	0x40021000
 8005e48:	40000800 	.word	0x40000800
 8005e4c:	40000c00 	.word	0x40000c00

08005e50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08a      	sub	sp, #40	@ 0x28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e58:	f107 0314 	add.w	r3, r7, #20
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	605a      	str	r2, [r3, #4]
 8005e62:	609a      	str	r2, [r3, #8]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a22      	ldr	r2, [pc, #136]	@ (8005ef8 <HAL_TIM_MspPostInit+0xa8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d11c      	bne.n	8005eac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e72:	4b22      	ldr	r3, [pc, #136]	@ (8005efc <HAL_TIM_MspPostInit+0xac>)
 8005e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e76:	4a21      	ldr	r2, [pc, #132]	@ (8005efc <HAL_TIM_MspPostInit+0xac>)
 8005e78:	f043 0304 	orr.w	r3, r3, #4
 8005e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8005efc <HAL_TIM_MspPostInit+0xac>)
 8005e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	613b      	str	r3, [r7, #16]
 8005e88:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005e8a:	2308      	movs	r3, #8
 8005e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e8e:	2302      	movs	r3, #2
 8005e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e92:	2300      	movs	r3, #0
 8005e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e96:	2300      	movs	r3, #0
 8005e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e9e:	f107 0314 	add.w	r3, r7, #20
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4816      	ldr	r0, [pc, #88]	@ (8005f00 <HAL_TIM_MspPostInit+0xb0>)
 8005ea6:	f002 fb7b 	bl	80085a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005eaa:	e020      	b.n	8005eee <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a14      	ldr	r2, [pc, #80]	@ (8005f04 <HAL_TIM_MspPostInit+0xb4>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d11b      	bne.n	8005eee <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005eb6:	4b11      	ldr	r3, [pc, #68]	@ (8005efc <HAL_TIM_MspPostInit+0xac>)
 8005eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eba:	4a10      	ldr	r2, [pc, #64]	@ (8005efc <HAL_TIM_MspPostInit+0xac>)
 8005ebc:	f043 0304 	orr.w	r3, r3, #4
 8005ec0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <HAL_TIM_MspPostInit+0xac>)
 8005ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec6:	f003 0304 	and.w	r3, r3, #4
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005ece:	23c0      	movs	r3, #192	@ 0xc0
 8005ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005eda:	2300      	movs	r3, #0
 8005edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8005ede:	2304      	movs	r3, #4
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ee2:	f107 0314 	add.w	r3, r7, #20
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	4805      	ldr	r0, [pc, #20]	@ (8005f00 <HAL_TIM_MspPostInit+0xb0>)
 8005eea:	f002 fb59 	bl	80085a0 <HAL_GPIO_Init>
}
 8005eee:	bf00      	nop
 8005ef0:	3728      	adds	r7, #40	@ 0x28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40012c00 	.word	0x40012c00
 8005efc:	40021000 	.word	0x40021000
 8005f00:	48000800 	.word	0x48000800
 8005f04:	40013400 	.word	0x40013400

08005f08 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8005f0c:	4b20      	ldr	r3, [pc, #128]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f0e:	4a21      	ldr	r2, [pc, #132]	@ (8005f94 <MX_LPUART1_UART_Init+0x8c>)
 8005f10:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 2000000;
 8005f12:	4b1f      	ldr	r3, [pc, #124]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f14:	4a20      	ldr	r2, [pc, #128]	@ (8005f98 <MX_LPUART1_UART_Init+0x90>)
 8005f16:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005f18:	4b1d      	ldr	r3, [pc, #116]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8005f1e:	4b1c      	ldr	r3, [pc, #112]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f20:	2200      	movs	r2, #0
 8005f22:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8005f24:	4b1a      	ldr	r3, [pc, #104]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8005f2a:	4b19      	ldr	r3, [pc, #100]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f2c:	220c      	movs	r2, #12
 8005f2e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f30:	4b17      	ldr	r3, [pc, #92]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f36:	4b16      	ldr	r3, [pc, #88]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f38:	2200      	movs	r2, #0
 8005f3a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005f3c:	4b14      	ldr	r3, [pc, #80]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f42:	4b13      	ldr	r3, [pc, #76]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8005f48:	4811      	ldr	r0, [pc, #68]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f4a:	f005 fdf3 	bl	800bb34 <HAL_UART_Init>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8005f54:	f7fe fdb8 	bl	8004ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f58:	2100      	movs	r1, #0
 8005f5a:	480d      	ldr	r0, [pc, #52]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f5c:	f007 fb50 	bl	800d600 <HAL_UARTEx_SetTxFifoThreshold>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d001      	beq.n	8005f6a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8005f66:	f7fe fdaf 	bl	8004ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	4808      	ldr	r0, [pc, #32]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f6e:	f007 fb85 	bl	800d67c <HAL_UARTEx_SetRxFifoThreshold>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8005f78:	f7fe fda6 	bl	8004ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8005f7c:	4804      	ldr	r0, [pc, #16]	@ (8005f90 <MX_LPUART1_UART_Init+0x88>)
 8005f7e:	f007 fb06 	bl	800d58e <HAL_UARTEx_DisableFifoMode>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8005f88:	f7fe fd9e 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8005f8c:	bf00      	nop
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	20001dd8 	.word	0x20001dd8
 8005f94:	40008000 	.word	0x40008000
 8005f98:	001e8480 	.word	0x001e8480

08005f9c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005fa0:	4b23      	ldr	r3, [pc, #140]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fa2:	4a24      	ldr	r2, [pc, #144]	@ (8006034 <MX_USART2_UART_Init+0x98>)
 8005fa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8005fa6:	4b22      	ldr	r3, [pc, #136]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fa8:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8005fac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8005fae:	4b20      	ldr	r3, [pc, #128]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fb0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005fb4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005fb6:	4b1e      	ldr	r3, [pc, #120]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8005fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fbe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005fc4:	4b1a      	ldr	r3, [pc, #104]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fc6:	220c      	movs	r2, #12
 8005fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005fca:	4b19      	ldr	r3, [pc, #100]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fd0:	4b17      	ldr	r3, [pc, #92]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005fd6:	4b16      	ldr	r3, [pc, #88]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005fdc:	4b14      	ldr	r3, [pc, #80]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fde:	2200      	movs	r2, #0
 8005fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005fe2:	4b13      	ldr	r3, [pc, #76]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005fe8:	4811      	ldr	r0, [pc, #68]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005fea:	f005 fda3 	bl	800bb34 <HAL_UART_Init>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8005ff4:	f7fe fd68 	bl	8004ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005ff8:	2100      	movs	r1, #0
 8005ffa:	480d      	ldr	r0, [pc, #52]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 8005ffc:	f007 fb00 	bl	800d600 <HAL_UARTEx_SetTxFifoThreshold>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8006006:	f7fe fd5f 	bl	8004ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800600a:	2100      	movs	r1, #0
 800600c:	4808      	ldr	r0, [pc, #32]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 800600e:	f007 fb35 	bl	800d67c <HAL_UARTEx_SetRxFifoThreshold>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8006018:	f7fe fd56 	bl	8004ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800601c:	4804      	ldr	r0, [pc, #16]	@ (8006030 <MX_USART2_UART_Init+0x94>)
 800601e:	f007 fab6 	bl	800d58e <HAL_UARTEx_DisableFifoMode>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d001      	beq.n	800602c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8006028:	f7fe fd4e 	bl	8004ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800602c:	bf00      	nop
 800602e:	bd80      	pop	{r7, pc}
 8006030:	20001ea4 	.word	0x20001ea4
 8006034:	40004400 	.word	0x40004400

08006038 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b0a0      	sub	sp, #128	@ 0x80
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006040:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	609a      	str	r2, [r3, #8]
 800604c:	60da      	str	r2, [r3, #12]
 800604e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006050:	f107 0318 	add.w	r3, r7, #24
 8006054:	2254      	movs	r2, #84	@ 0x54
 8006056:	2100      	movs	r1, #0
 8006058:	4618      	mov	r0, r3
 800605a:	f008 f947 	bl	800e2ec <memset>
  if(uartHandle->Instance==LPUART1)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a99      	ldr	r2, [pc, #612]	@ (80062c8 <HAL_UART_MspInit+0x290>)
 8006064:	4293      	cmp	r3, r2
 8006066:	f040 8093 	bne.w	8006190 <HAL_UART_MspInit+0x158>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800606a:	2320      	movs	r3, #32
 800606c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800606e:	2300      	movs	r3, #0
 8006070:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006072:	f107 0318 	add.w	r3, r7, #24
 8006076:	4618      	mov	r0, r3
 8006078:	f003 fa26 	bl	80094c8 <HAL_RCCEx_PeriphCLKConfig>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006082:	f7fe fd21 	bl	8004ac8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006086:	4b91      	ldr	r3, [pc, #580]	@ (80062cc <HAL_UART_MspInit+0x294>)
 8006088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800608a:	4a90      	ldr	r2, [pc, #576]	@ (80062cc <HAL_UART_MspInit+0x294>)
 800608c:	f043 0301 	orr.w	r3, r3, #1
 8006090:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8006092:	4b8e      	ldr	r3, [pc, #568]	@ (80062cc <HAL_UART_MspInit+0x294>)
 8006094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800609e:	4b8b      	ldr	r3, [pc, #556]	@ (80062cc <HAL_UART_MspInit+0x294>)
 80060a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060a2:	4a8a      	ldr	r2, [pc, #552]	@ (80062cc <HAL_UART_MspInit+0x294>)
 80060a4:	f043 0302 	orr.w	r3, r3, #2
 80060a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80060aa:	4b88      	ldr	r3, [pc, #544]	@ (80062cc <HAL_UART_MspInit+0x294>)
 80060ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	613b      	str	r3, [r7, #16]
 80060b4:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80060b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80060ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060bc:	2302      	movs	r3, #2
 80060be:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060c4:	2300      	movs	r3, #0
 80060c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80060c8:	2308      	movs	r3, #8
 80060ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80060d0:	4619      	mov	r1, r3
 80060d2:	487f      	ldr	r0, [pc, #508]	@ (80062d0 <HAL_UART_MspInit+0x298>)
 80060d4:	f002 fa64 	bl	80085a0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel4;
 80060d8:	4b7e      	ldr	r3, [pc, #504]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 80060da:	4a7f      	ldr	r2, [pc, #508]	@ (80062d8 <HAL_UART_MspInit+0x2a0>)
 80060dc:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80060de:	4b7d      	ldr	r3, [pc, #500]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 80060e0:	2222      	movs	r2, #34	@ 0x22
 80060e2:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80060e4:	4b7b      	ldr	r3, [pc, #492]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80060ea:	4b7a      	ldr	r3, [pc, #488]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80060f0:	4b78      	ldr	r3, [pc, #480]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 80060f2:	2280      	movs	r2, #128	@ 0x80
 80060f4:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80060f6:	4b77      	ldr	r3, [pc, #476]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80060fc:	4b75      	ldr	r3, [pc, #468]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 80060fe:	2200      	movs	r2, #0
 8006100:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8006102:	4b74      	ldr	r3, [pc, #464]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 8006104:	2200      	movs	r2, #0
 8006106:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006108:	4b72      	ldr	r3, [pc, #456]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 800610a:	2200      	movs	r2, #0
 800610c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 800610e:	4871      	ldr	r0, [pc, #452]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 8006110:	f001 ff14 	bl	8007f3c <HAL_DMA_Init>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800611a:	f7fe fcd5 	bl	8004ac8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a6c      	ldr	r2, [pc, #432]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 8006122:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006126:	4a6b      	ldr	r2, [pc, #428]	@ (80062d4 <HAL_UART_MspInit+0x29c>)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel5;
 800612c:	4b6b      	ldr	r3, [pc, #428]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 800612e:	4a6c      	ldr	r2, [pc, #432]	@ (80062e0 <HAL_UART_MspInit+0x2a8>)
 8006130:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8006132:	4b6a      	ldr	r3, [pc, #424]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 8006134:	2223      	movs	r2, #35	@ 0x23
 8006136:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006138:	4b68      	ldr	r3, [pc, #416]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 800613a:	2210      	movs	r2, #16
 800613c:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800613e:	4b67      	ldr	r3, [pc, #412]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 8006140:	2200      	movs	r2, #0
 8006142:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006144:	4b65      	ldr	r3, [pc, #404]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 8006146:	2280      	movs	r2, #128	@ 0x80
 8006148:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800614a:	4b64      	ldr	r3, [pc, #400]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 800614c:	2200      	movs	r2, #0
 800614e:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006150:	4b62      	ldr	r3, [pc, #392]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 8006152:	2200      	movs	r2, #0
 8006154:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8006156:	4b61      	ldr	r3, [pc, #388]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 8006158:	2200      	movs	r2, #0
 800615a:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800615c:	4b5f      	ldr	r3, [pc, #380]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 800615e:	2200      	movs	r2, #0
 8006160:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8006162:	485e      	ldr	r0, [pc, #376]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 8006164:	f001 feea 	bl	8007f3c <HAL_DMA_Init>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 800616e:	f7fe fcab 	bl	8004ac8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a59      	ldr	r2, [pc, #356]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 8006176:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006178:	4a58      	ldr	r2, [pc, #352]	@ (80062dc <HAL_UART_MspInit+0x2a4>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800617e:	2200      	movs	r2, #0
 8006180:	2100      	movs	r1, #0
 8006182:	205b      	movs	r0, #91	@ 0x5b
 8006184:	f001 fea5 	bl	8007ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8006188:	205b      	movs	r0, #91	@ 0x5b
 800618a:	f001 febc 	bl	8007f06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800618e:	e097      	b.n	80062c0 <HAL_UART_MspInit+0x288>
  else if(uartHandle->Instance==USART2)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a53      	ldr	r2, [pc, #332]	@ (80062e4 <HAL_UART_MspInit+0x2ac>)
 8006196:	4293      	cmp	r3, r2
 8006198:	f040 8092 	bne.w	80062c0 <HAL_UART_MspInit+0x288>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800619c:	2302      	movs	r3, #2
 800619e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80061a0:	2300      	movs	r3, #0
 80061a2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80061a4:	f107 0318 	add.w	r3, r7, #24
 80061a8:	4618      	mov	r0, r3
 80061aa:	f003 f98d 	bl	80094c8 <HAL_RCCEx_PeriphCLKConfig>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <HAL_UART_MspInit+0x180>
      Error_Handler();
 80061b4:	f7fe fc88 	bl	8004ac8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80061b8:	4b44      	ldr	r3, [pc, #272]	@ (80062cc <HAL_UART_MspInit+0x294>)
 80061ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061bc:	4a43      	ldr	r2, [pc, #268]	@ (80062cc <HAL_UART_MspInit+0x294>)
 80061be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80061c4:	4b41      	ldr	r3, [pc, #260]	@ (80062cc <HAL_UART_MspInit+0x294>)
 80061c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061d0:	4b3e      	ldr	r3, [pc, #248]	@ (80062cc <HAL_UART_MspInit+0x294>)
 80061d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d4:	4a3d      	ldr	r2, [pc, #244]	@ (80062cc <HAL_UART_MspInit+0x294>)
 80061d6:	f043 0301 	orr.w	r3, r3, #1
 80061da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80061dc:	4b3b      	ldr	r3, [pc, #236]	@ (80062cc <HAL_UART_MspInit+0x294>)
 80061de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061e0:	f003 0301 	and.w	r3, r3, #1
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80061e8:	230c      	movs	r3, #12
 80061ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061ec:	2302      	movs	r3, #2
 80061ee:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061f4:	2300      	movs	r3, #0
 80061f6:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80061f8:	2307      	movs	r3, #7
 80061fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8006200:	4619      	mov	r1, r3
 8006202:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006206:	f002 f9cb 	bl	80085a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800620a:	4b37      	ldr	r3, [pc, #220]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 800620c:	4a37      	ldr	r2, [pc, #220]	@ (80062ec <HAL_UART_MspInit+0x2b4>)
 800620e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8006210:	4b35      	ldr	r3, [pc, #212]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 8006212:	221a      	movs	r2, #26
 8006214:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006216:	4b34      	ldr	r3, [pc, #208]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 8006218:	2200      	movs	r2, #0
 800621a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800621c:	4b32      	ldr	r3, [pc, #200]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 800621e:	2200      	movs	r2, #0
 8006220:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006222:	4b31      	ldr	r3, [pc, #196]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 8006224:	2280      	movs	r2, #128	@ 0x80
 8006226:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006228:	4b2f      	ldr	r3, [pc, #188]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 800622a:	2200      	movs	r2, #0
 800622c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800622e:	4b2e      	ldr	r3, [pc, #184]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 8006230:	2200      	movs	r2, #0
 8006232:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8006234:	4b2c      	ldr	r3, [pc, #176]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 8006236:	2200      	movs	r2, #0
 8006238:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800623a:	4b2b      	ldr	r3, [pc, #172]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 800623c:	2200      	movs	r2, #0
 800623e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8006240:	4829      	ldr	r0, [pc, #164]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 8006242:	f001 fe7b 	bl	8007f3c <HAL_DMA_Init>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_UART_MspInit+0x218>
      Error_Handler();
 800624c:	f7fe fc3c 	bl	8004ac8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a25      	ldr	r2, [pc, #148]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 8006254:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006258:	4a23      	ldr	r2, [pc, #140]	@ (80062e8 <HAL_UART_MspInit+0x2b0>)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart2_tx.Instance = DMA1_Channel3;
 800625e:	4b24      	ldr	r3, [pc, #144]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 8006260:	4a24      	ldr	r2, [pc, #144]	@ (80062f4 <HAL_UART_MspInit+0x2bc>)
 8006262:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8006264:	4b22      	ldr	r3, [pc, #136]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 8006266:	221b      	movs	r2, #27
 8006268:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800626a:	4b21      	ldr	r3, [pc, #132]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 800626c:	2210      	movs	r2, #16
 800626e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006270:	4b1f      	ldr	r3, [pc, #124]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 8006272:	2200      	movs	r2, #0
 8006274:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006276:	4b1e      	ldr	r3, [pc, #120]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 8006278:	2280      	movs	r2, #128	@ 0x80
 800627a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800627c:	4b1c      	ldr	r3, [pc, #112]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 800627e:	2200      	movs	r2, #0
 8006280:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006282:	4b1b      	ldr	r3, [pc, #108]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 8006284:	2200      	movs	r2, #0
 8006286:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8006288:	4b19      	ldr	r3, [pc, #100]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 800628a:	2200      	movs	r2, #0
 800628c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800628e:	4b18      	ldr	r3, [pc, #96]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 8006290:	2200      	movs	r2, #0
 8006292:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8006294:	4816      	ldr	r0, [pc, #88]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 8006296:	f001 fe51 	bl	8007f3c <HAL_DMA_Init>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <HAL_UART_MspInit+0x26c>
      Error_Handler();
 80062a0:	f7fe fc12 	bl	8004ac8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a12      	ldr	r2, [pc, #72]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 80062a8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80062aa:	4a11      	ldr	r2, [pc, #68]	@ (80062f0 <HAL_UART_MspInit+0x2b8>)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80062b0:	2200      	movs	r2, #0
 80062b2:	2100      	movs	r1, #0
 80062b4:	2026      	movs	r0, #38	@ 0x26
 80062b6:	f001 fe0c 	bl	8007ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80062ba:	2026      	movs	r0, #38	@ 0x26
 80062bc:	f001 fe23 	bl	8007f06 <HAL_NVIC_EnableIRQ>
}
 80062c0:	bf00      	nop
 80062c2:	3780      	adds	r7, #128	@ 0x80
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40008000 	.word	0x40008000
 80062cc:	40021000 	.word	0x40021000
 80062d0:	48000400 	.word	0x48000400
 80062d4:	20001f70 	.word	0x20001f70
 80062d8:	40020044 	.word	0x40020044
 80062dc:	20001fd0 	.word	0x20001fd0
 80062e0:	40020058 	.word	0x40020058
 80062e4:	40004400 	.word	0x40004400
 80062e8:	20002030 	.word	0x20002030
 80062ec:	4002001c 	.word	0x4002001c
 80062f0:	20002090 	.word	0x20002090
 80062f4:	40020030 	.word	0x40020030

080062f8 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 80062f8:	480d      	ldr	r0, [pc, #52]	@ (8006330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80062fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/

    bl  SystemInit
 80062fc:	f7ff f994 	bl	8005628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006300:	480c      	ldr	r0, [pc, #48]	@ (8006334 <LoopForever+0x6>)
  ldr r1, =_edata
 8006302:	490d      	ldr	r1, [pc, #52]	@ (8006338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006304:	4a0d      	ldr	r2, [pc, #52]	@ (800633c <LoopForever+0xe>)
  movs r3, #0
 8006306:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006308:	e002      	b.n	8006310 <LoopCopyDataInit>

0800630a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800630a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800630c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800630e:	3304      	adds	r3, #4

08006310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006314:	d3f9      	bcc.n	800630a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006316:	4a0a      	ldr	r2, [pc, #40]	@ (8006340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006318:	4c0a      	ldr	r4, [pc, #40]	@ (8006344 <LoopForever+0x16>)
  movs r3, #0
 800631a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800631c:	e001      	b.n	8006322 <LoopFillZerobss>

0800631e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800631e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006320:	3204      	adds	r2, #4

08006322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006324:	d3fb      	bcc.n	800631e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006326:	f007 ffff 	bl	800e328 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800632a:	f7fd feff 	bl	800412c <main>

0800632e <LoopForever>:

LoopForever:
    b LoopForever
 800632e:	e7fe      	b.n	800632e <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8006330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006338:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800633c:	080106a0 	.word	0x080106a0
  ldr r2, =_sbss
 8006340:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8006344:	2000223c 	.word	0x2000223c

08006348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006348:	e7fe      	b.n	8006348 <ADC1_2_IRQHandler>

0800634a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b082      	sub	sp, #8
 800634e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006350:	2300      	movs	r3, #0
 8006352:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006354:	2003      	movs	r0, #3
 8006356:	f001 fdb1 	bl	8007ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800635a:	2000      	movs	r0, #0
 800635c:	f000 f80e 	bl	800637c <HAL_InitTick>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	71fb      	strb	r3, [r7, #7]
 800636a:	e001      	b.n	8006370 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800636c:	f7ff f834 	bl	80053d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006370:	79fb      	ldrb	r3, [r7, #7]

}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006388:	4b16      	ldr	r3, [pc, #88]	@ (80063e4 <HAL_InitTick+0x68>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d022      	beq.n	80063d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006390:	4b15      	ldr	r3, [pc, #84]	@ (80063e8 <HAL_InitTick+0x6c>)
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	4b13      	ldr	r3, [pc, #76]	@ (80063e4 <HAL_InitTick+0x68>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800639c:	fbb1 f3f3 	udiv	r3, r1, r3
 80063a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 fdbc 	bl	8007f22 <HAL_SYSTICK_Config>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10f      	bne.n	80063d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	d809      	bhi.n	80063ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063b6:	2200      	movs	r2, #0
 80063b8:	6879      	ldr	r1, [r7, #4]
 80063ba:	f04f 30ff 	mov.w	r0, #4294967295
 80063be:	f001 fd88 	bl	8007ed2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80063c2:	4a0a      	ldr	r2, [pc, #40]	@ (80063ec <HAL_InitTick+0x70>)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6013      	str	r3, [r2, #0]
 80063c8:	e007      	b.n	80063da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	73fb      	strb	r3, [r7, #15]
 80063ce:	e004      	b.n	80063da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
 80063d4:	e001      	b.n	80063da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}
 80063e4:	2000013c 	.word	0x2000013c
 80063e8:	20000134 	.word	0x20000134
 80063ec:	20000138 	.word	0x20000138

080063f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80063f4:	4b05      	ldr	r3, [pc, #20]	@ (800640c <HAL_IncTick+0x1c>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b05      	ldr	r3, [pc, #20]	@ (8006410 <HAL_IncTick+0x20>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4413      	add	r3, r2
 80063fe:	4a03      	ldr	r2, [pc, #12]	@ (800640c <HAL_IncTick+0x1c>)
 8006400:	6013      	str	r3, [r2, #0]
}
 8006402:	bf00      	nop
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	200020f0 	.word	0x200020f0
 8006410:	2000013c 	.word	0x2000013c

08006414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
  return uwTick;
 8006418:	4b03      	ldr	r3, [pc, #12]	@ (8006428 <HAL_GetTick+0x14>)
 800641a:	681b      	ldr	r3, [r3, #0]
}
 800641c:	4618      	mov	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	200020f0 	.word	0x200020f0

0800642c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	431a      	orrs	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	609a      	str	r2, [r3, #8]
}
 8006446:	bf00      	nop
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	431a      	orrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	609a      	str	r2, [r3, #8]
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	3360      	adds	r3, #96	@ 0x60
 80064a6:	461a      	mov	r2, r3
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4b08      	ldr	r3, [pc, #32]	@ (80064d8 <LL_ADC_SetOffset+0x44>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80064be:	683a      	ldr	r2, [r7, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80064cc:	bf00      	nop
 80064ce:	371c      	adds	r7, #28
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	03fff000 	.word	0x03fff000

080064dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3360      	adds	r3, #96	@ 0x60
 80064ea:	461a      	mov	r2, r3
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	3360      	adds	r3, #96	@ 0x60
 8006518:	461a      	mov	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	431a      	orrs	r2, r3
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006532:	bf00      	nop
 8006534:	371c      	adds	r7, #28
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800653e:	b480      	push	{r7}
 8006540:	b087      	sub	sp, #28
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3360      	adds	r3, #96	@ 0x60
 800654e:	461a      	mov	r2, r3
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	431a      	orrs	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8006568:	bf00      	nop
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3360      	adds	r3, #96	@ 0x60
 8006584:	461a      	mov	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4413      	add	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	431a      	orrs	r2, r3
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800659e:	bf00      	nop
 80065a0:	371c      	adds	r7, #28
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	615a      	str	r2, [r3, #20]
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr

080065d0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d101      	bne.n	80065e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b087      	sub	sp, #28
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	60f8      	str	r0, [r7, #12]
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3330      	adds	r3, #48	@ 0x30
 8006606:	461a      	mov	r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	0a1b      	lsrs	r3, r3, #8
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	f003 030c 	and.w	r3, r3, #12
 8006612:	4413      	add	r3, r2
 8006614:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	211f      	movs	r1, #31
 8006622:	fa01 f303 	lsl.w	r3, r1, r3
 8006626:	43db      	mvns	r3, r3
 8006628:	401a      	ands	r2, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	0e9b      	lsrs	r3, r3, #26
 800662e:	f003 011f 	and.w	r1, r3, #31
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	fa01 f303 	lsl.w	r3, r1, r3
 800663c:	431a      	orrs	r2, r3
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006642:	bf00      	nop
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800664e:	b480      	push	{r7}
 8006650:	b087      	sub	sp, #28
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3314      	adds	r3, #20
 800665e:	461a      	mov	r2, r3
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	0e5b      	lsrs	r3, r3, #25
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	f003 0304 	and.w	r3, r3, #4
 800666a:	4413      	add	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	0d1b      	lsrs	r3, r3, #20
 8006676:	f003 031f 	and.w	r3, r3, #31
 800667a:	2107      	movs	r1, #7
 800667c:	fa01 f303 	lsl.w	r3, r1, r3
 8006680:	43db      	mvns	r3, r3
 8006682:	401a      	ands	r2, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	0d1b      	lsrs	r3, r3, #20
 8006688:	f003 031f 	and.w	r3, r3, #31
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	fa01 f303 	lsl.w	r3, r1, r3
 8006692:	431a      	orrs	r2, r3
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006698:	bf00      	nop
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066bc:	43db      	mvns	r3, r3
 80066be:	401a      	ands	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f003 0318 	and.w	r3, r3, #24
 80066c6:	4908      	ldr	r1, [pc, #32]	@ (80066e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80066c8:	40d9      	lsrs	r1, r3
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	400b      	ands	r3, r1
 80066ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066d2:	431a      	orrs	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80066da:	bf00      	nop
 80066dc:	3714      	adds	r7, #20
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	0007ffff 	.word	0x0007ffff

080066ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f003 031f 	and.w	r3, r3, #31
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006718:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6093      	str	r3, [r2, #8]
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800673c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006740:	d101      	bne.n	8006746 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006742:	2301      	movs	r3, #1
 8006744:	e000      	b.n	8006748 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8006764:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006768:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006770:	bf00      	nop
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800678c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006790:	d101      	bne.n	8006796 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067b4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80067b8:	f043 0201 	orr.w	r2, r3, #1
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b083      	sub	sp, #12
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80067e0:	f043 0202 	orr.w	r2, r3, #2
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 0301 	and.w	r3, r3, #1
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <LL_ADC_IsEnabled+0x18>
 8006808:	2301      	movs	r3, #1
 800680a:	e000      	b.n	800680e <LL_ADC_IsEnabled+0x1a>
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr

0800681a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b02      	cmp	r3, #2
 800682c:	d101      	bne.n	8006832 <LL_ADC_IsDisableOngoing+0x18>
 800682e:	2301      	movs	r3, #1
 8006830:	e000      	b.n	8006834 <LL_ADC_IsDisableOngoing+0x1a>
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006840:	b480      	push	{r7}
 8006842:	b083      	sub	sp, #12
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006850:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006854:	f043 0204 	orr.w	r2, r3, #4
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b04      	cmp	r3, #4
 800687a:	d101      	bne.n	8006880 <LL_ADC_REG_IsConversionOngoing+0x18>
 800687c:	2301      	movs	r3, #1
 800687e:	e000      	b.n	8006882 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b08      	cmp	r3, #8
 80068a0:	d101      	bne.n	80068a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80068a2:	2301      	movs	r3, #1
 80068a4:	e000      	b.n	80068a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80068b4:	b590      	push	{r4, r7, lr}
 80068b6:	b089      	sub	sp, #36	@ 0x24
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e1a9      	b.n	8006c22 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d109      	bne.n	80068f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fc ff55 	bl	800378c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7ff ff19 	bl	800672c <LL_ADC_IsDeepPowerDownEnabled>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d004      	beq.n	800690a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4618      	mov	r0, r3
 8006906:	f7ff feff 	bl	8006708 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff ff34 	bl	800677c <LL_ADC_IsInternalRegulatorEnabled>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d115      	bne.n	8006946 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f7ff ff18 	bl	8006754 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006924:	4b9c      	ldr	r3, [pc, #624]	@ (8006b98 <HAL_ADC_Init+0x2e4>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	099b      	lsrs	r3, r3, #6
 800692a:	4a9c      	ldr	r2, [pc, #624]	@ (8006b9c <HAL_ADC_Init+0x2e8>)
 800692c:	fba2 2303 	umull	r2, r3, r2, r3
 8006930:	099b      	lsrs	r3, r3, #6
 8006932:	3301      	adds	r3, #1
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006938:	e002      	b.n	8006940 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3b01      	subs	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1f9      	bne.n	800693a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff ff16 	bl	800677c <LL_ADC_IsInternalRegulatorEnabled>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10d      	bne.n	8006972 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800695a:	f043 0210 	orr.w	r2, r3, #16
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006966:	f043 0201 	orr.w	r2, r3, #1
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff ff76 	bl	8006868 <LL_ADC_REG_IsConversionOngoing>
 800697c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b00      	cmp	r3, #0
 8006988:	f040 8142 	bne.w	8006c10 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f040 813e 	bne.w	8006c10 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006998:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800699c:	f043 0202 	orr.w	r2, r3, #2
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f7ff ff23 	bl	80067f4 <LL_ADC_IsEnabled>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d141      	bne.n	8006a38 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069bc:	d004      	beq.n	80069c8 <HAL_ADC_Init+0x114>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a77      	ldr	r2, [pc, #476]	@ (8006ba0 <HAL_ADC_Init+0x2ec>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d10f      	bne.n	80069e8 <HAL_ADC_Init+0x134>
 80069c8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80069cc:	f7ff ff12 	bl	80067f4 <LL_ADC_IsEnabled>
 80069d0:	4604      	mov	r4, r0
 80069d2:	4873      	ldr	r0, [pc, #460]	@ (8006ba0 <HAL_ADC_Init+0x2ec>)
 80069d4:	f7ff ff0e 	bl	80067f4 <LL_ADC_IsEnabled>
 80069d8:	4603      	mov	r3, r0
 80069da:	4323      	orrs	r3, r4
 80069dc:	2b00      	cmp	r3, #0
 80069de:	bf0c      	ite	eq
 80069e0:	2301      	moveq	r3, #1
 80069e2:	2300      	movne	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	e012      	b.n	8006a0e <HAL_ADC_Init+0x15a>
 80069e8:	486e      	ldr	r0, [pc, #440]	@ (8006ba4 <HAL_ADC_Init+0x2f0>)
 80069ea:	f7ff ff03 	bl	80067f4 <LL_ADC_IsEnabled>
 80069ee:	4604      	mov	r4, r0
 80069f0:	486d      	ldr	r0, [pc, #436]	@ (8006ba8 <HAL_ADC_Init+0x2f4>)
 80069f2:	f7ff feff 	bl	80067f4 <LL_ADC_IsEnabled>
 80069f6:	4603      	mov	r3, r0
 80069f8:	431c      	orrs	r4, r3
 80069fa:	486c      	ldr	r0, [pc, #432]	@ (8006bac <HAL_ADC_Init+0x2f8>)
 80069fc:	f7ff fefa 	bl	80067f4 <LL_ADC_IsEnabled>
 8006a00:	4603      	mov	r3, r0
 8006a02:	4323      	orrs	r3, r4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	bf0c      	ite	eq
 8006a08:	2301      	moveq	r3, #1
 8006a0a:	2300      	movne	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d012      	beq.n	8006a38 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a1a:	d004      	beq.n	8006a26 <HAL_ADC_Init+0x172>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a5f      	ldr	r2, [pc, #380]	@ (8006ba0 <HAL_ADC_Init+0x2ec>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d101      	bne.n	8006a2a <HAL_ADC_Init+0x176>
 8006a26:	4a62      	ldr	r2, [pc, #392]	@ (8006bb0 <HAL_ADC_Init+0x2fc>)
 8006a28:	e000      	b.n	8006a2c <HAL_ADC_Init+0x178>
 8006a2a:	4a62      	ldr	r2, [pc, #392]	@ (8006bb4 <HAL_ADC_Init+0x300>)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	4619      	mov	r1, r3
 8006a32:	4610      	mov	r0, r2
 8006a34:	f7ff fcfa 	bl	800642c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	7f5b      	ldrb	r3, [r3, #29]
 8006a3c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006a42:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8006a48:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8006a4e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a56:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d106      	bne.n	8006a74 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	045b      	lsls	r3, r3, #17
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a80:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a88:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	4b48      	ldr	r3, [pc, #288]	@ (8006bb8 <HAL_ADC_Init+0x304>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6812      	ldr	r2, [r2, #0]
 8006a9e:	69b9      	ldr	r1, [r7, #24]
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7ff fee5 	bl	800688e <LL_ADC_INJ_IsConversionOngoing>
 8006ac4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d17f      	bne.n	8006bcc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d17c      	bne.n	8006bcc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006ad6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ade:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aee:	f023 0302 	bic.w	r3, r3, #2
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	69b9      	ldr	r1, [r7, #24]
 8006af8:	430b      	orrs	r3, r1
 8006afa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	691b      	ldr	r3, [r3, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d017      	beq.n	8006b34 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	691a      	ldr	r2, [r3, #16]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006b12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b1c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006b20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6911      	ldr	r1, [r2, #16]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	6812      	ldr	r2, [r2, #0]
 8006b2c:	430b      	orrs	r3, r1
 8006b2e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006b32:	e013      	b.n	8006b5c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006b42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006b54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006b58:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d12a      	bne.n	8006bbc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b70:	f023 0304 	bic.w	r3, r3, #4
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b7c:	4311      	orrs	r1, r2
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006b82:	4311      	orrs	r1, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f042 0201 	orr.w	r2, r2, #1
 8006b94:	611a      	str	r2, [r3, #16]
 8006b96:	e019      	b.n	8006bcc <HAL_ADC_Init+0x318>
 8006b98:	20000134 	.word	0x20000134
 8006b9c:	053e2d63 	.word	0x053e2d63
 8006ba0:	50000100 	.word	0x50000100
 8006ba4:	50000400 	.word	0x50000400
 8006ba8:	50000500 	.word	0x50000500
 8006bac:	50000600 	.word	0x50000600
 8006bb0:	50000300 	.word	0x50000300
 8006bb4:	50000700 	.word	0x50000700
 8006bb8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 0201 	bic.w	r2, r2, #1
 8006bca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	695b      	ldr	r3, [r3, #20]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d10c      	bne.n	8006bee <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bda:	f023 010f 	bic.w	r1, r3, #15
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	1e5a      	subs	r2, r3, #1
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	430a      	orrs	r2, r1
 8006bea:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bec:	e007      	b.n	8006bfe <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 020f 	bic.w	r2, r2, #15
 8006bfc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c02:	f023 0303 	bic.w	r3, r3, #3
 8006c06:	f043 0201 	orr.w	r2, r3, #1
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c0e:	e007      	b.n	8006c20 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c14:	f043 0210 	orr.w	r2, r3, #16
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006c20:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3724      	adds	r7, #36	@ 0x24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd90      	pop	{r4, r7, pc}
 8006c2a:	bf00      	nop

08006c2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c40:	d004      	beq.n	8006c4c <HAL_ADC_Start_DMA+0x20>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a5a      	ldr	r2, [pc, #360]	@ (8006db0 <HAL_ADC_Start_DMA+0x184>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d101      	bne.n	8006c50 <HAL_ADC_Start_DMA+0x24>
 8006c4c:	4b59      	ldr	r3, [pc, #356]	@ (8006db4 <HAL_ADC_Start_DMA+0x188>)
 8006c4e:	e000      	b.n	8006c52 <HAL_ADC_Start_DMA+0x26>
 8006c50:	4b59      	ldr	r3, [pc, #356]	@ (8006db8 <HAL_ADC_Start_DMA+0x18c>)
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7ff fd4a 	bl	80066ec <LL_ADC_GetMultimode>
 8006c58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7ff fe02 	bl	8006868 <LL_ADC_REG_IsConversionOngoing>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f040 809b 	bne.w	8006da2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d101      	bne.n	8006c7a <HAL_ADC_Start_DMA+0x4e>
 8006c76:	2302      	movs	r3, #2
 8006c78:	e096      	b.n	8006da8 <HAL_ADC_Start_DMA+0x17c>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a4d      	ldr	r2, [pc, #308]	@ (8006dbc <HAL_ADC_Start_DMA+0x190>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d008      	beq.n	8006c9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d005      	beq.n	8006c9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b05      	cmp	r3, #5
 8006c96:	d002      	beq.n	8006c9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	2b09      	cmp	r3, #9
 8006c9c:	d17a      	bne.n	8006d94 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f000 fcf6 	bl	8007690 <ADC_Enable>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006ca8:	7dfb      	ldrb	r3, [r7, #23]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d16d      	bne.n	8006d8a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cb2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a3a      	ldr	r2, [pc, #232]	@ (8006db0 <HAL_ADC_Start_DMA+0x184>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d009      	beq.n	8006ce0 <HAL_ADC_Start_DMA+0xb4>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a3b      	ldr	r2, [pc, #236]	@ (8006dc0 <HAL_ADC_Start_DMA+0x194>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d002      	beq.n	8006cdc <HAL_ADC_Start_DMA+0xb0>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	e003      	b.n	8006ce4 <HAL_ADC_Start_DMA+0xb8>
 8006cdc:	4b39      	ldr	r3, [pc, #228]	@ (8006dc4 <HAL_ADC_Start_DMA+0x198>)
 8006cde:	e001      	b.n	8006ce4 <HAL_ADC_Start_DMA+0xb8>
 8006ce0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	6812      	ldr	r2, [r2, #0]
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d002      	beq.n	8006cf2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d105      	bne.n	8006cfe <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cf6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d006      	beq.n	8006d18 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d0e:	f023 0206 	bic.w	r2, r3, #6
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	661a      	str	r2, [r3, #96]	@ 0x60
 8006d16:	e002      	b.n	8006d1e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d22:	4a29      	ldr	r2, [pc, #164]	@ (8006dc8 <HAL_ADC_Start_DMA+0x19c>)
 8006d24:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d2a:	4a28      	ldr	r2, [pc, #160]	@ (8006dcc <HAL_ADC_Start_DMA+0x1a0>)
 8006d2c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d32:	4a27      	ldr	r2, [pc, #156]	@ (8006dd0 <HAL_ADC_Start_DMA+0x1a4>)
 8006d34:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	221c      	movs	r2, #28
 8006d3c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f042 0210 	orr.w	r2, r2, #16
 8006d54:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	68da      	ldr	r2, [r3, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f042 0201 	orr.w	r2, r2, #1
 8006d64:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3340      	adds	r3, #64	@ 0x40
 8006d70:	4619      	mov	r1, r3
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f001 f989 	bl	800808c <HAL_DMA_Start_IT>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7ff fd5c 	bl	8006840 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006d88:	e00d      	b.n	8006da6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8006d92:	e008      	b.n	8006da6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006da0:	e001      	b.n	8006da6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006da2:	2302      	movs	r3, #2
 8006da4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	50000100 	.word	0x50000100
 8006db4:	50000300 	.word	0x50000300
 8006db8:	50000700 	.word	0x50000700
 8006dbc:	50000600 	.word	0x50000600
 8006dc0:	50000500 	.word	0x50000500
 8006dc4:	50000400 	.word	0x50000400
 8006dc8:	0800787b 	.word	0x0800787b
 8006dcc:	08007953 	.word	0x08007953
 8006dd0:	0800796f 	.word	0x0800796f

08006dd4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b0b6      	sub	sp, #216	@ 0xd8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d102      	bne.n	8006e34 <HAL_ADC_ConfigChannel+0x24>
 8006e2e:	2302      	movs	r3, #2
 8006e30:	f000 bc13 	b.w	800765a <HAL_ADC_ConfigChannel+0x84a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff fd11 	bl	8006868 <LL_ADC_REG_IsConversionOngoing>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f040 83f3 	bne.w	8007634 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6818      	ldr	r0, [r3, #0]
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	6859      	ldr	r1, [r3, #4]
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f7ff fbcb 	bl	80065f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7ff fcff 	bl	8006868 <LL_ADC_REG_IsConversionOngoing>
 8006e6a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7ff fd0b 	bl	800688e <LL_ADC_INJ_IsConversionOngoing>
 8006e78:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006e7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f040 81d9 	bne.w	8007238 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006e86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f040 81d4 	bne.w	8007238 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e98:	d10f      	bne.n	8006eba <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	f7ff fbd2 	bl	800664e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7ff fb79 	bl	80065aa <LL_ADC_SetSamplingTimeCommonConfig>
 8006eb8:	e00e      	b.n	8006ed8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6818      	ldr	r0, [r3, #0]
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6819      	ldr	r1, [r3, #0]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f7ff fbc1 	bl	800664e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7ff fb69 	bl	80065aa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	695a      	ldr	r2, [r3, #20]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	08db      	lsrs	r3, r3, #3
 8006ee4:	f003 0303 	and.w	r3, r3, #3
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	fa02 f303 	lsl.w	r3, r2, r3
 8006eee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d022      	beq.n	8006f40 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6818      	ldr	r0, [r3, #0]
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	6919      	ldr	r1, [r3, #16]
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f0a:	f7ff fac3 	bl	8006494 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	6919      	ldr	r1, [r3, #16]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f7ff fb0f 	bl	800653e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d102      	bne.n	8006f36 <HAL_ADC_ConfigChannel+0x126>
 8006f30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f34:	e000      	b.n	8006f38 <HAL_ADC_ConfigChannel+0x128>
 8006f36:	2300      	movs	r3, #0
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f7ff fb1b 	bl	8006574 <LL_ADC_SetOffsetSaturation>
 8006f3e:	e17b      	b.n	8007238 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7ff fac8 	bl	80064dc <LL_ADC_GetOffsetChannel>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10a      	bne.n	8006f6c <HAL_ADC_ConfigChannel+0x15c>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2100      	movs	r1, #0
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7ff fabd 	bl	80064dc <LL_ADC_GetOffsetChannel>
 8006f62:	4603      	mov	r3, r0
 8006f64:	0e9b      	lsrs	r3, r3, #26
 8006f66:	f003 021f 	and.w	r2, r3, #31
 8006f6a:	e01e      	b.n	8006faa <HAL_ADC_ConfigChannel+0x19a>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2100      	movs	r1, #0
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff fab2 	bl	80064dc <LL_ADC_GetOffsetChannel>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f7e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006f82:	fa93 f3a3 	rbit	r3, r3
 8006f86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006f8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006f9a:	2320      	movs	r3, #32
 8006f9c:	e004      	b.n	8006fa8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006fa2:	fab3 f383 	clz	r3, r3
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d105      	bne.n	8006fc2 <HAL_ADC_ConfigChannel+0x1b2>
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	0e9b      	lsrs	r3, r3, #26
 8006fbc:	f003 031f 	and.w	r3, r3, #31
 8006fc0:	e018      	b.n	8006ff4 <HAL_ADC_ConfigChannel+0x1e4>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006fce:	fa93 f3a3 	rbit	r3, r3
 8006fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fda:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006fde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006fe6:	2320      	movs	r3, #32
 8006fe8:	e004      	b.n	8006ff4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006fea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006fee:	fab3 f383 	clz	r3, r3
 8006ff2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d106      	bne.n	8007006 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2100      	movs	r1, #0
 8007000:	4618      	mov	r0, r3
 8007002:	f7ff fa81 	bl	8006508 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2101      	movs	r1, #1
 800700c:	4618      	mov	r0, r3
 800700e:	f7ff fa65 	bl	80064dc <LL_ADC_GetOffsetChannel>
 8007012:	4603      	mov	r3, r0
 8007014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10a      	bne.n	8007032 <HAL_ADC_ConfigChannel+0x222>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2101      	movs	r1, #1
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff fa5a 	bl	80064dc <LL_ADC_GetOffsetChannel>
 8007028:	4603      	mov	r3, r0
 800702a:	0e9b      	lsrs	r3, r3, #26
 800702c:	f003 021f 	and.w	r2, r3, #31
 8007030:	e01e      	b.n	8007070 <HAL_ADC_ConfigChannel+0x260>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2101      	movs	r1, #1
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff fa4f 	bl	80064dc <LL_ADC_GetOffsetChannel>
 800703e:	4603      	mov	r3, r0
 8007040:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007044:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007048:	fa93 f3a3 	rbit	r3, r3
 800704c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007050:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007054:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8007058:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800705c:	2b00      	cmp	r3, #0
 800705e:	d101      	bne.n	8007064 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007060:	2320      	movs	r3, #32
 8007062:	e004      	b.n	800706e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8007064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007068:	fab3 f383 	clz	r3, r3
 800706c:	b2db      	uxtb	r3, r3
 800706e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007078:	2b00      	cmp	r3, #0
 800707a:	d105      	bne.n	8007088 <HAL_ADC_ConfigChannel+0x278>
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	0e9b      	lsrs	r3, r3, #26
 8007082:	f003 031f 	and.w	r3, r3, #31
 8007086:	e018      	b.n	80070ba <HAL_ADC_ConfigChannel+0x2aa>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007090:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007094:	fa93 f3a3 	rbit	r3, r3
 8007098:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800709c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80070a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80070a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80070ac:	2320      	movs	r3, #32
 80070ae:	e004      	b.n	80070ba <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80070b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80070b4:	fab3 f383 	clz	r3, r3
 80070b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d106      	bne.n	80070cc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2200      	movs	r2, #0
 80070c4:	2101      	movs	r1, #1
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff fa1e 	bl	8006508 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2102      	movs	r1, #2
 80070d2:	4618      	mov	r0, r3
 80070d4:	f7ff fa02 	bl	80064dc <LL_ADC_GetOffsetChannel>
 80070d8:	4603      	mov	r3, r0
 80070da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <HAL_ADC_ConfigChannel+0x2e8>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2102      	movs	r1, #2
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7ff f9f7 	bl	80064dc <LL_ADC_GetOffsetChannel>
 80070ee:	4603      	mov	r3, r0
 80070f0:	0e9b      	lsrs	r3, r3, #26
 80070f2:	f003 021f 	and.w	r2, r3, #31
 80070f6:	e01e      	b.n	8007136 <HAL_ADC_ConfigChannel+0x326>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2102      	movs	r1, #2
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff f9ec 	bl	80064dc <LL_ADC_GetOffsetChannel>
 8007104:	4603      	mov	r3, r0
 8007106:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800710a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800710e:	fa93 f3a3 	rbit	r3, r3
 8007112:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8007116:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800711a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800711e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8007126:	2320      	movs	r3, #32
 8007128:	e004      	b.n	8007134 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800712a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800712e:	fab3 f383 	clz	r3, r3
 8007132:	b2db      	uxtb	r3, r3
 8007134:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800713e:	2b00      	cmp	r3, #0
 8007140:	d105      	bne.n	800714e <HAL_ADC_ConfigChannel+0x33e>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	0e9b      	lsrs	r3, r3, #26
 8007148:	f003 031f 	and.w	r3, r3, #31
 800714c:	e016      	b.n	800717c <HAL_ADC_ConfigChannel+0x36c>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007156:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800715a:	fa93 f3a3 	rbit	r3, r3
 800715e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007160:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007162:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8007166:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800716e:	2320      	movs	r3, #32
 8007170:	e004      	b.n	800717c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8007172:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007176:	fab3 f383 	clz	r3, r3
 800717a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800717c:	429a      	cmp	r2, r3
 800717e:	d106      	bne.n	800718e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2200      	movs	r2, #0
 8007186:	2102      	movs	r1, #2
 8007188:	4618      	mov	r0, r3
 800718a:	f7ff f9bd 	bl	8006508 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2103      	movs	r1, #3
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff f9a1 	bl	80064dc <LL_ADC_GetOffsetChannel>
 800719a:	4603      	mov	r3, r0
 800719c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10a      	bne.n	80071ba <HAL_ADC_ConfigChannel+0x3aa>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2103      	movs	r1, #3
 80071aa:	4618      	mov	r0, r3
 80071ac:	f7ff f996 	bl	80064dc <LL_ADC_GetOffsetChannel>
 80071b0:	4603      	mov	r3, r0
 80071b2:	0e9b      	lsrs	r3, r3, #26
 80071b4:	f003 021f 	and.w	r2, r3, #31
 80071b8:	e017      	b.n	80071ea <HAL_ADC_ConfigChannel+0x3da>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2103      	movs	r1, #3
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7ff f98b 	bl	80064dc <LL_ADC_GetOffsetChannel>
 80071c6:	4603      	mov	r3, r0
 80071c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071cc:	fa93 f3a3 	rbit	r3, r3
 80071d0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80071d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071d4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80071d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d101      	bne.n	80071e0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80071dc:	2320      	movs	r3, #32
 80071de:	e003      	b.n	80071e8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80071e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071e2:	fab3 f383 	clz	r3, r3
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d105      	bne.n	8007202 <HAL_ADC_ConfigChannel+0x3f2>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	0e9b      	lsrs	r3, r3, #26
 80071fc:	f003 031f 	and.w	r3, r3, #31
 8007200:	e011      	b.n	8007226 <HAL_ADC_ConfigChannel+0x416>
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007208:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800720a:	fa93 f3a3 	rbit	r3, r3
 800720e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007212:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800721a:	2320      	movs	r3, #32
 800721c:	e003      	b.n	8007226 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800721e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007220:	fab3 f383 	clz	r3, r3
 8007224:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8007226:	429a      	cmp	r2, r3
 8007228:	d106      	bne.n	8007238 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	2103      	movs	r1, #3
 8007232:	4618      	mov	r0, r3
 8007234:	f7ff f968 	bl	8006508 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fad9 	bl	80067f4 <LL_ADC_IsEnabled>
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	f040 813d 	bne.w	80074c4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	6819      	ldr	r1, [r3, #0]
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	461a      	mov	r2, r3
 8007258:	f7ff fa24 	bl	80066a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	4aa2      	ldr	r2, [pc, #648]	@ (80074ec <HAL_ADC_ConfigChannel+0x6dc>)
 8007262:	4293      	cmp	r3, r2
 8007264:	f040 812e 	bne.w	80074c4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10b      	bne.n	8007290 <HAL_ADC_ConfigChannel+0x480>
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	0e9b      	lsrs	r3, r3, #26
 800727e:	3301      	adds	r3, #1
 8007280:	f003 031f 	and.w	r3, r3, #31
 8007284:	2b09      	cmp	r3, #9
 8007286:	bf94      	ite	ls
 8007288:	2301      	movls	r3, #1
 800728a:	2300      	movhi	r3, #0
 800728c:	b2db      	uxtb	r3, r3
 800728e:	e019      	b.n	80072c4 <HAL_ADC_ConfigChannel+0x4b4>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007296:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007298:	fa93 f3a3 	rbit	r3, r3
 800729c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800729e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80072a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d101      	bne.n	80072ac <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80072a8:	2320      	movs	r3, #32
 80072aa:	e003      	b.n	80072b4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80072ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072ae:	fab3 f383 	clz	r3, r3
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	3301      	adds	r3, #1
 80072b6:	f003 031f 	and.w	r3, r3, #31
 80072ba:	2b09      	cmp	r3, #9
 80072bc:	bf94      	ite	ls
 80072be:	2301      	movls	r3, #1
 80072c0:	2300      	movhi	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d079      	beq.n	80073bc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d107      	bne.n	80072e4 <HAL_ADC_ConfigChannel+0x4d4>
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	0e9b      	lsrs	r3, r3, #26
 80072da:	3301      	adds	r3, #1
 80072dc:	069b      	lsls	r3, r3, #26
 80072de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80072e2:	e015      	b.n	8007310 <HAL_ADC_ConfigChannel+0x500>
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80072ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072ec:	fa93 f3a3 	rbit	r3, r3
 80072f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80072f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80072f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d101      	bne.n	8007300 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80072fc:	2320      	movs	r3, #32
 80072fe:	e003      	b.n	8007308 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007300:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007302:	fab3 f383 	clz	r3, r3
 8007306:	b2db      	uxtb	r3, r3
 8007308:	3301      	adds	r3, #1
 800730a:	069b      	lsls	r3, r3, #26
 800730c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007318:	2b00      	cmp	r3, #0
 800731a:	d109      	bne.n	8007330 <HAL_ADC_ConfigChannel+0x520>
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	0e9b      	lsrs	r3, r3, #26
 8007322:	3301      	adds	r3, #1
 8007324:	f003 031f 	and.w	r3, r3, #31
 8007328:	2101      	movs	r1, #1
 800732a:	fa01 f303 	lsl.w	r3, r1, r3
 800732e:	e017      	b.n	8007360 <HAL_ADC_ConfigChannel+0x550>
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007338:	fa93 f3a3 	rbit	r3, r3
 800733c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800733e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007340:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8007348:	2320      	movs	r3, #32
 800734a:	e003      	b.n	8007354 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800734c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800734e:	fab3 f383 	clz	r3, r3
 8007352:	b2db      	uxtb	r3, r3
 8007354:	3301      	adds	r3, #1
 8007356:	f003 031f 	and.w	r3, r3, #31
 800735a:	2101      	movs	r1, #1
 800735c:	fa01 f303 	lsl.w	r3, r1, r3
 8007360:	ea42 0103 	orr.w	r1, r2, r3
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800736c:	2b00      	cmp	r3, #0
 800736e:	d10a      	bne.n	8007386 <HAL_ADC_ConfigChannel+0x576>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	0e9b      	lsrs	r3, r3, #26
 8007376:	3301      	adds	r3, #1
 8007378:	f003 021f 	and.w	r2, r3, #31
 800737c:	4613      	mov	r3, r2
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	4413      	add	r3, r2
 8007382:	051b      	lsls	r3, r3, #20
 8007384:	e018      	b.n	80073b8 <HAL_ADC_ConfigChannel+0x5a8>
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800738c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800738e:	fa93 f3a3 	rbit	r3, r3
 8007392:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8007394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007396:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8007398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800739e:	2320      	movs	r3, #32
 80073a0:	e003      	b.n	80073aa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80073a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073a4:	fab3 f383 	clz	r3, r3
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	3301      	adds	r3, #1
 80073ac:	f003 021f 	and.w	r2, r3, #31
 80073b0:	4613      	mov	r3, r2
 80073b2:	005b      	lsls	r3, r3, #1
 80073b4:	4413      	add	r3, r2
 80073b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80073b8:	430b      	orrs	r3, r1
 80073ba:	e07e      	b.n	80074ba <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d107      	bne.n	80073d8 <HAL_ADC_ConfigChannel+0x5c8>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	0e9b      	lsrs	r3, r3, #26
 80073ce:	3301      	adds	r3, #1
 80073d0:	069b      	lsls	r3, r3, #26
 80073d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80073d6:	e015      	b.n	8007404 <HAL_ADC_ConfigChannel+0x5f4>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e0:	fa93 f3a3 	rbit	r3, r3
 80073e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80073e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073e8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80073ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d101      	bne.n	80073f4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80073f0:	2320      	movs	r3, #32
 80073f2:	e003      	b.n	80073fc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80073f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073f6:	fab3 f383 	clz	r3, r3
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	3301      	adds	r3, #1
 80073fe:	069b      	lsls	r3, r3, #26
 8007400:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800740c:	2b00      	cmp	r3, #0
 800740e:	d109      	bne.n	8007424 <HAL_ADC_ConfigChannel+0x614>
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	0e9b      	lsrs	r3, r3, #26
 8007416:	3301      	adds	r3, #1
 8007418:	f003 031f 	and.w	r3, r3, #31
 800741c:	2101      	movs	r1, #1
 800741e:	fa01 f303 	lsl.w	r3, r1, r3
 8007422:	e017      	b.n	8007454 <HAL_ADC_ConfigChannel+0x644>
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800742a:	6a3b      	ldr	r3, [r7, #32]
 800742c:	fa93 f3a3 	rbit	r3, r3
 8007430:	61fb      	str	r3, [r7, #28]
  return result;
 8007432:	69fb      	ldr	r3, [r7, #28]
 8007434:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800743c:	2320      	movs	r3, #32
 800743e:	e003      	b.n	8007448 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007442:	fab3 f383 	clz	r3, r3
 8007446:	b2db      	uxtb	r3, r3
 8007448:	3301      	adds	r3, #1
 800744a:	f003 031f 	and.w	r3, r3, #31
 800744e:	2101      	movs	r1, #1
 8007450:	fa01 f303 	lsl.w	r3, r1, r3
 8007454:	ea42 0103 	orr.w	r1, r2, r3
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007460:	2b00      	cmp	r3, #0
 8007462:	d10d      	bne.n	8007480 <HAL_ADC_ConfigChannel+0x670>
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	0e9b      	lsrs	r3, r3, #26
 800746a:	3301      	adds	r3, #1
 800746c:	f003 021f 	and.w	r2, r3, #31
 8007470:	4613      	mov	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	4413      	add	r3, r2
 8007476:	3b1e      	subs	r3, #30
 8007478:	051b      	lsls	r3, r3, #20
 800747a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800747e:	e01b      	b.n	80074b8 <HAL_ADC_ConfigChannel+0x6a8>
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	fa93 f3a3 	rbit	r3, r3
 800748c:	613b      	str	r3, [r7, #16]
  return result;
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d101      	bne.n	800749c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8007498:	2320      	movs	r3, #32
 800749a:	e003      	b.n	80074a4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	fab3 f383 	clz	r3, r3
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	3301      	adds	r3, #1
 80074a6:	f003 021f 	and.w	r2, r3, #31
 80074aa:	4613      	mov	r3, r2
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	4413      	add	r3, r2
 80074b0:	3b1e      	subs	r3, #30
 80074b2:	051b      	lsls	r3, r3, #20
 80074b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80074be:	4619      	mov	r1, r3
 80074c0:	f7ff f8c5 	bl	800664e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	4b09      	ldr	r3, [pc, #36]	@ (80074f0 <HAL_ADC_ConfigChannel+0x6e0>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 80be 	beq.w	800764e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80074da:	d004      	beq.n	80074e6 <HAL_ADC_ConfigChannel+0x6d6>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a04      	ldr	r2, [pc, #16]	@ (80074f4 <HAL_ADC_ConfigChannel+0x6e4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d10a      	bne.n	80074fc <HAL_ADC_ConfigChannel+0x6ec>
 80074e6:	4b04      	ldr	r3, [pc, #16]	@ (80074f8 <HAL_ADC_ConfigChannel+0x6e8>)
 80074e8:	e009      	b.n	80074fe <HAL_ADC_ConfigChannel+0x6ee>
 80074ea:	bf00      	nop
 80074ec:	407f0000 	.word	0x407f0000
 80074f0:	80080000 	.word	0x80080000
 80074f4:	50000100 	.word	0x50000100
 80074f8:	50000300 	.word	0x50000300
 80074fc:	4b59      	ldr	r3, [pc, #356]	@ (8007664 <HAL_ADC_ConfigChannel+0x854>)
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe ffba 	bl	8006478 <LL_ADC_GetCommonPathInternalCh>
 8007504:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a56      	ldr	r2, [pc, #344]	@ (8007668 <HAL_ADC_ConfigChannel+0x858>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d004      	beq.n	800751c <HAL_ADC_ConfigChannel+0x70c>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a55      	ldr	r2, [pc, #340]	@ (800766c <HAL_ADC_ConfigChannel+0x85c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d13a      	bne.n	8007592 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800751c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007520:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d134      	bne.n	8007592 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007530:	d005      	beq.n	800753e <HAL_ADC_ConfigChannel+0x72e>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a4e      	ldr	r2, [pc, #312]	@ (8007670 <HAL_ADC_ConfigChannel+0x860>)
 8007538:	4293      	cmp	r3, r2
 800753a:	f040 8085 	bne.w	8007648 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007546:	d004      	beq.n	8007552 <HAL_ADC_ConfigChannel+0x742>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a49      	ldr	r2, [pc, #292]	@ (8007674 <HAL_ADC_ConfigChannel+0x864>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d101      	bne.n	8007556 <HAL_ADC_ConfigChannel+0x746>
 8007552:	4a49      	ldr	r2, [pc, #292]	@ (8007678 <HAL_ADC_ConfigChannel+0x868>)
 8007554:	e000      	b.n	8007558 <HAL_ADC_ConfigChannel+0x748>
 8007556:	4a43      	ldr	r2, [pc, #268]	@ (8007664 <HAL_ADC_ConfigChannel+0x854>)
 8007558:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800755c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007560:	4619      	mov	r1, r3
 8007562:	4610      	mov	r0, r2
 8007564:	f7fe ff75 	bl	8006452 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007568:	4b44      	ldr	r3, [pc, #272]	@ (800767c <HAL_ADC_ConfigChannel+0x86c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	099b      	lsrs	r3, r3, #6
 800756e:	4a44      	ldr	r2, [pc, #272]	@ (8007680 <HAL_ADC_ConfigChannel+0x870>)
 8007570:	fba2 2303 	umull	r2, r3, r2, r3
 8007574:	099b      	lsrs	r3, r3, #6
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	4613      	mov	r3, r2
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	4413      	add	r3, r2
 800757e:	009b      	lsls	r3, r3, #2
 8007580:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007582:	e002      	b.n	800758a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	3b01      	subs	r3, #1
 8007588:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d1f9      	bne.n	8007584 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007590:	e05a      	b.n	8007648 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a3b      	ldr	r2, [pc, #236]	@ (8007684 <HAL_ADC_ConfigChannel+0x874>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d125      	bne.n	80075e8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800759c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d11f      	bne.n	80075e8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a31      	ldr	r2, [pc, #196]	@ (8007674 <HAL_ADC_ConfigChannel+0x864>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d104      	bne.n	80075bc <HAL_ADC_ConfigChannel+0x7ac>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a34      	ldr	r2, [pc, #208]	@ (8007688 <HAL_ADC_ConfigChannel+0x878>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d047      	beq.n	800764c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075c4:	d004      	beq.n	80075d0 <HAL_ADC_ConfigChannel+0x7c0>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007674 <HAL_ADC_ConfigChannel+0x864>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d101      	bne.n	80075d4 <HAL_ADC_ConfigChannel+0x7c4>
 80075d0:	4a29      	ldr	r2, [pc, #164]	@ (8007678 <HAL_ADC_ConfigChannel+0x868>)
 80075d2:	e000      	b.n	80075d6 <HAL_ADC_ConfigChannel+0x7c6>
 80075d4:	4a23      	ldr	r2, [pc, #140]	@ (8007664 <HAL_ADC_ConfigChannel+0x854>)
 80075d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075de:	4619      	mov	r1, r3
 80075e0:	4610      	mov	r0, r2
 80075e2:	f7fe ff36 	bl	8006452 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80075e6:	e031      	b.n	800764c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a27      	ldr	r2, [pc, #156]	@ (800768c <HAL_ADC_ConfigChannel+0x87c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d12d      	bne.n	800764e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80075f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80075f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d127      	bne.n	800764e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1c      	ldr	r2, [pc, #112]	@ (8007674 <HAL_ADC_ConfigChannel+0x864>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d022      	beq.n	800764e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007610:	d004      	beq.n	800761c <HAL_ADC_ConfigChannel+0x80c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a17      	ldr	r2, [pc, #92]	@ (8007674 <HAL_ADC_ConfigChannel+0x864>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d101      	bne.n	8007620 <HAL_ADC_ConfigChannel+0x810>
 800761c:	4a16      	ldr	r2, [pc, #88]	@ (8007678 <HAL_ADC_ConfigChannel+0x868>)
 800761e:	e000      	b.n	8007622 <HAL_ADC_ConfigChannel+0x812>
 8007620:	4a10      	ldr	r2, [pc, #64]	@ (8007664 <HAL_ADC_ConfigChannel+0x854>)
 8007622:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007626:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800762a:	4619      	mov	r1, r3
 800762c:	4610      	mov	r0, r2
 800762e:	f7fe ff10 	bl	8006452 <LL_ADC_SetCommonPathInternalCh>
 8007632:	e00c      	b.n	800764e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007638:	f043 0220 	orr.w	r2, r3, #32
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8007646:	e002      	b.n	800764e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007648:	bf00      	nop
 800764a:	e000      	b.n	800764e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800764c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007656:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800765a:	4618      	mov	r0, r3
 800765c:	37d8      	adds	r7, #216	@ 0xd8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	50000700 	.word	0x50000700
 8007668:	c3210000 	.word	0xc3210000
 800766c:	90c00010 	.word	0x90c00010
 8007670:	50000600 	.word	0x50000600
 8007674:	50000100 	.word	0x50000100
 8007678:	50000300 	.word	0x50000300
 800767c:	20000134 	.word	0x20000134
 8007680:	053e2d63 	.word	0x053e2d63
 8007684:	c7520000 	.word	0xc7520000
 8007688:	50000500 	.word	0x50000500
 800768c:	cb840000 	.word	0xcb840000

08007690 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007698:	2300      	movs	r3, #0
 800769a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f7ff f8a7 	bl	80067f4 <LL_ADC_IsEnabled>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d176      	bne.n	800779a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	4b3c      	ldr	r3, [pc, #240]	@ (80077a4 <ADC_Enable+0x114>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00d      	beq.n	80076d6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80076be:	f043 0210 	orr.w	r2, r3, #16
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80076ca:	f043 0201 	orr.w	r2, r3, #1
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e062      	b.n	800779c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff f862 	bl	80067a4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80076e8:	d004      	beq.n	80076f4 <ADC_Enable+0x64>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a2e      	ldr	r2, [pc, #184]	@ (80077a8 <ADC_Enable+0x118>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d101      	bne.n	80076f8 <ADC_Enable+0x68>
 80076f4:	4b2d      	ldr	r3, [pc, #180]	@ (80077ac <ADC_Enable+0x11c>)
 80076f6:	e000      	b.n	80076fa <ADC_Enable+0x6a>
 80076f8:	4b2d      	ldr	r3, [pc, #180]	@ (80077b0 <ADC_Enable+0x120>)
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7fe febc 	bl	8006478 <LL_ADC_GetCommonPathInternalCh>
 8007700:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007706:	2b00      	cmp	r3, #0
 8007708:	d013      	beq.n	8007732 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800770a:	4b2a      	ldr	r3, [pc, #168]	@ (80077b4 <ADC_Enable+0x124>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	099b      	lsrs	r3, r3, #6
 8007710:	4a29      	ldr	r2, [pc, #164]	@ (80077b8 <ADC_Enable+0x128>)
 8007712:	fba2 2303 	umull	r2, r3, r2, r3
 8007716:	099b      	lsrs	r3, r3, #6
 8007718:	1c5a      	adds	r2, r3, #1
 800771a:	4613      	mov	r3, r2
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	4413      	add	r3, r2
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007724:	e002      	b.n	800772c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	3b01      	subs	r3, #1
 800772a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1f9      	bne.n	8007726 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007732:	f7fe fe6f 	bl	8006414 <HAL_GetTick>
 8007736:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007738:	e028      	b.n	800778c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff f858 	bl	80067f4 <LL_ADC_IsEnabled>
 8007744:	4603      	mov	r3, r0
 8007746:	2b00      	cmp	r3, #0
 8007748:	d104      	bne.n	8007754 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4618      	mov	r0, r3
 8007750:	f7ff f828 	bl	80067a4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007754:	f7fe fe5e 	bl	8006414 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	2b02      	cmp	r3, #2
 8007760:	d914      	bls.n	800778c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b01      	cmp	r3, #1
 800776e:	d00d      	beq.n	800778c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007774:	f043 0210 	orr.w	r2, r3, #16
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007780:	f043 0201 	orr.w	r2, r3, #1
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	e007      	b.n	800779c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0301 	and.w	r3, r3, #1
 8007796:	2b01      	cmp	r3, #1
 8007798:	d1cf      	bne.n	800773a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	8000003f 	.word	0x8000003f
 80077a8:	50000100 	.word	0x50000100
 80077ac:	50000300 	.word	0x50000300
 80077b0:	50000700 	.word	0x50000700
 80077b4:	20000134 	.word	0x20000134
 80077b8:	053e2d63 	.word	0x053e2d63

080077bc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff f826 	bl	800681a <LL_ADC_IsDisableOngoing>
 80077ce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7ff f80d 	bl	80067f4 <LL_ADC_IsEnabled>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d047      	beq.n	8007870 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d144      	bne.n	8007870 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	f003 030d 	and.w	r3, r3, #13
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d10c      	bne.n	800780e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fe ffe7 	bl	80067cc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2203      	movs	r2, #3
 8007804:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007806:	f7fe fe05 	bl	8006414 <HAL_GetTick>
 800780a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800780c:	e029      	b.n	8007862 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007812:	f043 0210 	orr.w	r2, r3, #16
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800781e:	f043 0201 	orr.w	r2, r3, #1
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e023      	b.n	8007872 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800782a:	f7fe fdf3 	bl	8006414 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d914      	bls.n	8007862 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f003 0301 	and.w	r3, r3, #1
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00d      	beq.n	8007862 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800784a:	f043 0210 	orr.w	r2, r3, #16
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007856:	f043 0201 	orr.w	r2, r3, #1
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e007      	b.n	8007872 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	689b      	ldr	r3, [r3, #8]
 8007868:	f003 0301 	and.w	r3, r3, #1
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1dc      	bne.n	800782a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3710      	adds	r7, #16
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007886:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800788c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007890:	2b00      	cmp	r3, #0
 8007892:	d14b      	bne.n	800792c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007898:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0308 	and.w	r3, r3, #8
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d021      	beq.n	80078f2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fe fe8c 	bl	80065d0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d032      	beq.n	8007924 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d12b      	bne.n	8007924 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d11f      	bne.n	8007924 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80078e8:	f043 0201 	orr.w	r2, r3, #1
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80078f0:	e018      	b.n	8007924 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d111      	bne.n	8007924 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007904:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007910:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d105      	bne.n	8007924 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800791c:	f043 0201 	orr.w	r2, r3, #1
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f7ff fa55 	bl	8006dd4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800792a:	e00e      	b.n	800794a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d003      	beq.n	8007940 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff fa5f 	bl	8006dfc <HAL_ADC_ErrorCallback>
}
 800793e:	e004      	b.n	800794a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007944:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	4798      	blx	r3
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b084      	sub	sp, #16
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800795e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	f7ff fa41 	bl	8006de8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007966:	bf00      	nop
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b084      	sub	sp, #16
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800797a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007980:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800798c:	f043 0204 	orr.w	r2, r3, #4
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f7ff fa31 	bl	8006dfc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800799a:	bf00      	nop
 800799c:	3710      	adds	r7, #16
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <LL_ADC_IsEnabled>:
{
 80079a2:	b480      	push	{r7}
 80079a4:	b083      	sub	sp, #12
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <LL_ADC_IsEnabled+0x18>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e000      	b.n	80079bc <LL_ADC_IsEnabled+0x1a>
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	370c      	adds	r7, #12
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <LL_ADC_StartCalibration>:
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80079da:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80079e4:	4313      	orrs	r3, r2
 80079e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	609a      	str	r2, [r3, #8]
}
 80079ee:	bf00      	nop
 80079f0:	370c      	adds	r7, #12
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <LL_ADC_IsCalibrationOnGoing>:
{
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a0e:	d101      	bne.n	8007a14 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007a10:	2301      	movs	r3, #1
 8007a12:	e000      	b.n	8007a16 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a20:	4770      	bx	lr

08007a22 <LL_ADC_REG_IsConversionOngoing>:
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	689b      	ldr	r3, [r3, #8]
 8007a2e:	f003 0304 	and.w	r3, r3, #4
 8007a32:	2b04      	cmp	r3, #4
 8007a34:	d101      	bne.n	8007a3a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d101      	bne.n	8007a64 <HAL_ADCEx_Calibration_Start+0x1c>
 8007a60:	2302      	movs	r3, #2
 8007a62:	e04d      	b.n	8007b00 <HAL_ADCEx_Calibration_Start+0xb8>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f7ff fea5 	bl	80077bc <ADC_Disable>
 8007a72:	4603      	mov	r3, r0
 8007a74:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d136      	bne.n	8007aea <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8007a84:	f023 0302 	bic.w	r3, r3, #2
 8007a88:	f043 0202 	orr.w	r2, r3, #2
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff ff96 	bl	80079c8 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007a9c:	e014      	b.n	8007ac8 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	4a18      	ldr	r2, [pc, #96]	@ (8007b08 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d90d      	bls.n	8007ac8 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ab0:	f023 0312 	bic.w	r3, r3, #18
 8007ab4:	f043 0210 	orr.w	r2, r3, #16
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e01b      	b.n	8007b00 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7ff ff94 	bl	80079fa <LL_ADC_IsCalibrationOnGoing>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d1e2      	bne.n	8007a9e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007adc:	f023 0303 	bic.w	r3, r3, #3
 8007ae0:	f043 0201 	orr.w	r2, r3, #1
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007ae8:	e005      	b.n	8007af6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aee:	f043 0210 	orr.w	r2, r3, #16
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	0004de01 	.word	0x0004de01

08007b0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007b0c:	b590      	push	{r4, r7, lr}
 8007b0e:	b0a1      	sub	sp, #132	@ 0x84
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b16:	2300      	movs	r3, #0
 8007b18:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d101      	bne.n	8007b2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007b26:	2302      	movs	r3, #2
 8007b28:	e0e7      	b.n	8007cfa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007b32:	2300      	movs	r3, #0
 8007b34:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007b36:	2300      	movs	r3, #0
 8007b38:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007b42:	d102      	bne.n	8007b4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007b44:	4b6f      	ldr	r3, [pc, #444]	@ (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007b46:	60bb      	str	r3, [r7, #8]
 8007b48:	e009      	b.n	8007b5e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a6e      	ldr	r2, [pc, #440]	@ (8007d08 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d102      	bne.n	8007b5a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8007b54:	4b6d      	ldr	r3, [pc, #436]	@ (8007d0c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007b56:	60bb      	str	r3, [r7, #8]
 8007b58:	e001      	b.n	8007b5e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10b      	bne.n	8007b7c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b68:	f043 0220 	orr.w	r2, r3, #32
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e0be      	b.n	8007cfa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7ff ff4f 	bl	8007a22 <LL_ADC_REG_IsConversionOngoing>
 8007b84:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7ff ff49 	bl	8007a22 <LL_ADC_REG_IsConversionOngoing>
 8007b90:	4603      	mov	r3, r0
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	f040 80a0 	bne.w	8007cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007b98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	f040 809c 	bne.w	8007cd8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ba8:	d004      	beq.n	8007bb4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a55      	ldr	r2, [pc, #340]	@ (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d101      	bne.n	8007bb8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8007bb4:	4b56      	ldr	r3, [pc, #344]	@ (8007d10 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007bb6:	e000      	b.n	8007bba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8007bb8:	4b56      	ldr	r3, [pc, #344]	@ (8007d14 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8007bba:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d04b      	beq.n	8007c5c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007bc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	6859      	ldr	r1, [r3, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007bd6:	035b      	lsls	r3, r3, #13
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	431a      	orrs	r2, r3
 8007bdc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bde:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007be8:	d004      	beq.n	8007bf4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a45      	ldr	r2, [pc, #276]	@ (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d10f      	bne.n	8007c14 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8007bf4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007bf8:	f7ff fed3 	bl	80079a2 <LL_ADC_IsEnabled>
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	4841      	ldr	r0, [pc, #260]	@ (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007c00:	f7ff fecf 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c04:	4603      	mov	r3, r0
 8007c06:	4323      	orrs	r3, r4
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2301      	moveq	r3, #1
 8007c0e:	2300      	movne	r3, #0
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	e012      	b.n	8007c3a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8007c14:	483c      	ldr	r0, [pc, #240]	@ (8007d08 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007c16:	f7ff fec4 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c1a:	4604      	mov	r4, r0
 8007c1c:	483b      	ldr	r0, [pc, #236]	@ (8007d0c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007c1e:	f7ff fec0 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c22:	4603      	mov	r3, r0
 8007c24:	431c      	orrs	r4, r3
 8007c26:	483c      	ldr	r0, [pc, #240]	@ (8007d18 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007c28:	f7ff febb 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	4323      	orrs	r3, r4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	bf0c      	ite	eq
 8007c34:	2301      	moveq	r3, #1
 8007c36:	2300      	movne	r3, #0
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d056      	beq.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007c3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007c46:	f023 030f 	bic.w	r3, r3, #15
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	6811      	ldr	r1, [r2, #0]
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	6892      	ldr	r2, [r2, #8]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	431a      	orrs	r2, r3
 8007c56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c58:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007c5a:	e047      	b.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007c5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007c64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c66:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c70:	d004      	beq.n	8007c7c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a23      	ldr	r2, [pc, #140]	@ (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d10f      	bne.n	8007c9c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8007c7c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007c80:	f7ff fe8f 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c84:	4604      	mov	r4, r0
 8007c86:	481f      	ldr	r0, [pc, #124]	@ (8007d04 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007c88:	f7ff fe8b 	bl	80079a2 <LL_ADC_IsEnabled>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	4323      	orrs	r3, r4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bf0c      	ite	eq
 8007c94:	2301      	moveq	r3, #1
 8007c96:	2300      	movne	r3, #0
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	e012      	b.n	8007cc2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007c9c:	481a      	ldr	r0, [pc, #104]	@ (8007d08 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007c9e:	f7ff fe80 	bl	80079a2 <LL_ADC_IsEnabled>
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4819      	ldr	r0, [pc, #100]	@ (8007d0c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007ca6:	f7ff fe7c 	bl	80079a2 <LL_ADC_IsEnabled>
 8007caa:	4603      	mov	r3, r0
 8007cac:	431c      	orrs	r4, r3
 8007cae:	481a      	ldr	r0, [pc, #104]	@ (8007d18 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8007cb0:	f7ff fe77 	bl	80079a2 <LL_ADC_IsEnabled>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	4323      	orrs	r3, r4
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bf0c      	ite	eq
 8007cbc:	2301      	moveq	r3, #1
 8007cbe:	2300      	movne	r3, #0
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d012      	beq.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007cc6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007cce:	f023 030f 	bic.w	r3, r3, #15
 8007cd2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007cd4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007cd6:	e009      	b.n	8007cec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cdc:	f043 0220 	orr.w	r2, r3, #32
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007cea:	e000      	b.n	8007cee <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007cec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007cf6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3784      	adds	r7, #132	@ 0x84
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd90      	pop	{r4, r7, pc}
 8007d02:	bf00      	nop
 8007d04:	50000100 	.word	0x50000100
 8007d08:	50000400 	.word	0x50000400
 8007d0c:	50000500 	.word	0x50000500
 8007d10:	50000300 	.word	0x50000300
 8007d14:	50000700 	.word	0x50000700
 8007d18:	50000600 	.word	0x50000600

08007d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d60 <__NVIC_SetPriorityGrouping+0x44>)
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007d38:	4013      	ands	r3, r2
 8007d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d4e:	4a04      	ldr	r2, [pc, #16]	@ (8007d60 <__NVIC_SetPriorityGrouping+0x44>)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	60d3      	str	r3, [r2, #12]
}
 8007d54:	bf00      	nop
 8007d56:	3714      	adds	r7, #20
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr
 8007d60:	e000ed00 	.word	0xe000ed00

08007d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d64:	b480      	push	{r7}
 8007d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d68:	4b04      	ldr	r3, [pc, #16]	@ (8007d7c <__NVIC_GetPriorityGrouping+0x18>)
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	0a1b      	lsrs	r3, r3, #8
 8007d6e:	f003 0307 	and.w	r3, r3, #7
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	e000ed00 	.word	0xe000ed00

08007d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	4603      	mov	r3, r0
 8007d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	db0b      	blt.n	8007daa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	f003 021f 	and.w	r2, r3, #31
 8007d98:	4907      	ldr	r1, [pc, #28]	@ (8007db8 <__NVIC_EnableIRQ+0x38>)
 8007d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	2001      	movs	r0, #1
 8007da2:	fa00 f202 	lsl.w	r2, r0, r2
 8007da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007daa:	bf00      	nop
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
 8007db6:	bf00      	nop
 8007db8:	e000e100 	.word	0xe000e100

08007dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	6039      	str	r1, [r7, #0]
 8007dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	db0a      	blt.n	8007de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	490c      	ldr	r1, [pc, #48]	@ (8007e08 <__NVIC_SetPriority+0x4c>)
 8007dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dda:	0112      	lsls	r2, r2, #4
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	440b      	add	r3, r1
 8007de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007de4:	e00a      	b.n	8007dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	4908      	ldr	r1, [pc, #32]	@ (8007e0c <__NVIC_SetPriority+0x50>)
 8007dec:	79fb      	ldrb	r3, [r7, #7]
 8007dee:	f003 030f 	and.w	r3, r3, #15
 8007df2:	3b04      	subs	r3, #4
 8007df4:	0112      	lsls	r2, r2, #4
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	440b      	add	r3, r1
 8007dfa:	761a      	strb	r2, [r3, #24]
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr
 8007e08:	e000e100 	.word	0xe000e100
 8007e0c:	e000ed00 	.word	0xe000ed00

08007e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b089      	sub	sp, #36	@ 0x24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f003 0307 	and.w	r3, r3, #7
 8007e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f1c3 0307 	rsb	r3, r3, #7
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	bf28      	it	cs
 8007e2e:	2304      	movcs	r3, #4
 8007e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	3304      	adds	r3, #4
 8007e36:	2b06      	cmp	r3, #6
 8007e38:	d902      	bls.n	8007e40 <NVIC_EncodePriority+0x30>
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	3b03      	subs	r3, #3
 8007e3e:	e000      	b.n	8007e42 <NVIC_EncodePriority+0x32>
 8007e40:	2300      	movs	r3, #0
 8007e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e44:	f04f 32ff 	mov.w	r2, #4294967295
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4e:	43da      	mvns	r2, r3
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	401a      	ands	r2, r3
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e58:	f04f 31ff 	mov.w	r1, #4294967295
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e62:	43d9      	mvns	r1, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e68:	4313      	orrs	r3, r2
         );
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3724      	adds	r7, #36	@ 0x24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
	...

08007e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e88:	d301      	bcc.n	8007e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e00f      	b.n	8007eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8007eb8 <SysTick_Config+0x40>)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e96:	210f      	movs	r1, #15
 8007e98:	f04f 30ff 	mov.w	r0, #4294967295
 8007e9c:	f7ff ff8e 	bl	8007dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ea0:	4b05      	ldr	r3, [pc, #20]	@ (8007eb8 <SysTick_Config+0x40>)
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007ea6:	4b04      	ldr	r3, [pc, #16]	@ (8007eb8 <SysTick_Config+0x40>)
 8007ea8:	2207      	movs	r2, #7
 8007eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007eac:	2300      	movs	r3, #0
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	e000e010 	.word	0xe000e010

08007ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f7ff ff29 	bl	8007d1c <__NVIC_SetPriorityGrouping>
}
 8007eca:	bf00      	nop
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b086      	sub	sp, #24
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	4603      	mov	r3, r0
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ee0:	f7ff ff40 	bl	8007d64 <__NVIC_GetPriorityGrouping>
 8007ee4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	68b9      	ldr	r1, [r7, #8]
 8007eea:	6978      	ldr	r0, [r7, #20]
 8007eec:	f7ff ff90 	bl	8007e10 <NVIC_EncodePriority>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7ff ff5f 	bl	8007dbc <__NVIC_SetPriority>
}
 8007efe:	bf00      	nop
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7ff ff33 	bl	8007d80 <__NVIC_EnableIRQ>
}
 8007f1a:	bf00      	nop
 8007f1c:	3708      	adds	r7, #8
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff ffa4 	bl	8007e78 <SysTick_Config>
 8007f30:	4603      	mov	r3, r0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
	...

08007f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d101      	bne.n	8007f4e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e08d      	b.n	800806a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	461a      	mov	r2, r3
 8007f54:	4b47      	ldr	r3, [pc, #284]	@ (8008074 <HAL_DMA_Init+0x138>)
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d80f      	bhi.n	8007f7a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	4b45      	ldr	r3, [pc, #276]	@ (8008078 <HAL_DMA_Init+0x13c>)
 8007f62:	4413      	add	r3, r2
 8007f64:	4a45      	ldr	r2, [pc, #276]	@ (800807c <HAL_DMA_Init+0x140>)
 8007f66:	fba2 2303 	umull	r2, r3, r2, r3
 8007f6a:	091b      	lsrs	r3, r3, #4
 8007f6c:	009a      	lsls	r2, r3, #2
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a42      	ldr	r2, [pc, #264]	@ (8008080 <HAL_DMA_Init+0x144>)
 8007f76:	641a      	str	r2, [r3, #64]	@ 0x40
 8007f78:	e00e      	b.n	8007f98 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	4b40      	ldr	r3, [pc, #256]	@ (8008084 <HAL_DMA_Init+0x148>)
 8007f82:	4413      	add	r3, r2
 8007f84:	4a3d      	ldr	r2, [pc, #244]	@ (800807c <HAL_DMA_Init+0x140>)
 8007f86:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8a:	091b      	lsrs	r3, r3, #4
 8007f8c:	009a      	lsls	r2, r3, #2
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a3c      	ldr	r2, [pc, #240]	@ (8008088 <HAL_DMA_Init+0x14c>)
 8007f96:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fb2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007fd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fa76 	bl	80084dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007ff8:	d102      	bne.n	8008000 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685a      	ldr	r2, [r3, #4]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008008:	b2d2      	uxtb	r2, r2
 800800a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008014:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d010      	beq.n	8008040 <HAL_DMA_Init+0x104>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	2b04      	cmp	r3, #4
 8008024:	d80c      	bhi.n	8008040 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 fa96 	bl	8008558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008030:	2200      	movs	r2, #0
 8008032:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800803c:	605a      	str	r2, [r3, #4]
 800803e:	e008      	b.n	8008052 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	3710      	adds	r7, #16
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	40020407 	.word	0x40020407
 8008078:	bffdfff8 	.word	0xbffdfff8
 800807c:	cccccccd 	.word	0xcccccccd
 8008080:	40020000 	.word	0x40020000
 8008084:	bffdfbf8 	.word	0xbffdfbf8
 8008088:	40020400 	.word	0x40020400

0800808c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	607a      	str	r2, [r7, #4]
 8008098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	d101      	bne.n	80080ac <HAL_DMA_Start_IT+0x20>
 80080a8:	2302      	movs	r3, #2
 80080aa:	e066      	b.n	800817a <HAL_DMA_Start_IT+0xee>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d155      	bne.n	800816c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2202      	movs	r2, #2
 80080c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2200      	movs	r2, #0
 80080cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f022 0201 	bic.w	r2, r2, #1
 80080dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	68b9      	ldr	r1, [r7, #8]
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f000 f9bb 	bl	8008460 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d008      	beq.n	8008104 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f042 020e 	orr.w	r2, r2, #14
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	e00f      	b.n	8008124 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0204 	bic.w	r2, r2, #4
 8008112:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f042 020a 	orr.w	r2, r2, #10
 8008122:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d007      	beq.n	8008142 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800813c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008140:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008154:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008158:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f042 0201 	orr.w	r2, r2, #1
 8008168:	601a      	str	r2, [r3, #0]
 800816a:	e005      	b.n	8008178 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008174:	2302      	movs	r3, #2
 8008176:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008178:	7dfb      	ldrb	r3, [r7, #23]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3718      	adds	r7, #24
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008182:	b480      	push	{r7}
 8008184:	b085      	sub	sp, #20
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d005      	beq.n	80081a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2204      	movs	r2, #4
 800819e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	73fb      	strb	r3, [r7, #15]
 80081a4:	e037      	b.n	8008216 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 020e 	bic.w	r2, r2, #14
 80081b4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80081c4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 0201 	bic.w	r2, r2, #1
 80081d4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081da:	f003 021f 	and.w	r2, r3, #31
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e2:	2101      	movs	r1, #1
 80081e4:	fa01 f202 	lsl.w	r2, r1, r2
 80081e8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80081f2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d00c      	beq.n	8008216 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008206:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800820a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008214:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2200      	movs	r2, #0
 8008222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8008226:	7bfb      	ldrb	r3, [r7, #15]
}
 8008228:	4618      	mov	r0, r3
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008246:	b2db      	uxtb	r3, r3
 8008248:	2b02      	cmp	r3, #2
 800824a:	d00d      	beq.n	8008268 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2204      	movs	r2, #4
 8008250:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	73fb      	strb	r3, [r7, #15]
 8008266:	e047      	b.n	80082f8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f022 020e 	bic.w	r2, r2, #14
 8008276:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0201 	bic.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008292:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008296:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800829c:	f003 021f 	and.w	r2, r3, #31
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082a4:	2101      	movs	r1, #1
 80082a6:	fa01 f202 	lsl.w	r2, r1, r2
 80082aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80082b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00c      	beq.n	80082d8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80082cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80082d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	4798      	blx	r3
    }
  }
  return status;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800831e:	f003 031f 	and.w	r3, r3, #31
 8008322:	2204      	movs	r2, #4
 8008324:	409a      	lsls	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4013      	ands	r3, r2
 800832a:	2b00      	cmp	r3, #0
 800832c:	d026      	beq.n	800837c <HAL_DMA_IRQHandler+0x7a>
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f003 0304 	and.w	r3, r3, #4
 8008334:	2b00      	cmp	r3, #0
 8008336:	d021      	beq.n	800837c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0320 	and.w	r3, r3, #32
 8008342:	2b00      	cmp	r3, #0
 8008344:	d107      	bne.n	8008356 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f022 0204 	bic.w	r2, r2, #4
 8008354:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800835a:	f003 021f 	and.w	r2, r3, #31
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008362:	2104      	movs	r1, #4
 8008364:	fa01 f202 	lsl.w	r2, r1, r2
 8008368:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800836e:	2b00      	cmp	r3, #0
 8008370:	d071      	beq.n	8008456 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800837a:	e06c      	b.n	8008456 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008380:	f003 031f 	and.w	r3, r3, #31
 8008384:	2202      	movs	r2, #2
 8008386:	409a      	lsls	r2, r3
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	4013      	ands	r3, r2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d02e      	beq.n	80083ee <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	f003 0302 	and.w	r3, r3, #2
 8008396:	2b00      	cmp	r3, #0
 8008398:	d029      	beq.n	80083ee <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0320 	and.w	r3, r3, #32
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d10b      	bne.n	80083c0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f022 020a 	bic.w	r2, r2, #10
 80083b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c4:	f003 021f 	and.w	r2, r3, #31
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083cc:	2102      	movs	r1, #2
 80083ce:	fa01 f202 	lsl.w	r2, r1, r2
 80083d2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d038      	beq.n	8008456 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80083ec:	e033      	b.n	8008456 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083f2:	f003 031f 	and.w	r3, r3, #31
 80083f6:	2208      	movs	r2, #8
 80083f8:	409a      	lsls	r2, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	4013      	ands	r3, r2
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d02a      	beq.n	8008458 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b00      	cmp	r3, #0
 800840a:	d025      	beq.n	8008458 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f022 020e 	bic.w	r2, r2, #14
 800841a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008420:	f003 021f 	and.w	r2, r3, #31
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008428:	2101      	movs	r1, #1
 800842a:	fa01 f202 	lsl.w	r2, r1, r2
 800842e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800844a:	2b00      	cmp	r3, #0
 800844c:	d004      	beq.n	8008458 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008456:	bf00      	nop
 8008458:	bf00      	nop
}
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008476:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800847c:	2b00      	cmp	r3, #0
 800847e:	d004      	beq.n	800848a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008488:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800848e:	f003 021f 	and.w	r2, r3, #31
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008496:	2101      	movs	r1, #1
 8008498:	fa01 f202 	lsl.w	r2, r1, r2
 800849c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	2b10      	cmp	r3, #16
 80084ac:	d108      	bne.n	80084c0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80084be:	e007      	b.n	80084d0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	60da      	str	r2, [r3, #12]
}
 80084d0:	bf00      	nop
 80084d2:	3714      	adds	r7, #20
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80084dc:	b480      	push	{r7}
 80084de:	b087      	sub	sp, #28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	461a      	mov	r2, r3
 80084ea:	4b16      	ldr	r3, [pc, #88]	@ (8008544 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d802      	bhi.n	80084f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80084f0:	4b15      	ldr	r3, [pc, #84]	@ (8008548 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	e001      	b.n	80084fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80084f6:	4b15      	ldr	r3, [pc, #84]	@ (800854c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80084f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	b2db      	uxtb	r3, r3
 8008504:	3b08      	subs	r3, #8
 8008506:	4a12      	ldr	r2, [pc, #72]	@ (8008550 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008508:	fba2 2303 	umull	r2, r3, r2, r3
 800850c:	091b      	lsrs	r3, r3, #4
 800850e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008514:	089b      	lsrs	r3, r3, #2
 8008516:	009a      	lsls	r2, r3, #2
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	4413      	add	r3, r2
 800851c:	461a      	mov	r2, r3
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4a0b      	ldr	r2, [pc, #44]	@ (8008554 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008526:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f003 031f 	and.w	r3, r3, #31
 800852e:	2201      	movs	r2, #1
 8008530:	409a      	lsls	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	40020407 	.word	0x40020407
 8008548:	40020800 	.word	0x40020800
 800854c:	40020820 	.word	0x40020820
 8008550:	cccccccd 	.word	0xcccccccd
 8008554:	40020880 	.word	0x40020880

08008558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008558:	b480      	push	{r7}
 800855a:	b085      	sub	sp, #20
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008568:	68fa      	ldr	r2, [r7, #12]
 800856a:	4b0b      	ldr	r3, [pc, #44]	@ (8008598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800856c:	4413      	add	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	461a      	mov	r2, r3
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	4a08      	ldr	r2, [pc, #32]	@ (800859c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800857a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3b01      	subs	r3, #1
 8008580:	f003 031f 	and.w	r3, r3, #31
 8008584:	2201      	movs	r2, #1
 8008586:	409a      	lsls	r2, r3
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800858c:	bf00      	nop
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	1000823f 	.word	0x1000823f
 800859c:	40020940 	.word	0x40020940

080085a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80085ae:	e15a      	b.n	8008866 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	2101      	movs	r1, #1
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	fa01 f303 	lsl.w	r3, r1, r3
 80085bc:	4013      	ands	r3, r2
 80085be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f000 814c 	beq.w	8008860 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f003 0303 	and.w	r3, r3, #3
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d005      	beq.n	80085e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d130      	bne.n	8008642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	2203      	movs	r2, #3
 80085ec:	fa02 f303 	lsl.w	r3, r2, r3
 80085f0:	43db      	mvns	r3, r3
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	4013      	ands	r3, r2
 80085f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	68da      	ldr	r2, [r3, #12]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	fa02 f303 	lsl.w	r3, r2, r3
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	4313      	orrs	r3, r2
 8008608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008616:	2201      	movs	r2, #1
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	fa02 f303 	lsl.w	r3, r2, r3
 800861e:	43db      	mvns	r3, r3
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	4013      	ands	r3, r2
 8008624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	091b      	lsrs	r3, r3, #4
 800862c:	f003 0201 	and.w	r2, r3, #1
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	fa02 f303 	lsl.w	r3, r2, r3
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	4313      	orrs	r3, r2
 800863a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f003 0303 	and.w	r3, r3, #3
 800864a:	2b03      	cmp	r3, #3
 800864c:	d017      	beq.n	800867e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	005b      	lsls	r3, r3, #1
 8008658:	2203      	movs	r2, #3
 800865a:	fa02 f303 	lsl.w	r3, r2, r3
 800865e:	43db      	mvns	r3, r3
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	4013      	ands	r3, r2
 8008664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	689a      	ldr	r2, [r3, #8]
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	fa02 f303 	lsl.w	r3, r2, r3
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4313      	orrs	r3, r2
 8008676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	2b02      	cmp	r3, #2
 8008688:	d123      	bne.n	80086d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	08da      	lsrs	r2, r3, #3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3208      	adds	r2, #8
 8008692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f003 0307 	and.w	r3, r3, #7
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	220f      	movs	r2, #15
 80086a2:	fa02 f303 	lsl.w	r3, r2, r3
 80086a6:	43db      	mvns	r3, r3
 80086a8:	693a      	ldr	r2, [r7, #16]
 80086aa:	4013      	ands	r3, r2
 80086ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	691a      	ldr	r2, [r3, #16]
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	fa02 f303 	lsl.w	r3, r2, r3
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	4313      	orrs	r3, r2
 80086c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	08da      	lsrs	r2, r3, #3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	3208      	adds	r2, #8
 80086cc:	6939      	ldr	r1, [r7, #16]
 80086ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	005b      	lsls	r3, r3, #1
 80086dc:	2203      	movs	r2, #3
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	43db      	mvns	r3, r3
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	4013      	ands	r3, r2
 80086e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f003 0203 	and.w	r2, r3, #3
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	fa02 f303 	lsl.w	r3, r2, r3
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	4313      	orrs	r3, r2
 80086fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	693a      	ldr	r2, [r7, #16]
 8008704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 80a6 	beq.w	8008860 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008714:	4b5b      	ldr	r3, [pc, #364]	@ (8008884 <HAL_GPIO_Init+0x2e4>)
 8008716:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008718:	4a5a      	ldr	r2, [pc, #360]	@ (8008884 <HAL_GPIO_Init+0x2e4>)
 800871a:	f043 0301 	orr.w	r3, r3, #1
 800871e:	6613      	str	r3, [r2, #96]	@ 0x60
 8008720:	4b58      	ldr	r3, [pc, #352]	@ (8008884 <HAL_GPIO_Init+0x2e4>)
 8008722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008724:	f003 0301 	and.w	r3, r3, #1
 8008728:	60bb      	str	r3, [r7, #8]
 800872a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800872c:	4a56      	ldr	r2, [pc, #344]	@ (8008888 <HAL_GPIO_Init+0x2e8>)
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	089b      	lsrs	r3, r3, #2
 8008732:	3302      	adds	r3, #2
 8008734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008738:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f003 0303 	and.w	r3, r3, #3
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	220f      	movs	r2, #15
 8008744:	fa02 f303 	lsl.w	r3, r2, r3
 8008748:	43db      	mvns	r3, r3
 800874a:	693a      	ldr	r2, [r7, #16]
 800874c:	4013      	ands	r3, r2
 800874e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008756:	d01f      	beq.n	8008798 <HAL_GPIO_Init+0x1f8>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a4c      	ldr	r2, [pc, #304]	@ (800888c <HAL_GPIO_Init+0x2ec>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d019      	beq.n	8008794 <HAL_GPIO_Init+0x1f4>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a4b      	ldr	r2, [pc, #300]	@ (8008890 <HAL_GPIO_Init+0x2f0>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d013      	beq.n	8008790 <HAL_GPIO_Init+0x1f0>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	4a4a      	ldr	r2, [pc, #296]	@ (8008894 <HAL_GPIO_Init+0x2f4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d00d      	beq.n	800878c <HAL_GPIO_Init+0x1ec>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	4a49      	ldr	r2, [pc, #292]	@ (8008898 <HAL_GPIO_Init+0x2f8>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d007      	beq.n	8008788 <HAL_GPIO_Init+0x1e8>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a48      	ldr	r2, [pc, #288]	@ (800889c <HAL_GPIO_Init+0x2fc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d101      	bne.n	8008784 <HAL_GPIO_Init+0x1e4>
 8008780:	2305      	movs	r3, #5
 8008782:	e00a      	b.n	800879a <HAL_GPIO_Init+0x1fa>
 8008784:	2306      	movs	r3, #6
 8008786:	e008      	b.n	800879a <HAL_GPIO_Init+0x1fa>
 8008788:	2304      	movs	r3, #4
 800878a:	e006      	b.n	800879a <HAL_GPIO_Init+0x1fa>
 800878c:	2303      	movs	r3, #3
 800878e:	e004      	b.n	800879a <HAL_GPIO_Init+0x1fa>
 8008790:	2302      	movs	r3, #2
 8008792:	e002      	b.n	800879a <HAL_GPIO_Init+0x1fa>
 8008794:	2301      	movs	r3, #1
 8008796:	e000      	b.n	800879a <HAL_GPIO_Init+0x1fa>
 8008798:	2300      	movs	r3, #0
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	f002 0203 	and.w	r2, r2, #3
 80087a0:	0092      	lsls	r2, r2, #2
 80087a2:	4093      	lsls	r3, r2
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087aa:	4937      	ldr	r1, [pc, #220]	@ (8008888 <HAL_GPIO_Init+0x2e8>)
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	089b      	lsrs	r3, r3, #2
 80087b0:	3302      	adds	r3, #2
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80087b8:	4b39      	ldr	r3, [pc, #228]	@ (80088a0 <HAL_GPIO_Init+0x300>)
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	43db      	mvns	r3, r3
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	4013      	ands	r3, r2
 80087c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4313      	orrs	r3, r2
 80087da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80087dc:	4a30      	ldr	r2, [pc, #192]	@ (80088a0 <HAL_GPIO_Init+0x300>)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80087e2:	4b2f      	ldr	r3, [pc, #188]	@ (80088a0 <HAL_GPIO_Init+0x300>)
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	43db      	mvns	r3, r3
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	4013      	ands	r3, r2
 80087f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008806:	4a26      	ldr	r2, [pc, #152]	@ (80088a0 <HAL_GPIO_Init+0x300>)
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800880c:	4b24      	ldr	r3, [pc, #144]	@ (80088a0 <HAL_GPIO_Init+0x300>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	43db      	mvns	r3, r3
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	4013      	ands	r3, r2
 800881a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d003      	beq.n	8008830 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4313      	orrs	r3, r2
 800882e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008830:	4a1b      	ldr	r2, [pc, #108]	@ (80088a0 <HAL_GPIO_Init+0x300>)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008836:	4b1a      	ldr	r3, [pc, #104]	@ (80088a0 <HAL_GPIO_Init+0x300>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	43db      	mvns	r3, r3
 8008840:	693a      	ldr	r2, [r7, #16]
 8008842:	4013      	ands	r3, r2
 8008844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800885a:	4a11      	ldr	r2, [pc, #68]	@ (80088a0 <HAL_GPIO_Init+0x300>)
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	3301      	adds	r3, #1
 8008864:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	fa22 f303 	lsr.w	r3, r2, r3
 8008870:	2b00      	cmp	r3, #0
 8008872:	f47f ae9d 	bne.w	80085b0 <HAL_GPIO_Init+0x10>
  }
}
 8008876:	bf00      	nop
 8008878:	bf00      	nop
 800887a:	371c      	adds	r7, #28
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr
 8008884:	40021000 	.word	0x40021000
 8008888:	40010000 	.word	0x40010000
 800888c:	48000400 	.word	0x48000400
 8008890:	48000800 	.word	0x48000800
 8008894:	48000c00 	.word	0x48000c00
 8008898:	48001000 	.word	0x48001000
 800889c:	48001400 	.word	0x48001400
 80088a0:	40010400 	.word	0x40010400

080088a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	807b      	strh	r3, [r7, #2]
 80088b0:	4613      	mov	r3, r2
 80088b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80088b4:	787b      	ldrb	r3, [r7, #1]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80088ba:	887a      	ldrh	r2, [r7, #2]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80088c0:	e002      	b.n	80088c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80088c2:	887a      	ldrh	r2, [r7, #2]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80088c8:	bf00      	nop
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80088de:	4b08      	ldr	r3, [pc, #32]	@ (8008900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80088e0:	695a      	ldr	r2, [r3, #20]
 80088e2:	88fb      	ldrh	r3, [r7, #6]
 80088e4:	4013      	ands	r3, r2
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d006      	beq.n	80088f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80088ea:	4a05      	ldr	r2, [pc, #20]	@ (8008900 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80088ec:	88fb      	ldrh	r3, [r7, #6]
 80088ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80088f0:	88fb      	ldrh	r3, [r7, #6]
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7fc f852 	bl	800499c <HAL_GPIO_EXTI_Callback>
  }
}
 80088f8:	bf00      	nop
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	40010400 	.word	0x40010400

08008904 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d141      	bne.n	8008996 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008912:	4b4b      	ldr	r3, [pc, #300]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800891a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800891e:	d131      	bne.n	8008984 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008920:	4b47      	ldr	r3, [pc, #284]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008922:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008926:	4a46      	ldr	r2, [pc, #280]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800892c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008930:	4b43      	ldr	r3, [pc, #268]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008938:	4a41      	ldr	r2, [pc, #260]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800893a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800893e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008940:	4b40      	ldr	r3, [pc, #256]	@ (8008a44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2232      	movs	r2, #50	@ 0x32
 8008946:	fb02 f303 	mul.w	r3, r2, r3
 800894a:	4a3f      	ldr	r2, [pc, #252]	@ (8008a48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800894c:	fba2 2303 	umull	r2, r3, r2, r3
 8008950:	0c9b      	lsrs	r3, r3, #18
 8008952:	3301      	adds	r3, #1
 8008954:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008956:	e002      	b.n	800895e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3b01      	subs	r3, #1
 800895c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800895e:	4b38      	ldr	r3, [pc, #224]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800896a:	d102      	bne.n	8008972 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f2      	bne.n	8008958 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008972:	4b33      	ldr	r3, [pc, #204]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800897a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800897e:	d158      	bne.n	8008a32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e057      	b.n	8008a34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008984:	4b2e      	ldr	r3, [pc, #184]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008986:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800898a:	4a2d      	ldr	r2, [pc, #180]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800898c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008990:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008994:	e04d      	b.n	8008a32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800899c:	d141      	bne.n	8008a22 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800899e:	4b28      	ldr	r3, [pc, #160]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80089a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089aa:	d131      	bne.n	8008a10 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80089ac:	4b24      	ldr	r3, [pc, #144]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089b2:	4a23      	ldr	r2, [pc, #140]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089b8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80089bc:	4b20      	ldr	r3, [pc, #128]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80089c4:	4a1e      	ldr	r2, [pc, #120]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80089ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80089cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008a44 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2232      	movs	r2, #50	@ 0x32
 80089d2:	fb02 f303 	mul.w	r3, r2, r3
 80089d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a48 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80089d8:	fba2 2303 	umull	r2, r3, r2, r3
 80089dc:	0c9b      	lsrs	r3, r3, #18
 80089de:	3301      	adds	r3, #1
 80089e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80089e2:	e002      	b.n	80089ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	3b01      	subs	r3, #1
 80089e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80089ea:	4b15      	ldr	r3, [pc, #84]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80089f6:	d102      	bne.n	80089fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1f2      	bne.n	80089e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80089fe:	4b10      	ldr	r3, [pc, #64]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a0a:	d112      	bne.n	8008a32 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e011      	b.n	8008a34 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a10:	4b0b      	ldr	r3, [pc, #44]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a16:	4a0a      	ldr	r2, [pc, #40]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008a20:	e007      	b.n	8008a32 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008a22:	4b07      	ldr	r3, [pc, #28]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008a2a:	4a05      	ldr	r2, [pc, #20]	@ (8008a40 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a2c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008a30:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr
 8008a40:	40007000 	.word	0x40007000
 8008a44:	20000134 	.word	0x20000134
 8008a48:	431bde83 	.word	0x431bde83

08008a4c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008a50:	4b05      	ldr	r3, [pc, #20]	@ (8008a68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	4a04      	ldr	r2, [pc, #16]	@ (8008a68 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008a56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008a5a:	6093      	str	r3, [r2, #8]
}
 8008a5c:	bf00      	nop
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	40007000 	.word	0x40007000

08008a6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b088      	sub	sp, #32
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d101      	bne.n	8008a7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e2fe      	b.n	800907c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0301 	and.w	r3, r3, #1
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d075      	beq.n	8008b76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a8a:	4b97      	ldr	r3, [pc, #604]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f003 030c 	and.w	r3, r3, #12
 8008a92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008a94:	4b94      	ldr	r3, [pc, #592]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f003 0303 	and.w	r3, r3, #3
 8008a9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	2b0c      	cmp	r3, #12
 8008aa2:	d102      	bne.n	8008aaa <HAL_RCC_OscConfig+0x3e>
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d002      	beq.n	8008ab0 <HAL_RCC_OscConfig+0x44>
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	2b08      	cmp	r3, #8
 8008aae:	d10b      	bne.n	8008ac8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ab0:	4b8d      	ldr	r3, [pc, #564]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d05b      	beq.n	8008b74 <HAL_RCC_OscConfig+0x108>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d157      	bne.n	8008b74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e2d9      	b.n	800907c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ad0:	d106      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x74>
 8008ad2:	4b85      	ldr	r3, [pc, #532]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a84      	ldr	r2, [pc, #528]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008adc:	6013      	str	r3, [r2, #0]
 8008ade:	e01d      	b.n	8008b1c <HAL_RCC_OscConfig+0xb0>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ae8:	d10c      	bne.n	8008b04 <HAL_RCC_OscConfig+0x98>
 8008aea:	4b7f      	ldr	r3, [pc, #508]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a7e      	ldr	r2, [pc, #504]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008af0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008af4:	6013      	str	r3, [r2, #0]
 8008af6:	4b7c      	ldr	r3, [pc, #496]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a7b      	ldr	r2, [pc, #492]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008afc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	e00b      	b.n	8008b1c <HAL_RCC_OscConfig+0xb0>
 8008b04:	4b78      	ldr	r3, [pc, #480]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a77      	ldr	r2, [pc, #476]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008b0e:	6013      	str	r3, [r2, #0]
 8008b10:	4b75      	ldr	r3, [pc, #468]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a74      	ldr	r2, [pc, #464]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d013      	beq.n	8008b4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b24:	f7fd fc76 	bl	8006414 <HAL_GetTick>
 8008b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b2a:	e008      	b.n	8008b3e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b2c:	f7fd fc72 	bl	8006414 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b64      	cmp	r3, #100	@ 0x64
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e29e      	b.n	800907c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b3e:	4b6a      	ldr	r3, [pc, #424]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0f0      	beq.n	8008b2c <HAL_RCC_OscConfig+0xc0>
 8008b4a:	e014      	b.n	8008b76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b4c:	f7fd fc62 	bl	8006414 <HAL_GetTick>
 8008b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b52:	e008      	b.n	8008b66 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008b54:	f7fd fc5e 	bl	8006414 <HAL_GetTick>
 8008b58:	4602      	mov	r2, r0
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	1ad3      	subs	r3, r2, r3
 8008b5e:	2b64      	cmp	r3, #100	@ 0x64
 8008b60:	d901      	bls.n	8008b66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e28a      	b.n	800907c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008b66:	4b60      	ldr	r3, [pc, #384]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1f0      	bne.n	8008b54 <HAL_RCC_OscConfig+0xe8>
 8008b72:	e000      	b.n	8008b76 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0302 	and.w	r3, r3, #2
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d075      	beq.n	8008c6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b82:	4b59      	ldr	r3, [pc, #356]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	f003 030c 	and.w	r3, r3, #12
 8008b8a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008b8c:	4b56      	ldr	r3, [pc, #344]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	f003 0303 	and.w	r3, r3, #3
 8008b94:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008b96:	69bb      	ldr	r3, [r7, #24]
 8008b98:	2b0c      	cmp	r3, #12
 8008b9a:	d102      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x136>
 8008b9c:	697b      	ldr	r3, [r7, #20]
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d002      	beq.n	8008ba8 <HAL_RCC_OscConfig+0x13c>
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	2b04      	cmp	r3, #4
 8008ba6:	d11f      	bne.n	8008be8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ba8:	4b4f      	ldr	r3, [pc, #316]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d005      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x154>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e25d      	b.n	800907c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bc0:	4b49      	ldr	r3, [pc, #292]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008bc2:	685b      	ldr	r3, [r3, #4]
 8008bc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	061b      	lsls	r3, r3, #24
 8008bce:	4946      	ldr	r1, [pc, #280]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008bd4:	4b45      	ldr	r3, [pc, #276]	@ (8008cec <HAL_RCC_OscConfig+0x280>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7fd fbcf 	bl	800637c <HAL_InitTick>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d043      	beq.n	8008c6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e249      	b.n	800907c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d023      	beq.n	8008c38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfc:	f7fd fc0a 	bl	8006414 <HAL_GetTick>
 8008c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c02:	e008      	b.n	8008c16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c04:	f7fd fc06 	bl	8006414 <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d901      	bls.n	8008c16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e232      	b.n	800907c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008c16:	4b34      	ldr	r3, [pc, #208]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0f0      	beq.n	8008c04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c22:	4b31      	ldr	r3, [pc, #196]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	061b      	lsls	r3, r3, #24
 8008c30:	492d      	ldr	r1, [pc, #180]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008c32:	4313      	orrs	r3, r2
 8008c34:	604b      	str	r3, [r1, #4]
 8008c36:	e01a      	b.n	8008c6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c38:	4b2b      	ldr	r3, [pc, #172]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a2a      	ldr	r2, [pc, #168]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008c3e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c44:	f7fd fbe6 	bl	8006414 <HAL_GetTick>
 8008c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c4a:	e008      	b.n	8008c5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c4c:	f7fd fbe2 	bl	8006414 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	2b02      	cmp	r3, #2
 8008c58:	d901      	bls.n	8008c5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e20e      	b.n	800907c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008c5e:	4b22      	ldr	r3, [pc, #136]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d1f0      	bne.n	8008c4c <HAL_RCC_OscConfig+0x1e0>
 8008c6a:	e000      	b.n	8008c6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008c6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f003 0308 	and.w	r3, r3, #8
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d041      	beq.n	8008cfe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	695b      	ldr	r3, [r3, #20]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d01c      	beq.n	8008cbc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c82:	4b19      	ldr	r3, [pc, #100]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008c88:	4a17      	ldr	r2, [pc, #92]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008c8a:	f043 0301 	orr.w	r3, r3, #1
 8008c8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c92:	f7fd fbbf 	bl	8006414 <HAL_GetTick>
 8008c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c98:	e008      	b.n	8008cac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c9a:	f7fd fbbb 	bl	8006414 <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	2b02      	cmp	r3, #2
 8008ca6:	d901      	bls.n	8008cac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008ca8:	2303      	movs	r3, #3
 8008caa:	e1e7      	b.n	800907c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008cac:	4b0e      	ldr	r3, [pc, #56]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0ef      	beq.n	8008c9a <HAL_RCC_OscConfig+0x22e>
 8008cba:	e020      	b.n	8008cfe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cc2:	4a09      	ldr	r2, [pc, #36]	@ (8008ce8 <HAL_RCC_OscConfig+0x27c>)
 8008cc4:	f023 0301 	bic.w	r3, r3, #1
 8008cc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ccc:	f7fd fba2 	bl	8006414 <HAL_GetTick>
 8008cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008cd2:	e00d      	b.n	8008cf0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cd4:	f7fd fb9e 	bl	8006414 <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	2b02      	cmp	r3, #2
 8008ce0:	d906      	bls.n	8008cf0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e1ca      	b.n	800907c <HAL_RCC_OscConfig+0x610>
 8008ce6:	bf00      	nop
 8008ce8:	40021000 	.word	0x40021000
 8008cec:	20000138 	.word	0x20000138
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008cf0:	4b8c      	ldr	r3, [pc, #560]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008cf6:	f003 0302 	and.w	r3, r3, #2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1ea      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0304 	and.w	r3, r3, #4
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 80a6 	beq.w	8008e58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008d10:	4b84      	ldr	r3, [pc, #528]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d101      	bne.n	8008d20 <HAL_RCC_OscConfig+0x2b4>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e000      	b.n	8008d22 <HAL_RCC_OscConfig+0x2b6>
 8008d20:	2300      	movs	r3, #0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00d      	beq.n	8008d42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d26:	4b7f      	ldr	r3, [pc, #508]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d2a:	4a7e      	ldr	r2, [pc, #504]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d30:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d32:	4b7c      	ldr	r3, [pc, #496]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d42:	4b79      	ldr	r3, [pc, #484]	@ (8008f28 <HAL_RCC_OscConfig+0x4bc>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d118      	bne.n	8008d80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d4e:	4b76      	ldr	r3, [pc, #472]	@ (8008f28 <HAL_RCC_OscConfig+0x4bc>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a75      	ldr	r2, [pc, #468]	@ (8008f28 <HAL_RCC_OscConfig+0x4bc>)
 8008d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008d5a:	f7fd fb5b 	bl	8006414 <HAL_GetTick>
 8008d5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d60:	e008      	b.n	8008d74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d62:	f7fd fb57 	bl	8006414 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d901      	bls.n	8008d74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e183      	b.n	800907c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008d74:	4b6c      	ldr	r3, [pc, #432]	@ (8008f28 <HAL_RCC_OscConfig+0x4bc>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d0f0      	beq.n	8008d62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d108      	bne.n	8008d9a <HAL_RCC_OscConfig+0x32e>
 8008d88:	4b66      	ldr	r3, [pc, #408]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d8e:	4a65      	ldr	r2, [pc, #404]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008d90:	f043 0301 	orr.w	r3, r3, #1
 8008d94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008d98:	e024      	b.n	8008de4 <HAL_RCC_OscConfig+0x378>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	2b05      	cmp	r3, #5
 8008da0:	d110      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x358>
 8008da2:	4b60      	ldr	r3, [pc, #384]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da8:	4a5e      	ldr	r2, [pc, #376]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008daa:	f043 0304 	orr.w	r3, r3, #4
 8008dae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008db2:	4b5c      	ldr	r3, [pc, #368]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008db8:	4a5a      	ldr	r2, [pc, #360]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008dba:	f043 0301 	orr.w	r3, r3, #1
 8008dbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008dc2:	e00f      	b.n	8008de4 <HAL_RCC_OscConfig+0x378>
 8008dc4:	4b57      	ldr	r3, [pc, #348]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dca:	4a56      	ldr	r2, [pc, #344]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008dcc:	f023 0301 	bic.w	r3, r3, #1
 8008dd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008dd4:	4b53      	ldr	r3, [pc, #332]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008dda:	4a52      	ldr	r2, [pc, #328]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008ddc:	f023 0304 	bic.w	r3, r3, #4
 8008de0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	689b      	ldr	r3, [r3, #8]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d016      	beq.n	8008e1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dec:	f7fd fb12 	bl	8006414 <HAL_GetTick>
 8008df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008df2:	e00a      	b.n	8008e0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008df4:	f7fd fb0e 	bl	8006414 <HAL_GetTick>
 8008df8:	4602      	mov	r2, r0
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d901      	bls.n	8008e0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008e06:	2303      	movs	r3, #3
 8008e08:	e138      	b.n	800907c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e0a:	4b46      	ldr	r3, [pc, #280]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d0ed      	beq.n	8008df4 <HAL_RCC_OscConfig+0x388>
 8008e18:	e015      	b.n	8008e46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e1a:	f7fd fafb 	bl	8006414 <HAL_GetTick>
 8008e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e20:	e00a      	b.n	8008e38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e22:	f7fd faf7 	bl	8006414 <HAL_GetTick>
 8008e26:	4602      	mov	r2, r0
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	1ad3      	subs	r3, r2, r3
 8008e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d901      	bls.n	8008e38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e121      	b.n	800907c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008e38:	4b3a      	ldr	r3, [pc, #232]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1ed      	bne.n	8008e22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008e46:	7ffb      	ldrb	r3, [r7, #31]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d105      	bne.n	8008e58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e4c:	4b35      	ldr	r3, [pc, #212]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e50:	4a34      	ldr	r2, [pc, #208]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e56:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f003 0320 	and.w	r3, r3, #32
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d03c      	beq.n	8008ede <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01c      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e72:	4a2c      	ldr	r2, [pc, #176]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008e74:	f043 0301 	orr.w	r3, r3, #1
 8008e78:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e7c:	f7fd faca 	bl	8006414 <HAL_GetTick>
 8008e80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e82:	e008      	b.n	8008e96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e84:	f7fd fac6 	bl	8006414 <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b02      	cmp	r3, #2
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e0f2      	b.n	800907c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008e96:	4b23      	ldr	r3, [pc, #140]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008e98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008e9c:	f003 0302 	and.w	r3, r3, #2
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d0ef      	beq.n	8008e84 <HAL_RCC_OscConfig+0x418>
 8008ea4:	e01b      	b.n	8008ede <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008ea8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008eac:	4a1d      	ldr	r2, [pc, #116]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008eae:	f023 0301 	bic.w	r3, r3, #1
 8008eb2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eb6:	f7fd faad 	bl	8006414 <HAL_GetTick>
 8008eba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ebc:	e008      	b.n	8008ed0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008ebe:	f7fd faa9 	bl	8006414 <HAL_GetTick>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	1ad3      	subs	r3, r2, r3
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d901      	bls.n	8008ed0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e0d5      	b.n	800907c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008ed0:	4b14      	ldr	r3, [pc, #80]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ed6:	f003 0302 	and.w	r3, r3, #2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1ef      	bne.n	8008ebe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	f000 80c9 	beq.w	800907a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f003 030c 	and.w	r3, r3, #12
 8008ef0:	2b0c      	cmp	r3, #12
 8008ef2:	f000 8083 	beq.w	8008ffc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d15e      	bne.n	8008fbc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008efe:	4b09      	ldr	r3, [pc, #36]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a08      	ldr	r2, [pc, #32]	@ (8008f24 <HAL_RCC_OscConfig+0x4b8>)
 8008f04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f0a:	f7fd fa83 	bl	8006414 <HAL_GetTick>
 8008f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f10:	e00c      	b.n	8008f2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f12:	f7fd fa7f 	bl	8006414 <HAL_GetTick>
 8008f16:	4602      	mov	r2, r0
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	1ad3      	subs	r3, r2, r3
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d905      	bls.n	8008f2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008f20:	2303      	movs	r3, #3
 8008f22:	e0ab      	b.n	800907c <HAL_RCC_OscConfig+0x610>
 8008f24:	40021000 	.word	0x40021000
 8008f28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008f2c:	4b55      	ldr	r3, [pc, #340]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1ec      	bne.n	8008f12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f38:	4b52      	ldr	r3, [pc, #328]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	4b52      	ldr	r3, [pc, #328]	@ (8009088 <HAL_RCC_OscConfig+0x61c>)
 8008f3e:	4013      	ands	r3, r2
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	6a11      	ldr	r1, [r2, #32]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008f48:	3a01      	subs	r2, #1
 8008f4a:	0112      	lsls	r2, r2, #4
 8008f4c:	4311      	orrs	r1, r2
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008f52:	0212      	lsls	r2, r2, #8
 8008f54:	4311      	orrs	r1, r2
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008f5a:	0852      	lsrs	r2, r2, #1
 8008f5c:	3a01      	subs	r2, #1
 8008f5e:	0552      	lsls	r2, r2, #21
 8008f60:	4311      	orrs	r1, r2
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008f66:	0852      	lsrs	r2, r2, #1
 8008f68:	3a01      	subs	r2, #1
 8008f6a:	0652      	lsls	r2, r2, #25
 8008f6c:	4311      	orrs	r1, r2
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008f72:	06d2      	lsls	r2, r2, #27
 8008f74:	430a      	orrs	r2, r1
 8008f76:	4943      	ldr	r1, [pc, #268]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f7c:	4b41      	ldr	r3, [pc, #260]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a40      	ldr	r2, [pc, #256]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008f82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008f88:	4b3e      	ldr	r3, [pc, #248]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008f8a:	68db      	ldr	r3, [r3, #12]
 8008f8c:	4a3d      	ldr	r2, [pc, #244]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008f92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f94:	f7fd fa3e 	bl	8006414 <HAL_GetTick>
 8008f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f9a:	e008      	b.n	8008fae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f9c:	f7fd fa3a 	bl	8006414 <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d901      	bls.n	8008fae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e066      	b.n	800907c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fae:	4b35      	ldr	r3, [pc, #212]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0f0      	beq.n	8008f9c <HAL_RCC_OscConfig+0x530>
 8008fba:	e05e      	b.n	800907a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fbc:	4b31      	ldr	r3, [pc, #196]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a30      	ldr	r2, [pc, #192]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008fc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc8:	f7fd fa24 	bl	8006414 <HAL_GetTick>
 8008fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fce:	e008      	b.n	8008fe2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fd0:	f7fd fa20 	bl	8006414 <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e04c      	b.n	800907c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008fe2:	4b28      	ldr	r3, [pc, #160]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1f0      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008fee:	4b25      	ldr	r3, [pc, #148]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008ff0:	68da      	ldr	r2, [r3, #12]
 8008ff2:	4924      	ldr	r1, [pc, #144]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 8008ff4:	4b25      	ldr	r3, [pc, #148]	@ (800908c <HAL_RCC_OscConfig+0x620>)
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	60cb      	str	r3, [r1, #12]
 8008ffa:	e03e      	b.n	800907a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	69db      	ldr	r3, [r3, #28]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d101      	bne.n	8009008 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e039      	b.n	800907c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009008:	4b1e      	ldr	r3, [pc, #120]	@ (8009084 <HAL_RCC_OscConfig+0x618>)
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f003 0203 	and.w	r2, r3, #3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6a1b      	ldr	r3, [r3, #32]
 8009018:	429a      	cmp	r2, r3
 800901a:	d12c      	bne.n	8009076 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009026:	3b01      	subs	r3, #1
 8009028:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800902a:	429a      	cmp	r2, r3
 800902c:	d123      	bne.n	8009076 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009038:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800903a:	429a      	cmp	r2, r3
 800903c:	d11b      	bne.n	8009076 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009048:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800904a:	429a      	cmp	r2, r3
 800904c:	d113      	bne.n	8009076 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009058:	085b      	lsrs	r3, r3, #1
 800905a:	3b01      	subs	r3, #1
 800905c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800905e:	429a      	cmp	r2, r3
 8009060:	d109      	bne.n	8009076 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800906c:	085b      	lsrs	r3, r3, #1
 800906e:	3b01      	subs	r3, #1
 8009070:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009072:	429a      	cmp	r2, r3
 8009074:	d001      	beq.n	800907a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e000      	b.n	800907c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3720      	adds	r7, #32
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	40021000 	.word	0x40021000
 8009088:	019f800c 	.word	0x019f800c
 800908c:	feeefffc 	.word	0xfeeefffc

08009090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e11e      	b.n	80092e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090a8:	4b91      	ldr	r3, [pc, #580]	@ (80092f0 <HAL_RCC_ClockConfig+0x260>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f003 030f 	and.w	r3, r3, #15
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d910      	bls.n	80090d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090b6:	4b8e      	ldr	r3, [pc, #568]	@ (80092f0 <HAL_RCC_ClockConfig+0x260>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f023 020f 	bic.w	r2, r3, #15
 80090be:	498c      	ldr	r1, [pc, #560]	@ (80092f0 <HAL_RCC_ClockConfig+0x260>)
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090c6:	4b8a      	ldr	r3, [pc, #552]	@ (80092f0 <HAL_RCC_ClockConfig+0x260>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f003 030f 	and.w	r3, r3, #15
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d001      	beq.n	80090d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e106      	b.n	80092e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d073      	beq.n	80091cc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d129      	bne.n	8009140 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090ec:	4b81      	ldr	r3, [pc, #516]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d101      	bne.n	80090fc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e0f4      	b.n	80092e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80090fc:	f000 f99e 	bl	800943c <RCC_GetSysClockFreqFromPLLSource>
 8009100:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	4a7c      	ldr	r2, [pc, #496]	@ (80092f8 <HAL_RCC_ClockConfig+0x268>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d93f      	bls.n	800918a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800910a:	4b7a      	ldr	r3, [pc, #488]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d009      	beq.n	800912a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800911e:	2b00      	cmp	r3, #0
 8009120:	d033      	beq.n	800918a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009126:	2b00      	cmp	r3, #0
 8009128:	d12f      	bne.n	800918a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800912a:	4b72      	ldr	r3, [pc, #456]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009132:	4a70      	ldr	r2, [pc, #448]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 8009134:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009138:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800913a:	2380      	movs	r3, #128	@ 0x80
 800913c:	617b      	str	r3, [r7, #20]
 800913e:	e024      	b.n	800918a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	2b02      	cmp	r3, #2
 8009146:	d107      	bne.n	8009158 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009148:	4b6a      	ldr	r3, [pc, #424]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d109      	bne.n	8009168 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	e0c6      	b.n	80092e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009158:	4b66      	ldr	r3, [pc, #408]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	e0be      	b.n	80092e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009168:	f000 f8ce 	bl	8009308 <HAL_RCC_GetSysClockFreq>
 800916c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	4a61      	ldr	r2, [pc, #388]	@ (80092f8 <HAL_RCC_ClockConfig+0x268>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d909      	bls.n	800918a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009176:	4b5f      	ldr	r3, [pc, #380]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800917e:	4a5d      	ldr	r2, [pc, #372]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 8009180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009184:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8009186:	2380      	movs	r3, #128	@ 0x80
 8009188:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800918a:	4b5a      	ldr	r3, [pc, #360]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 800918c:	689b      	ldr	r3, [r3, #8]
 800918e:	f023 0203 	bic.w	r2, r3, #3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	4957      	ldr	r1, [pc, #348]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 8009198:	4313      	orrs	r3, r2
 800919a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800919c:	f7fd f93a 	bl	8006414 <HAL_GetTick>
 80091a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091a2:	e00a      	b.n	80091ba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091a4:	f7fd f936 	bl	8006414 <HAL_GetTick>
 80091a8:	4602      	mov	r2, r0
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d901      	bls.n	80091ba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80091b6:	2303      	movs	r3, #3
 80091b8:	e095      	b.n	80092e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091ba:	4b4e      	ldr	r3, [pc, #312]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	f003 020c 	and.w	r2, r3, #12
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	009b      	lsls	r3, r3, #2
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d1eb      	bne.n	80091a4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d023      	beq.n	8009220 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 0304 	and.w	r3, r3, #4
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d005      	beq.n	80091f0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091e4:	4b43      	ldr	r3, [pc, #268]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	4a42      	ldr	r2, [pc, #264]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 80091ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80091ee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0308 	and.w	r3, r3, #8
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d007      	beq.n	800920c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80091fc:	4b3d      	ldr	r3, [pc, #244]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009204:	4a3b      	ldr	r2, [pc, #236]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 8009206:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800920a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800920c:	4b39      	ldr	r3, [pc, #228]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	4936      	ldr	r1, [pc, #216]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 800921a:	4313      	orrs	r3, r2
 800921c:	608b      	str	r3, [r1, #8]
 800921e:	e008      	b.n	8009232 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2b80      	cmp	r3, #128	@ 0x80
 8009224:	d105      	bne.n	8009232 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009226:	4b33      	ldr	r3, [pc, #204]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	4a32      	ldr	r2, [pc, #200]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 800922c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009230:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009232:	4b2f      	ldr	r3, [pc, #188]	@ (80092f0 <HAL_RCC_ClockConfig+0x260>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 030f 	and.w	r3, r3, #15
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	429a      	cmp	r2, r3
 800923e:	d21d      	bcs.n	800927c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009240:	4b2b      	ldr	r3, [pc, #172]	@ (80092f0 <HAL_RCC_ClockConfig+0x260>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f023 020f 	bic.w	r2, r3, #15
 8009248:	4929      	ldr	r1, [pc, #164]	@ (80092f0 <HAL_RCC_ClockConfig+0x260>)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	4313      	orrs	r3, r2
 800924e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009250:	f7fd f8e0 	bl	8006414 <HAL_GetTick>
 8009254:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009256:	e00a      	b.n	800926e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009258:	f7fd f8dc 	bl	8006414 <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009266:	4293      	cmp	r3, r2
 8009268:	d901      	bls.n	800926e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e03b      	b.n	80092e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800926e:	4b20      	ldr	r3, [pc, #128]	@ (80092f0 <HAL_RCC_ClockConfig+0x260>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	429a      	cmp	r2, r3
 800927a:	d1ed      	bne.n	8009258 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0304 	and.w	r3, r3, #4
 8009284:	2b00      	cmp	r3, #0
 8009286:	d008      	beq.n	800929a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009288:	4b1a      	ldr	r3, [pc, #104]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	68db      	ldr	r3, [r3, #12]
 8009294:	4917      	ldr	r1, [pc, #92]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 8009296:	4313      	orrs	r3, r2
 8009298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 0308 	and.w	r3, r3, #8
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d009      	beq.n	80092ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80092a6:	4b13      	ldr	r3, [pc, #76]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	00db      	lsls	r3, r3, #3
 80092b4:	490f      	ldr	r1, [pc, #60]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80092ba:	f000 f825 	bl	8009308 <HAL_RCC_GetSysClockFreq>
 80092be:	4602      	mov	r2, r0
 80092c0:	4b0c      	ldr	r3, [pc, #48]	@ (80092f4 <HAL_RCC_ClockConfig+0x264>)
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	091b      	lsrs	r3, r3, #4
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	490c      	ldr	r1, [pc, #48]	@ (80092fc <HAL_RCC_ClockConfig+0x26c>)
 80092cc:	5ccb      	ldrb	r3, [r1, r3]
 80092ce:	f003 031f 	and.w	r3, r3, #31
 80092d2:	fa22 f303 	lsr.w	r3, r2, r3
 80092d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009300 <HAL_RCC_ClockConfig+0x270>)
 80092d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80092da:	4b0a      	ldr	r3, [pc, #40]	@ (8009304 <HAL_RCC_ClockConfig+0x274>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fd f84c 	bl	800637c <HAL_InitTick>
 80092e4:	4603      	mov	r3, r0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}
 80092ee:	bf00      	nop
 80092f0:	40022000 	.word	0x40022000
 80092f4:	40021000 	.word	0x40021000
 80092f8:	04c4b400 	.word	0x04c4b400
 80092fc:	080100a0 	.word	0x080100a0
 8009300:	20000134 	.word	0x20000134
 8009304:	20000138 	.word	0x20000138

08009308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009308:	b480      	push	{r7}
 800930a:	b087      	sub	sp, #28
 800930c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800930e:	4b2c      	ldr	r3, [pc, #176]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009310:	689b      	ldr	r3, [r3, #8]
 8009312:	f003 030c 	and.w	r3, r3, #12
 8009316:	2b04      	cmp	r3, #4
 8009318:	d102      	bne.n	8009320 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800931a:	4b2a      	ldr	r3, [pc, #168]	@ (80093c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800931c:	613b      	str	r3, [r7, #16]
 800931e:	e047      	b.n	80093b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009320:	4b27      	ldr	r3, [pc, #156]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009322:	689b      	ldr	r3, [r3, #8]
 8009324:	f003 030c 	and.w	r3, r3, #12
 8009328:	2b08      	cmp	r3, #8
 800932a:	d102      	bne.n	8009332 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800932c:	4b26      	ldr	r3, [pc, #152]	@ (80093c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800932e:	613b      	str	r3, [r7, #16]
 8009330:	e03e      	b.n	80093b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009332:	4b23      	ldr	r3, [pc, #140]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	f003 030c 	and.w	r3, r3, #12
 800933a:	2b0c      	cmp	r3, #12
 800933c:	d136      	bne.n	80093ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800933e:	4b20      	ldr	r3, [pc, #128]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f003 0303 	and.w	r3, r3, #3
 8009346:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009348:	4b1d      	ldr	r3, [pc, #116]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	091b      	lsrs	r3, r3, #4
 800934e:	f003 030f 	and.w	r3, r3, #15
 8009352:	3301      	adds	r3, #1
 8009354:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	2b03      	cmp	r3, #3
 800935a:	d10c      	bne.n	8009376 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800935c:	4a1a      	ldr	r2, [pc, #104]	@ (80093c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	fbb2 f3f3 	udiv	r3, r2, r3
 8009364:	4a16      	ldr	r2, [pc, #88]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009366:	68d2      	ldr	r2, [r2, #12]
 8009368:	0a12      	lsrs	r2, r2, #8
 800936a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800936e:	fb02 f303 	mul.w	r3, r2, r3
 8009372:	617b      	str	r3, [r7, #20]
      break;
 8009374:	e00c      	b.n	8009390 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009376:	4a13      	ldr	r2, [pc, #76]	@ (80093c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	fbb2 f3f3 	udiv	r3, r2, r3
 800937e:	4a10      	ldr	r2, [pc, #64]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009380:	68d2      	ldr	r2, [r2, #12]
 8009382:	0a12      	lsrs	r2, r2, #8
 8009384:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009388:	fb02 f303 	mul.w	r3, r2, r3
 800938c:	617b      	str	r3, [r7, #20]
      break;
 800938e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009390:	4b0b      	ldr	r3, [pc, #44]	@ (80093c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	0e5b      	lsrs	r3, r3, #25
 8009396:	f003 0303 	and.w	r3, r3, #3
 800939a:	3301      	adds	r3, #1
 800939c:	005b      	lsls	r3, r3, #1
 800939e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80093a8:	613b      	str	r3, [r7, #16]
 80093aa:	e001      	b.n	80093b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80093b0:	693b      	ldr	r3, [r7, #16]
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	371c      	adds	r7, #28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	40021000 	.word	0x40021000
 80093c4:	00f42400 	.word	0x00f42400
 80093c8:	016e3600 	.word	0x016e3600

080093cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80093d0:	4b03      	ldr	r3, [pc, #12]	@ (80093e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80093d2:	681b      	ldr	r3, [r3, #0]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	20000134 	.word	0x20000134

080093e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80093e8:	f7ff fff0 	bl	80093cc <HAL_RCC_GetHCLKFreq>
 80093ec:	4602      	mov	r2, r0
 80093ee:	4b06      	ldr	r3, [pc, #24]	@ (8009408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	0a1b      	lsrs	r3, r3, #8
 80093f4:	f003 0307 	and.w	r3, r3, #7
 80093f8:	4904      	ldr	r1, [pc, #16]	@ (800940c <HAL_RCC_GetPCLK1Freq+0x28>)
 80093fa:	5ccb      	ldrb	r3, [r1, r3]
 80093fc:	f003 031f 	and.w	r3, r3, #31
 8009400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009404:	4618      	mov	r0, r3
 8009406:	bd80      	pop	{r7, pc}
 8009408:	40021000 	.word	0x40021000
 800940c:	080100b0 	.word	0x080100b0

08009410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009414:	f7ff ffda 	bl	80093cc <HAL_RCC_GetHCLKFreq>
 8009418:	4602      	mov	r2, r0
 800941a:	4b06      	ldr	r3, [pc, #24]	@ (8009434 <HAL_RCC_GetPCLK2Freq+0x24>)
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	0adb      	lsrs	r3, r3, #11
 8009420:	f003 0307 	and.w	r3, r3, #7
 8009424:	4904      	ldr	r1, [pc, #16]	@ (8009438 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009426:	5ccb      	ldrb	r3, [r1, r3]
 8009428:	f003 031f 	and.w	r3, r3, #31
 800942c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009430:	4618      	mov	r0, r3
 8009432:	bd80      	pop	{r7, pc}
 8009434:	40021000 	.word	0x40021000
 8009438:	080100b0 	.word	0x080100b0

0800943c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009442:	4b1e      	ldr	r3, [pc, #120]	@ (80094bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f003 0303 	and.w	r3, r3, #3
 800944a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800944c:	4b1b      	ldr	r3, [pc, #108]	@ (80094bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	091b      	lsrs	r3, r3, #4
 8009452:	f003 030f 	and.w	r3, r3, #15
 8009456:	3301      	adds	r3, #1
 8009458:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	2b03      	cmp	r3, #3
 800945e:	d10c      	bne.n	800947a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009460:	4a17      	ldr	r2, [pc, #92]	@ (80094c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	fbb2 f3f3 	udiv	r3, r2, r3
 8009468:	4a14      	ldr	r2, [pc, #80]	@ (80094bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800946a:	68d2      	ldr	r2, [r2, #12]
 800946c:	0a12      	lsrs	r2, r2, #8
 800946e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009472:	fb02 f303 	mul.w	r3, r2, r3
 8009476:	617b      	str	r3, [r7, #20]
    break;
 8009478:	e00c      	b.n	8009494 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800947a:	4a12      	ldr	r2, [pc, #72]	@ (80094c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009482:	4a0e      	ldr	r2, [pc, #56]	@ (80094bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009484:	68d2      	ldr	r2, [r2, #12]
 8009486:	0a12      	lsrs	r2, r2, #8
 8009488:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800948c:	fb02 f303 	mul.w	r3, r2, r3
 8009490:	617b      	str	r3, [r7, #20]
    break;
 8009492:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009494:	4b09      	ldr	r3, [pc, #36]	@ (80094bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	0e5b      	lsrs	r3, r3, #25
 800949a:	f003 0303 	and.w	r3, r3, #3
 800949e:	3301      	adds	r3, #1
 80094a0:	005b      	lsls	r3, r3, #1
 80094a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80094a4:	697a      	ldr	r2, [r7, #20]
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80094ae:	687b      	ldr	r3, [r7, #4]
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	371c      	adds	r7, #28
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	40021000 	.word	0x40021000
 80094c0:	016e3600 	.word	0x016e3600
 80094c4:	00f42400 	.word	0x00f42400

080094c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b086      	sub	sp, #24
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80094d0:	2300      	movs	r3, #0
 80094d2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80094d4:	2300      	movs	r3, #0
 80094d6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 8098 	beq.w	8009616 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80094e6:	2300      	movs	r3, #0
 80094e8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80094ea:	4b43      	ldr	r3, [pc, #268]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10d      	bne.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80094f6:	4b40      	ldr	r3, [pc, #256]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094fa:	4a3f      	ldr	r2, [pc, #252]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80094fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009500:	6593      	str	r3, [r2, #88]	@ 0x58
 8009502:	4b3d      	ldr	r3, [pc, #244]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009504:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800950a:	60bb      	str	r3, [r7, #8]
 800950c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800950e:	2301      	movs	r3, #1
 8009510:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009512:	4b3a      	ldr	r3, [pc, #232]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a39      	ldr	r2, [pc, #228]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800951c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800951e:	f7fc ff79 	bl	8006414 <HAL_GetTick>
 8009522:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009524:	e009      	b.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009526:	f7fc ff75 	bl	8006414 <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	2b02      	cmp	r3, #2
 8009532:	d902      	bls.n	800953a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009534:	2303      	movs	r3, #3
 8009536:	74fb      	strb	r3, [r7, #19]
        break;
 8009538:	e005      	b.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800953a:	4b30      	ldr	r3, [pc, #192]	@ (80095fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009542:	2b00      	cmp	r3, #0
 8009544:	d0ef      	beq.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009546:	7cfb      	ldrb	r3, [r7, #19]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d159      	bne.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800954c:	4b2a      	ldr	r3, [pc, #168]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800954e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009556:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d01e      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	429a      	cmp	r2, r3
 8009566:	d019      	beq.n	800959c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009568:	4b23      	ldr	r3, [pc, #140]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800956a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009572:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009574:	4b20      	ldr	r3, [pc, #128]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009576:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800957a:	4a1f      	ldr	r2, [pc, #124]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800957c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009580:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009584:	4b1c      	ldr	r3, [pc, #112]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800958a:	4a1b      	ldr	r2, [pc, #108]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800958c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009590:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009594:	4a18      	ldr	r2, [pc, #96]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d016      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a6:	f7fc ff35 	bl	8006414 <HAL_GetTick>
 80095aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095ac:	e00b      	b.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ae:	f7fc ff31 	bl	8006414 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095bc:	4293      	cmp	r3, r2
 80095be:	d902      	bls.n	80095c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80095c0:	2303      	movs	r3, #3
 80095c2:	74fb      	strb	r3, [r7, #19]
            break;
 80095c4:	e006      	b.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80095c6:	4b0c      	ldr	r3, [pc, #48]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095cc:	f003 0302 	and.w	r3, r3, #2
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0ec      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80095d4:	7cfb      	ldrb	r3, [r7, #19]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d10b      	bne.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095da:	4b07      	ldr	r3, [pc, #28]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095e8:	4903      	ldr	r1, [pc, #12]	@ (80095f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80095f0:	e008      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80095f2:	7cfb      	ldrb	r3, [r7, #19]
 80095f4:	74bb      	strb	r3, [r7, #18]
 80095f6:	e005      	b.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80095f8:	40021000 	.word	0x40021000
 80095fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009600:	7cfb      	ldrb	r3, [r7, #19]
 8009602:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009604:	7c7b      	ldrb	r3, [r7, #17]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d105      	bne.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800960a:	4ba7      	ldr	r3, [pc, #668]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800960c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800960e:	4aa6      	ldr	r2, [pc, #664]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009614:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d00a      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009622:	4ba1      	ldr	r3, [pc, #644]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009628:	f023 0203 	bic.w	r2, r3, #3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	499d      	ldr	r1, [pc, #628]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009632:	4313      	orrs	r3, r2
 8009634:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00a      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009644:	4b98      	ldr	r3, [pc, #608]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800964a:	f023 020c 	bic.w	r2, r3, #12
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	4995      	ldr	r1, [pc, #596]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009654:	4313      	orrs	r3, r2
 8009656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0304 	and.w	r3, r3, #4
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00a      	beq.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009666:	4b90      	ldr	r3, [pc, #576]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800966c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	498c      	ldr	r1, [pc, #560]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009676:	4313      	orrs	r3, r2
 8009678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0308 	and.w	r3, r3, #8
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00a      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009688:	4b87      	ldr	r3, [pc, #540]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800968a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800968e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	4984      	ldr	r1, [pc, #528]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009698:	4313      	orrs	r3, r2
 800969a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0310 	and.w	r3, r3, #16
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80096aa:	4b7f      	ldr	r3, [pc, #508]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	497b      	ldr	r1, [pc, #492]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0320 	and.w	r3, r3, #32
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00a      	beq.n	80096e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096cc:	4b76      	ldr	r3, [pc, #472]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	4973      	ldr	r1, [pc, #460]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00a      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80096ee:	4b6e      	ldr	r3, [pc, #440]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	69db      	ldr	r3, [r3, #28]
 80096fc:	496a      	ldr	r1, [pc, #424]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096fe:	4313      	orrs	r3, r2
 8009700:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00a      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009710:	4b65      	ldr	r3, [pc, #404]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009716:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	4962      	ldr	r1, [pc, #392]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009720:	4313      	orrs	r3, r2
 8009722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800972e:	2b00      	cmp	r3, #0
 8009730:	d00a      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009732:	4b5d      	ldr	r3, [pc, #372]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009738:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009740:	4959      	ldr	r1, [pc, #356]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009742:	4313      	orrs	r3, r2
 8009744:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009750:	2b00      	cmp	r3, #0
 8009752:	d00a      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009754:	4b54      	ldr	r3, [pc, #336]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009756:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800975a:	f023 0203 	bic.w	r2, r3, #3
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009762:	4951      	ldr	r1, [pc, #324]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009764:	4313      	orrs	r3, r2
 8009766:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00a      	beq.n	800978c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009776:	4b4c      	ldr	r3, [pc, #304]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800977c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009784:	4948      	ldr	r1, [pc, #288]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009786:	4313      	orrs	r3, r2
 8009788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009794:	2b00      	cmp	r3, #0
 8009796:	d015      	beq.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009798:	4b43      	ldr	r3, [pc, #268]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800979a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800979e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097a6:	4940      	ldr	r1, [pc, #256]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097a8:	4313      	orrs	r3, r2
 80097aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097b6:	d105      	bne.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097b8:	4b3b      	ldr	r3, [pc, #236]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ba:	68db      	ldr	r3, [r3, #12]
 80097bc:	4a3a      	ldr	r2, [pc, #232]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097c2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d015      	beq.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80097d0:	4b35      	ldr	r3, [pc, #212]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097d6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097de:	4932      	ldr	r1, [pc, #200]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e0:	4313      	orrs	r3, r2
 80097e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80097ee:	d105      	bne.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097f0:	4b2d      	ldr	r3, [pc, #180]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	4a2c      	ldr	r2, [pc, #176]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80097fa:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d015      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009808:	4b27      	ldr	r3, [pc, #156]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800980a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800980e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009816:	4924      	ldr	r1, [pc, #144]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009818:	4313      	orrs	r3, r2
 800981a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009822:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009826:	d105      	bne.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009828:	4b1f      	ldr	r3, [pc, #124]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	4a1e      	ldr	r2, [pc, #120]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800982e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009832:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800983c:	2b00      	cmp	r3, #0
 800983e:	d015      	beq.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009840:	4b19      	ldr	r3, [pc, #100]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009846:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800984e:	4916      	ldr	r1, [pc, #88]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009850:	4313      	orrs	r3, r2
 8009852:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800985a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800985e:	d105      	bne.n	800986c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009860:	4b11      	ldr	r3, [pc, #68]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	4a10      	ldr	r2, [pc, #64]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009866:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800986a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009874:	2b00      	cmp	r3, #0
 8009876:	d019      	beq.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009878:	4b0b      	ldr	r3, [pc, #44]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800987a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800987e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009886:	4908      	ldr	r1, [pc, #32]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009888:	4313      	orrs	r3, r2
 800988a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009896:	d109      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009898:	4b03      	ldr	r3, [pc, #12]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	4a02      	ldr	r2, [pc, #8]	@ (80098a8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800989e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098a2:	60d3      	str	r3, [r2, #12]
 80098a4:	e002      	b.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80098a6:	bf00      	nop
 80098a8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d015      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80098b8:	4b29      	ldr	r3, [pc, #164]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098c6:	4926      	ldr	r1, [pc, #152]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098c8:	4313      	orrs	r3, r2
 80098ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098d6:	d105      	bne.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80098d8:	4b21      	ldr	r3, [pc, #132]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	4a20      	ldr	r2, [pc, #128]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80098e2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d015      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80098f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80098f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098f6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098fe:	4918      	ldr	r1, [pc, #96]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009900:	4313      	orrs	r3, r2
 8009902:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800990a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990e:	d105      	bne.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009910:	4b13      	ldr	r3, [pc, #76]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	4a12      	ldr	r2, [pc, #72]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009916:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800991a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d015      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009928:	4b0d      	ldr	r3, [pc, #52]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800992a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800992e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009936:	490a      	ldr	r1, [pc, #40]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009938:	4313      	orrs	r3, r2
 800993a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009942:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009946:	d105      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009948:	4b05      	ldr	r3, [pc, #20]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	4a04      	ldr	r2, [pc, #16]	@ (8009960 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800994e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009952:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009954:	7cbb      	ldrb	r3, [r7, #18]
}
 8009956:	4618      	mov	r0, r3
 8009958:	3718      	adds	r7, #24
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}
 800995e:	bf00      	nop
 8009960:	40021000 	.word	0x40021000

08009964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d101      	bne.n	8009976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e054      	b.n	8009a20 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d111      	bne.n	80099a6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 fee2 	bl	800b754 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009994:	2b00      	cmp	r3, #0
 8009996:	d102      	bne.n	800999e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a23      	ldr	r2, [pc, #140]	@ (8009a28 <HAL_TIM_Base_Init+0xc4>)
 800999c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2202      	movs	r2, #2
 80099aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	3304      	adds	r3, #4
 80099b6:	4619      	mov	r1, r3
 80099b8:	4610      	mov	r0, r2
 80099ba:	f001 fa2b 	bl	800ae14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2201      	movs	r2, #1
 80099c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2201      	movs	r2, #1
 80099ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2201      	movs	r2, #1
 80099d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2201      	movs	r2, #1
 80099da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2201      	movs	r2, #1
 80099fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2201      	movs	r2, #1
 8009a02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3708      	adds	r7, #8
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	08005c3d 	.word	0x08005c3d

08009a2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d001      	beq.n	8009a44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	e04c      	b.n	8009ade <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a26      	ldr	r2, [pc, #152]	@ (8009aec <HAL_TIM_Base_Start+0xc0>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d022      	beq.n	8009a9c <HAL_TIM_Base_Start+0x70>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a5e:	d01d      	beq.n	8009a9c <HAL_TIM_Base_Start+0x70>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a22      	ldr	r2, [pc, #136]	@ (8009af0 <HAL_TIM_Base_Start+0xc4>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d018      	beq.n	8009a9c <HAL_TIM_Base_Start+0x70>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a21      	ldr	r2, [pc, #132]	@ (8009af4 <HAL_TIM_Base_Start+0xc8>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d013      	beq.n	8009a9c <HAL_TIM_Base_Start+0x70>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a1f      	ldr	r2, [pc, #124]	@ (8009af8 <HAL_TIM_Base_Start+0xcc>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d00e      	beq.n	8009a9c <HAL_TIM_Base_Start+0x70>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a1e      	ldr	r2, [pc, #120]	@ (8009afc <HAL_TIM_Base_Start+0xd0>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d009      	beq.n	8009a9c <HAL_TIM_Base_Start+0x70>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8009b00 <HAL_TIM_Base_Start+0xd4>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d004      	beq.n	8009a9c <HAL_TIM_Base_Start+0x70>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a1b      	ldr	r2, [pc, #108]	@ (8009b04 <HAL_TIM_Base_Start+0xd8>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d115      	bne.n	8009ac8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	689a      	ldr	r2, [r3, #8]
 8009aa2:	4b19      	ldr	r3, [pc, #100]	@ (8009b08 <HAL_TIM_Base_Start+0xdc>)
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2b06      	cmp	r3, #6
 8009aac:	d015      	beq.n	8009ada <HAL_TIM_Base_Start+0xae>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ab4:	d011      	beq.n	8009ada <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f042 0201 	orr.w	r2, r2, #1
 8009ac4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac6:	e008      	b.n	8009ada <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0201 	orr.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
 8009ad8:	e000      	b.n	8009adc <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ada:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009adc:	2300      	movs	r3, #0
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	3714      	adds	r7, #20
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr
 8009aea:	bf00      	nop
 8009aec:	40012c00 	.word	0x40012c00
 8009af0:	40000400 	.word	0x40000400
 8009af4:	40000800 	.word	0x40000800
 8009af8:	40000c00 	.word	0x40000c00
 8009afc:	40013400 	.word	0x40013400
 8009b00:	40014000 	.word	0x40014000
 8009b04:	40015000 	.word	0x40015000
 8009b08:	00010007 	.word	0x00010007

08009b0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d001      	beq.n	8009b24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	e054      	b.n	8009bce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2202      	movs	r2, #2
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68da      	ldr	r2, [r3, #12]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f042 0201 	orr.w	r2, r2, #1
 8009b3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a26      	ldr	r2, [pc, #152]	@ (8009bdc <HAL_TIM_Base_Start_IT+0xd0>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d022      	beq.n	8009b8c <HAL_TIM_Base_Start_IT+0x80>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b4e:	d01d      	beq.n	8009b8c <HAL_TIM_Base_Start_IT+0x80>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4a22      	ldr	r2, [pc, #136]	@ (8009be0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d018      	beq.n	8009b8c <HAL_TIM_Base_Start_IT+0x80>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a21      	ldr	r2, [pc, #132]	@ (8009be4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d013      	beq.n	8009b8c <HAL_TIM_Base_Start_IT+0x80>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a1f      	ldr	r2, [pc, #124]	@ (8009be8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d00e      	beq.n	8009b8c <HAL_TIM_Base_Start_IT+0x80>
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a1e      	ldr	r2, [pc, #120]	@ (8009bec <HAL_TIM_Base_Start_IT+0xe0>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d009      	beq.n	8009b8c <HAL_TIM_Base_Start_IT+0x80>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8009bf0 <HAL_TIM_Base_Start_IT+0xe4>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d004      	beq.n	8009b8c <HAL_TIM_Base_Start_IT+0x80>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4a1b      	ldr	r2, [pc, #108]	@ (8009bf4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d115      	bne.n	8009bb8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	689a      	ldr	r2, [r3, #8]
 8009b92:	4b19      	ldr	r3, [pc, #100]	@ (8009bf8 <HAL_TIM_Base_Start_IT+0xec>)
 8009b94:	4013      	ands	r3, r2
 8009b96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2b06      	cmp	r3, #6
 8009b9c:	d015      	beq.n	8009bca <HAL_TIM_Base_Start_IT+0xbe>
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ba4:	d011      	beq.n	8009bca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f042 0201 	orr.w	r2, r2, #1
 8009bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bb6:	e008      	b.n	8009bca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f042 0201 	orr.w	r2, r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	e000      	b.n	8009bcc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	40012c00 	.word	0x40012c00
 8009be0:	40000400 	.word	0x40000400
 8009be4:	40000800 	.word	0x40000800
 8009be8:	40000c00 	.word	0x40000c00
 8009bec:	40013400 	.word	0x40013400
 8009bf0:	40014000 	.word	0x40014000
 8009bf4:	40015000 	.word	0x40015000
 8009bf8:	00010007 	.word	0x00010007

08009bfc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b082      	sub	sp, #8
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e054      	b.n	8009cb8 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c14:	b2db      	uxtb	r3, r3
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d111      	bne.n	8009c3e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009c22:	6878      	ldr	r0, [r7, #4]
 8009c24:	f001 fd96 	bl	800b754 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d102      	bne.n	8009c36 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a23      	ldr	r2, [pc, #140]	@ (8009cc0 <HAL_TIM_PWM_Init+0xc4>)
 8009c34:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2202      	movs	r2, #2
 8009c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	4619      	mov	r1, r3
 8009c50:	4610      	mov	r0, r2
 8009c52:	f001 f8df 	bl	800ae14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2201      	movs	r2, #1
 8009c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2201      	movs	r2, #1
 8009c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2201      	movs	r2, #1
 8009c8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2201      	movs	r2, #1
 8009c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2201      	movs	r2, #1
 8009caa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}
 8009cc0:	08005bf1 	.word	0x08005bf1

08009cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d109      	bne.n	8009ce8 <HAL_TIM_PWM_Start+0x24>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	bf14      	ite	ne
 8009ce0:	2301      	movne	r3, #1
 8009ce2:	2300      	moveq	r3, #0
 8009ce4:	b2db      	uxtb	r3, r3
 8009ce6:	e03c      	b.n	8009d62 <HAL_TIM_PWM_Start+0x9e>
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	2b04      	cmp	r3, #4
 8009cec:	d109      	bne.n	8009d02 <HAL_TIM_PWM_Start+0x3e>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	bf14      	ite	ne
 8009cfa:	2301      	movne	r3, #1
 8009cfc:	2300      	moveq	r3, #0
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	e02f      	b.n	8009d62 <HAL_TIM_PWM_Start+0x9e>
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d109      	bne.n	8009d1c <HAL_TIM_PWM_Start+0x58>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	bf14      	ite	ne
 8009d14:	2301      	movne	r3, #1
 8009d16:	2300      	moveq	r3, #0
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	e022      	b.n	8009d62 <HAL_TIM_PWM_Start+0x9e>
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	2b0c      	cmp	r3, #12
 8009d20:	d109      	bne.n	8009d36 <HAL_TIM_PWM_Start+0x72>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	bf14      	ite	ne
 8009d2e:	2301      	movne	r3, #1
 8009d30:	2300      	moveq	r3, #0
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	e015      	b.n	8009d62 <HAL_TIM_PWM_Start+0x9e>
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	2b10      	cmp	r3, #16
 8009d3a:	d109      	bne.n	8009d50 <HAL_TIM_PWM_Start+0x8c>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	bf14      	ite	ne
 8009d48:	2301      	movne	r3, #1
 8009d4a:	2300      	moveq	r3, #0
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	e008      	b.n	8009d62 <HAL_TIM_PWM_Start+0x9e>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	bf14      	ite	ne
 8009d5c:	2301      	movne	r3, #1
 8009d5e:	2300      	moveq	r3, #0
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d001      	beq.n	8009d6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009d66:	2301      	movs	r3, #1
 8009d68:	e0a6      	b.n	8009eb8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d104      	bne.n	8009d7a <HAL_TIM_PWM_Start+0xb6>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2202      	movs	r2, #2
 8009d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d78:	e023      	b.n	8009dc2 <HAL_TIM_PWM_Start+0xfe>
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	2b04      	cmp	r3, #4
 8009d7e:	d104      	bne.n	8009d8a <HAL_TIM_PWM_Start+0xc6>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2202      	movs	r2, #2
 8009d84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009d88:	e01b      	b.n	8009dc2 <HAL_TIM_PWM_Start+0xfe>
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	2b08      	cmp	r3, #8
 8009d8e:	d104      	bne.n	8009d9a <HAL_TIM_PWM_Start+0xd6>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2202      	movs	r2, #2
 8009d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009d98:	e013      	b.n	8009dc2 <HAL_TIM_PWM_Start+0xfe>
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b0c      	cmp	r3, #12
 8009d9e:	d104      	bne.n	8009daa <HAL_TIM_PWM_Start+0xe6>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009da8:	e00b      	b.n	8009dc2 <HAL_TIM_PWM_Start+0xfe>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b10      	cmp	r3, #16
 8009dae:	d104      	bne.n	8009dba <HAL_TIM_PWM_Start+0xf6>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009db8:	e003      	b.n	8009dc2 <HAL_TIM_PWM_Start+0xfe>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2202      	movs	r2, #2
 8009dbe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	6839      	ldr	r1, [r7, #0]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f001 fc9c 	bl	800b708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a3a      	ldr	r2, [pc, #232]	@ (8009ec0 <HAL_TIM_PWM_Start+0x1fc>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d018      	beq.n	8009e0c <HAL_TIM_PWM_Start+0x148>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a39      	ldr	r2, [pc, #228]	@ (8009ec4 <HAL_TIM_PWM_Start+0x200>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d013      	beq.n	8009e0c <HAL_TIM_PWM_Start+0x148>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a37      	ldr	r2, [pc, #220]	@ (8009ec8 <HAL_TIM_PWM_Start+0x204>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d00e      	beq.n	8009e0c <HAL_TIM_PWM_Start+0x148>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a36      	ldr	r2, [pc, #216]	@ (8009ecc <HAL_TIM_PWM_Start+0x208>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d009      	beq.n	8009e0c <HAL_TIM_PWM_Start+0x148>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a34      	ldr	r2, [pc, #208]	@ (8009ed0 <HAL_TIM_PWM_Start+0x20c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d004      	beq.n	8009e0c <HAL_TIM_PWM_Start+0x148>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a33      	ldr	r2, [pc, #204]	@ (8009ed4 <HAL_TIM_PWM_Start+0x210>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d101      	bne.n	8009e10 <HAL_TIM_PWM_Start+0x14c>
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e000      	b.n	8009e12 <HAL_TIM_PWM_Start+0x14e>
 8009e10:	2300      	movs	r3, #0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a25      	ldr	r2, [pc, #148]	@ (8009ec0 <HAL_TIM_PWM_Start+0x1fc>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d022      	beq.n	8009e76 <HAL_TIM_PWM_Start+0x1b2>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e38:	d01d      	beq.n	8009e76 <HAL_TIM_PWM_Start+0x1b2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a26      	ldr	r2, [pc, #152]	@ (8009ed8 <HAL_TIM_PWM_Start+0x214>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d018      	beq.n	8009e76 <HAL_TIM_PWM_Start+0x1b2>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a24      	ldr	r2, [pc, #144]	@ (8009edc <HAL_TIM_PWM_Start+0x218>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d013      	beq.n	8009e76 <HAL_TIM_PWM_Start+0x1b2>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a23      	ldr	r2, [pc, #140]	@ (8009ee0 <HAL_TIM_PWM_Start+0x21c>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d00e      	beq.n	8009e76 <HAL_TIM_PWM_Start+0x1b2>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a19      	ldr	r2, [pc, #100]	@ (8009ec4 <HAL_TIM_PWM_Start+0x200>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d009      	beq.n	8009e76 <HAL_TIM_PWM_Start+0x1b2>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a18      	ldr	r2, [pc, #96]	@ (8009ec8 <HAL_TIM_PWM_Start+0x204>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d004      	beq.n	8009e76 <HAL_TIM_PWM_Start+0x1b2>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a18      	ldr	r2, [pc, #96]	@ (8009ed4 <HAL_TIM_PWM_Start+0x210>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d115      	bne.n	8009ea2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	689a      	ldr	r2, [r3, #8]
 8009e7c:	4b19      	ldr	r3, [pc, #100]	@ (8009ee4 <HAL_TIM_PWM_Start+0x220>)
 8009e7e:	4013      	ands	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2b06      	cmp	r3, #6
 8009e86:	d015      	beq.n	8009eb4 <HAL_TIM_PWM_Start+0x1f0>
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e8e:	d011      	beq.n	8009eb4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f042 0201 	orr.w	r2, r2, #1
 8009e9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ea0:	e008      	b.n	8009eb4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f042 0201 	orr.w	r2, r2, #1
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	e000      	b.n	8009eb6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eb4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	40012c00 	.word	0x40012c00
 8009ec4:	40013400 	.word	0x40013400
 8009ec8:	40014000 	.word	0x40014000
 8009ecc:	40014400 	.word	0x40014400
 8009ed0:	40014800 	.word	0x40014800
 8009ed4:	40015000 	.word	0x40015000
 8009ed8:	40000400 	.word	0x40000400
 8009edc:	40000800 	.word	0x40000800
 8009ee0:	40000c00 	.word	0x40000c00
 8009ee4:	00010007 	.word	0x00010007

08009ee8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d101      	bne.n	8009efc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e04c      	b.n	8009f96 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d111      	bne.n	8009f2c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 fc1f 	bl	800b754 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d102      	bne.n	8009f24 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a1f      	ldr	r2, [pc, #124]	@ (8009fa0 <HAL_TIM_OnePulse_Init+0xb8>)
 8009f22:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2202      	movs	r2, #2
 8009f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	3304      	adds	r3, #4
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	4610      	mov	r0, r2
 8009f40:	f000 ff68 	bl	800ae14 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f022 0208 	bic.w	r2, r2, #8
 8009f52:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	6819      	ldr	r1, [r3, #0]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	430a      	orrs	r2, r1
 8009f62:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2201      	movs	r2, #1
 8009f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	08009fa5 	.word	0x08009fa5

08009fa4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b084      	sub	sp, #16
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009fc8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009fd0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009fd8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fe0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d108      	bne.n	8009ffa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fe8:	7bbb      	ldrb	r3, [r7, #14]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	d105      	bne.n	8009ffa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fee:	7b7b      	ldrb	r3, [r7, #13]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d102      	bne.n	8009ffa <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ff4:	7b3b      	ldrb	r3, [r7, #12]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d001      	beq.n	8009ffe <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	e059      	b.n	800a0b2 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2202      	movs	r2, #2
 800a002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2202      	movs	r2, #2
 800a00a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2202      	movs	r2, #2
 800a012:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2202      	movs	r2, #2
 800a01a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	68da      	ldr	r2, [r3, #12]
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f042 0202 	orr.w	r2, r2, #2
 800a02c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	68da      	ldr	r2, [r3, #12]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f042 0204 	orr.w	r2, r2, #4
 800a03c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2201      	movs	r2, #1
 800a044:	2100      	movs	r1, #0
 800a046:	4618      	mov	r0, r3
 800a048:	f001 fb5e 	bl	800b708 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	2201      	movs	r2, #1
 800a052:	2104      	movs	r1, #4
 800a054:	4618      	mov	r0, r3
 800a056:	f001 fb57 	bl	800b708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a17      	ldr	r2, [pc, #92]	@ (800a0bc <HAL_TIM_OnePulse_Start_IT+0x104>)
 800a060:	4293      	cmp	r3, r2
 800a062:	d018      	beq.n	800a096 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4a15      	ldr	r2, [pc, #84]	@ (800a0c0 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d013      	beq.n	800a096 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a14      	ldr	r2, [pc, #80]	@ (800a0c4 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800a074:	4293      	cmp	r3, r2
 800a076:	d00e      	beq.n	800a096 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	4a12      	ldr	r2, [pc, #72]	@ (800a0c8 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	d009      	beq.n	800a096 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a11      	ldr	r2, [pc, #68]	@ (800a0cc <HAL_TIM_OnePulse_Start_IT+0x114>)
 800a088:	4293      	cmp	r3, r2
 800a08a:	d004      	beq.n	800a096 <HAL_TIM_OnePulse_Start_IT+0xde>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a0f      	ldr	r2, [pc, #60]	@ (800a0d0 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800a092:	4293      	cmp	r3, r2
 800a094:	d101      	bne.n	800a09a <HAL_TIM_OnePulse_Start_IT+0xe2>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d007      	beq.n	800a0b0 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	40012c00 	.word	0x40012c00
 800a0c0:	40013400 	.word	0x40013400
 800a0c4:	40014000 	.word	0x40014000
 800a0c8:	40014400 	.word	0x40014400
 800a0cc:	40014800 	.word	0x40014800
 800a0d0:	40015000 	.word	0x40015000

0800a0d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e0a2      	b.n	800a22e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d111      	bne.n	800a118 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f001 fb29 	bl	800b754 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a106:	2b00      	cmp	r3, #0
 800a108:	d102      	bne.n	800a110 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	4a4a      	ldr	r2, [pc, #296]	@ (800a238 <HAL_TIM_Encoder_Init+0x164>)
 800a10e:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	6812      	ldr	r2, [r2, #0]
 800a12a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800a12e:	f023 0307 	bic.w	r3, r3, #7
 800a132:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681a      	ldr	r2, [r3, #0]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3304      	adds	r3, #4
 800a13c:	4619      	mov	r1, r3
 800a13e:	4610      	mov	r0, r2
 800a140:	f000 fe68 	bl	800ae14 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	697a      	ldr	r2, [r7, #20]
 800a162:	4313      	orrs	r3, r2
 800a164:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a16c:	f023 0303 	bic.w	r3, r3, #3
 800a170:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	689a      	ldr	r2, [r3, #8]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	021b      	lsls	r3, r3, #8
 800a17c:	4313      	orrs	r3, r2
 800a17e:	693a      	ldr	r2, [r7, #16]
 800a180:	4313      	orrs	r3, r2
 800a182:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a18a:	f023 030c 	bic.w	r3, r3, #12
 800a18e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a196:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a19a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	68da      	ldr	r2, [r3, #12]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	021b      	lsls	r3, r3, #8
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	693a      	ldr	r2, [r7, #16]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	011a      	lsls	r2, r3, #4
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	031b      	lsls	r3, r3, #12
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	693a      	ldr	r2, [r7, #16]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800a1c8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800a1d0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	011b      	lsls	r3, r3, #4
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	4313      	orrs	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2201      	movs	r2, #1
 800a228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3718      	adds	r7, #24
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	08005ce5 	.word	0x08005ce5

0800a23c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a24c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a254:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a25c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a264:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d110      	bne.n	800a28e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a26c:	7bfb      	ldrb	r3, [r7, #15]
 800a26e:	2b01      	cmp	r3, #1
 800a270:	d102      	bne.n	800a278 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a272:	7b7b      	ldrb	r3, [r7, #13]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d001      	beq.n	800a27c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e069      	b.n	800a350 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2202      	movs	r2, #2
 800a280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2202      	movs	r2, #2
 800a288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a28c:	e031      	b.n	800a2f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	2b04      	cmp	r3, #4
 800a292:	d110      	bne.n	800a2b6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a294:	7bbb      	ldrb	r3, [r7, #14]
 800a296:	2b01      	cmp	r3, #1
 800a298:	d102      	bne.n	800a2a0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a29a:	7b3b      	ldrb	r3, [r7, #12]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d001      	beq.n	800a2a4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e055      	b.n	800a350 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2202      	movs	r2, #2
 800a2a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2b4:	e01d      	b.n	800a2f2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2b6:	7bfb      	ldrb	r3, [r7, #15]
 800a2b8:	2b01      	cmp	r3, #1
 800a2ba:	d108      	bne.n	800a2ce <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d105      	bne.n	800a2ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a2c2:	7b7b      	ldrb	r3, [r7, #13]
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d102      	bne.n	800a2ce <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a2c8:	7b3b      	ldrb	r3, [r7, #12]
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d001      	beq.n	800a2d2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	e03e      	b.n	800a350 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2202      	movs	r2, #2
 800a2d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2202      	movs	r2, #2
 800a2de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2202      	movs	r2, #2
 800a2e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2202      	movs	r2, #2
 800a2ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d003      	beq.n	800a300 <HAL_TIM_Encoder_Start+0xc4>
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	d008      	beq.n	800a310 <HAL_TIM_Encoder_Start+0xd4>
 800a2fe:	e00f      	b.n	800a320 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2201      	movs	r2, #1
 800a306:	2100      	movs	r1, #0
 800a308:	4618      	mov	r0, r3
 800a30a:	f001 f9fd 	bl	800b708 <TIM_CCxChannelCmd>
      break;
 800a30e:	e016      	b.n	800a33e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2201      	movs	r2, #1
 800a316:	2104      	movs	r1, #4
 800a318:	4618      	mov	r0, r3
 800a31a:	f001 f9f5 	bl	800b708 <TIM_CCxChannelCmd>
      break;
 800a31e:	e00e      	b.n	800a33e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	2201      	movs	r2, #1
 800a326:	2100      	movs	r1, #0
 800a328:	4618      	mov	r0, r3
 800a32a:	f001 f9ed 	bl	800b708 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	2201      	movs	r2, #1
 800a334:	2104      	movs	r1, #4
 800a336:	4618      	mov	r0, r3
 800a338:	f001 f9e6 	bl	800b708 <TIM_CCxChannelCmd>
      break;
 800a33c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f042 0201 	orr.w	r2, r2, #1
 800a34c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	f003 0302 	and.w	r3, r3, #2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d026      	beq.n	800a3c8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f003 0302 	and.w	r3, r3, #2
 800a380:	2b00      	cmp	r3, #0
 800a382:	d021      	beq.n	800a3c8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0202 	mvn.w	r2, #2
 800a38c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2201      	movs	r2, #1
 800a392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	f003 0303 	and.w	r3, r3, #3
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d005      	beq.n	800a3ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
 800a3ac:	e009      	b.n	800a3c2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	f003 0304 	and.w	r3, r3, #4
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d026      	beq.n	800a420 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	f003 0304 	and.w	r3, r3, #4
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d021      	beq.n	800a420 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f06f 0204 	mvn.w	r2, #4
 800a3e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2202      	movs	r2, #2
 800a3ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d005      	beq.n	800a406 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	4798      	blx	r3
 800a404:	e009      	b.n	800a41a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	f003 0308 	and.w	r3, r3, #8
 800a426:	2b00      	cmp	r3, #0
 800a428:	d026      	beq.n	800a478 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f003 0308 	and.w	r3, r3, #8
 800a430:	2b00      	cmp	r3, #0
 800a432:	d021      	beq.n	800a478 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f06f 0208 	mvn.w	r2, #8
 800a43c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2204      	movs	r2, #4
 800a442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	69db      	ldr	r3, [r3, #28]
 800a44a:	f003 0303 	and.w	r3, r3, #3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d005      	beq.n	800a45e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	4798      	blx	r3
 800a45c:	e009      	b.n	800a472 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f003 0310 	and.w	r3, r3, #16
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d026      	beq.n	800a4d0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f003 0310 	and.w	r3, r3, #16
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d021      	beq.n	800a4d0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f06f 0210 	mvn.w	r2, #16
 800a494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2208      	movs	r2, #8
 800a49a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	69db      	ldr	r3, [r3, #28]
 800a4a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d005      	beq.n	800a4b6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a4b0:	6878      	ldr	r0, [r7, #4]
 800a4b2:	4798      	blx	r3
 800a4b4:	e009      	b.n	800a4ca <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	f003 0301 	and.w	r3, r3, #1
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d00e      	beq.n	800a4f8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f003 0301 	and.w	r3, r3, #1
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d009      	beq.n	800a4f8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f06f 0201 	mvn.w	r2, #1
 800a4ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d104      	bne.n	800a50c <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d00e      	beq.n	800a52a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a512:	2b00      	cmp	r3, #0
 800a514:	d009      	beq.n	800a52a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a51e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00e      	beq.n	800a552 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d009      	beq.n	800a552 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00e      	beq.n	800a57a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a562:	2b00      	cmp	r3, #0
 800a564:	d009      	beq.n	800a57a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a56e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f003 0320 	and.w	r3, r3, #32
 800a580:	2b00      	cmp	r3, #0
 800a582:	d00e      	beq.n	800a5a2 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f003 0320 	and.w	r3, r3, #32
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d009      	beq.n	800a5a2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f06f 0220 	mvn.w	r2, #32
 800a596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00e      	beq.n	800a5ca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d009      	beq.n	800a5ca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a5be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d00e      	beq.n	800a5f2 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d009      	beq.n	800a5f2 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a5e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00e      	beq.n	800a61a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a602:	2b00      	cmp	r3, #0
 800a604:	d009      	beq.n	800a61a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a60e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d00e      	beq.n	800a642 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d009      	beq.n	800a642 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a642:	bf00      	nop
 800a644:	3710      	adds	r7, #16
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
	...

0800a64c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a662:	2b01      	cmp	r3, #1
 800a664:	d101      	bne.n	800a66a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a666:	2302      	movs	r3, #2
 800a668:	e0ff      	b.n	800a86a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	2b14      	cmp	r3, #20
 800a676:	f200 80f0 	bhi.w	800a85a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a67a:	a201      	add	r2, pc, #4	@ (adr r2, 800a680 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a680:	0800a6d5 	.word	0x0800a6d5
 800a684:	0800a85b 	.word	0x0800a85b
 800a688:	0800a85b 	.word	0x0800a85b
 800a68c:	0800a85b 	.word	0x0800a85b
 800a690:	0800a715 	.word	0x0800a715
 800a694:	0800a85b 	.word	0x0800a85b
 800a698:	0800a85b 	.word	0x0800a85b
 800a69c:	0800a85b 	.word	0x0800a85b
 800a6a0:	0800a757 	.word	0x0800a757
 800a6a4:	0800a85b 	.word	0x0800a85b
 800a6a8:	0800a85b 	.word	0x0800a85b
 800a6ac:	0800a85b 	.word	0x0800a85b
 800a6b0:	0800a797 	.word	0x0800a797
 800a6b4:	0800a85b 	.word	0x0800a85b
 800a6b8:	0800a85b 	.word	0x0800a85b
 800a6bc:	0800a85b 	.word	0x0800a85b
 800a6c0:	0800a7d9 	.word	0x0800a7d9
 800a6c4:	0800a85b 	.word	0x0800a85b
 800a6c8:	0800a85b 	.word	0x0800a85b
 800a6cc:	0800a85b 	.word	0x0800a85b
 800a6d0:	0800a819 	.word	0x0800a819
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68b9      	ldr	r1, [r7, #8]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fc4e 	bl	800af7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	699a      	ldr	r2, [r3, #24]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f042 0208 	orr.w	r2, r2, #8
 800a6ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	699a      	ldr	r2, [r3, #24]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	f022 0204 	bic.w	r2, r2, #4
 800a6fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6999      	ldr	r1, [r3, #24]
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	691a      	ldr	r2, [r3, #16]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	430a      	orrs	r2, r1
 800a710:	619a      	str	r2, [r3, #24]
      break;
 800a712:	e0a5      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68b9      	ldr	r1, [r7, #8]
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fcc8 	bl	800b0b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	699a      	ldr	r2, [r3, #24]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a72e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	699a      	ldr	r2, [r3, #24]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a73e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	6999      	ldr	r1, [r3, #24]
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	691b      	ldr	r3, [r3, #16]
 800a74a:	021a      	lsls	r2, r3, #8
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	430a      	orrs	r2, r1
 800a752:	619a      	str	r2, [r3, #24]
      break;
 800a754:	e084      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	68b9      	ldr	r1, [r7, #8]
 800a75c:	4618      	mov	r0, r3
 800a75e:	f000 fd3b 	bl	800b1d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	69da      	ldr	r2, [r3, #28]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f042 0208 	orr.w	r2, r2, #8
 800a770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	69da      	ldr	r2, [r3, #28]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f022 0204 	bic.w	r2, r2, #4
 800a780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	69d9      	ldr	r1, [r3, #28]
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	691a      	ldr	r2, [r3, #16]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	430a      	orrs	r2, r1
 800a792:	61da      	str	r2, [r3, #28]
      break;
 800a794:	e064      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	68b9      	ldr	r1, [r7, #8]
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 fdad 	bl	800b2fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	69da      	ldr	r2, [r3, #28]
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	69da      	ldr	r2, [r3, #28]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	69d9      	ldr	r1, [r3, #28]
 800a7c8:	68bb      	ldr	r3, [r7, #8]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	021a      	lsls	r2, r3, #8
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	430a      	orrs	r2, r1
 800a7d4:	61da      	str	r2, [r3, #28]
      break;
 800a7d6:	e043      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	68b9      	ldr	r1, [r7, #8]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fe20 	bl	800b424 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f042 0208 	orr.w	r2, r2, #8
 800a7f2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f022 0204 	bic.w	r2, r2, #4
 800a802:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	691a      	ldr	r2, [r3, #16]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	430a      	orrs	r2, r1
 800a814:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a816:	e023      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	68b9      	ldr	r1, [r7, #8]
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 fe6a 	bl	800b4f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a832:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a842:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	021a      	lsls	r2, r3, #8
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	430a      	orrs	r2, r1
 800a856:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a858:	e002      	b.n	800a860 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	75fb      	strb	r3, [r7, #23]
      break;
 800a85e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	2200      	movs	r2, #0
 800a864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a868:	7dfb      	ldrb	r3, [r7, #23]
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop

0800a874 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b084      	sub	sp, #16
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a87e:	2300      	movs	r3, #0
 800a880:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d101      	bne.n	800a890 <HAL_TIM_ConfigClockSource+0x1c>
 800a88c:	2302      	movs	r3, #2
 800a88e:	e0f6      	b.n	800aa7e <HAL_TIM_ConfigClockSource+0x20a>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2202      	movs	r2, #2
 800a89c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	689b      	ldr	r3, [r3, #8]
 800a8a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a8ae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a8b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68ba      	ldr	r2, [r7, #8]
 800a8c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a6f      	ldr	r2, [pc, #444]	@ (800aa88 <HAL_TIM_ConfigClockSource+0x214>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	f000 80c1 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a8d0:	4a6d      	ldr	r2, [pc, #436]	@ (800aa88 <HAL_TIM_ConfigClockSource+0x214>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	f200 80c6 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a8d8:	4a6c      	ldr	r2, [pc, #432]	@ (800aa8c <HAL_TIM_ConfigClockSource+0x218>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	f000 80b9 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a8e0:	4a6a      	ldr	r2, [pc, #424]	@ (800aa8c <HAL_TIM_ConfigClockSource+0x218>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	f200 80be 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a8e8:	4a69      	ldr	r2, [pc, #420]	@ (800aa90 <HAL_TIM_ConfigClockSource+0x21c>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	f000 80b1 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a8f0:	4a67      	ldr	r2, [pc, #412]	@ (800aa90 <HAL_TIM_ConfigClockSource+0x21c>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	f200 80b6 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a8f8:	4a66      	ldr	r2, [pc, #408]	@ (800aa94 <HAL_TIM_ConfigClockSource+0x220>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	f000 80a9 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a900:	4a64      	ldr	r2, [pc, #400]	@ (800aa94 <HAL_TIM_ConfigClockSource+0x220>)
 800a902:	4293      	cmp	r3, r2
 800a904:	f200 80ae 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a908:	4a63      	ldr	r2, [pc, #396]	@ (800aa98 <HAL_TIM_ConfigClockSource+0x224>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	f000 80a1 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a910:	4a61      	ldr	r2, [pc, #388]	@ (800aa98 <HAL_TIM_ConfigClockSource+0x224>)
 800a912:	4293      	cmp	r3, r2
 800a914:	f200 80a6 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a918:	4a60      	ldr	r2, [pc, #384]	@ (800aa9c <HAL_TIM_ConfigClockSource+0x228>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	f000 8099 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a920:	4a5e      	ldr	r2, [pc, #376]	@ (800aa9c <HAL_TIM_ConfigClockSource+0x228>)
 800a922:	4293      	cmp	r3, r2
 800a924:	f200 809e 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a928:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a92c:	f000 8091 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a930:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a934:	f200 8096 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a938:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a93c:	f000 8089 	beq.w	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a940:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a944:	f200 808e 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a948:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a94c:	d03e      	beq.n	800a9cc <HAL_TIM_ConfigClockSource+0x158>
 800a94e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a952:	f200 8087 	bhi.w	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a956:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a95a:	f000 8086 	beq.w	800aa6a <HAL_TIM_ConfigClockSource+0x1f6>
 800a95e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a962:	d87f      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a964:	2b70      	cmp	r3, #112	@ 0x70
 800a966:	d01a      	beq.n	800a99e <HAL_TIM_ConfigClockSource+0x12a>
 800a968:	2b70      	cmp	r3, #112	@ 0x70
 800a96a:	d87b      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a96c:	2b60      	cmp	r3, #96	@ 0x60
 800a96e:	d050      	beq.n	800aa12 <HAL_TIM_ConfigClockSource+0x19e>
 800a970:	2b60      	cmp	r3, #96	@ 0x60
 800a972:	d877      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a974:	2b50      	cmp	r3, #80	@ 0x50
 800a976:	d03c      	beq.n	800a9f2 <HAL_TIM_ConfigClockSource+0x17e>
 800a978:	2b50      	cmp	r3, #80	@ 0x50
 800a97a:	d873      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a97c:	2b40      	cmp	r3, #64	@ 0x40
 800a97e:	d058      	beq.n	800aa32 <HAL_TIM_ConfigClockSource+0x1be>
 800a980:	2b40      	cmp	r3, #64	@ 0x40
 800a982:	d86f      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a984:	2b30      	cmp	r3, #48	@ 0x30
 800a986:	d064      	beq.n	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a988:	2b30      	cmp	r3, #48	@ 0x30
 800a98a:	d86b      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a98c:	2b20      	cmp	r3, #32
 800a98e:	d060      	beq.n	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a990:	2b20      	cmp	r3, #32
 800a992:	d867      	bhi.n	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
 800a994:	2b00      	cmp	r3, #0
 800a996:	d05c      	beq.n	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a998:	2b10      	cmp	r3, #16
 800a99a:	d05a      	beq.n	800aa52 <HAL_TIM_ConfigClockSource+0x1de>
 800a99c:	e062      	b.n	800aa64 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9ae:	f000 fe8b 	bl	800b6c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a9c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68ba      	ldr	r2, [r7, #8]
 800a9c8:	609a      	str	r2, [r3, #8]
      break;
 800a9ca:	e04f      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a9dc:	f000 fe74 	bl	800b6c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	689a      	ldr	r2, [r3, #8]
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a9ee:	609a      	str	r2, [r3, #8]
      break;
 800a9f0:	e03c      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f000 fde6 	bl	800b5d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2150      	movs	r1, #80	@ 0x50
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fe3f 	bl	800b68e <TIM_ITRx_SetConfig>
      break;
 800aa10:	e02c      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f000 fe05 	bl	800b62e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2160      	movs	r1, #96	@ 0x60
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fe2f 	bl	800b68e <TIM_ITRx_SetConfig>
      break;
 800aa30:	e01c      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa3e:	461a      	mov	r2, r3
 800aa40:	f000 fdc6 	bl	800b5d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2140      	movs	r1, #64	@ 0x40
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 fe1f 	bl	800b68e <TIM_ITRx_SetConfig>
      break;
 800aa50:	e00c      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	f000 fe16 	bl	800b68e <TIM_ITRx_SetConfig>
      break;
 800aa62:	e003      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	73fb      	strb	r3, [r7, #15]
      break;
 800aa68:	e000      	b.n	800aa6c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800aa6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	00100070 	.word	0x00100070
 800aa8c:	00100060 	.word	0x00100060
 800aa90:	00100050 	.word	0x00100050
 800aa94:	00100040 	.word	0x00100040
 800aa98:	00100030 	.word	0x00100030
 800aa9c:	00100020 	.word	0x00100020

0800aaa0 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800aaa8:	bf00      	nop
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aac8:	b480      	push	{r7}
 800aaca:	b083      	sub	sp, #12
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800aae4:	bf00      	nop
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr

0800aaf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ab0c:	bf00      	nop
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab20:	bf00      	nop
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800ab34:	bf00      	nop
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d101      	bne.n	800ab70 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e14a      	b.n	800ae06 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	f040 80dd 	bne.w	800ad38 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800ab7e:	7afb      	ldrb	r3, [r7, #11]
 800ab80:	2b1f      	cmp	r3, #31
 800ab82:	f200 80d6 	bhi.w	800ad32 <HAL_TIM_RegisterCallback+0x1de>
 800ab86:	a201      	add	r2, pc, #4	@ (adr r2, 800ab8c <HAL_TIM_RegisterCallback+0x38>)
 800ab88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab8c:	0800ac0d 	.word	0x0800ac0d
 800ab90:	0800ac15 	.word	0x0800ac15
 800ab94:	0800ac1d 	.word	0x0800ac1d
 800ab98:	0800ac25 	.word	0x0800ac25
 800ab9c:	0800ac2d 	.word	0x0800ac2d
 800aba0:	0800ac35 	.word	0x0800ac35
 800aba4:	0800ac3d 	.word	0x0800ac3d
 800aba8:	0800ac45 	.word	0x0800ac45
 800abac:	0800ac4d 	.word	0x0800ac4d
 800abb0:	0800ac55 	.word	0x0800ac55
 800abb4:	0800ac5d 	.word	0x0800ac5d
 800abb8:	0800ac65 	.word	0x0800ac65
 800abbc:	0800ac6d 	.word	0x0800ac6d
 800abc0:	0800ac75 	.word	0x0800ac75
 800abc4:	0800ac7f 	.word	0x0800ac7f
 800abc8:	0800ac89 	.word	0x0800ac89
 800abcc:	0800ac93 	.word	0x0800ac93
 800abd0:	0800ac9d 	.word	0x0800ac9d
 800abd4:	0800aca7 	.word	0x0800aca7
 800abd8:	0800acb1 	.word	0x0800acb1
 800abdc:	0800acbb 	.word	0x0800acbb
 800abe0:	0800acc5 	.word	0x0800acc5
 800abe4:	0800accf 	.word	0x0800accf
 800abe8:	0800acd9 	.word	0x0800acd9
 800abec:	0800ace3 	.word	0x0800ace3
 800abf0:	0800aced 	.word	0x0800aced
 800abf4:	0800acf7 	.word	0x0800acf7
 800abf8:	0800ad01 	.word	0x0800ad01
 800abfc:	0800ad0b 	.word	0x0800ad0b
 800ac00:	0800ad15 	.word	0x0800ad15
 800ac04:	0800ad1f 	.word	0x0800ad1f
 800ac08:	0800ad29 	.word	0x0800ad29
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ac12:	e0f7      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ac1a:	e0f3      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	687a      	ldr	r2, [r7, #4]
 800ac20:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ac22:	e0ef      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ac2a:	e0eb      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	687a      	ldr	r2, [r7, #4]
 800ac30:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800ac32:	e0e7      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800ac3a:	e0e3      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800ac42:	e0df      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800ac4a:	e0db      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800ac52:	e0d7      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800ac5a:	e0d3      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800ac62:	e0cf      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ac6a:	e0cb      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800ac72:	e0c7      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800ac7c:	e0c2      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800ac86:	e0bd      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 800ac90:	e0b8      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800ac9a:	e0b3      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800aca4:	e0ae      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800acae:	e0a9      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	687a      	ldr	r2, [r7, #4]
 800acb4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800acb8:	e0a4      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800acc2:	e09f      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800accc:	e09a      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800acd6:	e095      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800ace0:	e090      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800acea:	e08b      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800acf4:	e086      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800acfe:	e081      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800ad08:	e07c      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800ad12:	e077      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 800ad1c:	e072      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	687a      	ldr	r2, [r7, #4]
 800ad22:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800ad26:	e06d      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800ad30:	e068      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	75fb      	strb	r3, [r7, #23]
        break;
 800ad36:	e065      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d15d      	bne.n	800ae00 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 800ad44:	7afb      	ldrb	r3, [r7, #11]
 800ad46:	2b0d      	cmp	r3, #13
 800ad48:	d857      	bhi.n	800adfa <HAL_TIM_RegisterCallback+0x2a6>
 800ad4a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad50 <HAL_TIM_RegisterCallback+0x1fc>)
 800ad4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad50:	0800ad89 	.word	0x0800ad89
 800ad54:	0800ad91 	.word	0x0800ad91
 800ad58:	0800ad99 	.word	0x0800ad99
 800ad5c:	0800ada1 	.word	0x0800ada1
 800ad60:	0800ada9 	.word	0x0800ada9
 800ad64:	0800adb1 	.word	0x0800adb1
 800ad68:	0800adb9 	.word	0x0800adb9
 800ad6c:	0800adc1 	.word	0x0800adc1
 800ad70:	0800adc9 	.word	0x0800adc9
 800ad74:	0800add1 	.word	0x0800add1
 800ad78:	0800add9 	.word	0x0800add9
 800ad7c:	0800ade1 	.word	0x0800ade1
 800ad80:	0800ade9 	.word	0x0800ade9
 800ad84:	0800adf1 	.word	0x0800adf1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 800ad8e:	e039      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800ad96:	e035      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 800ad9e:	e031      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800ada6:	e02d      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 800adae:	e029      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800adb6:	e025      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 800adbe:	e021      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800adc6:	e01d      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800adce:	e019      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800add6:	e015      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800adde:	e011      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800ade6:	e00d      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800adee:	e009      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800adf8:	e004      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800adfa:	2301      	movs	r3, #1
 800adfc:	75fb      	strb	r3, [r7, #23]
        break;
 800adfe:	e001      	b.n	800ae04 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800ae00:	2301      	movs	r3, #1
 800ae02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800ae04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	371c      	adds	r7, #28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop

0800ae14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b085      	sub	sp, #20
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a4c      	ldr	r2, [pc, #304]	@ (800af58 <TIM_Base_SetConfig+0x144>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d017      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae32:	d013      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	4a49      	ldr	r2, [pc, #292]	@ (800af5c <TIM_Base_SetConfig+0x148>)
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	d00f      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	4a48      	ldr	r2, [pc, #288]	@ (800af60 <TIM_Base_SetConfig+0x14c>)
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d00b      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	4a47      	ldr	r2, [pc, #284]	@ (800af64 <TIM_Base_SetConfig+0x150>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d007      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	4a46      	ldr	r2, [pc, #280]	@ (800af68 <TIM_Base_SetConfig+0x154>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d003      	beq.n	800ae5c <TIM_Base_SetConfig+0x48>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a45      	ldr	r2, [pc, #276]	@ (800af6c <TIM_Base_SetConfig+0x158>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d108      	bne.n	800ae6e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	68fa      	ldr	r2, [r7, #12]
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4a39      	ldr	r2, [pc, #228]	@ (800af58 <TIM_Base_SetConfig+0x144>)
 800ae72:	4293      	cmp	r3, r2
 800ae74:	d023      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae7c:	d01f      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	4a36      	ldr	r2, [pc, #216]	@ (800af5c <TIM_Base_SetConfig+0x148>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d01b      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4a35      	ldr	r2, [pc, #212]	@ (800af60 <TIM_Base_SetConfig+0x14c>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d017      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4a34      	ldr	r2, [pc, #208]	@ (800af64 <TIM_Base_SetConfig+0x150>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d013      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a33      	ldr	r2, [pc, #204]	@ (800af68 <TIM_Base_SetConfig+0x154>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d00f      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4a33      	ldr	r2, [pc, #204]	@ (800af70 <TIM_Base_SetConfig+0x15c>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d00b      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a32      	ldr	r2, [pc, #200]	@ (800af74 <TIM_Base_SetConfig+0x160>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d007      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a31      	ldr	r2, [pc, #196]	@ (800af78 <TIM_Base_SetConfig+0x164>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d003      	beq.n	800aebe <TIM_Base_SetConfig+0xaa>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a2c      	ldr	r2, [pc, #176]	@ (800af6c <TIM_Base_SetConfig+0x158>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d108      	bne.n	800aed0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	689a      	ldr	r2, [r3, #8]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681a      	ldr	r2, [r3, #0]
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	4a18      	ldr	r2, [pc, #96]	@ (800af58 <TIM_Base_SetConfig+0x144>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d013      	beq.n	800af24 <TIM_Base_SetConfig+0x110>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a1a      	ldr	r2, [pc, #104]	@ (800af68 <TIM_Base_SetConfig+0x154>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d00f      	beq.n	800af24 <TIM_Base_SetConfig+0x110>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	4a1a      	ldr	r2, [pc, #104]	@ (800af70 <TIM_Base_SetConfig+0x15c>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d00b      	beq.n	800af24 <TIM_Base_SetConfig+0x110>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a19      	ldr	r2, [pc, #100]	@ (800af74 <TIM_Base_SetConfig+0x160>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d007      	beq.n	800af24 <TIM_Base_SetConfig+0x110>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a18      	ldr	r2, [pc, #96]	@ (800af78 <TIM_Base_SetConfig+0x164>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d003      	beq.n	800af24 <TIM_Base_SetConfig+0x110>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a13      	ldr	r2, [pc, #76]	@ (800af6c <TIM_Base_SetConfig+0x158>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d103      	bne.n	800af2c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	691a      	ldr	r2, [r3, #16]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2201      	movs	r2, #1
 800af30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d105      	bne.n	800af4a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	f023 0201 	bic.w	r2, r3, #1
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	611a      	str	r2, [r3, #16]
  }
}
 800af4a:	bf00      	nop
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	40012c00 	.word	0x40012c00
 800af5c:	40000400 	.word	0x40000400
 800af60:	40000800 	.word	0x40000800
 800af64:	40000c00 	.word	0x40000c00
 800af68:	40013400 	.word	0x40013400
 800af6c:	40015000 	.word	0x40015000
 800af70:	40014000 	.word	0x40014000
 800af74:	40014400 	.word	0x40014400
 800af78:	40014800 	.word	0x40014800

0800af7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b087      	sub	sp, #28
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6a1b      	ldr	r3, [r3, #32]
 800af90:	f023 0201 	bic.w	r2, r3, #1
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f023 0303 	bic.w	r3, r3, #3
 800afb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	f023 0302 	bic.w	r3, r3, #2
 800afc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	697a      	ldr	r2, [r7, #20]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a30      	ldr	r2, [pc, #192]	@ (800b098 <TIM_OC1_SetConfig+0x11c>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d013      	beq.n	800b004 <TIM_OC1_SetConfig+0x88>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a2f      	ldr	r2, [pc, #188]	@ (800b09c <TIM_OC1_SetConfig+0x120>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d00f      	beq.n	800b004 <TIM_OC1_SetConfig+0x88>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a2e      	ldr	r2, [pc, #184]	@ (800b0a0 <TIM_OC1_SetConfig+0x124>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d00b      	beq.n	800b004 <TIM_OC1_SetConfig+0x88>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a2d      	ldr	r2, [pc, #180]	@ (800b0a4 <TIM_OC1_SetConfig+0x128>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d007      	beq.n	800b004 <TIM_OC1_SetConfig+0x88>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a2c      	ldr	r2, [pc, #176]	@ (800b0a8 <TIM_OC1_SetConfig+0x12c>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d003      	beq.n	800b004 <TIM_OC1_SetConfig+0x88>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a2b      	ldr	r2, [pc, #172]	@ (800b0ac <TIM_OC1_SetConfig+0x130>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d10c      	bne.n	800b01e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b004:	697b      	ldr	r3, [r7, #20]
 800b006:	f023 0308 	bic.w	r3, r3, #8
 800b00a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	697a      	ldr	r2, [r7, #20]
 800b012:	4313      	orrs	r3, r2
 800b014:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f023 0304 	bic.w	r3, r3, #4
 800b01c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	4a1d      	ldr	r2, [pc, #116]	@ (800b098 <TIM_OC1_SetConfig+0x11c>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d013      	beq.n	800b04e <TIM_OC1_SetConfig+0xd2>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	4a1c      	ldr	r2, [pc, #112]	@ (800b09c <TIM_OC1_SetConfig+0x120>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d00f      	beq.n	800b04e <TIM_OC1_SetConfig+0xd2>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a1b      	ldr	r2, [pc, #108]	@ (800b0a0 <TIM_OC1_SetConfig+0x124>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d00b      	beq.n	800b04e <TIM_OC1_SetConfig+0xd2>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a1a      	ldr	r2, [pc, #104]	@ (800b0a4 <TIM_OC1_SetConfig+0x128>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d007      	beq.n	800b04e <TIM_OC1_SetConfig+0xd2>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a19      	ldr	r2, [pc, #100]	@ (800b0a8 <TIM_OC1_SetConfig+0x12c>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d003      	beq.n	800b04e <TIM_OC1_SetConfig+0xd2>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a18      	ldr	r2, [pc, #96]	@ (800b0ac <TIM_OC1_SetConfig+0x130>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d111      	bne.n	800b072 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b05c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	693a      	ldr	r2, [r7, #16]
 800b064:	4313      	orrs	r3, r2
 800b066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	693a      	ldr	r2, [r7, #16]
 800b06e:	4313      	orrs	r3, r2
 800b070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	693a      	ldr	r2, [r7, #16]
 800b076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	68fa      	ldr	r2, [r7, #12]
 800b07c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	697a      	ldr	r2, [r7, #20]
 800b08a:	621a      	str	r2, [r3, #32]
}
 800b08c:	bf00      	nop
 800b08e:	371c      	adds	r7, #28
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	40012c00 	.word	0x40012c00
 800b09c:	40013400 	.word	0x40013400
 800b0a0:	40014000 	.word	0x40014000
 800b0a4:	40014400 	.word	0x40014400
 800b0a8:	40014800 	.word	0x40014800
 800b0ac:	40015000 	.word	0x40015000

0800b0b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a1b      	ldr	r3, [r3, #32]
 800b0be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a1b      	ldr	r3, [r3, #32]
 800b0c4:	f023 0210 	bic.w	r2, r3, #16
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	699b      	ldr	r3, [r3, #24]
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b0de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b0e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	021b      	lsls	r3, r3, #8
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	f023 0320 	bic.w	r3, r3, #32
 800b0fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	011b      	lsls	r3, r3, #4
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	4313      	orrs	r3, r2
 800b10a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	4a2c      	ldr	r2, [pc, #176]	@ (800b1c0 <TIM_OC2_SetConfig+0x110>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d007      	beq.n	800b124 <TIM_OC2_SetConfig+0x74>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	4a2b      	ldr	r2, [pc, #172]	@ (800b1c4 <TIM_OC2_SetConfig+0x114>)
 800b118:	4293      	cmp	r3, r2
 800b11a:	d003      	beq.n	800b124 <TIM_OC2_SetConfig+0x74>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	4a2a      	ldr	r2, [pc, #168]	@ (800b1c8 <TIM_OC2_SetConfig+0x118>)
 800b120:	4293      	cmp	r3, r2
 800b122:	d10d      	bne.n	800b140 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b12a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	011b      	lsls	r3, r3, #4
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	4313      	orrs	r3, r2
 800b136:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b13e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a1f      	ldr	r2, [pc, #124]	@ (800b1c0 <TIM_OC2_SetConfig+0x110>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d013      	beq.n	800b170 <TIM_OC2_SetConfig+0xc0>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a1e      	ldr	r2, [pc, #120]	@ (800b1c4 <TIM_OC2_SetConfig+0x114>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d00f      	beq.n	800b170 <TIM_OC2_SetConfig+0xc0>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	4a1e      	ldr	r2, [pc, #120]	@ (800b1cc <TIM_OC2_SetConfig+0x11c>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d00b      	beq.n	800b170 <TIM_OC2_SetConfig+0xc0>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a1d      	ldr	r2, [pc, #116]	@ (800b1d0 <TIM_OC2_SetConfig+0x120>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d007      	beq.n	800b170 <TIM_OC2_SetConfig+0xc0>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a1c      	ldr	r2, [pc, #112]	@ (800b1d4 <TIM_OC2_SetConfig+0x124>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d003      	beq.n	800b170 <TIM_OC2_SetConfig+0xc0>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a17      	ldr	r2, [pc, #92]	@ (800b1c8 <TIM_OC2_SetConfig+0x118>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d113      	bne.n	800b198 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b176:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b17e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	695b      	ldr	r3, [r3, #20]
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	4313      	orrs	r3, r2
 800b18a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	009b      	lsls	r3, r3, #2
 800b192:	693a      	ldr	r2, [r7, #16]
 800b194:	4313      	orrs	r3, r2
 800b196:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	693a      	ldr	r2, [r7, #16]
 800b19c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1a4:	683b      	ldr	r3, [r7, #0]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	621a      	str	r2, [r3, #32]
}
 800b1b2:	bf00      	nop
 800b1b4:	371c      	adds	r7, #28
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1bc:	4770      	bx	lr
 800b1be:	bf00      	nop
 800b1c0:	40012c00 	.word	0x40012c00
 800b1c4:	40013400 	.word	0x40013400
 800b1c8:	40015000 	.word	0x40015000
 800b1cc:	40014000 	.word	0x40014000
 800b1d0:	40014400 	.word	0x40014400
 800b1d4:	40014800 	.word	0x40014800

0800b1d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b087      	sub	sp, #28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	69db      	ldr	r3, [r3, #28]
 800b1fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b20a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f023 0303 	bic.w	r3, r3, #3
 800b212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	021b      	lsls	r3, r3, #8
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	4313      	orrs	r3, r2
 800b230:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a2b      	ldr	r2, [pc, #172]	@ (800b2e4 <TIM_OC3_SetConfig+0x10c>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d007      	beq.n	800b24a <TIM_OC3_SetConfig+0x72>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a2a      	ldr	r2, [pc, #168]	@ (800b2e8 <TIM_OC3_SetConfig+0x110>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d003      	beq.n	800b24a <TIM_OC3_SetConfig+0x72>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	4a29      	ldr	r2, [pc, #164]	@ (800b2ec <TIM_OC3_SetConfig+0x114>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d10d      	bne.n	800b266 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b250:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	021b      	lsls	r3, r3, #8
 800b258:	697a      	ldr	r2, [r7, #20]
 800b25a:	4313      	orrs	r3, r2
 800b25c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a1e      	ldr	r2, [pc, #120]	@ (800b2e4 <TIM_OC3_SetConfig+0x10c>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d013      	beq.n	800b296 <TIM_OC3_SetConfig+0xbe>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a1d      	ldr	r2, [pc, #116]	@ (800b2e8 <TIM_OC3_SetConfig+0x110>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d00f      	beq.n	800b296 <TIM_OC3_SetConfig+0xbe>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a1d      	ldr	r2, [pc, #116]	@ (800b2f0 <TIM_OC3_SetConfig+0x118>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d00b      	beq.n	800b296 <TIM_OC3_SetConfig+0xbe>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a1c      	ldr	r2, [pc, #112]	@ (800b2f4 <TIM_OC3_SetConfig+0x11c>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d007      	beq.n	800b296 <TIM_OC3_SetConfig+0xbe>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a1b      	ldr	r2, [pc, #108]	@ (800b2f8 <TIM_OC3_SetConfig+0x120>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d003      	beq.n	800b296 <TIM_OC3_SetConfig+0xbe>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a16      	ldr	r2, [pc, #88]	@ (800b2ec <TIM_OC3_SetConfig+0x114>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d113      	bne.n	800b2be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b29c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b2a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	695b      	ldr	r3, [r3, #20]
 800b2aa:	011b      	lsls	r3, r3, #4
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	011b      	lsls	r3, r3, #4
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	693a      	ldr	r2, [r7, #16]
 800b2c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	685a      	ldr	r2, [r3, #4]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	697a      	ldr	r2, [r7, #20]
 800b2d6:	621a      	str	r2, [r3, #32]
}
 800b2d8:	bf00      	nop
 800b2da:	371c      	adds	r7, #28
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	40012c00 	.word	0x40012c00
 800b2e8:	40013400 	.word	0x40013400
 800b2ec:	40015000 	.word	0x40015000
 800b2f0:	40014000 	.word	0x40014000
 800b2f4:	40014400 	.word	0x40014400
 800b2f8:	40014800 	.word	0x40014800

0800b2fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b087      	sub	sp, #28
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6a1b      	ldr	r3, [r3, #32]
 800b30a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
 800b310:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	69db      	ldr	r3, [r3, #28]
 800b322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b32a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b32e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	021b      	lsls	r3, r3, #8
 800b33e:	68fa      	ldr	r2, [r7, #12]
 800b340:	4313      	orrs	r3, r2
 800b342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b34a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	031b      	lsls	r3, r3, #12
 800b352:	697a      	ldr	r2, [r7, #20]
 800b354:	4313      	orrs	r3, r2
 800b356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	4a2c      	ldr	r2, [pc, #176]	@ (800b40c <TIM_OC4_SetConfig+0x110>)
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d007      	beq.n	800b370 <TIM_OC4_SetConfig+0x74>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a2b      	ldr	r2, [pc, #172]	@ (800b410 <TIM_OC4_SetConfig+0x114>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d003      	beq.n	800b370 <TIM_OC4_SetConfig+0x74>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a2a      	ldr	r2, [pc, #168]	@ (800b414 <TIM_OC4_SetConfig+0x118>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d10d      	bne.n	800b38c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	031b      	lsls	r3, r3, #12
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	4313      	orrs	r3, r2
 800b382:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b384:	697b      	ldr	r3, [r7, #20]
 800b386:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b38a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a1f      	ldr	r2, [pc, #124]	@ (800b40c <TIM_OC4_SetConfig+0x110>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d013      	beq.n	800b3bc <TIM_OC4_SetConfig+0xc0>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a1e      	ldr	r2, [pc, #120]	@ (800b410 <TIM_OC4_SetConfig+0x114>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d00f      	beq.n	800b3bc <TIM_OC4_SetConfig+0xc0>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a1e      	ldr	r2, [pc, #120]	@ (800b418 <TIM_OC4_SetConfig+0x11c>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d00b      	beq.n	800b3bc <TIM_OC4_SetConfig+0xc0>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a1d      	ldr	r2, [pc, #116]	@ (800b41c <TIM_OC4_SetConfig+0x120>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d007      	beq.n	800b3bc <TIM_OC4_SetConfig+0xc0>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a1c      	ldr	r2, [pc, #112]	@ (800b420 <TIM_OC4_SetConfig+0x124>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d003      	beq.n	800b3bc <TIM_OC4_SetConfig+0xc0>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	4a17      	ldr	r2, [pc, #92]	@ (800b414 <TIM_OC4_SetConfig+0x118>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d113      	bne.n	800b3e4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b3c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b3ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	695b      	ldr	r3, [r3, #20]
 800b3d0:	019b      	lsls	r3, r3, #6
 800b3d2:	693a      	ldr	r2, [r7, #16]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	019b      	lsls	r3, r3, #6
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	693a      	ldr	r2, [r7, #16]
 800b3e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	68fa      	ldr	r2, [r7, #12]
 800b3ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	685a      	ldr	r2, [r3, #4]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	621a      	str	r2, [r3, #32]
}
 800b3fe:	bf00      	nop
 800b400:	371c      	adds	r7, #28
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	40012c00 	.word	0x40012c00
 800b410:	40013400 	.word	0x40013400
 800b414:	40015000 	.word	0x40015000
 800b418:	40014000 	.word	0x40014000
 800b41c:	40014400 	.word	0x40014400
 800b420:	40014800 	.word	0x40014800

0800b424 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b424:	b480      	push	{r7}
 800b426:	b087      	sub	sp, #28
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6a1b      	ldr	r3, [r3, #32]
 800b432:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6a1b      	ldr	r3, [r3, #32]
 800b438:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68fa      	ldr	r2, [r7, #12]
 800b45e:	4313      	orrs	r3, r2
 800b460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b468:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	041b      	lsls	r3, r3, #16
 800b470:	693a      	ldr	r2, [r7, #16]
 800b472:	4313      	orrs	r3, r2
 800b474:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a19      	ldr	r2, [pc, #100]	@ (800b4e0 <TIM_OC5_SetConfig+0xbc>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d013      	beq.n	800b4a6 <TIM_OC5_SetConfig+0x82>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	4a18      	ldr	r2, [pc, #96]	@ (800b4e4 <TIM_OC5_SetConfig+0xc0>)
 800b482:	4293      	cmp	r3, r2
 800b484:	d00f      	beq.n	800b4a6 <TIM_OC5_SetConfig+0x82>
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a17      	ldr	r2, [pc, #92]	@ (800b4e8 <TIM_OC5_SetConfig+0xc4>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d00b      	beq.n	800b4a6 <TIM_OC5_SetConfig+0x82>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	4a16      	ldr	r2, [pc, #88]	@ (800b4ec <TIM_OC5_SetConfig+0xc8>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d007      	beq.n	800b4a6 <TIM_OC5_SetConfig+0x82>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	4a15      	ldr	r2, [pc, #84]	@ (800b4f0 <TIM_OC5_SetConfig+0xcc>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d003      	beq.n	800b4a6 <TIM_OC5_SetConfig+0x82>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	4a14      	ldr	r2, [pc, #80]	@ (800b4f4 <TIM_OC5_SetConfig+0xd0>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d109      	bne.n	800b4ba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	021b      	lsls	r3, r3, #8
 800b4b4:	697a      	ldr	r2, [r7, #20]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	685a      	ldr	r2, [r3, #4]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	693a      	ldr	r2, [r7, #16]
 800b4d2:	621a      	str	r2, [r3, #32]
}
 800b4d4:	bf00      	nop
 800b4d6:	371c      	adds	r7, #28
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	40012c00 	.word	0x40012c00
 800b4e4:	40013400 	.word	0x40013400
 800b4e8:	40014000 	.word	0x40014000
 800b4ec:	40014400 	.word	0x40014400
 800b4f0:	40014800 	.word	0x40014800
 800b4f4:	40015000 	.word	0x40015000

0800b4f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b087      	sub	sp, #28
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a1b      	ldr	r3, [r3, #32]
 800b50c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b52a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	021b      	lsls	r3, r3, #8
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	4313      	orrs	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b53e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	051b      	lsls	r3, r3, #20
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	4313      	orrs	r3, r2
 800b54a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	4a1a      	ldr	r2, [pc, #104]	@ (800b5b8 <TIM_OC6_SetConfig+0xc0>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d013      	beq.n	800b57c <TIM_OC6_SetConfig+0x84>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	4a19      	ldr	r2, [pc, #100]	@ (800b5bc <TIM_OC6_SetConfig+0xc4>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d00f      	beq.n	800b57c <TIM_OC6_SetConfig+0x84>
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	4a18      	ldr	r2, [pc, #96]	@ (800b5c0 <TIM_OC6_SetConfig+0xc8>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d00b      	beq.n	800b57c <TIM_OC6_SetConfig+0x84>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	4a17      	ldr	r2, [pc, #92]	@ (800b5c4 <TIM_OC6_SetConfig+0xcc>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d007      	beq.n	800b57c <TIM_OC6_SetConfig+0x84>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	4a16      	ldr	r2, [pc, #88]	@ (800b5c8 <TIM_OC6_SetConfig+0xd0>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d003      	beq.n	800b57c <TIM_OC6_SetConfig+0x84>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4a15      	ldr	r2, [pc, #84]	@ (800b5cc <TIM_OC6_SetConfig+0xd4>)
 800b578:	4293      	cmp	r3, r2
 800b57a:	d109      	bne.n	800b590 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b582:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	695b      	ldr	r3, [r3, #20]
 800b588:	029b      	lsls	r3, r3, #10
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	685a      	ldr	r2, [r3, #4]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	621a      	str	r2, [r3, #32]
}
 800b5aa:	bf00      	nop
 800b5ac:	371c      	adds	r7, #28
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b4:	4770      	bx	lr
 800b5b6:	bf00      	nop
 800b5b8:	40012c00 	.word	0x40012c00
 800b5bc:	40013400 	.word	0x40013400
 800b5c0:	40014000 	.word	0x40014000
 800b5c4:	40014400 	.word	0x40014400
 800b5c8:	40014800 	.word	0x40014800
 800b5cc:	40015000 	.word	0x40015000

0800b5d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b087      	sub	sp, #28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	6a1b      	ldr	r3, [r3, #32]
 800b5e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	f023 0201 	bic.w	r2, r3, #1
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b5fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	011b      	lsls	r3, r3, #4
 800b600:	693a      	ldr	r2, [r7, #16]
 800b602:	4313      	orrs	r3, r2
 800b604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	f023 030a 	bic.w	r3, r3, #10
 800b60c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b60e:	697a      	ldr	r2, [r7, #20]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	4313      	orrs	r3, r2
 800b614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	693a      	ldr	r2, [r7, #16]
 800b61a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	697a      	ldr	r2, [r7, #20]
 800b620:	621a      	str	r2, [r3, #32]
}
 800b622:	bf00      	nop
 800b624:	371c      	adds	r7, #28
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b62e:	b480      	push	{r7}
 800b630:	b087      	sub	sp, #28
 800b632:	af00      	add	r7, sp, #0
 800b634:	60f8      	str	r0, [r7, #12]
 800b636:	60b9      	str	r1, [r7, #8]
 800b638:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6a1b      	ldr	r3, [r3, #32]
 800b644:	f023 0210 	bic.w	r2, r3, #16
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	699b      	ldr	r3, [r3, #24]
 800b650:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b658:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	031b      	lsls	r3, r3, #12
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	4313      	orrs	r3, r2
 800b662:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b664:	697b      	ldr	r3, [r7, #20]
 800b666:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b66a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	011b      	lsls	r3, r3, #4
 800b670:	697a      	ldr	r2, [r7, #20]
 800b672:	4313      	orrs	r3, r2
 800b674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	693a      	ldr	r2, [r7, #16]
 800b67a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	697a      	ldr	r2, [r7, #20]
 800b680:	621a      	str	r2, [r3, #32]
}
 800b682:	bf00      	nop
 800b684:	371c      	adds	r7, #28
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b68e:	b480      	push	{r7}
 800b690:	b085      	sub	sp, #20
 800b692:	af00      	add	r7, sp, #0
 800b694:	6078      	str	r0, [r7, #4]
 800b696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b6a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b6aa:	683a      	ldr	r2, [r7, #0]
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	f043 0307 	orr.w	r3, r3, #7
 800b6b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	609a      	str	r2, [r3, #8]
}
 800b6bc:	bf00      	nop
 800b6be:	3714      	adds	r7, #20
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
 800b6d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	689b      	ldr	r3, [r3, #8]
 800b6da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b6e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	021a      	lsls	r2, r3, #8
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	431a      	orrs	r2, r3
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	697a      	ldr	r2, [r7, #20]
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	609a      	str	r2, [r3, #8]
}
 800b6fc:	bf00      	nop
 800b6fe:	371c      	adds	r7, #28
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	f003 031f 	and.w	r3, r3, #31
 800b71a:	2201      	movs	r2, #1
 800b71c:	fa02 f303 	lsl.w	r3, r2, r3
 800b720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6a1a      	ldr	r2, [r3, #32]
 800b726:	697b      	ldr	r3, [r7, #20]
 800b728:	43db      	mvns	r3, r3
 800b72a:	401a      	ands	r2, r3
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6a1a      	ldr	r2, [r3, #32]
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	f003 031f 	and.w	r3, r3, #31
 800b73a:	6879      	ldr	r1, [r7, #4]
 800b73c:	fa01 f303 	lsl.w	r3, r1, r3
 800b740:	431a      	orrs	r2, r3
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	621a      	str	r2, [r3, #32]
}
 800b746:	bf00      	nop
 800b748:	371c      	adds	r7, #28
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr
	...

0800b754 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a26      	ldr	r2, [pc, #152]	@ (800b7f8 <TIM_ResetCallback+0xa4>)
 800b760:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a25      	ldr	r2, [pc, #148]	@ (800b7fc <TIM_ResetCallback+0xa8>)
 800b768:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a24      	ldr	r2, [pc, #144]	@ (800b800 <TIM_ResetCallback+0xac>)
 800b770:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a23      	ldr	r2, [pc, #140]	@ (800b804 <TIM_ResetCallback+0xb0>)
 800b778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	4a22      	ldr	r2, [pc, #136]	@ (800b808 <TIM_ResetCallback+0xb4>)
 800b780:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	4a21      	ldr	r2, [pc, #132]	@ (800b80c <TIM_ResetCallback+0xb8>)
 800b788:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	4a20      	ldr	r2, [pc, #128]	@ (800b810 <TIM_ResetCallback+0xbc>)
 800b790:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	4a1f      	ldr	r2, [pc, #124]	@ (800b814 <TIM_ResetCallback+0xc0>)
 800b798:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	4a1e      	ldr	r2, [pc, #120]	@ (800b818 <TIM_ResetCallback+0xc4>)
 800b7a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a1d      	ldr	r2, [pc, #116]	@ (800b81c <TIM_ResetCallback+0xc8>)
 800b7a8:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	4a1c      	ldr	r2, [pc, #112]	@ (800b820 <TIM_ResetCallback+0xcc>)
 800b7b0:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	4a1b      	ldr	r2, [pc, #108]	@ (800b824 <TIM_ResetCallback+0xd0>)
 800b7b8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a1a      	ldr	r2, [pc, #104]	@ (800b828 <TIM_ResetCallback+0xd4>)
 800b7c0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a19      	ldr	r2, [pc, #100]	@ (800b82c <TIM_ResetCallback+0xd8>)
 800b7c8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a18      	ldr	r2, [pc, #96]	@ (800b830 <TIM_ResetCallback+0xdc>)
 800b7d0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a17      	ldr	r2, [pc, #92]	@ (800b834 <TIM_ResetCallback+0xe0>)
 800b7d8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a16      	ldr	r2, [pc, #88]	@ (800b838 <TIM_ResetCallback+0xe4>)
 800b7e0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a15      	ldr	r2, [pc, #84]	@ (800b83c <TIM_ResetCallback+0xe8>)
 800b7e8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr
 800b7f8:	08004a05 	.word	0x08004a05
 800b7fc:	0800aaa1 	.word	0x0800aaa1
 800b800:	0800ab19 	.word	0x0800ab19
 800b804:	0800ab2d 	.word	0x0800ab2d
 800b808:	0800aac9 	.word	0x0800aac9
 800b80c:	0800aadd 	.word	0x0800aadd
 800b810:	0800aab5 	.word	0x0800aab5
 800b814:	0800aaf1 	.word	0x0800aaf1
 800b818:	0800ab05 	.word	0x0800ab05
 800b81c:	0800ab41 	.word	0x0800ab41
 800b820:	0800ba95 	.word	0x0800ba95
 800b824:	0800baa9 	.word	0x0800baa9
 800b828:	0800babd 	.word	0x0800babd
 800b82c:	0800bad1 	.word	0x0800bad1
 800b830:	0800bae5 	.word	0x0800bae5
 800b834:	0800baf9 	.word	0x0800baf9
 800b838:	0800bb0d 	.word	0x0800bb0d
 800b83c:	0800bb21 	.word	0x0800bb21

0800b840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
 800b848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b850:	2b01      	cmp	r3, #1
 800b852:	d101      	bne.n	800b858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b854:	2302      	movs	r3, #2
 800b856:	e074      	b.n	800b942 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2202      	movs	r2, #2
 800b864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a34      	ldr	r2, [pc, #208]	@ (800b950 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d009      	beq.n	800b896 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a33      	ldr	r2, [pc, #204]	@ (800b954 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d004      	beq.n	800b896 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a31      	ldr	r2, [pc, #196]	@ (800b958 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d108      	bne.n	800b8a8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b89c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b8ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	68fa      	ldr	r2, [r7, #12]
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a21      	ldr	r2, [pc, #132]	@ (800b950 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d022      	beq.n	800b916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8d8:	d01d      	beq.n	800b916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a1f      	ldr	r2, [pc, #124]	@ (800b95c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d018      	beq.n	800b916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b960 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d013      	beq.n	800b916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	4a1c      	ldr	r2, [pc, #112]	@ (800b964 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b8f4:	4293      	cmp	r3, r2
 800b8f6:	d00e      	beq.n	800b916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	4a15      	ldr	r2, [pc, #84]	@ (800b954 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8fe:	4293      	cmp	r3, r2
 800b900:	d009      	beq.n	800b916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	4a18      	ldr	r2, [pc, #96]	@ (800b968 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b908:	4293      	cmp	r3, r2
 800b90a:	d004      	beq.n	800b916 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a11      	ldr	r2, [pc, #68]	@ (800b958 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d10c      	bne.n	800b930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b91c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	68ba      	ldr	r2, [r7, #8]
 800b924:	4313      	orrs	r3, r2
 800b926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3714      	adds	r7, #20
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	40012c00 	.word	0x40012c00
 800b954:	40013400 	.word	0x40013400
 800b958:	40015000 	.word	0x40015000
 800b95c:	40000400 	.word	0x40000400
 800b960:	40000800 	.word	0x40000800
 800b964:	40000c00 	.word	0x40000c00
 800b968:	40014000 	.word	0x40014000

0800b96c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b976:	2300      	movs	r3, #0
 800b978:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b980:	2b01      	cmp	r3, #1
 800b982:	d101      	bne.n	800b988 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b984:	2302      	movs	r3, #2
 800b986:	e078      	b.n	800ba7a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2201      	movs	r2, #1
 800b98c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	4313      	orrs	r3, r2
 800b9aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	695b      	ldr	r3, [r3, #20]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	699b      	ldr	r3, [r3, #24]
 800b9fc:	041b      	lsls	r3, r3, #16
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	69db      	ldr	r3, [r3, #28]
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a1c      	ldr	r2, [pc, #112]	@ (800ba88 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d009      	beq.n	800ba2e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a1b      	ldr	r2, [pc, #108]	@ (800ba8c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d004      	beq.n	800ba2e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a19      	ldr	r2, [pc, #100]	@ (800ba90 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d11c      	bne.n	800ba68 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba38:	051b      	lsls	r3, r3, #20
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	6a1b      	ldr	r3, [r3, #32]
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba56:	4313      	orrs	r3, r2
 800ba58:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba64:	4313      	orrs	r3, r2
 800ba66:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	68fa      	ldr	r2, [r7, #12]
 800ba6e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	40012c00 	.word	0x40012c00
 800ba8c:	40013400 	.word	0x40013400
 800ba90:	40015000 	.word	0x40015000

0800ba94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bb14:	bf00      	nop
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b083      	sub	sp, #12
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bb28:	bf00      	nop
 800bb2a:	370c      	adds	r7, #12
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d101      	bne.n	800bb46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e050      	b.n	800bbe8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d114      	bne.n	800bb7a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 fd65 	bl	800c628 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d103      	bne.n	800bb70 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	4a21      	ldr	r2, [pc, #132]	@ (800bbf0 <HAL_UART_Init+0xbc>)
 800bb6c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2224      	movs	r2, #36	@ 0x24
 800bb7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681a      	ldr	r2, [r3, #0]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f022 0201 	bic.w	r2, r2, #1
 800bb90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d002      	beq.n	800bba0 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f001 f892 	bl	800ccc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 fd93 	bl	800c6cc <UART_SetConfig>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d101      	bne.n	800bbb0 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 800bbac:	2301      	movs	r3, #1
 800bbae:	e01b      	b.n	800bbe8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	685a      	ldr	r2, [r3, #4]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bbbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	689a      	ldr	r2, [r3, #8]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bbce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f042 0201 	orr.w	r2, r2, #1
 800bbde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f001 f911 	bl	800ce08 <UART_CheckIdleState>
 800bbe6:	4603      	mov	r3, r0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	08006039 	.word	0x08006039

0800bbf4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b087      	sub	sp, #28
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	460b      	mov	r3, r1
 800bbfe:	607a      	str	r2, [r7, #4]
 800bc00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800bc02:	2300      	movs	r3, #0
 800bc04:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d109      	bne.n	800bc20 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc12:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	e09c      	b.n	800bd5a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc26:	2b20      	cmp	r3, #32
 800bc28:	d16c      	bne.n	800bd04 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800bc2a:	7afb      	ldrb	r3, [r7, #11]
 800bc2c:	2b0c      	cmp	r3, #12
 800bc2e:	d85e      	bhi.n	800bcee <HAL_UART_RegisterCallback+0xfa>
 800bc30:	a201      	add	r2, pc, #4	@ (adr r2, 800bc38 <HAL_UART_RegisterCallback+0x44>)
 800bc32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc36:	bf00      	nop
 800bc38:	0800bc6d 	.word	0x0800bc6d
 800bc3c:	0800bc77 	.word	0x0800bc77
 800bc40:	0800bc81 	.word	0x0800bc81
 800bc44:	0800bc8b 	.word	0x0800bc8b
 800bc48:	0800bc95 	.word	0x0800bc95
 800bc4c:	0800bc9f 	.word	0x0800bc9f
 800bc50:	0800bca9 	.word	0x0800bca9
 800bc54:	0800bcb3 	.word	0x0800bcb3
 800bc58:	0800bcbd 	.word	0x0800bcbd
 800bc5c:	0800bcc7 	.word	0x0800bcc7
 800bc60:	0800bcd1 	.word	0x0800bcd1
 800bc64:	0800bcdb 	.word	0x0800bcdb
 800bc68:	0800bce5 	.word	0x0800bce5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800bc74:	e070      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800bc7e:	e06b      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800bc88:	e066      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800bc92:	e061      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800bc9c:	e05c      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	687a      	ldr	r2, [r7, #4]
 800bca2:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800bca6:	e057      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800bcb0:	e052      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800bcba:	e04d      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800bcc4:	e048      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800bcce:	e043      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800bcd8:	e03e      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800bce2:	e039      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800bcec:	e034      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcf4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	75fb      	strb	r3, [r7, #23]
        break;
 800bd02:	e029      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d11a      	bne.n	800bd44 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800bd0e:	7afb      	ldrb	r3, [r7, #11]
 800bd10:	2b0b      	cmp	r3, #11
 800bd12:	d002      	beq.n	800bd1a <HAL_UART_RegisterCallback+0x126>
 800bd14:	2b0c      	cmp	r3, #12
 800bd16:	d005      	beq.n	800bd24 <HAL_UART_RegisterCallback+0x130>
 800bd18:	e009      	b.n	800bd2e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800bd22:	e019      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 800bd2c:	e014      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd34:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	75fb      	strb	r3, [r7, #23]
        break;
 800bd42:	e009      	b.n	800bd58 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800bd54:	2301      	movs	r3, #1
 800bd56:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800bd58:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	371c      	adds	r7, #28
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr
 800bd66:	bf00      	nop

0800bd68 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08a      	sub	sp, #40	@ 0x28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	4613      	mov	r3, r2
 800bd74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd7c:	2b20      	cmp	r3, #32
 800bd7e:	d137      	bne.n	800bdf0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd80:	68bb      	ldr	r3, [r7, #8]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d002      	beq.n	800bd8c <HAL_UART_Receive_DMA+0x24>
 800bd86:	88fb      	ldrh	r3, [r7, #6]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d101      	bne.n	800bd90 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e030      	b.n	800bdf2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2200      	movs	r2, #0
 800bd94:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a18      	ldr	r2, [pc, #96]	@ (800bdfc <HAL_UART_Receive_DMA+0x94>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d01f      	beq.n	800bde0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d018      	beq.n	800bde0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	e853 3f00 	ldrex	r3, [r3]
 800bdba:	613b      	str	r3, [r7, #16]
   return(result);
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bdc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	461a      	mov	r2, r3
 800bdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdcc:	623b      	str	r3, [r7, #32]
 800bdce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdd0:	69f9      	ldr	r1, [r7, #28]
 800bdd2:	6a3a      	ldr	r2, [r7, #32]
 800bdd4:	e841 2300 	strex	r3, r2, [r1]
 800bdd8:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d1e6      	bne.n	800bdae <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bde0:	88fb      	ldrh	r3, [r7, #6]
 800bde2:	461a      	mov	r2, r3
 800bde4:	68b9      	ldr	r1, [r7, #8]
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f001 f926 	bl	800d038 <UART_Start_Receive_DMA>
 800bdec:	4603      	mov	r3, r0
 800bdee:	e000      	b.n	800bdf2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bdf0:	2302      	movs	r3, #2
  }
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3728      	adds	r7, #40	@ 0x28
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	40008000 	.word	0x40008000

0800be00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b0ba      	sub	sp, #232	@ 0xe8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	69db      	ldr	r3, [r3, #28]
 800be0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800be26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800be2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800be2e:	4013      	ands	r3, r2
 800be30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800be34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d11b      	bne.n	800be74 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800be3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be40:	f003 0320 	and.w	r3, r3, #32
 800be44:	2b00      	cmp	r3, #0
 800be46:	d015      	beq.n	800be74 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800be48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800be4c:	f003 0320 	and.w	r3, r3, #32
 800be50:	2b00      	cmp	r3, #0
 800be52:	d105      	bne.n	800be60 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800be54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800be58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d009      	beq.n	800be74 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 8312 	beq.w	800c48e <HAL_UART_IRQHandler+0x68e>
      {
        huart->RxISR(huart);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	4798      	blx	r3
      }
      return;
 800be72:	e30c      	b.n	800c48e <HAL_UART_IRQHandler+0x68e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800be74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800be78:	2b00      	cmp	r3, #0
 800be7a:	f000 8129 	beq.w	800c0d0 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800be7e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800be82:	4b90      	ldr	r3, [pc, #576]	@ (800c0c4 <HAL_UART_IRQHandler+0x2c4>)
 800be84:	4013      	ands	r3, r2
 800be86:	2b00      	cmp	r3, #0
 800be88:	d106      	bne.n	800be98 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800be8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800be8e:	4b8e      	ldr	r3, [pc, #568]	@ (800c0c8 <HAL_UART_IRQHandler+0x2c8>)
 800be90:	4013      	ands	r3, r2
 800be92:	2b00      	cmp	r3, #0
 800be94:	f000 811c 	beq.w	800c0d0 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800be9c:	f003 0301 	and.w	r3, r3, #1
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d011      	beq.n	800bec8 <HAL_UART_IRQHandler+0xc8>
 800bea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00b      	beq.n	800bec8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	2201      	movs	r2, #1
 800beb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bebe:	f043 0201 	orr.w	r2, r3, #1
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800becc:	f003 0302 	and.w	r3, r3, #2
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d011      	beq.n	800bef8 <HAL_UART_IRQHandler+0xf8>
 800bed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bed8:	f003 0301 	and.w	r3, r3, #1
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00b      	beq.n	800bef8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2202      	movs	r2, #2
 800bee6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beee:	f043 0204 	orr.w	r2, r3, #4
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800befc:	f003 0304 	and.w	r3, r3, #4
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d011      	beq.n	800bf28 <HAL_UART_IRQHandler+0x128>
 800bf04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf08:	f003 0301 	and.w	r3, r3, #1
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00b      	beq.n	800bf28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2204      	movs	r2, #4
 800bf16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf1e:	f043 0202 	orr.w	r2, r3, #2
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bf28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf2c:	f003 0308 	and.w	r3, r3, #8
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d017      	beq.n	800bf64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf38:	f003 0320 	and.w	r3, r3, #32
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d105      	bne.n	800bf4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800bf40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800bf44:	4b5f      	ldr	r3, [pc, #380]	@ (800c0c4 <HAL_UART_IRQHandler+0x2c4>)
 800bf46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00b      	beq.n	800bf64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2208      	movs	r2, #8
 800bf52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf5a:	f043 0208 	orr.w	r2, r3, #8
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bf64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d012      	beq.n	800bf96 <HAL_UART_IRQHandler+0x196>
 800bf70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d00c      	beq.n	800bf96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bf84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf8c:	f043 0220 	orr.w	r2, r3, #32
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	f000 8278 	beq.w	800c492 <HAL_UART_IRQHandler+0x692>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bfa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfa6:	f003 0320 	and.w	r3, r3, #32
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d013      	beq.n	800bfd6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bfae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfb2:	f003 0320 	and.w	r3, r3, #32
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d105      	bne.n	800bfc6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bfba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bfbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d007      	beq.n	800bfd6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d003      	beq.n	800bfd6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfea:	2b40      	cmp	r3, #64	@ 0x40
 800bfec:	d005      	beq.n	800bffa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bfee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800bff2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d058      	beq.n	800c0ac <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f001 f903 	bl	800d206 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c00a:	2b40      	cmp	r3, #64	@ 0x40
 800c00c:	d148      	bne.n	800c0a0 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3308      	adds	r3, #8
 800c014:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c018:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c01c:	e853 3f00 	ldrex	r3, [r3]
 800c020:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c024:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c028:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c02c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	3308      	adds	r3, #8
 800c036:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c03a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c03e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c042:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c046:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c04a:	e841 2300 	strex	r3, r2, [r1]
 800c04e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1d9      	bne.n	800c00e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c060:	2b00      	cmp	r3, #0
 800c062:	d017      	beq.n	800c094 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c06a:	4a18      	ldr	r2, [pc, #96]	@ (800c0cc <HAL_UART_IRQHandler+0x2cc>)
 800c06c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c074:	4618      	mov	r0, r3
 800c076:	f7fc f8dd 	bl	8008234 <HAL_DMA_Abort_IT>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d01f      	beq.n	800c0c0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800c08e:	4610      	mov	r0, r2
 800c090:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c092:	e015      	b.n	800c0c0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c09e:	e00f      	b.n	800c0c0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0aa:	e009      	b.n	800c0c0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800c0be:	e1e8      	b.n	800c492 <HAL_UART_IRQHandler+0x692>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0c0:	bf00      	nop
    return;
 800c0c2:	e1e6      	b.n	800c492 <HAL_UART_IRQHandler+0x692>
 800c0c4:	10000001 	.word	0x10000001
 800c0c8:	04000120 	.word	0x04000120
 800c0cc:	0800d4d1 	.word	0x0800d4d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	f040 8176 	bne.w	800c3c6 <HAL_UART_IRQHandler+0x5c6>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c0da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0de:	f003 0310 	and.w	r3, r3, #16
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	f000 816f 	beq.w	800c3c6 <HAL_UART_IRQHandler+0x5c6>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0ec:	f003 0310 	and.w	r3, r3, #16
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	f000 8168 	beq.w	800c3c6 <HAL_UART_IRQHandler+0x5c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2210      	movs	r2, #16
 800c0fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c108:	2b40      	cmp	r3, #64	@ 0x40
 800c10a:	f040 80dc 	bne.w	800c2c6 <HAL_UART_IRQHandler+0x4c6>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c11c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 80b1 	beq.w	800c288 <HAL_UART_IRQHandler+0x488>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c12c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c130:	429a      	cmp	r2, r3
 800c132:	f080 80a9 	bcs.w	800c288 <HAL_UART_IRQHandler+0x488>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c13c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 0320 	and.w	r3, r3, #32
 800c14e:	2b00      	cmp	r3, #0
 800c150:	f040 8087 	bne.w	800c262 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c160:	e853 3f00 	ldrex	r3, [r3]
 800c164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c168:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c16c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c170:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	461a      	mov	r2, r3
 800c17a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c17e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c182:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c186:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c18a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c18e:	e841 2300 	strex	r3, r2, [r1]
 800c192:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c196:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d1da      	bne.n	800c154 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	3308      	adds	r3, #8
 800c1a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1a8:	e853 3f00 	ldrex	r3, [r3]
 800c1ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c1ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1b0:	f023 0301 	bic.w	r3, r3, #1
 800c1b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	3308      	adds	r3, #8
 800c1be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c1c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c1c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c1ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c1ce:	e841 2300 	strex	r3, r2, [r1]
 800c1d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c1d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d1e1      	bne.n	800c19e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	3308      	adds	r3, #8
 800c1e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c1e4:	e853 3f00 	ldrex	r3, [r3]
 800c1e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c1ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	3308      	adds	r3, #8
 800c1fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c1fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c200:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c202:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c204:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c206:	e841 2300 	strex	r3, r2, [r1]
 800c20a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c20c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1e3      	bne.n	800c1da <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2220      	movs	r2, #32
 800c216:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2200      	movs	r2, #0
 800c21e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c228:	e853 3f00 	ldrex	r3, [r3]
 800c22c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c22e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c230:	f023 0310 	bic.w	r3, r3, #16
 800c234:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	461a      	mov	r2, r3
 800c23e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c242:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c244:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c246:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c248:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c24a:	e841 2300 	strex	r3, r2, [r1]
 800c24e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e4      	bne.n	800c220 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c25c:	4618      	mov	r0, r3
 800c25e:	f7fb ff90 	bl	8008182 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2202      	movs	r2, #2
 800c266:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800c27a:	b292      	uxth	r2, r2
 800c27c:	1a8a      	subs	r2, r1, r2
 800c27e:	b292      	uxth	r2, r2
 800c280:	4611      	mov	r1, r2
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	4798      	blx	r3
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800c286:	e106      	b.n	800c496 <HAL_UART_IRQHandler+0x696>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c28e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c292:	429a      	cmp	r2, r3
 800c294:	f040 80ff 	bne.w	800c496 <HAL_UART_IRQHandler+0x696>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	f003 0320 	and.w	r3, r3, #32
 800c2a6:	2b20      	cmp	r3, #32
 800c2a8:	f040 80f5 	bne.w	800c496 <HAL_UART_IRQHandler+0x696>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2202      	movs	r2, #2
 800c2b0:	671a      	str	r2, [r3, #112]	@ 0x70
            huart->RxEventCallback(huart, huart->RxXferSize);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800c2be:	4611      	mov	r1, r2
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	4798      	blx	r3
      return;
 800c2c4:	e0e7      	b.n	800c496 <HAL_UART_IRQHandler+0x696>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	f000 80d9 	beq.w	800c49a <HAL_UART_IRQHandler+0x69a>
          && (nb_rx_data > 0U))
 800c2e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	f000 80d4 	beq.w	800c49a <HAL_UART_IRQHandler+0x69a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2fa:	e853 3f00 	ldrex	r3, [r3]
 800c2fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c302:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c306:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	461a      	mov	r2, r3
 800c310:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c314:	647b      	str	r3, [r7, #68]	@ 0x44
 800c316:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c318:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c31a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c31c:	e841 2300 	strex	r3, r2, [r1]
 800c320:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c324:	2b00      	cmp	r3, #0
 800c326:	d1e4      	bne.n	800c2f2 <HAL_UART_IRQHandler+0x4f2>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	3308      	adds	r3, #8
 800c32e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c332:	e853 3f00 	ldrex	r3, [r3]
 800c336:	623b      	str	r3, [r7, #32]
   return(result);
 800c338:	6a3b      	ldr	r3, [r7, #32]
 800c33a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c33e:	f023 0301 	bic.w	r3, r3, #1
 800c342:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	3308      	adds	r3, #8
 800c34c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c350:	633a      	str	r2, [r7, #48]	@ 0x30
 800c352:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c354:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c358:	e841 2300 	strex	r3, r2, [r1]
 800c35c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1e1      	bne.n	800c328 <HAL_UART_IRQHandler+0x528>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2220      	movs	r2, #32
 800c368:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	e853 3f00 	ldrex	r3, [r3]
 800c384:	60fb      	str	r3, [r7, #12]
   return(result);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f023 0310 	bic.w	r3, r3, #16
 800c38c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	461a      	mov	r2, r3
 800c396:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c39a:	61fb      	str	r3, [r7, #28]
 800c39c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39e:	69b9      	ldr	r1, [r7, #24]
 800c3a0:	69fa      	ldr	r2, [r7, #28]
 800c3a2:	e841 2300 	strex	r3, r2, [r1]
 800c3a6:	617b      	str	r3, [r7, #20]
   return(result);
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1e4      	bne.n	800c378 <HAL_UART_IRQHandler+0x578>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800c3ba:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 800c3be:	4611      	mov	r1, r2
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c3c4:	e069      	b.n	800c49a <HAL_UART_IRQHandler+0x69a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d010      	beq.n	800c3f4 <HAL_UART_IRQHandler+0x5f4>
 800c3d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c3d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00a      	beq.n	800c3f4 <HAL_UART_IRQHandler+0x5f4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800c3e6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c3f2:	e055      	b.n	800c4a0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c3f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d014      	beq.n	800c42a <HAL_UART_IRQHandler+0x62a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c404:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d105      	bne.n	800c418 <HAL_UART_IRQHandler+0x618>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c40c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c410:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d008      	beq.n	800c42a <HAL_UART_IRQHandler+0x62a>
  {
    if (huart->TxISR != NULL)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d03e      	beq.n	800c49e <HAL_UART_IRQHandler+0x69e>
    {
      huart->TxISR(huart);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	4798      	blx	r3
    }
    return;
 800c428:	e039      	b.n	800c49e <HAL_UART_IRQHandler+0x69e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c42a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c42e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c432:	2b00      	cmp	r3, #0
 800c434:	d009      	beq.n	800c44a <HAL_UART_IRQHandler+0x64a>
 800c436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c43a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d003      	beq.n	800c44a <HAL_UART_IRQHandler+0x64a>
  {
    UART_EndTransmit_IT(huart);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f001 f858 	bl	800d4f8 <UART_EndTransmit_IT>
    return;
 800c448:	e02a      	b.n	800c4a0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c44a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c44e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c452:	2b00      	cmp	r3, #0
 800c454:	d00b      	beq.n	800c46e <HAL_UART_IRQHandler+0x66e>
 800c456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c45a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d005      	beq.n	800c46e <HAL_UART_IRQHandler+0x66e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c46c:	e018      	b.n	800c4a0 <HAL_UART_IRQHandler+0x6a0>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c472:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c476:	2b00      	cmp	r3, #0
 800c478:	d012      	beq.n	800c4a0 <HAL_UART_IRQHandler+0x6a0>
 800c47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c47e:	2b00      	cmp	r3, #0
 800c480:	da0e      	bge.n	800c4a0 <HAL_UART_IRQHandler+0x6a0>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c48c:	e008      	b.n	800c4a0 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c48e:	bf00      	nop
 800c490:	e006      	b.n	800c4a0 <HAL_UART_IRQHandler+0x6a0>
    return;
 800c492:	bf00      	nop
 800c494:	e004      	b.n	800c4a0 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c496:	bf00      	nop
 800c498:	e002      	b.n	800c4a0 <HAL_UART_IRQHandler+0x6a0>
      return;
 800c49a:	bf00      	nop
 800c49c:	e000      	b.n	800c4a0 <HAL_UART_IRQHandler+0x6a0>
    return;
 800c49e:	bf00      	nop
  }
}
 800c4a0:	37e8      	adds	r7, #232	@ 0xe8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop

0800c4a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800c514:	bf00      	nop
 800c516:	370c      	adds	r7, #12
 800c518:	46bd      	mov	sp, r7
 800c51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51e:	4770      	bx	lr

0800c520 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800c520:	b480      	push	{r7}
 800c522:	b083      	sub	sp, #12
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800c528:	bf00      	nop
 800c52a:	370c      	adds	r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr

0800c534 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800c53c:	bf00      	nop
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr

0800c548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	460b      	mov	r3, r1
 800c552:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c554:	bf00      	nop
 800c556:	370c      	adds	r7, #12
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800c560:	b480      	push	{r7}
 800c562:	b083      	sub	sp, #12
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4a09      	ldr	r2, [pc, #36]	@ (800c594 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800c570:	4293      	cmp	r3, r2
 800c572:	d009      	beq.n	800c588 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	695b      	ldr	r3, [r3, #20]
 800c57a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	683a      	ldr	r2, [r7, #0]
 800c584:	430a      	orrs	r2, r1
 800c586:	615a      	str	r2, [r3, #20]
  }
}
 800c588:	bf00      	nop
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	40008000 	.word	0x40008000

0800c598 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a18      	ldr	r2, [pc, #96]	@ (800c608 <HAL_UART_EnableReceiverTimeout+0x70>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d027      	beq.n	800c5fa <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c5b0:	2b20      	cmp	r3, #32
 800c5b2:	d120      	bne.n	800c5f6 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c5ba:	2b01      	cmp	r3, #1
 800c5bc:	d101      	bne.n	800c5c2 <HAL_UART_EnableReceiverTimeout+0x2a>
 800c5be:	2302      	movs	r3, #2
 800c5c0:	e01c      	b.n	800c5fc <HAL_UART_EnableReceiverTimeout+0x64>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2201      	movs	r2, #1
 800c5c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2224      	movs	r2, #36	@ 0x24
 800c5ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	685a      	ldr	r2, [r3, #4]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800c5e0:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2220      	movs	r2, #32
 800c5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	e002      	b.n	800c5fc <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800c5f6:	2302      	movs	r3, #2
 800c5f8:	e000      	b.n	800c5fc <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800c5fa:	2301      	movs	r3, #1
  }
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	370c      	adds	r7, #12
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	40008000 	.word	0x40008000

0800c60c <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	370c      	adds	r7, #12
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
	...

0800c628 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	4a1a      	ldr	r2, [pc, #104]	@ (800c69c <UART_InitCallbacksToDefault+0x74>)
 800c634:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	4a19      	ldr	r2, [pc, #100]	@ (800c6a0 <UART_InitCallbacksToDefault+0x78>)
 800c63c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a18      	ldr	r2, [pc, #96]	@ (800c6a4 <UART_InitCallbacksToDefault+0x7c>)
 800c644:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	4a17      	ldr	r2, [pc, #92]	@ (800c6a8 <UART_InitCallbacksToDefault+0x80>)
 800c64c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	4a16      	ldr	r2, [pc, #88]	@ (800c6ac <UART_InitCallbacksToDefault+0x84>)
 800c654:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a15      	ldr	r2, [pc, #84]	@ (800c6b0 <UART_InitCallbacksToDefault+0x88>)
 800c65c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4a14      	ldr	r2, [pc, #80]	@ (800c6b4 <UART_InitCallbacksToDefault+0x8c>)
 800c664:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a13      	ldr	r2, [pc, #76]	@ (800c6b8 <UART_InitCallbacksToDefault+0x90>)
 800c66c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a12      	ldr	r2, [pc, #72]	@ (800c6bc <UART_InitCallbacksToDefault+0x94>)
 800c674:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	4a11      	ldr	r2, [pc, #68]	@ (800c6c0 <UART_InitCallbacksToDefault+0x98>)
 800c67c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4a10      	ldr	r2, [pc, #64]	@ (800c6c4 <UART_InitCallbacksToDefault+0x9c>)
 800c684:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a0f      	ldr	r2, [pc, #60]	@ (800c6c8 <UART_InitCallbacksToDefault+0xa0>)
 800c68c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800c690:	bf00      	nop
 800c692:	370c      	adds	r7, #12
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr
 800c69c:	0800c4bd 	.word	0x0800c4bd
 800c6a0:	0800c4a9 	.word	0x0800c4a9
 800c6a4:	0800c4e5 	.word	0x0800c4e5
 800c6a8:	0800c4d1 	.word	0x0800c4d1
 800c6ac:	0800c4f9 	.word	0x0800c4f9
 800c6b0:	0800c50d 	.word	0x0800c50d
 800c6b4:	0800c521 	.word	0x0800c521
 800c6b8:	0800c535 	.word	0x0800c535
 800c6bc:	0800d553 	.word	0x0800d553
 800c6c0:	0800d567 	.word	0x0800d567
 800c6c4:	0800d57b 	.word	0x0800d57b
 800c6c8:	0800c549 	.word	0x0800c549

0800c6cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6d0:	b08c      	sub	sp, #48	@ 0x30
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	689a      	ldr	r2, [r3, #8]
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	431a      	orrs	r2, r3
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	431a      	orrs	r2, r3
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	69db      	ldr	r3, [r3, #28]
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	4baa      	ldr	r3, [pc, #680]	@ (800c9a4 <UART_SetConfig+0x2d8>)
 800c6fc:	4013      	ands	r3, r2
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	6812      	ldr	r2, [r2, #0]
 800c702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c704:	430b      	orrs	r3, r1
 800c706:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	685b      	ldr	r3, [r3, #4]
 800c70e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	68da      	ldr	r2, [r3, #12]
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	430a      	orrs	r2, r1
 800c71c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	699b      	ldr	r3, [r3, #24]
 800c722:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4a9f      	ldr	r2, [pc, #636]	@ (800c9a8 <UART_SetConfig+0x2dc>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d004      	beq.n	800c738 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c734:	4313      	orrs	r3, r2
 800c736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	689b      	ldr	r3, [r3, #8]
 800c73e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c742:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c746:	697a      	ldr	r2, [r7, #20]
 800c748:	6812      	ldr	r2, [r2, #0]
 800c74a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c74c:	430b      	orrs	r3, r1
 800c74e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c756:	f023 010f 	bic.w	r1, r3, #15
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	430a      	orrs	r2, r1
 800c764:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4a90      	ldr	r2, [pc, #576]	@ (800c9ac <UART_SetConfig+0x2e0>)
 800c76c:	4293      	cmp	r3, r2
 800c76e:	d125      	bne.n	800c7bc <UART_SetConfig+0xf0>
 800c770:	4b8f      	ldr	r3, [pc, #572]	@ (800c9b0 <UART_SetConfig+0x2e4>)
 800c772:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c776:	f003 0303 	and.w	r3, r3, #3
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	d81a      	bhi.n	800c7b4 <UART_SetConfig+0xe8>
 800c77e:	a201      	add	r2, pc, #4	@ (adr r2, 800c784 <UART_SetConfig+0xb8>)
 800c780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c784:	0800c795 	.word	0x0800c795
 800c788:	0800c7a5 	.word	0x0800c7a5
 800c78c:	0800c79d 	.word	0x0800c79d
 800c790:	0800c7ad 	.word	0x0800c7ad
 800c794:	2301      	movs	r3, #1
 800c796:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c79a:	e116      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c79c:	2302      	movs	r3, #2
 800c79e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7a2:	e112      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c7a4:	2304      	movs	r3, #4
 800c7a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7aa:	e10e      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c7ac:	2308      	movs	r3, #8
 800c7ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7b2:	e10a      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c7b4:	2310      	movs	r3, #16
 800c7b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7ba:	e106      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a7c      	ldr	r2, [pc, #496]	@ (800c9b4 <UART_SetConfig+0x2e8>)
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	d138      	bne.n	800c838 <UART_SetConfig+0x16c>
 800c7c6:	4b7a      	ldr	r3, [pc, #488]	@ (800c9b0 <UART_SetConfig+0x2e4>)
 800c7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7cc:	f003 030c 	and.w	r3, r3, #12
 800c7d0:	2b0c      	cmp	r3, #12
 800c7d2:	d82d      	bhi.n	800c830 <UART_SetConfig+0x164>
 800c7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c7dc <UART_SetConfig+0x110>)
 800c7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7da:	bf00      	nop
 800c7dc:	0800c811 	.word	0x0800c811
 800c7e0:	0800c831 	.word	0x0800c831
 800c7e4:	0800c831 	.word	0x0800c831
 800c7e8:	0800c831 	.word	0x0800c831
 800c7ec:	0800c821 	.word	0x0800c821
 800c7f0:	0800c831 	.word	0x0800c831
 800c7f4:	0800c831 	.word	0x0800c831
 800c7f8:	0800c831 	.word	0x0800c831
 800c7fc:	0800c819 	.word	0x0800c819
 800c800:	0800c831 	.word	0x0800c831
 800c804:	0800c831 	.word	0x0800c831
 800c808:	0800c831 	.word	0x0800c831
 800c80c:	0800c829 	.word	0x0800c829
 800c810:	2300      	movs	r3, #0
 800c812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c816:	e0d8      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c818:	2302      	movs	r3, #2
 800c81a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c81e:	e0d4      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c820:	2304      	movs	r3, #4
 800c822:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c826:	e0d0      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c828:	2308      	movs	r3, #8
 800c82a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c82e:	e0cc      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c830:	2310      	movs	r3, #16
 800c832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c836:	e0c8      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	4a5e      	ldr	r2, [pc, #376]	@ (800c9b8 <UART_SetConfig+0x2ec>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d125      	bne.n	800c88e <UART_SetConfig+0x1c2>
 800c842:	4b5b      	ldr	r3, [pc, #364]	@ (800c9b0 <UART_SetConfig+0x2e4>)
 800c844:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c848:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c84c:	2b30      	cmp	r3, #48	@ 0x30
 800c84e:	d016      	beq.n	800c87e <UART_SetConfig+0x1b2>
 800c850:	2b30      	cmp	r3, #48	@ 0x30
 800c852:	d818      	bhi.n	800c886 <UART_SetConfig+0x1ba>
 800c854:	2b20      	cmp	r3, #32
 800c856:	d00a      	beq.n	800c86e <UART_SetConfig+0x1a2>
 800c858:	2b20      	cmp	r3, #32
 800c85a:	d814      	bhi.n	800c886 <UART_SetConfig+0x1ba>
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d002      	beq.n	800c866 <UART_SetConfig+0x19a>
 800c860:	2b10      	cmp	r3, #16
 800c862:	d008      	beq.n	800c876 <UART_SetConfig+0x1aa>
 800c864:	e00f      	b.n	800c886 <UART_SetConfig+0x1ba>
 800c866:	2300      	movs	r3, #0
 800c868:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c86c:	e0ad      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c86e:	2302      	movs	r3, #2
 800c870:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c874:	e0a9      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c876:	2304      	movs	r3, #4
 800c878:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c87c:	e0a5      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c87e:	2308      	movs	r3, #8
 800c880:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c884:	e0a1      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c886:	2310      	movs	r3, #16
 800c888:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c88c:	e09d      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	4a4a      	ldr	r2, [pc, #296]	@ (800c9bc <UART_SetConfig+0x2f0>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d125      	bne.n	800c8e4 <UART_SetConfig+0x218>
 800c898:	4b45      	ldr	r3, [pc, #276]	@ (800c9b0 <UART_SetConfig+0x2e4>)
 800c89a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c89e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c8a2:	2bc0      	cmp	r3, #192	@ 0xc0
 800c8a4:	d016      	beq.n	800c8d4 <UART_SetConfig+0x208>
 800c8a6:	2bc0      	cmp	r3, #192	@ 0xc0
 800c8a8:	d818      	bhi.n	800c8dc <UART_SetConfig+0x210>
 800c8aa:	2b80      	cmp	r3, #128	@ 0x80
 800c8ac:	d00a      	beq.n	800c8c4 <UART_SetConfig+0x1f8>
 800c8ae:	2b80      	cmp	r3, #128	@ 0x80
 800c8b0:	d814      	bhi.n	800c8dc <UART_SetConfig+0x210>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d002      	beq.n	800c8bc <UART_SetConfig+0x1f0>
 800c8b6:	2b40      	cmp	r3, #64	@ 0x40
 800c8b8:	d008      	beq.n	800c8cc <UART_SetConfig+0x200>
 800c8ba:	e00f      	b.n	800c8dc <UART_SetConfig+0x210>
 800c8bc:	2300      	movs	r3, #0
 800c8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8c2:	e082      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c8c4:	2302      	movs	r3, #2
 800c8c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8ca:	e07e      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c8cc:	2304      	movs	r3, #4
 800c8ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8d2:	e07a      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c8d4:	2308      	movs	r3, #8
 800c8d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8da:	e076      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c8dc:	2310      	movs	r3, #16
 800c8de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c8e2:	e072      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c8e4:	697b      	ldr	r3, [r7, #20]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4a35      	ldr	r2, [pc, #212]	@ (800c9c0 <UART_SetConfig+0x2f4>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d12a      	bne.n	800c944 <UART_SetConfig+0x278>
 800c8ee:	4b30      	ldr	r3, [pc, #192]	@ (800c9b0 <UART_SetConfig+0x2e4>)
 800c8f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c8f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c8f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c8fc:	d01a      	beq.n	800c934 <UART_SetConfig+0x268>
 800c8fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c902:	d81b      	bhi.n	800c93c <UART_SetConfig+0x270>
 800c904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c908:	d00c      	beq.n	800c924 <UART_SetConfig+0x258>
 800c90a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c90e:	d815      	bhi.n	800c93c <UART_SetConfig+0x270>
 800c910:	2b00      	cmp	r3, #0
 800c912:	d003      	beq.n	800c91c <UART_SetConfig+0x250>
 800c914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c918:	d008      	beq.n	800c92c <UART_SetConfig+0x260>
 800c91a:	e00f      	b.n	800c93c <UART_SetConfig+0x270>
 800c91c:	2300      	movs	r3, #0
 800c91e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c922:	e052      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c924:	2302      	movs	r3, #2
 800c926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c92a:	e04e      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c92c:	2304      	movs	r3, #4
 800c92e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c932:	e04a      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c934:	2308      	movs	r3, #8
 800c936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c93a:	e046      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c93c:	2310      	movs	r3, #16
 800c93e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c942:	e042      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a17      	ldr	r2, [pc, #92]	@ (800c9a8 <UART_SetConfig+0x2dc>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d13a      	bne.n	800c9c4 <UART_SetConfig+0x2f8>
 800c94e:	4b18      	ldr	r3, [pc, #96]	@ (800c9b0 <UART_SetConfig+0x2e4>)
 800c950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c954:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c958:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c95c:	d01a      	beq.n	800c994 <UART_SetConfig+0x2c8>
 800c95e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c962:	d81b      	bhi.n	800c99c <UART_SetConfig+0x2d0>
 800c964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c968:	d00c      	beq.n	800c984 <UART_SetConfig+0x2b8>
 800c96a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c96e:	d815      	bhi.n	800c99c <UART_SetConfig+0x2d0>
 800c970:	2b00      	cmp	r3, #0
 800c972:	d003      	beq.n	800c97c <UART_SetConfig+0x2b0>
 800c974:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c978:	d008      	beq.n	800c98c <UART_SetConfig+0x2c0>
 800c97a:	e00f      	b.n	800c99c <UART_SetConfig+0x2d0>
 800c97c:	2300      	movs	r3, #0
 800c97e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c982:	e022      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c984:	2302      	movs	r3, #2
 800c986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c98a:	e01e      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c98c:	2304      	movs	r3, #4
 800c98e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c992:	e01a      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c994:	2308      	movs	r3, #8
 800c996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c99a:	e016      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c99c:	2310      	movs	r3, #16
 800c99e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c9a2:	e012      	b.n	800c9ca <UART_SetConfig+0x2fe>
 800c9a4:	cfff69f3 	.word	0xcfff69f3
 800c9a8:	40008000 	.word	0x40008000
 800c9ac:	40013800 	.word	0x40013800
 800c9b0:	40021000 	.word	0x40021000
 800c9b4:	40004400 	.word	0x40004400
 800c9b8:	40004800 	.word	0x40004800
 800c9bc:	40004c00 	.word	0x40004c00
 800c9c0:	40005000 	.word	0x40005000
 800c9c4:	2310      	movs	r3, #16
 800c9c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4aae      	ldr	r2, [pc, #696]	@ (800cc88 <UART_SetConfig+0x5bc>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	f040 8097 	bne.w	800cb04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c9d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c9da:	2b08      	cmp	r3, #8
 800c9dc:	d823      	bhi.n	800ca26 <UART_SetConfig+0x35a>
 800c9de:	a201      	add	r2, pc, #4	@ (adr r2, 800c9e4 <UART_SetConfig+0x318>)
 800c9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e4:	0800ca09 	.word	0x0800ca09
 800c9e8:	0800ca27 	.word	0x0800ca27
 800c9ec:	0800ca11 	.word	0x0800ca11
 800c9f0:	0800ca27 	.word	0x0800ca27
 800c9f4:	0800ca17 	.word	0x0800ca17
 800c9f8:	0800ca27 	.word	0x0800ca27
 800c9fc:	0800ca27 	.word	0x0800ca27
 800ca00:	0800ca27 	.word	0x0800ca27
 800ca04:	0800ca1f 	.word	0x0800ca1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca08:	f7fc fcec 	bl	80093e4 <HAL_RCC_GetPCLK1Freq>
 800ca0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ca0e:	e010      	b.n	800ca32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca10:	4b9e      	ldr	r3, [pc, #632]	@ (800cc8c <UART_SetConfig+0x5c0>)
 800ca12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ca14:	e00d      	b.n	800ca32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca16:	f7fc fc77 	bl	8009308 <HAL_RCC_GetSysClockFreq>
 800ca1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ca1c:	e009      	b.n	800ca32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ca24:	e005      	b.n	800ca32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800ca26:	2300      	movs	r3, #0
 800ca28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ca30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	f000 8130 	beq.w	800cc9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca3e:	4a94      	ldr	r2, [pc, #592]	@ (800cc90 <UART_SetConfig+0x5c4>)
 800ca40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca44:	461a      	mov	r2, r3
 800ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca48:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	4613      	mov	r3, r2
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	4413      	add	r3, r2
 800ca58:	69ba      	ldr	r2, [r7, #24]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d305      	bcc.n	800ca6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca64:	69ba      	ldr	r2, [r7, #24]
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d903      	bls.n	800ca72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800ca6a:	2301      	movs	r3, #1
 800ca6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ca70:	e113      	b.n	800cc9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca74:	2200      	movs	r2, #0
 800ca76:	60bb      	str	r3, [r7, #8]
 800ca78:	60fa      	str	r2, [r7, #12]
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca7e:	4a84      	ldr	r2, [pc, #528]	@ (800cc90 <UART_SetConfig+0x5c4>)
 800ca80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca84:	b29b      	uxth	r3, r3
 800ca86:	2200      	movs	r2, #0
 800ca88:	603b      	str	r3, [r7, #0]
 800ca8a:	607a      	str	r2, [r7, #4]
 800ca8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ca94:	f7f4 f8ae 	bl	8000bf4 <__aeabi_uldivmod>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	4610      	mov	r0, r2
 800ca9e:	4619      	mov	r1, r3
 800caa0:	f04f 0200 	mov.w	r2, #0
 800caa4:	f04f 0300 	mov.w	r3, #0
 800caa8:	020b      	lsls	r3, r1, #8
 800caaa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800caae:	0202      	lsls	r2, r0, #8
 800cab0:	6979      	ldr	r1, [r7, #20]
 800cab2:	6849      	ldr	r1, [r1, #4]
 800cab4:	0849      	lsrs	r1, r1, #1
 800cab6:	2000      	movs	r0, #0
 800cab8:	460c      	mov	r4, r1
 800caba:	4605      	mov	r5, r0
 800cabc:	eb12 0804 	adds.w	r8, r2, r4
 800cac0:	eb43 0905 	adc.w	r9, r3, r5
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	469a      	mov	sl, r3
 800cacc:	4693      	mov	fp, r2
 800cace:	4652      	mov	r2, sl
 800cad0:	465b      	mov	r3, fp
 800cad2:	4640      	mov	r0, r8
 800cad4:	4649      	mov	r1, r9
 800cad6:	f7f4 f88d 	bl	8000bf4 <__aeabi_uldivmod>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	4613      	mov	r3, r2
 800cae0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cae2:	6a3b      	ldr	r3, [r7, #32]
 800cae4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cae8:	d308      	bcc.n	800cafc <UART_SetConfig+0x430>
 800caea:	6a3b      	ldr	r3, [r7, #32]
 800caec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800caf0:	d204      	bcs.n	800cafc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6a3a      	ldr	r2, [r7, #32]
 800caf8:	60da      	str	r2, [r3, #12]
 800cafa:	e0ce      	b.n	800cc9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800cafc:	2301      	movs	r3, #1
 800cafe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cb02:	e0ca      	b.n	800cc9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb04:	697b      	ldr	r3, [r7, #20]
 800cb06:	69db      	ldr	r3, [r3, #28]
 800cb08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb0c:	d166      	bne.n	800cbdc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800cb0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cb12:	2b08      	cmp	r3, #8
 800cb14:	d827      	bhi.n	800cb66 <UART_SetConfig+0x49a>
 800cb16:	a201      	add	r2, pc, #4	@ (adr r2, 800cb1c <UART_SetConfig+0x450>)
 800cb18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1c:	0800cb41 	.word	0x0800cb41
 800cb20:	0800cb49 	.word	0x0800cb49
 800cb24:	0800cb51 	.word	0x0800cb51
 800cb28:	0800cb67 	.word	0x0800cb67
 800cb2c:	0800cb57 	.word	0x0800cb57
 800cb30:	0800cb67 	.word	0x0800cb67
 800cb34:	0800cb67 	.word	0x0800cb67
 800cb38:	0800cb67 	.word	0x0800cb67
 800cb3c:	0800cb5f 	.word	0x0800cb5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb40:	f7fc fc50 	bl	80093e4 <HAL_RCC_GetPCLK1Freq>
 800cb44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cb46:	e014      	b.n	800cb72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb48:	f7fc fc62 	bl	8009410 <HAL_RCC_GetPCLK2Freq>
 800cb4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cb4e:	e010      	b.n	800cb72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb50:	4b4e      	ldr	r3, [pc, #312]	@ (800cc8c <UART_SetConfig+0x5c0>)
 800cb52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cb54:	e00d      	b.n	800cb72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb56:	f7fc fbd7 	bl	8009308 <HAL_RCC_GetSysClockFreq>
 800cb5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cb5c:	e009      	b.n	800cb72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cb64:	e005      	b.n	800cb72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800cb66:	2300      	movs	r3, #0
 800cb68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cb70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	f000 8090 	beq.w	800cc9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb7e:	4a44      	ldr	r2, [pc, #272]	@ (800cc90 <UART_SetConfig+0x5c4>)
 800cb80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb84:	461a      	mov	r2, r3
 800cb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb88:	fbb3 f3f2 	udiv	r3, r3, r2
 800cb8c:	005a      	lsls	r2, r3, #1
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	085b      	lsrs	r3, r3, #1
 800cb94:	441a      	add	r2, r3
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cba0:	6a3b      	ldr	r3, [r7, #32]
 800cba2:	2b0f      	cmp	r3, #15
 800cba4:	d916      	bls.n	800cbd4 <UART_SetConfig+0x508>
 800cba6:	6a3b      	ldr	r3, [r7, #32]
 800cba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbac:	d212      	bcs.n	800cbd4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbae:	6a3b      	ldr	r3, [r7, #32]
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	f023 030f 	bic.w	r3, r3, #15
 800cbb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbb8:	6a3b      	ldr	r3, [r7, #32]
 800cbba:	085b      	lsrs	r3, r3, #1
 800cbbc:	b29b      	uxth	r3, r3
 800cbbe:	f003 0307 	and.w	r3, r3, #7
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	8bfb      	ldrh	r3, [r7, #30]
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	8bfa      	ldrh	r2, [r7, #30]
 800cbd0:	60da      	str	r2, [r3, #12]
 800cbd2:	e062      	b.n	800cc9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cbda:	e05e      	b.n	800cc9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbdc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cbe0:	2b08      	cmp	r3, #8
 800cbe2:	d828      	bhi.n	800cc36 <UART_SetConfig+0x56a>
 800cbe4:	a201      	add	r2, pc, #4	@ (adr r2, 800cbec <UART_SetConfig+0x520>)
 800cbe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbea:	bf00      	nop
 800cbec:	0800cc11 	.word	0x0800cc11
 800cbf0:	0800cc19 	.word	0x0800cc19
 800cbf4:	0800cc21 	.word	0x0800cc21
 800cbf8:	0800cc37 	.word	0x0800cc37
 800cbfc:	0800cc27 	.word	0x0800cc27
 800cc00:	0800cc37 	.word	0x0800cc37
 800cc04:	0800cc37 	.word	0x0800cc37
 800cc08:	0800cc37 	.word	0x0800cc37
 800cc0c:	0800cc2f 	.word	0x0800cc2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cc10:	f7fc fbe8 	bl	80093e4 <HAL_RCC_GetPCLK1Freq>
 800cc14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cc16:	e014      	b.n	800cc42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc18:	f7fc fbfa 	bl	8009410 <HAL_RCC_GetPCLK2Freq>
 800cc1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cc1e:	e010      	b.n	800cc42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc20:	4b1a      	ldr	r3, [pc, #104]	@ (800cc8c <UART_SetConfig+0x5c0>)
 800cc22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cc24:	e00d      	b.n	800cc42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc26:	f7fc fb6f 	bl	8009308 <HAL_RCC_GetSysClockFreq>
 800cc2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cc2c:	e009      	b.n	800cc42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cc34:	e005      	b.n	800cc42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800cc36:	2300      	movs	r3, #0
 800cc38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cc40:	bf00      	nop
    }

    if (pclk != 0U)
 800cc42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d028      	beq.n	800cc9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc4c:	4a10      	ldr	r2, [pc, #64]	@ (800cc90 <UART_SetConfig+0x5c4>)
 800cc4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc52:	461a      	mov	r2, r3
 800cc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc56:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	085b      	lsrs	r3, r3, #1
 800cc60:	441a      	add	r2, r3
 800cc62:	697b      	ldr	r3, [r7, #20]
 800cc64:	685b      	ldr	r3, [r3, #4]
 800cc66:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc6c:	6a3b      	ldr	r3, [r7, #32]
 800cc6e:	2b0f      	cmp	r3, #15
 800cc70:	d910      	bls.n	800cc94 <UART_SetConfig+0x5c8>
 800cc72:	6a3b      	ldr	r3, [r7, #32]
 800cc74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc78:	d20c      	bcs.n	800cc94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc7a:	6a3b      	ldr	r3, [r7, #32]
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	697b      	ldr	r3, [r7, #20]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	60da      	str	r2, [r3, #12]
 800cc84:	e009      	b.n	800cc9a <UART_SetConfig+0x5ce>
 800cc86:	bf00      	nop
 800cc88:	40008000 	.word	0x40008000
 800cc8c:	00f42400 	.word	0x00f42400
 800cc90:	080100b8 	.word	0x080100b8
      }
      else
      {
        ret = HAL_ERROR;
 800cc94:	2301      	movs	r3, #1
 800cc96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	2201      	movs	r2, #1
 800cca6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	2200      	movs	r2, #0
 800ccae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ccb6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3730      	adds	r7, #48	@ 0x30
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ccc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd0:	f003 0308 	and.w	r3, r3, #8
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d00a      	beq.n	800ccee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	430a      	orrs	r2, r1
 800ccec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf2:	f003 0301 	and.w	r3, r3, #1
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	430a      	orrs	r2, r1
 800cd0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd14:	f003 0302 	and.w	r3, r3, #2
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d00a      	beq.n	800cd32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	430a      	orrs	r2, r1
 800cd30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd36:	f003 0304 	and.w	r3, r3, #4
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d00a      	beq.n	800cd54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	685b      	ldr	r3, [r3, #4]
 800cd44:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	430a      	orrs	r2, r1
 800cd52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd58:	f003 0310 	and.w	r3, r3, #16
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00a      	beq.n	800cd76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	689b      	ldr	r3, [r3, #8]
 800cd66:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	430a      	orrs	r2, r1
 800cd74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd7a:	f003 0320 	and.w	r3, r3, #32
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d00a      	beq.n	800cd98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	430a      	orrs	r2, r1
 800cd96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d01a      	beq.n	800cdda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	430a      	orrs	r2, r1
 800cdb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cdc2:	d10a      	bne.n	800cdda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	685b      	ldr	r3, [r3, #4]
 800cdca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	430a      	orrs	r2, r1
 800cdd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00a      	beq.n	800cdfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	685b      	ldr	r3, [r3, #4]
 800cdec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	430a      	orrs	r2, r1
 800cdfa:	605a      	str	r2, [r3, #4]
  }
}
 800cdfc:	bf00      	nop
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b098      	sub	sp, #96	@ 0x60
 800ce0c:	af02      	add	r7, sp, #8
 800ce0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ce18:	f7f9 fafc 	bl	8006414 <HAL_GetTick>
 800ce1c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f003 0308 	and.w	r3, r3, #8
 800ce28:	2b08      	cmp	r3, #8
 800ce2a:	d12f      	bne.n	800ce8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce2c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce30:	9300      	str	r3, [sp, #0]
 800ce32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce34:	2200      	movs	r2, #0
 800ce36:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 f88e 	bl	800cf5c <UART_WaitOnFlagUntilTimeout>
 800ce40:	4603      	mov	r3, r0
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d022      	beq.n	800ce8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4e:	e853 3f00 	ldrex	r3, [r3]
 800ce52:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ce54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce56:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce5a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	461a      	mov	r2, r3
 800ce62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce64:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce66:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce6c:	e841 2300 	strex	r3, r2, [r1]
 800ce70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d1e6      	bne.n	800ce46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2220      	movs	r2, #32
 800ce7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	e063      	b.n	800cf54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f003 0304 	and.w	r3, r3, #4
 800ce96:	2b04      	cmp	r3, #4
 800ce98:	d149      	bne.n	800cf2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce9a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cea2:	2200      	movs	r2, #0
 800cea4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 f857 	bl	800cf5c <UART_WaitOnFlagUntilTimeout>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d03c      	beq.n	800cf2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cebc:	e853 3f00 	ldrex	r3, [r3]
 800cec0:	623b      	str	r3, [r7, #32]
   return(result);
 800cec2:	6a3b      	ldr	r3, [r7, #32]
 800cec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	461a      	mov	r2, r3
 800ced0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ced2:	633b      	str	r3, [r7, #48]	@ 0x30
 800ced4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ced8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceda:	e841 2300 	strex	r3, r2, [r1]
 800cede:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1e6      	bne.n	800ceb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	3308      	adds	r3, #8
 800ceec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceee:	693b      	ldr	r3, [r7, #16]
 800cef0:	e853 3f00 	ldrex	r3, [r3]
 800cef4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f023 0301 	bic.w	r3, r3, #1
 800cefc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	3308      	adds	r3, #8
 800cf04:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cf06:	61fa      	str	r2, [r7, #28]
 800cf08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf0a:	69b9      	ldr	r1, [r7, #24]
 800cf0c:	69fa      	ldr	r2, [r7, #28]
 800cf0e:	e841 2300 	strex	r3, r2, [r1]
 800cf12:	617b      	str	r3, [r7, #20]
   return(result);
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d1e5      	bne.n	800cee6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	2220      	movs	r2, #32
 800cf1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf2a:	2303      	movs	r3, #3
 800cf2c:	e012      	b.n	800cf54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2220      	movs	r2, #32
 800cf32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2220      	movs	r2, #32
 800cf3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	4618      	mov	r0, r3
 800cf56:	3758      	adds	r7, #88	@ 0x58
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	60f8      	str	r0, [r7, #12]
 800cf64:	60b9      	str	r1, [r7, #8]
 800cf66:	603b      	str	r3, [r7, #0]
 800cf68:	4613      	mov	r3, r2
 800cf6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf6c:	e04f      	b.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf6e:	69bb      	ldr	r3, [r7, #24]
 800cf70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf74:	d04b      	beq.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf76:	f7f9 fa4d 	bl	8006414 <HAL_GetTick>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	69ba      	ldr	r2, [r7, #24]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d302      	bcc.n	800cf8c <UART_WaitOnFlagUntilTimeout+0x30>
 800cf86:	69bb      	ldr	r3, [r7, #24]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d101      	bne.n	800cf90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e04e      	b.n	800d02e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f003 0304 	and.w	r3, r3, #4
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d037      	beq.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cf9e:	68bb      	ldr	r3, [r7, #8]
 800cfa0:	2b80      	cmp	r3, #128	@ 0x80
 800cfa2:	d034      	beq.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	2b40      	cmp	r3, #64	@ 0x40
 800cfa8:	d031      	beq.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	69db      	ldr	r3, [r3, #28]
 800cfb0:	f003 0308 	and.w	r3, r3, #8
 800cfb4:	2b08      	cmp	r3, #8
 800cfb6:	d110      	bne.n	800cfda <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2208      	movs	r2, #8
 800cfbe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfc0:	68f8      	ldr	r0, [r7, #12]
 800cfc2:	f000 f920 	bl	800d206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2208      	movs	r2, #8
 800cfca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e029      	b.n	800d02e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	69db      	ldr	r3, [r3, #28]
 800cfe0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfe4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfe8:	d111      	bne.n	800d00e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cff2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cff4:	68f8      	ldr	r0, [r7, #12]
 800cff6:	f000 f906 	bl	800d206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2220      	movs	r2, #32
 800cffe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d00a:	2303      	movs	r3, #3
 800d00c:	e00f      	b.n	800d02e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	69da      	ldr	r2, [r3, #28]
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	4013      	ands	r3, r2
 800d018:	68ba      	ldr	r2, [r7, #8]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	bf0c      	ite	eq
 800d01e:	2301      	moveq	r3, #1
 800d020:	2300      	movne	r3, #0
 800d022:	b2db      	uxtb	r3, r3
 800d024:	461a      	mov	r2, r3
 800d026:	79fb      	ldrb	r3, [r7, #7]
 800d028:	429a      	cmp	r2, r3
 800d02a:	d0a0      	beq.n	800cf6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
	...

0800d038 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b096      	sub	sp, #88	@ 0x58
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	4613      	mov	r3, r2
 800d044:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	88fa      	ldrh	r2, [r7, #6]
 800d050:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	2200      	movs	r2, #0
 800d058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2222      	movs	r2, #34	@ 0x22
 800d060:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d02d      	beq.n	800d0ca <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d074:	4a40      	ldr	r2, [pc, #256]	@ (800d178 <UART_Start_Receive_DMA+0x140>)
 800d076:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d07e:	4a3f      	ldr	r2, [pc, #252]	@ (800d17c <UART_Start_Receive_DMA+0x144>)
 800d080:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d088:	4a3d      	ldr	r2, [pc, #244]	@ (800d180 <UART_Start_Receive_DMA+0x148>)
 800d08a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d092:	2200      	movs	r2, #0
 800d094:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3324      	adds	r3, #36	@ 0x24
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	88fb      	ldrh	r3, [r7, #6]
 800d0ac:	f7fa ffee 	bl	800808c <HAL_DMA_Start_IT>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d009      	beq.n	800d0ca <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2210      	movs	r2, #16
 800d0ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	2220      	movs	r2, #32
 800d0c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e051      	b.n	800d16e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	691b      	ldr	r3, [r3, #16]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d018      	beq.n	800d104 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0da:	e853 3f00 	ldrex	r3, [r3]
 800d0de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d0e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d0e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d0f2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d0f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d0f8:	e841 2300 	strex	r3, r2, [r1]
 800d0fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800d0fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d100:	2b00      	cmp	r3, #0
 800d102:	d1e6      	bne.n	800d0d2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	3308      	adds	r3, #8
 800d10a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d10e:	e853 3f00 	ldrex	r3, [r3]
 800d112:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d116:	f043 0301 	orr.w	r3, r3, #1
 800d11a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	3308      	adds	r3, #8
 800d122:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d124:	637a      	str	r2, [r7, #52]	@ 0x34
 800d126:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d128:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d12a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d12c:	e841 2300 	strex	r3, r2, [r1]
 800d130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d134:	2b00      	cmp	r3, #0
 800d136:	d1e5      	bne.n	800d104 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	3308      	adds	r3, #8
 800d13e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	e853 3f00 	ldrex	r3, [r3]
 800d146:	613b      	str	r3, [r7, #16]
   return(result);
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d14e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	3308      	adds	r3, #8
 800d156:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d158:	623a      	str	r2, [r7, #32]
 800d15a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15c:	69f9      	ldr	r1, [r7, #28]
 800d15e:	6a3a      	ldr	r2, [r7, #32]
 800d160:	e841 2300 	strex	r3, r2, [r1]
 800d164:	61bb      	str	r3, [r7, #24]
   return(result);
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1e5      	bne.n	800d138 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3758      	adds	r7, #88	@ 0x58
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	0800d2d3 	.word	0x0800d2d3
 800d17c:	0800d407 	.word	0x0800d407
 800d180:	0800d44d 	.word	0x0800d44d

0800d184 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d184:	b480      	push	{r7}
 800d186:	b08f      	sub	sp, #60	@ 0x3c
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d192:	6a3b      	ldr	r3, [r7, #32]
 800d194:	e853 3f00 	ldrex	r3, [r3]
 800d198:	61fb      	str	r3, [r7, #28]
   return(result);
 800d19a:	69fb      	ldr	r3, [r7, #28]
 800d19c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d1a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1ac:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d1b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d1b2:	e841 2300 	strex	r3, r2, [r1]
 800d1b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d1e6      	bne.n	800d18c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3308      	adds	r3, #8
 800d1c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	e853 3f00 	ldrex	r3, [r3]
 800d1cc:	60bb      	str	r3, [r7, #8]
   return(result);
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800d1d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3308      	adds	r3, #8
 800d1dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1de:	61ba      	str	r2, [r7, #24]
 800d1e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e2:	6979      	ldr	r1, [r7, #20]
 800d1e4:	69ba      	ldr	r2, [r7, #24]
 800d1e6:	e841 2300 	strex	r3, r2, [r1]
 800d1ea:	613b      	str	r3, [r7, #16]
   return(result);
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d1e5      	bne.n	800d1be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2220      	movs	r2, #32
 800d1f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800d1fa:	bf00      	nop
 800d1fc:	373c      	adds	r7, #60	@ 0x3c
 800d1fe:	46bd      	mov	sp, r7
 800d200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d204:	4770      	bx	lr

0800d206 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d206:	b480      	push	{r7}
 800d208:	b095      	sub	sp, #84	@ 0x54
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d216:	e853 3f00 	ldrex	r3, [r3]
 800d21a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d21c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d21e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	461a      	mov	r2, r3
 800d22a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d22c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d22e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d230:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d232:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d234:	e841 2300 	strex	r3, r2, [r1]
 800d238:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d1e6      	bne.n	800d20e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	3308      	adds	r3, #8
 800d246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d248:	6a3b      	ldr	r3, [r7, #32]
 800d24a:	e853 3f00 	ldrex	r3, [r3]
 800d24e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d256:	f023 0301 	bic.w	r3, r3, #1
 800d25a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	3308      	adds	r3, #8
 800d262:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d264:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d266:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d26a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d26c:	e841 2300 	strex	r3, r2, [r1]
 800d270:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1e3      	bne.n	800d240 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d118      	bne.n	800d2b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	e853 3f00 	ldrex	r3, [r3]
 800d28c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	f023 0310 	bic.w	r3, r3, #16
 800d294:	647b      	str	r3, [r7, #68]	@ 0x44
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	461a      	mov	r2, r3
 800d29c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d29e:	61bb      	str	r3, [r7, #24]
 800d2a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a2:	6979      	ldr	r1, [r7, #20]
 800d2a4:	69ba      	ldr	r2, [r7, #24]
 800d2a6:	e841 2300 	strex	r3, r2, [r1]
 800d2aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1e6      	bne.n	800d280 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2220      	movs	r2, #32
 800d2b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d2c6:	bf00      	nop
 800d2c8:	3754      	adds	r7, #84	@ 0x54
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr

0800d2d2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d2d2:	b580      	push	{r7, lr}
 800d2d4:	b09c      	sub	sp, #112	@ 0x70
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2de:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f003 0320 	and.w	r3, r3, #32
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d171      	bne.n	800d3d2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800d2ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2fe:	e853 3f00 	ldrex	r3, [r3]
 800d302:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d306:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d30a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d30c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	461a      	mov	r2, r3
 800d312:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d314:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d316:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d318:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d31a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d31c:	e841 2300 	strex	r3, r2, [r1]
 800d320:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d324:	2b00      	cmp	r3, #0
 800d326:	d1e6      	bne.n	800d2f6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	3308      	adds	r3, #8
 800d32e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d332:	e853 3f00 	ldrex	r3, [r3]
 800d336:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d33a:	f023 0301 	bic.w	r3, r3, #1
 800d33e:	667b      	str	r3, [r7, #100]	@ 0x64
 800d340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	3308      	adds	r3, #8
 800d346:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d348:	647a      	str	r2, [r7, #68]	@ 0x44
 800d34a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d34e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d350:	e841 2300 	strex	r3, r2, [r1]
 800d354:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1e5      	bne.n	800d328 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d35c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	3308      	adds	r3, #8
 800d362:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d366:	e853 3f00 	ldrex	r3, [r3]
 800d36a:	623b      	str	r3, [r7, #32]
   return(result);
 800d36c:	6a3b      	ldr	r3, [r7, #32]
 800d36e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d372:	663b      	str	r3, [r7, #96]	@ 0x60
 800d374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	3308      	adds	r3, #8
 800d37a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d37c:	633a      	str	r2, [r7, #48]	@ 0x30
 800d37e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d380:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d384:	e841 2300 	strex	r3, r2, [r1]
 800d388:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d38a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d1e5      	bne.n	800d35c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d392:	2220      	movs	r2, #32
 800d394:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d39a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d118      	bne.n	800d3d2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	e853 3f00 	ldrex	r3, [r3]
 800d3ac:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	f023 0310 	bic.w	r3, r3, #16
 800d3b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d3b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3be:	61fb      	str	r3, [r7, #28]
 800d3c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c2:	69b9      	ldr	r1, [r7, #24]
 800d3c4:	69fa      	ldr	r2, [r7, #28]
 800d3c6:	e841 2300 	strex	r3, r2, [r1]
 800d3ca:	617b      	str	r3, [r7, #20]
   return(result);
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d1e6      	bne.n	800d3a0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d3d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d109      	bne.n	800d3f4 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800d3e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3e2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d3e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d3e8:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d3ec:	4611      	mov	r1, r2
 800d3ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d3f0:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d3f2:	e004      	b.n	800d3fe <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800d3f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d3fa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d3fc:	4798      	blx	r3
}
 800d3fe:	bf00      	nop
 800d400:	3770      	adds	r7, #112	@ 0x70
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b084      	sub	sp, #16
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d412:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2201      	movs	r2, #1
 800d418:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d41e:	2b01      	cmp	r3, #1
 800d420:	d10b      	bne.n	800d43a <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d428:	68fa      	ldr	r2, [r7, #12]
 800d42a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800d42e:	0852      	lsrs	r2, r2, #1
 800d430:	b292      	uxth	r2, r2
 800d432:	4611      	mov	r1, r2
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d438:	e004      	b.n	800d444 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d440:	68f8      	ldr	r0, [r7, #12]
 800d442:	4798      	blx	r3
}
 800d444:	bf00      	nop
 800d446:	3710      	adds	r7, #16
 800d448:	46bd      	mov	sp, r7
 800d44a:	bd80      	pop	{r7, pc}

0800d44c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b086      	sub	sp, #24
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d458:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d460:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d468:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d474:	2b80      	cmp	r3, #128	@ 0x80
 800d476:	d109      	bne.n	800d48c <UART_DMAError+0x40>
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	2b21      	cmp	r3, #33	@ 0x21
 800d47c:	d106      	bne.n	800d48c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d47e:	697b      	ldr	r3, [r7, #20]
 800d480:	2200      	movs	r2, #0
 800d482:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800d486:	6978      	ldr	r0, [r7, #20]
 800d488:	f7ff fe7c 	bl	800d184 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d48c:	697b      	ldr	r3, [r7, #20]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d496:	2b40      	cmp	r3, #64	@ 0x40
 800d498:	d109      	bne.n	800d4ae <UART_DMAError+0x62>
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2b22      	cmp	r3, #34	@ 0x22
 800d49e:	d106      	bne.n	800d4ae <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d4a0:	697b      	ldr	r3, [r7, #20]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800d4a8:	6978      	ldr	r0, [r7, #20]
 800d4aa:	f7ff feac 	bl	800d206 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d4b4:	f043 0210 	orr.w	r2, r3, #16
 800d4b8:	697b      	ldr	r3, [r7, #20]
 800d4ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d4c4:	6978      	ldr	r0, [r7, #20]
 800d4c6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4c8:	bf00      	nop
 800d4ca:	3718      	adds	r7, #24
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4f0:	bf00      	nop
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}

0800d4f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b088      	sub	sp, #32
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	e853 3f00 	ldrex	r3, [r3]
 800d50c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d50e:	68bb      	ldr	r3, [r7, #8]
 800d510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d514:	61fb      	str	r3, [r7, #28]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	461a      	mov	r2, r3
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	61bb      	str	r3, [r7, #24]
 800d520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d522:	6979      	ldr	r1, [r7, #20]
 800d524:	69ba      	ldr	r2, [r7, #24]
 800d526:	e841 2300 	strex	r3, r2, [r1]
 800d52a:	613b      	str	r3, [r7, #16]
   return(result);
 800d52c:	693b      	ldr	r3, [r7, #16]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d1e6      	bne.n	800d500 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2220      	movs	r2, #32
 800d536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d546:	6878      	ldr	r0, [r7, #4]
 800d548:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d54a:	bf00      	nop
 800d54c:	3720      	adds	r7, #32
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d552:	b480      	push	{r7}
 800d554:	b083      	sub	sp, #12
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d55a:	bf00      	nop
 800d55c:	370c      	adds	r7, #12
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d566:	b480      	push	{r7}
 800d568:	b083      	sub	sp, #12
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d56e:	bf00      	nop
 800d570:	370c      	adds	r7, #12
 800d572:	46bd      	mov	sp, r7
 800d574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d578:	4770      	bx	lr

0800d57a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d57a:	b480      	push	{r7}
 800d57c:	b083      	sub	sp, #12
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d582:	bf00      	nop
 800d584:	370c      	adds	r7, #12
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr

0800d58e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d58e:	b480      	push	{r7}
 800d590:	b085      	sub	sp, #20
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d101      	bne.n	800d5a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800d5a0:	2302      	movs	r3, #2
 800d5a2:	e027      	b.n	800d5f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2224      	movs	r2, #36	@ 0x24
 800d5b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	f022 0201 	bic.w	r2, r2, #1
 800d5ca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d5d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2220      	movs	r2, #32
 800d5e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d5f2:	2300      	movs	r3, #0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	3714      	adds	r7, #20
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr

0800d600 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
 800d608:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d610:	2b01      	cmp	r3, #1
 800d612:	d101      	bne.n	800d618 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d614:	2302      	movs	r3, #2
 800d616:	e02d      	b.n	800d674 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2224      	movs	r2, #36	@ 0x24
 800d624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f022 0201 	bic.w	r2, r2, #1
 800d63e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	689b      	ldr	r3, [r3, #8]
 800d646:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	683a      	ldr	r2, [r7, #0]
 800d650:	430a      	orrs	r2, r1
 800d652:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 f84f 	bl	800d6f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	68fa      	ldr	r2, [r7, #12]
 800d660:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2220      	movs	r2, #32
 800d666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}

0800d67c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d101      	bne.n	800d694 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d690:	2302      	movs	r3, #2
 800d692:	e02d      	b.n	800d6f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2224      	movs	r2, #36	@ 0x24
 800d6a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	f022 0201 	bic.w	r2, r2, #1
 800d6ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	689b      	ldr	r3, [r3, #8]
 800d6c2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	430a      	orrs	r2, r1
 800d6ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f000 f811 	bl	800d6f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2220      	movs	r2, #32
 800d6e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d6ee:	2300      	movs	r3, #0
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3710      	adds	r7, #16
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}

0800d6f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b085      	sub	sp, #20
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d704:	2b00      	cmp	r3, #0
 800d706:	d108      	bne.n	800d71a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	2201      	movs	r2, #1
 800d714:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d718:	e031      	b.n	800d77e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d71a:	2308      	movs	r3, #8
 800d71c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d71e:	2308      	movs	r3, #8
 800d720:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	689b      	ldr	r3, [r3, #8]
 800d728:	0e5b      	lsrs	r3, r3, #25
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	f003 0307 	and.w	r3, r3, #7
 800d730:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	0f5b      	lsrs	r3, r3, #29
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	f003 0307 	and.w	r3, r3, #7
 800d740:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d742:	7bbb      	ldrb	r3, [r7, #14]
 800d744:	7b3a      	ldrb	r2, [r7, #12]
 800d746:	4911      	ldr	r1, [pc, #68]	@ (800d78c <UARTEx_SetNbDataToProcess+0x94>)
 800d748:	5c8a      	ldrb	r2, [r1, r2]
 800d74a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d74e:	7b3a      	ldrb	r2, [r7, #12]
 800d750:	490f      	ldr	r1, [pc, #60]	@ (800d790 <UARTEx_SetNbDataToProcess+0x98>)
 800d752:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d754:	fb93 f3f2 	sdiv	r3, r3, r2
 800d758:	b29a      	uxth	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d760:	7bfb      	ldrb	r3, [r7, #15]
 800d762:	7b7a      	ldrb	r2, [r7, #13]
 800d764:	4909      	ldr	r1, [pc, #36]	@ (800d78c <UARTEx_SetNbDataToProcess+0x94>)
 800d766:	5c8a      	ldrb	r2, [r1, r2]
 800d768:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d76c:	7b7a      	ldrb	r2, [r7, #13]
 800d76e:	4908      	ldr	r1, [pc, #32]	@ (800d790 <UARTEx_SetNbDataToProcess+0x98>)
 800d770:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d772:	fb93 f3f2 	sdiv	r3, r3, r2
 800d776:	b29a      	uxth	r2, r3
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d77e:	bf00      	nop
 800d780:	3714      	adds	r7, #20
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	080100d0 	.word	0x080100d0
 800d790:	080100d8 	.word	0x080100d8

0800d794 <arm_mat_add_f32>:
#else
arm_status arm_mat_add_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800d794:	b480      	push	{r7}
 800d796:	b08b      	sub	sp, #44	@ 0x2c
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	685b      	ldr	r3, [r3, #4]
 800d7a4:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	685b      	ldr	r3, [r3, #4]
 800d7b0:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	881b      	ldrh	r3, [r3, #0]
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	885b      	ldrh	r3, [r3, #2]
 800d7bc:	fb02 f303 	mul.w	r3, r2, r3
 800d7c0:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800d7c6:	e013      	b.n	800d7f0 <arm_mat_add_f32+0x5c>
    {
      /* C(m,n) = A(m,n) + B(m,n) */

      /* Add and store result in destination buffer. */
      *pOut++ = *pInA++ + *pInB++;
 800d7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d7ca:	1d1a      	adds	r2, r3, #4
 800d7cc:	627a      	str	r2, [r7, #36]	@ 0x24
 800d7ce:	ed93 7a00 	vldr	s14, [r3]
 800d7d2:	6a3b      	ldr	r3, [r7, #32]
 800d7d4:	1d1a      	adds	r2, r3, #4
 800d7d6:	623a      	str	r2, [r7, #32]
 800d7d8:	edd3 7a00 	vldr	s15, [r3]
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	1d1a      	adds	r2, r3, #4
 800d7e0:	61fa      	str	r2, [r7, #28]
 800d7e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7e6:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800d7ea:	69bb      	ldr	r3, [r7, #24]
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1e8      	bne.n	800d7c8 <arm_mat_add_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800d7fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	372c      	adds	r7, #44	@ 0x2c
 800d802:	46bd      	mov	sp, r7
 800d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d808:	4770      	bx	lr

0800d80a <arm_mat_init_f32>:
void arm_mat_init_f32(
  arm_matrix_instance_f32 * S,
  uint16_t nRows,
  uint16_t nColumns,
  float32_t * pData)
{
 800d80a:	b480      	push	{r7}
 800d80c:	b085      	sub	sp, #20
 800d80e:	af00      	add	r7, sp, #0
 800d810:	60f8      	str	r0, [r7, #12]
 800d812:	607b      	str	r3, [r7, #4]
 800d814:	460b      	mov	r3, r1
 800d816:	817b      	strh	r3, [r7, #10]
 800d818:	4613      	mov	r3, r2
 800d81a:	813b      	strh	r3, [r7, #8]
  /* Assign Number of Rows */
  S->numRows = nRows;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	897a      	ldrh	r2, [r7, #10]
 800d820:	801a      	strh	r2, [r3, #0]

  /* Assign Number of Columns */
  S->numCols = nColumns;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	893a      	ldrh	r2, [r7, #8]
 800d826:	805a      	strh	r2, [r3, #2]

  /* Assign Data pointer */
  S->pData = pData;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	605a      	str	r2, [r3, #4]
}
 800d82e:	bf00      	nop
 800d830:	3714      	adds	r7, #20
 800d832:	46bd      	mov	sp, r7
 800d834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d838:	4770      	bx	lr

0800d83a <arm_mat_inverse_f32>:
                   - \ref ARM_MATH_SINGULAR      : Input matrix is found to be singular (non-invertible)
 */
arm_status arm_mat_inverse_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800d83a:	b480      	push	{r7}
 800d83c:	b0bb      	sub	sp, #236	@ 0xec
 800d83e:	af00      	add	r7, sp, #0
 800d840:	6078      	str	r0, [r7, #4]
 800d842:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	667b      	str	r3, [r7, #100]	@ 0x64
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	663b      	str	r3, [r7, #96]	@ 0x60
  
  float32_t *pTmp;
  uint32_t numRows = pSrc->numRows;              /* Number of rows in the matrix  */
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	881b      	ldrh	r3, [r3, #0]
 800d854:	65fb      	str	r3, [r7, #92]	@ 0x5c
  uint32_t numCols = pSrc->numCols;              /* Number of Cols in the matrix  */
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	885b      	ldrh	r3, [r3, #2]
 800d85a:	65bb      	str	r3, [r7, #88]	@ 0x58


  float32_t pivot = 0.0f, newPivot=0.0f;                /* Temporary input values  */
 800d85c:	f04f 0300 	mov.w	r3, #0
 800d860:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d864:	f04f 0300 	mov.w	r3, #0
 800d868:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t selectedRow,pivotRow,i, rowNb, rowCnt, flag = 0U, j,column;      /* loop counters */
 800d86a:	2300      	movs	r3, #0
 800d86c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
     *      8. Now an identical matrix is formed to the left of the bar(input matrix, pSrc).
     *         Therefore, the matrix to the right of the bar is our solution(pDst matrix, pDst).
     *----------------------------------------------------------------------------------------------------------------*/

    /* Working pointer for destination matrix */
    pTmp = pOut;
 800d870:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

    /* Loop over the number of rows */
    rowCnt = numRows;
 800d876:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d878:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    /* Making the destination matrix as identity matrix */
    while (rowCnt > 0U)
 800d87c:	e03b      	b.n	800d8f6 <arm_mat_inverse_f32+0xbc>
    {
      /* Writing all zeroes in lower triangle of the destination matrix */
      j = numRows - rowCnt;
 800d87e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d880:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d884:	1ad3      	subs	r3, r2, r3
 800d886:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800d88a:	e00c      	b.n	800d8a6 <arm_mat_inverse_f32+0x6c>
      {
        *pTmp++ = 0.0f;
 800d88c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d890:	1d1a      	adds	r2, r3, #4
 800d892:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800d896:	f04f 0200 	mov.w	r2, #0
 800d89a:	601a      	str	r2, [r3, #0]
        j--;
 800d89c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800d8a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1ee      	bne.n	800d88c <arm_mat_inverse_f32+0x52>
      }

      /* Writing all ones in the diagonal of the destination matrix */
      *pTmp++ = 1.0f;
 800d8ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8b2:	1d1a      	adds	r2, r3, #4
 800d8b4:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800d8b8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d8bc:	601a      	str	r2, [r3, #0]

      /* Writing all zeroes in upper triangle of the destination matrix */
      j = rowCnt - 1U;
 800d8be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d8c2:	3b01      	subs	r3, #1
 800d8c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800d8c8:	e00c      	b.n	800d8e4 <arm_mat_inverse_f32+0xaa>
      {
        *pTmp++ = 0.0f;
 800d8ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8ce:	1d1a      	adds	r2, r3, #4
 800d8d0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800d8d4:	f04f 0200 	mov.w	r2, #0
 800d8d8:	601a      	str	r2, [r3, #0]
        j--;
 800d8da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      while (j > 0U)
 800d8e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1ee      	bne.n	800d8ca <arm_mat_inverse_f32+0x90>
      }

      /* Decrement loop counter */
      rowCnt--;
 800d8ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    while (rowCnt > 0U)
 800d8f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1bf      	bne.n	800d87e <arm_mat_inverse_f32+0x44>

    /* Loop over the number of columns of the input matrix.
       All the elements in each column are processed by the row operations */

    /* Index modifier to navigate through the columns */
    for(column = 0U; column < numCols; column++)
 800d8fe:	2300      	movs	r3, #0
 800d900:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d904:	e2c7      	b.n	800de96 <arm_mat_inverse_f32+0x65c>
      /* Check if the pivot element is zero..
       * If it is zero then interchange the row with non zero row below.
       * If there is no non zero element to replace in the rows below,
       * then the matrix is Singular. */

      pivotRow = column;
 800d906:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d90a:	653b      	str	r3, [r7, #80]	@ 0x50

      /* Temporary variable to hold the pivot value */
      pTmp = ELEM(pSrc,column,column) ;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	685a      	ldr	r2, [r3, #4]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	885b      	ldrh	r3, [r3, #2]
 800d914:	3301      	adds	r3, #1
 800d916:	f8d7 10c4 	ldr.w	r1, [r7, #196]	@ 0xc4
 800d91a:	fb01 f303 	mul.w	r3, r1, r3
 800d91e:	009b      	lsls	r3, r3, #2
 800d920:	4413      	add	r3, r2
 800d922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      pivot = *pTmp;
 800d926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      selectedRow = column;
 800d930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d934:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      /* Find maximum pivot in column */
      
        /* Loop over the number rows present below */

      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800d938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d93c:	3301      	adds	r3, #1
 800d93e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d942:	e02c      	b.n	800d99e <arm_mat_inverse_f32+0x164>
      {
          /* Update the input and destination pointers */
          pTmp = ELEM(pSrc,rowNb,column);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	685a      	ldr	r2, [r3, #4]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	885b      	ldrh	r3, [r3, #2]
 800d94c:	4619      	mov	r1, r3
 800d94e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d952:	fb03 f101 	mul.w	r1, r3, r1
 800d956:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d95a:	440b      	add	r3, r1
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
          newPivot = *pTmp;
 800d964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	657b      	str	r3, [r7, #84]	@ 0x54
          if (fabsf(newPivot) > fabsf(pivot))
 800d96c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800d970:	eeb0 7ae7 	vabs.f32	s14, s15
 800d974:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d978:	eef0 7ae7 	vabs.f32	s15, s15
 800d97c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d984:	dd06      	ble.n	800d994 <arm_mat_inverse_f32+0x15a>
          {
            selectedRow = rowNb; 
 800d986:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d98a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            pivot = newPivot;
 800d98e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d990:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      for (rowNb = column+1; rowNb < numRows; rowNb++)
 800d994:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d998:	3301      	adds	r3, #1
 800d99a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d99e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800d9a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d3cd      	bcc.n	800d944 <arm_mat_inverse_f32+0x10a>
          }
      }
        
      /* Check if there is a non zero pivot element to
       * replace in the rows below */
      if ((pivot != 0.0f) && (selectedRow != column))
 800d9a8:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800d9ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b4:	f000 809b 	beq.w	800daee <arm_mat_inverse_f32+0x2b4>
 800d9b8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800d9bc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	f000 8094 	beq.w	800daee <arm_mat_inverse_f32+0x2b4>
      {
            
            SWAP_ROWS_F32(pSrc,column, pivotRow,selectedRow);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	685b      	ldr	r3, [r3, #4]
 800d9ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	885b      	ldrh	r3, [r3, #2]
 800d9da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d9de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d9e2:	1ad3      	subs	r3, r2, r3
 800d9e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d9e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d9ea:	fb03 f202 	mul.w	r2, r3, r2
 800d9ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d9f2:	4413      	add	r3, r2
 800d9f4:	009b      	lsls	r3, r3, #2
 800d9f6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d9fa:	4413      	add	r3, r2
 800d9fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800da00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800da06:	fb03 f202 	mul.w	r2, r3, r2
 800da0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800da0e:	4413      	add	r3, r2
 800da10:	009b      	lsls	r3, r3, #2
 800da12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800da16:	4413      	add	r3, r2
 800da18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800da1c:	2300      	movs	r3, #0
 800da1e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800da22:	e018      	b.n	800da56 <arm_mat_inverse_f32+0x21c>
 800da24:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800da30:	1d1a      	adds	r2, r3, #4
 800da32:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 800da36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800da3a:	6812      	ldr	r2, [r2, #0]
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800da42:	1d1a      	adds	r2, r3, #4
 800da44:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800da48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da4a:	601a      	str	r2, [r3, #0]
 800da4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800da50:	3301      	adds	r3, #1
 800da52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800da56:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800da5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da5c:	429a      	cmp	r2, r3
 800da5e:	dbe1      	blt.n	800da24 <arm_mat_inverse_f32+0x1ea>
            SWAP_ROWS_F32(pDst,0, pivotRow,selectedRow);
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	885b      	ldrh	r3, [r3, #2]
 800da74:	647b      	str	r3, [r7, #68]	@ 0x44
 800da76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da78:	643b      	str	r3, [r7, #64]	@ 0x40
 800da7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da7e:	fb02 f303 	mul.w	r3, r2, r3
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800da88:	4413      	add	r3, r2
 800da8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800da8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800da90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800da94:	fb02 f303 	mul.w	r3, r2, r3
 800da98:	009b      	lsls	r3, r3, #2
 800da9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800da9e:	4413      	add	r3, r2
 800daa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800daa4:	2300      	movs	r3, #0
 800daa6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800daaa:	e018      	b.n	800dade <arm_mat_inverse_f32+0x2a4>
 800daac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dab8:	1d1a      	adds	r2, r3, #4
 800daba:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800dabe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800dac2:	6812      	ldr	r2, [r2, #0]
 800dac4:	601a      	str	r2, [r3, #0]
 800dac6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800daca:	1d1a      	adds	r2, r3, #4
 800dacc:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800dad0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dad2:	601a      	str	r2, [r3, #0]
 800dad4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800dad8:	3301      	adds	r3, #1
 800dada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800dade:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800dae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dae4:	429a      	cmp	r2, r3
 800dae6:	dbe1      	blt.n	800daac <arm_mat_inverse_f32+0x272>

    
            /* Flag to indicate whether exchange is done or not */
            flag = 1U;
 800dae8:	2301      	movs	r3, #1
 800daea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

      
      

      /* Update the status if the matrix is singular */
      if ((flag != 1U) && (pivot == 0.0f))
 800daee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d009      	beq.n	800db0a <arm_mat_inverse_f32+0x2d0>
 800daf6:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800dafa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db02:	d102      	bne.n	800db0a <arm_mat_inverse_f32+0x2d0>
      {
        return ARM_MATH_SINGULAR;
 800db04:	f06f 0304 	mvn.w	r3, #4
 800db08:	e208      	b.n	800df1c <arm_mat_inverse_f32+0x6e2>
      }

     
      /* Pivot element of the row */
      pivot = 1.0f / pivot;
 800db0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db0e:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800db12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db16:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

      SCALE_ROW_F32(pSrc,column,pivot,pivotRow);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	885b      	ldrh	r3, [r3, #2]
 800db26:	637b      	str	r3, [r7, #52]	@ 0x34
 800db28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800db2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800db2e:	1ad3      	subs	r3, r2, r3
 800db30:	633b      	str	r3, [r7, #48]	@ 0x30
 800db32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800db36:	fb03 f202 	mul.w	r2, r3, r2
 800db3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800db3e:	4413      	add	r3, r2
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800db46:	4413      	add	r3, r2
 800db48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800db4c:	2300      	movs	r3, #0
 800db4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800db52:	e011      	b.n	800db78 <arm_mat_inverse_f32+0x33e>
 800db54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db58:	1d1a      	adds	r2, r3, #4
 800db5a:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 800db5e:	ed93 7a00 	vldr	s14, [r3]
 800db62:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800db66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db6a:	edc3 7a00 	vstr	s15, [r3]
 800db6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800db72:	3301      	adds	r3, #1
 800db74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800db78:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800db7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7e:	429a      	cmp	r2, r3
 800db80:	dbe8      	blt.n	800db54 <arm_mat_inverse_f32+0x31a>
      SCALE_ROW_F32(pDst,0,pivot,pivotRow);
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	885b      	ldrh	r3, [r3, #2]
 800db8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800db90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db92:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db96:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800db98:	fb02 f303 	mul.w	r3, r2, r3
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800dba2:	4413      	add	r3, r2
 800dba4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dba8:	2300      	movs	r3, #0
 800dbaa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dbae:	e011      	b.n	800dbd4 <arm_mat_inverse_f32+0x39a>
 800dbb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dbb4:	1d1a      	adds	r2, r3, #4
 800dbb6:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800dbba:	ed93 7a00 	vldr	s14, [r3]
 800dbbe:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800dbc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbc6:	edc3 7a00 	vstr	s15, [r3]
 800dbca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dbce:	3301      	adds	r3, #1
 800dbd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800dbd4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 800dbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	dbe8      	blt.n	800dbb0 <arm_mat_inverse_f32+0x376>

      
      /* Replace the rows with the sum of that row and a multiple of row i
       * so that each new element in column i above row i is zero.*/

      rowNb = 0;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      for (;rowNb < pivotRow; rowNb++)
 800dbe4:	e0ae      	b.n	800dd44 <arm_mat_inverse_f32+0x50a>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	685a      	ldr	r2, [r3, #4]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	885b      	ldrh	r3, [r3, #2]
 800dbee:	4619      	mov	r1, r3
 800dbf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dbf4:	fb03 f101 	mul.w	r1, r3, r1
 800dbf8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dbfc:	440b      	add	r3, r1
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	4413      	add	r3, r2
 800dc02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800dc06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	885b      	ldrh	r3, [r3, #2]
 800dc24:	617b      	str	r3, [r7, #20]
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dc2c:	1ad3      	subs	r3, r2, r3
 800dc2e:	613b      	str	r3, [r7, #16]
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800dc36:	fb03 f202 	mul.w	r2, r3, r2
 800dc3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dc3e:	4413      	add	r3, r2
 800dc40:	009b      	lsls	r3, r3, #2
 800dc42:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800dc46:	4413      	add	r3, r2
 800dc48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dc50:	fb03 f202 	mul.w	r2, r3, r2
 800dc54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dc58:	4413      	add	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800dc60:	4413      	add	r3, r2
 800dc62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800dc66:	2300      	movs	r3, #0
 800dc68:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dc6c:	e01a      	b.n	800dca4 <arm_mat_inverse_f32+0x46a>
 800dc6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dc72:	1d1a      	adds	r2, r3, #4
 800dc74:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800dc78:	ed93 7a00 	vldr	s14, [r3]
 800dc7c:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800dc80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800dc88:	1d1a      	adds	r2, r3, #4
 800dc8a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800dc8e:	ed93 7a00 	vldr	s14, [r3]
 800dc92:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dc96:	edc3 7a00 	vstr	s15, [r3]
 800dc9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800dc9e:	3301      	adds	r3, #1
 800dca0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dca4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	dbdf      	blt.n	800dc6e <arm_mat_inverse_f32+0x434>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	685b      	ldr	r3, [r3, #4]
 800dcba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	885b      	ldrh	r3, [r3, #2]
 800dcc2:	60fb      	str	r3, [r7, #12]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	60bb      	str	r3, [r7, #8]
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800dcce:	fb02 f303 	mul.w	r3, r2, r3
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800dcd8:	4413      	add	r3, r2
 800dcda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dce2:	fb02 f303 	mul.w	r3, r2, r3
 800dce6:	009b      	lsls	r3, r3, #2
 800dce8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800dcec:	4413      	add	r3, r2
 800dcee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dcf8:	e01a      	b.n	800dd30 <arm_mat_inverse_f32+0x4f6>
 800dcfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dcfe:	1d1a      	adds	r2, r3, #4
 800dd00:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800dd04:	ed93 7a00 	vldr	s14, [r3]
 800dd08:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800dd0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dd14:	1d1a      	adds	r2, r3, #4
 800dd16:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800dd1a:	ed93 7a00 	vldr	s14, [r3]
 800dd1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd22:	edc3 7a00 	vstr	s15, [r3]
 800dd26:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800dd30:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	dbdf      	blt.n	800dcfa <arm_mat_inverse_f32+0x4c0>
      for (;rowNb < pivotRow; rowNb++)
 800dd3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd3e:	3301      	adds	r3, #1
 800dd40:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dd44:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800dd48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	f4ff af4b 	bcc.w	800dbe6 <arm_mat_inverse_f32+0x3ac>


      }

      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800dd50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd52:	3301      	adds	r3, #1
 800dd54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dd58:	e092      	b.n	800de80 <arm_mat_inverse_f32+0x646>
      {
           pTmp = ELEM(pSrc,rowNb,column) ;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	685a      	ldr	r2, [r3, #4]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	885b      	ldrh	r3, [r3, #2]
 800dd62:	4619      	mov	r1, r3
 800dd64:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800dd68:	fb03 f101 	mul.w	r1, r3, r1
 800dd6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dd70:	440b      	add	r3, r1
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4413      	add	r3, r2
 800dd76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
           pivot = *pTmp;
 800dd7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

           MAS_ROW_F32(column,pSrc,rowNb,pivot,pSrc,pivotRow);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	685b      	ldr	r3, [r3, #4]
 800dd88:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	677b      	str	r3, [r7, #116]	@ 0x74
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	885b      	ldrh	r3, [r3, #2]
 800dd94:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd98:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dd9c:	1ad3      	subs	r3, r2, r3
 800dd9e:	623b      	str	r3, [r7, #32]
 800dda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda2:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800dda6:	fb03 f202 	mul.w	r2, r3, r2
 800ddaa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ddae:	4413      	add	r3, r2
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ddb4:	4413      	add	r3, r2
 800ddb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ddb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ddbc:	fb03 f202 	mul.w	r2, r3, r2
 800ddc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800ddc4:	4413      	add	r3, r2
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800ddca:	4413      	add	r3, r2
 800ddcc:	677b      	str	r3, [r7, #116]	@ 0x74
 800ddce:	2300      	movs	r3, #0
 800ddd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ddd2:	e014      	b.n	800ddfe <arm_mat_inverse_f32+0x5c4>
 800ddd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ddd6:	1d1a      	adds	r2, r3, #4
 800ddd8:	677a      	str	r2, [r7, #116]	@ 0x74
 800ddda:	ed93 7a00 	vldr	s14, [r3]
 800ddde:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800dde2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dde6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dde8:	1d1a      	adds	r2, r3, #4
 800ddea:	67ba      	str	r2, [r7, #120]	@ 0x78
 800ddec:	ed93 7a00 	vldr	s14, [r3]
 800ddf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ddf4:	edc3 7a00 	vstr	s15, [r3]
 800ddf8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ddfe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800de00:	6a3b      	ldr	r3, [r7, #32]
 800de02:	429a      	cmp	r2, r3
 800de04:	dbe6      	blt.n	800ddd4 <arm_mat_inverse_f32+0x59a>
           MAS_ROW_F32(0     ,pDst,rowNb,pivot,pDst,pivotRow);
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	685b      	ldr	r3, [r3, #4]
 800de10:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	885b      	ldrh	r3, [r3, #2]
 800de16:	61fb      	str	r3, [r7, #28]
 800de18:	69fb      	ldr	r3, [r7, #28]
 800de1a:	61bb      	str	r3, [r7, #24]
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800de22:	fb02 f303 	mul.w	r3, r2, r3
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800de2a:	4413      	add	r3, r2
 800de2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800de2e:	69fb      	ldr	r3, [r7, #28]
 800de30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de32:	fb02 f303 	mul.w	r3, r2, r3
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800de3a:	4413      	add	r3, r2
 800de3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800de3e:	2300      	movs	r3, #0
 800de40:	673b      	str	r3, [r7, #112]	@ 0x70
 800de42:	e014      	b.n	800de6e <arm_mat_inverse_f32+0x634>
 800de44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800de46:	1d1a      	adds	r2, r3, #4
 800de48:	66ba      	str	r2, [r7, #104]	@ 0x68
 800de4a:	ed93 7a00 	vldr	s14, [r3]
 800de4e:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800de52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800de58:	1d1a      	adds	r2, r3, #4
 800de5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800de5c:	ed93 7a00 	vldr	s14, [r3]
 800de60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800de64:	edc3 7a00 	vstr	s15, [r3]
 800de68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800de6a:	3301      	adds	r3, #1
 800de6c:	673b      	str	r3, [r7, #112]	@ 0x70
 800de6e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800de70:	69bb      	ldr	r3, [r7, #24]
 800de72:	429a      	cmp	r2, r3
 800de74:	dbe6      	blt.n	800de44 <arm_mat_inverse_f32+0x60a>
      for (rowNb = pivotRow + 1; rowNb < numRows; rowNb++)
 800de76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de7a:	3301      	adds	r3, #1
 800de7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800de80:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800de84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800de86:	429a      	cmp	r2, r3
 800de88:	f4ff af67 	bcc.w	800dd5a <arm_mat_inverse_f32+0x520>
    for(column = 0U; column < numCols; column++)
 800de8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800de90:	3301      	adds	r3, #1
 800de92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800de96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800de9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800de9c:	429a      	cmp	r2, r3
 800de9e:	f4ff ad32 	bcc.w	800d906 <arm_mat_inverse_f32+0xcc>
      }

    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800dea2:	2300      	movs	r3, #0
 800dea4:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

    if ((flag != 1U) && (pivot == 0.0f))
 800dea8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800deac:	2b01      	cmp	r3, #1
 800deae:	d033      	beq.n	800df18 <arm_mat_inverse_f32+0x6de>
 800deb0:	edd7 7a38 	vldr	s15, [r7, #224]	@ 0xe0
 800deb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800deb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800debc:	d12c      	bne.n	800df18 <arm_mat_inverse_f32+0x6de>
    {
      pIn = pSrc->pData;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	667b      	str	r3, [r7, #100]	@ 0x64
      for (i = 0; i < numRows * numCols; i++)
 800dec4:	2300      	movs	r3, #0
 800dec6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800deca:	e010      	b.n	800deee <arm_mat_inverse_f32+0x6b4>
      {
        if (pIn[i] != 0.0f)
 800decc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ded0:	009b      	lsls	r3, r3, #2
 800ded2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ded4:	4413      	add	r3, r2
 800ded6:	edd3 7a00 	vldr	s15, [r3]
 800deda:	eef5 7a40 	vcmp.f32	s15, #0.0
 800dede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee2:	d10d      	bne.n	800df00 <arm_mat_inverse_f32+0x6c6>
      for (i = 0; i < numRows * numCols; i++)
 800dee4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dee8:	3301      	adds	r3, #1
 800deea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800deee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800def0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800def2:	fb02 f303 	mul.w	r3, r2, r3
 800def6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800defa:	429a      	cmp	r2, r3
 800defc:	d3e6      	bcc.n	800decc <arm_mat_inverse_f32+0x692>
 800defe:	e000      	b.n	800df02 <arm_mat_inverse_f32+0x6c8>
            break;
 800df00:	bf00      	nop
      }

      if (i == numRows * numCols)
 800df02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800df04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800df06:	fb02 f303 	mul.w	r3, r2, r3
 800df0a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800df0e:	429a      	cmp	r2, r3
 800df10:	d102      	bne.n	800df18 <arm_mat_inverse_f32+0x6de>
        status = ARM_MATH_SINGULAR;
 800df12:	23fb      	movs	r3, #251	@ 0xfb
 800df14:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3
    }
  }

  /* Return to application */
  return (status);
 800df18:	f997 30c3 	ldrsb.w	r3, [r7, #195]	@ 0xc3
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	37ec      	adds	r7, #236	@ 0xec
 800df20:	46bd      	mov	sp, r7
 800df22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df26:	4770      	bx	lr

0800df28 <arm_mat_mult_f32>:
 */
arm_status arm_mat_mult_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800df28:	b480      	push	{r7}
 800df2a:	b093      	sub	sp, #76	@ 0x4c
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
  float32_t *pIn1 = pSrcA->pData;                /* Input data matrix pointer A */
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	685b      	ldr	r3, [r3, #4]
 800df38:	647b      	str	r3, [r7, #68]	@ 0x44
  float32_t *pIn2 = pSrcB->pData;                /* Input data matrix pointer B */
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	643b      	str	r3, [r7, #64]	@ 0x40
  float32_t *pInA = pSrcA->pData;                /* Input data matrix pointer A */
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	685b      	ldr	r3, [r3, #4]
 800df44:	63fb      	str	r3, [r7, #60]	@ 0x3c
  float32_t *pInB = pSrcB->pData;                /* Input data matrix pointer B */
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	685b      	ldr	r3, [r3, #4]
 800df50:	61fb      	str	r3, [r7, #28]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  float32_t sum;                                 /* Accumulator */
  uint16_t numRowsA = pSrcA->numRows;            /* Number of rows of input matrix A */
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	881b      	ldrh	r3, [r3, #0]
 800df56:	837b      	strh	r3, [r7, #26]
  uint16_t numColsB = pSrcB->numCols;            /* Number of columns of input matrix B */
 800df58:	68bb      	ldr	r3, [r7, #8]
 800df5a:	885b      	ldrh	r3, [r3, #2]
 800df5c:	833b      	strh	r3, [r7, #24]
  uint16_t numColsA = pSrcA->numCols;            /* Number of columns of input matrix A */
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	885b      	ldrh	r3, [r3, #2]
 800df62:	82fb      	strh	r3, [r7, #22]
  uint32_t col, i = 0U, row = numRowsA, colCnt;  /* Loop counters */
 800df64:	2300      	movs	r3, #0
 800df66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df68:	8b7b      	ldrh	r3, [r7, #26]
 800df6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* The following loop performs the dot-product of each row in pSrcA with each column in pSrcB */
    /* row loop */
    do
    {
      /* Output pointer is set to starting address of row being processed */
      px = pOut + i;
 800df6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	69fa      	ldr	r2, [r7, #28]
 800df72:	4413      	add	r3, r2
 800df74:	63bb      	str	r3, [r7, #56]	@ 0x38

      /* For every row wise process, column loop counter is to be initiated */
      col = numColsB;
 800df76:	8b3b      	ldrh	r3, [r7, #24]
 800df78:	633b      	str	r3, [r7, #48]	@ 0x30

      /* For every row wise process, pIn2 pointer is set to starting address of pSrcB data */
      pIn2 = pSrcB->pData;
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	643b      	str	r3, [r7, #64]	@ 0x40

      /* column loop */
      do
      {
        /* Set the variable sum, that acts as accumulator, to zero */
        sum = 0.0f;
 800df80:	f04f 0300 	mov.w	r3, #0
 800df84:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Initialize pointer pIn1 to point to starting address of column being processed */
        pIn1 = pInA;
 800df86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df88:	647b      	str	r3, [r7, #68]	@ 0x44
        colCnt = numColsA % 0x4U;

#else

        /* Initialize cntCnt with number of columns */
        colCnt = numColsA;
 800df8a:	8afb      	ldrh	r3, [r7, #22]
 800df8c:	627b      	str	r3, [r7, #36]	@ 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

        while (colCnt > 0U)
 800df8e:	e017      	b.n	800dfc0 <arm_mat_mult_f32+0x98>
        {
          /* c(m,p) = a(m,1) * b(1,p) + a(m,2) * b(2,p) + .... + a(m,n) * b(n,p) */

          /* Perform the multiply-accumulates */
          sum += *pIn1++ * *pIn2;
 800df90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800df92:	1d1a      	adds	r2, r3, #4
 800df94:	647a      	str	r2, [r7, #68]	@ 0x44
 800df96:	ed93 7a00 	vldr	s14, [r3]
 800df9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800df9c:	edd3 7a00 	vldr	s15, [r3]
 800dfa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dfa4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800dfa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfac:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
          pIn2 += numColsB;
 800dfb0:	8b3b      	ldrh	r3, [r7, #24]
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dfb6:	4413      	add	r3, r2
 800dfb8:	643b      	str	r3, [r7, #64]	@ 0x40

          /* Decrement loop counter */
          colCnt--;
 800dfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfbc:	3b01      	subs	r3, #1
 800dfbe:	627b      	str	r3, [r7, #36]	@ 0x24
        while (colCnt > 0U)
 800dfc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d1e4      	bne.n	800df90 <arm_mat_mult_f32+0x68>
        }

        /* Store result in destination buffer */
        *px++ = sum;
 800dfc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc8:	1d1a      	adds	r2, r3, #4
 800dfca:	63ba      	str	r2, [r7, #56]	@ 0x38
 800dfcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dfce:	601a      	str	r2, [r3, #0]

        /* Decrement column loop counter */
        col--;
 800dfd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd2:	3b01      	subs	r3, #1
 800dfd4:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Update pointer pIn2 to point to starting address of next column */
        pIn2 = pInB + (numColsB - col);
 800dfd6:	8b3a      	ldrh	r2, [r7, #24]
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfda:	1ad3      	subs	r3, r2, r3
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	6a3a      	ldr	r2, [r7, #32]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	643b      	str	r3, [r7, #64]	@ 0x40

      } while (col > 0U);
 800dfe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d1ca      	bne.n	800df80 <arm_mat_mult_f32+0x58>

      /* Update pointer pInA to point to starting address of next row */
      i = i + numColsB;
 800dfea:	8b3b      	ldrh	r3, [r7, #24]
 800dfec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfee:	4413      	add	r3, r2
 800dff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pInA = pInA + numColsA;
 800dff2:	8afb      	ldrh	r3, [r7, #22]
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dff8:	4413      	add	r3, r2
 800dffa:	63fb      	str	r3, [r7, #60]	@ 0x3c

      /* Decrement row loop counter */
      row--;
 800dffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dffe:	3b01      	subs	r3, #1
 800e000:	62bb      	str	r3, [r7, #40]	@ 0x28

    } while (row > 0U);
 800e002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e004:	2b00      	cmp	r3, #0
 800e006:	d1b1      	bne.n	800df6c <arm_mat_mult_f32+0x44>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e008:	2300      	movs	r3, #0
 800e00a:	757b      	strb	r3, [r7, #21]
  }

  /* Return to application */
  return (status);
 800e00c:	f997 3015 	ldrsb.w	r3, [r7, #21]
}
 800e010:	4618      	mov	r0, r3
 800e012:	374c      	adds	r7, #76	@ 0x4c
 800e014:	46bd      	mov	sp, r7
 800e016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e01a:	4770      	bx	lr

0800e01c <arm_mat_scale_f32>:
#else
arm_status arm_mat_scale_f32(
  const arm_matrix_instance_f32 * pSrc,
        float32_t                 scale,
        arm_matrix_instance_f32 * pDst)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b08b      	sub	sp, #44	@ 0x2c
 800e020:	af00      	add	r7, sp, #0
 800e022:	60f8      	str	r0, [r7, #12]
 800e024:	ed87 0a02 	vstr	s0, [r7, #8]
 800e028:	6079      	str	r1, [r7, #4]
  float32_t *pIn = pSrc->pData;                  /* Input data matrix pointer */
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* Output data matrix pointer */
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	623b      	str	r3, [r7, #32]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrc->numRows * pSrc->numCols;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	461a      	mov	r2, r3
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	885b      	ldrh	r3, [r3, #2]
 800e040:	fb02 f303 	mul.w	r3, r2, r3
 800e044:	61bb      	str	r3, [r7, #24]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800e04a:	e010      	b.n	800e06e <arm_mat_scale_f32+0x52>
    {
      /* C(m,n) = A(m,n) * scale */

      /* Scale and store result in destination buffer. */
      *pOut++ = (*pIn++) * scale;
 800e04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e04e:	1d1a      	adds	r2, r3, #4
 800e050:	627a      	str	r2, [r7, #36]	@ 0x24
 800e052:	ed93 7a00 	vldr	s14, [r3]
 800e056:	6a3b      	ldr	r3, [r7, #32]
 800e058:	1d1a      	adds	r2, r3, #4
 800e05a:	623a      	str	r2, [r7, #32]
 800e05c:	edd7 7a02 	vldr	s15, [r7, #8]
 800e060:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e064:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	3b01      	subs	r3, #1
 800e06c:	61fb      	str	r3, [r7, #28]
    while (blkCnt > 0U)
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d1eb      	bne.n	800e04c <arm_mat_scale_f32+0x30>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e074:	2300      	movs	r3, #0
 800e076:	75fb      	strb	r3, [r7, #23]
  }

  /* Return to application */
  return (status);
 800e078:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	372c      	adds	r7, #44	@ 0x2c
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <arm_mat_sub_f32>:
#else
arm_status arm_mat_sub_f32(
  const arm_matrix_instance_f32 * pSrcA,
  const arm_matrix_instance_f32 * pSrcB,
        arm_matrix_instance_f32 * pDst)
{
 800e088:	b480      	push	{r7}
 800e08a:	b08b      	sub	sp, #44	@ 0x2c
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	607a      	str	r2, [r7, #4]
  float32_t *pInA = pSrcA->pData;                /* input data matrix pointer A */
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pInB = pSrcB->pData;                /* input data matrix pointer B */
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	623b      	str	r3, [r7, #32]
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	61fb      	str	r3, [r7, #28]

#endif /* #ifdef ARM_MATH_MATRIX_CHECK */

  {
    /* Total number of samples in input matrix */
    numSamples = (uint32_t) pSrcA->numRows * pSrcA->numCols;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	881b      	ldrh	r3, [r3, #0]
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	885b      	ldrh	r3, [r3, #2]
 800e0b0:	fb02 f303 	mul.w	r3, r2, r3
 800e0b4:	617b      	str	r3, [r7, #20]
    blkCnt = numSamples % 0x4U;

#else

    /* Initialize blkCnt with number of samples */
    blkCnt = numSamples;
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	61bb      	str	r3, [r7, #24]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (blkCnt > 0U)
 800e0ba:	e013      	b.n	800e0e4 <arm_mat_sub_f32+0x5c>
    {
      /* C(m,n) = A(m,n) - B(m,n) */

      /* Subtract and store result in destination buffer. */
      *pOut++ = (*pInA++) - (*pInB++);
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0be:	1d1a      	adds	r2, r3, #4
 800e0c0:	627a      	str	r2, [r7, #36]	@ 0x24
 800e0c2:	ed93 7a00 	vldr	s14, [r3]
 800e0c6:	6a3b      	ldr	r3, [r7, #32]
 800e0c8:	1d1a      	adds	r2, r3, #4
 800e0ca:	623a      	str	r2, [r7, #32]
 800e0cc:	edd3 7a00 	vldr	s15, [r3]
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	1d1a      	adds	r2, r3, #4
 800e0d4:	61fa      	str	r2, [r7, #28]
 800e0d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e0da:	edc3 7a00 	vstr	s15, [r3]

      /* Decrement loop counter */
      blkCnt--;
 800e0de:	69bb      	ldr	r3, [r7, #24]
 800e0e0:	3b01      	subs	r3, #1
 800e0e2:	61bb      	str	r3, [r7, #24]
    while (blkCnt > 0U)
 800e0e4:	69bb      	ldr	r3, [r7, #24]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d1e8      	bne.n	800e0bc <arm_mat_sub_f32+0x34>
    }

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Return to application */
  return (status);
 800e0ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	372c      	adds	r7, #44	@ 0x2c
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 800e0fe:	b480      	push	{r7}
 800e100:	b08b      	sub	sp, #44	@ 0x2c
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	685b      	ldr	r3, [r3, #4]
 800e10c:	627b      	str	r3, [r7, #36]	@ 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	881b      	ldrh	r3, [r3, #0]
 800e118:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	885b      	ldrh	r3, [r3, #2]
 800e11e:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 800e120:	89fb      	ldrh	r3, [r7, #14]
 800e122:	61bb      	str	r3, [r7, #24]
 800e124:	2300      	movs	r3, #0
 800e126:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	693a      	ldr	r2, [r7, #16]
 800e12e:	4413      	add	r3, r2
 800e130:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 800e132:	89bb      	ldrh	r3, [r7, #12]
 800e134:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 800e136:	e00d      	b.n	800e154 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 800e138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e13a:	1d1a      	adds	r2, r3, #4
 800e13c:	627a      	str	r2, [r7, #36]	@ 0x24
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	6a3b      	ldr	r3, [r7, #32]
 800e142:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 800e144:	89fb      	ldrh	r3, [r7, #14]
 800e146:	009b      	lsls	r3, r3, #2
 800e148:	6a3a      	ldr	r2, [r7, #32]
 800e14a:	4413      	add	r3, r2
 800e14c:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	3b01      	subs	r3, #1
 800e152:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1ee      	bne.n	800e138 <arm_mat_trans_f32+0x3a>
      }

      i++;
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	3301      	adds	r3, #1
 800e15e:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 800e160:	69bb      	ldr	r3, [r7, #24]
 800e162:	3b01      	subs	r3, #1
 800e164:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d1dd      	bne.n	800e128 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 800e16c:	2300      	movs	r3, #0
 800e16e:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 800e170:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800e174:	4618      	mov	r0, r3
 800e176:	372c      	adds	r7, #44	@ 0x2c
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <malloc>:
 800e180:	4b02      	ldr	r3, [pc, #8]	@ (800e18c <malloc+0xc>)
 800e182:	4601      	mov	r1, r0
 800e184:	6818      	ldr	r0, [r3, #0]
 800e186:	f000 b825 	b.w	800e1d4 <_malloc_r>
 800e18a:	bf00      	nop
 800e18c:	20000140 	.word	0x20000140

0800e190 <sbrk_aligned>:
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	4e0f      	ldr	r6, [pc, #60]	@ (800e1d0 <sbrk_aligned+0x40>)
 800e194:	460c      	mov	r4, r1
 800e196:	6831      	ldr	r1, [r6, #0]
 800e198:	4605      	mov	r5, r0
 800e19a:	b911      	cbnz	r1, 800e1a2 <sbrk_aligned+0x12>
 800e19c:	f000 f8ae 	bl	800e2fc <_sbrk_r>
 800e1a0:	6030      	str	r0, [r6, #0]
 800e1a2:	4621      	mov	r1, r4
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	f000 f8a9 	bl	800e2fc <_sbrk_r>
 800e1aa:	1c43      	adds	r3, r0, #1
 800e1ac:	d103      	bne.n	800e1b6 <sbrk_aligned+0x26>
 800e1ae:	f04f 34ff 	mov.w	r4, #4294967295
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	bd70      	pop	{r4, r5, r6, pc}
 800e1b6:	1cc4      	adds	r4, r0, #3
 800e1b8:	f024 0403 	bic.w	r4, r4, #3
 800e1bc:	42a0      	cmp	r0, r4
 800e1be:	d0f8      	beq.n	800e1b2 <sbrk_aligned+0x22>
 800e1c0:	1a21      	subs	r1, r4, r0
 800e1c2:	4628      	mov	r0, r5
 800e1c4:	f000 f89a 	bl	800e2fc <_sbrk_r>
 800e1c8:	3001      	adds	r0, #1
 800e1ca:	d1f2      	bne.n	800e1b2 <sbrk_aligned+0x22>
 800e1cc:	e7ef      	b.n	800e1ae <sbrk_aligned+0x1e>
 800e1ce:	bf00      	nop
 800e1d0:	200020f4 	.word	0x200020f4

0800e1d4 <_malloc_r>:
 800e1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1d8:	1ccd      	adds	r5, r1, #3
 800e1da:	f025 0503 	bic.w	r5, r5, #3
 800e1de:	3508      	adds	r5, #8
 800e1e0:	2d0c      	cmp	r5, #12
 800e1e2:	bf38      	it	cc
 800e1e4:	250c      	movcc	r5, #12
 800e1e6:	2d00      	cmp	r5, #0
 800e1e8:	4606      	mov	r6, r0
 800e1ea:	db01      	blt.n	800e1f0 <_malloc_r+0x1c>
 800e1ec:	42a9      	cmp	r1, r5
 800e1ee:	d904      	bls.n	800e1fa <_malloc_r+0x26>
 800e1f0:	230c      	movs	r3, #12
 800e1f2:	6033      	str	r3, [r6, #0]
 800e1f4:	2000      	movs	r0, #0
 800e1f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2d0 <_malloc_r+0xfc>
 800e1fe:	f000 f869 	bl	800e2d4 <__malloc_lock>
 800e202:	f8d8 3000 	ldr.w	r3, [r8]
 800e206:	461c      	mov	r4, r3
 800e208:	bb44      	cbnz	r4, 800e25c <_malloc_r+0x88>
 800e20a:	4629      	mov	r1, r5
 800e20c:	4630      	mov	r0, r6
 800e20e:	f7ff ffbf 	bl	800e190 <sbrk_aligned>
 800e212:	1c43      	adds	r3, r0, #1
 800e214:	4604      	mov	r4, r0
 800e216:	d158      	bne.n	800e2ca <_malloc_r+0xf6>
 800e218:	f8d8 4000 	ldr.w	r4, [r8]
 800e21c:	4627      	mov	r7, r4
 800e21e:	2f00      	cmp	r7, #0
 800e220:	d143      	bne.n	800e2aa <_malloc_r+0xd6>
 800e222:	2c00      	cmp	r4, #0
 800e224:	d04b      	beq.n	800e2be <_malloc_r+0xea>
 800e226:	6823      	ldr	r3, [r4, #0]
 800e228:	4639      	mov	r1, r7
 800e22a:	4630      	mov	r0, r6
 800e22c:	eb04 0903 	add.w	r9, r4, r3
 800e230:	f000 f864 	bl	800e2fc <_sbrk_r>
 800e234:	4581      	cmp	r9, r0
 800e236:	d142      	bne.n	800e2be <_malloc_r+0xea>
 800e238:	6821      	ldr	r1, [r4, #0]
 800e23a:	1a6d      	subs	r5, r5, r1
 800e23c:	4629      	mov	r1, r5
 800e23e:	4630      	mov	r0, r6
 800e240:	f7ff ffa6 	bl	800e190 <sbrk_aligned>
 800e244:	3001      	adds	r0, #1
 800e246:	d03a      	beq.n	800e2be <_malloc_r+0xea>
 800e248:	6823      	ldr	r3, [r4, #0]
 800e24a:	442b      	add	r3, r5
 800e24c:	6023      	str	r3, [r4, #0]
 800e24e:	f8d8 3000 	ldr.w	r3, [r8]
 800e252:	685a      	ldr	r2, [r3, #4]
 800e254:	bb62      	cbnz	r2, 800e2b0 <_malloc_r+0xdc>
 800e256:	f8c8 7000 	str.w	r7, [r8]
 800e25a:	e00f      	b.n	800e27c <_malloc_r+0xa8>
 800e25c:	6822      	ldr	r2, [r4, #0]
 800e25e:	1b52      	subs	r2, r2, r5
 800e260:	d420      	bmi.n	800e2a4 <_malloc_r+0xd0>
 800e262:	2a0b      	cmp	r2, #11
 800e264:	d917      	bls.n	800e296 <_malloc_r+0xc2>
 800e266:	1961      	adds	r1, r4, r5
 800e268:	42a3      	cmp	r3, r4
 800e26a:	6025      	str	r5, [r4, #0]
 800e26c:	bf18      	it	ne
 800e26e:	6059      	strne	r1, [r3, #4]
 800e270:	6863      	ldr	r3, [r4, #4]
 800e272:	bf08      	it	eq
 800e274:	f8c8 1000 	streq.w	r1, [r8]
 800e278:	5162      	str	r2, [r4, r5]
 800e27a:	604b      	str	r3, [r1, #4]
 800e27c:	4630      	mov	r0, r6
 800e27e:	f000 f82f 	bl	800e2e0 <__malloc_unlock>
 800e282:	f104 000b 	add.w	r0, r4, #11
 800e286:	1d23      	adds	r3, r4, #4
 800e288:	f020 0007 	bic.w	r0, r0, #7
 800e28c:	1ac2      	subs	r2, r0, r3
 800e28e:	bf1c      	itt	ne
 800e290:	1a1b      	subne	r3, r3, r0
 800e292:	50a3      	strne	r3, [r4, r2]
 800e294:	e7af      	b.n	800e1f6 <_malloc_r+0x22>
 800e296:	6862      	ldr	r2, [r4, #4]
 800e298:	42a3      	cmp	r3, r4
 800e29a:	bf0c      	ite	eq
 800e29c:	f8c8 2000 	streq.w	r2, [r8]
 800e2a0:	605a      	strne	r2, [r3, #4]
 800e2a2:	e7eb      	b.n	800e27c <_malloc_r+0xa8>
 800e2a4:	4623      	mov	r3, r4
 800e2a6:	6864      	ldr	r4, [r4, #4]
 800e2a8:	e7ae      	b.n	800e208 <_malloc_r+0x34>
 800e2aa:	463c      	mov	r4, r7
 800e2ac:	687f      	ldr	r7, [r7, #4]
 800e2ae:	e7b6      	b.n	800e21e <_malloc_r+0x4a>
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	42a3      	cmp	r3, r4
 800e2b6:	d1fb      	bne.n	800e2b0 <_malloc_r+0xdc>
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	6053      	str	r3, [r2, #4]
 800e2bc:	e7de      	b.n	800e27c <_malloc_r+0xa8>
 800e2be:	230c      	movs	r3, #12
 800e2c0:	6033      	str	r3, [r6, #0]
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	f000 f80c 	bl	800e2e0 <__malloc_unlock>
 800e2c8:	e794      	b.n	800e1f4 <_malloc_r+0x20>
 800e2ca:	6005      	str	r5, [r0, #0]
 800e2cc:	e7d6      	b.n	800e27c <_malloc_r+0xa8>
 800e2ce:	bf00      	nop
 800e2d0:	200020f8 	.word	0x200020f8

0800e2d4 <__malloc_lock>:
 800e2d4:	4801      	ldr	r0, [pc, #4]	@ (800e2dc <__malloc_lock+0x8>)
 800e2d6:	f000 b84b 	b.w	800e370 <__retarget_lock_acquire_recursive>
 800e2da:	bf00      	nop
 800e2dc:	20002238 	.word	0x20002238

0800e2e0 <__malloc_unlock>:
 800e2e0:	4801      	ldr	r0, [pc, #4]	@ (800e2e8 <__malloc_unlock+0x8>)
 800e2e2:	f000 b846 	b.w	800e372 <__retarget_lock_release_recursive>
 800e2e6:	bf00      	nop
 800e2e8:	20002238 	.word	0x20002238

0800e2ec <memset>:
 800e2ec:	4402      	add	r2, r0
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d100      	bne.n	800e2f6 <memset+0xa>
 800e2f4:	4770      	bx	lr
 800e2f6:	f803 1b01 	strb.w	r1, [r3], #1
 800e2fa:	e7f9      	b.n	800e2f0 <memset+0x4>

0800e2fc <_sbrk_r>:
 800e2fc:	b538      	push	{r3, r4, r5, lr}
 800e2fe:	4d06      	ldr	r5, [pc, #24]	@ (800e318 <_sbrk_r+0x1c>)
 800e300:	2300      	movs	r3, #0
 800e302:	4604      	mov	r4, r0
 800e304:	4608      	mov	r0, r1
 800e306:	602b      	str	r3, [r5, #0]
 800e308:	f7f7 f958 	bl	80055bc <_sbrk>
 800e30c:	1c43      	adds	r3, r0, #1
 800e30e:	d102      	bne.n	800e316 <_sbrk_r+0x1a>
 800e310:	682b      	ldr	r3, [r5, #0]
 800e312:	b103      	cbz	r3, 800e316 <_sbrk_r+0x1a>
 800e314:	6023      	str	r3, [r4, #0]
 800e316:	bd38      	pop	{r3, r4, r5, pc}
 800e318:	20002234 	.word	0x20002234

0800e31c <__errno>:
 800e31c:	4b01      	ldr	r3, [pc, #4]	@ (800e324 <__errno+0x8>)
 800e31e:	6818      	ldr	r0, [r3, #0]
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop
 800e324:	20000140 	.word	0x20000140

0800e328 <__libc_init_array>:
 800e328:	b570      	push	{r4, r5, r6, lr}
 800e32a:	4d0d      	ldr	r5, [pc, #52]	@ (800e360 <__libc_init_array+0x38>)
 800e32c:	4c0d      	ldr	r4, [pc, #52]	@ (800e364 <__libc_init_array+0x3c>)
 800e32e:	1b64      	subs	r4, r4, r5
 800e330:	10a4      	asrs	r4, r4, #2
 800e332:	2600      	movs	r6, #0
 800e334:	42a6      	cmp	r6, r4
 800e336:	d109      	bne.n	800e34c <__libc_init_array+0x24>
 800e338:	4d0b      	ldr	r5, [pc, #44]	@ (800e368 <__libc_init_array+0x40>)
 800e33a:	4c0c      	ldr	r4, [pc, #48]	@ (800e36c <__libc_init_array+0x44>)
 800e33c:	f001 fe78 	bl	8010030 <_init>
 800e340:	1b64      	subs	r4, r4, r5
 800e342:	10a4      	asrs	r4, r4, #2
 800e344:	2600      	movs	r6, #0
 800e346:	42a6      	cmp	r6, r4
 800e348:	d105      	bne.n	800e356 <__libc_init_array+0x2e>
 800e34a:	bd70      	pop	{r4, r5, r6, pc}
 800e34c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e350:	4798      	blx	r3
 800e352:	3601      	adds	r6, #1
 800e354:	e7ee      	b.n	800e334 <__libc_init_array+0xc>
 800e356:	f855 3b04 	ldr.w	r3, [r5], #4
 800e35a:	4798      	blx	r3
 800e35c:	3601      	adds	r6, #1
 800e35e:	e7f2      	b.n	800e346 <__libc_init_array+0x1e>
 800e360:	08010698 	.word	0x08010698
 800e364:	08010698 	.word	0x08010698
 800e368:	08010698 	.word	0x08010698
 800e36c:	0801069c 	.word	0x0801069c

0800e370 <__retarget_lock_acquire_recursive>:
 800e370:	4770      	bx	lr

0800e372 <__retarget_lock_release_recursive>:
 800e372:	4770      	bx	lr
 800e374:	0000      	movs	r0, r0
	...

0800e378 <sin>:
 800e378:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e37a:	ec53 2b10 	vmov	r2, r3, d0
 800e37e:	4826      	ldr	r0, [pc, #152]	@ (800e418 <sin+0xa0>)
 800e380:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e384:	4281      	cmp	r1, r0
 800e386:	d807      	bhi.n	800e398 <sin+0x20>
 800e388:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800e410 <sin+0x98>
 800e38c:	2000      	movs	r0, #0
 800e38e:	b005      	add	sp, #20
 800e390:	f85d eb04 	ldr.w	lr, [sp], #4
 800e394:	f000 b9d8 	b.w	800e748 <__kernel_sin>
 800e398:	4820      	ldr	r0, [pc, #128]	@ (800e41c <sin+0xa4>)
 800e39a:	4281      	cmp	r1, r0
 800e39c:	d908      	bls.n	800e3b0 <sin+0x38>
 800e39e:	4610      	mov	r0, r2
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	f7f1 ff3d 	bl	8000220 <__aeabi_dsub>
 800e3a6:	ec41 0b10 	vmov	d0, r0, r1
 800e3aa:	b005      	add	sp, #20
 800e3ac:	f85d fb04 	ldr.w	pc, [sp], #4
 800e3b0:	4668      	mov	r0, sp
 800e3b2:	f000 fa85 	bl	800e8c0 <__ieee754_rem_pio2>
 800e3b6:	f000 0003 	and.w	r0, r0, #3
 800e3ba:	2801      	cmp	r0, #1
 800e3bc:	d00c      	beq.n	800e3d8 <sin+0x60>
 800e3be:	2802      	cmp	r0, #2
 800e3c0:	d011      	beq.n	800e3e6 <sin+0x6e>
 800e3c2:	b9e8      	cbnz	r0, 800e400 <sin+0x88>
 800e3c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e3c8:	ed9d 0b00 	vldr	d0, [sp]
 800e3cc:	2001      	movs	r0, #1
 800e3ce:	f000 f9bb 	bl	800e748 <__kernel_sin>
 800e3d2:	ec51 0b10 	vmov	r0, r1, d0
 800e3d6:	e7e6      	b.n	800e3a6 <sin+0x2e>
 800e3d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e3dc:	ed9d 0b00 	vldr	d0, [sp]
 800e3e0:	f000 f8ea 	bl	800e5b8 <__kernel_cos>
 800e3e4:	e7f5      	b.n	800e3d2 <sin+0x5a>
 800e3e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e3ea:	ed9d 0b00 	vldr	d0, [sp]
 800e3ee:	2001      	movs	r0, #1
 800e3f0:	f000 f9aa 	bl	800e748 <__kernel_sin>
 800e3f4:	ec53 2b10 	vmov	r2, r3, d0
 800e3f8:	4610      	mov	r0, r2
 800e3fa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e3fe:	e7d2      	b.n	800e3a6 <sin+0x2e>
 800e400:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e404:	ed9d 0b00 	vldr	d0, [sp]
 800e408:	f000 f8d6 	bl	800e5b8 <__kernel_cos>
 800e40c:	e7f2      	b.n	800e3f4 <sin+0x7c>
 800e40e:	bf00      	nop
	...
 800e418:	3fe921fb 	.word	0x3fe921fb
 800e41c:	7fefffff 	.word	0x7fefffff

0800e420 <fmodf>:
 800e420:	b508      	push	{r3, lr}
 800e422:	ed2d 8b02 	vpush	{d8}
 800e426:	eef0 8a40 	vmov.f32	s17, s0
 800e42a:	eeb0 8a60 	vmov.f32	s16, s1
 800e42e:	f000 fceb 	bl	800ee08 <__ieee754_fmodf>
 800e432:	eef4 8a48 	vcmp.f32	s17, s16
 800e436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e43a:	d60c      	bvs.n	800e456 <fmodf+0x36>
 800e43c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e45c <fmodf+0x3c>
 800e440:	eeb4 8a68 	vcmp.f32	s16, s17
 800e444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e448:	d105      	bne.n	800e456 <fmodf+0x36>
 800e44a:	f7ff ff67 	bl	800e31c <__errno>
 800e44e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e452:	2321      	movs	r3, #33	@ 0x21
 800e454:	6003      	str	r3, [r0, #0]
 800e456:	ecbd 8b02 	vpop	{d8}
 800e45a:	bd08      	pop	{r3, pc}
 800e45c:	00000000 	.word	0x00000000

0800e460 <sqrtf>:
 800e460:	b508      	push	{r3, lr}
 800e462:	ed2d 8b02 	vpush	{d8}
 800e466:	eeb0 8a40 	vmov.f32	s16, s0
 800e46a:	f000 f8a1 	bl	800e5b0 <__ieee754_sqrtf>
 800e46e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e476:	d60c      	bvs.n	800e492 <sqrtf+0x32>
 800e478:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800e498 <sqrtf+0x38>
 800e47c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e484:	d505      	bpl.n	800e492 <sqrtf+0x32>
 800e486:	f7ff ff49 	bl	800e31c <__errno>
 800e48a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e48e:	2321      	movs	r3, #33	@ 0x21
 800e490:	6003      	str	r3, [r0, #0]
 800e492:	ecbd 8b02 	vpop	{d8}
 800e496:	bd08      	pop	{r3, pc}
 800e498:	00000000 	.word	0x00000000

0800e49c <cosf>:
 800e49c:	ee10 3a10 	vmov	r3, s0
 800e4a0:	b507      	push	{r0, r1, r2, lr}
 800e4a2:	4a1e      	ldr	r2, [pc, #120]	@ (800e51c <cosf+0x80>)
 800e4a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e4a8:	4293      	cmp	r3, r2
 800e4aa:	d806      	bhi.n	800e4ba <cosf+0x1e>
 800e4ac:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800e520 <cosf+0x84>
 800e4b0:	b003      	add	sp, #12
 800e4b2:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4b6:	f000 bc07 	b.w	800ecc8 <__kernel_cosf>
 800e4ba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e4be:	d304      	bcc.n	800e4ca <cosf+0x2e>
 800e4c0:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e4c4:	b003      	add	sp, #12
 800e4c6:	f85d fb04 	ldr.w	pc, [sp], #4
 800e4ca:	4668      	mov	r0, sp
 800e4cc:	f000 fd1e 	bl	800ef0c <__ieee754_rem_pio2f>
 800e4d0:	f000 0003 	and.w	r0, r0, #3
 800e4d4:	2801      	cmp	r0, #1
 800e4d6:	d009      	beq.n	800e4ec <cosf+0x50>
 800e4d8:	2802      	cmp	r0, #2
 800e4da:	d010      	beq.n	800e4fe <cosf+0x62>
 800e4dc:	b9b0      	cbnz	r0, 800e50c <cosf+0x70>
 800e4de:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4e2:	ed9d 0a00 	vldr	s0, [sp]
 800e4e6:	f000 fbef 	bl	800ecc8 <__kernel_cosf>
 800e4ea:	e7eb      	b.n	800e4c4 <cosf+0x28>
 800e4ec:	eddd 0a01 	vldr	s1, [sp, #4]
 800e4f0:	ed9d 0a00 	vldr	s0, [sp]
 800e4f4:	f000 fc40 	bl	800ed78 <__kernel_sinf>
 800e4f8:	eeb1 0a40 	vneg.f32	s0, s0
 800e4fc:	e7e2      	b.n	800e4c4 <cosf+0x28>
 800e4fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800e502:	ed9d 0a00 	vldr	s0, [sp]
 800e506:	f000 fbdf 	bl	800ecc8 <__kernel_cosf>
 800e50a:	e7f5      	b.n	800e4f8 <cosf+0x5c>
 800e50c:	eddd 0a01 	vldr	s1, [sp, #4]
 800e510:	ed9d 0a00 	vldr	s0, [sp]
 800e514:	2001      	movs	r0, #1
 800e516:	f000 fc2f 	bl	800ed78 <__kernel_sinf>
 800e51a:	e7d3      	b.n	800e4c4 <cosf+0x28>
 800e51c:	3f490fd8 	.word	0x3f490fd8
 800e520:	00000000 	.word	0x00000000

0800e524 <sinf>:
 800e524:	ee10 3a10 	vmov	r3, s0
 800e528:	b507      	push	{r0, r1, r2, lr}
 800e52a:	4a1f      	ldr	r2, [pc, #124]	@ (800e5a8 <sinf+0x84>)
 800e52c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e530:	4293      	cmp	r3, r2
 800e532:	d807      	bhi.n	800e544 <sinf+0x20>
 800e534:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800e5ac <sinf+0x88>
 800e538:	2000      	movs	r0, #0
 800e53a:	b003      	add	sp, #12
 800e53c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e540:	f000 bc1a 	b.w	800ed78 <__kernel_sinf>
 800e544:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800e548:	d304      	bcc.n	800e554 <sinf+0x30>
 800e54a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800e54e:	b003      	add	sp, #12
 800e550:	f85d fb04 	ldr.w	pc, [sp], #4
 800e554:	4668      	mov	r0, sp
 800e556:	f000 fcd9 	bl	800ef0c <__ieee754_rem_pio2f>
 800e55a:	f000 0003 	and.w	r0, r0, #3
 800e55e:	2801      	cmp	r0, #1
 800e560:	d00a      	beq.n	800e578 <sinf+0x54>
 800e562:	2802      	cmp	r0, #2
 800e564:	d00f      	beq.n	800e586 <sinf+0x62>
 800e566:	b9c0      	cbnz	r0, 800e59a <sinf+0x76>
 800e568:	eddd 0a01 	vldr	s1, [sp, #4]
 800e56c:	ed9d 0a00 	vldr	s0, [sp]
 800e570:	2001      	movs	r0, #1
 800e572:	f000 fc01 	bl	800ed78 <__kernel_sinf>
 800e576:	e7ea      	b.n	800e54e <sinf+0x2a>
 800e578:	eddd 0a01 	vldr	s1, [sp, #4]
 800e57c:	ed9d 0a00 	vldr	s0, [sp]
 800e580:	f000 fba2 	bl	800ecc8 <__kernel_cosf>
 800e584:	e7e3      	b.n	800e54e <sinf+0x2a>
 800e586:	eddd 0a01 	vldr	s1, [sp, #4]
 800e58a:	ed9d 0a00 	vldr	s0, [sp]
 800e58e:	2001      	movs	r0, #1
 800e590:	f000 fbf2 	bl	800ed78 <__kernel_sinf>
 800e594:	eeb1 0a40 	vneg.f32	s0, s0
 800e598:	e7d9      	b.n	800e54e <sinf+0x2a>
 800e59a:	eddd 0a01 	vldr	s1, [sp, #4]
 800e59e:	ed9d 0a00 	vldr	s0, [sp]
 800e5a2:	f000 fb91 	bl	800ecc8 <__kernel_cosf>
 800e5a6:	e7f5      	b.n	800e594 <sinf+0x70>
 800e5a8:	3f490fd8 	.word	0x3f490fd8
 800e5ac:	00000000 	.word	0x00000000

0800e5b0 <__ieee754_sqrtf>:
 800e5b0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e5b4:	4770      	bx	lr
	...

0800e5b8 <__kernel_cos>:
 800e5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5bc:	ec57 6b10 	vmov	r6, r7, d0
 800e5c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e5c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800e5c8:	ed8d 1b00 	vstr	d1, [sp]
 800e5cc:	d206      	bcs.n	800e5dc <__kernel_cos+0x24>
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	4639      	mov	r1, r7
 800e5d2:	f7f2 fa77 	bl	8000ac4 <__aeabi_d2iz>
 800e5d6:	2800      	cmp	r0, #0
 800e5d8:	f000 8088 	beq.w	800e6ec <__kernel_cos+0x134>
 800e5dc:	4632      	mov	r2, r6
 800e5de:	463b      	mov	r3, r7
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	4639      	mov	r1, r7
 800e5e4:	f7f1 ffd4 	bl	8000590 <__aeabi_dmul>
 800e5e8:	4b51      	ldr	r3, [pc, #324]	@ (800e730 <__kernel_cos+0x178>)
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	4604      	mov	r4, r0
 800e5ee:	460d      	mov	r5, r1
 800e5f0:	f7f1 ffce 	bl	8000590 <__aeabi_dmul>
 800e5f4:	a340      	add	r3, pc, #256	@ (adr r3, 800e6f8 <__kernel_cos+0x140>)
 800e5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fa:	4682      	mov	sl, r0
 800e5fc:	468b      	mov	fp, r1
 800e5fe:	4620      	mov	r0, r4
 800e600:	4629      	mov	r1, r5
 800e602:	f7f1 ffc5 	bl	8000590 <__aeabi_dmul>
 800e606:	a33e      	add	r3, pc, #248	@ (adr r3, 800e700 <__kernel_cos+0x148>)
 800e608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e60c:	f7f1 fe0a 	bl	8000224 <__adddf3>
 800e610:	4622      	mov	r2, r4
 800e612:	462b      	mov	r3, r5
 800e614:	f7f1 ffbc 	bl	8000590 <__aeabi_dmul>
 800e618:	a33b      	add	r3, pc, #236	@ (adr r3, 800e708 <__kernel_cos+0x150>)
 800e61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61e:	f7f1 fdff 	bl	8000220 <__aeabi_dsub>
 800e622:	4622      	mov	r2, r4
 800e624:	462b      	mov	r3, r5
 800e626:	f7f1 ffb3 	bl	8000590 <__aeabi_dmul>
 800e62a:	a339      	add	r3, pc, #228	@ (adr r3, 800e710 <__kernel_cos+0x158>)
 800e62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e630:	f7f1 fdf8 	bl	8000224 <__adddf3>
 800e634:	4622      	mov	r2, r4
 800e636:	462b      	mov	r3, r5
 800e638:	f7f1 ffaa 	bl	8000590 <__aeabi_dmul>
 800e63c:	a336      	add	r3, pc, #216	@ (adr r3, 800e718 <__kernel_cos+0x160>)
 800e63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e642:	f7f1 fded 	bl	8000220 <__aeabi_dsub>
 800e646:	4622      	mov	r2, r4
 800e648:	462b      	mov	r3, r5
 800e64a:	f7f1 ffa1 	bl	8000590 <__aeabi_dmul>
 800e64e:	a334      	add	r3, pc, #208	@ (adr r3, 800e720 <__kernel_cos+0x168>)
 800e650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e654:	f7f1 fde6 	bl	8000224 <__adddf3>
 800e658:	4622      	mov	r2, r4
 800e65a:	462b      	mov	r3, r5
 800e65c:	f7f1 ff98 	bl	8000590 <__aeabi_dmul>
 800e660:	4622      	mov	r2, r4
 800e662:	462b      	mov	r3, r5
 800e664:	f7f1 ff94 	bl	8000590 <__aeabi_dmul>
 800e668:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e66c:	4604      	mov	r4, r0
 800e66e:	460d      	mov	r5, r1
 800e670:	4630      	mov	r0, r6
 800e672:	4639      	mov	r1, r7
 800e674:	f7f1 ff8c 	bl	8000590 <__aeabi_dmul>
 800e678:	460b      	mov	r3, r1
 800e67a:	4602      	mov	r2, r0
 800e67c:	4629      	mov	r1, r5
 800e67e:	4620      	mov	r0, r4
 800e680:	f7f1 fdce 	bl	8000220 <__aeabi_dsub>
 800e684:	4b2b      	ldr	r3, [pc, #172]	@ (800e734 <__kernel_cos+0x17c>)
 800e686:	4598      	cmp	r8, r3
 800e688:	4606      	mov	r6, r0
 800e68a:	460f      	mov	r7, r1
 800e68c:	d810      	bhi.n	800e6b0 <__kernel_cos+0xf8>
 800e68e:	4602      	mov	r2, r0
 800e690:	460b      	mov	r3, r1
 800e692:	4650      	mov	r0, sl
 800e694:	4659      	mov	r1, fp
 800e696:	f7f1 fdc3 	bl	8000220 <__aeabi_dsub>
 800e69a:	460b      	mov	r3, r1
 800e69c:	4926      	ldr	r1, [pc, #152]	@ (800e738 <__kernel_cos+0x180>)
 800e69e:	4602      	mov	r2, r0
 800e6a0:	2000      	movs	r0, #0
 800e6a2:	f7f1 fdbd 	bl	8000220 <__aeabi_dsub>
 800e6a6:	ec41 0b10 	vmov	d0, r0, r1
 800e6aa:	b003      	add	sp, #12
 800e6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6b0:	4b22      	ldr	r3, [pc, #136]	@ (800e73c <__kernel_cos+0x184>)
 800e6b2:	4921      	ldr	r1, [pc, #132]	@ (800e738 <__kernel_cos+0x180>)
 800e6b4:	4598      	cmp	r8, r3
 800e6b6:	bf8c      	ite	hi
 800e6b8:	4d21      	ldrhi	r5, [pc, #132]	@ (800e740 <__kernel_cos+0x188>)
 800e6ba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800e6be:	2400      	movs	r4, #0
 800e6c0:	4622      	mov	r2, r4
 800e6c2:	462b      	mov	r3, r5
 800e6c4:	2000      	movs	r0, #0
 800e6c6:	f7f1 fdab 	bl	8000220 <__aeabi_dsub>
 800e6ca:	4622      	mov	r2, r4
 800e6cc:	4680      	mov	r8, r0
 800e6ce:	4689      	mov	r9, r1
 800e6d0:	462b      	mov	r3, r5
 800e6d2:	4650      	mov	r0, sl
 800e6d4:	4659      	mov	r1, fp
 800e6d6:	f7f1 fda3 	bl	8000220 <__aeabi_dsub>
 800e6da:	4632      	mov	r2, r6
 800e6dc:	463b      	mov	r3, r7
 800e6de:	f7f1 fd9f 	bl	8000220 <__aeabi_dsub>
 800e6e2:	4602      	mov	r2, r0
 800e6e4:	460b      	mov	r3, r1
 800e6e6:	4640      	mov	r0, r8
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	e7da      	b.n	800e6a2 <__kernel_cos+0xea>
 800e6ec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800e728 <__kernel_cos+0x170>
 800e6f0:	e7db      	b.n	800e6aa <__kernel_cos+0xf2>
 800e6f2:	bf00      	nop
 800e6f4:	f3af 8000 	nop.w
 800e6f8:	be8838d4 	.word	0xbe8838d4
 800e6fc:	bda8fae9 	.word	0xbda8fae9
 800e700:	bdb4b1c4 	.word	0xbdb4b1c4
 800e704:	3e21ee9e 	.word	0x3e21ee9e
 800e708:	809c52ad 	.word	0x809c52ad
 800e70c:	3e927e4f 	.word	0x3e927e4f
 800e710:	19cb1590 	.word	0x19cb1590
 800e714:	3efa01a0 	.word	0x3efa01a0
 800e718:	16c15177 	.word	0x16c15177
 800e71c:	3f56c16c 	.word	0x3f56c16c
 800e720:	5555554c 	.word	0x5555554c
 800e724:	3fa55555 	.word	0x3fa55555
 800e728:	00000000 	.word	0x00000000
 800e72c:	3ff00000 	.word	0x3ff00000
 800e730:	3fe00000 	.word	0x3fe00000
 800e734:	3fd33332 	.word	0x3fd33332
 800e738:	3ff00000 	.word	0x3ff00000
 800e73c:	3fe90000 	.word	0x3fe90000
 800e740:	3fd20000 	.word	0x3fd20000
 800e744:	00000000 	.word	0x00000000

0800e748 <__kernel_sin>:
 800e748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e74c:	ec55 4b10 	vmov	r4, r5, d0
 800e750:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e754:	b085      	sub	sp, #20
 800e756:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e75a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800e75e:	4680      	mov	r8, r0
 800e760:	d205      	bcs.n	800e76e <__kernel_sin+0x26>
 800e762:	4620      	mov	r0, r4
 800e764:	4629      	mov	r1, r5
 800e766:	f7f2 f9ad 	bl	8000ac4 <__aeabi_d2iz>
 800e76a:	2800      	cmp	r0, #0
 800e76c:	d052      	beq.n	800e814 <__kernel_sin+0xcc>
 800e76e:	4622      	mov	r2, r4
 800e770:	462b      	mov	r3, r5
 800e772:	4620      	mov	r0, r4
 800e774:	4629      	mov	r1, r5
 800e776:	f7f1 ff0b 	bl	8000590 <__aeabi_dmul>
 800e77a:	4682      	mov	sl, r0
 800e77c:	468b      	mov	fp, r1
 800e77e:	4602      	mov	r2, r0
 800e780:	460b      	mov	r3, r1
 800e782:	4620      	mov	r0, r4
 800e784:	4629      	mov	r1, r5
 800e786:	f7f1 ff03 	bl	8000590 <__aeabi_dmul>
 800e78a:	a342      	add	r3, pc, #264	@ (adr r3, 800e894 <__kernel_sin+0x14c>)
 800e78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e790:	e9cd 0100 	strd	r0, r1, [sp]
 800e794:	4650      	mov	r0, sl
 800e796:	4659      	mov	r1, fp
 800e798:	f7f1 fefa 	bl	8000590 <__aeabi_dmul>
 800e79c:	a33f      	add	r3, pc, #252	@ (adr r3, 800e89c <__kernel_sin+0x154>)
 800e79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7a2:	f7f1 fd3d 	bl	8000220 <__aeabi_dsub>
 800e7a6:	4652      	mov	r2, sl
 800e7a8:	465b      	mov	r3, fp
 800e7aa:	f7f1 fef1 	bl	8000590 <__aeabi_dmul>
 800e7ae:	a33d      	add	r3, pc, #244	@ (adr r3, 800e8a4 <__kernel_sin+0x15c>)
 800e7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b4:	f7f1 fd36 	bl	8000224 <__adddf3>
 800e7b8:	4652      	mov	r2, sl
 800e7ba:	465b      	mov	r3, fp
 800e7bc:	f7f1 fee8 	bl	8000590 <__aeabi_dmul>
 800e7c0:	a33a      	add	r3, pc, #232	@ (adr r3, 800e8ac <__kernel_sin+0x164>)
 800e7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c6:	f7f1 fd2b 	bl	8000220 <__aeabi_dsub>
 800e7ca:	4652      	mov	r2, sl
 800e7cc:	465b      	mov	r3, fp
 800e7ce:	f7f1 fedf 	bl	8000590 <__aeabi_dmul>
 800e7d2:	a338      	add	r3, pc, #224	@ (adr r3, 800e8b4 <__kernel_sin+0x16c>)
 800e7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d8:	f7f1 fd24 	bl	8000224 <__adddf3>
 800e7dc:	4606      	mov	r6, r0
 800e7de:	460f      	mov	r7, r1
 800e7e0:	f1b8 0f00 	cmp.w	r8, #0
 800e7e4:	d11b      	bne.n	800e81e <__kernel_sin+0xd6>
 800e7e6:	4602      	mov	r2, r0
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	4650      	mov	r0, sl
 800e7ec:	4659      	mov	r1, fp
 800e7ee:	f7f1 fecf 	bl	8000590 <__aeabi_dmul>
 800e7f2:	a325      	add	r3, pc, #148	@ (adr r3, 800e888 <__kernel_sin+0x140>)
 800e7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7f8:	f7f1 fd12 	bl	8000220 <__aeabi_dsub>
 800e7fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e800:	f7f1 fec6 	bl	8000590 <__aeabi_dmul>
 800e804:	4602      	mov	r2, r0
 800e806:	460b      	mov	r3, r1
 800e808:	4620      	mov	r0, r4
 800e80a:	4629      	mov	r1, r5
 800e80c:	f7f1 fd0a 	bl	8000224 <__adddf3>
 800e810:	4604      	mov	r4, r0
 800e812:	460d      	mov	r5, r1
 800e814:	ec45 4b10 	vmov	d0, r4, r5
 800e818:	b005      	add	sp, #20
 800e81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e822:	4b1b      	ldr	r3, [pc, #108]	@ (800e890 <__kernel_sin+0x148>)
 800e824:	2200      	movs	r2, #0
 800e826:	f7f1 feb3 	bl	8000590 <__aeabi_dmul>
 800e82a:	4632      	mov	r2, r6
 800e82c:	4680      	mov	r8, r0
 800e82e:	4689      	mov	r9, r1
 800e830:	463b      	mov	r3, r7
 800e832:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e836:	f7f1 feab 	bl	8000590 <__aeabi_dmul>
 800e83a:	4602      	mov	r2, r0
 800e83c:	460b      	mov	r3, r1
 800e83e:	4640      	mov	r0, r8
 800e840:	4649      	mov	r1, r9
 800e842:	f7f1 fced 	bl	8000220 <__aeabi_dsub>
 800e846:	4652      	mov	r2, sl
 800e848:	465b      	mov	r3, fp
 800e84a:	f7f1 fea1 	bl	8000590 <__aeabi_dmul>
 800e84e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e852:	f7f1 fce5 	bl	8000220 <__aeabi_dsub>
 800e856:	a30c      	add	r3, pc, #48	@ (adr r3, 800e888 <__kernel_sin+0x140>)
 800e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e85c:	4606      	mov	r6, r0
 800e85e:	460f      	mov	r7, r1
 800e860:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e864:	f7f1 fe94 	bl	8000590 <__aeabi_dmul>
 800e868:	4602      	mov	r2, r0
 800e86a:	460b      	mov	r3, r1
 800e86c:	4630      	mov	r0, r6
 800e86e:	4639      	mov	r1, r7
 800e870:	f7f1 fcd8 	bl	8000224 <__adddf3>
 800e874:	4602      	mov	r2, r0
 800e876:	460b      	mov	r3, r1
 800e878:	4620      	mov	r0, r4
 800e87a:	4629      	mov	r1, r5
 800e87c:	f7f1 fcd0 	bl	8000220 <__aeabi_dsub>
 800e880:	e7c6      	b.n	800e810 <__kernel_sin+0xc8>
 800e882:	bf00      	nop
 800e884:	f3af 8000 	nop.w
 800e888:	55555549 	.word	0x55555549
 800e88c:	3fc55555 	.word	0x3fc55555
 800e890:	3fe00000 	.word	0x3fe00000
 800e894:	5acfd57c 	.word	0x5acfd57c
 800e898:	3de5d93a 	.word	0x3de5d93a
 800e89c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e8a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800e8a4:	57b1fe7d 	.word	0x57b1fe7d
 800e8a8:	3ec71de3 	.word	0x3ec71de3
 800e8ac:	19c161d5 	.word	0x19c161d5
 800e8b0:	3f2a01a0 	.word	0x3f2a01a0
 800e8b4:	1110f8a6 	.word	0x1110f8a6
 800e8b8:	3f811111 	.word	0x3f811111
 800e8bc:	00000000 	.word	0x00000000

0800e8c0 <__ieee754_rem_pio2>:
 800e8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8c4:	ec57 6b10 	vmov	r6, r7, d0
 800e8c8:	4bc5      	ldr	r3, [pc, #788]	@ (800ebe0 <__ieee754_rem_pio2+0x320>)
 800e8ca:	b08d      	sub	sp, #52	@ 0x34
 800e8cc:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e8d0:	4598      	cmp	r8, r3
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	9704      	str	r7, [sp, #16]
 800e8d6:	d807      	bhi.n	800e8e8 <__ieee754_rem_pio2+0x28>
 800e8d8:	2200      	movs	r2, #0
 800e8da:	2300      	movs	r3, #0
 800e8dc:	ed80 0b00 	vstr	d0, [r0]
 800e8e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e8e4:	2500      	movs	r5, #0
 800e8e6:	e028      	b.n	800e93a <__ieee754_rem_pio2+0x7a>
 800e8e8:	4bbe      	ldr	r3, [pc, #760]	@ (800ebe4 <__ieee754_rem_pio2+0x324>)
 800e8ea:	4598      	cmp	r8, r3
 800e8ec:	d878      	bhi.n	800e9e0 <__ieee754_rem_pio2+0x120>
 800e8ee:	9b04      	ldr	r3, [sp, #16]
 800e8f0:	4dbd      	ldr	r5, [pc, #756]	@ (800ebe8 <__ieee754_rem_pio2+0x328>)
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	4630      	mov	r0, r6
 800e8f6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800eba8 <__ieee754_rem_pio2+0x2e8>)
 800e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fc:	4639      	mov	r1, r7
 800e8fe:	dd38      	ble.n	800e972 <__ieee754_rem_pio2+0xb2>
 800e900:	f7f1 fc8e 	bl	8000220 <__aeabi_dsub>
 800e904:	45a8      	cmp	r8, r5
 800e906:	4606      	mov	r6, r0
 800e908:	460f      	mov	r7, r1
 800e90a:	d01a      	beq.n	800e942 <__ieee754_rem_pio2+0x82>
 800e90c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800ebb0 <__ieee754_rem_pio2+0x2f0>)
 800e90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e912:	f7f1 fc85 	bl	8000220 <__aeabi_dsub>
 800e916:	4602      	mov	r2, r0
 800e918:	460b      	mov	r3, r1
 800e91a:	4680      	mov	r8, r0
 800e91c:	4689      	mov	r9, r1
 800e91e:	4630      	mov	r0, r6
 800e920:	4639      	mov	r1, r7
 800e922:	f7f1 fc7d 	bl	8000220 <__aeabi_dsub>
 800e926:	a3a2      	add	r3, pc, #648	@ (adr r3, 800ebb0 <__ieee754_rem_pio2+0x2f0>)
 800e928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92c:	f7f1 fc78 	bl	8000220 <__aeabi_dsub>
 800e930:	e9c4 8900 	strd	r8, r9, [r4]
 800e934:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e938:	2501      	movs	r5, #1
 800e93a:	4628      	mov	r0, r5
 800e93c:	b00d      	add	sp, #52	@ 0x34
 800e93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e942:	a39d      	add	r3, pc, #628	@ (adr r3, 800ebb8 <__ieee754_rem_pio2+0x2f8>)
 800e944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e948:	f7f1 fc6a 	bl	8000220 <__aeabi_dsub>
 800e94c:	a39c      	add	r3, pc, #624	@ (adr r3, 800ebc0 <__ieee754_rem_pio2+0x300>)
 800e94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e952:	4606      	mov	r6, r0
 800e954:	460f      	mov	r7, r1
 800e956:	f7f1 fc63 	bl	8000220 <__aeabi_dsub>
 800e95a:	4602      	mov	r2, r0
 800e95c:	460b      	mov	r3, r1
 800e95e:	4680      	mov	r8, r0
 800e960:	4689      	mov	r9, r1
 800e962:	4630      	mov	r0, r6
 800e964:	4639      	mov	r1, r7
 800e966:	f7f1 fc5b 	bl	8000220 <__aeabi_dsub>
 800e96a:	a395      	add	r3, pc, #596	@ (adr r3, 800ebc0 <__ieee754_rem_pio2+0x300>)
 800e96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e970:	e7dc      	b.n	800e92c <__ieee754_rem_pio2+0x6c>
 800e972:	f7f1 fc57 	bl	8000224 <__adddf3>
 800e976:	45a8      	cmp	r8, r5
 800e978:	4606      	mov	r6, r0
 800e97a:	460f      	mov	r7, r1
 800e97c:	d018      	beq.n	800e9b0 <__ieee754_rem_pio2+0xf0>
 800e97e:	a38c      	add	r3, pc, #560	@ (adr r3, 800ebb0 <__ieee754_rem_pio2+0x2f0>)
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	f7f1 fc4e 	bl	8000224 <__adddf3>
 800e988:	4602      	mov	r2, r0
 800e98a:	460b      	mov	r3, r1
 800e98c:	4680      	mov	r8, r0
 800e98e:	4689      	mov	r9, r1
 800e990:	4630      	mov	r0, r6
 800e992:	4639      	mov	r1, r7
 800e994:	f7f1 fc44 	bl	8000220 <__aeabi_dsub>
 800e998:	a385      	add	r3, pc, #532	@ (adr r3, 800ebb0 <__ieee754_rem_pio2+0x2f0>)
 800e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99e:	f7f1 fc41 	bl	8000224 <__adddf3>
 800e9a2:	f04f 35ff 	mov.w	r5, #4294967295
 800e9a6:	e9c4 8900 	strd	r8, r9, [r4]
 800e9aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e9ae:	e7c4      	b.n	800e93a <__ieee754_rem_pio2+0x7a>
 800e9b0:	a381      	add	r3, pc, #516	@ (adr r3, 800ebb8 <__ieee754_rem_pio2+0x2f8>)
 800e9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b6:	f7f1 fc35 	bl	8000224 <__adddf3>
 800e9ba:	a381      	add	r3, pc, #516	@ (adr r3, 800ebc0 <__ieee754_rem_pio2+0x300>)
 800e9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c0:	4606      	mov	r6, r0
 800e9c2:	460f      	mov	r7, r1
 800e9c4:	f7f1 fc2e 	bl	8000224 <__adddf3>
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	4680      	mov	r8, r0
 800e9ce:	4689      	mov	r9, r1
 800e9d0:	4630      	mov	r0, r6
 800e9d2:	4639      	mov	r1, r7
 800e9d4:	f7f1 fc24 	bl	8000220 <__aeabi_dsub>
 800e9d8:	a379      	add	r3, pc, #484	@ (adr r3, 800ebc0 <__ieee754_rem_pio2+0x300>)
 800e9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9de:	e7de      	b.n	800e99e <__ieee754_rem_pio2+0xde>
 800e9e0:	4b82      	ldr	r3, [pc, #520]	@ (800ebec <__ieee754_rem_pio2+0x32c>)
 800e9e2:	4598      	cmp	r8, r3
 800e9e4:	f200 80d1 	bhi.w	800eb8a <__ieee754_rem_pio2+0x2ca>
 800e9e8:	f000 f966 	bl	800ecb8 <fabs>
 800e9ec:	ec57 6b10 	vmov	r6, r7, d0
 800e9f0:	a375      	add	r3, pc, #468	@ (adr r3, 800ebc8 <__ieee754_rem_pio2+0x308>)
 800e9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f6:	4630      	mov	r0, r6
 800e9f8:	4639      	mov	r1, r7
 800e9fa:	f7f1 fdc9 	bl	8000590 <__aeabi_dmul>
 800e9fe:	4b7c      	ldr	r3, [pc, #496]	@ (800ebf0 <__ieee754_rem_pio2+0x330>)
 800ea00:	2200      	movs	r2, #0
 800ea02:	f7f1 fc0f 	bl	8000224 <__adddf3>
 800ea06:	f7f2 f85d 	bl	8000ac4 <__aeabi_d2iz>
 800ea0a:	4605      	mov	r5, r0
 800ea0c:	f7f1 fd56 	bl	80004bc <__aeabi_i2d>
 800ea10:	4602      	mov	r2, r0
 800ea12:	460b      	mov	r3, r1
 800ea14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ea18:	a363      	add	r3, pc, #396	@ (adr r3, 800eba8 <__ieee754_rem_pio2+0x2e8>)
 800ea1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1e:	f7f1 fdb7 	bl	8000590 <__aeabi_dmul>
 800ea22:	4602      	mov	r2, r0
 800ea24:	460b      	mov	r3, r1
 800ea26:	4630      	mov	r0, r6
 800ea28:	4639      	mov	r1, r7
 800ea2a:	f7f1 fbf9 	bl	8000220 <__aeabi_dsub>
 800ea2e:	a360      	add	r3, pc, #384	@ (adr r3, 800ebb0 <__ieee754_rem_pio2+0x2f0>)
 800ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea34:	4682      	mov	sl, r0
 800ea36:	468b      	mov	fp, r1
 800ea38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea3c:	f7f1 fda8 	bl	8000590 <__aeabi_dmul>
 800ea40:	2d1f      	cmp	r5, #31
 800ea42:	4606      	mov	r6, r0
 800ea44:	460f      	mov	r7, r1
 800ea46:	dc0c      	bgt.n	800ea62 <__ieee754_rem_pio2+0x1a2>
 800ea48:	4b6a      	ldr	r3, [pc, #424]	@ (800ebf4 <__ieee754_rem_pio2+0x334>)
 800ea4a:	1e6a      	subs	r2, r5, #1
 800ea4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea50:	4543      	cmp	r3, r8
 800ea52:	d006      	beq.n	800ea62 <__ieee754_rem_pio2+0x1a2>
 800ea54:	4632      	mov	r2, r6
 800ea56:	463b      	mov	r3, r7
 800ea58:	4650      	mov	r0, sl
 800ea5a:	4659      	mov	r1, fp
 800ea5c:	f7f1 fbe0 	bl	8000220 <__aeabi_dsub>
 800ea60:	e00e      	b.n	800ea80 <__ieee754_rem_pio2+0x1c0>
 800ea62:	463b      	mov	r3, r7
 800ea64:	4632      	mov	r2, r6
 800ea66:	4650      	mov	r0, sl
 800ea68:	4659      	mov	r1, fp
 800ea6a:	f7f1 fbd9 	bl	8000220 <__aeabi_dsub>
 800ea6e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ea72:	9305      	str	r3, [sp, #20]
 800ea74:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ea78:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800ea7c:	2b10      	cmp	r3, #16
 800ea7e:	dc02      	bgt.n	800ea86 <__ieee754_rem_pio2+0x1c6>
 800ea80:	e9c4 0100 	strd	r0, r1, [r4]
 800ea84:	e039      	b.n	800eafa <__ieee754_rem_pio2+0x23a>
 800ea86:	a34c      	add	r3, pc, #304	@ (adr r3, 800ebb8 <__ieee754_rem_pio2+0x2f8>)
 800ea88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea90:	f7f1 fd7e 	bl	8000590 <__aeabi_dmul>
 800ea94:	4606      	mov	r6, r0
 800ea96:	460f      	mov	r7, r1
 800ea98:	4602      	mov	r2, r0
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	4650      	mov	r0, sl
 800ea9e:	4659      	mov	r1, fp
 800eaa0:	f7f1 fbbe 	bl	8000220 <__aeabi_dsub>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	460b      	mov	r3, r1
 800eaa8:	4680      	mov	r8, r0
 800eaaa:	4689      	mov	r9, r1
 800eaac:	4650      	mov	r0, sl
 800eaae:	4659      	mov	r1, fp
 800eab0:	f7f1 fbb6 	bl	8000220 <__aeabi_dsub>
 800eab4:	4632      	mov	r2, r6
 800eab6:	463b      	mov	r3, r7
 800eab8:	f7f1 fbb2 	bl	8000220 <__aeabi_dsub>
 800eabc:	a340      	add	r3, pc, #256	@ (adr r3, 800ebc0 <__ieee754_rem_pio2+0x300>)
 800eabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac2:	4606      	mov	r6, r0
 800eac4:	460f      	mov	r7, r1
 800eac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eaca:	f7f1 fd61 	bl	8000590 <__aeabi_dmul>
 800eace:	4632      	mov	r2, r6
 800ead0:	463b      	mov	r3, r7
 800ead2:	f7f1 fba5 	bl	8000220 <__aeabi_dsub>
 800ead6:	4602      	mov	r2, r0
 800ead8:	460b      	mov	r3, r1
 800eada:	4606      	mov	r6, r0
 800eadc:	460f      	mov	r7, r1
 800eade:	4640      	mov	r0, r8
 800eae0:	4649      	mov	r1, r9
 800eae2:	f7f1 fb9d 	bl	8000220 <__aeabi_dsub>
 800eae6:	9a05      	ldr	r2, [sp, #20]
 800eae8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eaec:	1ad3      	subs	r3, r2, r3
 800eaee:	2b31      	cmp	r3, #49	@ 0x31
 800eaf0:	dc20      	bgt.n	800eb34 <__ieee754_rem_pio2+0x274>
 800eaf2:	e9c4 0100 	strd	r0, r1, [r4]
 800eaf6:	46c2      	mov	sl, r8
 800eaf8:	46cb      	mov	fp, r9
 800eafa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800eafe:	4650      	mov	r0, sl
 800eb00:	4642      	mov	r2, r8
 800eb02:	464b      	mov	r3, r9
 800eb04:	4659      	mov	r1, fp
 800eb06:	f7f1 fb8b 	bl	8000220 <__aeabi_dsub>
 800eb0a:	463b      	mov	r3, r7
 800eb0c:	4632      	mov	r2, r6
 800eb0e:	f7f1 fb87 	bl	8000220 <__aeabi_dsub>
 800eb12:	9b04      	ldr	r3, [sp, #16]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eb1a:	f6bf af0e 	bge.w	800e93a <__ieee754_rem_pio2+0x7a>
 800eb1e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800eb22:	6063      	str	r3, [r4, #4]
 800eb24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eb28:	f8c4 8000 	str.w	r8, [r4]
 800eb2c:	60a0      	str	r0, [r4, #8]
 800eb2e:	60e3      	str	r3, [r4, #12]
 800eb30:	426d      	negs	r5, r5
 800eb32:	e702      	b.n	800e93a <__ieee754_rem_pio2+0x7a>
 800eb34:	a326      	add	r3, pc, #152	@ (adr r3, 800ebd0 <__ieee754_rem_pio2+0x310>)
 800eb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb3e:	f7f1 fd27 	bl	8000590 <__aeabi_dmul>
 800eb42:	4606      	mov	r6, r0
 800eb44:	460f      	mov	r7, r1
 800eb46:	4602      	mov	r2, r0
 800eb48:	460b      	mov	r3, r1
 800eb4a:	4640      	mov	r0, r8
 800eb4c:	4649      	mov	r1, r9
 800eb4e:	f7f1 fb67 	bl	8000220 <__aeabi_dsub>
 800eb52:	4602      	mov	r2, r0
 800eb54:	460b      	mov	r3, r1
 800eb56:	4682      	mov	sl, r0
 800eb58:	468b      	mov	fp, r1
 800eb5a:	4640      	mov	r0, r8
 800eb5c:	4649      	mov	r1, r9
 800eb5e:	f7f1 fb5f 	bl	8000220 <__aeabi_dsub>
 800eb62:	4632      	mov	r2, r6
 800eb64:	463b      	mov	r3, r7
 800eb66:	f7f1 fb5b 	bl	8000220 <__aeabi_dsub>
 800eb6a:	a31b      	add	r3, pc, #108	@ (adr r3, 800ebd8 <__ieee754_rem_pio2+0x318>)
 800eb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb70:	4606      	mov	r6, r0
 800eb72:	460f      	mov	r7, r1
 800eb74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800eb78:	f7f1 fd0a 	bl	8000590 <__aeabi_dmul>
 800eb7c:	4632      	mov	r2, r6
 800eb7e:	463b      	mov	r3, r7
 800eb80:	f7f1 fb4e 	bl	8000220 <__aeabi_dsub>
 800eb84:	4606      	mov	r6, r0
 800eb86:	460f      	mov	r7, r1
 800eb88:	e764      	b.n	800ea54 <__ieee754_rem_pio2+0x194>
 800eb8a:	4b1b      	ldr	r3, [pc, #108]	@ (800ebf8 <__ieee754_rem_pio2+0x338>)
 800eb8c:	4598      	cmp	r8, r3
 800eb8e:	d935      	bls.n	800ebfc <__ieee754_rem_pio2+0x33c>
 800eb90:	4632      	mov	r2, r6
 800eb92:	463b      	mov	r3, r7
 800eb94:	4630      	mov	r0, r6
 800eb96:	4639      	mov	r1, r7
 800eb98:	f7f1 fb42 	bl	8000220 <__aeabi_dsub>
 800eb9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800eba0:	e9c4 0100 	strd	r0, r1, [r4]
 800eba4:	e69e      	b.n	800e8e4 <__ieee754_rem_pio2+0x24>
 800eba6:	bf00      	nop
 800eba8:	54400000 	.word	0x54400000
 800ebac:	3ff921fb 	.word	0x3ff921fb
 800ebb0:	1a626331 	.word	0x1a626331
 800ebb4:	3dd0b461 	.word	0x3dd0b461
 800ebb8:	1a600000 	.word	0x1a600000
 800ebbc:	3dd0b461 	.word	0x3dd0b461
 800ebc0:	2e037073 	.word	0x2e037073
 800ebc4:	3ba3198a 	.word	0x3ba3198a
 800ebc8:	6dc9c883 	.word	0x6dc9c883
 800ebcc:	3fe45f30 	.word	0x3fe45f30
 800ebd0:	2e000000 	.word	0x2e000000
 800ebd4:	3ba3198a 	.word	0x3ba3198a
 800ebd8:	252049c1 	.word	0x252049c1
 800ebdc:	397b839a 	.word	0x397b839a
 800ebe0:	3fe921fb 	.word	0x3fe921fb
 800ebe4:	4002d97b 	.word	0x4002d97b
 800ebe8:	3ff921fb 	.word	0x3ff921fb
 800ebec:	413921fb 	.word	0x413921fb
 800ebf0:	3fe00000 	.word	0x3fe00000
 800ebf4:	080100e0 	.word	0x080100e0
 800ebf8:	7fefffff 	.word	0x7fefffff
 800ebfc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ec00:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800ec04:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ec08:	4630      	mov	r0, r6
 800ec0a:	460f      	mov	r7, r1
 800ec0c:	f7f1 ff5a 	bl	8000ac4 <__aeabi_d2iz>
 800ec10:	f7f1 fc54 	bl	80004bc <__aeabi_i2d>
 800ec14:	4602      	mov	r2, r0
 800ec16:	460b      	mov	r3, r1
 800ec18:	4630      	mov	r0, r6
 800ec1a:	4639      	mov	r1, r7
 800ec1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ec20:	f7f1 fafe 	bl	8000220 <__aeabi_dsub>
 800ec24:	4b22      	ldr	r3, [pc, #136]	@ (800ecb0 <__ieee754_rem_pio2+0x3f0>)
 800ec26:	2200      	movs	r2, #0
 800ec28:	f7f1 fcb2 	bl	8000590 <__aeabi_dmul>
 800ec2c:	460f      	mov	r7, r1
 800ec2e:	4606      	mov	r6, r0
 800ec30:	f7f1 ff48 	bl	8000ac4 <__aeabi_d2iz>
 800ec34:	f7f1 fc42 	bl	80004bc <__aeabi_i2d>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	4639      	mov	r1, r7
 800ec40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ec44:	f7f1 faec 	bl	8000220 <__aeabi_dsub>
 800ec48:	4b19      	ldr	r3, [pc, #100]	@ (800ecb0 <__ieee754_rem_pio2+0x3f0>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	f7f1 fca0 	bl	8000590 <__aeabi_dmul>
 800ec50:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800ec54:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800ec58:	f04f 0803 	mov.w	r8, #3
 800ec5c:	2600      	movs	r6, #0
 800ec5e:	2700      	movs	r7, #0
 800ec60:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ec64:	4632      	mov	r2, r6
 800ec66:	463b      	mov	r3, r7
 800ec68:	46c2      	mov	sl, r8
 800ec6a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ec6e:	f7f1 fef7 	bl	8000a60 <__aeabi_dcmpeq>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d1f4      	bne.n	800ec60 <__ieee754_rem_pio2+0x3a0>
 800ec76:	4b0f      	ldr	r3, [pc, #60]	@ (800ecb4 <__ieee754_rem_pio2+0x3f4>)
 800ec78:	9301      	str	r3, [sp, #4]
 800ec7a:	2302      	movs	r3, #2
 800ec7c:	9300      	str	r3, [sp, #0]
 800ec7e:	462a      	mov	r2, r5
 800ec80:	4653      	mov	r3, sl
 800ec82:	4621      	mov	r1, r4
 800ec84:	a806      	add	r0, sp, #24
 800ec86:	f000 fb5b 	bl	800f340 <__kernel_rem_pio2>
 800ec8a:	9b04      	ldr	r3, [sp, #16]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	4605      	mov	r5, r0
 800ec90:	f6bf ae53 	bge.w	800e93a <__ieee754_rem_pio2+0x7a>
 800ec94:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ec98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ec9c:	e9c4 2300 	strd	r2, r3, [r4]
 800eca0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800eca4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800eca8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ecac:	e740      	b.n	800eb30 <__ieee754_rem_pio2+0x270>
 800ecae:	bf00      	nop
 800ecb0:	41700000 	.word	0x41700000
 800ecb4:	08010160 	.word	0x08010160

0800ecb8 <fabs>:
 800ecb8:	ec51 0b10 	vmov	r0, r1, d0
 800ecbc:	4602      	mov	r2, r0
 800ecbe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ecc2:	ec43 2b10 	vmov	d0, r2, r3
 800ecc6:	4770      	bx	lr

0800ecc8 <__kernel_cosf>:
 800ecc8:	ee10 3a10 	vmov	r3, s0
 800eccc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ecd0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ecd4:	eef0 6a40 	vmov.f32	s13, s0
 800ecd8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800ecdc:	d204      	bcs.n	800ece8 <__kernel_cosf+0x20>
 800ecde:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800ece2:	ee17 2a90 	vmov	r2, s15
 800ece6:	b342      	cbz	r2, 800ed3a <__kernel_cosf+0x72>
 800ece8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ecec:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ed58 <__kernel_cosf+0x90>
 800ecf0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ed5c <__kernel_cosf+0x94>
 800ecf4:	4a1a      	ldr	r2, [pc, #104]	@ (800ed60 <__kernel_cosf+0x98>)
 800ecf6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ed64 <__kernel_cosf+0x9c>
 800ed00:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ed04:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ed68 <__kernel_cosf+0xa0>
 800ed08:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ed0c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ed6c <__kernel_cosf+0xa4>
 800ed10:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ed14:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ed70 <__kernel_cosf+0xa8>
 800ed18:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ed1c:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ed20:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ed24:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ed28:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ed2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ed30:	d804      	bhi.n	800ed3c <__kernel_cosf+0x74>
 800ed32:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ed36:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ed3a:	4770      	bx	lr
 800ed3c:	4a0d      	ldr	r2, [pc, #52]	@ (800ed74 <__kernel_cosf+0xac>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	bf9a      	itte	ls
 800ed42:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ed46:	ee07 3a10 	vmovls	s14, r3
 800ed4a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ed4e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ed52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ed56:	e7ec      	b.n	800ed32 <__kernel_cosf+0x6a>
 800ed58:	ad47d74e 	.word	0xad47d74e
 800ed5c:	310f74f6 	.word	0x310f74f6
 800ed60:	3e999999 	.word	0x3e999999
 800ed64:	b493f27c 	.word	0xb493f27c
 800ed68:	37d00d01 	.word	0x37d00d01
 800ed6c:	bab60b61 	.word	0xbab60b61
 800ed70:	3d2aaaab 	.word	0x3d2aaaab
 800ed74:	3f480000 	.word	0x3f480000

0800ed78 <__kernel_sinf>:
 800ed78:	ee10 3a10 	vmov	r3, s0
 800ed7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ed80:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ed84:	d204      	bcs.n	800ed90 <__kernel_sinf+0x18>
 800ed86:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ed8a:	ee17 3a90 	vmov	r3, s15
 800ed8e:	b35b      	cbz	r3, 800ede8 <__kernel_sinf+0x70>
 800ed90:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ed94:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800edec <__kernel_sinf+0x74>
 800ed98:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800edf0 <__kernel_sinf+0x78>
 800ed9c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800eda0:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800edf4 <__kernel_sinf+0x7c>
 800eda4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800eda8:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800edf8 <__kernel_sinf+0x80>
 800edac:	eea7 6a87 	vfma.f32	s12, s15, s14
 800edb0:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800edfc <__kernel_sinf+0x84>
 800edb4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800edb8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800edbc:	b930      	cbnz	r0, 800edcc <__kernel_sinf+0x54>
 800edbe:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800ee00 <__kernel_sinf+0x88>
 800edc2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800edc6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800edca:	4770      	bx	lr
 800edcc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800edd0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800edd4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800edd8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800eddc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800ee04 <__kernel_sinf+0x8c>
 800ede0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800ede4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop
 800edec:	2f2ec9d3 	.word	0x2f2ec9d3
 800edf0:	b2d72f34 	.word	0xb2d72f34
 800edf4:	3638ef1b 	.word	0x3638ef1b
 800edf8:	b9500d01 	.word	0xb9500d01
 800edfc:	3c088889 	.word	0x3c088889
 800ee00:	be2aaaab 	.word	0xbe2aaaab
 800ee04:	3e2aaaab 	.word	0x3e2aaaab

0800ee08 <__ieee754_fmodf>:
 800ee08:	b570      	push	{r4, r5, r6, lr}
 800ee0a:	ee10 6a90 	vmov	r6, s1
 800ee0e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ee12:	1e5a      	subs	r2, r3, #1
 800ee14:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800ee18:	d206      	bcs.n	800ee28 <__ieee754_fmodf+0x20>
 800ee1a:	ee10 4a10 	vmov	r4, s0
 800ee1e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800ee22:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800ee26:	d304      	bcc.n	800ee32 <__ieee754_fmodf+0x2a>
 800ee28:	ee60 0a20 	vmul.f32	s1, s0, s1
 800ee2c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800ee30:	bd70      	pop	{r4, r5, r6, pc}
 800ee32:	4299      	cmp	r1, r3
 800ee34:	dbfc      	blt.n	800ee30 <__ieee754_fmodf+0x28>
 800ee36:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800ee3a:	d105      	bne.n	800ee48 <__ieee754_fmodf+0x40>
 800ee3c:	4b32      	ldr	r3, [pc, #200]	@ (800ef08 <__ieee754_fmodf+0x100>)
 800ee3e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800ee42:	ed93 0a00 	vldr	s0, [r3]
 800ee46:	e7f3      	b.n	800ee30 <__ieee754_fmodf+0x28>
 800ee48:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800ee4c:	d146      	bne.n	800eedc <__ieee754_fmodf+0xd4>
 800ee4e:	020a      	lsls	r2, r1, #8
 800ee50:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800ee54:	2a00      	cmp	r2, #0
 800ee56:	dc3e      	bgt.n	800eed6 <__ieee754_fmodf+0xce>
 800ee58:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800ee5c:	bf01      	itttt	eq
 800ee5e:	021a      	lsleq	r2, r3, #8
 800ee60:	fab2 f282 	clzeq	r2, r2
 800ee64:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800ee68:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800ee6c:	bf16      	itet	ne
 800ee6e:	15da      	asrne	r2, r3, #23
 800ee70:	3282      	addeq	r2, #130	@ 0x82
 800ee72:	3a7f      	subne	r2, #127	@ 0x7f
 800ee74:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800ee78:	bfbb      	ittet	lt
 800ee7a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800ee7e:	1a24      	sublt	r4, r4, r0
 800ee80:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800ee84:	40a1      	lsllt	r1, r4
 800ee86:	bfa8      	it	ge
 800ee88:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800ee8c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800ee90:	bfb5      	itete	lt
 800ee92:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800ee96:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800ee9a:	1aa4      	sublt	r4, r4, r2
 800ee9c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800eea0:	bfb8      	it	lt
 800eea2:	fa03 f404 	lsllt.w	r4, r3, r4
 800eea6:	1a80      	subs	r0, r0, r2
 800eea8:	1b0b      	subs	r3, r1, r4
 800eeaa:	b9d0      	cbnz	r0, 800eee2 <__ieee754_fmodf+0xda>
 800eeac:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800eeb0:	bf28      	it	cs
 800eeb2:	460b      	movcs	r3, r1
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d0c1      	beq.n	800ee3c <__ieee754_fmodf+0x34>
 800eeb8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800eebc:	db19      	blt.n	800eef2 <__ieee754_fmodf+0xea>
 800eebe:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800eec2:	db19      	blt.n	800eef8 <__ieee754_fmodf+0xf0>
 800eec4:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800eec8:	327f      	adds	r2, #127	@ 0x7f
 800eeca:	432b      	orrs	r3, r5
 800eecc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800eed0:	ee00 3a10 	vmov	s0, r3
 800eed4:	e7ac      	b.n	800ee30 <__ieee754_fmodf+0x28>
 800eed6:	3801      	subs	r0, #1
 800eed8:	0052      	lsls	r2, r2, #1
 800eeda:	e7bb      	b.n	800ee54 <__ieee754_fmodf+0x4c>
 800eedc:	15c8      	asrs	r0, r1, #23
 800eede:	387f      	subs	r0, #127	@ 0x7f
 800eee0:	e7ba      	b.n	800ee58 <__ieee754_fmodf+0x50>
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	da02      	bge.n	800eeec <__ieee754_fmodf+0xe4>
 800eee6:	0049      	lsls	r1, r1, #1
 800eee8:	3801      	subs	r0, #1
 800eeea:	e7dd      	b.n	800eea8 <__ieee754_fmodf+0xa0>
 800eeec:	d0a6      	beq.n	800ee3c <__ieee754_fmodf+0x34>
 800eeee:	0059      	lsls	r1, r3, #1
 800eef0:	e7fa      	b.n	800eee8 <__ieee754_fmodf+0xe0>
 800eef2:	005b      	lsls	r3, r3, #1
 800eef4:	3a01      	subs	r2, #1
 800eef6:	e7df      	b.n	800eeb8 <__ieee754_fmodf+0xb0>
 800eef8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800eefc:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800ef00:	3282      	adds	r2, #130	@ 0x82
 800ef02:	4113      	asrs	r3, r2
 800ef04:	432b      	orrs	r3, r5
 800ef06:	e7e3      	b.n	800eed0 <__ieee754_fmodf+0xc8>
 800ef08:	08010268 	.word	0x08010268

0800ef0c <__ieee754_rem_pio2f>:
 800ef0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef0e:	ee10 6a10 	vmov	r6, s0
 800ef12:	4b88      	ldr	r3, [pc, #544]	@ (800f134 <__ieee754_rem_pio2f+0x228>)
 800ef14:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800ef18:	429d      	cmp	r5, r3
 800ef1a:	b087      	sub	sp, #28
 800ef1c:	4604      	mov	r4, r0
 800ef1e:	d805      	bhi.n	800ef2c <__ieee754_rem_pio2f+0x20>
 800ef20:	2300      	movs	r3, #0
 800ef22:	ed80 0a00 	vstr	s0, [r0]
 800ef26:	6043      	str	r3, [r0, #4]
 800ef28:	2000      	movs	r0, #0
 800ef2a:	e022      	b.n	800ef72 <__ieee754_rem_pio2f+0x66>
 800ef2c:	4b82      	ldr	r3, [pc, #520]	@ (800f138 <__ieee754_rem_pio2f+0x22c>)
 800ef2e:	429d      	cmp	r5, r3
 800ef30:	d83a      	bhi.n	800efa8 <__ieee754_rem_pio2f+0x9c>
 800ef32:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ef36:	2e00      	cmp	r6, #0
 800ef38:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800f13c <__ieee754_rem_pio2f+0x230>
 800ef3c:	4a80      	ldr	r2, [pc, #512]	@ (800f140 <__ieee754_rem_pio2f+0x234>)
 800ef3e:	f023 030f 	bic.w	r3, r3, #15
 800ef42:	dd18      	ble.n	800ef76 <__ieee754_rem_pio2f+0x6a>
 800ef44:	4293      	cmp	r3, r2
 800ef46:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ef4a:	bf09      	itett	eq
 800ef4c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800f144 <__ieee754_rem_pio2f+0x238>
 800ef50:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800f148 <__ieee754_rem_pio2f+0x23c>
 800ef54:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800f14c <__ieee754_rem_pio2f+0x240>
 800ef58:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800ef5c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800ef60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef64:	ed80 7a00 	vstr	s14, [r0]
 800ef68:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ef6c:	edc0 7a01 	vstr	s15, [r0, #4]
 800ef70:	2001      	movs	r0, #1
 800ef72:	b007      	add	sp, #28
 800ef74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef76:	4293      	cmp	r3, r2
 800ef78:	ee70 7a07 	vadd.f32	s15, s0, s14
 800ef7c:	bf09      	itett	eq
 800ef7e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800f144 <__ieee754_rem_pio2f+0x238>
 800ef82:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800f148 <__ieee754_rem_pio2f+0x23c>
 800ef86:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800f14c <__ieee754_rem_pio2f+0x240>
 800ef8a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800ef8e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800ef92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ef96:	ed80 7a00 	vstr	s14, [r0]
 800ef9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ef9e:	edc0 7a01 	vstr	s15, [r0, #4]
 800efa2:	f04f 30ff 	mov.w	r0, #4294967295
 800efa6:	e7e4      	b.n	800ef72 <__ieee754_rem_pio2f+0x66>
 800efa8:	4b69      	ldr	r3, [pc, #420]	@ (800f150 <__ieee754_rem_pio2f+0x244>)
 800efaa:	429d      	cmp	r5, r3
 800efac:	d873      	bhi.n	800f096 <__ieee754_rem_pio2f+0x18a>
 800efae:	f000 f8dd 	bl	800f16c <fabsf>
 800efb2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800f154 <__ieee754_rem_pio2f+0x248>
 800efb6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800efba:	eee0 7a07 	vfma.f32	s15, s0, s14
 800efbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800efc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800efc6:	ee17 0a90 	vmov	r0, s15
 800efca:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f13c <__ieee754_rem_pio2f+0x230>
 800efce:	eea7 0a67 	vfms.f32	s0, s14, s15
 800efd2:	281f      	cmp	r0, #31
 800efd4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800f148 <__ieee754_rem_pio2f+0x23c>
 800efd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800efdc:	eeb1 6a47 	vneg.f32	s12, s14
 800efe0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800efe4:	ee16 1a90 	vmov	r1, s13
 800efe8:	dc09      	bgt.n	800effe <__ieee754_rem_pio2f+0xf2>
 800efea:	4a5b      	ldr	r2, [pc, #364]	@ (800f158 <__ieee754_rem_pio2f+0x24c>)
 800efec:	1e47      	subs	r7, r0, #1
 800efee:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800eff2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800eff6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800effa:	4293      	cmp	r3, r2
 800effc:	d107      	bne.n	800f00e <__ieee754_rem_pio2f+0x102>
 800effe:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f002:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f006:	2a08      	cmp	r2, #8
 800f008:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f00c:	dc14      	bgt.n	800f038 <__ieee754_rem_pio2f+0x12c>
 800f00e:	6021      	str	r1, [r4, #0]
 800f010:	ed94 7a00 	vldr	s14, [r4]
 800f014:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f018:	2e00      	cmp	r6, #0
 800f01a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f01e:	ed84 0a01 	vstr	s0, [r4, #4]
 800f022:	daa6      	bge.n	800ef72 <__ieee754_rem_pio2f+0x66>
 800f024:	eeb1 7a47 	vneg.f32	s14, s14
 800f028:	eeb1 0a40 	vneg.f32	s0, s0
 800f02c:	ed84 7a00 	vstr	s14, [r4]
 800f030:	ed84 0a01 	vstr	s0, [r4, #4]
 800f034:	4240      	negs	r0, r0
 800f036:	e79c      	b.n	800ef72 <__ieee754_rem_pio2f+0x66>
 800f038:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800f144 <__ieee754_rem_pio2f+0x238>
 800f03c:	eef0 6a40 	vmov.f32	s13, s0
 800f040:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f044:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f048:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f04c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800f14c <__ieee754_rem_pio2f+0x240>
 800f050:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f054:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f058:	ee15 2a90 	vmov	r2, s11
 800f05c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f060:	1a5b      	subs	r3, r3, r1
 800f062:	2b19      	cmp	r3, #25
 800f064:	dc04      	bgt.n	800f070 <__ieee754_rem_pio2f+0x164>
 800f066:	edc4 5a00 	vstr	s11, [r4]
 800f06a:	eeb0 0a66 	vmov.f32	s0, s13
 800f06e:	e7cf      	b.n	800f010 <__ieee754_rem_pio2f+0x104>
 800f070:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800f15c <__ieee754_rem_pio2f+0x250>
 800f074:	eeb0 0a66 	vmov.f32	s0, s13
 800f078:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f07c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f080:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800f160 <__ieee754_rem_pio2f+0x254>
 800f084:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f088:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f08c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f090:	ed84 7a00 	vstr	s14, [r4]
 800f094:	e7bc      	b.n	800f010 <__ieee754_rem_pio2f+0x104>
 800f096:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800f09a:	d306      	bcc.n	800f0aa <__ieee754_rem_pio2f+0x19e>
 800f09c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f0a0:	edc0 7a01 	vstr	s15, [r0, #4]
 800f0a4:	edc0 7a00 	vstr	s15, [r0]
 800f0a8:	e73e      	b.n	800ef28 <__ieee754_rem_pio2f+0x1c>
 800f0aa:	15ea      	asrs	r2, r5, #23
 800f0ac:	3a86      	subs	r2, #134	@ 0x86
 800f0ae:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f0b2:	ee07 3a90 	vmov	s15, r3
 800f0b6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f0ba:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800f164 <__ieee754_rem_pio2f+0x258>
 800f0be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f0c6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f0ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f0ce:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f0d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f0d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f0da:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f0de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f0e2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ea:	edcd 7a05 	vstr	s15, [sp, #20]
 800f0ee:	d11e      	bne.n	800f12e <__ieee754_rem_pio2f+0x222>
 800f0f0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f0f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f8:	bf0c      	ite	eq
 800f0fa:	2301      	moveq	r3, #1
 800f0fc:	2302      	movne	r3, #2
 800f0fe:	491a      	ldr	r1, [pc, #104]	@ (800f168 <__ieee754_rem_pio2f+0x25c>)
 800f100:	9101      	str	r1, [sp, #4]
 800f102:	2102      	movs	r1, #2
 800f104:	9100      	str	r1, [sp, #0]
 800f106:	a803      	add	r0, sp, #12
 800f108:	4621      	mov	r1, r4
 800f10a:	f000 fc69 	bl	800f9e0 <__kernel_rem_pio2f>
 800f10e:	2e00      	cmp	r6, #0
 800f110:	f6bf af2f 	bge.w	800ef72 <__ieee754_rem_pio2f+0x66>
 800f114:	edd4 7a00 	vldr	s15, [r4]
 800f118:	eef1 7a67 	vneg.f32	s15, s15
 800f11c:	edc4 7a00 	vstr	s15, [r4]
 800f120:	edd4 7a01 	vldr	s15, [r4, #4]
 800f124:	eef1 7a67 	vneg.f32	s15, s15
 800f128:	edc4 7a01 	vstr	s15, [r4, #4]
 800f12c:	e782      	b.n	800f034 <__ieee754_rem_pio2f+0x128>
 800f12e:	2303      	movs	r3, #3
 800f130:	e7e5      	b.n	800f0fe <__ieee754_rem_pio2f+0x1f2>
 800f132:	bf00      	nop
 800f134:	3f490fd8 	.word	0x3f490fd8
 800f138:	4016cbe3 	.word	0x4016cbe3
 800f13c:	3fc90f80 	.word	0x3fc90f80
 800f140:	3fc90fd0 	.word	0x3fc90fd0
 800f144:	37354400 	.word	0x37354400
 800f148:	37354443 	.word	0x37354443
 800f14c:	2e85a308 	.word	0x2e85a308
 800f150:	43490f80 	.word	0x43490f80
 800f154:	3f22f984 	.word	0x3f22f984
 800f158:	08010270 	.word	0x08010270
 800f15c:	2e85a300 	.word	0x2e85a300
 800f160:	248d3132 	.word	0x248d3132
 800f164:	43800000 	.word	0x43800000
 800f168:	080102f0 	.word	0x080102f0

0800f16c <fabsf>:
 800f16c:	ee10 3a10 	vmov	r3, s0
 800f170:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f174:	ee00 3a10 	vmov	s0, r3
 800f178:	4770      	bx	lr
 800f17a:	0000      	movs	r0, r0
 800f17c:	0000      	movs	r0, r0
	...

0800f180 <scalbn>:
 800f180:	b570      	push	{r4, r5, r6, lr}
 800f182:	ec55 4b10 	vmov	r4, r5, d0
 800f186:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f18a:	4606      	mov	r6, r0
 800f18c:	462b      	mov	r3, r5
 800f18e:	b991      	cbnz	r1, 800f1b6 <scalbn+0x36>
 800f190:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f194:	4323      	orrs	r3, r4
 800f196:	d03b      	beq.n	800f210 <scalbn+0x90>
 800f198:	4b33      	ldr	r3, [pc, #204]	@ (800f268 <scalbn+0xe8>)
 800f19a:	4620      	mov	r0, r4
 800f19c:	4629      	mov	r1, r5
 800f19e:	2200      	movs	r2, #0
 800f1a0:	f7f1 f9f6 	bl	8000590 <__aeabi_dmul>
 800f1a4:	4b31      	ldr	r3, [pc, #196]	@ (800f26c <scalbn+0xec>)
 800f1a6:	429e      	cmp	r6, r3
 800f1a8:	4604      	mov	r4, r0
 800f1aa:	460d      	mov	r5, r1
 800f1ac:	da0f      	bge.n	800f1ce <scalbn+0x4e>
 800f1ae:	a326      	add	r3, pc, #152	@ (adr r3, 800f248 <scalbn+0xc8>)
 800f1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b4:	e01e      	b.n	800f1f4 <scalbn+0x74>
 800f1b6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f1ba:	4291      	cmp	r1, r2
 800f1bc:	d10b      	bne.n	800f1d6 <scalbn+0x56>
 800f1be:	4622      	mov	r2, r4
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	4629      	mov	r1, r5
 800f1c4:	f7f1 f82e 	bl	8000224 <__adddf3>
 800f1c8:	4604      	mov	r4, r0
 800f1ca:	460d      	mov	r5, r1
 800f1cc:	e020      	b.n	800f210 <scalbn+0x90>
 800f1ce:	460b      	mov	r3, r1
 800f1d0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f1d4:	3936      	subs	r1, #54	@ 0x36
 800f1d6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f1da:	4296      	cmp	r6, r2
 800f1dc:	dd0d      	ble.n	800f1fa <scalbn+0x7a>
 800f1de:	2d00      	cmp	r5, #0
 800f1e0:	a11b      	add	r1, pc, #108	@ (adr r1, 800f250 <scalbn+0xd0>)
 800f1e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1e6:	da02      	bge.n	800f1ee <scalbn+0x6e>
 800f1e8:	a11b      	add	r1, pc, #108	@ (adr r1, 800f258 <scalbn+0xd8>)
 800f1ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1ee:	a318      	add	r3, pc, #96	@ (adr r3, 800f250 <scalbn+0xd0>)
 800f1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f4:	f7f1 f9cc 	bl	8000590 <__aeabi_dmul>
 800f1f8:	e7e6      	b.n	800f1c8 <scalbn+0x48>
 800f1fa:	1872      	adds	r2, r6, r1
 800f1fc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f200:	428a      	cmp	r2, r1
 800f202:	dcec      	bgt.n	800f1de <scalbn+0x5e>
 800f204:	2a00      	cmp	r2, #0
 800f206:	dd06      	ble.n	800f216 <scalbn+0x96>
 800f208:	f36f 531e 	bfc	r3, #20, #11
 800f20c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f210:	ec45 4b10 	vmov	d0, r4, r5
 800f214:	bd70      	pop	{r4, r5, r6, pc}
 800f216:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f21a:	da08      	bge.n	800f22e <scalbn+0xae>
 800f21c:	2d00      	cmp	r5, #0
 800f21e:	a10a      	add	r1, pc, #40	@ (adr r1, 800f248 <scalbn+0xc8>)
 800f220:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f224:	dac3      	bge.n	800f1ae <scalbn+0x2e>
 800f226:	a10e      	add	r1, pc, #56	@ (adr r1, 800f260 <scalbn+0xe0>)
 800f228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f22c:	e7bf      	b.n	800f1ae <scalbn+0x2e>
 800f22e:	3236      	adds	r2, #54	@ 0x36
 800f230:	f36f 531e 	bfc	r3, #20, #11
 800f234:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f238:	4620      	mov	r0, r4
 800f23a:	4b0d      	ldr	r3, [pc, #52]	@ (800f270 <scalbn+0xf0>)
 800f23c:	4629      	mov	r1, r5
 800f23e:	2200      	movs	r2, #0
 800f240:	e7d8      	b.n	800f1f4 <scalbn+0x74>
 800f242:	bf00      	nop
 800f244:	f3af 8000 	nop.w
 800f248:	c2f8f359 	.word	0xc2f8f359
 800f24c:	01a56e1f 	.word	0x01a56e1f
 800f250:	8800759c 	.word	0x8800759c
 800f254:	7e37e43c 	.word	0x7e37e43c
 800f258:	8800759c 	.word	0x8800759c
 800f25c:	fe37e43c 	.word	0xfe37e43c
 800f260:	c2f8f359 	.word	0xc2f8f359
 800f264:	81a56e1f 	.word	0x81a56e1f
 800f268:	43500000 	.word	0x43500000
 800f26c:	ffff3cb0 	.word	0xffff3cb0
 800f270:	3c900000 	.word	0x3c900000

0800f274 <scalbnf>:
 800f274:	ee10 3a10 	vmov	r3, s0
 800f278:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f27c:	d02b      	beq.n	800f2d6 <scalbnf+0x62>
 800f27e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f282:	d302      	bcc.n	800f28a <scalbnf+0x16>
 800f284:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f288:	4770      	bx	lr
 800f28a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800f28e:	d123      	bne.n	800f2d8 <scalbnf+0x64>
 800f290:	4b24      	ldr	r3, [pc, #144]	@ (800f324 <scalbnf+0xb0>)
 800f292:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800f328 <scalbnf+0xb4>
 800f296:	4298      	cmp	r0, r3
 800f298:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f29c:	db17      	blt.n	800f2ce <scalbnf+0x5a>
 800f29e:	ee10 3a10 	vmov	r3, s0
 800f2a2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f2a6:	3a19      	subs	r2, #25
 800f2a8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800f2ac:	4288      	cmp	r0, r1
 800f2ae:	dd15      	ble.n	800f2dc <scalbnf+0x68>
 800f2b0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800f32c <scalbnf+0xb8>
 800f2b4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800f330 <scalbnf+0xbc>
 800f2b8:	ee10 3a10 	vmov	r3, s0
 800f2bc:	eeb0 7a67 	vmov.f32	s14, s15
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	bfb8      	it	lt
 800f2c4:	eef0 7a66 	vmovlt.f32	s15, s13
 800f2c8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800f2cc:	4770      	bx	lr
 800f2ce:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f334 <scalbnf+0xc0>
 800f2d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800f2d6:	4770      	bx	lr
 800f2d8:	0dd2      	lsrs	r2, r2, #23
 800f2da:	e7e5      	b.n	800f2a8 <scalbnf+0x34>
 800f2dc:	4410      	add	r0, r2
 800f2de:	28fe      	cmp	r0, #254	@ 0xfe
 800f2e0:	dce6      	bgt.n	800f2b0 <scalbnf+0x3c>
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	dd06      	ble.n	800f2f4 <scalbnf+0x80>
 800f2e6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f2ea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f2ee:	ee00 3a10 	vmov	s0, r3
 800f2f2:	4770      	bx	lr
 800f2f4:	f110 0f16 	cmn.w	r0, #22
 800f2f8:	da09      	bge.n	800f30e <scalbnf+0x9a>
 800f2fa:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800f334 <scalbnf+0xc0>
 800f2fe:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800f338 <scalbnf+0xc4>
 800f302:	ee10 3a10 	vmov	r3, s0
 800f306:	eeb0 7a67 	vmov.f32	s14, s15
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	e7d9      	b.n	800f2c2 <scalbnf+0x4e>
 800f30e:	3019      	adds	r0, #25
 800f310:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f314:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800f318:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800f33c <scalbnf+0xc8>
 800f31c:	ee07 3a90 	vmov	s15, r3
 800f320:	e7d7      	b.n	800f2d2 <scalbnf+0x5e>
 800f322:	bf00      	nop
 800f324:	ffff3cb0 	.word	0xffff3cb0
 800f328:	4c000000 	.word	0x4c000000
 800f32c:	7149f2ca 	.word	0x7149f2ca
 800f330:	f149f2ca 	.word	0xf149f2ca
 800f334:	0da24260 	.word	0x0da24260
 800f338:	8da24260 	.word	0x8da24260
 800f33c:	33000000 	.word	0x33000000

0800f340 <__kernel_rem_pio2>:
 800f340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f344:	ed2d 8b02 	vpush	{d8}
 800f348:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800f34c:	f112 0f14 	cmn.w	r2, #20
 800f350:	9306      	str	r3, [sp, #24]
 800f352:	9104      	str	r1, [sp, #16]
 800f354:	4bc2      	ldr	r3, [pc, #776]	@ (800f660 <__kernel_rem_pio2+0x320>)
 800f356:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800f358:	9008      	str	r0, [sp, #32]
 800f35a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f35e:	9300      	str	r3, [sp, #0]
 800f360:	9b06      	ldr	r3, [sp, #24]
 800f362:	f103 33ff 	add.w	r3, r3, #4294967295
 800f366:	bfa8      	it	ge
 800f368:	1ed4      	subge	r4, r2, #3
 800f36a:	9305      	str	r3, [sp, #20]
 800f36c:	bfb2      	itee	lt
 800f36e:	2400      	movlt	r4, #0
 800f370:	2318      	movge	r3, #24
 800f372:	fb94 f4f3 	sdivge	r4, r4, r3
 800f376:	f06f 0317 	mvn.w	r3, #23
 800f37a:	fb04 3303 	mla	r3, r4, r3, r3
 800f37e:	eb03 0b02 	add.w	fp, r3, r2
 800f382:	9b00      	ldr	r3, [sp, #0]
 800f384:	9a05      	ldr	r2, [sp, #20]
 800f386:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 800f650 <__kernel_rem_pio2+0x310>
 800f38a:	eb03 0802 	add.w	r8, r3, r2
 800f38e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f390:	1aa7      	subs	r7, r4, r2
 800f392:	ae20      	add	r6, sp, #128	@ 0x80
 800f394:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800f398:	2500      	movs	r5, #0
 800f39a:	4545      	cmp	r5, r8
 800f39c:	dd12      	ble.n	800f3c4 <__kernel_rem_pio2+0x84>
 800f39e:	9b06      	ldr	r3, [sp, #24]
 800f3a0:	aa20      	add	r2, sp, #128	@ 0x80
 800f3a2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800f3a6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800f3aa:	2700      	movs	r7, #0
 800f3ac:	9b00      	ldr	r3, [sp, #0]
 800f3ae:	429f      	cmp	r7, r3
 800f3b0:	dc2e      	bgt.n	800f410 <__kernel_rem_pio2+0xd0>
 800f3b2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 800f650 <__kernel_rem_pio2+0x310>
 800f3b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f3ba:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f3be:	46a8      	mov	r8, r5
 800f3c0:	2600      	movs	r6, #0
 800f3c2:	e01b      	b.n	800f3fc <__kernel_rem_pio2+0xbc>
 800f3c4:	42ef      	cmn	r7, r5
 800f3c6:	d407      	bmi.n	800f3d8 <__kernel_rem_pio2+0x98>
 800f3c8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800f3cc:	f7f1 f876 	bl	80004bc <__aeabi_i2d>
 800f3d0:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f3d4:	3501      	adds	r5, #1
 800f3d6:	e7e0      	b.n	800f39a <__kernel_rem_pio2+0x5a>
 800f3d8:	ec51 0b18 	vmov	r0, r1, d8
 800f3dc:	e7f8      	b.n	800f3d0 <__kernel_rem_pio2+0x90>
 800f3de:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800f3e2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f3e6:	f7f1 f8d3 	bl	8000590 <__aeabi_dmul>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	460b      	mov	r3, r1
 800f3ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3f2:	f7f0 ff17 	bl	8000224 <__adddf3>
 800f3f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3fa:	3601      	adds	r6, #1
 800f3fc:	9b05      	ldr	r3, [sp, #20]
 800f3fe:	429e      	cmp	r6, r3
 800f400:	dded      	ble.n	800f3de <__kernel_rem_pio2+0x9e>
 800f402:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f406:	3701      	adds	r7, #1
 800f408:	ecaa 7b02 	vstmia	sl!, {d7}
 800f40c:	3508      	adds	r5, #8
 800f40e:	e7cd      	b.n	800f3ac <__kernel_rem_pio2+0x6c>
 800f410:	9b00      	ldr	r3, [sp, #0]
 800f412:	f8dd 8000 	ldr.w	r8, [sp]
 800f416:	aa0c      	add	r2, sp, #48	@ 0x30
 800f418:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f41c:	930a      	str	r3, [sp, #40]	@ 0x28
 800f41e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800f420:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f424:	9309      	str	r3, [sp, #36]	@ 0x24
 800f426:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800f42a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f42c:	ab98      	add	r3, sp, #608	@ 0x260
 800f42e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f432:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800f436:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f43a:	ac0c      	add	r4, sp, #48	@ 0x30
 800f43c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f43e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800f442:	46a1      	mov	r9, r4
 800f444:	46c2      	mov	sl, r8
 800f446:	f1ba 0f00 	cmp.w	sl, #0
 800f44a:	dc77      	bgt.n	800f53c <__kernel_rem_pio2+0x1fc>
 800f44c:	4658      	mov	r0, fp
 800f44e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f452:	f7ff fe95 	bl	800f180 <scalbn>
 800f456:	ec57 6b10 	vmov	r6, r7, d0
 800f45a:	2200      	movs	r2, #0
 800f45c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f460:	4630      	mov	r0, r6
 800f462:	4639      	mov	r1, r7
 800f464:	f7f1 f894 	bl	8000590 <__aeabi_dmul>
 800f468:	ec41 0b10 	vmov	d0, r0, r1
 800f46c:	f000 fd20 	bl	800feb0 <floor>
 800f470:	4b7c      	ldr	r3, [pc, #496]	@ (800f664 <__kernel_rem_pio2+0x324>)
 800f472:	ec51 0b10 	vmov	r0, r1, d0
 800f476:	2200      	movs	r2, #0
 800f478:	f7f1 f88a 	bl	8000590 <__aeabi_dmul>
 800f47c:	4602      	mov	r2, r0
 800f47e:	460b      	mov	r3, r1
 800f480:	4630      	mov	r0, r6
 800f482:	4639      	mov	r1, r7
 800f484:	f7f0 fecc 	bl	8000220 <__aeabi_dsub>
 800f488:	460f      	mov	r7, r1
 800f48a:	4606      	mov	r6, r0
 800f48c:	f7f1 fb1a 	bl	8000ac4 <__aeabi_d2iz>
 800f490:	9002      	str	r0, [sp, #8]
 800f492:	f7f1 f813 	bl	80004bc <__aeabi_i2d>
 800f496:	4602      	mov	r2, r0
 800f498:	460b      	mov	r3, r1
 800f49a:	4630      	mov	r0, r6
 800f49c:	4639      	mov	r1, r7
 800f49e:	f7f0 febf 	bl	8000220 <__aeabi_dsub>
 800f4a2:	f1bb 0f00 	cmp.w	fp, #0
 800f4a6:	4606      	mov	r6, r0
 800f4a8:	460f      	mov	r7, r1
 800f4aa:	dd6c      	ble.n	800f586 <__kernel_rem_pio2+0x246>
 800f4ac:	f108 31ff 	add.w	r1, r8, #4294967295
 800f4b0:	ab0c      	add	r3, sp, #48	@ 0x30
 800f4b2:	9d02      	ldr	r5, [sp, #8]
 800f4b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f4b8:	f1cb 0018 	rsb	r0, fp, #24
 800f4bc:	fa43 f200 	asr.w	r2, r3, r0
 800f4c0:	4415      	add	r5, r2
 800f4c2:	4082      	lsls	r2, r0
 800f4c4:	1a9b      	subs	r3, r3, r2
 800f4c6:	aa0c      	add	r2, sp, #48	@ 0x30
 800f4c8:	9502      	str	r5, [sp, #8]
 800f4ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800f4ce:	f1cb 0217 	rsb	r2, fp, #23
 800f4d2:	fa43 f902 	asr.w	r9, r3, r2
 800f4d6:	f1b9 0f00 	cmp.w	r9, #0
 800f4da:	dd64      	ble.n	800f5a6 <__kernel_rem_pio2+0x266>
 800f4dc:	9b02      	ldr	r3, [sp, #8]
 800f4de:	2200      	movs	r2, #0
 800f4e0:	3301      	adds	r3, #1
 800f4e2:	9302      	str	r3, [sp, #8]
 800f4e4:	4615      	mov	r5, r2
 800f4e6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800f4ea:	4590      	cmp	r8, r2
 800f4ec:	f300 80a1 	bgt.w	800f632 <__kernel_rem_pio2+0x2f2>
 800f4f0:	f1bb 0f00 	cmp.w	fp, #0
 800f4f4:	dd07      	ble.n	800f506 <__kernel_rem_pio2+0x1c6>
 800f4f6:	f1bb 0f01 	cmp.w	fp, #1
 800f4fa:	f000 80c1 	beq.w	800f680 <__kernel_rem_pio2+0x340>
 800f4fe:	f1bb 0f02 	cmp.w	fp, #2
 800f502:	f000 80c8 	beq.w	800f696 <__kernel_rem_pio2+0x356>
 800f506:	f1b9 0f02 	cmp.w	r9, #2
 800f50a:	d14c      	bne.n	800f5a6 <__kernel_rem_pio2+0x266>
 800f50c:	4632      	mov	r2, r6
 800f50e:	463b      	mov	r3, r7
 800f510:	4955      	ldr	r1, [pc, #340]	@ (800f668 <__kernel_rem_pio2+0x328>)
 800f512:	2000      	movs	r0, #0
 800f514:	f7f0 fe84 	bl	8000220 <__aeabi_dsub>
 800f518:	4606      	mov	r6, r0
 800f51a:	460f      	mov	r7, r1
 800f51c:	2d00      	cmp	r5, #0
 800f51e:	d042      	beq.n	800f5a6 <__kernel_rem_pio2+0x266>
 800f520:	4658      	mov	r0, fp
 800f522:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 800f658 <__kernel_rem_pio2+0x318>
 800f526:	f7ff fe2b 	bl	800f180 <scalbn>
 800f52a:	4630      	mov	r0, r6
 800f52c:	4639      	mov	r1, r7
 800f52e:	ec53 2b10 	vmov	r2, r3, d0
 800f532:	f7f0 fe75 	bl	8000220 <__aeabi_dsub>
 800f536:	4606      	mov	r6, r0
 800f538:	460f      	mov	r7, r1
 800f53a:	e034      	b.n	800f5a6 <__kernel_rem_pio2+0x266>
 800f53c:	4b4b      	ldr	r3, [pc, #300]	@ (800f66c <__kernel_rem_pio2+0x32c>)
 800f53e:	2200      	movs	r2, #0
 800f540:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f544:	f7f1 f824 	bl	8000590 <__aeabi_dmul>
 800f548:	f7f1 fabc 	bl	8000ac4 <__aeabi_d2iz>
 800f54c:	f7f0 ffb6 	bl	80004bc <__aeabi_i2d>
 800f550:	4b47      	ldr	r3, [pc, #284]	@ (800f670 <__kernel_rem_pio2+0x330>)
 800f552:	2200      	movs	r2, #0
 800f554:	4606      	mov	r6, r0
 800f556:	460f      	mov	r7, r1
 800f558:	f7f1 f81a 	bl	8000590 <__aeabi_dmul>
 800f55c:	4602      	mov	r2, r0
 800f55e:	460b      	mov	r3, r1
 800f560:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f564:	f7f0 fe5c 	bl	8000220 <__aeabi_dsub>
 800f568:	f7f1 faac 	bl	8000ac4 <__aeabi_d2iz>
 800f56c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f570:	f849 0b04 	str.w	r0, [r9], #4
 800f574:	4639      	mov	r1, r7
 800f576:	4630      	mov	r0, r6
 800f578:	f7f0 fe54 	bl	8000224 <__adddf3>
 800f57c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f580:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f584:	e75f      	b.n	800f446 <__kernel_rem_pio2+0x106>
 800f586:	d107      	bne.n	800f598 <__kernel_rem_pio2+0x258>
 800f588:	f108 33ff 	add.w	r3, r8, #4294967295
 800f58c:	aa0c      	add	r2, sp, #48	@ 0x30
 800f58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f592:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800f596:	e79e      	b.n	800f4d6 <__kernel_rem_pio2+0x196>
 800f598:	4b36      	ldr	r3, [pc, #216]	@ (800f674 <__kernel_rem_pio2+0x334>)
 800f59a:	2200      	movs	r2, #0
 800f59c:	f7f1 fa7e 	bl	8000a9c <__aeabi_dcmpge>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	d143      	bne.n	800f62c <__kernel_rem_pio2+0x2ec>
 800f5a4:	4681      	mov	r9, r0
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	4630      	mov	r0, r6
 800f5ac:	4639      	mov	r1, r7
 800f5ae:	f7f1 fa57 	bl	8000a60 <__aeabi_dcmpeq>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	f000 80c1 	beq.w	800f73a <__kernel_rem_pio2+0x3fa>
 800f5b8:	f108 33ff 	add.w	r3, r8, #4294967295
 800f5bc:	2200      	movs	r2, #0
 800f5be:	9900      	ldr	r1, [sp, #0]
 800f5c0:	428b      	cmp	r3, r1
 800f5c2:	da70      	bge.n	800f6a6 <__kernel_rem_pio2+0x366>
 800f5c4:	2a00      	cmp	r2, #0
 800f5c6:	f000 808b 	beq.w	800f6e0 <__kernel_rem_pio2+0x3a0>
 800f5ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800f5ce:	ab0c      	add	r3, sp, #48	@ 0x30
 800f5d0:	f1ab 0b18 	sub.w	fp, fp, #24
 800f5d4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d0f6      	beq.n	800f5ca <__kernel_rem_pio2+0x28a>
 800f5dc:	4658      	mov	r0, fp
 800f5de:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 800f658 <__kernel_rem_pio2+0x318>
 800f5e2:	f7ff fdcd 	bl	800f180 <scalbn>
 800f5e6:	f108 0301 	add.w	r3, r8, #1
 800f5ea:	00da      	lsls	r2, r3, #3
 800f5ec:	9205      	str	r2, [sp, #20]
 800f5ee:	ec55 4b10 	vmov	r4, r5, d0
 800f5f2:	aa70      	add	r2, sp, #448	@ 0x1c0
 800f5f4:	f8df b074 	ldr.w	fp, [pc, #116]	@ 800f66c <__kernel_rem_pio2+0x32c>
 800f5f8:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800f5fc:	4646      	mov	r6, r8
 800f5fe:	f04f 0a00 	mov.w	sl, #0
 800f602:	2e00      	cmp	r6, #0
 800f604:	f280 80d1 	bge.w	800f7aa <__kernel_rem_pio2+0x46a>
 800f608:	4644      	mov	r4, r8
 800f60a:	2c00      	cmp	r4, #0
 800f60c:	f2c0 80ff 	blt.w	800f80e <__kernel_rem_pio2+0x4ce>
 800f610:	4b19      	ldr	r3, [pc, #100]	@ (800f678 <__kernel_rem_pio2+0x338>)
 800f612:	461f      	mov	r7, r3
 800f614:	ab70      	add	r3, sp, #448	@ 0x1c0
 800f616:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f61a:	9306      	str	r3, [sp, #24]
 800f61c:	f04f 0a00 	mov.w	sl, #0
 800f620:	f04f 0b00 	mov.w	fp, #0
 800f624:	2600      	movs	r6, #0
 800f626:	eba8 0504 	sub.w	r5, r8, r4
 800f62a:	e0e4      	b.n	800f7f6 <__kernel_rem_pio2+0x4b6>
 800f62c:	f04f 0902 	mov.w	r9, #2
 800f630:	e754      	b.n	800f4dc <__kernel_rem_pio2+0x19c>
 800f632:	f854 3b04 	ldr.w	r3, [r4], #4
 800f636:	bb0d      	cbnz	r5, 800f67c <__kernel_rem_pio2+0x33c>
 800f638:	b123      	cbz	r3, 800f644 <__kernel_rem_pio2+0x304>
 800f63a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800f63e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f642:	2301      	movs	r3, #1
 800f644:	3201      	adds	r2, #1
 800f646:	461d      	mov	r5, r3
 800f648:	e74f      	b.n	800f4ea <__kernel_rem_pio2+0x1aa>
 800f64a:	bf00      	nop
 800f64c:	f3af 8000 	nop.w
	...
 800f65c:	3ff00000 	.word	0x3ff00000
 800f660:	08010648 	.word	0x08010648
 800f664:	40200000 	.word	0x40200000
 800f668:	3ff00000 	.word	0x3ff00000
 800f66c:	3e700000 	.word	0x3e700000
 800f670:	41700000 	.word	0x41700000
 800f674:	3fe00000 	.word	0x3fe00000
 800f678:	08010608 	.word	0x08010608
 800f67c:	1acb      	subs	r3, r1, r3
 800f67e:	e7de      	b.n	800f63e <__kernel_rem_pio2+0x2fe>
 800f680:	f108 32ff 	add.w	r2, r8, #4294967295
 800f684:	ab0c      	add	r3, sp, #48	@ 0x30
 800f686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f68a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f68e:	a90c      	add	r1, sp, #48	@ 0x30
 800f690:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f694:	e737      	b.n	800f506 <__kernel_rem_pio2+0x1c6>
 800f696:	f108 32ff 	add.w	r2, r8, #4294967295
 800f69a:	ab0c      	add	r3, sp, #48	@ 0x30
 800f69c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6a0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f6a4:	e7f3      	b.n	800f68e <__kernel_rem_pio2+0x34e>
 800f6a6:	a90c      	add	r1, sp, #48	@ 0x30
 800f6a8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f6ac:	3b01      	subs	r3, #1
 800f6ae:	430a      	orrs	r2, r1
 800f6b0:	e785      	b.n	800f5be <__kernel_rem_pio2+0x27e>
 800f6b2:	3401      	adds	r4, #1
 800f6b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f6b8:	2a00      	cmp	r2, #0
 800f6ba:	d0fa      	beq.n	800f6b2 <__kernel_rem_pio2+0x372>
 800f6bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6be:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f6c2:	eb0d 0503 	add.w	r5, sp, r3
 800f6c6:	9b06      	ldr	r3, [sp, #24]
 800f6c8:	aa20      	add	r2, sp, #128	@ 0x80
 800f6ca:	4443      	add	r3, r8
 800f6cc:	f108 0701 	add.w	r7, r8, #1
 800f6d0:	3d98      	subs	r5, #152	@ 0x98
 800f6d2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800f6d6:	4444      	add	r4, r8
 800f6d8:	42bc      	cmp	r4, r7
 800f6da:	da04      	bge.n	800f6e6 <__kernel_rem_pio2+0x3a6>
 800f6dc:	46a0      	mov	r8, r4
 800f6de:	e6a2      	b.n	800f426 <__kernel_rem_pio2+0xe6>
 800f6e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6e2:	2401      	movs	r4, #1
 800f6e4:	e7e6      	b.n	800f6b4 <__kernel_rem_pio2+0x374>
 800f6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f6e8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800f6ec:	f7f0 fee6 	bl	80004bc <__aeabi_i2d>
 800f6f0:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 800f9b0 <__kernel_rem_pio2+0x670>
 800f6f4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800f6f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f700:	46b2      	mov	sl, r6
 800f702:	f04f 0800 	mov.w	r8, #0
 800f706:	9b05      	ldr	r3, [sp, #20]
 800f708:	4598      	cmp	r8, r3
 800f70a:	dd05      	ble.n	800f718 <__kernel_rem_pio2+0x3d8>
 800f70c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f710:	3701      	adds	r7, #1
 800f712:	eca5 7b02 	vstmia	r5!, {d7}
 800f716:	e7df      	b.n	800f6d8 <__kernel_rem_pio2+0x398>
 800f718:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800f71c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800f720:	f7f0 ff36 	bl	8000590 <__aeabi_dmul>
 800f724:	4602      	mov	r2, r0
 800f726:	460b      	mov	r3, r1
 800f728:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f72c:	f7f0 fd7a 	bl	8000224 <__adddf3>
 800f730:	f108 0801 	add.w	r8, r8, #1
 800f734:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f738:	e7e5      	b.n	800f706 <__kernel_rem_pio2+0x3c6>
 800f73a:	f1cb 0000 	rsb	r0, fp, #0
 800f73e:	ec47 6b10 	vmov	d0, r6, r7
 800f742:	f7ff fd1d 	bl	800f180 <scalbn>
 800f746:	ec55 4b10 	vmov	r4, r5, d0
 800f74a:	4b9b      	ldr	r3, [pc, #620]	@ (800f9b8 <__kernel_rem_pio2+0x678>)
 800f74c:	2200      	movs	r2, #0
 800f74e:	4620      	mov	r0, r4
 800f750:	4629      	mov	r1, r5
 800f752:	f7f1 f9a3 	bl	8000a9c <__aeabi_dcmpge>
 800f756:	b300      	cbz	r0, 800f79a <__kernel_rem_pio2+0x45a>
 800f758:	4b98      	ldr	r3, [pc, #608]	@ (800f9bc <__kernel_rem_pio2+0x67c>)
 800f75a:	2200      	movs	r2, #0
 800f75c:	4620      	mov	r0, r4
 800f75e:	4629      	mov	r1, r5
 800f760:	f7f0 ff16 	bl	8000590 <__aeabi_dmul>
 800f764:	f7f1 f9ae 	bl	8000ac4 <__aeabi_d2iz>
 800f768:	4606      	mov	r6, r0
 800f76a:	f7f0 fea7 	bl	80004bc <__aeabi_i2d>
 800f76e:	4b92      	ldr	r3, [pc, #584]	@ (800f9b8 <__kernel_rem_pio2+0x678>)
 800f770:	2200      	movs	r2, #0
 800f772:	f7f0 ff0d 	bl	8000590 <__aeabi_dmul>
 800f776:	460b      	mov	r3, r1
 800f778:	4602      	mov	r2, r0
 800f77a:	4629      	mov	r1, r5
 800f77c:	4620      	mov	r0, r4
 800f77e:	f7f0 fd4f 	bl	8000220 <__aeabi_dsub>
 800f782:	f7f1 f99f 	bl	8000ac4 <__aeabi_d2iz>
 800f786:	ab0c      	add	r3, sp, #48	@ 0x30
 800f788:	f10b 0b18 	add.w	fp, fp, #24
 800f78c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f790:	f108 0801 	add.w	r8, r8, #1
 800f794:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800f798:	e720      	b.n	800f5dc <__kernel_rem_pio2+0x29c>
 800f79a:	4620      	mov	r0, r4
 800f79c:	4629      	mov	r1, r5
 800f79e:	f7f1 f991 	bl	8000ac4 <__aeabi_d2iz>
 800f7a2:	ab0c      	add	r3, sp, #48	@ 0x30
 800f7a4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800f7a8:	e718      	b.n	800f5dc <__kernel_rem_pio2+0x29c>
 800f7aa:	ab0c      	add	r3, sp, #48	@ 0x30
 800f7ac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f7b0:	f7f0 fe84 	bl	80004bc <__aeabi_i2d>
 800f7b4:	4622      	mov	r2, r4
 800f7b6:	462b      	mov	r3, r5
 800f7b8:	f7f0 feea 	bl	8000590 <__aeabi_dmul>
 800f7bc:	4652      	mov	r2, sl
 800f7be:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800f7c2:	465b      	mov	r3, fp
 800f7c4:	4620      	mov	r0, r4
 800f7c6:	4629      	mov	r1, r5
 800f7c8:	f7f0 fee2 	bl	8000590 <__aeabi_dmul>
 800f7cc:	3e01      	subs	r6, #1
 800f7ce:	4604      	mov	r4, r0
 800f7d0:	460d      	mov	r5, r1
 800f7d2:	e716      	b.n	800f602 <__kernel_rem_pio2+0x2c2>
 800f7d4:	9906      	ldr	r1, [sp, #24]
 800f7d6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800f7da:	9106      	str	r1, [sp, #24]
 800f7dc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800f7e0:	f7f0 fed6 	bl	8000590 <__aeabi_dmul>
 800f7e4:	4602      	mov	r2, r0
 800f7e6:	460b      	mov	r3, r1
 800f7e8:	4650      	mov	r0, sl
 800f7ea:	4659      	mov	r1, fp
 800f7ec:	f7f0 fd1a 	bl	8000224 <__adddf3>
 800f7f0:	3601      	adds	r6, #1
 800f7f2:	4682      	mov	sl, r0
 800f7f4:	468b      	mov	fp, r1
 800f7f6:	9b00      	ldr	r3, [sp, #0]
 800f7f8:	429e      	cmp	r6, r3
 800f7fa:	dc01      	bgt.n	800f800 <__kernel_rem_pio2+0x4c0>
 800f7fc:	42ae      	cmp	r6, r5
 800f7fe:	dde9      	ble.n	800f7d4 <__kernel_rem_pio2+0x494>
 800f800:	ab48      	add	r3, sp, #288	@ 0x120
 800f802:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f806:	e9c5 ab00 	strd	sl, fp, [r5]
 800f80a:	3c01      	subs	r4, #1
 800f80c:	e6fd      	b.n	800f60a <__kernel_rem_pio2+0x2ca>
 800f80e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f810:	2b02      	cmp	r3, #2
 800f812:	dc0b      	bgt.n	800f82c <__kernel_rem_pio2+0x4ec>
 800f814:	2b00      	cmp	r3, #0
 800f816:	dc35      	bgt.n	800f884 <__kernel_rem_pio2+0x544>
 800f818:	d059      	beq.n	800f8ce <__kernel_rem_pio2+0x58e>
 800f81a:	9b02      	ldr	r3, [sp, #8]
 800f81c:	f003 0007 	and.w	r0, r3, #7
 800f820:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800f824:	ecbd 8b02 	vpop	{d8}
 800f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800f82e:	2b03      	cmp	r3, #3
 800f830:	d1f3      	bne.n	800f81a <__kernel_rem_pio2+0x4da>
 800f832:	9b05      	ldr	r3, [sp, #20]
 800f834:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f838:	eb0d 0403 	add.w	r4, sp, r3
 800f83c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800f840:	4625      	mov	r5, r4
 800f842:	46c2      	mov	sl, r8
 800f844:	f1ba 0f00 	cmp.w	sl, #0
 800f848:	dc69      	bgt.n	800f91e <__kernel_rem_pio2+0x5de>
 800f84a:	4645      	mov	r5, r8
 800f84c:	2d01      	cmp	r5, #1
 800f84e:	f300 8087 	bgt.w	800f960 <__kernel_rem_pio2+0x620>
 800f852:	9c05      	ldr	r4, [sp, #20]
 800f854:	ab48      	add	r3, sp, #288	@ 0x120
 800f856:	441c      	add	r4, r3
 800f858:	2000      	movs	r0, #0
 800f85a:	2100      	movs	r1, #0
 800f85c:	f1b8 0f01 	cmp.w	r8, #1
 800f860:	f300 809c 	bgt.w	800f99c <__kernel_rem_pio2+0x65c>
 800f864:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 800f868:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800f86c:	f1b9 0f00 	cmp.w	r9, #0
 800f870:	f040 80a6 	bne.w	800f9c0 <__kernel_rem_pio2+0x680>
 800f874:	9b04      	ldr	r3, [sp, #16]
 800f876:	e9c3 5600 	strd	r5, r6, [r3]
 800f87a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f87e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f882:	e7ca      	b.n	800f81a <__kernel_rem_pio2+0x4da>
 800f884:	9d05      	ldr	r5, [sp, #20]
 800f886:	ab48      	add	r3, sp, #288	@ 0x120
 800f888:	441d      	add	r5, r3
 800f88a:	4644      	mov	r4, r8
 800f88c:	2000      	movs	r0, #0
 800f88e:	2100      	movs	r1, #0
 800f890:	2c00      	cmp	r4, #0
 800f892:	da35      	bge.n	800f900 <__kernel_rem_pio2+0x5c0>
 800f894:	f1b9 0f00 	cmp.w	r9, #0
 800f898:	d038      	beq.n	800f90c <__kernel_rem_pio2+0x5cc>
 800f89a:	4602      	mov	r2, r0
 800f89c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f8a0:	9c04      	ldr	r4, [sp, #16]
 800f8a2:	e9c4 2300 	strd	r2, r3, [r4]
 800f8a6:	4602      	mov	r2, r0
 800f8a8:	460b      	mov	r3, r1
 800f8aa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800f8ae:	f7f0 fcb7 	bl	8000220 <__aeabi_dsub>
 800f8b2:	ad4a      	add	r5, sp, #296	@ 0x128
 800f8b4:	2401      	movs	r4, #1
 800f8b6:	45a0      	cmp	r8, r4
 800f8b8:	da2b      	bge.n	800f912 <__kernel_rem_pio2+0x5d2>
 800f8ba:	f1b9 0f00 	cmp.w	r9, #0
 800f8be:	d002      	beq.n	800f8c6 <__kernel_rem_pio2+0x586>
 800f8c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f8c4:	4619      	mov	r1, r3
 800f8c6:	9b04      	ldr	r3, [sp, #16]
 800f8c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f8cc:	e7a5      	b.n	800f81a <__kernel_rem_pio2+0x4da>
 800f8ce:	9c05      	ldr	r4, [sp, #20]
 800f8d0:	ab48      	add	r3, sp, #288	@ 0x120
 800f8d2:	441c      	add	r4, r3
 800f8d4:	2000      	movs	r0, #0
 800f8d6:	2100      	movs	r1, #0
 800f8d8:	f1b8 0f00 	cmp.w	r8, #0
 800f8dc:	da09      	bge.n	800f8f2 <__kernel_rem_pio2+0x5b2>
 800f8de:	f1b9 0f00 	cmp.w	r9, #0
 800f8e2:	d002      	beq.n	800f8ea <__kernel_rem_pio2+0x5aa>
 800f8e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f8e8:	4619      	mov	r1, r3
 800f8ea:	9b04      	ldr	r3, [sp, #16]
 800f8ec:	e9c3 0100 	strd	r0, r1, [r3]
 800f8f0:	e793      	b.n	800f81a <__kernel_rem_pio2+0x4da>
 800f8f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f8f6:	f7f0 fc95 	bl	8000224 <__adddf3>
 800f8fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800f8fe:	e7eb      	b.n	800f8d8 <__kernel_rem_pio2+0x598>
 800f900:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800f904:	f7f0 fc8e 	bl	8000224 <__adddf3>
 800f908:	3c01      	subs	r4, #1
 800f90a:	e7c1      	b.n	800f890 <__kernel_rem_pio2+0x550>
 800f90c:	4602      	mov	r2, r0
 800f90e:	460b      	mov	r3, r1
 800f910:	e7c6      	b.n	800f8a0 <__kernel_rem_pio2+0x560>
 800f912:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f916:	f7f0 fc85 	bl	8000224 <__adddf3>
 800f91a:	3401      	adds	r4, #1
 800f91c:	e7cb      	b.n	800f8b6 <__kernel_rem_pio2+0x576>
 800f91e:	ed35 7b02 	vldmdb	r5!, {d7}
 800f922:	ed8d 7b00 	vstr	d7, [sp]
 800f926:	ed95 7b02 	vldr	d7, [r5, #8]
 800f92a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f92e:	ec53 2b17 	vmov	r2, r3, d7
 800f932:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f936:	f7f0 fc75 	bl	8000224 <__adddf3>
 800f93a:	4602      	mov	r2, r0
 800f93c:	460b      	mov	r3, r1
 800f93e:	4606      	mov	r6, r0
 800f940:	460f      	mov	r7, r1
 800f942:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f946:	f7f0 fc6b 	bl	8000220 <__aeabi_dsub>
 800f94a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f94e:	f7f0 fc69 	bl	8000224 <__adddf3>
 800f952:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f956:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800f95a:	e9c5 6700 	strd	r6, r7, [r5]
 800f95e:	e771      	b.n	800f844 <__kernel_rem_pio2+0x504>
 800f960:	ed34 7b02 	vldmdb	r4!, {d7}
 800f964:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800f968:	ec51 0b17 	vmov	r0, r1, d7
 800f96c:	4652      	mov	r2, sl
 800f96e:	465b      	mov	r3, fp
 800f970:	ed8d 7b00 	vstr	d7, [sp]
 800f974:	f7f0 fc56 	bl	8000224 <__adddf3>
 800f978:	4602      	mov	r2, r0
 800f97a:	460b      	mov	r3, r1
 800f97c:	4606      	mov	r6, r0
 800f97e:	460f      	mov	r7, r1
 800f980:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f984:	f7f0 fc4c 	bl	8000220 <__aeabi_dsub>
 800f988:	4652      	mov	r2, sl
 800f98a:	465b      	mov	r3, fp
 800f98c:	f7f0 fc4a 	bl	8000224 <__adddf3>
 800f990:	3d01      	subs	r5, #1
 800f992:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f996:	e9c4 6700 	strd	r6, r7, [r4]
 800f99a:	e757      	b.n	800f84c <__kernel_rem_pio2+0x50c>
 800f99c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f9a0:	f7f0 fc40 	bl	8000224 <__adddf3>
 800f9a4:	f108 38ff 	add.w	r8, r8, #4294967295
 800f9a8:	e758      	b.n	800f85c <__kernel_rem_pio2+0x51c>
 800f9aa:	bf00      	nop
 800f9ac:	f3af 8000 	nop.w
	...
 800f9b8:	41700000 	.word	0x41700000
 800f9bc:	3e700000 	.word	0x3e700000
 800f9c0:	9b04      	ldr	r3, [sp, #16]
 800f9c2:	9a04      	ldr	r2, [sp, #16]
 800f9c4:	601d      	str	r5, [r3, #0]
 800f9c6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 800f9ca:	605c      	str	r4, [r3, #4]
 800f9cc:	609f      	str	r7, [r3, #8]
 800f9ce:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800f9d2:	60d3      	str	r3, [r2, #12]
 800f9d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f9d8:	6110      	str	r0, [r2, #16]
 800f9da:	6153      	str	r3, [r2, #20]
 800f9dc:	e71d      	b.n	800f81a <__kernel_rem_pio2+0x4da>
 800f9de:	bf00      	nop

0800f9e0 <__kernel_rem_pio2f>:
 800f9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9e4:	ed2d 8b04 	vpush	{d8-d9}
 800f9e8:	b0d9      	sub	sp, #356	@ 0x164
 800f9ea:	4690      	mov	r8, r2
 800f9ec:	9001      	str	r0, [sp, #4]
 800f9ee:	4ab6      	ldr	r2, [pc, #728]	@ (800fcc8 <__kernel_rem_pio2f+0x2e8>)
 800f9f0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800f9f2:	f118 0f04 	cmn.w	r8, #4
 800f9f6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800f9fa:	460f      	mov	r7, r1
 800f9fc:	f103 3bff 	add.w	fp, r3, #4294967295
 800fa00:	db26      	blt.n	800fa50 <__kernel_rem_pio2f+0x70>
 800fa02:	f1b8 0203 	subs.w	r2, r8, #3
 800fa06:	bf48      	it	mi
 800fa08:	f108 0204 	addmi.w	r2, r8, #4
 800fa0c:	10d2      	asrs	r2, r2, #3
 800fa0e:	1c55      	adds	r5, r2, #1
 800fa10:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fa12:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800fcd8 <__kernel_rem_pio2f+0x2f8>
 800fa16:	00e8      	lsls	r0, r5, #3
 800fa18:	eba2 060b 	sub.w	r6, r2, fp
 800fa1c:	9002      	str	r0, [sp, #8]
 800fa1e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800fa22:	eb0a 0c0b 	add.w	ip, sl, fp
 800fa26:	ac1c      	add	r4, sp, #112	@ 0x70
 800fa28:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800fa2c:	2000      	movs	r0, #0
 800fa2e:	4560      	cmp	r0, ip
 800fa30:	dd10      	ble.n	800fa54 <__kernel_rem_pio2f+0x74>
 800fa32:	a91c      	add	r1, sp, #112	@ 0x70
 800fa34:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800fa38:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800fa3c:	2600      	movs	r6, #0
 800fa3e:	4556      	cmp	r6, sl
 800fa40:	dc24      	bgt.n	800fa8c <__kernel_rem_pio2f+0xac>
 800fa42:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fa46:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800fcd8 <__kernel_rem_pio2f+0x2f8>
 800fa4a:	4684      	mov	ip, r0
 800fa4c:	2400      	movs	r4, #0
 800fa4e:	e016      	b.n	800fa7e <__kernel_rem_pio2f+0x9e>
 800fa50:	2200      	movs	r2, #0
 800fa52:	e7dc      	b.n	800fa0e <__kernel_rem_pio2f+0x2e>
 800fa54:	42c6      	cmn	r6, r0
 800fa56:	bf5d      	ittte	pl
 800fa58:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800fa5c:	ee07 1a90 	vmovpl	s15, r1
 800fa60:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fa64:	eef0 7a47 	vmovmi.f32	s15, s14
 800fa68:	ece4 7a01 	vstmia	r4!, {s15}
 800fa6c:	3001      	adds	r0, #1
 800fa6e:	e7de      	b.n	800fa2e <__kernel_rem_pio2f+0x4e>
 800fa70:	ecfe 6a01 	vldmia	lr!, {s13}
 800fa74:	ed3c 7a01 	vldmdb	ip!, {s14}
 800fa78:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fa7c:	3401      	adds	r4, #1
 800fa7e:	455c      	cmp	r4, fp
 800fa80:	ddf6      	ble.n	800fa70 <__kernel_rem_pio2f+0x90>
 800fa82:	ece9 7a01 	vstmia	r9!, {s15}
 800fa86:	3601      	adds	r6, #1
 800fa88:	3004      	adds	r0, #4
 800fa8a:	e7d8      	b.n	800fa3e <__kernel_rem_pio2f+0x5e>
 800fa8c:	a908      	add	r1, sp, #32
 800fa8e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa92:	9104      	str	r1, [sp, #16]
 800fa94:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fa96:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800fcd4 <__kernel_rem_pio2f+0x2f4>
 800fa9a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800fcd0 <__kernel_rem_pio2f+0x2f0>
 800fa9e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800faa2:	9203      	str	r2, [sp, #12]
 800faa4:	4654      	mov	r4, sl
 800faa6:	00a2      	lsls	r2, r4, #2
 800faa8:	9205      	str	r2, [sp, #20]
 800faaa:	aa58      	add	r2, sp, #352	@ 0x160
 800faac:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800fab0:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800fab4:	a944      	add	r1, sp, #272	@ 0x110
 800fab6:	aa08      	add	r2, sp, #32
 800fab8:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800fabc:	4694      	mov	ip, r2
 800fabe:	4626      	mov	r6, r4
 800fac0:	2e00      	cmp	r6, #0
 800fac2:	dc4c      	bgt.n	800fb5e <__kernel_rem_pio2f+0x17e>
 800fac4:	4628      	mov	r0, r5
 800fac6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800faca:	f7ff fbd3 	bl	800f274 <scalbnf>
 800face:	eeb0 8a40 	vmov.f32	s16, s0
 800fad2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800fad6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fada:	f000 fa65 	bl	800ffa8 <floorf>
 800fade:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800fae2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fae6:	2d00      	cmp	r5, #0
 800fae8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800faec:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800faf0:	ee17 9a90 	vmov	r9, s15
 800faf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800faf8:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fafc:	dd41      	ble.n	800fb82 <__kernel_rem_pio2f+0x1a2>
 800fafe:	f104 3cff 	add.w	ip, r4, #4294967295
 800fb02:	a908      	add	r1, sp, #32
 800fb04:	f1c5 0e08 	rsb	lr, r5, #8
 800fb08:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800fb0c:	fa46 f00e 	asr.w	r0, r6, lr
 800fb10:	4481      	add	r9, r0
 800fb12:	fa00 f00e 	lsl.w	r0, r0, lr
 800fb16:	1a36      	subs	r6, r6, r0
 800fb18:	f1c5 0007 	rsb	r0, r5, #7
 800fb1c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800fb20:	4106      	asrs	r6, r0
 800fb22:	2e00      	cmp	r6, #0
 800fb24:	dd3c      	ble.n	800fba0 <__kernel_rem_pio2f+0x1c0>
 800fb26:	f04f 0e00 	mov.w	lr, #0
 800fb2a:	f109 0901 	add.w	r9, r9, #1
 800fb2e:	4670      	mov	r0, lr
 800fb30:	4574      	cmp	r4, lr
 800fb32:	dc68      	bgt.n	800fc06 <__kernel_rem_pio2f+0x226>
 800fb34:	2d00      	cmp	r5, #0
 800fb36:	dd03      	ble.n	800fb40 <__kernel_rem_pio2f+0x160>
 800fb38:	2d01      	cmp	r5, #1
 800fb3a:	d074      	beq.n	800fc26 <__kernel_rem_pio2f+0x246>
 800fb3c:	2d02      	cmp	r5, #2
 800fb3e:	d07d      	beq.n	800fc3c <__kernel_rem_pio2f+0x25c>
 800fb40:	2e02      	cmp	r6, #2
 800fb42:	d12d      	bne.n	800fba0 <__kernel_rem_pio2f+0x1c0>
 800fb44:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fb48:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fb4c:	b340      	cbz	r0, 800fba0 <__kernel_rem_pio2f+0x1c0>
 800fb4e:	4628      	mov	r0, r5
 800fb50:	9306      	str	r3, [sp, #24]
 800fb52:	f7ff fb8f 	bl	800f274 <scalbnf>
 800fb56:	9b06      	ldr	r3, [sp, #24]
 800fb58:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fb5c:	e020      	b.n	800fba0 <__kernel_rem_pio2f+0x1c0>
 800fb5e:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fb62:	3e01      	subs	r6, #1
 800fb64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb6c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fb70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fb74:	ecac 0a01 	vstmia	ip!, {s0}
 800fb78:	ed30 0a01 	vldmdb	r0!, {s0}
 800fb7c:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fb80:	e79e      	b.n	800fac0 <__kernel_rem_pio2f+0xe0>
 800fb82:	d105      	bne.n	800fb90 <__kernel_rem_pio2f+0x1b0>
 800fb84:	1e60      	subs	r0, r4, #1
 800fb86:	a908      	add	r1, sp, #32
 800fb88:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800fb8c:	11f6      	asrs	r6, r6, #7
 800fb8e:	e7c8      	b.n	800fb22 <__kernel_rem_pio2f+0x142>
 800fb90:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fb94:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb9c:	da31      	bge.n	800fc02 <__kernel_rem_pio2f+0x222>
 800fb9e:	2600      	movs	r6, #0
 800fba0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fba8:	f040 8098 	bne.w	800fcdc <__kernel_rem_pio2f+0x2fc>
 800fbac:	1e60      	subs	r0, r4, #1
 800fbae:	2200      	movs	r2, #0
 800fbb0:	4550      	cmp	r0, sl
 800fbb2:	da4b      	bge.n	800fc4c <__kernel_rem_pio2f+0x26c>
 800fbb4:	2a00      	cmp	r2, #0
 800fbb6:	d065      	beq.n	800fc84 <__kernel_rem_pio2f+0x2a4>
 800fbb8:	3c01      	subs	r4, #1
 800fbba:	ab08      	add	r3, sp, #32
 800fbbc:	3d08      	subs	r5, #8
 800fbbe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d0f8      	beq.n	800fbb8 <__kernel_rem_pio2f+0x1d8>
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fbcc:	f7ff fb52 	bl	800f274 <scalbnf>
 800fbd0:	1c63      	adds	r3, r4, #1
 800fbd2:	aa44      	add	r2, sp, #272	@ 0x110
 800fbd4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800fcd4 <__kernel_rem_pio2f+0x2f4>
 800fbd8:	0099      	lsls	r1, r3, #2
 800fbda:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fbde:	4623      	mov	r3, r4
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f280 80a9 	bge.w	800fd38 <__kernel_rem_pio2f+0x358>
 800fbe6:	4623      	mov	r3, r4
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	f2c0 80c7 	blt.w	800fd7c <__kernel_rem_pio2f+0x39c>
 800fbee:	aa44      	add	r2, sp, #272	@ 0x110
 800fbf0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800fbf4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800fccc <__kernel_rem_pio2f+0x2ec>
 800fbf8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800fcd8 <__kernel_rem_pio2f+0x2f8>
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	1ae2      	subs	r2, r4, r3
 800fc00:	e0b1      	b.n	800fd66 <__kernel_rem_pio2f+0x386>
 800fc02:	2602      	movs	r6, #2
 800fc04:	e78f      	b.n	800fb26 <__kernel_rem_pio2f+0x146>
 800fc06:	f852 1b04 	ldr.w	r1, [r2], #4
 800fc0a:	b948      	cbnz	r0, 800fc20 <__kernel_rem_pio2f+0x240>
 800fc0c:	b121      	cbz	r1, 800fc18 <__kernel_rem_pio2f+0x238>
 800fc0e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800fc12:	f842 1c04 	str.w	r1, [r2, #-4]
 800fc16:	2101      	movs	r1, #1
 800fc18:	f10e 0e01 	add.w	lr, lr, #1
 800fc1c:	4608      	mov	r0, r1
 800fc1e:	e787      	b.n	800fb30 <__kernel_rem_pio2f+0x150>
 800fc20:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800fc24:	e7f5      	b.n	800fc12 <__kernel_rem_pio2f+0x232>
 800fc26:	f104 3cff 	add.w	ip, r4, #4294967295
 800fc2a:	aa08      	add	r2, sp, #32
 800fc2c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fc30:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fc34:	a908      	add	r1, sp, #32
 800fc36:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800fc3a:	e781      	b.n	800fb40 <__kernel_rem_pio2f+0x160>
 800fc3c:	f104 3cff 	add.w	ip, r4, #4294967295
 800fc40:	aa08      	add	r2, sp, #32
 800fc42:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fc46:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fc4a:	e7f3      	b.n	800fc34 <__kernel_rem_pio2f+0x254>
 800fc4c:	a908      	add	r1, sp, #32
 800fc4e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fc52:	3801      	subs	r0, #1
 800fc54:	430a      	orrs	r2, r1
 800fc56:	e7ab      	b.n	800fbb0 <__kernel_rem_pio2f+0x1d0>
 800fc58:	3201      	adds	r2, #1
 800fc5a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800fc5e:	2e00      	cmp	r6, #0
 800fc60:	d0fa      	beq.n	800fc58 <__kernel_rem_pio2f+0x278>
 800fc62:	9905      	ldr	r1, [sp, #20]
 800fc64:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800fc68:	eb0d 0001 	add.w	r0, sp, r1
 800fc6c:	18e6      	adds	r6, r4, r3
 800fc6e:	a91c      	add	r1, sp, #112	@ 0x70
 800fc70:	f104 0c01 	add.w	ip, r4, #1
 800fc74:	384c      	subs	r0, #76	@ 0x4c
 800fc76:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800fc7a:	4422      	add	r2, r4
 800fc7c:	4562      	cmp	r2, ip
 800fc7e:	da04      	bge.n	800fc8a <__kernel_rem_pio2f+0x2aa>
 800fc80:	4614      	mov	r4, r2
 800fc82:	e710      	b.n	800faa6 <__kernel_rem_pio2f+0xc6>
 800fc84:	9804      	ldr	r0, [sp, #16]
 800fc86:	2201      	movs	r2, #1
 800fc88:	e7e7      	b.n	800fc5a <__kernel_rem_pio2f+0x27a>
 800fc8a:	9903      	ldr	r1, [sp, #12]
 800fc8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fc90:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800fc94:	9105      	str	r1, [sp, #20]
 800fc96:	ee07 1a90 	vmov	s15, r1
 800fc9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc9e:	2400      	movs	r4, #0
 800fca0:	ece6 7a01 	vstmia	r6!, {s15}
 800fca4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800fcd8 <__kernel_rem_pio2f+0x2f8>
 800fca8:	46b1      	mov	r9, r6
 800fcaa:	455c      	cmp	r4, fp
 800fcac:	dd04      	ble.n	800fcb8 <__kernel_rem_pio2f+0x2d8>
 800fcae:	ece0 7a01 	vstmia	r0!, {s15}
 800fcb2:	f10c 0c01 	add.w	ip, ip, #1
 800fcb6:	e7e1      	b.n	800fc7c <__kernel_rem_pio2f+0x29c>
 800fcb8:	ecfe 6a01 	vldmia	lr!, {s13}
 800fcbc:	ed39 7a01 	vldmdb	r9!, {s14}
 800fcc0:	3401      	adds	r4, #1
 800fcc2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fcc6:	e7f0      	b.n	800fcaa <__kernel_rem_pio2f+0x2ca>
 800fcc8:	08010684 	.word	0x08010684
 800fccc:	08010658 	.word	0x08010658
 800fcd0:	43800000 	.word	0x43800000
 800fcd4:	3b800000 	.word	0x3b800000
 800fcd8:	00000000 	.word	0x00000000
 800fcdc:	9b02      	ldr	r3, [sp, #8]
 800fcde:	eeb0 0a48 	vmov.f32	s0, s16
 800fce2:	eba3 0008 	sub.w	r0, r3, r8
 800fce6:	f7ff fac5 	bl	800f274 <scalbnf>
 800fcea:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800fcd0 <__kernel_rem_pio2f+0x2f0>
 800fcee:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fcf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcf6:	db19      	blt.n	800fd2c <__kernel_rem_pio2f+0x34c>
 800fcf8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800fcd4 <__kernel_rem_pio2f+0x2f4>
 800fcfc:	ee60 7a27 	vmul.f32	s15, s0, s15
 800fd00:	aa08      	add	r2, sp, #32
 800fd02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd06:	3508      	adds	r5, #8
 800fd08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd0c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800fd10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd14:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fd18:	ee10 3a10 	vmov	r3, s0
 800fd1c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fd20:	ee17 3a90 	vmov	r3, s15
 800fd24:	3401      	adds	r4, #1
 800fd26:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800fd2a:	e74c      	b.n	800fbc6 <__kernel_rem_pio2f+0x1e6>
 800fd2c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fd30:	aa08      	add	r2, sp, #32
 800fd32:	ee10 3a10 	vmov	r3, s0
 800fd36:	e7f6      	b.n	800fd26 <__kernel_rem_pio2f+0x346>
 800fd38:	a808      	add	r0, sp, #32
 800fd3a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800fd3e:	9001      	str	r0, [sp, #4]
 800fd40:	ee07 0a90 	vmov	s15, r0
 800fd44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800fd4e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fd52:	ed62 7a01 	vstmdb	r2!, {s15}
 800fd56:	e743      	b.n	800fbe0 <__kernel_rem_pio2f+0x200>
 800fd58:	ecfc 6a01 	vldmia	ip!, {s13}
 800fd5c:	ecb5 7a01 	vldmia	r5!, {s14}
 800fd60:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fd64:	3001      	adds	r0, #1
 800fd66:	4550      	cmp	r0, sl
 800fd68:	dc01      	bgt.n	800fd6e <__kernel_rem_pio2f+0x38e>
 800fd6a:	4290      	cmp	r0, r2
 800fd6c:	ddf4      	ble.n	800fd58 <__kernel_rem_pio2f+0x378>
 800fd6e:	a858      	add	r0, sp, #352	@ 0x160
 800fd70:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800fd74:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800fd78:	3b01      	subs	r3, #1
 800fd7a:	e735      	b.n	800fbe8 <__kernel_rem_pio2f+0x208>
 800fd7c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fd7e:	2b02      	cmp	r3, #2
 800fd80:	dc09      	bgt.n	800fd96 <__kernel_rem_pio2f+0x3b6>
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	dc27      	bgt.n	800fdd6 <__kernel_rem_pio2f+0x3f6>
 800fd86:	d040      	beq.n	800fe0a <__kernel_rem_pio2f+0x42a>
 800fd88:	f009 0007 	and.w	r0, r9, #7
 800fd8c:	b059      	add	sp, #356	@ 0x164
 800fd8e:	ecbd 8b04 	vpop	{d8-d9}
 800fd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd96:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800fd98:	2b03      	cmp	r3, #3
 800fd9a:	d1f5      	bne.n	800fd88 <__kernel_rem_pio2f+0x3a8>
 800fd9c:	aa30      	add	r2, sp, #192	@ 0xc0
 800fd9e:	1f0b      	subs	r3, r1, #4
 800fda0:	4413      	add	r3, r2
 800fda2:	461a      	mov	r2, r3
 800fda4:	4620      	mov	r0, r4
 800fda6:	2800      	cmp	r0, #0
 800fda8:	dc50      	bgt.n	800fe4c <__kernel_rem_pio2f+0x46c>
 800fdaa:	4622      	mov	r2, r4
 800fdac:	2a01      	cmp	r2, #1
 800fdae:	dc5d      	bgt.n	800fe6c <__kernel_rem_pio2f+0x48c>
 800fdb0:	ab30      	add	r3, sp, #192	@ 0xc0
 800fdb2:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800fcd8 <__kernel_rem_pio2f+0x2f8>
 800fdb6:	440b      	add	r3, r1
 800fdb8:	2c01      	cmp	r4, #1
 800fdba:	dc67      	bgt.n	800fe8c <__kernel_rem_pio2f+0x4ac>
 800fdbc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800fdc0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800fdc4:	2e00      	cmp	r6, #0
 800fdc6:	d167      	bne.n	800fe98 <__kernel_rem_pio2f+0x4b8>
 800fdc8:	edc7 6a00 	vstr	s13, [r7]
 800fdcc:	ed87 7a01 	vstr	s14, [r7, #4]
 800fdd0:	edc7 7a02 	vstr	s15, [r7, #8]
 800fdd4:	e7d8      	b.n	800fd88 <__kernel_rem_pio2f+0x3a8>
 800fdd6:	ab30      	add	r3, sp, #192	@ 0xc0
 800fdd8:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800fcd8 <__kernel_rem_pio2f+0x2f8>
 800fddc:	440b      	add	r3, r1
 800fdde:	4622      	mov	r2, r4
 800fde0:	2a00      	cmp	r2, #0
 800fde2:	da24      	bge.n	800fe2e <__kernel_rem_pio2f+0x44e>
 800fde4:	b34e      	cbz	r6, 800fe3a <__kernel_rem_pio2f+0x45a>
 800fde6:	eef1 7a47 	vneg.f32	s15, s14
 800fdea:	edc7 7a00 	vstr	s15, [r7]
 800fdee:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800fdf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdf6:	aa31      	add	r2, sp, #196	@ 0xc4
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	429c      	cmp	r4, r3
 800fdfc:	da20      	bge.n	800fe40 <__kernel_rem_pio2f+0x460>
 800fdfe:	b10e      	cbz	r6, 800fe04 <__kernel_rem_pio2f+0x424>
 800fe00:	eef1 7a67 	vneg.f32	s15, s15
 800fe04:	edc7 7a01 	vstr	s15, [r7, #4]
 800fe08:	e7be      	b.n	800fd88 <__kernel_rem_pio2f+0x3a8>
 800fe0a:	ab30      	add	r3, sp, #192	@ 0xc0
 800fe0c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800fcd8 <__kernel_rem_pio2f+0x2f8>
 800fe10:	440b      	add	r3, r1
 800fe12:	2c00      	cmp	r4, #0
 800fe14:	da05      	bge.n	800fe22 <__kernel_rem_pio2f+0x442>
 800fe16:	b10e      	cbz	r6, 800fe1c <__kernel_rem_pio2f+0x43c>
 800fe18:	eef1 7a67 	vneg.f32	s15, s15
 800fe1c:	edc7 7a00 	vstr	s15, [r7]
 800fe20:	e7b2      	b.n	800fd88 <__kernel_rem_pio2f+0x3a8>
 800fe22:	ed33 7a01 	vldmdb	r3!, {s14}
 800fe26:	3c01      	subs	r4, #1
 800fe28:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe2c:	e7f1      	b.n	800fe12 <__kernel_rem_pio2f+0x432>
 800fe2e:	ed73 7a01 	vldmdb	r3!, {s15}
 800fe32:	3a01      	subs	r2, #1
 800fe34:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fe38:	e7d2      	b.n	800fde0 <__kernel_rem_pio2f+0x400>
 800fe3a:	eef0 7a47 	vmov.f32	s15, s14
 800fe3e:	e7d4      	b.n	800fdea <__kernel_rem_pio2f+0x40a>
 800fe40:	ecb2 7a01 	vldmia	r2!, {s14}
 800fe44:	3301      	adds	r3, #1
 800fe46:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe4a:	e7d6      	b.n	800fdfa <__kernel_rem_pio2f+0x41a>
 800fe4c:	ed72 7a01 	vldmdb	r2!, {s15}
 800fe50:	edd2 6a01 	vldr	s13, [r2, #4]
 800fe54:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fe58:	3801      	subs	r0, #1
 800fe5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe5e:	ed82 7a00 	vstr	s14, [r2]
 800fe62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe66:	edc2 7a01 	vstr	s15, [r2, #4]
 800fe6a:	e79c      	b.n	800fda6 <__kernel_rem_pio2f+0x3c6>
 800fe6c:	ed73 7a01 	vldmdb	r3!, {s15}
 800fe70:	edd3 6a01 	vldr	s13, [r3, #4]
 800fe74:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fe78:	3a01      	subs	r2, #1
 800fe7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe7e:	ed83 7a00 	vstr	s14, [r3]
 800fe82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe86:	edc3 7a01 	vstr	s15, [r3, #4]
 800fe8a:	e78f      	b.n	800fdac <__kernel_rem_pio2f+0x3cc>
 800fe8c:	ed33 7a01 	vldmdb	r3!, {s14}
 800fe90:	3c01      	subs	r4, #1
 800fe92:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe96:	e78f      	b.n	800fdb8 <__kernel_rem_pio2f+0x3d8>
 800fe98:	eef1 6a66 	vneg.f32	s13, s13
 800fe9c:	eeb1 7a47 	vneg.f32	s14, s14
 800fea0:	edc7 6a00 	vstr	s13, [r7]
 800fea4:	ed87 7a01 	vstr	s14, [r7, #4]
 800fea8:	eef1 7a67 	vneg.f32	s15, s15
 800feac:	e790      	b.n	800fdd0 <__kernel_rem_pio2f+0x3f0>
 800feae:	bf00      	nop

0800feb0 <floor>:
 800feb0:	ec51 0b10 	vmov	r0, r1, d0
 800feb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800feb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800febc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800fec0:	2e13      	cmp	r6, #19
 800fec2:	460c      	mov	r4, r1
 800fec4:	4605      	mov	r5, r0
 800fec6:	4680      	mov	r8, r0
 800fec8:	dc34      	bgt.n	800ff34 <floor+0x84>
 800feca:	2e00      	cmp	r6, #0
 800fecc:	da17      	bge.n	800fefe <floor+0x4e>
 800fece:	a332      	add	r3, pc, #200	@ (adr r3, 800ff98 <floor+0xe8>)
 800fed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fed4:	f7f0 f9a6 	bl	8000224 <__adddf3>
 800fed8:	2200      	movs	r2, #0
 800feda:	2300      	movs	r3, #0
 800fedc:	f7f0 fde8 	bl	8000ab0 <__aeabi_dcmpgt>
 800fee0:	b150      	cbz	r0, 800fef8 <floor+0x48>
 800fee2:	2c00      	cmp	r4, #0
 800fee4:	da55      	bge.n	800ff92 <floor+0xe2>
 800fee6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800feea:	432c      	orrs	r4, r5
 800feec:	2500      	movs	r5, #0
 800feee:	42ac      	cmp	r4, r5
 800fef0:	4c2b      	ldr	r4, [pc, #172]	@ (800ffa0 <floor+0xf0>)
 800fef2:	bf08      	it	eq
 800fef4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800fef8:	4621      	mov	r1, r4
 800fefa:	4628      	mov	r0, r5
 800fefc:	e023      	b.n	800ff46 <floor+0x96>
 800fefe:	4f29      	ldr	r7, [pc, #164]	@ (800ffa4 <floor+0xf4>)
 800ff00:	4137      	asrs	r7, r6
 800ff02:	ea01 0307 	and.w	r3, r1, r7
 800ff06:	4303      	orrs	r3, r0
 800ff08:	d01d      	beq.n	800ff46 <floor+0x96>
 800ff0a:	a323      	add	r3, pc, #140	@ (adr r3, 800ff98 <floor+0xe8>)
 800ff0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff10:	f7f0 f988 	bl	8000224 <__adddf3>
 800ff14:	2200      	movs	r2, #0
 800ff16:	2300      	movs	r3, #0
 800ff18:	f7f0 fdca 	bl	8000ab0 <__aeabi_dcmpgt>
 800ff1c:	2800      	cmp	r0, #0
 800ff1e:	d0eb      	beq.n	800fef8 <floor+0x48>
 800ff20:	2c00      	cmp	r4, #0
 800ff22:	bfbe      	ittt	lt
 800ff24:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800ff28:	4133      	asrlt	r3, r6
 800ff2a:	18e4      	addlt	r4, r4, r3
 800ff2c:	ea24 0407 	bic.w	r4, r4, r7
 800ff30:	2500      	movs	r5, #0
 800ff32:	e7e1      	b.n	800fef8 <floor+0x48>
 800ff34:	2e33      	cmp	r6, #51	@ 0x33
 800ff36:	dd0a      	ble.n	800ff4e <floor+0x9e>
 800ff38:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800ff3c:	d103      	bne.n	800ff46 <floor+0x96>
 800ff3e:	4602      	mov	r2, r0
 800ff40:	460b      	mov	r3, r1
 800ff42:	f7f0 f96f 	bl	8000224 <__adddf3>
 800ff46:	ec41 0b10 	vmov	d0, r0, r1
 800ff4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff4e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800ff52:	f04f 37ff 	mov.w	r7, #4294967295
 800ff56:	40df      	lsrs	r7, r3
 800ff58:	4207      	tst	r7, r0
 800ff5a:	d0f4      	beq.n	800ff46 <floor+0x96>
 800ff5c:	a30e      	add	r3, pc, #56	@ (adr r3, 800ff98 <floor+0xe8>)
 800ff5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff62:	f7f0 f95f 	bl	8000224 <__adddf3>
 800ff66:	2200      	movs	r2, #0
 800ff68:	2300      	movs	r3, #0
 800ff6a:	f7f0 fda1 	bl	8000ab0 <__aeabi_dcmpgt>
 800ff6e:	2800      	cmp	r0, #0
 800ff70:	d0c2      	beq.n	800fef8 <floor+0x48>
 800ff72:	2c00      	cmp	r4, #0
 800ff74:	da0a      	bge.n	800ff8c <floor+0xdc>
 800ff76:	2e14      	cmp	r6, #20
 800ff78:	d101      	bne.n	800ff7e <floor+0xce>
 800ff7a:	3401      	adds	r4, #1
 800ff7c:	e006      	b.n	800ff8c <floor+0xdc>
 800ff7e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800ff82:	2301      	movs	r3, #1
 800ff84:	40b3      	lsls	r3, r6
 800ff86:	441d      	add	r5, r3
 800ff88:	4545      	cmp	r5, r8
 800ff8a:	d3f6      	bcc.n	800ff7a <floor+0xca>
 800ff8c:	ea25 0507 	bic.w	r5, r5, r7
 800ff90:	e7b2      	b.n	800fef8 <floor+0x48>
 800ff92:	2500      	movs	r5, #0
 800ff94:	462c      	mov	r4, r5
 800ff96:	e7af      	b.n	800fef8 <floor+0x48>
 800ff98:	8800759c 	.word	0x8800759c
 800ff9c:	7e37e43c 	.word	0x7e37e43c
 800ffa0:	bff00000 	.word	0xbff00000
 800ffa4:	000fffff 	.word	0x000fffff

0800ffa8 <floorf>:
 800ffa8:	ee10 3a10 	vmov	r3, s0
 800ffac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ffb0:	3a7f      	subs	r2, #127	@ 0x7f
 800ffb2:	2a16      	cmp	r2, #22
 800ffb4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ffb8:	dc2b      	bgt.n	8010012 <floorf+0x6a>
 800ffba:	2a00      	cmp	r2, #0
 800ffbc:	da12      	bge.n	800ffe4 <floorf+0x3c>
 800ffbe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010024 <floorf+0x7c>
 800ffc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ffc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ffca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffce:	dd06      	ble.n	800ffde <floorf+0x36>
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	da24      	bge.n	801001e <floorf+0x76>
 800ffd4:	2900      	cmp	r1, #0
 800ffd6:	4b14      	ldr	r3, [pc, #80]	@ (8010028 <floorf+0x80>)
 800ffd8:	bf08      	it	eq
 800ffda:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800ffde:	ee00 3a10 	vmov	s0, r3
 800ffe2:	4770      	bx	lr
 800ffe4:	4911      	ldr	r1, [pc, #68]	@ (801002c <floorf+0x84>)
 800ffe6:	4111      	asrs	r1, r2
 800ffe8:	420b      	tst	r3, r1
 800ffea:	d0fa      	beq.n	800ffe2 <floorf+0x3a>
 800ffec:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010024 <floorf+0x7c>
 800fff0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fff4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fffc:	ddef      	ble.n	800ffde <floorf+0x36>
 800fffe:	2b00      	cmp	r3, #0
 8010000:	bfbe      	ittt	lt
 8010002:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8010006:	fa40 f202 	asrlt.w	r2, r0, r2
 801000a:	189b      	addlt	r3, r3, r2
 801000c:	ea23 0301 	bic.w	r3, r3, r1
 8010010:	e7e5      	b.n	800ffde <floorf+0x36>
 8010012:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010016:	d3e4      	bcc.n	800ffe2 <floorf+0x3a>
 8010018:	ee30 0a00 	vadd.f32	s0, s0, s0
 801001c:	4770      	bx	lr
 801001e:	2300      	movs	r3, #0
 8010020:	e7dd      	b.n	800ffde <floorf+0x36>
 8010022:	bf00      	nop
 8010024:	7149f2ca 	.word	0x7149f2ca
 8010028:	bf800000 	.word	0xbf800000
 801002c:	007fffff 	.word	0x007fffff

08010030 <_init>:
 8010030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010032:	bf00      	nop
 8010034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010036:	bc08      	pop	{r3}
 8010038:	469e      	mov	lr, r3
 801003a:	4770      	bx	lr

0801003c <_fini>:
 801003c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801003e:	bf00      	nop
 8010040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010042:	bc08      	pop	{r3}
 8010044:	469e      	mov	lr, r3
 8010046:	4770      	bx	lr
